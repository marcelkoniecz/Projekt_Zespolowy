
controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000af2c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003670  0800b0c0  0800b0c0  0001b0c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e730  0800e730  000201ec  2**0
                  CONTENTS
  4 .ARM          00000008  0800e730  0800e730  0001e730  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e738  0800e738  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e738  0800e738  0001e738  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e73c  0800e73c  0001e73c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  0800e740  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000a264  200001ec  0800e92c  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000a450  0800e92c  0002a450  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c82b  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000399f  00000000  00000000  0003ca47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012b8  00000000  00000000  000403e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001130  00000000  00000000  000416a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002aefd  00000000  00000000  000427d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017e78  00000000  00000000  0006d6cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00102880  00000000  00000000  00085545  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00187dc5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005ff4  00000000  00000000  00187e18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001ec 	.word	0x200001ec
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b0a4 	.word	0x0800b0a4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f0 	.word	0x200001f0
 80001cc:	0800b0a4 	.word	0x0800b0a4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b96e 	b.w	8000e9c <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468c      	mov	ip, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	f040 8083 	bne.w	8000cee <__udivmoddi4+0x116>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4617      	mov	r7, r2
 8000bec:	d947      	bls.n	8000c7e <__udivmoddi4+0xa6>
 8000bee:	fab2 f282 	clz	r2, r2
 8000bf2:	b142      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	f1c2 0020 	rsb	r0, r2, #32
 8000bf8:	fa24 f000 	lsr.w	r0, r4, r0
 8000bfc:	4091      	lsls	r1, r2
 8000bfe:	4097      	lsls	r7, r2
 8000c00:	ea40 0c01 	orr.w	ip, r0, r1
 8000c04:	4094      	lsls	r4, r2
 8000c06:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c0a:	0c23      	lsrs	r3, r4, #16
 8000c0c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c10:	fa1f fe87 	uxth.w	lr, r7
 8000c14:	fb08 c116 	mls	r1, r8, r6, ip
 8000c18:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c20:	4299      	cmp	r1, r3
 8000c22:	d909      	bls.n	8000c38 <__udivmoddi4+0x60>
 8000c24:	18fb      	adds	r3, r7, r3
 8000c26:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2a:	f080 8119 	bcs.w	8000e60 <__udivmoddi4+0x288>
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	f240 8116 	bls.w	8000e60 <__udivmoddi4+0x288>
 8000c34:	3e02      	subs	r6, #2
 8000c36:	443b      	add	r3, r7
 8000c38:	1a5b      	subs	r3, r3, r1
 8000c3a:	b2a4      	uxth	r4, r4
 8000c3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c40:	fb08 3310 	mls	r3, r8, r0, r3
 8000c44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c48:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c4c:	45a6      	cmp	lr, r4
 8000c4e:	d909      	bls.n	8000c64 <__udivmoddi4+0x8c>
 8000c50:	193c      	adds	r4, r7, r4
 8000c52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c56:	f080 8105 	bcs.w	8000e64 <__udivmoddi4+0x28c>
 8000c5a:	45a6      	cmp	lr, r4
 8000c5c:	f240 8102 	bls.w	8000e64 <__udivmoddi4+0x28c>
 8000c60:	3802      	subs	r0, #2
 8000c62:	443c      	add	r4, r7
 8000c64:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c68:	eba4 040e 	sub.w	r4, r4, lr
 8000c6c:	2600      	movs	r6, #0
 8000c6e:	b11d      	cbz	r5, 8000c78 <__udivmoddi4+0xa0>
 8000c70:	40d4      	lsrs	r4, r2
 8000c72:	2300      	movs	r3, #0
 8000c74:	e9c5 4300 	strd	r4, r3, [r5]
 8000c78:	4631      	mov	r1, r6
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	b902      	cbnz	r2, 8000c82 <__udivmoddi4+0xaa>
 8000c80:	deff      	udf	#255	; 0xff
 8000c82:	fab2 f282 	clz	r2, r2
 8000c86:	2a00      	cmp	r2, #0
 8000c88:	d150      	bne.n	8000d2c <__udivmoddi4+0x154>
 8000c8a:	1bcb      	subs	r3, r1, r7
 8000c8c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c90:	fa1f f887 	uxth.w	r8, r7
 8000c94:	2601      	movs	r6, #1
 8000c96:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c9a:	0c21      	lsrs	r1, r4, #16
 8000c9c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ca0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ca4:	fb08 f30c 	mul.w	r3, r8, ip
 8000ca8:	428b      	cmp	r3, r1
 8000caa:	d907      	bls.n	8000cbc <__udivmoddi4+0xe4>
 8000cac:	1879      	adds	r1, r7, r1
 8000cae:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cb2:	d202      	bcs.n	8000cba <__udivmoddi4+0xe2>
 8000cb4:	428b      	cmp	r3, r1
 8000cb6:	f200 80e9 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cba:	4684      	mov	ip, r0
 8000cbc:	1ac9      	subs	r1, r1, r3
 8000cbe:	b2a3      	uxth	r3, r4
 8000cc0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cc4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cc8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ccc:	fb08 f800 	mul.w	r8, r8, r0
 8000cd0:	45a0      	cmp	r8, r4
 8000cd2:	d907      	bls.n	8000ce4 <__udivmoddi4+0x10c>
 8000cd4:	193c      	adds	r4, r7, r4
 8000cd6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cda:	d202      	bcs.n	8000ce2 <__udivmoddi4+0x10a>
 8000cdc:	45a0      	cmp	r8, r4
 8000cde:	f200 80d9 	bhi.w	8000e94 <__udivmoddi4+0x2bc>
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	eba4 0408 	sub.w	r4, r4, r8
 8000ce8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cec:	e7bf      	b.n	8000c6e <__udivmoddi4+0x96>
 8000cee:	428b      	cmp	r3, r1
 8000cf0:	d909      	bls.n	8000d06 <__udivmoddi4+0x12e>
 8000cf2:	2d00      	cmp	r5, #0
 8000cf4:	f000 80b1 	beq.w	8000e5a <__udivmoddi4+0x282>
 8000cf8:	2600      	movs	r6, #0
 8000cfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000cfe:	4630      	mov	r0, r6
 8000d00:	4631      	mov	r1, r6
 8000d02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d06:	fab3 f683 	clz	r6, r3
 8000d0a:	2e00      	cmp	r6, #0
 8000d0c:	d14a      	bne.n	8000da4 <__udivmoddi4+0x1cc>
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d302      	bcc.n	8000d18 <__udivmoddi4+0x140>
 8000d12:	4282      	cmp	r2, r0
 8000d14:	f200 80b8 	bhi.w	8000e88 <__udivmoddi4+0x2b0>
 8000d18:	1a84      	subs	r4, r0, r2
 8000d1a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d1e:	2001      	movs	r0, #1
 8000d20:	468c      	mov	ip, r1
 8000d22:	2d00      	cmp	r5, #0
 8000d24:	d0a8      	beq.n	8000c78 <__udivmoddi4+0xa0>
 8000d26:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d2a:	e7a5      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000d2c:	f1c2 0320 	rsb	r3, r2, #32
 8000d30:	fa20 f603 	lsr.w	r6, r0, r3
 8000d34:	4097      	lsls	r7, r2
 8000d36:	fa01 f002 	lsl.w	r0, r1, r2
 8000d3a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d3e:	40d9      	lsrs	r1, r3
 8000d40:	4330      	orrs	r0, r6
 8000d42:	0c03      	lsrs	r3, r0, #16
 8000d44:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d48:	fa1f f887 	uxth.w	r8, r7
 8000d4c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d50:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d54:	fb06 f108 	mul.w	r1, r6, r8
 8000d58:	4299      	cmp	r1, r3
 8000d5a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x19c>
 8000d60:	18fb      	adds	r3, r7, r3
 8000d62:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d66:	f080 808d 	bcs.w	8000e84 <__udivmoddi4+0x2ac>
 8000d6a:	4299      	cmp	r1, r3
 8000d6c:	f240 808a 	bls.w	8000e84 <__udivmoddi4+0x2ac>
 8000d70:	3e02      	subs	r6, #2
 8000d72:	443b      	add	r3, r7
 8000d74:	1a5b      	subs	r3, r3, r1
 8000d76:	b281      	uxth	r1, r0
 8000d78:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d7c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d84:	fb00 f308 	mul.w	r3, r0, r8
 8000d88:	428b      	cmp	r3, r1
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0x1c4>
 8000d8c:	1879      	adds	r1, r7, r1
 8000d8e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d92:	d273      	bcs.n	8000e7c <__udivmoddi4+0x2a4>
 8000d94:	428b      	cmp	r3, r1
 8000d96:	d971      	bls.n	8000e7c <__udivmoddi4+0x2a4>
 8000d98:	3802      	subs	r0, #2
 8000d9a:	4439      	add	r1, r7
 8000d9c:	1acb      	subs	r3, r1, r3
 8000d9e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000da2:	e778      	b.n	8000c96 <__udivmoddi4+0xbe>
 8000da4:	f1c6 0c20 	rsb	ip, r6, #32
 8000da8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dac:	fa22 f30c 	lsr.w	r3, r2, ip
 8000db0:	431c      	orrs	r4, r3
 8000db2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000db6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dba:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dbe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000dc2:	431f      	orrs	r7, r3
 8000dc4:	0c3b      	lsrs	r3, r7, #16
 8000dc6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dca:	fa1f f884 	uxth.w	r8, r4
 8000dce:	fb0e 1119 	mls	r1, lr, r9, r1
 8000dd2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000dd6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dda:	458a      	cmp	sl, r1
 8000ddc:	fa02 f206 	lsl.w	r2, r2, r6
 8000de0:	fa00 f306 	lsl.w	r3, r0, r6
 8000de4:	d908      	bls.n	8000df8 <__udivmoddi4+0x220>
 8000de6:	1861      	adds	r1, r4, r1
 8000de8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dec:	d248      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000dee:	458a      	cmp	sl, r1
 8000df0:	d946      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000df2:	f1a9 0902 	sub.w	r9, r9, #2
 8000df6:	4421      	add	r1, r4
 8000df8:	eba1 010a 	sub.w	r1, r1, sl
 8000dfc:	b2bf      	uxth	r7, r7
 8000dfe:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e02:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e06:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e0a:	fb00 f808 	mul.w	r8, r0, r8
 8000e0e:	45b8      	cmp	r8, r7
 8000e10:	d907      	bls.n	8000e22 <__udivmoddi4+0x24a>
 8000e12:	19e7      	adds	r7, r4, r7
 8000e14:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e18:	d22e      	bcs.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1a:	45b8      	cmp	r8, r7
 8000e1c:	d92c      	bls.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1e:	3802      	subs	r0, #2
 8000e20:	4427      	add	r7, r4
 8000e22:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e26:	eba7 0708 	sub.w	r7, r7, r8
 8000e2a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e2e:	454f      	cmp	r7, r9
 8000e30:	46c6      	mov	lr, r8
 8000e32:	4649      	mov	r1, r9
 8000e34:	d31a      	bcc.n	8000e6c <__udivmoddi4+0x294>
 8000e36:	d017      	beq.n	8000e68 <__udivmoddi4+0x290>
 8000e38:	b15d      	cbz	r5, 8000e52 <__udivmoddi4+0x27a>
 8000e3a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e3e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e42:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e46:	40f2      	lsrs	r2, r6
 8000e48:	ea4c 0202 	orr.w	r2, ip, r2
 8000e4c:	40f7      	lsrs	r7, r6
 8000e4e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e52:	2600      	movs	r6, #0
 8000e54:	4631      	mov	r1, r6
 8000e56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e5a:	462e      	mov	r6, r5
 8000e5c:	4628      	mov	r0, r5
 8000e5e:	e70b      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000e60:	4606      	mov	r6, r0
 8000e62:	e6e9      	b.n	8000c38 <__udivmoddi4+0x60>
 8000e64:	4618      	mov	r0, r3
 8000e66:	e6fd      	b.n	8000c64 <__udivmoddi4+0x8c>
 8000e68:	4543      	cmp	r3, r8
 8000e6a:	d2e5      	bcs.n	8000e38 <__udivmoddi4+0x260>
 8000e6c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e70:	eb69 0104 	sbc.w	r1, r9, r4
 8000e74:	3801      	subs	r0, #1
 8000e76:	e7df      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	e7d2      	b.n	8000e22 <__udivmoddi4+0x24a>
 8000e7c:	4660      	mov	r0, ip
 8000e7e:	e78d      	b.n	8000d9c <__udivmoddi4+0x1c4>
 8000e80:	4681      	mov	r9, r0
 8000e82:	e7b9      	b.n	8000df8 <__udivmoddi4+0x220>
 8000e84:	4666      	mov	r6, ip
 8000e86:	e775      	b.n	8000d74 <__udivmoddi4+0x19c>
 8000e88:	4630      	mov	r0, r6
 8000e8a:	e74a      	b.n	8000d22 <__udivmoddi4+0x14a>
 8000e8c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e90:	4439      	add	r1, r7
 8000e92:	e713      	b.n	8000cbc <__udivmoddi4+0xe4>
 8000e94:	3802      	subs	r0, #2
 8000e96:	443c      	add	r4, r7
 8000e98:	e724      	b.n	8000ce4 <__udivmoddi4+0x10c>
 8000e9a:	bf00      	nop

08000e9c <__aeabi_idiv0>:
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop

08000ea0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b08a      	sub	sp, #40	; 0x28
 8000ea4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000ea6:	f107 031c 	add.w	r3, r7, #28
 8000eaa:	2200      	movs	r2, #0
 8000eac:	601a      	str	r2, [r3, #0]
 8000eae:	605a      	str	r2, [r3, #4]
 8000eb0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000eb2:	1d3b      	adds	r3, r7, #4
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	601a      	str	r2, [r3, #0]
 8000eb8:	605a      	str	r2, [r3, #4]
 8000eba:	609a      	str	r2, [r3, #8]
 8000ebc:	60da      	str	r2, [r3, #12]
 8000ebe:	611a      	str	r2, [r3, #16]
 8000ec0:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000ec2:	4b37      	ldr	r3, [pc, #220]	; (8000fa0 <MX_ADC1_Init+0x100>)
 8000ec4:	4a37      	ldr	r2, [pc, #220]	; (8000fa4 <MX_ADC1_Init+0x104>)
 8000ec6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000ec8:	4b35      	ldr	r3, [pc, #212]	; (8000fa0 <MX_ADC1_Init+0x100>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ece:	4b34      	ldr	r3, [pc, #208]	; (8000fa0 <MX_ADC1_Init+0x100>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ed4:	4b32      	ldr	r3, [pc, #200]	; (8000fa0 <MX_ADC1_Init+0x100>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000eda:	4b31      	ldr	r3, [pc, #196]	; (8000fa0 <MX_ADC1_Init+0x100>)
 8000edc:	2201      	movs	r2, #1
 8000ede:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ee0:	4b2f      	ldr	r3, [pc, #188]	; (8000fa0 <MX_ADC1_Init+0x100>)
 8000ee2:	2204      	movs	r2, #4
 8000ee4:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000ee6:	4b2e      	ldr	r3, [pc, #184]	; (8000fa0 <MX_ADC1_Init+0x100>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000eec:	4b2c      	ldr	r3, [pc, #176]	; (8000fa0 <MX_ADC1_Init+0x100>)
 8000eee:	2201      	movs	r2, #1
 8000ef0:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 2;
 8000ef2:	4b2b      	ldr	r3, [pc, #172]	; (8000fa0 <MX_ADC1_Init+0x100>)
 8000ef4:	2202      	movs	r2, #2
 8000ef6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ef8:	4b29      	ldr	r3, [pc, #164]	; (8000fa0 <MX_ADC1_Init+0x100>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f00:	4b27      	ldr	r3, [pc, #156]	; (8000fa0 <MX_ADC1_Init+0x100>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f06:	4b26      	ldr	r3, [pc, #152]	; (8000fa0 <MX_ADC1_Init+0x100>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000f0c:	4b24      	ldr	r3, [pc, #144]	; (8000fa0 <MX_ADC1_Init+0x100>)
 8000f0e:	2201      	movs	r2, #1
 8000f10:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000f14:	4b22      	ldr	r3, [pc, #136]	; (8000fa0 <MX_ADC1_Init+0x100>)
 8000f16:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f1a:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000f1c:	4b20      	ldr	r3, [pc, #128]	; (8000fa0 <MX_ADC1_Init+0x100>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f24:	481e      	ldr	r0, [pc, #120]	; (8000fa0 <MX_ADC1_Init+0x100>)
 8000f26:	f001 f98f 	bl	8002248 <HAL_ADC_Init>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d001      	beq.n	8000f34 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000f30:	f000 fbe2 	bl	80016f8 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000f34:	2300      	movs	r3, #0
 8000f36:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000f38:	f107 031c 	add.w	r3, r7, #28
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	4818      	ldr	r0, [pc, #96]	; (8000fa0 <MX_ADC1_Init+0x100>)
 8000f40:	f002 f9aa 	bl	8003298 <HAL_ADCEx_MultiModeConfigChannel>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d001      	beq.n	8000f4e <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8000f4a:	f000 fbd5 	bl	80016f8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000f4e:	4b16      	ldr	r3, [pc, #88]	; (8000fa8 <MX_ADC1_Init+0x108>)
 8000f50:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f52:	2306      	movs	r3, #6
 8000f54:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 8000f56:	2305      	movs	r3, #5
 8000f58:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000f5a:	237f      	movs	r3, #127	; 0x7f
 8000f5c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000f5e:	2304      	movs	r3, #4
 8000f60:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000f62:	2300      	movs	r3, #0
 8000f64:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f66:	1d3b      	adds	r3, r7, #4
 8000f68:	4619      	mov	r1, r3
 8000f6a:	480d      	ldr	r0, [pc, #52]	; (8000fa0 <MX_ADC1_Init+0x100>)
 8000f6c:	f001 fb9c 	bl	80026a8 <HAL_ADC_ConfigChannel>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d001      	beq.n	8000f7a <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 8000f76:	f000 fbbf 	bl	80016f8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000f7a:	4b0c      	ldr	r3, [pc, #48]	; (8000fac <MX_ADC1_Init+0x10c>)
 8000f7c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000f7e:	230c      	movs	r3, #12
 8000f80:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f82:	1d3b      	adds	r3, r7, #4
 8000f84:	4619      	mov	r1, r3
 8000f86:	4806      	ldr	r0, [pc, #24]	; (8000fa0 <MX_ADC1_Init+0x100>)
 8000f88:	f001 fb8e 	bl	80026a8 <HAL_ADC_ConfigChannel>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d001      	beq.n	8000f96 <MX_ADC1_Init+0xf6>
  {
    Error_Handler();
 8000f92:	f000 fbb1 	bl	80016f8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f96:	bf00      	nop
 8000f98:	3728      	adds	r7, #40	; 0x28
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	2000a224 	.word	0x2000a224
 8000fa4:	50040000 	.word	0x50040000
 8000fa8:	04300002 	.word	0x04300002
 8000fac:	08600004 	.word	0x08600004

08000fb0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b0ac      	sub	sp, #176	; 0xb0
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	601a      	str	r2, [r3, #0]
 8000fc0:	605a      	str	r2, [r3, #4]
 8000fc2:	609a      	str	r2, [r3, #8]
 8000fc4:	60da      	str	r2, [r3, #12]
 8000fc6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fc8:	f107 0314 	add.w	r3, r7, #20
 8000fcc:	2288      	movs	r2, #136	; 0x88
 8000fce:	2100      	movs	r1, #0
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f006 fe0b 	bl	8007bec <memset>
  if(adcHandle->Instance==ADC1)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	4a3c      	ldr	r2, [pc, #240]	; (80010cc <HAL_ADC_MspInit+0x11c>)
 8000fdc:	4293      	cmp	r3, r2
 8000fde:	d171      	bne.n	80010c4 <HAL_ADC_MspInit+0x114>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000fe0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000fe4:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000fe6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000fea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8000ff6:	2310      	movs	r3, #16
 8000ff8:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000ffa:	2307      	movs	r3, #7
 8000ffc:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000ffe:	2302      	movs	r3, #2
 8001000:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001002:	2302      	movs	r3, #2
 8001004:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001006:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800100a:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800100c:	f107 0314 	add.w	r3, r7, #20
 8001010:	4618      	mov	r0, r3
 8001012:	f003 fd8b 	bl	8004b2c <HAL_RCCEx_PeriphCLKConfig>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d001      	beq.n	8001020 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 800101c:	f000 fb6c 	bl	80016f8 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001020:	4b2b      	ldr	r3, [pc, #172]	; (80010d0 <HAL_ADC_MspInit+0x120>)
 8001022:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001024:	4a2a      	ldr	r2, [pc, #168]	; (80010d0 <HAL_ADC_MspInit+0x120>)
 8001026:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800102a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800102c:	4b28      	ldr	r3, [pc, #160]	; (80010d0 <HAL_ADC_MspInit+0x120>)
 800102e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001030:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001034:	613b      	str	r3, [r7, #16]
 8001036:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001038:	4b25      	ldr	r3, [pc, #148]	; (80010d0 <HAL_ADC_MspInit+0x120>)
 800103a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800103c:	4a24      	ldr	r2, [pc, #144]	; (80010d0 <HAL_ADC_MspInit+0x120>)
 800103e:	f043 0304 	orr.w	r3, r3, #4
 8001042:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001044:	4b22      	ldr	r3, [pc, #136]	; (80010d0 <HAL_ADC_MspInit+0x120>)
 8001046:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001048:	f003 0304 	and.w	r3, r3, #4
 800104c:	60fb      	str	r3, [r7, #12]
 800104e:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    PC1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001050:	2303      	movs	r3, #3
 8001052:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001056:	230b      	movs	r3, #11
 8001058:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105c:	2300      	movs	r3, #0
 800105e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001062:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001066:	4619      	mov	r1, r3
 8001068:	481a      	ldr	r0, [pc, #104]	; (80010d4 <HAL_ADC_MspInit+0x124>)
 800106a:	f002 fd4d 	bl	8003b08 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800106e:	4b1a      	ldr	r3, [pc, #104]	; (80010d8 <HAL_ADC_MspInit+0x128>)
 8001070:	4a1a      	ldr	r2, [pc, #104]	; (80010dc <HAL_ADC_MspInit+0x12c>)
 8001072:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8001074:	4b18      	ldr	r3, [pc, #96]	; (80010d8 <HAL_ADC_MspInit+0x128>)
 8001076:	2200      	movs	r2, #0
 8001078:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800107a:	4b17      	ldr	r3, [pc, #92]	; (80010d8 <HAL_ADC_MspInit+0x128>)
 800107c:	2200      	movs	r2, #0
 800107e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001080:	4b15      	ldr	r3, [pc, #84]	; (80010d8 <HAL_ADC_MspInit+0x128>)
 8001082:	2200      	movs	r2, #0
 8001084:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001086:	4b14      	ldr	r3, [pc, #80]	; (80010d8 <HAL_ADC_MspInit+0x128>)
 8001088:	2280      	movs	r2, #128	; 0x80
 800108a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800108c:	4b12      	ldr	r3, [pc, #72]	; (80010d8 <HAL_ADC_MspInit+0x128>)
 800108e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001092:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001094:	4b10      	ldr	r3, [pc, #64]	; (80010d8 <HAL_ADC_MspInit+0x128>)
 8001096:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800109a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800109c:	4b0e      	ldr	r3, [pc, #56]	; (80010d8 <HAL_ADC_MspInit+0x128>)
 800109e:	2220      	movs	r2, #32
 80010a0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80010a2:	4b0d      	ldr	r3, [pc, #52]	; (80010d8 <HAL_ADC_MspInit+0x128>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80010a8:	480b      	ldr	r0, [pc, #44]	; (80010d8 <HAL_ADC_MspInit+0x128>)
 80010aa:	f002 fab7 	bl	800361c <HAL_DMA_Init>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d001      	beq.n	80010b8 <HAL_ADC_MspInit+0x108>
    {
      Error_Handler();
 80010b4:	f000 fb20 	bl	80016f8 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	4a07      	ldr	r2, [pc, #28]	; (80010d8 <HAL_ADC_MspInit+0x128>)
 80010bc:	64da      	str	r2, [r3, #76]	; 0x4c
 80010be:	4a06      	ldr	r2, [pc, #24]	; (80010d8 <HAL_ADC_MspInit+0x128>)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80010c4:	bf00      	nop
 80010c6:	37b0      	adds	r7, #176	; 0xb0
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	50040000 	.word	0x50040000
 80010d0:	40021000 	.word	0x40021000
 80010d4:	48000800 	.word	0x48000800
 80010d8:	2000a288 	.word	0x2000a288
 80010dc:	40020008 	.word	0x40020008

080010e0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80010e6:	4b0c      	ldr	r3, [pc, #48]	; (8001118 <MX_DMA_Init+0x38>)
 80010e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010ea:	4a0b      	ldr	r2, [pc, #44]	; (8001118 <MX_DMA_Init+0x38>)
 80010ec:	f043 0301 	orr.w	r3, r3, #1
 80010f0:	6493      	str	r3, [r2, #72]	; 0x48
 80010f2:	4b09      	ldr	r3, [pc, #36]	; (8001118 <MX_DMA_Init+0x38>)
 80010f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010f6:	f003 0301 	and.w	r3, r3, #1
 80010fa:	607b      	str	r3, [r7, #4]
 80010fc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80010fe:	2200      	movs	r2, #0
 8001100:	2100      	movs	r1, #0
 8001102:	200b      	movs	r0, #11
 8001104:	f002 fa53 	bl	80035ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001108:	200b      	movs	r0, #11
 800110a:	f002 fa6c 	bl	80035e6 <HAL_NVIC_EnableIRQ>

}
 800110e:	bf00      	nop
 8001110:	3708      	adds	r7, #8
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	40021000 	.word	0x40021000

0800111c <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b088      	sub	sp, #32
 8001120:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001122:	f107 030c 	add.w	r3, r7, #12
 8001126:	2200      	movs	r2, #0
 8001128:	601a      	str	r2, [r3, #0]
 800112a:	605a      	str	r2, [r3, #4]
 800112c:	609a      	str	r2, [r3, #8]
 800112e:	60da      	str	r2, [r3, #12]
 8001130:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001132:	4b21      	ldr	r3, [pc, #132]	; (80011b8 <MX_GPIO_Init+0x9c>)
 8001134:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001136:	4a20      	ldr	r2, [pc, #128]	; (80011b8 <MX_GPIO_Init+0x9c>)
 8001138:	f043 0304 	orr.w	r3, r3, #4
 800113c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800113e:	4b1e      	ldr	r3, [pc, #120]	; (80011b8 <MX_GPIO_Init+0x9c>)
 8001140:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001142:	f003 0304 	and.w	r3, r3, #4
 8001146:	60bb      	str	r3, [r7, #8]
 8001148:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800114a:	4b1b      	ldr	r3, [pc, #108]	; (80011b8 <MX_GPIO_Init+0x9c>)
 800114c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800114e:	4a1a      	ldr	r2, [pc, #104]	; (80011b8 <MX_GPIO_Init+0x9c>)
 8001150:	f043 0301 	orr.w	r3, r3, #1
 8001154:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001156:	4b18      	ldr	r3, [pc, #96]	; (80011b8 <MX_GPIO_Init+0x9c>)
 8001158:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800115a:	f003 0301 	and.w	r3, r3, #1
 800115e:	607b      	str	r3, [r7, #4]
 8001160:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001162:	4b15      	ldr	r3, [pc, #84]	; (80011b8 <MX_GPIO_Init+0x9c>)
 8001164:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001166:	4a14      	ldr	r2, [pc, #80]	; (80011b8 <MX_GPIO_Init+0x9c>)
 8001168:	f043 0302 	orr.w	r3, r3, #2
 800116c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800116e:	4b12      	ldr	r3, [pc, #72]	; (80011b8 <MX_GPIO_Init+0x9c>)
 8001170:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001172:	f003 0302 	and.w	r3, r3, #2
 8001176:	603b      	str	r3, [r7, #0]
 8001178:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_RST_Pin|LCD_DC_Pin, GPIO_PIN_RESET);
 800117a:	2200      	movs	r2, #0
 800117c:	f640 0104 	movw	r1, #2052	; 0x804
 8001180:	480e      	ldr	r0, [pc, #56]	; (80011bc <MX_GPIO_Init+0xa0>)
 8001182:	f002 fe6b 	bl	8003e5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8001186:	2201      	movs	r2, #1
 8001188:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800118c:	480b      	ldr	r0, [pc, #44]	; (80011bc <MX_GPIO_Init+0xa0>)
 800118e:	f002 fe65 	bl	8003e5c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LCD_RST_Pin|LCD_DC_Pin|LCD_CS_Pin;
 8001192:	f641 0304 	movw	r3, #6148	; 0x1804
 8001196:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001198:	2301      	movs	r3, #1
 800119a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119c:	2300      	movs	r3, #0
 800119e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a0:	2300      	movs	r3, #0
 80011a2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011a4:	f107 030c 	add.w	r3, r7, #12
 80011a8:	4619      	mov	r1, r3
 80011aa:	4804      	ldr	r0, [pc, #16]	; (80011bc <MX_GPIO_Init+0xa0>)
 80011ac:	f002 fcac 	bl	8003b08 <HAL_GPIO_Init>

}
 80011b0:	bf00      	nop
 80011b2:	3720      	adds	r7, #32
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	40021000 	.word	0x40021000
 80011bc:	48000400 	.word	0x48000400

080011c0 <lcd_cmd>:

static uint16_t frame_buffer[LCD_WIDTH * LCD_HEIGHT];


static void lcd_cmd(uint8_t cmd)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	4603      	mov	r3, r0
 80011c8:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET);
 80011ca:	2200      	movs	r2, #0
 80011cc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011d0:	480c      	ldr	r0, [pc, #48]	; (8001204 <lcd_cmd+0x44>)
 80011d2:	f002 fe43 	bl	8003e5c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 80011d6:	2200      	movs	r2, #0
 80011d8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011dc:	4809      	ldr	r0, [pc, #36]	; (8001204 <lcd_cmd+0x44>)
 80011de:	f002 fe3d 	bl	8003e5c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &cmd, 1, HAL_MAX_DELAY);
 80011e2:	1df9      	adds	r1, r7, #7
 80011e4:	f04f 33ff 	mov.w	r3, #4294967295
 80011e8:	2201      	movs	r2, #1
 80011ea:	4807      	ldr	r0, [pc, #28]	; (8001208 <lcd_cmd+0x48>)
 80011ec:	f004 f9fd 	bl	80055ea <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 80011f0:	2201      	movs	r2, #1
 80011f2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011f6:	4803      	ldr	r0, [pc, #12]	; (8001204 <lcd_cmd+0x44>)
 80011f8:	f002 fe30 	bl	8003e5c <HAL_GPIO_WritePin>
}
 80011fc:	bf00      	nop
 80011fe:	3708      	adds	r7, #8
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	48000400 	.word	0x48000400
 8001208:	2000a2d0 	.word	0x2000a2d0

0800120c <lcd_data>:

static void lcd_data(uint8_t data)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0
 8001212:	4603      	mov	r3, r0
 8001214:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 8001216:	2201      	movs	r2, #1
 8001218:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800121c:	480c      	ldr	r0, [pc, #48]	; (8001250 <lcd_data+0x44>)
 800121e:	f002 fe1d 	bl	8003e5c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8001222:	2200      	movs	r2, #0
 8001224:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001228:	4809      	ldr	r0, [pc, #36]	; (8001250 <lcd_data+0x44>)
 800122a:	f002 fe17 	bl	8003e5c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &data, 1, HAL_MAX_DELAY);
 800122e:	1df9      	adds	r1, r7, #7
 8001230:	f04f 33ff 	mov.w	r3, #4294967295
 8001234:	2201      	movs	r2, #1
 8001236:	4807      	ldr	r0, [pc, #28]	; (8001254 <lcd_data+0x48>)
 8001238:	f004 f9d7 	bl	80055ea <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 800123c:	2201      	movs	r2, #1
 800123e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001242:	4803      	ldr	r0, [pc, #12]	; (8001250 <lcd_data+0x44>)
 8001244:	f002 fe0a 	bl	8003e5c <HAL_GPIO_WritePin>
}
 8001248:	bf00      	nop
 800124a:	3708      	adds	r7, #8
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	48000400 	.word	0x48000400
 8001254:	2000a2d0 	.word	0x2000a2d0

08001258 <lcd_send>:

#define CMD(x)			((x) | 0x100)

static void lcd_send(uint16_t value)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b082      	sub	sp, #8
 800125c:	af00      	add	r7, sp, #0
 800125e:	4603      	mov	r3, r0
 8001260:	80fb      	strh	r3, [r7, #6]
	if (value & 0x100) {
 8001262:	88fb      	ldrh	r3, [r7, #6]
 8001264:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001268:	2b00      	cmp	r3, #0
 800126a:	d005      	beq.n	8001278 <lcd_send+0x20>
		lcd_cmd(value);
 800126c:	88fb      	ldrh	r3, [r7, #6]
 800126e:	b2db      	uxtb	r3, r3
 8001270:	4618      	mov	r0, r3
 8001272:	f7ff ffa5 	bl	80011c0 <lcd_cmd>
	} else {
		lcd_data(value);
	}
}
 8001276:	e004      	b.n	8001282 <lcd_send+0x2a>
		lcd_data(value);
 8001278:	88fb      	ldrh	r3, [r7, #6]
 800127a:	b2db      	uxtb	r3, r3
 800127c:	4618      	mov	r0, r3
 800127e:	f7ff ffc5 	bl	800120c <lcd_data>
}
 8001282:	bf00      	nop
 8001284:	3708      	adds	r7, #8
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
	...

0800128c <lcd_init>:
  CMD(ST7735S_COLMOD), 0x05,
  CMD(ST7735S_MADCTL), 0xa0,
};

void lcd_init(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af00      	add	r7, sp, #0
  int i;

  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_RESET);
 8001292:	2200      	movs	r2, #0
 8001294:	2104      	movs	r1, #4
 8001296:	4817      	ldr	r0, [pc, #92]	; (80012f4 <lcd_init+0x68>)
 8001298:	f002 fde0 	bl	8003e5c <HAL_GPIO_WritePin>
  HAL_Delay(100);
 800129c:	2064      	movs	r0, #100	; 0x64
 800129e:	f000 fdb3 	bl	8001e08 <HAL_Delay>
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_SET);
 80012a2:	2201      	movs	r2, #1
 80012a4:	2104      	movs	r1, #4
 80012a6:	4813      	ldr	r0, [pc, #76]	; (80012f4 <lcd_init+0x68>)
 80012a8:	f002 fdd8 	bl	8003e5c <HAL_GPIO_WritePin>
  HAL_Delay(100);
 80012ac:	2064      	movs	r0, #100	; 0x64
 80012ae:	f000 fdab 	bl	8001e08 <HAL_Delay>

  for (i = 0; i < sizeof(init_table) / sizeof(uint16_t); i++) {
 80012b2:	2300      	movs	r3, #0
 80012b4:	607b      	str	r3, [r7, #4]
 80012b6:	e009      	b.n	80012cc <lcd_init+0x40>
    lcd_send(init_table[i]);
 80012b8:	4a0f      	ldr	r2, [pc, #60]	; (80012f8 <lcd_init+0x6c>)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80012c0:	4618      	mov	r0, r3
 80012c2:	f7ff ffc9 	bl	8001258 <lcd_send>
  for (i = 0; i < sizeof(init_table) / sizeof(uint16_t); i++) {
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	3301      	adds	r3, #1
 80012ca:	607b      	str	r3, [r7, #4]
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	2b4b      	cmp	r3, #75	; 0x4b
 80012d0:	d9f2      	bls.n	80012b8 <lcd_init+0x2c>
  }

  HAL_Delay(200);
 80012d2:	20c8      	movs	r0, #200	; 0xc8
 80012d4:	f000 fd98 	bl	8001e08 <HAL_Delay>

  lcd_cmd(ST7735S_SLPOUT);
 80012d8:	2011      	movs	r0, #17
 80012da:	f7ff ff71 	bl	80011c0 <lcd_cmd>
  HAL_Delay(120);
 80012de:	2078      	movs	r0, #120	; 0x78
 80012e0:	f000 fd92 	bl	8001e08 <HAL_Delay>

  lcd_cmd(ST7735S_DISPON);
 80012e4:	2029      	movs	r0, #41	; 0x29
 80012e6:	f7ff ff6b 	bl	80011c0 <lcd_cmd>
}
 80012ea:	bf00      	nop
 80012ec:	3708      	adds	r7, #8
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	48000400 	.word	0x48000400
 80012f8:	0800b100 	.word	0x0800b100

080012fc <lcd_data16>:

static void lcd_data16(uint16_t value)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0
 8001302:	4603      	mov	r3, r0
 8001304:	80fb      	strh	r3, [r7, #6]
	lcd_data(value >> 8);
 8001306:	88fb      	ldrh	r3, [r7, #6]
 8001308:	0a1b      	lsrs	r3, r3, #8
 800130a:	b29b      	uxth	r3, r3
 800130c:	b2db      	uxtb	r3, r3
 800130e:	4618      	mov	r0, r3
 8001310:	f7ff ff7c 	bl	800120c <lcd_data>
	lcd_data(value);
 8001314:	88fb      	ldrh	r3, [r7, #6]
 8001316:	b2db      	uxtb	r3, r3
 8001318:	4618      	mov	r0, r3
 800131a:	f7ff ff77 	bl	800120c <lcd_data>
}
 800131e:	bf00      	nop
 8001320:	3708      	adds	r7, #8
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}

08001326 <lcd_set_window>:

#define LCD_OFFSET_X  1
#define LCD_OFFSET_Y  2

static void lcd_set_window(int x, int y, int width, int height)
{
 8001326:	b580      	push	{r7, lr}
 8001328:	b084      	sub	sp, #16
 800132a:	af00      	add	r7, sp, #0
 800132c:	60f8      	str	r0, [r7, #12]
 800132e:	60b9      	str	r1, [r7, #8]
 8001330:	607a      	str	r2, [r7, #4]
 8001332:	603b      	str	r3, [r7, #0]
  lcd_cmd(ST7735S_CASET);
 8001334:	202a      	movs	r0, #42	; 0x2a
 8001336:	f7ff ff43 	bl	80011c0 <lcd_cmd>
  lcd_data16(LCD_OFFSET_X + x);
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	b29b      	uxth	r3, r3
 800133e:	3301      	adds	r3, #1
 8001340:	b29b      	uxth	r3, r3
 8001342:	4618      	mov	r0, r3
 8001344:	f7ff ffda 	bl	80012fc <lcd_data16>
  lcd_data16(LCD_OFFSET_X + x + width - 1);
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	b29a      	uxth	r2, r3
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	b29b      	uxth	r3, r3
 8001350:	4413      	add	r3, r2
 8001352:	b29b      	uxth	r3, r3
 8001354:	4618      	mov	r0, r3
 8001356:	f7ff ffd1 	bl	80012fc <lcd_data16>

  lcd_cmd(ST7735S_RASET);
 800135a:	202b      	movs	r0, #43	; 0x2b
 800135c:	f7ff ff30 	bl	80011c0 <lcd_cmd>
  lcd_data16(LCD_OFFSET_Y + y);
 8001360:	68bb      	ldr	r3, [r7, #8]
 8001362:	b29b      	uxth	r3, r3
 8001364:	3302      	adds	r3, #2
 8001366:	b29b      	uxth	r3, r3
 8001368:	4618      	mov	r0, r3
 800136a:	f7ff ffc7 	bl	80012fc <lcd_data16>
  lcd_data16(LCD_OFFSET_Y + y + height- 1);
 800136e:	68bb      	ldr	r3, [r7, #8]
 8001370:	b29a      	uxth	r2, r3
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	b29b      	uxth	r3, r3
 8001376:	4413      	add	r3, r2
 8001378:	b29b      	uxth	r3, r3
 800137a:	3301      	adds	r3, #1
 800137c:	b29b      	uxth	r3, r3
 800137e:	4618      	mov	r0, r3
 8001380:	f7ff ffbc 	bl	80012fc <lcd_data16>
}
 8001384:	bf00      	nop
 8001386:	3710      	adds	r7, #16
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}

0800138c <lcd_put_pixel>:

void lcd_put_pixel(int x, int y, uint16_t color)
{
 800138c:	b480      	push	{r7}
 800138e:	b085      	sub	sp, #20
 8001390:	af00      	add	r7, sp, #0
 8001392:	60f8      	str	r0, [r7, #12]
 8001394:	60b9      	str	r1, [r7, #8]
 8001396:	4613      	mov	r3, r2
 8001398:	80fb      	strh	r3, [r7, #6]
	frame_buffer[x + y * LCD_WIDTH] = color;
 800139a:	68ba      	ldr	r2, [r7, #8]
 800139c:	4613      	mov	r3, r2
 800139e:	009b      	lsls	r3, r3, #2
 80013a0:	4413      	add	r3, r2
 80013a2:	015b      	lsls	r3, r3, #5
 80013a4:	461a      	mov	r2, r3
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	4413      	add	r3, r2
 80013aa:	4905      	ldr	r1, [pc, #20]	; (80013c0 <lcd_put_pixel+0x34>)
 80013ac:	88fa      	ldrh	r2, [r7, #6]
 80013ae:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 80013b2:	bf00      	nop
 80013b4:	3714      	adds	r7, #20
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr
 80013be:	bf00      	nop
 80013c0:	20000208 	.word	0x20000208

080013c4 <lcd_copy>:

void lcd_copy(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
	lcd_set_window(0, 0, LCD_WIDTH, LCD_HEIGHT);
 80013c8:	2380      	movs	r3, #128	; 0x80
 80013ca:	22a0      	movs	r2, #160	; 0xa0
 80013cc:	2100      	movs	r1, #0
 80013ce:	2000      	movs	r0, #0
 80013d0:	f7ff ffa9 	bl	8001326 <lcd_set_window>
	lcd_cmd(ST7735S_RAMWR);
 80013d4:	202c      	movs	r0, #44	; 0x2c
 80013d6:	f7ff fef3 	bl	80011c0 <lcd_cmd>
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 80013da:	2201      	movs	r2, #1
 80013dc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013e0:	480c      	ldr	r0, [pc, #48]	; (8001414 <lcd_copy+0x50>)
 80013e2:	f002 fd3b 	bl	8003e5c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 80013e6:	2200      	movs	r2, #0
 80013e8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013ec:	4809      	ldr	r0, [pc, #36]	; (8001414 <lcd_copy+0x50>)
 80013ee:	f002 fd35 	bl	8003e5c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint8_t*)frame_buffer, sizeof(frame_buffer), HAL_MAX_DELAY);
 80013f2:	f04f 33ff 	mov.w	r3, #4294967295
 80013f6:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 80013fa:	4907      	ldr	r1, [pc, #28]	; (8001418 <lcd_copy+0x54>)
 80013fc:	4807      	ldr	r0, [pc, #28]	; (800141c <lcd_copy+0x58>)
 80013fe:	f004 f8f4 	bl	80055ea <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8001402:	2201      	movs	r2, #1
 8001404:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001408:	4802      	ldr	r0, [pc, #8]	; (8001414 <lcd_copy+0x50>)
 800140a:	f002 fd27 	bl	8003e5c <HAL_GPIO_WritePin>
}
 800140e:	bf00      	nop
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	48000400 	.word	0x48000400
 8001418:	20000208 	.word	0x20000208
 800141c:	2000a2d0 	.word	0x2000a2d0

08001420 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b082      	sub	sp, #8
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  if (ch == '\n') {
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2b0a      	cmp	r3, #10
 800142c:	d102      	bne.n	8001434 <__io_putchar+0x14>
    __io_putchar('\r');
 800142e:	200d      	movs	r0, #13
 8001430:	f7ff fff6 	bl	8001420 <__io_putchar>
  }

  HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8001434:	1d39      	adds	r1, r7, #4
 8001436:	f04f 33ff 	mov.w	r3, #4294967295
 800143a:	2201      	movs	r2, #1
 800143c:	4803      	ldr	r0, [pc, #12]	; (800144c <__io_putchar+0x2c>)
 800143e:	f004 fbf5 	bl	8005c2c <HAL_UART_Transmit>

  return 1;
 8001442:	2301      	movs	r3, #1
}
 8001444:	4618      	mov	r0, r3
 8001446:	3708      	adds	r7, #8
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	2000a3b8 	.word	0x2000a3b8

08001450 <calculateDirection>:

char TX_BUFFER[TX_BUFFER_LEN]={0};
uint8_t RX_BUFFER[RX_BUFFER_LEN]={0};

uint8_t calculateDirection(uint32_t measurement_y, uint32_t measurement_x)
{
 8001450:	b480      	push	{r7}
 8001452:	b083      	sub	sp, #12
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
 8001458:	6039      	str	r1, [r7, #0]
	if(abs(measurement_y-north) < eps)
 800145a:	4b1f      	ldr	r3, [pc, #124]	; (80014d8 <calculateDirection+0x88>)
 800145c:	881b      	ldrh	r3, [r3, #0]
 800145e:	461a      	mov	r2, r3
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	1a9b      	subs	r3, r3, r2
 8001464:	2b00      	cmp	r3, #0
 8001466:	bfb8      	it	lt
 8001468:	425b      	neglt	r3, r3
 800146a:	4a1c      	ldr	r2, [pc, #112]	; (80014dc <calculateDirection+0x8c>)
 800146c:	8812      	ldrh	r2, [r2, #0]
 800146e:	4293      	cmp	r3, r2
 8001470:	da01      	bge.n	8001476 <calculateDirection+0x26>
		return '1';
 8001472:	2331      	movs	r3, #49	; 0x31
 8001474:	e02a      	b.n	80014cc <calculateDirection+0x7c>
	else if(abs(measurement_y-south) < eps)
 8001476:	4b1a      	ldr	r3, [pc, #104]	; (80014e0 <calculateDirection+0x90>)
 8001478:	881b      	ldrh	r3, [r3, #0]
 800147a:	461a      	mov	r2, r3
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	1a9b      	subs	r3, r3, r2
 8001480:	2b00      	cmp	r3, #0
 8001482:	bfb8      	it	lt
 8001484:	425b      	neglt	r3, r3
 8001486:	4a15      	ldr	r2, [pc, #84]	; (80014dc <calculateDirection+0x8c>)
 8001488:	8812      	ldrh	r2, [r2, #0]
 800148a:	4293      	cmp	r3, r2
 800148c:	da01      	bge.n	8001492 <calculateDirection+0x42>
		return '3';
 800148e:	2333      	movs	r3, #51	; 0x33
 8001490:	e01c      	b.n	80014cc <calculateDirection+0x7c>
	else if(abs(measurement_x-west) < eps)
 8001492:	4b14      	ldr	r3, [pc, #80]	; (80014e4 <calculateDirection+0x94>)
 8001494:	881b      	ldrh	r3, [r3, #0]
 8001496:	461a      	mov	r2, r3
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	1a9b      	subs	r3, r3, r2
 800149c:	2b00      	cmp	r3, #0
 800149e:	bfb8      	it	lt
 80014a0:	425b      	neglt	r3, r3
 80014a2:	4a0e      	ldr	r2, [pc, #56]	; (80014dc <calculateDirection+0x8c>)
 80014a4:	8812      	ldrh	r2, [r2, #0]
 80014a6:	4293      	cmp	r3, r2
 80014a8:	da01      	bge.n	80014ae <calculateDirection+0x5e>
		return '4';
 80014aa:	2334      	movs	r3, #52	; 0x34
 80014ac:	e00e      	b.n	80014cc <calculateDirection+0x7c>
	else if(abs(measurement_x-east) < eps)
 80014ae:	4b0e      	ldr	r3, [pc, #56]	; (80014e8 <calculateDirection+0x98>)
 80014b0:	881b      	ldrh	r3, [r3, #0]
 80014b2:	461a      	mov	r2, r3
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	1a9b      	subs	r3, r3, r2
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	bfb8      	it	lt
 80014bc:	425b      	neglt	r3, r3
 80014be:	4a07      	ldr	r2, [pc, #28]	; (80014dc <calculateDirection+0x8c>)
 80014c0:	8812      	ldrh	r2, [r2, #0]
 80014c2:	4293      	cmp	r3, r2
 80014c4:	da01      	bge.n	80014ca <calculateDirection+0x7a>
		return '2';
 80014c6:	2332      	movs	r3, #50	; 0x32
 80014c8:	e000      	b.n	80014cc <calculateDirection+0x7c>
	else return '0';
 80014ca:	2330      	movs	r3, #48	; 0x30
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	370c      	adds	r7, #12
 80014d0:	46bd      	mov	sp, r7
 80014d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d6:	4770      	bx	lr
 80014d8:	20000002 	.word	0x20000002
 80014dc:	20000000 	.word	0x20000000
 80014e0:	2000a208 	.word	0x2000a208
 80014e4:	2000a20a 	.word	0x2000a20a
 80014e8:	20000004 	.word	0x20000004

080014ec <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b082      	sub	sp, #8
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
    if(huart->Instance == huart1.Instance)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681a      	ldr	r2, [r3, #0]
 80014f8:	4b0d      	ldr	r3, [pc, #52]	; (8001530 <HAL_UART_RxCpltCallback+0x44>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	429a      	cmp	r2, r3
 80014fe:	d113      	bne.n	8001528 <HAL_UART_RxCpltCallback+0x3c>
    {
    	if(RX_BUFFER[0] == '1')
 8001500:	4b0c      	ldr	r3, [pc, #48]	; (8001534 <HAL_UART_RxCpltCallback+0x48>)
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	2b31      	cmp	r3, #49	; 0x31
 8001506:	d103      	bne.n	8001510 <HAL_UART_RxCpltCallback+0x24>
    	{
//    		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 1);
    		printf("got 1\r\n");
 8001508:	480b      	ldr	r0, [pc, #44]	; (8001538 <HAL_UART_RxCpltCallback+0x4c>)
 800150a:	f007 f911 	bl	8008730 <puts>
 800150e:	e006      	b.n	800151e <HAL_UART_RxCpltCallback+0x32>
    	}
    	else if(RX_BUFFER[0] == '0')
 8001510:	4b08      	ldr	r3, [pc, #32]	; (8001534 <HAL_UART_RxCpltCallback+0x48>)
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	2b30      	cmp	r3, #48	; 0x30
 8001516:	d102      	bne.n	800151e <HAL_UART_RxCpltCallback+0x32>
    	{
//    		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 0);
    		printf("got 0\r\n");
 8001518:	4808      	ldr	r0, [pc, #32]	; (800153c <HAL_UART_RxCpltCallback+0x50>)
 800151a:	f007 f909 	bl	8008730 <puts>
    	}
    	HAL_UART_Receive_IT(&huart1, RX_BUFFER, 1);
 800151e:	2201      	movs	r2, #1
 8001520:	4904      	ldr	r1, [pc, #16]	; (8001534 <HAL_UART_RxCpltCallback+0x48>)
 8001522:	4803      	ldr	r0, [pc, #12]	; (8001530 <HAL_UART_RxCpltCallback+0x44>)
 8001524:	f004 fc16 	bl	8005d54 <HAL_UART_Receive_IT>
    }
}
 8001528:	bf00      	nop
 800152a:	3708      	adds	r7, #8
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}
 8001530:	2000a334 	.word	0x2000a334
 8001534:	2000a210 	.word	0x2000a210
 8001538:	0800b0c0 	.word	0x0800b0c0
 800153c:	0800b0c8 	.word	0x0800b0c8

08001540 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b098      	sub	sp, #96	; 0x60
 8001544:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001546:	f000 fbea 	bl	8001d1e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800154a:	f000 f883 	bl	8001654 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800154e:	f7ff fde5 	bl	800111c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001552:	f000 fae1 	bl	8001b18 <MX_USART2_UART_Init>
  MX_DMA_Init();
 8001556:	f7ff fdc3 	bl	80010e0 <MX_DMA_Init>
  MX_ADC1_Init();
 800155a:	f7ff fca1 	bl	8000ea0 <MX_ADC1_Init>
  MX_SPI2_Init();
 800155e:	f000 f8d1 	bl	8001704 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8001562:	f000 faa9 	bl	8001ab8 <MX_USART1_UART_Init>
   * value array stands for measurements from joystick
   * value[0] - measurement from Y-axis
   * value[1] - measurement from X-axis
   */
  volatile static uint16_t value[2];
  uint8_t last_direction = '0';
 8001566:	2330      	movs	r3, #48	; 0x30
 8001568:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 800156c:	217f      	movs	r1, #127	; 0x7f
 800156e:	4830      	ldr	r0, [pc, #192]	; (8001630 <main+0xf0>)
 8001570:	f001 fe32 	bl	80031d8 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)value, 2);
 8001574:	2202      	movs	r2, #2
 8001576:	492f      	ldr	r1, [pc, #188]	; (8001634 <main+0xf4>)
 8001578:	482d      	ldr	r0, [pc, #180]	; (8001630 <main+0xf0>)
 800157a:	f000 ffbb 	bl	80024f4 <HAL_ADC_Start_DMA>
  HAL_UART_Receive_IT(&huart1, RX_BUFFER, 1);
 800157e:	2201      	movs	r2, #1
 8001580:	492d      	ldr	r1, [pc, #180]	; (8001638 <main+0xf8>)
 8001582:	482e      	ldr	r0, [pc, #184]	; (800163c <main+0xfc>)
 8001584:	f004 fbe6 	bl	8005d54 <HAL_UART_Receive_IT>
//  wchar_t text_direction[15];
  lcd_init();
 8001588:	f7ff fe80 	bl	800128c <lcd_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  printf("Dir: %c\n", calculateDirection(value[0],value[1]));
 800158c:	4b29      	ldr	r3, [pc, #164]	; (8001634 <main+0xf4>)
 800158e:	881b      	ldrh	r3, [r3, #0]
 8001590:	b29b      	uxth	r3, r3
 8001592:	461a      	mov	r2, r3
 8001594:	4b27      	ldr	r3, [pc, #156]	; (8001634 <main+0xf4>)
 8001596:	885b      	ldrh	r3, [r3, #2]
 8001598:	b29b      	uxth	r3, r3
 800159a:	4619      	mov	r1, r3
 800159c:	4610      	mov	r0, r2
 800159e:	f7ff ff57 	bl	8001450 <calculateDirection>
 80015a2:	4603      	mov	r3, r0
 80015a4:	4619      	mov	r1, r3
 80015a6:	4826      	ldr	r0, [pc, #152]	; (8001640 <main+0x100>)
 80015a8:	f007 f83c 	bl	8008624 <iprintf>
	  wchar_t  ws[20];
	  swprintf(ws, 20, L"%hs%c", "Direction: ",calculateDirection(value[0],value[1]));
 80015ac:	4b21      	ldr	r3, [pc, #132]	; (8001634 <main+0xf4>)
 80015ae:	881b      	ldrh	r3, [r3, #0]
 80015b0:	b29b      	uxth	r3, r3
 80015b2:	461a      	mov	r2, r3
 80015b4:	4b1f      	ldr	r3, [pc, #124]	; (8001634 <main+0xf4>)
 80015b6:	885b      	ldrh	r3, [r3, #2]
 80015b8:	b29b      	uxth	r3, r3
 80015ba:	4619      	mov	r1, r3
 80015bc:	4610      	mov	r0, r2
 80015be:	f7ff ff47 	bl	8001450 <calculateDirection>
 80015c2:	4603      	mov	r3, r0
 80015c4:	1d38      	adds	r0, r7, #4
 80015c6:	9300      	str	r3, [sp, #0]
 80015c8:	4b1e      	ldr	r3, [pc, #120]	; (8001644 <main+0x104>)
 80015ca:	4a1f      	ldr	r2, [pc, #124]	; (8001648 <main+0x108>)
 80015cc:	2114      	movs	r1, #20
 80015ce:	f007 f90b 	bl	80087e8 <swprintf>
	  hagl_put_text(ws,0,0,YELLOW,font6x9);
 80015d2:	1d38      	adds	r0, r7, #4
 80015d4:	4b1d      	ldr	r3, [pc, #116]	; (800164c <main+0x10c>)
 80015d6:	9300      	str	r3, [sp, #0]
 80015d8:	f24e 03ff 	movw	r3, #57599	; 0xe0ff
 80015dc:	2200      	movs	r2, #0
 80015de:	2100      	movs	r1, #0
 80015e0:	f006 f824 	bl	800762c <hagl_put_text>
	  lcd_copy();
 80015e4:	f7ff feee 	bl	80013c4 <lcd_copy>
	  TX_BUFFER[0]=(char)calculateDirection(value[0],value[1]);
 80015e8:	4b12      	ldr	r3, [pc, #72]	; (8001634 <main+0xf4>)
 80015ea:	881b      	ldrh	r3, [r3, #0]
 80015ec:	b29b      	uxth	r3, r3
 80015ee:	461a      	mov	r2, r3
 80015f0:	4b10      	ldr	r3, [pc, #64]	; (8001634 <main+0xf4>)
 80015f2:	885b      	ldrh	r3, [r3, #2]
 80015f4:	b29b      	uxth	r3, r3
 80015f6:	4619      	mov	r1, r3
 80015f8:	4610      	mov	r0, r2
 80015fa:	f7ff ff29 	bl	8001450 <calculateDirection>
 80015fe:	4603      	mov	r3, r0
 8001600:	461a      	mov	r2, r3
 8001602:	4b13      	ldr	r3, [pc, #76]	; (8001650 <main+0x110>)
 8001604:	701a      	strb	r2, [r3, #0]
	  if (last_direction != TX_BUFFER[0]) {
 8001606:	4b12      	ldr	r3, [pc, #72]	; (8001650 <main+0x110>)
 8001608:	781b      	ldrb	r3, [r3, #0]
 800160a:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800160e:	429a      	cmp	r2, r3
 8001610:	d005      	beq.n	800161e <main+0xde>
		  HAL_UART_Transmit(&huart1, (uint8_t*)TX_BUFFER, TX_BUFFER_LEN, 100);
 8001612:	2364      	movs	r3, #100	; 0x64
 8001614:	2201      	movs	r2, #1
 8001616:	490e      	ldr	r1, [pc, #56]	; (8001650 <main+0x110>)
 8001618:	4808      	ldr	r0, [pc, #32]	; (800163c <main+0xfc>)
 800161a:	f004 fb07 	bl	8005c2c <HAL_UART_Transmit>
	  }
	  last_direction = TX_BUFFER[0];
 800161e:	4b0c      	ldr	r3, [pc, #48]	; (8001650 <main+0x110>)
 8001620:	781b      	ldrb	r3, [r3, #0]
 8001622:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	  HAL_Delay(10);
 8001626:	200a      	movs	r0, #10
 8001628:	f000 fbee 	bl	8001e08 <HAL_Delay>
  {
 800162c:	e7ae      	b.n	800158c <main+0x4c>
 800162e:	bf00      	nop
 8001630:	2000a224 	.word	0x2000a224
 8001634:	2000a214 	.word	0x2000a214
 8001638:	2000a210 	.word	0x2000a210
 800163c:	2000a334 	.word	0x2000a334
 8001640:	0800b0d0 	.word	0x0800b0d0
 8001644:	0800b0dc 	.word	0x0800b0dc
 8001648:	0800b0e8 	.word	0x0800b0e8
 800164c:	0800b198 	.word	0x0800b198
 8001650:	2000a20c 	.word	0x2000a20c

08001654 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b096      	sub	sp, #88	; 0x58
 8001658:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800165a:	f107 0314 	add.w	r3, r7, #20
 800165e:	2244      	movs	r2, #68	; 0x44
 8001660:	2100      	movs	r1, #0
 8001662:	4618      	mov	r0, r3
 8001664:	f006 fac2 	bl	8007bec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001668:	463b      	mov	r3, r7
 800166a:	2200      	movs	r2, #0
 800166c:	601a      	str	r2, [r3, #0]
 800166e:	605a      	str	r2, [r3, #4]
 8001670:	609a      	str	r2, [r3, #8]
 8001672:	60da      	str	r2, [r3, #12]
 8001674:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001676:	f44f 7000 	mov.w	r0, #512	; 0x200
 800167a:	f002 fc15 	bl	8003ea8 <HAL_PWREx_ControlVoltageScaling>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d001      	beq.n	8001688 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001684:	f000 f838 	bl	80016f8 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001688:	2310      	movs	r3, #16
 800168a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800168c:	2301      	movs	r3, #1
 800168e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001690:	2300      	movs	r3, #0
 8001692:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001694:	2360      	movs	r3, #96	; 0x60
 8001696:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001698:	2302      	movs	r3, #2
 800169a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800169c:	2301      	movs	r3, #1
 800169e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80016a0:	2301      	movs	r3, #1
 80016a2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80016a4:	2328      	movs	r3, #40	; 0x28
 80016a6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80016a8:	2307      	movs	r3, #7
 80016aa:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80016ac:	2302      	movs	r3, #2
 80016ae:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80016b0:	2302      	movs	r3, #2
 80016b2:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016b4:	f107 0314 	add.w	r3, r7, #20
 80016b8:	4618      	mov	r0, r3
 80016ba:	f002 fc4b 	bl	8003f54 <HAL_RCC_OscConfig>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d001      	beq.n	80016c8 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80016c4:	f000 f818 	bl	80016f8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016c8:	230f      	movs	r3, #15
 80016ca:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016cc:	2303      	movs	r3, #3
 80016ce:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016d0:	2300      	movs	r3, #0
 80016d2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80016d4:	2300      	movs	r3, #0
 80016d6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016d8:	2300      	movs	r3, #0
 80016da:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80016dc:	463b      	mov	r3, r7
 80016de:	2104      	movs	r1, #4
 80016e0:	4618      	mov	r0, r3
 80016e2:	f003 f81d 	bl	8004720 <HAL_RCC_ClockConfig>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d001      	beq.n	80016f0 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80016ec:	f000 f804 	bl	80016f8 <Error_Handler>
  }
}
 80016f0:	bf00      	nop
 80016f2:	3758      	adds	r7, #88	; 0x58
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}

080016f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016fc:	b672      	cpsid	i
}
 80016fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001700:	e7fe      	b.n	8001700 <Error_Handler+0x8>
	...

08001704 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001708:	4b1b      	ldr	r3, [pc, #108]	; (8001778 <MX_SPI2_Init+0x74>)
 800170a:	4a1c      	ldr	r2, [pc, #112]	; (800177c <MX_SPI2_Init+0x78>)
 800170c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800170e:	4b1a      	ldr	r3, [pc, #104]	; (8001778 <MX_SPI2_Init+0x74>)
 8001710:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001714:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001716:	4b18      	ldr	r3, [pc, #96]	; (8001778 <MX_SPI2_Init+0x74>)
 8001718:	2200      	movs	r2, #0
 800171a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800171c:	4b16      	ldr	r3, [pc, #88]	; (8001778 <MX_SPI2_Init+0x74>)
 800171e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001722:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001724:	4b14      	ldr	r3, [pc, #80]	; (8001778 <MX_SPI2_Init+0x74>)
 8001726:	2200      	movs	r2, #0
 8001728:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800172a:	4b13      	ldr	r3, [pc, #76]	; (8001778 <MX_SPI2_Init+0x74>)
 800172c:	2200      	movs	r2, #0
 800172e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001730:	4b11      	ldr	r3, [pc, #68]	; (8001778 <MX_SPI2_Init+0x74>)
 8001732:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001736:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001738:	4b0f      	ldr	r3, [pc, #60]	; (8001778 <MX_SPI2_Init+0x74>)
 800173a:	2210      	movs	r2, #16
 800173c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800173e:	4b0e      	ldr	r3, [pc, #56]	; (8001778 <MX_SPI2_Init+0x74>)
 8001740:	2200      	movs	r2, #0
 8001742:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001744:	4b0c      	ldr	r3, [pc, #48]	; (8001778 <MX_SPI2_Init+0x74>)
 8001746:	2200      	movs	r2, #0
 8001748:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800174a:	4b0b      	ldr	r3, [pc, #44]	; (8001778 <MX_SPI2_Init+0x74>)
 800174c:	2200      	movs	r2, #0
 800174e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001750:	4b09      	ldr	r3, [pc, #36]	; (8001778 <MX_SPI2_Init+0x74>)
 8001752:	2207      	movs	r2, #7
 8001754:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001756:	4b08      	ldr	r3, [pc, #32]	; (8001778 <MX_SPI2_Init+0x74>)
 8001758:	2200      	movs	r2, #0
 800175a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800175c:	4b06      	ldr	r3, [pc, #24]	; (8001778 <MX_SPI2_Init+0x74>)
 800175e:	2200      	movs	r2, #0
 8001760:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001762:	4805      	ldr	r0, [pc, #20]	; (8001778 <MX_SPI2_Init+0x74>)
 8001764:	f003 fe9e 	bl	80054a4 <HAL_SPI_Init>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d001      	beq.n	8001772 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800176e:	f7ff ffc3 	bl	80016f8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001772:	bf00      	nop
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	2000a2d0 	.word	0x2000a2d0
 800177c:	40003800 	.word	0x40003800

08001780 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b08a      	sub	sp, #40	; 0x28
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001788:	f107 0314 	add.w	r3, r7, #20
 800178c:	2200      	movs	r2, #0
 800178e:	601a      	str	r2, [r3, #0]
 8001790:	605a      	str	r2, [r3, #4]
 8001792:	609a      	str	r2, [r3, #8]
 8001794:	60da      	str	r2, [r3, #12]
 8001796:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a25      	ldr	r2, [pc, #148]	; (8001834 <HAL_SPI_MspInit+0xb4>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d144      	bne.n	800182c <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80017a2:	4b25      	ldr	r3, [pc, #148]	; (8001838 <HAL_SPI_MspInit+0xb8>)
 80017a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017a6:	4a24      	ldr	r2, [pc, #144]	; (8001838 <HAL_SPI_MspInit+0xb8>)
 80017a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017ac:	6593      	str	r3, [r2, #88]	; 0x58
 80017ae:	4b22      	ldr	r3, [pc, #136]	; (8001838 <HAL_SPI_MspInit+0xb8>)
 80017b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017b6:	613b      	str	r3, [r7, #16]
 80017b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017ba:	4b1f      	ldr	r3, [pc, #124]	; (8001838 <HAL_SPI_MspInit+0xb8>)
 80017bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017be:	4a1e      	ldr	r2, [pc, #120]	; (8001838 <HAL_SPI_MspInit+0xb8>)
 80017c0:	f043 0304 	orr.w	r3, r3, #4
 80017c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017c6:	4b1c      	ldr	r3, [pc, #112]	; (8001838 <HAL_SPI_MspInit+0xb8>)
 80017c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017ca:	f003 0304 	and.w	r3, r3, #4
 80017ce:	60fb      	str	r3, [r7, #12]
 80017d0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017d2:	4b19      	ldr	r3, [pc, #100]	; (8001838 <HAL_SPI_MspInit+0xb8>)
 80017d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017d6:	4a18      	ldr	r2, [pc, #96]	; (8001838 <HAL_SPI_MspInit+0xb8>)
 80017d8:	f043 0302 	orr.w	r3, r3, #2
 80017dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017de:	4b16      	ldr	r3, [pc, #88]	; (8001838 <HAL_SPI_MspInit+0xb8>)
 80017e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017e2:	f003 0302 	and.w	r3, r3, #2
 80017e6:	60bb      	str	r3, [r7, #8]
 80017e8:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80017ea:	2308      	movs	r3, #8
 80017ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ee:	2302      	movs	r3, #2
 80017f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f2:	2300      	movs	r3, #0
 80017f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017f6:	2303      	movs	r3, #3
 80017f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80017fa:	2305      	movs	r3, #5
 80017fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017fe:	f107 0314 	add.w	r3, r7, #20
 8001802:	4619      	mov	r1, r3
 8001804:	480d      	ldr	r0, [pc, #52]	; (800183c <HAL_SPI_MspInit+0xbc>)
 8001806:	f002 f97f 	bl	8003b08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800180a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800180e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001810:	2302      	movs	r3, #2
 8001812:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001814:	2300      	movs	r3, #0
 8001816:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001818:	2303      	movs	r3, #3
 800181a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800181c:	2305      	movs	r3, #5
 800181e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001820:	f107 0314 	add.w	r3, r7, #20
 8001824:	4619      	mov	r1, r3
 8001826:	4806      	ldr	r0, [pc, #24]	; (8001840 <HAL_SPI_MspInit+0xc0>)
 8001828:	f002 f96e 	bl	8003b08 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 800182c:	bf00      	nop
 800182e:	3728      	adds	r7, #40	; 0x28
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}
 8001834:	40003800 	.word	0x40003800
 8001838:	40021000 	.word	0x40021000
 800183c:	48000800 	.word	0x48000800
 8001840:	48000400 	.word	0x48000400

08001844 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001844:	b480      	push	{r7}
 8001846:	b083      	sub	sp, #12
 8001848:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800184a:	4b0f      	ldr	r3, [pc, #60]	; (8001888 <HAL_MspInit+0x44>)
 800184c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800184e:	4a0e      	ldr	r2, [pc, #56]	; (8001888 <HAL_MspInit+0x44>)
 8001850:	f043 0301 	orr.w	r3, r3, #1
 8001854:	6613      	str	r3, [r2, #96]	; 0x60
 8001856:	4b0c      	ldr	r3, [pc, #48]	; (8001888 <HAL_MspInit+0x44>)
 8001858:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800185a:	f003 0301 	and.w	r3, r3, #1
 800185e:	607b      	str	r3, [r7, #4]
 8001860:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001862:	4b09      	ldr	r3, [pc, #36]	; (8001888 <HAL_MspInit+0x44>)
 8001864:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001866:	4a08      	ldr	r2, [pc, #32]	; (8001888 <HAL_MspInit+0x44>)
 8001868:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800186c:	6593      	str	r3, [r2, #88]	; 0x58
 800186e:	4b06      	ldr	r3, [pc, #24]	; (8001888 <HAL_MspInit+0x44>)
 8001870:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001872:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001876:	603b      	str	r3, [r7, #0]
 8001878:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800187a:	bf00      	nop
 800187c:	370c      	adds	r7, #12
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr
 8001886:	bf00      	nop
 8001888:	40021000 	.word	0x40021000

0800188c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001890:	e7fe      	b.n	8001890 <NMI_Handler+0x4>

08001892 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001892:	b480      	push	{r7}
 8001894:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001896:	e7fe      	b.n	8001896 <HardFault_Handler+0x4>

08001898 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800189c:	e7fe      	b.n	800189c <MemManage_Handler+0x4>

0800189e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800189e:	b480      	push	{r7}
 80018a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018a2:	e7fe      	b.n	80018a2 <BusFault_Handler+0x4>

080018a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018a8:	e7fe      	b.n	80018a8 <UsageFault_Handler+0x4>

080018aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018aa:	b480      	push	{r7}
 80018ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018ae:	bf00      	nop
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr

080018b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018bc:	bf00      	nop
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr

080018c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018c6:	b480      	push	{r7}
 80018c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018ca:	bf00      	nop
 80018cc:	46bd      	mov	sp, r7
 80018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d2:	4770      	bx	lr

080018d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018d8:	f000 fa76 	bl	8001dc8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018dc:	bf00      	nop
 80018de:	bd80      	pop	{r7, pc}

080018e0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80018e4:	4802      	ldr	r0, [pc, #8]	; (80018f0 <DMA1_Channel1_IRQHandler+0x10>)
 80018e6:	f002 f830 	bl	800394a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80018ea:	bf00      	nop
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	2000a288 	.word	0x2000a288

080018f4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80018f8:	4802      	ldr	r0, [pc, #8]	; (8001904 <USART1_IRQHandler+0x10>)
 80018fa:	f004 fa81 	bl	8005e00 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80018fe:	bf00      	nop
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	2000a334 	.word	0x2000a334

08001908 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0
	return 1;
 800190c:	2301      	movs	r3, #1
}
 800190e:	4618      	mov	r0, r3
 8001910:	46bd      	mov	sp, r7
 8001912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001916:	4770      	bx	lr

08001918 <_kill>:

int _kill(int pid, int sig)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b082      	sub	sp, #8
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
 8001920:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001922:	f005 ff0b 	bl	800773c <__errno>
 8001926:	4603      	mov	r3, r0
 8001928:	2216      	movs	r2, #22
 800192a:	601a      	str	r2, [r3, #0]
	return -1;
 800192c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001930:	4618      	mov	r0, r3
 8001932:	3708      	adds	r7, #8
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}

08001938 <_exit>:

void _exit (int status)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b082      	sub	sp, #8
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001940:	f04f 31ff 	mov.w	r1, #4294967295
 8001944:	6878      	ldr	r0, [r7, #4]
 8001946:	f7ff ffe7 	bl	8001918 <_kill>
	while (1) {}		/* Make sure we hang here */
 800194a:	e7fe      	b.n	800194a <_exit+0x12>

0800194c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b086      	sub	sp, #24
 8001950:	af00      	add	r7, sp, #0
 8001952:	60f8      	str	r0, [r7, #12]
 8001954:	60b9      	str	r1, [r7, #8]
 8001956:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001958:	2300      	movs	r3, #0
 800195a:	617b      	str	r3, [r7, #20]
 800195c:	e00a      	b.n	8001974 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800195e:	f3af 8000 	nop.w
 8001962:	4601      	mov	r1, r0
 8001964:	68bb      	ldr	r3, [r7, #8]
 8001966:	1c5a      	adds	r2, r3, #1
 8001968:	60ba      	str	r2, [r7, #8]
 800196a:	b2ca      	uxtb	r2, r1
 800196c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800196e:	697b      	ldr	r3, [r7, #20]
 8001970:	3301      	adds	r3, #1
 8001972:	617b      	str	r3, [r7, #20]
 8001974:	697a      	ldr	r2, [r7, #20]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	429a      	cmp	r2, r3
 800197a:	dbf0      	blt.n	800195e <_read+0x12>
	}

return len;
 800197c:	687b      	ldr	r3, [r7, #4]
}
 800197e:	4618      	mov	r0, r3
 8001980:	3718      	adds	r7, #24
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}

08001986 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001986:	b580      	push	{r7, lr}
 8001988:	b086      	sub	sp, #24
 800198a:	af00      	add	r7, sp, #0
 800198c:	60f8      	str	r0, [r7, #12]
 800198e:	60b9      	str	r1, [r7, #8]
 8001990:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001992:	2300      	movs	r3, #0
 8001994:	617b      	str	r3, [r7, #20]
 8001996:	e009      	b.n	80019ac <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001998:	68bb      	ldr	r3, [r7, #8]
 800199a:	1c5a      	adds	r2, r3, #1
 800199c:	60ba      	str	r2, [r7, #8]
 800199e:	781b      	ldrb	r3, [r3, #0]
 80019a0:	4618      	mov	r0, r3
 80019a2:	f7ff fd3d 	bl	8001420 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019a6:	697b      	ldr	r3, [r7, #20]
 80019a8:	3301      	adds	r3, #1
 80019aa:	617b      	str	r3, [r7, #20]
 80019ac:	697a      	ldr	r2, [r7, #20]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	429a      	cmp	r2, r3
 80019b2:	dbf1      	blt.n	8001998 <_write+0x12>
	}
	return len;
 80019b4:	687b      	ldr	r3, [r7, #4]
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	3718      	adds	r7, #24
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}

080019be <_close>:

int _close(int file)
{
 80019be:	b480      	push	{r7}
 80019c0:	b083      	sub	sp, #12
 80019c2:	af00      	add	r7, sp, #0
 80019c4:	6078      	str	r0, [r7, #4]
	return -1;
 80019c6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	370c      	adds	r7, #12
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr

080019d6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80019d6:	b480      	push	{r7}
 80019d8:	b083      	sub	sp, #12
 80019da:	af00      	add	r7, sp, #0
 80019dc:	6078      	str	r0, [r7, #4]
 80019de:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80019e6:	605a      	str	r2, [r3, #4]
	return 0;
 80019e8:	2300      	movs	r3, #0
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	370c      	adds	r7, #12
 80019ee:	46bd      	mov	sp, r7
 80019f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f4:	4770      	bx	lr

080019f6 <_isatty>:

int _isatty(int file)
{
 80019f6:	b480      	push	{r7}
 80019f8:	b083      	sub	sp, #12
 80019fa:	af00      	add	r7, sp, #0
 80019fc:	6078      	str	r0, [r7, #4]
	return 1;
 80019fe:	2301      	movs	r3, #1
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	370c      	adds	r7, #12
 8001a04:	46bd      	mov	sp, r7
 8001a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0a:	4770      	bx	lr

08001a0c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b085      	sub	sp, #20
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	60f8      	str	r0, [r7, #12]
 8001a14:	60b9      	str	r1, [r7, #8]
 8001a16:	607a      	str	r2, [r7, #4]
	return 0;
 8001a18:	2300      	movs	r3, #0
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3714      	adds	r7, #20
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr
	...

08001a28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b086      	sub	sp, #24
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a30:	4a14      	ldr	r2, [pc, #80]	; (8001a84 <_sbrk+0x5c>)
 8001a32:	4b15      	ldr	r3, [pc, #84]	; (8001a88 <_sbrk+0x60>)
 8001a34:	1ad3      	subs	r3, r2, r3
 8001a36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a3c:	4b13      	ldr	r3, [pc, #76]	; (8001a8c <_sbrk+0x64>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d102      	bne.n	8001a4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a44:	4b11      	ldr	r3, [pc, #68]	; (8001a8c <_sbrk+0x64>)
 8001a46:	4a12      	ldr	r2, [pc, #72]	; (8001a90 <_sbrk+0x68>)
 8001a48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a4a:	4b10      	ldr	r3, [pc, #64]	; (8001a8c <_sbrk+0x64>)
 8001a4c:	681a      	ldr	r2, [r3, #0]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	4413      	add	r3, r2
 8001a52:	693a      	ldr	r2, [r7, #16]
 8001a54:	429a      	cmp	r2, r3
 8001a56:	d207      	bcs.n	8001a68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a58:	f005 fe70 	bl	800773c <__errno>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	220c      	movs	r2, #12
 8001a60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a62:	f04f 33ff 	mov.w	r3, #4294967295
 8001a66:	e009      	b.n	8001a7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a68:	4b08      	ldr	r3, [pc, #32]	; (8001a8c <_sbrk+0x64>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a6e:	4b07      	ldr	r3, [pc, #28]	; (8001a8c <_sbrk+0x64>)
 8001a70:	681a      	ldr	r2, [r3, #0]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	4413      	add	r3, r2
 8001a76:	4a05      	ldr	r2, [pc, #20]	; (8001a8c <_sbrk+0x64>)
 8001a78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a7a:	68fb      	ldr	r3, [r7, #12]
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	3718      	adds	r7, #24
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	20018000 	.word	0x20018000
 8001a88:	00000400 	.word	0x00000400
 8001a8c:	2000a218 	.word	0x2000a218
 8001a90:	2000a450 	.word	0x2000a450

08001a94 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001a98:	4b06      	ldr	r3, [pc, #24]	; (8001ab4 <SystemInit+0x20>)
 8001a9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a9e:	4a05      	ldr	r2, [pc, #20]	; (8001ab4 <SystemInit+0x20>)
 8001aa0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001aa4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001aa8:	bf00      	nop
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr
 8001ab2:	bf00      	nop
 8001ab4:	e000ed00 	.word	0xe000ed00

08001ab8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001abc:	4b14      	ldr	r3, [pc, #80]	; (8001b10 <MX_USART1_UART_Init+0x58>)
 8001abe:	4a15      	ldr	r2, [pc, #84]	; (8001b14 <MX_USART1_UART_Init+0x5c>)
 8001ac0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001ac2:	4b13      	ldr	r3, [pc, #76]	; (8001b10 <MX_USART1_UART_Init+0x58>)
 8001ac4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001ac8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001aca:	4b11      	ldr	r3, [pc, #68]	; (8001b10 <MX_USART1_UART_Init+0x58>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001ad0:	4b0f      	ldr	r3, [pc, #60]	; (8001b10 <MX_USART1_UART_Init+0x58>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001ad6:	4b0e      	ldr	r3, [pc, #56]	; (8001b10 <MX_USART1_UART_Init+0x58>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001adc:	4b0c      	ldr	r3, [pc, #48]	; (8001b10 <MX_USART1_UART_Init+0x58>)
 8001ade:	220c      	movs	r2, #12
 8001ae0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ae2:	4b0b      	ldr	r3, [pc, #44]	; (8001b10 <MX_USART1_UART_Init+0x58>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ae8:	4b09      	ldr	r3, [pc, #36]	; (8001b10 <MX_USART1_UART_Init+0x58>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001aee:	4b08      	ldr	r3, [pc, #32]	; (8001b10 <MX_USART1_UART_Init+0x58>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001af4:	4b06      	ldr	r3, [pc, #24]	; (8001b10 <MX_USART1_UART_Init+0x58>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001afa:	4805      	ldr	r0, [pc, #20]	; (8001b10 <MX_USART1_UART_Init+0x58>)
 8001afc:	f004 f848 	bl	8005b90 <HAL_UART_Init>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d001      	beq.n	8001b0a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001b06:	f7ff fdf7 	bl	80016f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001b0a:	bf00      	nop
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	2000a334 	.word	0x2000a334
 8001b14:	40013800 	.word	0x40013800

08001b18 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001b1c:	4b14      	ldr	r3, [pc, #80]	; (8001b70 <MX_USART2_UART_Init+0x58>)
 8001b1e:	4a15      	ldr	r2, [pc, #84]	; (8001b74 <MX_USART2_UART_Init+0x5c>)
 8001b20:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001b22:	4b13      	ldr	r3, [pc, #76]	; (8001b70 <MX_USART2_UART_Init+0x58>)
 8001b24:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b28:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b2a:	4b11      	ldr	r3, [pc, #68]	; (8001b70 <MX_USART2_UART_Init+0x58>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b30:	4b0f      	ldr	r3, [pc, #60]	; (8001b70 <MX_USART2_UART_Init+0x58>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001b36:	4b0e      	ldr	r3, [pc, #56]	; (8001b70 <MX_USART2_UART_Init+0x58>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b3c:	4b0c      	ldr	r3, [pc, #48]	; (8001b70 <MX_USART2_UART_Init+0x58>)
 8001b3e:	220c      	movs	r2, #12
 8001b40:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b42:	4b0b      	ldr	r3, [pc, #44]	; (8001b70 <MX_USART2_UART_Init+0x58>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b48:	4b09      	ldr	r3, [pc, #36]	; (8001b70 <MX_USART2_UART_Init+0x58>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b4e:	4b08      	ldr	r3, [pc, #32]	; (8001b70 <MX_USART2_UART_Init+0x58>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b54:	4b06      	ldr	r3, [pc, #24]	; (8001b70 <MX_USART2_UART_Init+0x58>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001b5a:	4805      	ldr	r0, [pc, #20]	; (8001b70 <MX_USART2_UART_Init+0x58>)
 8001b5c:	f004 f818 	bl	8005b90 <HAL_UART_Init>
 8001b60:	4603      	mov	r3, r0
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d001      	beq.n	8001b6a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001b66:	f7ff fdc7 	bl	80016f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001b6a:	bf00      	nop
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	2000a3b8 	.word	0x2000a3b8
 8001b74:	40004400 	.word	0x40004400

08001b78 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b0ae      	sub	sp, #184	; 0xb8
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b80:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001b84:	2200      	movs	r2, #0
 8001b86:	601a      	str	r2, [r3, #0]
 8001b88:	605a      	str	r2, [r3, #4]
 8001b8a:	609a      	str	r2, [r3, #8]
 8001b8c:	60da      	str	r2, [r3, #12]
 8001b8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b90:	f107 031c 	add.w	r3, r7, #28
 8001b94:	2288      	movs	r2, #136	; 0x88
 8001b96:	2100      	movs	r1, #0
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f006 f827 	bl	8007bec <memset>
  if(uartHandle->Instance==USART1)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4a47      	ldr	r2, [pc, #284]	; (8001cc0 <HAL_UART_MspInit+0x148>)
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	d145      	bne.n	8001c34 <HAL_UART_MspInit+0xbc>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001bac:	2300      	movs	r3, #0
 8001bae:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001bb0:	f107 031c 	add.w	r3, r7, #28
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f002 ffb9 	bl	8004b2c <HAL_RCCEx_PeriphCLKConfig>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d001      	beq.n	8001bc4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001bc0:	f7ff fd9a 	bl	80016f8 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001bc4:	4b3f      	ldr	r3, [pc, #252]	; (8001cc4 <HAL_UART_MspInit+0x14c>)
 8001bc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bc8:	4a3e      	ldr	r2, [pc, #248]	; (8001cc4 <HAL_UART_MspInit+0x14c>)
 8001bca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bce:	6613      	str	r3, [r2, #96]	; 0x60
 8001bd0:	4b3c      	ldr	r3, [pc, #240]	; (8001cc4 <HAL_UART_MspInit+0x14c>)
 8001bd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bd4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bd8:	61bb      	str	r3, [r7, #24]
 8001bda:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bdc:	4b39      	ldr	r3, [pc, #228]	; (8001cc4 <HAL_UART_MspInit+0x14c>)
 8001bde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001be0:	4a38      	ldr	r2, [pc, #224]	; (8001cc4 <HAL_UART_MspInit+0x14c>)
 8001be2:	f043 0301 	orr.w	r3, r3, #1
 8001be6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001be8:	4b36      	ldr	r3, [pc, #216]	; (8001cc4 <HAL_UART_MspInit+0x14c>)
 8001bea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bec:	f003 0301 	and.w	r3, r3, #1
 8001bf0:	617b      	str	r3, [r7, #20]
 8001bf2:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001bf4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001bf8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bfc:	2302      	movs	r3, #2
 8001bfe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c02:	2300      	movs	r3, #0
 8001c04:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c08:	2303      	movs	r3, #3
 8001c0a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001c0e:	2307      	movs	r3, #7
 8001c10:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c14:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001c18:	4619      	mov	r1, r3
 8001c1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c1e:	f001 ff73 	bl	8003b08 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001c22:	2200      	movs	r2, #0
 8001c24:	2100      	movs	r1, #0
 8001c26:	2025      	movs	r0, #37	; 0x25
 8001c28:	f001 fcc1 	bl	80035ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001c2c:	2025      	movs	r0, #37	; 0x25
 8001c2e:	f001 fcda 	bl	80035e6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001c32:	e040      	b.n	8001cb6 <HAL_UART_MspInit+0x13e>
  else if(uartHandle->Instance==USART2)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a23      	ldr	r2, [pc, #140]	; (8001cc8 <HAL_UART_MspInit+0x150>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d13b      	bne.n	8001cb6 <HAL_UART_MspInit+0x13e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001c3e:	2302      	movs	r3, #2
 8001c40:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001c42:	2300      	movs	r3, #0
 8001c44:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c46:	f107 031c 	add.w	r3, r7, #28
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f002 ff6e 	bl	8004b2c <HAL_RCCEx_PeriphCLKConfig>
 8001c50:	4603      	mov	r3, r0
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d001      	beq.n	8001c5a <HAL_UART_MspInit+0xe2>
      Error_Handler();
 8001c56:	f7ff fd4f 	bl	80016f8 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c5a:	4b1a      	ldr	r3, [pc, #104]	; (8001cc4 <HAL_UART_MspInit+0x14c>)
 8001c5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c5e:	4a19      	ldr	r2, [pc, #100]	; (8001cc4 <HAL_UART_MspInit+0x14c>)
 8001c60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c64:	6593      	str	r3, [r2, #88]	; 0x58
 8001c66:	4b17      	ldr	r3, [pc, #92]	; (8001cc4 <HAL_UART_MspInit+0x14c>)
 8001c68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c6e:	613b      	str	r3, [r7, #16]
 8001c70:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c72:	4b14      	ldr	r3, [pc, #80]	; (8001cc4 <HAL_UART_MspInit+0x14c>)
 8001c74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c76:	4a13      	ldr	r2, [pc, #76]	; (8001cc4 <HAL_UART_MspInit+0x14c>)
 8001c78:	f043 0301 	orr.w	r3, r3, #1
 8001c7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c7e:	4b11      	ldr	r3, [pc, #68]	; (8001cc4 <HAL_UART_MspInit+0x14c>)
 8001c80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c82:	f003 0301 	and.w	r3, r3, #1
 8001c86:	60fb      	str	r3, [r7, #12]
 8001c88:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001c8a:	230c      	movs	r3, #12
 8001c8c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c90:	2302      	movs	r3, #2
 8001c92:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c96:	2300      	movs	r3, #0
 8001c98:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c9c:	2303      	movs	r3, #3
 8001c9e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001ca2:	2307      	movs	r3, #7
 8001ca4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ca8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001cac:	4619      	mov	r1, r3
 8001cae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cb2:	f001 ff29 	bl	8003b08 <HAL_GPIO_Init>
}
 8001cb6:	bf00      	nop
 8001cb8:	37b8      	adds	r7, #184	; 0xb8
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	40013800 	.word	0x40013800
 8001cc4:	40021000 	.word	0x40021000
 8001cc8:	40004400 	.word	0x40004400

08001ccc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001ccc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d04 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001cd0:	f7ff fee0 	bl	8001a94 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001cd4:	480c      	ldr	r0, [pc, #48]	; (8001d08 <LoopForever+0x6>)
  ldr r1, =_edata
 8001cd6:	490d      	ldr	r1, [pc, #52]	; (8001d0c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001cd8:	4a0d      	ldr	r2, [pc, #52]	; (8001d10 <LoopForever+0xe>)
  movs r3, #0
 8001cda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cdc:	e002      	b.n	8001ce4 <LoopCopyDataInit>

08001cde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ce0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ce2:	3304      	adds	r3, #4

08001ce4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ce4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ce6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ce8:	d3f9      	bcc.n	8001cde <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cea:	4a0a      	ldr	r2, [pc, #40]	; (8001d14 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001cec:	4c0a      	ldr	r4, [pc, #40]	; (8001d18 <LoopForever+0x16>)
  movs r3, #0
 8001cee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cf0:	e001      	b.n	8001cf6 <LoopFillZerobss>

08001cf2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cf2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cf4:	3204      	adds	r2, #4

08001cf6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cf6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cf8:	d3fb      	bcc.n	8001cf2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001cfa:	f005 fedd 	bl	8007ab8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001cfe:	f7ff fc1f 	bl	8001540 <main>

08001d02 <LoopForever>:

LoopForever:
    b LoopForever
 8001d02:	e7fe      	b.n	8001d02 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001d04:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001d08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d0c:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8001d10:	0800e740 	.word	0x0800e740
  ldr r2, =_sbss
 8001d14:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8001d18:	2000a450 	.word	0x2000a450

08001d1c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001d1c:	e7fe      	b.n	8001d1c <ADC1_2_IRQHandler>

08001d1e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d1e:	b580      	push	{r7, lr}
 8001d20:	b082      	sub	sp, #8
 8001d22:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001d24:	2300      	movs	r3, #0
 8001d26:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d28:	2003      	movs	r0, #3
 8001d2a:	f001 fc35 	bl	8003598 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d2e:	200f      	movs	r0, #15
 8001d30:	f000 f80e 	bl	8001d50 <HAL_InitTick>
 8001d34:	4603      	mov	r3, r0
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d002      	beq.n	8001d40 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	71fb      	strb	r3, [r7, #7]
 8001d3e:	e001      	b.n	8001d44 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001d40:	f7ff fd80 	bl	8001844 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001d44:	79fb      	ldrb	r3, [r7, #7]
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	3708      	adds	r7, #8
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}
	...

08001d50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b084      	sub	sp, #16
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001d5c:	4b17      	ldr	r3, [pc, #92]	; (8001dbc <HAL_InitTick+0x6c>)
 8001d5e:	781b      	ldrb	r3, [r3, #0]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d023      	beq.n	8001dac <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001d64:	4b16      	ldr	r3, [pc, #88]	; (8001dc0 <HAL_InitTick+0x70>)
 8001d66:	681a      	ldr	r2, [r3, #0]
 8001d68:	4b14      	ldr	r3, [pc, #80]	; (8001dbc <HAL_InitTick+0x6c>)
 8001d6a:	781b      	ldrb	r3, [r3, #0]
 8001d6c:	4619      	mov	r1, r3
 8001d6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d72:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d76:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f001 fc41 	bl	8003602 <HAL_SYSTICK_Config>
 8001d80:	4603      	mov	r3, r0
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d10f      	bne.n	8001da6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2b0f      	cmp	r3, #15
 8001d8a:	d809      	bhi.n	8001da0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	6879      	ldr	r1, [r7, #4]
 8001d90:	f04f 30ff 	mov.w	r0, #4294967295
 8001d94:	f001 fc0b 	bl	80035ae <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001d98:	4a0a      	ldr	r2, [pc, #40]	; (8001dc4 <HAL_InitTick+0x74>)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6013      	str	r3, [r2, #0]
 8001d9e:	e007      	b.n	8001db0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001da0:	2301      	movs	r3, #1
 8001da2:	73fb      	strb	r3, [r7, #15]
 8001da4:	e004      	b.n	8001db0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
 8001da8:	73fb      	strb	r3, [r7, #15]
 8001daa:	e001      	b.n	8001db0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001dac:	2301      	movs	r3, #1
 8001dae:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001db0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	3710      	adds	r7, #16
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	20000010 	.word	0x20000010
 8001dc0:	20000008 	.word	0x20000008
 8001dc4:	2000000c 	.word	0x2000000c

08001dc8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001dcc:	4b06      	ldr	r3, [pc, #24]	; (8001de8 <HAL_IncTick+0x20>)
 8001dce:	781b      	ldrb	r3, [r3, #0]
 8001dd0:	461a      	mov	r2, r3
 8001dd2:	4b06      	ldr	r3, [pc, #24]	; (8001dec <HAL_IncTick+0x24>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4413      	add	r3, r2
 8001dd8:	4a04      	ldr	r2, [pc, #16]	; (8001dec <HAL_IncTick+0x24>)
 8001dda:	6013      	str	r3, [r2, #0]
}
 8001ddc:	bf00      	nop
 8001dde:	46bd      	mov	sp, r7
 8001de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de4:	4770      	bx	lr
 8001de6:	bf00      	nop
 8001de8:	20000010 	.word	0x20000010
 8001dec:	2000a43c 	.word	0x2000a43c

08001df0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001df0:	b480      	push	{r7}
 8001df2:	af00      	add	r7, sp, #0
  return uwTick;
 8001df4:	4b03      	ldr	r3, [pc, #12]	; (8001e04 <HAL_GetTick+0x14>)
 8001df6:	681b      	ldr	r3, [r3, #0]
}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr
 8001e02:	bf00      	nop
 8001e04:	2000a43c 	.word	0x2000a43c

08001e08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b084      	sub	sp, #16
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e10:	f7ff ffee 	bl	8001df0 <HAL_GetTick>
 8001e14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e20:	d005      	beq.n	8001e2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001e22:	4b0a      	ldr	r3, [pc, #40]	; (8001e4c <HAL_Delay+0x44>)
 8001e24:	781b      	ldrb	r3, [r3, #0]
 8001e26:	461a      	mov	r2, r3
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	4413      	add	r3, r2
 8001e2c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e2e:	bf00      	nop
 8001e30:	f7ff ffde 	bl	8001df0 <HAL_GetTick>
 8001e34:	4602      	mov	r2, r0
 8001e36:	68bb      	ldr	r3, [r7, #8]
 8001e38:	1ad3      	subs	r3, r2, r3
 8001e3a:	68fa      	ldr	r2, [r7, #12]
 8001e3c:	429a      	cmp	r2, r3
 8001e3e:	d8f7      	bhi.n	8001e30 <HAL_Delay+0x28>
  {
  }
}
 8001e40:	bf00      	nop
 8001e42:	bf00      	nop
 8001e44:	3710      	adds	r7, #16
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	20000010 	.word	0x20000010

08001e50 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b083      	sub	sp, #12
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
 8001e58:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	689b      	ldr	r3, [r3, #8]
 8001e5e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	431a      	orrs	r2, r3
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	609a      	str	r2, [r3, #8]
}
 8001e6a:	bf00      	nop
 8001e6c:	370c      	adds	r7, #12
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr

08001e76 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001e76:	b480      	push	{r7}
 8001e78:	b083      	sub	sp, #12
 8001e7a:	af00      	add	r7, sp, #0
 8001e7c:	6078      	str	r0, [r7, #4]
 8001e7e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	431a      	orrs	r2, r3
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	609a      	str	r2, [r3, #8]
}
 8001e90:	bf00      	nop
 8001e92:	370c      	adds	r7, #12
 8001e94:	46bd      	mov	sp, r7
 8001e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9a:	4770      	bx	lr

08001e9c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b083      	sub	sp, #12
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	689b      	ldr	r3, [r3, #8]
 8001ea8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	370c      	adds	r7, #12
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb6:	4770      	bx	lr

08001eb8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b087      	sub	sp, #28
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	60f8      	str	r0, [r7, #12]
 8001ec0:	60b9      	str	r1, [r7, #8]
 8001ec2:	607a      	str	r2, [r7, #4]
 8001ec4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	3360      	adds	r3, #96	; 0x60
 8001eca:	461a      	mov	r2, r3
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	009b      	lsls	r3, r3, #2
 8001ed0:	4413      	add	r3, r2
 8001ed2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	681a      	ldr	r2, [r3, #0]
 8001ed8:	4b08      	ldr	r3, [pc, #32]	; (8001efc <LL_ADC_SetOffset+0x44>)
 8001eda:	4013      	ands	r3, r2
 8001edc:	687a      	ldr	r2, [r7, #4]
 8001ede:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001ee2:	683a      	ldr	r2, [r7, #0]
 8001ee4:	430a      	orrs	r2, r1
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001ef0:	bf00      	nop
 8001ef2:	371c      	adds	r7, #28
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efa:	4770      	bx	lr
 8001efc:	03fff000 	.word	0x03fff000

08001f00 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b085      	sub	sp, #20
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
 8001f08:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	3360      	adds	r3, #96	; 0x60
 8001f0e:	461a      	mov	r2, r3
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	009b      	lsls	r3, r3, #2
 8001f14:	4413      	add	r3, r2
 8001f16:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001f20:	4618      	mov	r0, r3
 8001f22:	3714      	adds	r7, #20
 8001f24:	46bd      	mov	sp, r7
 8001f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2a:	4770      	bx	lr

08001f2c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b087      	sub	sp, #28
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	60f8      	str	r0, [r7, #12]
 8001f34:	60b9      	str	r1, [r7, #8]
 8001f36:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	3360      	adds	r3, #96	; 0x60
 8001f3c:	461a      	mov	r2, r3
 8001f3e:	68bb      	ldr	r3, [r7, #8]
 8001f40:	009b      	lsls	r3, r3, #2
 8001f42:	4413      	add	r3, r2
 8001f44:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f46:	697b      	ldr	r3, [r7, #20]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	431a      	orrs	r2, r3
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001f56:	bf00      	nop
 8001f58:	371c      	adds	r7, #28
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr

08001f62 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001f62:	b480      	push	{r7}
 8001f64:	b083      	sub	sp, #12
 8001f66:	af00      	add	r7, sp, #0
 8001f68:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	68db      	ldr	r3, [r3, #12]
 8001f6e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d101      	bne.n	8001f7a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001f76:	2301      	movs	r3, #1
 8001f78:	e000      	b.n	8001f7c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001f7a:	2300      	movs	r3, #0
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	370c      	adds	r7, #12
 8001f80:	46bd      	mov	sp, r7
 8001f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f86:	4770      	bx	lr

08001f88 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b087      	sub	sp, #28
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	60f8      	str	r0, [r7, #12]
 8001f90:	60b9      	str	r1, [r7, #8]
 8001f92:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	3330      	adds	r3, #48	; 0x30
 8001f98:	461a      	mov	r2, r3
 8001f9a:	68bb      	ldr	r3, [r7, #8]
 8001f9c:	0a1b      	lsrs	r3, r3, #8
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	f003 030c 	and.w	r3, r3, #12
 8001fa4:	4413      	add	r3, r2
 8001fa6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	681a      	ldr	r2, [r3, #0]
 8001fac:	68bb      	ldr	r3, [r7, #8]
 8001fae:	f003 031f 	and.w	r3, r3, #31
 8001fb2:	211f      	movs	r1, #31
 8001fb4:	fa01 f303 	lsl.w	r3, r1, r3
 8001fb8:	43db      	mvns	r3, r3
 8001fba:	401a      	ands	r2, r3
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	0e9b      	lsrs	r3, r3, #26
 8001fc0:	f003 011f 	and.w	r1, r3, #31
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	f003 031f 	and.w	r3, r3, #31
 8001fca:	fa01 f303 	lsl.w	r3, r1, r3
 8001fce:	431a      	orrs	r2, r3
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001fd4:	bf00      	nop
 8001fd6:	371c      	adds	r7, #28
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr

08001fe0 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b087      	sub	sp, #28
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	60f8      	str	r0, [r7, #12]
 8001fe8:	60b9      	str	r1, [r7, #8]
 8001fea:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	3314      	adds	r3, #20
 8001ff0:	461a      	mov	r2, r3
 8001ff2:	68bb      	ldr	r3, [r7, #8]
 8001ff4:	0e5b      	lsrs	r3, r3, #25
 8001ff6:	009b      	lsls	r3, r3, #2
 8001ff8:	f003 0304 	and.w	r3, r3, #4
 8001ffc:	4413      	add	r3, r2
 8001ffe:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	0d1b      	lsrs	r3, r3, #20
 8002008:	f003 031f 	and.w	r3, r3, #31
 800200c:	2107      	movs	r1, #7
 800200e:	fa01 f303 	lsl.w	r3, r1, r3
 8002012:	43db      	mvns	r3, r3
 8002014:	401a      	ands	r2, r3
 8002016:	68bb      	ldr	r3, [r7, #8]
 8002018:	0d1b      	lsrs	r3, r3, #20
 800201a:	f003 031f 	and.w	r3, r3, #31
 800201e:	6879      	ldr	r1, [r7, #4]
 8002020:	fa01 f303 	lsl.w	r3, r1, r3
 8002024:	431a      	orrs	r2, r3
 8002026:	697b      	ldr	r3, [r7, #20]
 8002028:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800202a:	bf00      	nop
 800202c:	371c      	adds	r7, #28
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr
	...

08002038 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002038:	b480      	push	{r7}
 800203a:	b085      	sub	sp, #20
 800203c:	af00      	add	r7, sp, #0
 800203e:	60f8      	str	r0, [r7, #12]
 8002040:	60b9      	str	r1, [r7, #8]
 8002042:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800204a:	68bb      	ldr	r3, [r7, #8]
 800204c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002050:	43db      	mvns	r3, r3
 8002052:	401a      	ands	r2, r3
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	f003 0318 	and.w	r3, r3, #24
 800205a:	4908      	ldr	r1, [pc, #32]	; (800207c <LL_ADC_SetChannelSingleDiff+0x44>)
 800205c:	40d9      	lsrs	r1, r3
 800205e:	68bb      	ldr	r3, [r7, #8]
 8002060:	400b      	ands	r3, r1
 8002062:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002066:	431a      	orrs	r2, r3
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800206e:	bf00      	nop
 8002070:	3714      	adds	r7, #20
 8002072:	46bd      	mov	sp, r7
 8002074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002078:	4770      	bx	lr
 800207a:	bf00      	nop
 800207c:	0007ffff 	.word	0x0007ffff

08002080 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002080:	b480      	push	{r7}
 8002082:	b083      	sub	sp, #12
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	689b      	ldr	r3, [r3, #8]
 800208c:	f003 031f 	and.w	r3, r3, #31
}
 8002090:	4618      	mov	r0, r3
 8002092:	370c      	adds	r7, #12
 8002094:	46bd      	mov	sp, r7
 8002096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209a:	4770      	bx	lr

0800209c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800209c:	b480      	push	{r7}
 800209e:	b083      	sub	sp, #12
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	689b      	ldr	r3, [r3, #8]
 80020a8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80020ac:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80020b0:	687a      	ldr	r2, [r7, #4]
 80020b2:	6093      	str	r3, [r2, #8]
}
 80020b4:	bf00      	nop
 80020b6:	370c      	adds	r7, #12
 80020b8:	46bd      	mov	sp, r7
 80020ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020be:	4770      	bx	lr

080020c0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b083      	sub	sp, #12
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	689b      	ldr	r3, [r3, #8]
 80020cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80020d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80020d4:	d101      	bne.n	80020da <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80020d6:	2301      	movs	r3, #1
 80020d8:	e000      	b.n	80020dc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80020da:	2300      	movs	r3, #0
}
 80020dc:	4618      	mov	r0, r3
 80020de:	370c      	adds	r7, #12
 80020e0:	46bd      	mov	sp, r7
 80020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e6:	4770      	bx	lr

080020e8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b083      	sub	sp, #12
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	689b      	ldr	r3, [r3, #8]
 80020f4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80020f8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80020fc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002104:	bf00      	nop
 8002106:	370c      	adds	r7, #12
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr

08002110 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002110:	b480      	push	{r7}
 8002112:	b083      	sub	sp, #12
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	689b      	ldr	r3, [r3, #8]
 800211c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002120:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002124:	d101      	bne.n	800212a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002126:	2301      	movs	r3, #1
 8002128:	e000      	b.n	800212c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800212a:	2300      	movs	r3, #0
}
 800212c:	4618      	mov	r0, r3
 800212e:	370c      	adds	r7, #12
 8002130:	46bd      	mov	sp, r7
 8002132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002136:	4770      	bx	lr

08002138 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002138:	b480      	push	{r7}
 800213a:	b083      	sub	sp, #12
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	689b      	ldr	r3, [r3, #8]
 8002144:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002148:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800214c:	f043 0201 	orr.w	r2, r3, #1
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002154:	bf00      	nop
 8002156:	370c      	adds	r7, #12
 8002158:	46bd      	mov	sp, r7
 800215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215e:	4770      	bx	lr

08002160 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002160:	b480      	push	{r7}
 8002162:	b083      	sub	sp, #12
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	689b      	ldr	r3, [r3, #8]
 800216c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002170:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002174:	f043 0202 	orr.w	r2, r3, #2
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800217c:	bf00      	nop
 800217e:	370c      	adds	r7, #12
 8002180:	46bd      	mov	sp, r7
 8002182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002186:	4770      	bx	lr

08002188 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002188:	b480      	push	{r7}
 800218a:	b083      	sub	sp, #12
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	689b      	ldr	r3, [r3, #8]
 8002194:	f003 0301 	and.w	r3, r3, #1
 8002198:	2b01      	cmp	r3, #1
 800219a:	d101      	bne.n	80021a0 <LL_ADC_IsEnabled+0x18>
 800219c:	2301      	movs	r3, #1
 800219e:	e000      	b.n	80021a2 <LL_ADC_IsEnabled+0x1a>
 80021a0:	2300      	movs	r3, #0
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	370c      	adds	r7, #12
 80021a6:	46bd      	mov	sp, r7
 80021a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ac:	4770      	bx	lr

080021ae <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80021ae:	b480      	push	{r7}
 80021b0:	b083      	sub	sp, #12
 80021b2:	af00      	add	r7, sp, #0
 80021b4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	689b      	ldr	r3, [r3, #8]
 80021ba:	f003 0302 	and.w	r3, r3, #2
 80021be:	2b02      	cmp	r3, #2
 80021c0:	d101      	bne.n	80021c6 <LL_ADC_IsDisableOngoing+0x18>
 80021c2:	2301      	movs	r3, #1
 80021c4:	e000      	b.n	80021c8 <LL_ADC_IsDisableOngoing+0x1a>
 80021c6:	2300      	movs	r3, #0
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	370c      	adds	r7, #12
 80021cc:	46bd      	mov	sp, r7
 80021ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d2:	4770      	bx	lr

080021d4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b083      	sub	sp, #12
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	689b      	ldr	r3, [r3, #8]
 80021e0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80021e4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80021e8:	f043 0204 	orr.w	r2, r3, #4
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80021f0:	bf00      	nop
 80021f2:	370c      	adds	r7, #12
 80021f4:	46bd      	mov	sp, r7
 80021f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fa:	4770      	bx	lr

080021fc <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b083      	sub	sp, #12
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	689b      	ldr	r3, [r3, #8]
 8002208:	f003 0304 	and.w	r3, r3, #4
 800220c:	2b04      	cmp	r3, #4
 800220e:	d101      	bne.n	8002214 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002210:	2301      	movs	r3, #1
 8002212:	e000      	b.n	8002216 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002214:	2300      	movs	r3, #0
}
 8002216:	4618      	mov	r0, r3
 8002218:	370c      	adds	r7, #12
 800221a:	46bd      	mov	sp, r7
 800221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002220:	4770      	bx	lr

08002222 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002222:	b480      	push	{r7}
 8002224:	b083      	sub	sp, #12
 8002226:	af00      	add	r7, sp, #0
 8002228:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	689b      	ldr	r3, [r3, #8]
 800222e:	f003 0308 	and.w	r3, r3, #8
 8002232:	2b08      	cmp	r3, #8
 8002234:	d101      	bne.n	800223a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002236:	2301      	movs	r3, #1
 8002238:	e000      	b.n	800223c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800223a:	2300      	movs	r3, #0
}
 800223c:	4618      	mov	r0, r3
 800223e:	370c      	adds	r7, #12
 8002240:	46bd      	mov	sp, r7
 8002242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002246:	4770      	bx	lr

08002248 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002248:	b590      	push	{r4, r7, lr}
 800224a:	b089      	sub	sp, #36	; 0x24
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002250:	2300      	movs	r3, #0
 8002252:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002254:	2300      	movs	r3, #0
 8002256:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d101      	bne.n	8002262 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800225e:	2301      	movs	r3, #1
 8002260:	e136      	b.n	80024d0 <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	691b      	ldr	r3, [r3, #16]
 8002266:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800226c:	2b00      	cmp	r3, #0
 800226e:	d109      	bne.n	8002284 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002270:	6878      	ldr	r0, [r7, #4]
 8002272:	f7fe fe9d 	bl	8000fb0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2200      	movs	r2, #0
 800227a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2200      	movs	r2, #0
 8002280:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4618      	mov	r0, r3
 800228a:	f7ff ff19 	bl	80020c0 <LL_ADC_IsDeepPowerDownEnabled>
 800228e:	4603      	mov	r3, r0
 8002290:	2b00      	cmp	r3, #0
 8002292:	d004      	beq.n	800229e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4618      	mov	r0, r3
 800229a:	f7ff feff 	bl	800209c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4618      	mov	r0, r3
 80022a4:	f7ff ff34 	bl	8002110 <LL_ADC_IsInternalRegulatorEnabled>
 80022a8:	4603      	mov	r3, r0
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d115      	bne.n	80022da <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4618      	mov	r0, r3
 80022b4:	f7ff ff18 	bl	80020e8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80022b8:	4b87      	ldr	r3, [pc, #540]	; (80024d8 <HAL_ADC_Init+0x290>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	099b      	lsrs	r3, r3, #6
 80022be:	4a87      	ldr	r2, [pc, #540]	; (80024dc <HAL_ADC_Init+0x294>)
 80022c0:	fba2 2303 	umull	r2, r3, r2, r3
 80022c4:	099b      	lsrs	r3, r3, #6
 80022c6:	3301      	adds	r3, #1
 80022c8:	005b      	lsls	r3, r3, #1
 80022ca:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80022cc:	e002      	b.n	80022d4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80022ce:	68bb      	ldr	r3, [r7, #8]
 80022d0:	3b01      	subs	r3, #1
 80022d2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d1f9      	bne.n	80022ce <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4618      	mov	r0, r3
 80022e0:	f7ff ff16 	bl	8002110 <LL_ADC_IsInternalRegulatorEnabled>
 80022e4:	4603      	mov	r3, r0
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d10d      	bne.n	8002306 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022ee:	f043 0210 	orr.w	r2, r3, #16
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022fa:	f043 0201 	orr.w	r2, r3, #1
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002302:	2301      	movs	r3, #1
 8002304:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4618      	mov	r0, r3
 800230c:	f7ff ff76 	bl	80021fc <LL_ADC_REG_IsConversionOngoing>
 8002310:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002316:	f003 0310 	and.w	r3, r3, #16
 800231a:	2b00      	cmp	r3, #0
 800231c:	f040 80cf 	bne.w	80024be <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	2b00      	cmp	r3, #0
 8002324:	f040 80cb 	bne.w	80024be <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800232c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002330:	f043 0202 	orr.w	r2, r3, #2
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4618      	mov	r0, r3
 800233e:	f7ff ff23 	bl	8002188 <LL_ADC_IsEnabled>
 8002342:	4603      	mov	r3, r0
 8002344:	2b00      	cmp	r3, #0
 8002346:	d115      	bne.n	8002374 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002348:	4865      	ldr	r0, [pc, #404]	; (80024e0 <HAL_ADC_Init+0x298>)
 800234a:	f7ff ff1d 	bl	8002188 <LL_ADC_IsEnabled>
 800234e:	4604      	mov	r4, r0
 8002350:	4864      	ldr	r0, [pc, #400]	; (80024e4 <HAL_ADC_Init+0x29c>)
 8002352:	f7ff ff19 	bl	8002188 <LL_ADC_IsEnabled>
 8002356:	4603      	mov	r3, r0
 8002358:	431c      	orrs	r4, r3
 800235a:	4863      	ldr	r0, [pc, #396]	; (80024e8 <HAL_ADC_Init+0x2a0>)
 800235c:	f7ff ff14 	bl	8002188 <LL_ADC_IsEnabled>
 8002360:	4603      	mov	r3, r0
 8002362:	4323      	orrs	r3, r4
 8002364:	2b00      	cmp	r3, #0
 8002366:	d105      	bne.n	8002374 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	4619      	mov	r1, r3
 800236e:	485f      	ldr	r0, [pc, #380]	; (80024ec <HAL_ADC_Init+0x2a4>)
 8002370:	f7ff fd6e 	bl	8001e50 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	7e5b      	ldrb	r3, [r3, #25]
 8002378:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800237e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002384:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800238a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002392:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002394:	4313      	orrs	r3, r2
 8002396:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800239e:	2b01      	cmp	r3, #1
 80023a0:	d106      	bne.n	80023b0 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a6:	3b01      	subs	r3, #1
 80023a8:	045b      	lsls	r3, r3, #17
 80023aa:	69ba      	ldr	r2, [r7, #24]
 80023ac:	4313      	orrs	r3, r2
 80023ae:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d009      	beq.n	80023cc <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023bc:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023c4:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80023c6:	69ba      	ldr	r2, [r7, #24]
 80023c8:	4313      	orrs	r3, r2
 80023ca:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	68da      	ldr	r2, [r3, #12]
 80023d2:	4b47      	ldr	r3, [pc, #284]	; (80024f0 <HAL_ADC_Init+0x2a8>)
 80023d4:	4013      	ands	r3, r2
 80023d6:	687a      	ldr	r2, [r7, #4]
 80023d8:	6812      	ldr	r2, [r2, #0]
 80023da:	69b9      	ldr	r1, [r7, #24]
 80023dc:	430b      	orrs	r3, r1
 80023de:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4618      	mov	r0, r3
 80023e6:	f7ff ff09 	bl	80021fc <LL_ADC_REG_IsConversionOngoing>
 80023ea:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4618      	mov	r0, r3
 80023f2:	f7ff ff16 	bl	8002222 <LL_ADC_INJ_IsConversionOngoing>
 80023f6:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80023f8:	693b      	ldr	r3, [r7, #16]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d13d      	bne.n	800247a <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d13a      	bne.n	800247a <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002408:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002410:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002412:	4313      	orrs	r3, r2
 8002414:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	68db      	ldr	r3, [r3, #12]
 800241c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002420:	f023 0302 	bic.w	r3, r3, #2
 8002424:	687a      	ldr	r2, [r7, #4]
 8002426:	6812      	ldr	r2, [r2, #0]
 8002428:	69b9      	ldr	r1, [r7, #24]
 800242a:	430b      	orrs	r3, r1
 800242c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002434:	2b01      	cmp	r3, #1
 8002436:	d118      	bne.n	800246a <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	691b      	ldr	r3, [r3, #16]
 800243e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002442:	f023 0304 	bic.w	r3, r3, #4
 8002446:	687a      	ldr	r2, [r7, #4]
 8002448:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800244a:	687a      	ldr	r2, [r7, #4]
 800244c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800244e:	4311      	orrs	r1, r2
 8002450:	687a      	ldr	r2, [r7, #4]
 8002452:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002454:	4311      	orrs	r1, r2
 8002456:	687a      	ldr	r2, [r7, #4]
 8002458:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800245a:	430a      	orrs	r2, r1
 800245c:	431a      	orrs	r2, r3
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f042 0201 	orr.w	r2, r2, #1
 8002466:	611a      	str	r2, [r3, #16]
 8002468:	e007      	b.n	800247a <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	691a      	ldr	r2, [r3, #16]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f022 0201 	bic.w	r2, r2, #1
 8002478:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	691b      	ldr	r3, [r3, #16]
 800247e:	2b01      	cmp	r3, #1
 8002480:	d10c      	bne.n	800249c <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002488:	f023 010f 	bic.w	r1, r3, #15
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	69db      	ldr	r3, [r3, #28]
 8002490:	1e5a      	subs	r2, r3, #1
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	430a      	orrs	r2, r1
 8002498:	631a      	str	r2, [r3, #48]	; 0x30
 800249a:	e007      	b.n	80024ac <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f022 020f 	bic.w	r2, r2, #15
 80024aa:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024b0:	f023 0303 	bic.w	r3, r3, #3
 80024b4:	f043 0201 	orr.w	r2, r3, #1
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	655a      	str	r2, [r3, #84]	; 0x54
 80024bc:	e007      	b.n	80024ce <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024c2:	f043 0210 	orr.w	r2, r3, #16
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80024ca:	2301      	movs	r3, #1
 80024cc:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80024ce:	7ffb      	ldrb	r3, [r7, #31]
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	3724      	adds	r7, #36	; 0x24
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd90      	pop	{r4, r7, pc}
 80024d8:	20000008 	.word	0x20000008
 80024dc:	053e2d63 	.word	0x053e2d63
 80024e0:	50040000 	.word	0x50040000
 80024e4:	50040100 	.word	0x50040100
 80024e8:	50040200 	.word	0x50040200
 80024ec:	50040300 	.word	0x50040300
 80024f0:	fff0c007 	.word	0xfff0c007

080024f4 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b086      	sub	sp, #24
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	60f8      	str	r0, [r7, #12]
 80024fc:	60b9      	str	r1, [r7, #8]
 80024fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002500:	4853      	ldr	r0, [pc, #332]	; (8002650 <HAL_ADC_Start_DMA+0x15c>)
 8002502:	f7ff fdbd 	bl	8002080 <LL_ADC_GetMultimode>
 8002506:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4618      	mov	r0, r3
 800250e:	f7ff fe75 	bl	80021fc <LL_ADC_REG_IsConversionOngoing>
 8002512:	4603      	mov	r3, r0
 8002514:	2b00      	cmp	r3, #0
 8002516:	f040 8093 	bne.w	8002640 <HAL_ADC_Start_DMA+0x14c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002520:	2b01      	cmp	r3, #1
 8002522:	d101      	bne.n	8002528 <HAL_ADC_Start_DMA+0x34>
 8002524:	2302      	movs	r3, #2
 8002526:	e08e      	b.n	8002646 <HAL_ADC_Start_DMA+0x152>
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	2201      	movs	r2, #1
 800252c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a47      	ldr	r2, [pc, #284]	; (8002654 <HAL_ADC_Start_DMA+0x160>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d008      	beq.n	800254c <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d005      	beq.n	800254c <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002540:	693b      	ldr	r3, [r7, #16]
 8002542:	2b05      	cmp	r3, #5
 8002544:	d002      	beq.n	800254c <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	2b09      	cmp	r3, #9
 800254a:	d172      	bne.n	8002632 <HAL_ADC_Start_DMA+0x13e>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800254c:	68f8      	ldr	r0, [r7, #12]
 800254e:	f000 fc9b 	bl	8002e88 <ADC_Enable>
 8002552:	4603      	mov	r3, r0
 8002554:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002556:	7dfb      	ldrb	r3, [r7, #23]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d165      	bne.n	8002628 <HAL_ADC_Start_DMA+0x134>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002560:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002564:	f023 0301 	bic.w	r3, r3, #1
 8002568:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a38      	ldr	r2, [pc, #224]	; (8002658 <HAL_ADC_Start_DMA+0x164>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d002      	beq.n	8002580 <HAL_ADC_Start_DMA+0x8c>
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	e000      	b.n	8002582 <HAL_ADC_Start_DMA+0x8e>
 8002580:	4b36      	ldr	r3, [pc, #216]	; (800265c <HAL_ADC_Start_DMA+0x168>)
 8002582:	68fa      	ldr	r2, [r7, #12]
 8002584:	6812      	ldr	r2, [r2, #0]
 8002586:	4293      	cmp	r3, r2
 8002588:	d002      	beq.n	8002590 <HAL_ADC_Start_DMA+0x9c>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800258a:	693b      	ldr	r3, [r7, #16]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d105      	bne.n	800259c <HAL_ADC_Start_DMA+0xa8>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002594:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	655a      	str	r2, [r3, #84]	; 0x54
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d006      	beq.n	80025b6 <HAL_ADC_Start_DMA+0xc2>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025ac:	f023 0206 	bic.w	r2, r3, #6
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	659a      	str	r2, [r3, #88]	; 0x58
 80025b4:	e002      	b.n	80025bc <HAL_ADC_Start_DMA+0xc8>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	2200      	movs	r2, #0
 80025ba:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025c0:	4a27      	ldr	r2, [pc, #156]	; (8002660 <HAL_ADC_Start_DMA+0x16c>)
 80025c2:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025c8:	4a26      	ldr	r2, [pc, #152]	; (8002664 <HAL_ADC_Start_DMA+0x170>)
 80025ca:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025d0:	4a25      	ldr	r2, [pc, #148]	; (8002668 <HAL_ADC_Start_DMA+0x174>)
 80025d2:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	221c      	movs	r2, #28
 80025da:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	2200      	movs	r2, #0
 80025e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	685a      	ldr	r2, [r3, #4]
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f042 0210 	orr.w	r2, r2, #16
 80025f2:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	68da      	ldr	r2, [r3, #12]
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f042 0201 	orr.w	r2, r2, #1
 8002602:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	3340      	adds	r3, #64	; 0x40
 800260e:	4619      	mov	r1, r3
 8002610:	68ba      	ldr	r2, [r7, #8]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	f001 f8ba 	bl	800378c <HAL_DMA_Start_IT>
 8002618:	4603      	mov	r3, r0
 800261a:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4618      	mov	r0, r3
 8002622:	f7ff fdd7 	bl	80021d4 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002626:	e00d      	b.n	8002644 <HAL_ADC_Start_DMA+0x150>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	2200      	movs	r2, #0
 800262c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8002630:	e008      	b.n	8002644 <HAL_ADC_Start_DMA+0x150>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002632:	2301      	movs	r3, #1
 8002634:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	2200      	movs	r2, #0
 800263a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800263e:	e001      	b.n	8002644 <HAL_ADC_Start_DMA+0x150>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002640:	2302      	movs	r3, #2
 8002642:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002644:	7dfb      	ldrb	r3, [r7, #23]
}
 8002646:	4618      	mov	r0, r3
 8002648:	3718      	adds	r7, #24
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}
 800264e:	bf00      	nop
 8002650:	50040300 	.word	0x50040300
 8002654:	50040200 	.word	0x50040200
 8002658:	50040100 	.word	0x50040100
 800265c:	50040000 	.word	0x50040000
 8002660:	0800300b 	.word	0x0800300b
 8002664:	080030e3 	.word	0x080030e3
 8002668:	080030ff 	.word	0x080030ff

0800266c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800266c:	b480      	push	{r7}
 800266e:	b083      	sub	sp, #12
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002674:	bf00      	nop
 8002676:	370c      	adds	r7, #12
 8002678:	46bd      	mov	sp, r7
 800267a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267e:	4770      	bx	lr

08002680 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002680:	b480      	push	{r7}
 8002682:	b083      	sub	sp, #12
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002688:	bf00      	nop
 800268a:	370c      	adds	r7, #12
 800268c:	46bd      	mov	sp, r7
 800268e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002692:	4770      	bx	lr

08002694 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002694:	b480      	push	{r7}
 8002696:	b083      	sub	sp, #12
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800269c:	bf00      	nop
 800269e:	370c      	adds	r7, #12
 80026a0:	46bd      	mov	sp, r7
 80026a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a6:	4770      	bx	lr

080026a8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b0b6      	sub	sp, #216	; 0xd8
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
 80026b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026b2:	2300      	movs	r3, #0
 80026b4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80026b8:	2300      	movs	r3, #0
 80026ba:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	d101      	bne.n	80026ca <HAL_ADC_ConfigChannel+0x22>
 80026c6:	2302      	movs	r3, #2
 80026c8:	e3c7      	b.n	8002e5a <HAL_ADC_ConfigChannel+0x7b2>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2201      	movs	r2, #1
 80026ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4618      	mov	r0, r3
 80026d8:	f7ff fd90 	bl	80021fc <LL_ADC_REG_IsConversionOngoing>
 80026dc:	4603      	mov	r3, r0
 80026de:	2b00      	cmp	r3, #0
 80026e0:	f040 83a8 	bne.w	8002e34 <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	2b05      	cmp	r3, #5
 80026ea:	d824      	bhi.n	8002736 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	3b02      	subs	r3, #2
 80026f2:	2b03      	cmp	r3, #3
 80026f4:	d81b      	bhi.n	800272e <HAL_ADC_ConfigChannel+0x86>
 80026f6:	a201      	add	r2, pc, #4	; (adr r2, 80026fc <HAL_ADC_ConfigChannel+0x54>)
 80026f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026fc:	0800270d 	.word	0x0800270d
 8002700:	08002715 	.word	0x08002715
 8002704:	0800271d 	.word	0x0800271d
 8002708:	08002725 	.word	0x08002725
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	220c      	movs	r2, #12
 8002710:	605a      	str	r2, [r3, #4]
          break;
 8002712:	e011      	b.n	8002738 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	2212      	movs	r2, #18
 8002718:	605a      	str	r2, [r3, #4]
          break;
 800271a:	e00d      	b.n	8002738 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	2218      	movs	r2, #24
 8002720:	605a      	str	r2, [r3, #4]
          break;
 8002722:	e009      	b.n	8002738 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	f44f 7280 	mov.w	r2, #256	; 0x100
 800272a:	605a      	str	r2, [r3, #4]
          break;
 800272c:	e004      	b.n	8002738 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	2206      	movs	r2, #6
 8002732:	605a      	str	r2, [r3, #4]
          break;
 8002734:	e000      	b.n	8002738 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8002736:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6818      	ldr	r0, [r3, #0]
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	6859      	ldr	r1, [r3, #4]
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	461a      	mov	r2, r3
 8002746:	f7ff fc1f 	bl	8001f88 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4618      	mov	r0, r3
 8002750:	f7ff fd54 	bl	80021fc <LL_ADC_REG_IsConversionOngoing>
 8002754:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4618      	mov	r0, r3
 800275e:	f7ff fd60 	bl	8002222 <LL_ADC_INJ_IsConversionOngoing>
 8002762:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002766:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800276a:	2b00      	cmp	r3, #0
 800276c:	f040 81a6 	bne.w	8002abc <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002770:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002774:	2b00      	cmp	r3, #0
 8002776:	f040 81a1 	bne.w	8002abc <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6818      	ldr	r0, [r3, #0]
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	6819      	ldr	r1, [r3, #0]
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	689b      	ldr	r3, [r3, #8]
 8002786:	461a      	mov	r2, r3
 8002788:	f7ff fc2a 	bl	8001fe0 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	695a      	ldr	r2, [r3, #20]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	68db      	ldr	r3, [r3, #12]
 8002796:	08db      	lsrs	r3, r3, #3
 8002798:	f003 0303 	and.w	r3, r3, #3
 800279c:	005b      	lsls	r3, r3, #1
 800279e:	fa02 f303 	lsl.w	r3, r2, r3
 80027a2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	691b      	ldr	r3, [r3, #16]
 80027aa:	2b04      	cmp	r3, #4
 80027ac:	d00a      	beq.n	80027c4 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6818      	ldr	r0, [r3, #0]
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	6919      	ldr	r1, [r3, #16]
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	681a      	ldr	r2, [r3, #0]
 80027ba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80027be:	f7ff fb7b 	bl	8001eb8 <LL_ADC_SetOffset>
 80027c2:	e17b      	b.n	8002abc <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	2100      	movs	r1, #0
 80027ca:	4618      	mov	r0, r3
 80027cc:	f7ff fb98 	bl	8001f00 <LL_ADC_GetOffsetChannel>
 80027d0:	4603      	mov	r3, r0
 80027d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d10a      	bne.n	80027f0 <HAL_ADC_ConfigChannel+0x148>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	2100      	movs	r1, #0
 80027e0:	4618      	mov	r0, r3
 80027e2:	f7ff fb8d 	bl	8001f00 <LL_ADC_GetOffsetChannel>
 80027e6:	4603      	mov	r3, r0
 80027e8:	0e9b      	lsrs	r3, r3, #26
 80027ea:	f003 021f 	and.w	r2, r3, #31
 80027ee:	e01e      	b.n	800282e <HAL_ADC_ConfigChannel+0x186>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	2100      	movs	r1, #0
 80027f6:	4618      	mov	r0, r3
 80027f8:	f7ff fb82 	bl	8001f00 <LL_ADC_GetOffsetChannel>
 80027fc:	4603      	mov	r3, r0
 80027fe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002802:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002806:	fa93 f3a3 	rbit	r3, r3
 800280a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800280e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002812:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002816:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800281a:	2b00      	cmp	r3, #0
 800281c:	d101      	bne.n	8002822 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 800281e:	2320      	movs	r3, #32
 8002820:	e004      	b.n	800282c <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8002822:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002826:	fab3 f383 	clz	r3, r3
 800282a:	b2db      	uxtb	r3, r3
 800282c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002836:	2b00      	cmp	r3, #0
 8002838:	d105      	bne.n	8002846 <HAL_ADC_ConfigChannel+0x19e>
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	0e9b      	lsrs	r3, r3, #26
 8002840:	f003 031f 	and.w	r3, r3, #31
 8002844:	e018      	b.n	8002878 <HAL_ADC_ConfigChannel+0x1d0>
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800284e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002852:	fa93 f3a3 	rbit	r3, r3
 8002856:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800285a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800285e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002862:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002866:	2b00      	cmp	r3, #0
 8002868:	d101      	bne.n	800286e <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 800286a:	2320      	movs	r3, #32
 800286c:	e004      	b.n	8002878 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 800286e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002872:	fab3 f383 	clz	r3, r3
 8002876:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002878:	429a      	cmp	r2, r3
 800287a:	d106      	bne.n	800288a <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	2200      	movs	r2, #0
 8002882:	2100      	movs	r1, #0
 8002884:	4618      	mov	r0, r3
 8002886:	f7ff fb51 	bl	8001f2c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	2101      	movs	r1, #1
 8002890:	4618      	mov	r0, r3
 8002892:	f7ff fb35 	bl	8001f00 <LL_ADC_GetOffsetChannel>
 8002896:	4603      	mov	r3, r0
 8002898:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800289c:	2b00      	cmp	r3, #0
 800289e:	d10a      	bne.n	80028b6 <HAL_ADC_ConfigChannel+0x20e>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	2101      	movs	r1, #1
 80028a6:	4618      	mov	r0, r3
 80028a8:	f7ff fb2a 	bl	8001f00 <LL_ADC_GetOffsetChannel>
 80028ac:	4603      	mov	r3, r0
 80028ae:	0e9b      	lsrs	r3, r3, #26
 80028b0:	f003 021f 	and.w	r2, r3, #31
 80028b4:	e01e      	b.n	80028f4 <HAL_ADC_ConfigChannel+0x24c>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	2101      	movs	r1, #1
 80028bc:	4618      	mov	r0, r3
 80028be:	f7ff fb1f 	bl	8001f00 <LL_ADC_GetOffsetChannel>
 80028c2:	4603      	mov	r3, r0
 80028c4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028c8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80028cc:	fa93 f3a3 	rbit	r3, r3
 80028d0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80028d4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80028d8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80028dc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d101      	bne.n	80028e8 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 80028e4:	2320      	movs	r3, #32
 80028e6:	e004      	b.n	80028f2 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 80028e8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80028ec:	fab3 f383 	clz	r3, r3
 80028f0:	b2db      	uxtb	r3, r3
 80028f2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d105      	bne.n	800290c <HAL_ADC_ConfigChannel+0x264>
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	0e9b      	lsrs	r3, r3, #26
 8002906:	f003 031f 	and.w	r3, r3, #31
 800290a:	e018      	b.n	800293e <HAL_ADC_ConfigChannel+0x296>
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002914:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002918:	fa93 f3a3 	rbit	r3, r3
 800291c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002920:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002924:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002928:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800292c:	2b00      	cmp	r3, #0
 800292e:	d101      	bne.n	8002934 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8002930:	2320      	movs	r3, #32
 8002932:	e004      	b.n	800293e <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8002934:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002938:	fab3 f383 	clz	r3, r3
 800293c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800293e:	429a      	cmp	r2, r3
 8002940:	d106      	bne.n	8002950 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	2200      	movs	r2, #0
 8002948:	2101      	movs	r1, #1
 800294a:	4618      	mov	r0, r3
 800294c:	f7ff faee 	bl	8001f2c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	2102      	movs	r1, #2
 8002956:	4618      	mov	r0, r3
 8002958:	f7ff fad2 	bl	8001f00 <LL_ADC_GetOffsetChannel>
 800295c:	4603      	mov	r3, r0
 800295e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002962:	2b00      	cmp	r3, #0
 8002964:	d10a      	bne.n	800297c <HAL_ADC_ConfigChannel+0x2d4>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	2102      	movs	r1, #2
 800296c:	4618      	mov	r0, r3
 800296e:	f7ff fac7 	bl	8001f00 <LL_ADC_GetOffsetChannel>
 8002972:	4603      	mov	r3, r0
 8002974:	0e9b      	lsrs	r3, r3, #26
 8002976:	f003 021f 	and.w	r2, r3, #31
 800297a:	e01e      	b.n	80029ba <HAL_ADC_ConfigChannel+0x312>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	2102      	movs	r1, #2
 8002982:	4618      	mov	r0, r3
 8002984:	f7ff fabc 	bl	8001f00 <LL_ADC_GetOffsetChannel>
 8002988:	4603      	mov	r3, r0
 800298a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800298e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002992:	fa93 f3a3 	rbit	r3, r3
 8002996:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800299a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800299e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80029a2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d101      	bne.n	80029ae <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 80029aa:	2320      	movs	r3, #32
 80029ac:	e004      	b.n	80029b8 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80029ae:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80029b2:	fab3 f383 	clz	r3, r3
 80029b6:	b2db      	uxtb	r3, r3
 80029b8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d105      	bne.n	80029d2 <HAL_ADC_ConfigChannel+0x32a>
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	0e9b      	lsrs	r3, r3, #26
 80029cc:	f003 031f 	and.w	r3, r3, #31
 80029d0:	e016      	b.n	8002a00 <HAL_ADC_ConfigChannel+0x358>
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029da:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80029de:	fa93 f3a3 	rbit	r3, r3
 80029e2:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80029e4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80029e6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80029ea:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d101      	bne.n	80029f6 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 80029f2:	2320      	movs	r3, #32
 80029f4:	e004      	b.n	8002a00 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 80029f6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80029fa:	fab3 f383 	clz	r3, r3
 80029fe:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002a00:	429a      	cmp	r2, r3
 8002a02:	d106      	bne.n	8002a12 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	2102      	movs	r1, #2
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f7ff fa8d 	bl	8001f2c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	2103      	movs	r1, #3
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f7ff fa71 	bl	8001f00 <LL_ADC_GetOffsetChannel>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d10a      	bne.n	8002a3e <HAL_ADC_ConfigChannel+0x396>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	2103      	movs	r1, #3
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f7ff fa66 	bl	8001f00 <LL_ADC_GetOffsetChannel>
 8002a34:	4603      	mov	r3, r0
 8002a36:	0e9b      	lsrs	r3, r3, #26
 8002a38:	f003 021f 	and.w	r2, r3, #31
 8002a3c:	e017      	b.n	8002a6e <HAL_ADC_ConfigChannel+0x3c6>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	2103      	movs	r1, #3
 8002a44:	4618      	mov	r0, r3
 8002a46:	f7ff fa5b 	bl	8001f00 <LL_ADC_GetOffsetChannel>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a4e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a50:	fa93 f3a3 	rbit	r3, r3
 8002a54:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002a56:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002a58:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002a5a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d101      	bne.n	8002a64 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8002a60:	2320      	movs	r3, #32
 8002a62:	e003      	b.n	8002a6c <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8002a64:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002a66:	fab3 f383 	clz	r3, r3
 8002a6a:	b2db      	uxtb	r3, r3
 8002a6c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d105      	bne.n	8002a86 <HAL_ADC_ConfigChannel+0x3de>
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	0e9b      	lsrs	r3, r3, #26
 8002a80:	f003 031f 	and.w	r3, r3, #31
 8002a84:	e011      	b.n	8002aaa <HAL_ADC_ConfigChannel+0x402>
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a8c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002a8e:	fa93 f3a3 	rbit	r3, r3
 8002a92:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002a94:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002a96:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002a98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d101      	bne.n	8002aa2 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8002a9e:	2320      	movs	r3, #32
 8002aa0:	e003      	b.n	8002aaa <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8002aa2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002aa4:	fab3 f383 	clz	r3, r3
 8002aa8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002aaa:	429a      	cmp	r2, r3
 8002aac:	d106      	bne.n	8002abc <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	2103      	movs	r1, #3
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f7ff fa38 	bl	8001f2c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f7ff fb61 	bl	8002188 <LL_ADC_IsEnabled>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	f040 813f 	bne.w	8002d4c <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6818      	ldr	r0, [r3, #0]
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	6819      	ldr	r1, [r3, #0]
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	68db      	ldr	r3, [r3, #12]
 8002ada:	461a      	mov	r2, r3
 8002adc:	f7ff faac 	bl	8002038 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	68db      	ldr	r3, [r3, #12]
 8002ae4:	4a8e      	ldr	r2, [pc, #568]	; (8002d20 <HAL_ADC_ConfigChannel+0x678>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	f040 8130 	bne.w	8002d4c <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d10b      	bne.n	8002b14 <HAL_ADC_ConfigChannel+0x46c>
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	0e9b      	lsrs	r3, r3, #26
 8002b02:	3301      	adds	r3, #1
 8002b04:	f003 031f 	and.w	r3, r3, #31
 8002b08:	2b09      	cmp	r3, #9
 8002b0a:	bf94      	ite	ls
 8002b0c:	2301      	movls	r3, #1
 8002b0e:	2300      	movhi	r3, #0
 8002b10:	b2db      	uxtb	r3, r3
 8002b12:	e019      	b.n	8002b48 <HAL_ADC_ConfigChannel+0x4a0>
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b1a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b1c:	fa93 f3a3 	rbit	r3, r3
 8002b20:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002b22:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b24:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002b26:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d101      	bne.n	8002b30 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8002b2c:	2320      	movs	r3, #32
 8002b2e:	e003      	b.n	8002b38 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8002b30:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002b32:	fab3 f383 	clz	r3, r3
 8002b36:	b2db      	uxtb	r3, r3
 8002b38:	3301      	adds	r3, #1
 8002b3a:	f003 031f 	and.w	r3, r3, #31
 8002b3e:	2b09      	cmp	r3, #9
 8002b40:	bf94      	ite	ls
 8002b42:	2301      	movls	r3, #1
 8002b44:	2300      	movhi	r3, #0
 8002b46:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d079      	beq.n	8002c40 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d107      	bne.n	8002b68 <HAL_ADC_ConfigChannel+0x4c0>
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	0e9b      	lsrs	r3, r3, #26
 8002b5e:	3301      	adds	r3, #1
 8002b60:	069b      	lsls	r3, r3, #26
 8002b62:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b66:	e015      	b.n	8002b94 <HAL_ADC_ConfigChannel+0x4ec>
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b70:	fa93 f3a3 	rbit	r3, r3
 8002b74:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002b76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b78:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002b7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d101      	bne.n	8002b84 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8002b80:	2320      	movs	r3, #32
 8002b82:	e003      	b.n	8002b8c <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8002b84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b86:	fab3 f383 	clz	r3, r3
 8002b8a:	b2db      	uxtb	r3, r3
 8002b8c:	3301      	adds	r3, #1
 8002b8e:	069b      	lsls	r3, r3, #26
 8002b90:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d109      	bne.n	8002bb4 <HAL_ADC_ConfigChannel+0x50c>
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	0e9b      	lsrs	r3, r3, #26
 8002ba6:	3301      	adds	r3, #1
 8002ba8:	f003 031f 	and.w	r3, r3, #31
 8002bac:	2101      	movs	r1, #1
 8002bae:	fa01 f303 	lsl.w	r3, r1, r3
 8002bb2:	e017      	b.n	8002be4 <HAL_ADC_ConfigChannel+0x53c>
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002bbc:	fa93 f3a3 	rbit	r3, r3
 8002bc0:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002bc2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002bc4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002bc6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d101      	bne.n	8002bd0 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8002bcc:	2320      	movs	r3, #32
 8002bce:	e003      	b.n	8002bd8 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8002bd0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002bd2:	fab3 f383 	clz	r3, r3
 8002bd6:	b2db      	uxtb	r3, r3
 8002bd8:	3301      	adds	r3, #1
 8002bda:	f003 031f 	and.w	r3, r3, #31
 8002bde:	2101      	movs	r1, #1
 8002be0:	fa01 f303 	lsl.w	r3, r1, r3
 8002be4:	ea42 0103 	orr.w	r1, r2, r3
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d10a      	bne.n	8002c0a <HAL_ADC_ConfigChannel+0x562>
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	0e9b      	lsrs	r3, r3, #26
 8002bfa:	3301      	adds	r3, #1
 8002bfc:	f003 021f 	and.w	r2, r3, #31
 8002c00:	4613      	mov	r3, r2
 8002c02:	005b      	lsls	r3, r3, #1
 8002c04:	4413      	add	r3, r2
 8002c06:	051b      	lsls	r3, r3, #20
 8002c08:	e018      	b.n	8002c3c <HAL_ADC_ConfigChannel+0x594>
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c12:	fa93 f3a3 	rbit	r3, r3
 8002c16:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002c18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c1a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002c1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d101      	bne.n	8002c26 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8002c22:	2320      	movs	r3, #32
 8002c24:	e003      	b.n	8002c2e <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8002c26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c28:	fab3 f383 	clz	r3, r3
 8002c2c:	b2db      	uxtb	r3, r3
 8002c2e:	3301      	adds	r3, #1
 8002c30:	f003 021f 	and.w	r2, r3, #31
 8002c34:	4613      	mov	r3, r2
 8002c36:	005b      	lsls	r3, r3, #1
 8002c38:	4413      	add	r3, r2
 8002c3a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c3c:	430b      	orrs	r3, r1
 8002c3e:	e080      	b.n	8002d42 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d107      	bne.n	8002c5c <HAL_ADC_ConfigChannel+0x5b4>
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	0e9b      	lsrs	r3, r3, #26
 8002c52:	3301      	adds	r3, #1
 8002c54:	069b      	lsls	r3, r3, #26
 8002c56:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c5a:	e015      	b.n	8002c88 <HAL_ADC_ConfigChannel+0x5e0>
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c64:	fa93 f3a3 	rbit	r3, r3
 8002c68:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c6c:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d101      	bne.n	8002c78 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8002c74:	2320      	movs	r3, #32
 8002c76:	e003      	b.n	8002c80 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8002c78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c7a:	fab3 f383 	clz	r3, r3
 8002c7e:	b2db      	uxtb	r3, r3
 8002c80:	3301      	adds	r3, #1
 8002c82:	069b      	lsls	r3, r3, #26
 8002c84:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d109      	bne.n	8002ca8 <HAL_ADC_ConfigChannel+0x600>
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	0e9b      	lsrs	r3, r3, #26
 8002c9a:	3301      	adds	r3, #1
 8002c9c:	f003 031f 	and.w	r3, r3, #31
 8002ca0:	2101      	movs	r1, #1
 8002ca2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ca6:	e017      	b.n	8002cd8 <HAL_ADC_ConfigChannel+0x630>
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cae:	6a3b      	ldr	r3, [r7, #32]
 8002cb0:	fa93 f3a3 	rbit	r3, r3
 8002cb4:	61fb      	str	r3, [r7, #28]
  return result;
 8002cb6:	69fb      	ldr	r3, [r7, #28]
 8002cb8:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d101      	bne.n	8002cc4 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8002cc0:	2320      	movs	r3, #32
 8002cc2:	e003      	b.n	8002ccc <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8002cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc6:	fab3 f383 	clz	r3, r3
 8002cca:	b2db      	uxtb	r3, r3
 8002ccc:	3301      	adds	r3, #1
 8002cce:	f003 031f 	and.w	r3, r3, #31
 8002cd2:	2101      	movs	r1, #1
 8002cd4:	fa01 f303 	lsl.w	r3, r1, r3
 8002cd8:	ea42 0103 	orr.w	r1, r2, r3
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d10d      	bne.n	8002d04 <HAL_ADC_ConfigChannel+0x65c>
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	0e9b      	lsrs	r3, r3, #26
 8002cee:	3301      	adds	r3, #1
 8002cf0:	f003 021f 	and.w	r2, r3, #31
 8002cf4:	4613      	mov	r3, r2
 8002cf6:	005b      	lsls	r3, r3, #1
 8002cf8:	4413      	add	r3, r2
 8002cfa:	3b1e      	subs	r3, #30
 8002cfc:	051b      	lsls	r3, r3, #20
 8002cfe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002d02:	e01d      	b.n	8002d40 <HAL_ADC_ConfigChannel+0x698>
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	fa93 f3a3 	rbit	r3, r3
 8002d10:	613b      	str	r3, [r7, #16]
  return result;
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002d16:	69bb      	ldr	r3, [r7, #24]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d103      	bne.n	8002d24 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8002d1c:	2320      	movs	r3, #32
 8002d1e:	e005      	b.n	8002d2c <HAL_ADC_ConfigChannel+0x684>
 8002d20:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002d24:	69bb      	ldr	r3, [r7, #24]
 8002d26:	fab3 f383 	clz	r3, r3
 8002d2a:	b2db      	uxtb	r3, r3
 8002d2c:	3301      	adds	r3, #1
 8002d2e:	f003 021f 	and.w	r2, r3, #31
 8002d32:	4613      	mov	r3, r2
 8002d34:	005b      	lsls	r3, r3, #1
 8002d36:	4413      	add	r3, r2
 8002d38:	3b1e      	subs	r3, #30
 8002d3a:	051b      	lsls	r3, r3, #20
 8002d3c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d40:	430b      	orrs	r3, r1
 8002d42:	683a      	ldr	r2, [r7, #0]
 8002d44:	6892      	ldr	r2, [r2, #8]
 8002d46:	4619      	mov	r1, r3
 8002d48:	f7ff f94a 	bl	8001fe0 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	681a      	ldr	r2, [r3, #0]
 8002d50:	4b44      	ldr	r3, [pc, #272]	; (8002e64 <HAL_ADC_ConfigChannel+0x7bc>)
 8002d52:	4013      	ands	r3, r2
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d07a      	beq.n	8002e4e <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002d58:	4843      	ldr	r0, [pc, #268]	; (8002e68 <HAL_ADC_ConfigChannel+0x7c0>)
 8002d5a:	f7ff f89f 	bl	8001e9c <LL_ADC_GetCommonPathInternalCh>
 8002d5e:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a41      	ldr	r2, [pc, #260]	; (8002e6c <HAL_ADC_ConfigChannel+0x7c4>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d12c      	bne.n	8002dc6 <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002d6c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002d70:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d126      	bne.n	8002dc6 <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a3c      	ldr	r2, [pc, #240]	; (8002e70 <HAL_ADC_ConfigChannel+0x7c8>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d004      	beq.n	8002d8c <HAL_ADC_ConfigChannel+0x6e4>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a3b      	ldr	r2, [pc, #236]	; (8002e74 <HAL_ADC_ConfigChannel+0x7cc>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d15d      	bne.n	8002e48 <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002d8c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002d90:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002d94:	4619      	mov	r1, r3
 8002d96:	4834      	ldr	r0, [pc, #208]	; (8002e68 <HAL_ADC_ConfigChannel+0x7c0>)
 8002d98:	f7ff f86d 	bl	8001e76 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002d9c:	4b36      	ldr	r3, [pc, #216]	; (8002e78 <HAL_ADC_ConfigChannel+0x7d0>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	099b      	lsrs	r3, r3, #6
 8002da2:	4a36      	ldr	r2, [pc, #216]	; (8002e7c <HAL_ADC_ConfigChannel+0x7d4>)
 8002da4:	fba2 2303 	umull	r2, r3, r2, r3
 8002da8:	099b      	lsrs	r3, r3, #6
 8002daa:	1c5a      	adds	r2, r3, #1
 8002dac:	4613      	mov	r3, r2
 8002dae:	005b      	lsls	r3, r3, #1
 8002db0:	4413      	add	r3, r2
 8002db2:	009b      	lsls	r3, r3, #2
 8002db4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002db6:	e002      	b.n	8002dbe <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	3b01      	subs	r3, #1
 8002dbc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d1f9      	bne.n	8002db8 <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002dc4:	e040      	b.n	8002e48 <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a2d      	ldr	r2, [pc, #180]	; (8002e80 <HAL_ADC_ConfigChannel+0x7d8>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d118      	bne.n	8002e02 <HAL_ADC_ConfigChannel+0x75a>
 8002dd0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002dd4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d112      	bne.n	8002e02 <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a23      	ldr	r2, [pc, #140]	; (8002e70 <HAL_ADC_ConfigChannel+0x7c8>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d004      	beq.n	8002df0 <HAL_ADC_ConfigChannel+0x748>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a22      	ldr	r2, [pc, #136]	; (8002e74 <HAL_ADC_ConfigChannel+0x7cc>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d12d      	bne.n	8002e4c <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002df0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002df4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002df8:	4619      	mov	r1, r3
 8002dfa:	481b      	ldr	r0, [pc, #108]	; (8002e68 <HAL_ADC_ConfigChannel+0x7c0>)
 8002dfc:	f7ff f83b 	bl	8001e76 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002e00:	e024      	b.n	8002e4c <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a1f      	ldr	r2, [pc, #124]	; (8002e84 <HAL_ADC_ConfigChannel+0x7dc>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d120      	bne.n	8002e4e <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002e0c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002e10:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d11a      	bne.n	8002e4e <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a14      	ldr	r2, [pc, #80]	; (8002e70 <HAL_ADC_ConfigChannel+0x7c8>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d115      	bne.n	8002e4e <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002e22:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002e26:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002e2a:	4619      	mov	r1, r3
 8002e2c:	480e      	ldr	r0, [pc, #56]	; (8002e68 <HAL_ADC_ConfigChannel+0x7c0>)
 8002e2e:	f7ff f822 	bl	8001e76 <LL_ADC_SetCommonPathInternalCh>
 8002e32:	e00c      	b.n	8002e4e <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e38:	f043 0220 	orr.w	r2, r3, #32
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002e40:	2301      	movs	r3, #1
 8002e42:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002e46:	e002      	b.n	8002e4e <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002e48:	bf00      	nop
 8002e4a:	e000      	b.n	8002e4e <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002e4c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2200      	movs	r2, #0
 8002e52:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002e56:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	37d8      	adds	r7, #216	; 0xd8
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}
 8002e62:	bf00      	nop
 8002e64:	80080000 	.word	0x80080000
 8002e68:	50040300 	.word	0x50040300
 8002e6c:	c7520000 	.word	0xc7520000
 8002e70:	50040000 	.word	0x50040000
 8002e74:	50040200 	.word	0x50040200
 8002e78:	20000008 	.word	0x20000008
 8002e7c:	053e2d63 	.word	0x053e2d63
 8002e80:	cb840000 	.word	0xcb840000
 8002e84:	80000001 	.word	0x80000001

08002e88 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b084      	sub	sp, #16
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4618      	mov	r0, r3
 8002e96:	f7ff f977 	bl	8002188 <LL_ADC_IsEnabled>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d14d      	bne.n	8002f3c <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	689a      	ldr	r2, [r3, #8]
 8002ea6:	4b28      	ldr	r3, [pc, #160]	; (8002f48 <ADC_Enable+0xc0>)
 8002ea8:	4013      	ands	r3, r2
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d00d      	beq.n	8002eca <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eb2:	f043 0210 	orr.w	r2, r3, #16
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ebe:	f043 0201 	orr.w	r2, r3, #1
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e039      	b.n	8002f3e <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f7ff f932 	bl	8002138 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002ed4:	f7fe ff8c 	bl	8001df0 <HAL_GetTick>
 8002ed8:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002eda:	e028      	b.n	8002f2e <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f7ff f951 	bl	8002188 <LL_ADC_IsEnabled>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d104      	bne.n	8002ef6 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	f7ff f921 	bl	8002138 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002ef6:	f7fe ff7b 	bl	8001df0 <HAL_GetTick>
 8002efa:	4602      	mov	r2, r0
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	1ad3      	subs	r3, r2, r3
 8002f00:	2b02      	cmp	r3, #2
 8002f02:	d914      	bls.n	8002f2e <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f003 0301 	and.w	r3, r3, #1
 8002f0e:	2b01      	cmp	r3, #1
 8002f10:	d00d      	beq.n	8002f2e <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f16:	f043 0210 	orr.w	r2, r3, #16
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f22:	f043 0201 	orr.w	r2, r3, #1
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e007      	b.n	8002f3e <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f003 0301 	and.w	r3, r3, #1
 8002f38:	2b01      	cmp	r3, #1
 8002f3a:	d1cf      	bne.n	8002edc <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002f3c:	2300      	movs	r3, #0
}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	3710      	adds	r7, #16
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}
 8002f46:	bf00      	nop
 8002f48:	8000003f 	.word	0x8000003f

08002f4c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b084      	sub	sp, #16
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f7ff f928 	bl	80021ae <LL_ADC_IsDisableOngoing>
 8002f5e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4618      	mov	r0, r3
 8002f66:	f7ff f90f 	bl	8002188 <LL_ADC_IsEnabled>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d047      	beq.n	8003000 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d144      	bne.n	8003000 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	f003 030d 	and.w	r3, r3, #13
 8002f80:	2b01      	cmp	r3, #1
 8002f82:	d10c      	bne.n	8002f9e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f7ff f8e9 	bl	8002160 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	2203      	movs	r2, #3
 8002f94:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002f96:	f7fe ff2b 	bl	8001df0 <HAL_GetTick>
 8002f9a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002f9c:	e029      	b.n	8002ff2 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fa2:	f043 0210 	orr.w	r2, r3, #16
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fae:	f043 0201 	orr.w	r2, r3, #1
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	e023      	b.n	8003002 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002fba:	f7fe ff19 	bl	8001df0 <HAL_GetTick>
 8002fbe:	4602      	mov	r2, r0
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	1ad3      	subs	r3, r2, r3
 8002fc4:	2b02      	cmp	r3, #2
 8002fc6:	d914      	bls.n	8002ff2 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	689b      	ldr	r3, [r3, #8]
 8002fce:	f003 0301 	and.w	r3, r3, #1
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d00d      	beq.n	8002ff2 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fda:	f043 0210 	orr.w	r2, r3, #16
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fe6:	f043 0201 	orr.w	r2, r3, #1
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e007      	b.n	8003002 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	f003 0301 	and.w	r3, r3, #1
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d1dc      	bne.n	8002fba <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003000:	2300      	movs	r3, #0
}
 8003002:	4618      	mov	r0, r3
 8003004:	3710      	adds	r7, #16
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}

0800300a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800300a:	b580      	push	{r7, lr}
 800300c:	b084      	sub	sp, #16
 800300e:	af00      	add	r7, sp, #0
 8003010:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003016:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800301c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003020:	2b00      	cmp	r3, #0
 8003022:	d14b      	bne.n	80030bc <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003028:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f003 0308 	and.w	r3, r3, #8
 800303a:	2b00      	cmp	r3, #0
 800303c:	d021      	beq.n	8003082 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4618      	mov	r0, r3
 8003044:	f7fe ff8d 	bl	8001f62 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003048:	4603      	mov	r3, r0
 800304a:	2b00      	cmp	r3, #0
 800304c:	d032      	beq.n	80030b4 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	68db      	ldr	r3, [r3, #12]
 8003054:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003058:	2b00      	cmp	r3, #0
 800305a:	d12b      	bne.n	80030b4 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003060:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800306c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003070:	2b00      	cmp	r3, #0
 8003072:	d11f      	bne.n	80030b4 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003078:	f043 0201 	orr.w	r2, r3, #1
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	655a      	str	r2, [r3, #84]	; 0x54
 8003080:	e018      	b.n	80030b4 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	68db      	ldr	r3, [r3, #12]
 8003088:	f003 0302 	and.w	r3, r3, #2
 800308c:	2b00      	cmp	r3, #0
 800308e:	d111      	bne.n	80030b4 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003094:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d105      	bne.n	80030b4 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030ac:	f043 0201 	orr.w	r2, r3, #1
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80030b4:	68f8      	ldr	r0, [r7, #12]
 80030b6:	f7ff fad9 	bl	800266c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80030ba:	e00e      	b.n	80030da <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030c0:	f003 0310 	and.w	r3, r3, #16
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d003      	beq.n	80030d0 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80030c8:	68f8      	ldr	r0, [r7, #12]
 80030ca:	f7ff fae3 	bl	8002694 <HAL_ADC_ErrorCallback>
}
 80030ce:	e004      	b.n	80030da <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030d6:	6878      	ldr	r0, [r7, #4]
 80030d8:	4798      	blx	r3
}
 80030da:	bf00      	nop
 80030dc:	3710      	adds	r7, #16
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}

080030e2 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80030e2:	b580      	push	{r7, lr}
 80030e4:	b084      	sub	sp, #16
 80030e6:	af00      	add	r7, sp, #0
 80030e8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030ee:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80030f0:	68f8      	ldr	r0, [r7, #12]
 80030f2:	f7ff fac5 	bl	8002680 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80030f6:	bf00      	nop
 80030f8:	3710      	adds	r7, #16
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}

080030fe <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80030fe:	b580      	push	{r7, lr}
 8003100:	b084      	sub	sp, #16
 8003102:	af00      	add	r7, sp, #0
 8003104:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800310a:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003110:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800311c:	f043 0204 	orr.w	r2, r3, #4
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003124:	68f8      	ldr	r0, [r7, #12]
 8003126:	f7ff fab5 	bl	8002694 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800312a:	bf00      	nop
 800312c:	3710      	adds	r7, #16
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}

08003132 <LL_ADC_IsEnabled>:
{
 8003132:	b480      	push	{r7}
 8003134:	b083      	sub	sp, #12
 8003136:	af00      	add	r7, sp, #0
 8003138:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	f003 0301 	and.w	r3, r3, #1
 8003142:	2b01      	cmp	r3, #1
 8003144:	d101      	bne.n	800314a <LL_ADC_IsEnabled+0x18>
 8003146:	2301      	movs	r3, #1
 8003148:	e000      	b.n	800314c <LL_ADC_IsEnabled+0x1a>
 800314a:	2300      	movs	r3, #0
}
 800314c:	4618      	mov	r0, r3
 800314e:	370c      	adds	r7, #12
 8003150:	46bd      	mov	sp, r7
 8003152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003156:	4770      	bx	lr

08003158 <LL_ADC_StartCalibration>:
{
 8003158:	b480      	push	{r7}
 800315a:	b083      	sub	sp, #12
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
 8003160:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	689b      	ldr	r3, [r3, #8]
 8003166:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800316a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800316e:	683a      	ldr	r2, [r7, #0]
 8003170:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003174:	4313      	orrs	r3, r2
 8003176:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	609a      	str	r2, [r3, #8]
}
 800317e:	bf00      	nop
 8003180:	370c      	adds	r7, #12
 8003182:	46bd      	mov	sp, r7
 8003184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003188:	4770      	bx	lr

0800318a <LL_ADC_IsCalibrationOnGoing>:
{
 800318a:	b480      	push	{r7}
 800318c:	b083      	sub	sp, #12
 800318e:	af00      	add	r7, sp, #0
 8003190:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	689b      	ldr	r3, [r3, #8]
 8003196:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800319a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800319e:	d101      	bne.n	80031a4 <LL_ADC_IsCalibrationOnGoing+0x1a>
 80031a0:	2301      	movs	r3, #1
 80031a2:	e000      	b.n	80031a6 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80031a4:	2300      	movs	r3, #0
}
 80031a6:	4618      	mov	r0, r3
 80031a8:	370c      	adds	r7, #12
 80031aa:	46bd      	mov	sp, r7
 80031ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b0:	4770      	bx	lr

080031b2 <LL_ADC_REG_IsConversionOngoing>:
{
 80031b2:	b480      	push	{r7}
 80031b4:	b083      	sub	sp, #12
 80031b6:	af00      	add	r7, sp, #0
 80031b8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	f003 0304 	and.w	r3, r3, #4
 80031c2:	2b04      	cmp	r3, #4
 80031c4:	d101      	bne.n	80031ca <LL_ADC_REG_IsConversionOngoing+0x18>
 80031c6:	2301      	movs	r3, #1
 80031c8:	e000      	b.n	80031cc <LL_ADC_REG_IsConversionOngoing+0x1a>
 80031ca:	2300      	movs	r3, #0
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	370c      	adds	r7, #12
 80031d0:	46bd      	mov	sp, r7
 80031d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d6:	4770      	bx	lr

080031d8 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b084      	sub	sp, #16
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
 80031e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80031e2:	2300      	movs	r3, #0
 80031e4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80031ec:	2b01      	cmp	r3, #1
 80031ee:	d101      	bne.n	80031f4 <HAL_ADCEx_Calibration_Start+0x1c>
 80031f0:	2302      	movs	r3, #2
 80031f2:	e04d      	b.n	8003290 <HAL_ADCEx_Calibration_Start+0xb8>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2201      	movs	r2, #1
 80031f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80031fc:	6878      	ldr	r0, [r7, #4]
 80031fe:	f7ff fea5 	bl	8002f4c <ADC_Disable>
 8003202:	4603      	mov	r3, r0
 8003204:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003206:	7bfb      	ldrb	r3, [r7, #15]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d136      	bne.n	800327a <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003210:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003214:	f023 0302 	bic.w	r3, r3, #2
 8003218:	f043 0202 	orr.w	r2, r3, #2
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	6839      	ldr	r1, [r7, #0]
 8003226:	4618      	mov	r0, r3
 8003228:	f7ff ff96 	bl	8003158 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800322c:	e014      	b.n	8003258 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800322e:	68bb      	ldr	r3, [r7, #8]
 8003230:	3301      	adds	r3, #1
 8003232:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 800323a:	d30d      	bcc.n	8003258 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003240:	f023 0312 	bic.w	r3, r3, #18
 8003244:	f043 0210 	orr.w	r2, r3, #16
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2200      	movs	r2, #0
 8003250:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8003254:	2301      	movs	r3, #1
 8003256:	e01b      	b.n	8003290 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4618      	mov	r0, r3
 800325e:	f7ff ff94 	bl	800318a <LL_ADC_IsCalibrationOnGoing>
 8003262:	4603      	mov	r3, r0
 8003264:	2b00      	cmp	r3, #0
 8003266:	d1e2      	bne.n	800322e <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800326c:	f023 0303 	bic.w	r3, r3, #3
 8003270:	f043 0201 	orr.w	r2, r3, #1
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	655a      	str	r2, [r3, #84]	; 0x54
 8003278:	e005      	b.n	8003286 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800327e:	f043 0210 	orr.w	r2, r3, #16
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2200      	movs	r2, #0
 800328a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800328e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003290:	4618      	mov	r0, r3
 8003292:	3710      	adds	r7, #16
 8003294:	46bd      	mov	sp, r7
 8003296:	bd80      	pop	{r7, pc}

08003298 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003298:	b590      	push	{r4, r7, lr}
 800329a:	b09f      	sub	sp, #124	; 0x7c
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
 80032a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80032a2:	2300      	movs	r3, #0
 80032a4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80032ae:	2b01      	cmp	r3, #1
 80032b0:	d101      	bne.n	80032b6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80032b2:	2302      	movs	r3, #2
 80032b4:	e093      	b.n	80033de <HAL_ADCEx_MultiModeConfigChannel+0x146>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2201      	movs	r2, #1
 80032ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 80032be:	2300      	movs	r3, #0
 80032c0:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 80032c2:	2300      	movs	r3, #0
 80032c4:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a47      	ldr	r2, [pc, #284]	; (80033e8 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d102      	bne.n	80032d6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80032d0:	4b46      	ldr	r3, [pc, #280]	; (80033ec <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80032d2:	60bb      	str	r3, [r7, #8]
 80032d4:	e001      	b.n	80032da <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80032d6:	2300      	movs	r3, #0
 80032d8:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d10b      	bne.n	80032f8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032e4:	f043 0220 	orr.w	r2, r3, #32
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2200      	movs	r2, #0
 80032f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	e072      	b.n	80033de <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	4618      	mov	r0, r3
 80032fc:	f7ff ff59 	bl	80031b2 <LL_ADC_REG_IsConversionOngoing>
 8003300:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4618      	mov	r0, r3
 8003308:	f7ff ff53 	bl	80031b2 <LL_ADC_REG_IsConversionOngoing>
 800330c:	4603      	mov	r3, r0
 800330e:	2b00      	cmp	r3, #0
 8003310:	d154      	bne.n	80033bc <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003312:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003314:	2b00      	cmp	r3, #0
 8003316:	d151      	bne.n	80033bc <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003318:	4b35      	ldr	r3, [pc, #212]	; (80033f0 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 800331a:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d02c      	beq.n	800337e <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003324:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003326:	689b      	ldr	r3, [r3, #8]
 8003328:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	6859      	ldr	r1, [r3, #4]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003336:	035b      	lsls	r3, r3, #13
 8003338:	430b      	orrs	r3, r1
 800333a:	431a      	orrs	r2, r3
 800333c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800333e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003340:	4829      	ldr	r0, [pc, #164]	; (80033e8 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003342:	f7ff fef6 	bl	8003132 <LL_ADC_IsEnabled>
 8003346:	4604      	mov	r4, r0
 8003348:	4828      	ldr	r0, [pc, #160]	; (80033ec <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800334a:	f7ff fef2 	bl	8003132 <LL_ADC_IsEnabled>
 800334e:	4603      	mov	r3, r0
 8003350:	431c      	orrs	r4, r3
 8003352:	4828      	ldr	r0, [pc, #160]	; (80033f4 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8003354:	f7ff feed 	bl	8003132 <LL_ADC_IsEnabled>
 8003358:	4603      	mov	r3, r0
 800335a:	4323      	orrs	r3, r4
 800335c:	2b00      	cmp	r3, #0
 800335e:	d137      	bne.n	80033d0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003360:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003368:	f023 030f 	bic.w	r3, r3, #15
 800336c:	683a      	ldr	r2, [r7, #0]
 800336e:	6811      	ldr	r1, [r2, #0]
 8003370:	683a      	ldr	r2, [r7, #0]
 8003372:	6892      	ldr	r2, [r2, #8]
 8003374:	430a      	orrs	r2, r1
 8003376:	431a      	orrs	r2, r3
 8003378:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800337a:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800337c:	e028      	b.n	80033d0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800337e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003380:	689b      	ldr	r3, [r3, #8]
 8003382:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003386:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003388:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800338a:	4817      	ldr	r0, [pc, #92]	; (80033e8 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800338c:	f7ff fed1 	bl	8003132 <LL_ADC_IsEnabled>
 8003390:	4604      	mov	r4, r0
 8003392:	4816      	ldr	r0, [pc, #88]	; (80033ec <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003394:	f7ff fecd 	bl	8003132 <LL_ADC_IsEnabled>
 8003398:	4603      	mov	r3, r0
 800339a:	431c      	orrs	r4, r3
 800339c:	4815      	ldr	r0, [pc, #84]	; (80033f4 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800339e:	f7ff fec8 	bl	8003132 <LL_ADC_IsEnabled>
 80033a2:	4603      	mov	r3, r0
 80033a4:	4323      	orrs	r3, r4
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d112      	bne.n	80033d0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80033aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80033b2:	f023 030f 	bic.w	r3, r3, #15
 80033b6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80033b8:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80033ba:	e009      	b.n	80033d0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033c0:	f043 0220 	orr.w	r2, r3, #32
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80033c8:	2301      	movs	r3, #1
 80033ca:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80033ce:	e000      	b.n	80033d2 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80033d0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2200      	movs	r2, #0
 80033d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80033da:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80033de:	4618      	mov	r0, r3
 80033e0:	377c      	adds	r7, #124	; 0x7c
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bd90      	pop	{r4, r7, pc}
 80033e6:	bf00      	nop
 80033e8:	50040000 	.word	0x50040000
 80033ec:	50040100 	.word	0x50040100
 80033f0:	50040300 	.word	0x50040300
 80033f4:	50040200 	.word	0x50040200

080033f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033f8:	b480      	push	{r7}
 80033fa:	b085      	sub	sp, #20
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	f003 0307 	and.w	r3, r3, #7
 8003406:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003408:	4b0c      	ldr	r3, [pc, #48]	; (800343c <__NVIC_SetPriorityGrouping+0x44>)
 800340a:	68db      	ldr	r3, [r3, #12]
 800340c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800340e:	68ba      	ldr	r2, [r7, #8]
 8003410:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003414:	4013      	ands	r3, r2
 8003416:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800341c:	68bb      	ldr	r3, [r7, #8]
 800341e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003420:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003424:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003428:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800342a:	4a04      	ldr	r2, [pc, #16]	; (800343c <__NVIC_SetPriorityGrouping+0x44>)
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	60d3      	str	r3, [r2, #12]
}
 8003430:	bf00      	nop
 8003432:	3714      	adds	r7, #20
 8003434:	46bd      	mov	sp, r7
 8003436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343a:	4770      	bx	lr
 800343c:	e000ed00 	.word	0xe000ed00

08003440 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003440:	b480      	push	{r7}
 8003442:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003444:	4b04      	ldr	r3, [pc, #16]	; (8003458 <__NVIC_GetPriorityGrouping+0x18>)
 8003446:	68db      	ldr	r3, [r3, #12]
 8003448:	0a1b      	lsrs	r3, r3, #8
 800344a:	f003 0307 	and.w	r3, r3, #7
}
 800344e:	4618      	mov	r0, r3
 8003450:	46bd      	mov	sp, r7
 8003452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003456:	4770      	bx	lr
 8003458:	e000ed00 	.word	0xe000ed00

0800345c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800345c:	b480      	push	{r7}
 800345e:	b083      	sub	sp, #12
 8003460:	af00      	add	r7, sp, #0
 8003462:	4603      	mov	r3, r0
 8003464:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003466:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800346a:	2b00      	cmp	r3, #0
 800346c:	db0b      	blt.n	8003486 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800346e:	79fb      	ldrb	r3, [r7, #7]
 8003470:	f003 021f 	and.w	r2, r3, #31
 8003474:	4907      	ldr	r1, [pc, #28]	; (8003494 <__NVIC_EnableIRQ+0x38>)
 8003476:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800347a:	095b      	lsrs	r3, r3, #5
 800347c:	2001      	movs	r0, #1
 800347e:	fa00 f202 	lsl.w	r2, r0, r2
 8003482:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003486:	bf00      	nop
 8003488:	370c      	adds	r7, #12
 800348a:	46bd      	mov	sp, r7
 800348c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003490:	4770      	bx	lr
 8003492:	bf00      	nop
 8003494:	e000e100 	.word	0xe000e100

08003498 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003498:	b480      	push	{r7}
 800349a:	b083      	sub	sp, #12
 800349c:	af00      	add	r7, sp, #0
 800349e:	4603      	mov	r3, r0
 80034a0:	6039      	str	r1, [r7, #0]
 80034a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	db0a      	blt.n	80034c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	b2da      	uxtb	r2, r3
 80034b0:	490c      	ldr	r1, [pc, #48]	; (80034e4 <__NVIC_SetPriority+0x4c>)
 80034b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034b6:	0112      	lsls	r2, r2, #4
 80034b8:	b2d2      	uxtb	r2, r2
 80034ba:	440b      	add	r3, r1
 80034bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80034c0:	e00a      	b.n	80034d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	b2da      	uxtb	r2, r3
 80034c6:	4908      	ldr	r1, [pc, #32]	; (80034e8 <__NVIC_SetPriority+0x50>)
 80034c8:	79fb      	ldrb	r3, [r7, #7]
 80034ca:	f003 030f 	and.w	r3, r3, #15
 80034ce:	3b04      	subs	r3, #4
 80034d0:	0112      	lsls	r2, r2, #4
 80034d2:	b2d2      	uxtb	r2, r2
 80034d4:	440b      	add	r3, r1
 80034d6:	761a      	strb	r2, [r3, #24]
}
 80034d8:	bf00      	nop
 80034da:	370c      	adds	r7, #12
 80034dc:	46bd      	mov	sp, r7
 80034de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e2:	4770      	bx	lr
 80034e4:	e000e100 	.word	0xe000e100
 80034e8:	e000ed00 	.word	0xe000ed00

080034ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034ec:	b480      	push	{r7}
 80034ee:	b089      	sub	sp, #36	; 0x24
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	60f8      	str	r0, [r7, #12]
 80034f4:	60b9      	str	r1, [r7, #8]
 80034f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	f003 0307 	and.w	r3, r3, #7
 80034fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003500:	69fb      	ldr	r3, [r7, #28]
 8003502:	f1c3 0307 	rsb	r3, r3, #7
 8003506:	2b04      	cmp	r3, #4
 8003508:	bf28      	it	cs
 800350a:	2304      	movcs	r3, #4
 800350c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800350e:	69fb      	ldr	r3, [r7, #28]
 8003510:	3304      	adds	r3, #4
 8003512:	2b06      	cmp	r3, #6
 8003514:	d902      	bls.n	800351c <NVIC_EncodePriority+0x30>
 8003516:	69fb      	ldr	r3, [r7, #28]
 8003518:	3b03      	subs	r3, #3
 800351a:	e000      	b.n	800351e <NVIC_EncodePriority+0x32>
 800351c:	2300      	movs	r3, #0
 800351e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003520:	f04f 32ff 	mov.w	r2, #4294967295
 8003524:	69bb      	ldr	r3, [r7, #24]
 8003526:	fa02 f303 	lsl.w	r3, r2, r3
 800352a:	43da      	mvns	r2, r3
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	401a      	ands	r2, r3
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003534:	f04f 31ff 	mov.w	r1, #4294967295
 8003538:	697b      	ldr	r3, [r7, #20]
 800353a:	fa01 f303 	lsl.w	r3, r1, r3
 800353e:	43d9      	mvns	r1, r3
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003544:	4313      	orrs	r3, r2
         );
}
 8003546:	4618      	mov	r0, r3
 8003548:	3724      	adds	r7, #36	; 0x24
 800354a:	46bd      	mov	sp, r7
 800354c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003550:	4770      	bx	lr
	...

08003554 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b082      	sub	sp, #8
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	3b01      	subs	r3, #1
 8003560:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003564:	d301      	bcc.n	800356a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003566:	2301      	movs	r3, #1
 8003568:	e00f      	b.n	800358a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800356a:	4a0a      	ldr	r2, [pc, #40]	; (8003594 <SysTick_Config+0x40>)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	3b01      	subs	r3, #1
 8003570:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003572:	210f      	movs	r1, #15
 8003574:	f04f 30ff 	mov.w	r0, #4294967295
 8003578:	f7ff ff8e 	bl	8003498 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800357c:	4b05      	ldr	r3, [pc, #20]	; (8003594 <SysTick_Config+0x40>)
 800357e:	2200      	movs	r2, #0
 8003580:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003582:	4b04      	ldr	r3, [pc, #16]	; (8003594 <SysTick_Config+0x40>)
 8003584:	2207      	movs	r2, #7
 8003586:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003588:	2300      	movs	r3, #0
}
 800358a:	4618      	mov	r0, r3
 800358c:	3708      	adds	r7, #8
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}
 8003592:	bf00      	nop
 8003594:	e000e010 	.word	0xe000e010

08003598 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b082      	sub	sp, #8
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80035a0:	6878      	ldr	r0, [r7, #4]
 80035a2:	f7ff ff29 	bl	80033f8 <__NVIC_SetPriorityGrouping>
}
 80035a6:	bf00      	nop
 80035a8:	3708      	adds	r7, #8
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}

080035ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035ae:	b580      	push	{r7, lr}
 80035b0:	b086      	sub	sp, #24
 80035b2:	af00      	add	r7, sp, #0
 80035b4:	4603      	mov	r3, r0
 80035b6:	60b9      	str	r1, [r7, #8]
 80035b8:	607a      	str	r2, [r7, #4]
 80035ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80035bc:	2300      	movs	r3, #0
 80035be:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80035c0:	f7ff ff3e 	bl	8003440 <__NVIC_GetPriorityGrouping>
 80035c4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80035c6:	687a      	ldr	r2, [r7, #4]
 80035c8:	68b9      	ldr	r1, [r7, #8]
 80035ca:	6978      	ldr	r0, [r7, #20]
 80035cc:	f7ff ff8e 	bl	80034ec <NVIC_EncodePriority>
 80035d0:	4602      	mov	r2, r0
 80035d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035d6:	4611      	mov	r1, r2
 80035d8:	4618      	mov	r0, r3
 80035da:	f7ff ff5d 	bl	8003498 <__NVIC_SetPriority>
}
 80035de:	bf00      	nop
 80035e0:	3718      	adds	r7, #24
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd80      	pop	{r7, pc}

080035e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035e6:	b580      	push	{r7, lr}
 80035e8:	b082      	sub	sp, #8
 80035ea:	af00      	add	r7, sp, #0
 80035ec:	4603      	mov	r3, r0
 80035ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80035f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035f4:	4618      	mov	r0, r3
 80035f6:	f7ff ff31 	bl	800345c <__NVIC_EnableIRQ>
}
 80035fa:	bf00      	nop
 80035fc:	3708      	adds	r7, #8
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}

08003602 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003602:	b580      	push	{r7, lr}
 8003604:	b082      	sub	sp, #8
 8003606:	af00      	add	r7, sp, #0
 8003608:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	f7ff ffa2 	bl	8003554 <SysTick_Config>
 8003610:	4603      	mov	r3, r0
}
 8003612:	4618      	mov	r0, r3
 8003614:	3708      	adds	r7, #8
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}
	...

0800361c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800361c:	b480      	push	{r7}
 800361e:	b085      	sub	sp, #20
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d101      	bne.n	800362e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	e098      	b.n	8003760 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	461a      	mov	r2, r3
 8003634:	4b4d      	ldr	r3, [pc, #308]	; (800376c <HAL_DMA_Init+0x150>)
 8003636:	429a      	cmp	r2, r3
 8003638:	d80f      	bhi.n	800365a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	461a      	mov	r2, r3
 8003640:	4b4b      	ldr	r3, [pc, #300]	; (8003770 <HAL_DMA_Init+0x154>)
 8003642:	4413      	add	r3, r2
 8003644:	4a4b      	ldr	r2, [pc, #300]	; (8003774 <HAL_DMA_Init+0x158>)
 8003646:	fba2 2303 	umull	r2, r3, r2, r3
 800364a:	091b      	lsrs	r3, r3, #4
 800364c:	009a      	lsls	r2, r3, #2
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	4a48      	ldr	r2, [pc, #288]	; (8003778 <HAL_DMA_Init+0x15c>)
 8003656:	641a      	str	r2, [r3, #64]	; 0x40
 8003658:	e00e      	b.n	8003678 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	461a      	mov	r2, r3
 8003660:	4b46      	ldr	r3, [pc, #280]	; (800377c <HAL_DMA_Init+0x160>)
 8003662:	4413      	add	r3, r2
 8003664:	4a43      	ldr	r2, [pc, #268]	; (8003774 <HAL_DMA_Init+0x158>)
 8003666:	fba2 2303 	umull	r2, r3, r2, r3
 800366a:	091b      	lsrs	r3, r3, #4
 800366c:	009a      	lsls	r2, r3, #2
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	4a42      	ldr	r2, [pc, #264]	; (8003780 <HAL_DMA_Init+0x164>)
 8003676:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2202      	movs	r2, #2
 800367c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800368e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003692:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800369c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	691b      	ldr	r3, [r3, #16]
 80036a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	699b      	ldr	r3, [r3, #24]
 80036ae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036b4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6a1b      	ldr	r3, [r3, #32]
 80036ba:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80036bc:	68fa      	ldr	r2, [r7, #12]
 80036be:	4313      	orrs	r3, r2
 80036c0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	68fa      	ldr	r2, [r7, #12]
 80036c8:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	689b      	ldr	r3, [r3, #8]
 80036ce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80036d2:	d039      	beq.n	8003748 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d8:	4a27      	ldr	r2, [pc, #156]	; (8003778 <HAL_DMA_Init+0x15c>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d11a      	bne.n	8003714 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80036de:	4b29      	ldr	r3, [pc, #164]	; (8003784 <HAL_DMA_Init+0x168>)
 80036e0:	681a      	ldr	r2, [r3, #0]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036e6:	f003 031c 	and.w	r3, r3, #28
 80036ea:	210f      	movs	r1, #15
 80036ec:	fa01 f303 	lsl.w	r3, r1, r3
 80036f0:	43db      	mvns	r3, r3
 80036f2:	4924      	ldr	r1, [pc, #144]	; (8003784 <HAL_DMA_Init+0x168>)
 80036f4:	4013      	ands	r3, r2
 80036f6:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80036f8:	4b22      	ldr	r3, [pc, #136]	; (8003784 <HAL_DMA_Init+0x168>)
 80036fa:	681a      	ldr	r2, [r3, #0]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6859      	ldr	r1, [r3, #4]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003704:	f003 031c 	and.w	r3, r3, #28
 8003708:	fa01 f303 	lsl.w	r3, r1, r3
 800370c:	491d      	ldr	r1, [pc, #116]	; (8003784 <HAL_DMA_Init+0x168>)
 800370e:	4313      	orrs	r3, r2
 8003710:	600b      	str	r3, [r1, #0]
 8003712:	e019      	b.n	8003748 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003714:	4b1c      	ldr	r3, [pc, #112]	; (8003788 <HAL_DMA_Init+0x16c>)
 8003716:	681a      	ldr	r2, [r3, #0]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800371c:	f003 031c 	and.w	r3, r3, #28
 8003720:	210f      	movs	r1, #15
 8003722:	fa01 f303 	lsl.w	r3, r1, r3
 8003726:	43db      	mvns	r3, r3
 8003728:	4917      	ldr	r1, [pc, #92]	; (8003788 <HAL_DMA_Init+0x16c>)
 800372a:	4013      	ands	r3, r2
 800372c:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800372e:	4b16      	ldr	r3, [pc, #88]	; (8003788 <HAL_DMA_Init+0x16c>)
 8003730:	681a      	ldr	r2, [r3, #0]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6859      	ldr	r1, [r3, #4]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800373a:	f003 031c 	and.w	r3, r3, #28
 800373e:	fa01 f303 	lsl.w	r3, r1, r3
 8003742:	4911      	ldr	r1, [pc, #68]	; (8003788 <HAL_DMA_Init+0x16c>)
 8003744:	4313      	orrs	r3, r2
 8003746:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2200      	movs	r2, #0
 800374c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2201      	movs	r2, #1
 8003752:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2200      	movs	r2, #0
 800375a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800375e:	2300      	movs	r3, #0
}
 8003760:	4618      	mov	r0, r3
 8003762:	3714      	adds	r7, #20
 8003764:	46bd      	mov	sp, r7
 8003766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376a:	4770      	bx	lr
 800376c:	40020407 	.word	0x40020407
 8003770:	bffdfff8 	.word	0xbffdfff8
 8003774:	cccccccd 	.word	0xcccccccd
 8003778:	40020000 	.word	0x40020000
 800377c:	bffdfbf8 	.word	0xbffdfbf8
 8003780:	40020400 	.word	0x40020400
 8003784:	400200a8 	.word	0x400200a8
 8003788:	400204a8 	.word	0x400204a8

0800378c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b086      	sub	sp, #24
 8003790:	af00      	add	r7, sp, #0
 8003792:	60f8      	str	r0, [r7, #12]
 8003794:	60b9      	str	r1, [r7, #8]
 8003796:	607a      	str	r2, [r7, #4]
 8003798:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800379a:	2300      	movs	r3, #0
 800379c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80037a4:	2b01      	cmp	r3, #1
 80037a6:	d101      	bne.n	80037ac <HAL_DMA_Start_IT+0x20>
 80037a8:	2302      	movs	r3, #2
 80037aa:	e04b      	b.n	8003844 <HAL_DMA_Start_IT+0xb8>
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	2201      	movs	r2, #1
 80037b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80037ba:	b2db      	uxtb	r3, r3
 80037bc:	2b01      	cmp	r3, #1
 80037be:	d13a      	bne.n	8003836 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	2202      	movs	r2, #2
 80037c4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	2200      	movs	r2, #0
 80037cc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	681a      	ldr	r2, [r3, #0]
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f022 0201 	bic.w	r2, r2, #1
 80037dc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	687a      	ldr	r2, [r7, #4]
 80037e2:	68b9      	ldr	r1, [r7, #8]
 80037e4:	68f8      	ldr	r0, [r7, #12]
 80037e6:	f000 f95f 	bl	8003aa8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d008      	beq.n	8003804 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	681a      	ldr	r2, [r3, #0]
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f042 020e 	orr.w	r2, r2, #14
 8003800:	601a      	str	r2, [r3, #0]
 8003802:	e00f      	b.n	8003824 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	681a      	ldr	r2, [r3, #0]
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f022 0204 	bic.w	r2, r2, #4
 8003812:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f042 020a 	orr.w	r2, r2, #10
 8003822:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	681a      	ldr	r2, [r3, #0]
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f042 0201 	orr.w	r2, r2, #1
 8003832:	601a      	str	r2, [r3, #0]
 8003834:	e005      	b.n	8003842 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	2200      	movs	r2, #0
 800383a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800383e:	2302      	movs	r3, #2
 8003840:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003842:	7dfb      	ldrb	r3, [r7, #23]
}
 8003844:	4618      	mov	r0, r3
 8003846:	3718      	adds	r7, #24
 8003848:	46bd      	mov	sp, r7
 800384a:	bd80      	pop	{r7, pc}

0800384c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800384c:	b480      	push	{r7}
 800384e:	b085      	sub	sp, #20
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003854:	2300      	movs	r3, #0
 8003856:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800385e:	b2db      	uxtb	r3, r3
 8003860:	2b02      	cmp	r3, #2
 8003862:	d008      	beq.n	8003876 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2204      	movs	r2, #4
 8003868:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2200      	movs	r2, #0
 800386e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003872:	2301      	movs	r3, #1
 8003874:	e022      	b.n	80038bc <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	681a      	ldr	r2, [r3, #0]
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f022 020e 	bic.w	r2, r2, #14
 8003884:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	681a      	ldr	r2, [r3, #0]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f022 0201 	bic.w	r2, r2, #1
 8003894:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800389a:	f003 021c 	and.w	r2, r3, #28
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a2:	2101      	movs	r1, #1
 80038a4:	fa01 f202 	lsl.w	r2, r1, r2
 80038a8:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2201      	movs	r2, #1
 80038ae:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2200      	movs	r2, #0
 80038b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80038ba:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80038bc:	4618      	mov	r0, r3
 80038be:	3714      	adds	r7, #20
 80038c0:	46bd      	mov	sp, r7
 80038c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c6:	4770      	bx	lr

080038c8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b084      	sub	sp, #16
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038d0:	2300      	movs	r3, #0
 80038d2:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80038da:	b2db      	uxtb	r3, r3
 80038dc:	2b02      	cmp	r3, #2
 80038de:	d005      	beq.n	80038ec <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2204      	movs	r2, #4
 80038e4:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80038e6:	2301      	movs	r3, #1
 80038e8:	73fb      	strb	r3, [r7, #15]
 80038ea:	e029      	b.n	8003940 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	681a      	ldr	r2, [r3, #0]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f022 020e 	bic.w	r2, r2, #14
 80038fa:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	681a      	ldr	r2, [r3, #0]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f022 0201 	bic.w	r2, r2, #1
 800390a:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003910:	f003 021c 	and.w	r2, r3, #28
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003918:	2101      	movs	r1, #1
 800391a:	fa01 f202 	lsl.w	r2, r1, r2
 800391e:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2201      	movs	r2, #1
 8003924:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2200      	movs	r2, #0
 800392c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003934:	2b00      	cmp	r3, #0
 8003936:	d003      	beq.n	8003940 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800393c:	6878      	ldr	r0, [r7, #4]
 800393e:	4798      	blx	r3
    }
  }
  return status;
 8003940:	7bfb      	ldrb	r3, [r7, #15]
}
 8003942:	4618      	mov	r0, r3
 8003944:	3710      	adds	r7, #16
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}

0800394a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800394a:	b580      	push	{r7, lr}
 800394c:	b084      	sub	sp, #16
 800394e:	af00      	add	r7, sp, #0
 8003950:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003966:	f003 031c 	and.w	r3, r3, #28
 800396a:	2204      	movs	r2, #4
 800396c:	409a      	lsls	r2, r3
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	4013      	ands	r3, r2
 8003972:	2b00      	cmp	r3, #0
 8003974:	d026      	beq.n	80039c4 <HAL_DMA_IRQHandler+0x7a>
 8003976:	68bb      	ldr	r3, [r7, #8]
 8003978:	f003 0304 	and.w	r3, r3, #4
 800397c:	2b00      	cmp	r3, #0
 800397e:	d021      	beq.n	80039c4 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f003 0320 	and.w	r3, r3, #32
 800398a:	2b00      	cmp	r3, #0
 800398c:	d107      	bne.n	800399e <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	681a      	ldr	r2, [r3, #0]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f022 0204 	bic.w	r2, r2, #4
 800399c:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039a2:	f003 021c 	and.w	r2, r3, #28
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039aa:	2104      	movs	r1, #4
 80039ac:	fa01 f202 	lsl.w	r2, r1, r2
 80039b0:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d071      	beq.n	8003a9e <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039be:	6878      	ldr	r0, [r7, #4]
 80039c0:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80039c2:	e06c      	b.n	8003a9e <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039c8:	f003 031c 	and.w	r3, r3, #28
 80039cc:	2202      	movs	r2, #2
 80039ce:	409a      	lsls	r2, r3
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	4013      	ands	r3, r2
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d02e      	beq.n	8003a36 <HAL_DMA_IRQHandler+0xec>
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	f003 0302 	and.w	r3, r3, #2
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d029      	beq.n	8003a36 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f003 0320 	and.w	r3, r3, #32
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d10b      	bne.n	8003a08 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	681a      	ldr	r2, [r3, #0]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f022 020a 	bic.w	r2, r2, #10
 80039fe:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2201      	movs	r2, #1
 8003a04:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a0c:	f003 021c 	and.w	r2, r3, #28
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a14:	2102      	movs	r1, #2
 8003a16:	fa01 f202 	lsl.w	r2, r1, r2
 8003a1a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2200      	movs	r2, #0
 8003a20:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d038      	beq.n	8003a9e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a30:	6878      	ldr	r0, [r7, #4]
 8003a32:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003a34:	e033      	b.n	8003a9e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a3a:	f003 031c 	and.w	r3, r3, #28
 8003a3e:	2208      	movs	r2, #8
 8003a40:	409a      	lsls	r2, r3
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	4013      	ands	r3, r2
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d02a      	beq.n	8003aa0 <HAL_DMA_IRQHandler+0x156>
 8003a4a:	68bb      	ldr	r3, [r7, #8]
 8003a4c:	f003 0308 	and.w	r3, r3, #8
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d025      	beq.n	8003aa0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	681a      	ldr	r2, [r3, #0]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f022 020e 	bic.w	r2, r2, #14
 8003a62:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a68:	f003 021c 	and.w	r2, r3, #28
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a70:	2101      	movs	r1, #1
 8003a72:	fa01 f202 	lsl.w	r2, r1, r2
 8003a76:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2201      	movs	r2, #1
 8003a82:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d004      	beq.n	8003aa0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a9a:	6878      	ldr	r0, [r7, #4]
 8003a9c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003a9e:	bf00      	nop
 8003aa0:	bf00      	nop
}
 8003aa2:	3710      	adds	r7, #16
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bd80      	pop	{r7, pc}

08003aa8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	b085      	sub	sp, #20
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	60f8      	str	r0, [r7, #12]
 8003ab0:	60b9      	str	r1, [r7, #8]
 8003ab2:	607a      	str	r2, [r7, #4]
 8003ab4:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aba:	f003 021c 	and.w	r2, r3, #28
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac2:	2101      	movs	r1, #1
 8003ac4:	fa01 f202 	lsl.w	r2, r1, r2
 8003ac8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	683a      	ldr	r2, [r7, #0]
 8003ad0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	689b      	ldr	r3, [r3, #8]
 8003ad6:	2b10      	cmp	r3, #16
 8003ad8:	d108      	bne.n	8003aec <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	687a      	ldr	r2, [r7, #4]
 8003ae0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	68ba      	ldr	r2, [r7, #8]
 8003ae8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003aea:	e007      	b.n	8003afc <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	68ba      	ldr	r2, [r7, #8]
 8003af2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	687a      	ldr	r2, [r7, #4]
 8003afa:	60da      	str	r2, [r3, #12]
}
 8003afc:	bf00      	nop
 8003afe:	3714      	adds	r7, #20
 8003b00:	46bd      	mov	sp, r7
 8003b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b06:	4770      	bx	lr

08003b08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	b087      	sub	sp, #28
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
 8003b10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003b12:	2300      	movs	r3, #0
 8003b14:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003b16:	e17f      	b.n	8003e18 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	681a      	ldr	r2, [r3, #0]
 8003b1c:	2101      	movs	r1, #1
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	fa01 f303 	lsl.w	r3, r1, r3
 8003b24:	4013      	ands	r3, r2
 8003b26:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	f000 8171 	beq.w	8003e12 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	f003 0303 	and.w	r3, r3, #3
 8003b38:	2b01      	cmp	r3, #1
 8003b3a:	d005      	beq.n	8003b48 <HAL_GPIO_Init+0x40>
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	f003 0303 	and.w	r3, r3, #3
 8003b44:	2b02      	cmp	r3, #2
 8003b46:	d130      	bne.n	8003baa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	689b      	ldr	r3, [r3, #8]
 8003b4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003b4e:	697b      	ldr	r3, [r7, #20]
 8003b50:	005b      	lsls	r3, r3, #1
 8003b52:	2203      	movs	r2, #3
 8003b54:	fa02 f303 	lsl.w	r3, r2, r3
 8003b58:	43db      	mvns	r3, r3
 8003b5a:	693a      	ldr	r2, [r7, #16]
 8003b5c:	4013      	ands	r3, r2
 8003b5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	68da      	ldr	r2, [r3, #12]
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	005b      	lsls	r3, r3, #1
 8003b68:	fa02 f303 	lsl.w	r3, r2, r3
 8003b6c:	693a      	ldr	r2, [r7, #16]
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	693a      	ldr	r2, [r7, #16]
 8003b76:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003b7e:	2201      	movs	r2, #1
 8003b80:	697b      	ldr	r3, [r7, #20]
 8003b82:	fa02 f303 	lsl.w	r3, r2, r3
 8003b86:	43db      	mvns	r3, r3
 8003b88:	693a      	ldr	r2, [r7, #16]
 8003b8a:	4013      	ands	r3, r2
 8003b8c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	091b      	lsrs	r3, r3, #4
 8003b94:	f003 0201 	and.w	r2, r3, #1
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b9e:	693a      	ldr	r2, [r7, #16]
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	693a      	ldr	r2, [r7, #16]
 8003ba8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	f003 0303 	and.w	r3, r3, #3
 8003bb2:	2b03      	cmp	r3, #3
 8003bb4:	d118      	bne.n	8003be8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003bbc:	2201      	movs	r2, #1
 8003bbe:	697b      	ldr	r3, [r7, #20]
 8003bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc4:	43db      	mvns	r3, r3
 8003bc6:	693a      	ldr	r2, [r7, #16]
 8003bc8:	4013      	ands	r3, r2
 8003bca:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	08db      	lsrs	r3, r3, #3
 8003bd2:	f003 0201 	and.w	r2, r3, #1
 8003bd6:	697b      	ldr	r3, [r7, #20]
 8003bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bdc:	693a      	ldr	r2, [r7, #16]
 8003bde:	4313      	orrs	r3, r2
 8003be0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	693a      	ldr	r2, [r7, #16]
 8003be6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	f003 0303 	and.w	r3, r3, #3
 8003bf0:	2b03      	cmp	r3, #3
 8003bf2:	d017      	beq.n	8003c24 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	68db      	ldr	r3, [r3, #12]
 8003bf8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003bfa:	697b      	ldr	r3, [r7, #20]
 8003bfc:	005b      	lsls	r3, r3, #1
 8003bfe:	2203      	movs	r2, #3
 8003c00:	fa02 f303 	lsl.w	r3, r2, r3
 8003c04:	43db      	mvns	r3, r3
 8003c06:	693a      	ldr	r2, [r7, #16]
 8003c08:	4013      	ands	r3, r2
 8003c0a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	689a      	ldr	r2, [r3, #8]
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	005b      	lsls	r3, r3, #1
 8003c14:	fa02 f303 	lsl.w	r3, r2, r3
 8003c18:	693a      	ldr	r2, [r7, #16]
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	693a      	ldr	r2, [r7, #16]
 8003c22:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	f003 0303 	and.w	r3, r3, #3
 8003c2c:	2b02      	cmp	r3, #2
 8003c2e:	d123      	bne.n	8003c78 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003c30:	697b      	ldr	r3, [r7, #20]
 8003c32:	08da      	lsrs	r2, r3, #3
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	3208      	adds	r2, #8
 8003c38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c3c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003c3e:	697b      	ldr	r3, [r7, #20]
 8003c40:	f003 0307 	and.w	r3, r3, #7
 8003c44:	009b      	lsls	r3, r3, #2
 8003c46:	220f      	movs	r2, #15
 8003c48:	fa02 f303 	lsl.w	r3, r2, r3
 8003c4c:	43db      	mvns	r3, r3
 8003c4e:	693a      	ldr	r2, [r7, #16]
 8003c50:	4013      	ands	r3, r2
 8003c52:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	691a      	ldr	r2, [r3, #16]
 8003c58:	697b      	ldr	r3, [r7, #20]
 8003c5a:	f003 0307 	and.w	r3, r3, #7
 8003c5e:	009b      	lsls	r3, r3, #2
 8003c60:	fa02 f303 	lsl.w	r3, r2, r3
 8003c64:	693a      	ldr	r2, [r7, #16]
 8003c66:	4313      	orrs	r3, r2
 8003c68:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003c6a:	697b      	ldr	r3, [r7, #20]
 8003c6c:	08da      	lsrs	r2, r3, #3
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	3208      	adds	r2, #8
 8003c72:	6939      	ldr	r1, [r7, #16]
 8003c74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003c7e:	697b      	ldr	r3, [r7, #20]
 8003c80:	005b      	lsls	r3, r3, #1
 8003c82:	2203      	movs	r2, #3
 8003c84:	fa02 f303 	lsl.w	r3, r2, r3
 8003c88:	43db      	mvns	r3, r3
 8003c8a:	693a      	ldr	r2, [r7, #16]
 8003c8c:	4013      	ands	r3, r2
 8003c8e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	f003 0203 	and.w	r2, r3, #3
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	005b      	lsls	r3, r3, #1
 8003c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca0:	693a      	ldr	r2, [r7, #16]
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	693a      	ldr	r2, [r7, #16]
 8003caa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	f000 80ac 	beq.w	8003e12 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003cba:	4b5f      	ldr	r3, [pc, #380]	; (8003e38 <HAL_GPIO_Init+0x330>)
 8003cbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cbe:	4a5e      	ldr	r2, [pc, #376]	; (8003e38 <HAL_GPIO_Init+0x330>)
 8003cc0:	f043 0301 	orr.w	r3, r3, #1
 8003cc4:	6613      	str	r3, [r2, #96]	; 0x60
 8003cc6:	4b5c      	ldr	r3, [pc, #368]	; (8003e38 <HAL_GPIO_Init+0x330>)
 8003cc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cca:	f003 0301 	and.w	r3, r3, #1
 8003cce:	60bb      	str	r3, [r7, #8]
 8003cd0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003cd2:	4a5a      	ldr	r2, [pc, #360]	; (8003e3c <HAL_GPIO_Init+0x334>)
 8003cd4:	697b      	ldr	r3, [r7, #20]
 8003cd6:	089b      	lsrs	r3, r3, #2
 8003cd8:	3302      	adds	r3, #2
 8003cda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cde:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003ce0:	697b      	ldr	r3, [r7, #20]
 8003ce2:	f003 0303 	and.w	r3, r3, #3
 8003ce6:	009b      	lsls	r3, r3, #2
 8003ce8:	220f      	movs	r2, #15
 8003cea:	fa02 f303 	lsl.w	r3, r2, r3
 8003cee:	43db      	mvns	r3, r3
 8003cf0:	693a      	ldr	r2, [r7, #16]
 8003cf2:	4013      	ands	r3, r2
 8003cf4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003cfc:	d025      	beq.n	8003d4a <HAL_GPIO_Init+0x242>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	4a4f      	ldr	r2, [pc, #316]	; (8003e40 <HAL_GPIO_Init+0x338>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d01f      	beq.n	8003d46 <HAL_GPIO_Init+0x23e>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	4a4e      	ldr	r2, [pc, #312]	; (8003e44 <HAL_GPIO_Init+0x33c>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d019      	beq.n	8003d42 <HAL_GPIO_Init+0x23a>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	4a4d      	ldr	r2, [pc, #308]	; (8003e48 <HAL_GPIO_Init+0x340>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d013      	beq.n	8003d3e <HAL_GPIO_Init+0x236>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	4a4c      	ldr	r2, [pc, #304]	; (8003e4c <HAL_GPIO_Init+0x344>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d00d      	beq.n	8003d3a <HAL_GPIO_Init+0x232>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	4a4b      	ldr	r2, [pc, #300]	; (8003e50 <HAL_GPIO_Init+0x348>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d007      	beq.n	8003d36 <HAL_GPIO_Init+0x22e>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	4a4a      	ldr	r2, [pc, #296]	; (8003e54 <HAL_GPIO_Init+0x34c>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d101      	bne.n	8003d32 <HAL_GPIO_Init+0x22a>
 8003d2e:	2306      	movs	r3, #6
 8003d30:	e00c      	b.n	8003d4c <HAL_GPIO_Init+0x244>
 8003d32:	2307      	movs	r3, #7
 8003d34:	e00a      	b.n	8003d4c <HAL_GPIO_Init+0x244>
 8003d36:	2305      	movs	r3, #5
 8003d38:	e008      	b.n	8003d4c <HAL_GPIO_Init+0x244>
 8003d3a:	2304      	movs	r3, #4
 8003d3c:	e006      	b.n	8003d4c <HAL_GPIO_Init+0x244>
 8003d3e:	2303      	movs	r3, #3
 8003d40:	e004      	b.n	8003d4c <HAL_GPIO_Init+0x244>
 8003d42:	2302      	movs	r3, #2
 8003d44:	e002      	b.n	8003d4c <HAL_GPIO_Init+0x244>
 8003d46:	2301      	movs	r3, #1
 8003d48:	e000      	b.n	8003d4c <HAL_GPIO_Init+0x244>
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	697a      	ldr	r2, [r7, #20]
 8003d4e:	f002 0203 	and.w	r2, r2, #3
 8003d52:	0092      	lsls	r2, r2, #2
 8003d54:	4093      	lsls	r3, r2
 8003d56:	693a      	ldr	r2, [r7, #16]
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003d5c:	4937      	ldr	r1, [pc, #220]	; (8003e3c <HAL_GPIO_Init+0x334>)
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	089b      	lsrs	r3, r3, #2
 8003d62:	3302      	adds	r3, #2
 8003d64:	693a      	ldr	r2, [r7, #16]
 8003d66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003d6a:	4b3b      	ldr	r3, [pc, #236]	; (8003e58 <HAL_GPIO_Init+0x350>)
 8003d6c:	689b      	ldr	r3, [r3, #8]
 8003d6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	43db      	mvns	r3, r3
 8003d74:	693a      	ldr	r2, [r7, #16]
 8003d76:	4013      	ands	r3, r2
 8003d78:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d003      	beq.n	8003d8e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003d86:	693a      	ldr	r2, [r7, #16]
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003d8e:	4a32      	ldr	r2, [pc, #200]	; (8003e58 <HAL_GPIO_Init+0x350>)
 8003d90:	693b      	ldr	r3, [r7, #16]
 8003d92:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003d94:	4b30      	ldr	r3, [pc, #192]	; (8003e58 <HAL_GPIO_Init+0x350>)
 8003d96:	68db      	ldr	r3, [r3, #12]
 8003d98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	43db      	mvns	r3, r3
 8003d9e:	693a      	ldr	r2, [r7, #16]
 8003da0:	4013      	ands	r3, r2
 8003da2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d003      	beq.n	8003db8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003db0:	693a      	ldr	r2, [r7, #16]
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	4313      	orrs	r3, r2
 8003db6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003db8:	4a27      	ldr	r2, [pc, #156]	; (8003e58 <HAL_GPIO_Init+0x350>)
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003dbe:	4b26      	ldr	r3, [pc, #152]	; (8003e58 <HAL_GPIO_Init+0x350>)
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	43db      	mvns	r3, r3
 8003dc8:	693a      	ldr	r2, [r7, #16]
 8003dca:	4013      	ands	r3, r2
 8003dcc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d003      	beq.n	8003de2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003dda:	693a      	ldr	r2, [r7, #16]
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	4313      	orrs	r3, r2
 8003de0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003de2:	4a1d      	ldr	r2, [pc, #116]	; (8003e58 <HAL_GPIO_Init+0x350>)
 8003de4:	693b      	ldr	r3, [r7, #16]
 8003de6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003de8:	4b1b      	ldr	r3, [pc, #108]	; (8003e58 <HAL_GPIO_Init+0x350>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	43db      	mvns	r3, r3
 8003df2:	693a      	ldr	r2, [r7, #16]
 8003df4:	4013      	ands	r3, r2
 8003df6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d003      	beq.n	8003e0c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003e04:	693a      	ldr	r2, [r7, #16]
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003e0c:	4a12      	ldr	r2, [pc, #72]	; (8003e58 <HAL_GPIO_Init+0x350>)
 8003e0e:	693b      	ldr	r3, [r7, #16]
 8003e10:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003e12:	697b      	ldr	r3, [r7, #20]
 8003e14:	3301      	adds	r3, #1
 8003e16:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	681a      	ldr	r2, [r3, #0]
 8003e1c:	697b      	ldr	r3, [r7, #20]
 8003e1e:	fa22 f303 	lsr.w	r3, r2, r3
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	f47f ae78 	bne.w	8003b18 <HAL_GPIO_Init+0x10>
  }
}
 8003e28:	bf00      	nop
 8003e2a:	bf00      	nop
 8003e2c:	371c      	adds	r7, #28
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e34:	4770      	bx	lr
 8003e36:	bf00      	nop
 8003e38:	40021000 	.word	0x40021000
 8003e3c:	40010000 	.word	0x40010000
 8003e40:	48000400 	.word	0x48000400
 8003e44:	48000800 	.word	0x48000800
 8003e48:	48000c00 	.word	0x48000c00
 8003e4c:	48001000 	.word	0x48001000
 8003e50:	48001400 	.word	0x48001400
 8003e54:	48001800 	.word	0x48001800
 8003e58:	40010400 	.word	0x40010400

08003e5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b083      	sub	sp, #12
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
 8003e64:	460b      	mov	r3, r1
 8003e66:	807b      	strh	r3, [r7, #2]
 8003e68:	4613      	mov	r3, r2
 8003e6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003e6c:	787b      	ldrb	r3, [r7, #1]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d003      	beq.n	8003e7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003e72:	887a      	ldrh	r2, [r7, #2]
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003e78:	e002      	b.n	8003e80 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003e7a:	887a      	ldrh	r2, [r7, #2]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003e80:	bf00      	nop
 8003e82:	370c      	adds	r7, #12
 8003e84:	46bd      	mov	sp, r7
 8003e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8a:	4770      	bx	lr

08003e8c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003e90:	4b04      	ldr	r3, [pc, #16]	; (8003ea4 <HAL_PWREx_GetVoltageRange+0x18>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003e98:	4618      	mov	r0, r3
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea0:	4770      	bx	lr
 8003ea2:	bf00      	nop
 8003ea4:	40007000 	.word	0x40007000

08003ea8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	b085      	sub	sp, #20
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003eb6:	d130      	bne.n	8003f1a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003eb8:	4b23      	ldr	r3, [pc, #140]	; (8003f48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003ec0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ec4:	d038      	beq.n	8003f38 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003ec6:	4b20      	ldr	r3, [pc, #128]	; (8003f48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003ece:	4a1e      	ldr	r2, [pc, #120]	; (8003f48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003ed0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003ed4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003ed6:	4b1d      	ldr	r3, [pc, #116]	; (8003f4c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	2232      	movs	r2, #50	; 0x32
 8003edc:	fb02 f303 	mul.w	r3, r2, r3
 8003ee0:	4a1b      	ldr	r2, [pc, #108]	; (8003f50 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003ee2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ee6:	0c9b      	lsrs	r3, r3, #18
 8003ee8:	3301      	adds	r3, #1
 8003eea:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003eec:	e002      	b.n	8003ef4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	3b01      	subs	r3, #1
 8003ef2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003ef4:	4b14      	ldr	r3, [pc, #80]	; (8003f48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003ef6:	695b      	ldr	r3, [r3, #20]
 8003ef8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003efc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f00:	d102      	bne.n	8003f08 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d1f2      	bne.n	8003eee <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003f08:	4b0f      	ldr	r3, [pc, #60]	; (8003f48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003f0a:	695b      	ldr	r3, [r3, #20]
 8003f0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f14:	d110      	bne.n	8003f38 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003f16:	2303      	movs	r3, #3
 8003f18:	e00f      	b.n	8003f3a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003f1a:	4b0b      	ldr	r3, [pc, #44]	; (8003f48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003f22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f26:	d007      	beq.n	8003f38 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003f28:	4b07      	ldr	r3, [pc, #28]	; (8003f48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003f30:	4a05      	ldr	r2, [pc, #20]	; (8003f48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003f32:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003f36:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003f38:	2300      	movs	r3, #0
}
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	3714      	adds	r7, #20
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f44:	4770      	bx	lr
 8003f46:	bf00      	nop
 8003f48:	40007000 	.word	0x40007000
 8003f4c:	20000008 	.word	0x20000008
 8003f50:	431bde83 	.word	0x431bde83

08003f54 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b088      	sub	sp, #32
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d101      	bne.n	8003f66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f62:	2301      	movs	r3, #1
 8003f64:	e3d4      	b.n	8004710 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f66:	4ba1      	ldr	r3, [pc, #644]	; (80041ec <HAL_RCC_OscConfig+0x298>)
 8003f68:	689b      	ldr	r3, [r3, #8]
 8003f6a:	f003 030c 	and.w	r3, r3, #12
 8003f6e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003f70:	4b9e      	ldr	r3, [pc, #632]	; (80041ec <HAL_RCC_OscConfig+0x298>)
 8003f72:	68db      	ldr	r3, [r3, #12]
 8003f74:	f003 0303 	and.w	r3, r3, #3
 8003f78:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f003 0310 	and.w	r3, r3, #16
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	f000 80e4 	beq.w	8004150 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003f88:	69bb      	ldr	r3, [r7, #24]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d007      	beq.n	8003f9e <HAL_RCC_OscConfig+0x4a>
 8003f8e:	69bb      	ldr	r3, [r7, #24]
 8003f90:	2b0c      	cmp	r3, #12
 8003f92:	f040 808b 	bne.w	80040ac <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003f96:	697b      	ldr	r3, [r7, #20]
 8003f98:	2b01      	cmp	r3, #1
 8003f9a:	f040 8087 	bne.w	80040ac <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003f9e:	4b93      	ldr	r3, [pc, #588]	; (80041ec <HAL_RCC_OscConfig+0x298>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f003 0302 	and.w	r3, r3, #2
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d005      	beq.n	8003fb6 <HAL_RCC_OscConfig+0x62>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	699b      	ldr	r3, [r3, #24]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d101      	bne.n	8003fb6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	e3ac      	b.n	8004710 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6a1a      	ldr	r2, [r3, #32]
 8003fba:	4b8c      	ldr	r3, [pc, #560]	; (80041ec <HAL_RCC_OscConfig+0x298>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f003 0308 	and.w	r3, r3, #8
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d004      	beq.n	8003fd0 <HAL_RCC_OscConfig+0x7c>
 8003fc6:	4b89      	ldr	r3, [pc, #548]	; (80041ec <HAL_RCC_OscConfig+0x298>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003fce:	e005      	b.n	8003fdc <HAL_RCC_OscConfig+0x88>
 8003fd0:	4b86      	ldr	r3, [pc, #536]	; (80041ec <HAL_RCC_OscConfig+0x298>)
 8003fd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003fd6:	091b      	lsrs	r3, r3, #4
 8003fd8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d223      	bcs.n	8004028 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6a1b      	ldr	r3, [r3, #32]
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	f000 fd41 	bl	8004a6c <RCC_SetFlashLatencyFromMSIRange>
 8003fea:	4603      	mov	r3, r0
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d001      	beq.n	8003ff4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	e38d      	b.n	8004710 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003ff4:	4b7d      	ldr	r3, [pc, #500]	; (80041ec <HAL_RCC_OscConfig+0x298>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a7c      	ldr	r2, [pc, #496]	; (80041ec <HAL_RCC_OscConfig+0x298>)
 8003ffa:	f043 0308 	orr.w	r3, r3, #8
 8003ffe:	6013      	str	r3, [r2, #0]
 8004000:	4b7a      	ldr	r3, [pc, #488]	; (80041ec <HAL_RCC_OscConfig+0x298>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6a1b      	ldr	r3, [r3, #32]
 800400c:	4977      	ldr	r1, [pc, #476]	; (80041ec <HAL_RCC_OscConfig+0x298>)
 800400e:	4313      	orrs	r3, r2
 8004010:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004012:	4b76      	ldr	r3, [pc, #472]	; (80041ec <HAL_RCC_OscConfig+0x298>)
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	69db      	ldr	r3, [r3, #28]
 800401e:	021b      	lsls	r3, r3, #8
 8004020:	4972      	ldr	r1, [pc, #456]	; (80041ec <HAL_RCC_OscConfig+0x298>)
 8004022:	4313      	orrs	r3, r2
 8004024:	604b      	str	r3, [r1, #4]
 8004026:	e025      	b.n	8004074 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004028:	4b70      	ldr	r3, [pc, #448]	; (80041ec <HAL_RCC_OscConfig+0x298>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a6f      	ldr	r2, [pc, #444]	; (80041ec <HAL_RCC_OscConfig+0x298>)
 800402e:	f043 0308 	orr.w	r3, r3, #8
 8004032:	6013      	str	r3, [r2, #0]
 8004034:	4b6d      	ldr	r3, [pc, #436]	; (80041ec <HAL_RCC_OscConfig+0x298>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6a1b      	ldr	r3, [r3, #32]
 8004040:	496a      	ldr	r1, [pc, #424]	; (80041ec <HAL_RCC_OscConfig+0x298>)
 8004042:	4313      	orrs	r3, r2
 8004044:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004046:	4b69      	ldr	r3, [pc, #420]	; (80041ec <HAL_RCC_OscConfig+0x298>)
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	69db      	ldr	r3, [r3, #28]
 8004052:	021b      	lsls	r3, r3, #8
 8004054:	4965      	ldr	r1, [pc, #404]	; (80041ec <HAL_RCC_OscConfig+0x298>)
 8004056:	4313      	orrs	r3, r2
 8004058:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800405a:	69bb      	ldr	r3, [r7, #24]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d109      	bne.n	8004074 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6a1b      	ldr	r3, [r3, #32]
 8004064:	4618      	mov	r0, r3
 8004066:	f000 fd01 	bl	8004a6c <RCC_SetFlashLatencyFromMSIRange>
 800406a:	4603      	mov	r3, r0
 800406c:	2b00      	cmp	r3, #0
 800406e:	d001      	beq.n	8004074 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004070:	2301      	movs	r3, #1
 8004072:	e34d      	b.n	8004710 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004074:	f000 fc36 	bl	80048e4 <HAL_RCC_GetSysClockFreq>
 8004078:	4602      	mov	r2, r0
 800407a:	4b5c      	ldr	r3, [pc, #368]	; (80041ec <HAL_RCC_OscConfig+0x298>)
 800407c:	689b      	ldr	r3, [r3, #8]
 800407e:	091b      	lsrs	r3, r3, #4
 8004080:	f003 030f 	and.w	r3, r3, #15
 8004084:	495a      	ldr	r1, [pc, #360]	; (80041f0 <HAL_RCC_OscConfig+0x29c>)
 8004086:	5ccb      	ldrb	r3, [r1, r3]
 8004088:	f003 031f 	and.w	r3, r3, #31
 800408c:	fa22 f303 	lsr.w	r3, r2, r3
 8004090:	4a58      	ldr	r2, [pc, #352]	; (80041f4 <HAL_RCC_OscConfig+0x2a0>)
 8004092:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004094:	4b58      	ldr	r3, [pc, #352]	; (80041f8 <HAL_RCC_OscConfig+0x2a4>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4618      	mov	r0, r3
 800409a:	f7fd fe59 	bl	8001d50 <HAL_InitTick>
 800409e:	4603      	mov	r3, r0
 80040a0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80040a2:	7bfb      	ldrb	r3, [r7, #15]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d052      	beq.n	800414e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80040a8:	7bfb      	ldrb	r3, [r7, #15]
 80040aa:	e331      	b.n	8004710 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	699b      	ldr	r3, [r3, #24]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d032      	beq.n	800411a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80040b4:	4b4d      	ldr	r3, [pc, #308]	; (80041ec <HAL_RCC_OscConfig+0x298>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a4c      	ldr	r2, [pc, #304]	; (80041ec <HAL_RCC_OscConfig+0x298>)
 80040ba:	f043 0301 	orr.w	r3, r3, #1
 80040be:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80040c0:	f7fd fe96 	bl	8001df0 <HAL_GetTick>
 80040c4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80040c6:	e008      	b.n	80040da <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80040c8:	f7fd fe92 	bl	8001df0 <HAL_GetTick>
 80040cc:	4602      	mov	r2, r0
 80040ce:	693b      	ldr	r3, [r7, #16]
 80040d0:	1ad3      	subs	r3, r2, r3
 80040d2:	2b02      	cmp	r3, #2
 80040d4:	d901      	bls.n	80040da <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80040d6:	2303      	movs	r3, #3
 80040d8:	e31a      	b.n	8004710 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80040da:	4b44      	ldr	r3, [pc, #272]	; (80041ec <HAL_RCC_OscConfig+0x298>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f003 0302 	and.w	r3, r3, #2
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d0f0      	beq.n	80040c8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80040e6:	4b41      	ldr	r3, [pc, #260]	; (80041ec <HAL_RCC_OscConfig+0x298>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a40      	ldr	r2, [pc, #256]	; (80041ec <HAL_RCC_OscConfig+0x298>)
 80040ec:	f043 0308 	orr.w	r3, r3, #8
 80040f0:	6013      	str	r3, [r2, #0]
 80040f2:	4b3e      	ldr	r3, [pc, #248]	; (80041ec <HAL_RCC_OscConfig+0x298>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6a1b      	ldr	r3, [r3, #32]
 80040fe:	493b      	ldr	r1, [pc, #236]	; (80041ec <HAL_RCC_OscConfig+0x298>)
 8004100:	4313      	orrs	r3, r2
 8004102:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004104:	4b39      	ldr	r3, [pc, #228]	; (80041ec <HAL_RCC_OscConfig+0x298>)
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	69db      	ldr	r3, [r3, #28]
 8004110:	021b      	lsls	r3, r3, #8
 8004112:	4936      	ldr	r1, [pc, #216]	; (80041ec <HAL_RCC_OscConfig+0x298>)
 8004114:	4313      	orrs	r3, r2
 8004116:	604b      	str	r3, [r1, #4]
 8004118:	e01a      	b.n	8004150 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800411a:	4b34      	ldr	r3, [pc, #208]	; (80041ec <HAL_RCC_OscConfig+0x298>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a33      	ldr	r2, [pc, #204]	; (80041ec <HAL_RCC_OscConfig+0x298>)
 8004120:	f023 0301 	bic.w	r3, r3, #1
 8004124:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004126:	f7fd fe63 	bl	8001df0 <HAL_GetTick>
 800412a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800412c:	e008      	b.n	8004140 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800412e:	f7fd fe5f 	bl	8001df0 <HAL_GetTick>
 8004132:	4602      	mov	r2, r0
 8004134:	693b      	ldr	r3, [r7, #16]
 8004136:	1ad3      	subs	r3, r2, r3
 8004138:	2b02      	cmp	r3, #2
 800413a:	d901      	bls.n	8004140 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800413c:	2303      	movs	r3, #3
 800413e:	e2e7      	b.n	8004710 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004140:	4b2a      	ldr	r3, [pc, #168]	; (80041ec <HAL_RCC_OscConfig+0x298>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f003 0302 	and.w	r3, r3, #2
 8004148:	2b00      	cmp	r3, #0
 800414a:	d1f0      	bne.n	800412e <HAL_RCC_OscConfig+0x1da>
 800414c:	e000      	b.n	8004150 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800414e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f003 0301 	and.w	r3, r3, #1
 8004158:	2b00      	cmp	r3, #0
 800415a:	d074      	beq.n	8004246 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800415c:	69bb      	ldr	r3, [r7, #24]
 800415e:	2b08      	cmp	r3, #8
 8004160:	d005      	beq.n	800416e <HAL_RCC_OscConfig+0x21a>
 8004162:	69bb      	ldr	r3, [r7, #24]
 8004164:	2b0c      	cmp	r3, #12
 8004166:	d10e      	bne.n	8004186 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004168:	697b      	ldr	r3, [r7, #20]
 800416a:	2b03      	cmp	r3, #3
 800416c:	d10b      	bne.n	8004186 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800416e:	4b1f      	ldr	r3, [pc, #124]	; (80041ec <HAL_RCC_OscConfig+0x298>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004176:	2b00      	cmp	r3, #0
 8004178:	d064      	beq.n	8004244 <HAL_RCC_OscConfig+0x2f0>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d160      	bne.n	8004244 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004182:	2301      	movs	r3, #1
 8004184:	e2c4      	b.n	8004710 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800418e:	d106      	bne.n	800419e <HAL_RCC_OscConfig+0x24a>
 8004190:	4b16      	ldr	r3, [pc, #88]	; (80041ec <HAL_RCC_OscConfig+0x298>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a15      	ldr	r2, [pc, #84]	; (80041ec <HAL_RCC_OscConfig+0x298>)
 8004196:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800419a:	6013      	str	r3, [r2, #0]
 800419c:	e01d      	b.n	80041da <HAL_RCC_OscConfig+0x286>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80041a6:	d10c      	bne.n	80041c2 <HAL_RCC_OscConfig+0x26e>
 80041a8:	4b10      	ldr	r3, [pc, #64]	; (80041ec <HAL_RCC_OscConfig+0x298>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a0f      	ldr	r2, [pc, #60]	; (80041ec <HAL_RCC_OscConfig+0x298>)
 80041ae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80041b2:	6013      	str	r3, [r2, #0]
 80041b4:	4b0d      	ldr	r3, [pc, #52]	; (80041ec <HAL_RCC_OscConfig+0x298>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a0c      	ldr	r2, [pc, #48]	; (80041ec <HAL_RCC_OscConfig+0x298>)
 80041ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041be:	6013      	str	r3, [r2, #0]
 80041c0:	e00b      	b.n	80041da <HAL_RCC_OscConfig+0x286>
 80041c2:	4b0a      	ldr	r3, [pc, #40]	; (80041ec <HAL_RCC_OscConfig+0x298>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a09      	ldr	r2, [pc, #36]	; (80041ec <HAL_RCC_OscConfig+0x298>)
 80041c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041cc:	6013      	str	r3, [r2, #0]
 80041ce:	4b07      	ldr	r3, [pc, #28]	; (80041ec <HAL_RCC_OscConfig+0x298>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4a06      	ldr	r2, [pc, #24]	; (80041ec <HAL_RCC_OscConfig+0x298>)
 80041d4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80041d8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d01c      	beq.n	800421c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041e2:	f7fd fe05 	bl	8001df0 <HAL_GetTick>
 80041e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80041e8:	e011      	b.n	800420e <HAL_RCC_OscConfig+0x2ba>
 80041ea:	bf00      	nop
 80041ec:	40021000 	.word	0x40021000
 80041f0:	0800e150 	.word	0x0800e150
 80041f4:	20000008 	.word	0x20000008
 80041f8:	2000000c 	.word	0x2000000c
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80041fc:	f7fd fdf8 	bl	8001df0 <HAL_GetTick>
 8004200:	4602      	mov	r2, r0
 8004202:	693b      	ldr	r3, [r7, #16]
 8004204:	1ad3      	subs	r3, r2, r3
 8004206:	2b64      	cmp	r3, #100	; 0x64
 8004208:	d901      	bls.n	800420e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800420a:	2303      	movs	r3, #3
 800420c:	e280      	b.n	8004710 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800420e:	4baf      	ldr	r3, [pc, #700]	; (80044cc <HAL_RCC_OscConfig+0x578>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004216:	2b00      	cmp	r3, #0
 8004218:	d0f0      	beq.n	80041fc <HAL_RCC_OscConfig+0x2a8>
 800421a:	e014      	b.n	8004246 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800421c:	f7fd fde8 	bl	8001df0 <HAL_GetTick>
 8004220:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004222:	e008      	b.n	8004236 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004224:	f7fd fde4 	bl	8001df0 <HAL_GetTick>
 8004228:	4602      	mov	r2, r0
 800422a:	693b      	ldr	r3, [r7, #16]
 800422c:	1ad3      	subs	r3, r2, r3
 800422e:	2b64      	cmp	r3, #100	; 0x64
 8004230:	d901      	bls.n	8004236 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004232:	2303      	movs	r3, #3
 8004234:	e26c      	b.n	8004710 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004236:	4ba5      	ldr	r3, [pc, #660]	; (80044cc <HAL_RCC_OscConfig+0x578>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800423e:	2b00      	cmp	r3, #0
 8004240:	d1f0      	bne.n	8004224 <HAL_RCC_OscConfig+0x2d0>
 8004242:	e000      	b.n	8004246 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004244:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f003 0302 	and.w	r3, r3, #2
 800424e:	2b00      	cmp	r3, #0
 8004250:	d060      	beq.n	8004314 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004252:	69bb      	ldr	r3, [r7, #24]
 8004254:	2b04      	cmp	r3, #4
 8004256:	d005      	beq.n	8004264 <HAL_RCC_OscConfig+0x310>
 8004258:	69bb      	ldr	r3, [r7, #24]
 800425a:	2b0c      	cmp	r3, #12
 800425c:	d119      	bne.n	8004292 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800425e:	697b      	ldr	r3, [r7, #20]
 8004260:	2b02      	cmp	r3, #2
 8004262:	d116      	bne.n	8004292 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004264:	4b99      	ldr	r3, [pc, #612]	; (80044cc <HAL_RCC_OscConfig+0x578>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800426c:	2b00      	cmp	r3, #0
 800426e:	d005      	beq.n	800427c <HAL_RCC_OscConfig+0x328>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	68db      	ldr	r3, [r3, #12]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d101      	bne.n	800427c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004278:	2301      	movs	r3, #1
 800427a:	e249      	b.n	8004710 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800427c:	4b93      	ldr	r3, [pc, #588]	; (80044cc <HAL_RCC_OscConfig+0x578>)
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	691b      	ldr	r3, [r3, #16]
 8004288:	061b      	lsls	r3, r3, #24
 800428a:	4990      	ldr	r1, [pc, #576]	; (80044cc <HAL_RCC_OscConfig+0x578>)
 800428c:	4313      	orrs	r3, r2
 800428e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004290:	e040      	b.n	8004314 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	68db      	ldr	r3, [r3, #12]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d023      	beq.n	80042e2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800429a:	4b8c      	ldr	r3, [pc, #560]	; (80044cc <HAL_RCC_OscConfig+0x578>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4a8b      	ldr	r2, [pc, #556]	; (80044cc <HAL_RCC_OscConfig+0x578>)
 80042a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042a6:	f7fd fda3 	bl	8001df0 <HAL_GetTick>
 80042aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80042ac:	e008      	b.n	80042c0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80042ae:	f7fd fd9f 	bl	8001df0 <HAL_GetTick>
 80042b2:	4602      	mov	r2, r0
 80042b4:	693b      	ldr	r3, [r7, #16]
 80042b6:	1ad3      	subs	r3, r2, r3
 80042b8:	2b02      	cmp	r3, #2
 80042ba:	d901      	bls.n	80042c0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80042bc:	2303      	movs	r3, #3
 80042be:	e227      	b.n	8004710 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80042c0:	4b82      	ldr	r3, [pc, #520]	; (80044cc <HAL_RCC_OscConfig+0x578>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d0f0      	beq.n	80042ae <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042cc:	4b7f      	ldr	r3, [pc, #508]	; (80044cc <HAL_RCC_OscConfig+0x578>)
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	691b      	ldr	r3, [r3, #16]
 80042d8:	061b      	lsls	r3, r3, #24
 80042da:	497c      	ldr	r1, [pc, #496]	; (80044cc <HAL_RCC_OscConfig+0x578>)
 80042dc:	4313      	orrs	r3, r2
 80042de:	604b      	str	r3, [r1, #4]
 80042e0:	e018      	b.n	8004314 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80042e2:	4b7a      	ldr	r3, [pc, #488]	; (80044cc <HAL_RCC_OscConfig+0x578>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4a79      	ldr	r2, [pc, #484]	; (80044cc <HAL_RCC_OscConfig+0x578>)
 80042e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80042ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042ee:	f7fd fd7f 	bl	8001df0 <HAL_GetTick>
 80042f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80042f4:	e008      	b.n	8004308 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80042f6:	f7fd fd7b 	bl	8001df0 <HAL_GetTick>
 80042fa:	4602      	mov	r2, r0
 80042fc:	693b      	ldr	r3, [r7, #16]
 80042fe:	1ad3      	subs	r3, r2, r3
 8004300:	2b02      	cmp	r3, #2
 8004302:	d901      	bls.n	8004308 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004304:	2303      	movs	r3, #3
 8004306:	e203      	b.n	8004710 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004308:	4b70      	ldr	r3, [pc, #448]	; (80044cc <HAL_RCC_OscConfig+0x578>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004310:	2b00      	cmp	r3, #0
 8004312:	d1f0      	bne.n	80042f6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f003 0308 	and.w	r3, r3, #8
 800431c:	2b00      	cmp	r3, #0
 800431e:	d03c      	beq.n	800439a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	695b      	ldr	r3, [r3, #20]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d01c      	beq.n	8004362 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004328:	4b68      	ldr	r3, [pc, #416]	; (80044cc <HAL_RCC_OscConfig+0x578>)
 800432a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800432e:	4a67      	ldr	r2, [pc, #412]	; (80044cc <HAL_RCC_OscConfig+0x578>)
 8004330:	f043 0301 	orr.w	r3, r3, #1
 8004334:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004338:	f7fd fd5a 	bl	8001df0 <HAL_GetTick>
 800433c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800433e:	e008      	b.n	8004352 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004340:	f7fd fd56 	bl	8001df0 <HAL_GetTick>
 8004344:	4602      	mov	r2, r0
 8004346:	693b      	ldr	r3, [r7, #16]
 8004348:	1ad3      	subs	r3, r2, r3
 800434a:	2b02      	cmp	r3, #2
 800434c:	d901      	bls.n	8004352 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800434e:	2303      	movs	r3, #3
 8004350:	e1de      	b.n	8004710 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004352:	4b5e      	ldr	r3, [pc, #376]	; (80044cc <HAL_RCC_OscConfig+0x578>)
 8004354:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004358:	f003 0302 	and.w	r3, r3, #2
 800435c:	2b00      	cmp	r3, #0
 800435e:	d0ef      	beq.n	8004340 <HAL_RCC_OscConfig+0x3ec>
 8004360:	e01b      	b.n	800439a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004362:	4b5a      	ldr	r3, [pc, #360]	; (80044cc <HAL_RCC_OscConfig+0x578>)
 8004364:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004368:	4a58      	ldr	r2, [pc, #352]	; (80044cc <HAL_RCC_OscConfig+0x578>)
 800436a:	f023 0301 	bic.w	r3, r3, #1
 800436e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004372:	f7fd fd3d 	bl	8001df0 <HAL_GetTick>
 8004376:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004378:	e008      	b.n	800438c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800437a:	f7fd fd39 	bl	8001df0 <HAL_GetTick>
 800437e:	4602      	mov	r2, r0
 8004380:	693b      	ldr	r3, [r7, #16]
 8004382:	1ad3      	subs	r3, r2, r3
 8004384:	2b02      	cmp	r3, #2
 8004386:	d901      	bls.n	800438c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004388:	2303      	movs	r3, #3
 800438a:	e1c1      	b.n	8004710 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800438c:	4b4f      	ldr	r3, [pc, #316]	; (80044cc <HAL_RCC_OscConfig+0x578>)
 800438e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004392:	f003 0302 	and.w	r3, r3, #2
 8004396:	2b00      	cmp	r3, #0
 8004398:	d1ef      	bne.n	800437a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f003 0304 	and.w	r3, r3, #4
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	f000 80a6 	beq.w	80044f4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80043a8:	2300      	movs	r3, #0
 80043aa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80043ac:	4b47      	ldr	r3, [pc, #284]	; (80044cc <HAL_RCC_OscConfig+0x578>)
 80043ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d10d      	bne.n	80043d4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043b8:	4b44      	ldr	r3, [pc, #272]	; (80044cc <HAL_RCC_OscConfig+0x578>)
 80043ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043bc:	4a43      	ldr	r2, [pc, #268]	; (80044cc <HAL_RCC_OscConfig+0x578>)
 80043be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043c2:	6593      	str	r3, [r2, #88]	; 0x58
 80043c4:	4b41      	ldr	r3, [pc, #260]	; (80044cc <HAL_RCC_OscConfig+0x578>)
 80043c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043cc:	60bb      	str	r3, [r7, #8]
 80043ce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80043d0:	2301      	movs	r3, #1
 80043d2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80043d4:	4b3e      	ldr	r3, [pc, #248]	; (80044d0 <HAL_RCC_OscConfig+0x57c>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d118      	bne.n	8004412 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80043e0:	4b3b      	ldr	r3, [pc, #236]	; (80044d0 <HAL_RCC_OscConfig+0x57c>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a3a      	ldr	r2, [pc, #232]	; (80044d0 <HAL_RCC_OscConfig+0x57c>)
 80043e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043ea:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80043ec:	f7fd fd00 	bl	8001df0 <HAL_GetTick>
 80043f0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80043f2:	e008      	b.n	8004406 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043f4:	f7fd fcfc 	bl	8001df0 <HAL_GetTick>
 80043f8:	4602      	mov	r2, r0
 80043fa:	693b      	ldr	r3, [r7, #16]
 80043fc:	1ad3      	subs	r3, r2, r3
 80043fe:	2b02      	cmp	r3, #2
 8004400:	d901      	bls.n	8004406 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004402:	2303      	movs	r3, #3
 8004404:	e184      	b.n	8004710 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004406:	4b32      	ldr	r3, [pc, #200]	; (80044d0 <HAL_RCC_OscConfig+0x57c>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800440e:	2b00      	cmp	r3, #0
 8004410:	d0f0      	beq.n	80043f4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	689b      	ldr	r3, [r3, #8]
 8004416:	2b01      	cmp	r3, #1
 8004418:	d108      	bne.n	800442c <HAL_RCC_OscConfig+0x4d8>
 800441a:	4b2c      	ldr	r3, [pc, #176]	; (80044cc <HAL_RCC_OscConfig+0x578>)
 800441c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004420:	4a2a      	ldr	r2, [pc, #168]	; (80044cc <HAL_RCC_OscConfig+0x578>)
 8004422:	f043 0301 	orr.w	r3, r3, #1
 8004426:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800442a:	e024      	b.n	8004476 <HAL_RCC_OscConfig+0x522>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	689b      	ldr	r3, [r3, #8]
 8004430:	2b05      	cmp	r3, #5
 8004432:	d110      	bne.n	8004456 <HAL_RCC_OscConfig+0x502>
 8004434:	4b25      	ldr	r3, [pc, #148]	; (80044cc <HAL_RCC_OscConfig+0x578>)
 8004436:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800443a:	4a24      	ldr	r2, [pc, #144]	; (80044cc <HAL_RCC_OscConfig+0x578>)
 800443c:	f043 0304 	orr.w	r3, r3, #4
 8004440:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004444:	4b21      	ldr	r3, [pc, #132]	; (80044cc <HAL_RCC_OscConfig+0x578>)
 8004446:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800444a:	4a20      	ldr	r2, [pc, #128]	; (80044cc <HAL_RCC_OscConfig+0x578>)
 800444c:	f043 0301 	orr.w	r3, r3, #1
 8004450:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004454:	e00f      	b.n	8004476 <HAL_RCC_OscConfig+0x522>
 8004456:	4b1d      	ldr	r3, [pc, #116]	; (80044cc <HAL_RCC_OscConfig+0x578>)
 8004458:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800445c:	4a1b      	ldr	r2, [pc, #108]	; (80044cc <HAL_RCC_OscConfig+0x578>)
 800445e:	f023 0301 	bic.w	r3, r3, #1
 8004462:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004466:	4b19      	ldr	r3, [pc, #100]	; (80044cc <HAL_RCC_OscConfig+0x578>)
 8004468:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800446c:	4a17      	ldr	r2, [pc, #92]	; (80044cc <HAL_RCC_OscConfig+0x578>)
 800446e:	f023 0304 	bic.w	r3, r3, #4
 8004472:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	689b      	ldr	r3, [r3, #8]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d016      	beq.n	80044ac <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800447e:	f7fd fcb7 	bl	8001df0 <HAL_GetTick>
 8004482:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004484:	e00a      	b.n	800449c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004486:	f7fd fcb3 	bl	8001df0 <HAL_GetTick>
 800448a:	4602      	mov	r2, r0
 800448c:	693b      	ldr	r3, [r7, #16]
 800448e:	1ad3      	subs	r3, r2, r3
 8004490:	f241 3288 	movw	r2, #5000	; 0x1388
 8004494:	4293      	cmp	r3, r2
 8004496:	d901      	bls.n	800449c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8004498:	2303      	movs	r3, #3
 800449a:	e139      	b.n	8004710 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800449c:	4b0b      	ldr	r3, [pc, #44]	; (80044cc <HAL_RCC_OscConfig+0x578>)
 800449e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044a2:	f003 0302 	and.w	r3, r3, #2
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d0ed      	beq.n	8004486 <HAL_RCC_OscConfig+0x532>
 80044aa:	e01a      	b.n	80044e2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044ac:	f7fd fca0 	bl	8001df0 <HAL_GetTick>
 80044b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80044b2:	e00f      	b.n	80044d4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044b4:	f7fd fc9c 	bl	8001df0 <HAL_GetTick>
 80044b8:	4602      	mov	r2, r0
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	1ad3      	subs	r3, r2, r3
 80044be:	f241 3288 	movw	r2, #5000	; 0x1388
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d906      	bls.n	80044d4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80044c6:	2303      	movs	r3, #3
 80044c8:	e122      	b.n	8004710 <HAL_RCC_OscConfig+0x7bc>
 80044ca:	bf00      	nop
 80044cc:	40021000 	.word	0x40021000
 80044d0:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80044d4:	4b90      	ldr	r3, [pc, #576]	; (8004718 <HAL_RCC_OscConfig+0x7c4>)
 80044d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044da:	f003 0302 	and.w	r3, r3, #2
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d1e8      	bne.n	80044b4 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80044e2:	7ffb      	ldrb	r3, [r7, #31]
 80044e4:	2b01      	cmp	r3, #1
 80044e6:	d105      	bne.n	80044f4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044e8:	4b8b      	ldr	r3, [pc, #556]	; (8004718 <HAL_RCC_OscConfig+0x7c4>)
 80044ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044ec:	4a8a      	ldr	r2, [pc, #552]	; (8004718 <HAL_RCC_OscConfig+0x7c4>)
 80044ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044f2:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	f000 8108 	beq.w	800470e <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004502:	2b02      	cmp	r3, #2
 8004504:	f040 80d0 	bne.w	80046a8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004508:	4b83      	ldr	r3, [pc, #524]	; (8004718 <HAL_RCC_OscConfig+0x7c4>)
 800450a:	68db      	ldr	r3, [r3, #12]
 800450c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800450e:	697b      	ldr	r3, [r7, #20]
 8004510:	f003 0203 	and.w	r2, r3, #3
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004518:	429a      	cmp	r2, r3
 800451a:	d130      	bne.n	800457e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800451c:	697b      	ldr	r3, [r7, #20]
 800451e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004526:	3b01      	subs	r3, #1
 8004528:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800452a:	429a      	cmp	r2, r3
 800452c:	d127      	bne.n	800457e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800452e:	697b      	ldr	r3, [r7, #20]
 8004530:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004538:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800453a:	429a      	cmp	r2, r3
 800453c:	d11f      	bne.n	800457e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800453e:	697b      	ldr	r3, [r7, #20]
 8004540:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004544:	687a      	ldr	r2, [r7, #4]
 8004546:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004548:	2a07      	cmp	r2, #7
 800454a:	bf14      	ite	ne
 800454c:	2201      	movne	r2, #1
 800454e:	2200      	moveq	r2, #0
 8004550:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004552:	4293      	cmp	r3, r2
 8004554:	d113      	bne.n	800457e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004560:	085b      	lsrs	r3, r3, #1
 8004562:	3b01      	subs	r3, #1
 8004564:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004566:	429a      	cmp	r2, r3
 8004568:	d109      	bne.n	800457e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800456a:	697b      	ldr	r3, [r7, #20]
 800456c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004574:	085b      	lsrs	r3, r3, #1
 8004576:	3b01      	subs	r3, #1
 8004578:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800457a:	429a      	cmp	r2, r3
 800457c:	d06e      	beq.n	800465c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800457e:	69bb      	ldr	r3, [r7, #24]
 8004580:	2b0c      	cmp	r3, #12
 8004582:	d069      	beq.n	8004658 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004584:	4b64      	ldr	r3, [pc, #400]	; (8004718 <HAL_RCC_OscConfig+0x7c4>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800458c:	2b00      	cmp	r3, #0
 800458e:	d105      	bne.n	800459c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004590:	4b61      	ldr	r3, [pc, #388]	; (8004718 <HAL_RCC_OscConfig+0x7c4>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004598:	2b00      	cmp	r3, #0
 800459a:	d001      	beq.n	80045a0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800459c:	2301      	movs	r3, #1
 800459e:	e0b7      	b.n	8004710 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80045a0:	4b5d      	ldr	r3, [pc, #372]	; (8004718 <HAL_RCC_OscConfig+0x7c4>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4a5c      	ldr	r2, [pc, #368]	; (8004718 <HAL_RCC_OscConfig+0x7c4>)
 80045a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80045aa:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80045ac:	f7fd fc20 	bl	8001df0 <HAL_GetTick>
 80045b0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80045b2:	e008      	b.n	80045c6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045b4:	f7fd fc1c 	bl	8001df0 <HAL_GetTick>
 80045b8:	4602      	mov	r2, r0
 80045ba:	693b      	ldr	r3, [r7, #16]
 80045bc:	1ad3      	subs	r3, r2, r3
 80045be:	2b02      	cmp	r3, #2
 80045c0:	d901      	bls.n	80045c6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80045c2:	2303      	movs	r3, #3
 80045c4:	e0a4      	b.n	8004710 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80045c6:	4b54      	ldr	r3, [pc, #336]	; (8004718 <HAL_RCC_OscConfig+0x7c4>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d1f0      	bne.n	80045b4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80045d2:	4b51      	ldr	r3, [pc, #324]	; (8004718 <HAL_RCC_OscConfig+0x7c4>)
 80045d4:	68da      	ldr	r2, [r3, #12]
 80045d6:	4b51      	ldr	r3, [pc, #324]	; (800471c <HAL_RCC_OscConfig+0x7c8>)
 80045d8:	4013      	ands	r3, r2
 80045da:	687a      	ldr	r2, [r7, #4]
 80045dc:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80045de:	687a      	ldr	r2, [r7, #4]
 80045e0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80045e2:	3a01      	subs	r2, #1
 80045e4:	0112      	lsls	r2, r2, #4
 80045e6:	4311      	orrs	r1, r2
 80045e8:	687a      	ldr	r2, [r7, #4]
 80045ea:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80045ec:	0212      	lsls	r2, r2, #8
 80045ee:	4311      	orrs	r1, r2
 80045f0:	687a      	ldr	r2, [r7, #4]
 80045f2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80045f4:	0852      	lsrs	r2, r2, #1
 80045f6:	3a01      	subs	r2, #1
 80045f8:	0552      	lsls	r2, r2, #21
 80045fa:	4311      	orrs	r1, r2
 80045fc:	687a      	ldr	r2, [r7, #4]
 80045fe:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004600:	0852      	lsrs	r2, r2, #1
 8004602:	3a01      	subs	r2, #1
 8004604:	0652      	lsls	r2, r2, #25
 8004606:	4311      	orrs	r1, r2
 8004608:	687a      	ldr	r2, [r7, #4]
 800460a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800460c:	0912      	lsrs	r2, r2, #4
 800460e:	0452      	lsls	r2, r2, #17
 8004610:	430a      	orrs	r2, r1
 8004612:	4941      	ldr	r1, [pc, #260]	; (8004718 <HAL_RCC_OscConfig+0x7c4>)
 8004614:	4313      	orrs	r3, r2
 8004616:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004618:	4b3f      	ldr	r3, [pc, #252]	; (8004718 <HAL_RCC_OscConfig+0x7c4>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4a3e      	ldr	r2, [pc, #248]	; (8004718 <HAL_RCC_OscConfig+0x7c4>)
 800461e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004622:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004624:	4b3c      	ldr	r3, [pc, #240]	; (8004718 <HAL_RCC_OscConfig+0x7c4>)
 8004626:	68db      	ldr	r3, [r3, #12]
 8004628:	4a3b      	ldr	r2, [pc, #236]	; (8004718 <HAL_RCC_OscConfig+0x7c4>)
 800462a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800462e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004630:	f7fd fbde 	bl	8001df0 <HAL_GetTick>
 8004634:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004636:	e008      	b.n	800464a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004638:	f7fd fbda 	bl	8001df0 <HAL_GetTick>
 800463c:	4602      	mov	r2, r0
 800463e:	693b      	ldr	r3, [r7, #16]
 8004640:	1ad3      	subs	r3, r2, r3
 8004642:	2b02      	cmp	r3, #2
 8004644:	d901      	bls.n	800464a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004646:	2303      	movs	r3, #3
 8004648:	e062      	b.n	8004710 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800464a:	4b33      	ldr	r3, [pc, #204]	; (8004718 <HAL_RCC_OscConfig+0x7c4>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004652:	2b00      	cmp	r3, #0
 8004654:	d0f0      	beq.n	8004638 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004656:	e05a      	b.n	800470e <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004658:	2301      	movs	r3, #1
 800465a:	e059      	b.n	8004710 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800465c:	4b2e      	ldr	r3, [pc, #184]	; (8004718 <HAL_RCC_OscConfig+0x7c4>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004664:	2b00      	cmp	r3, #0
 8004666:	d152      	bne.n	800470e <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004668:	4b2b      	ldr	r3, [pc, #172]	; (8004718 <HAL_RCC_OscConfig+0x7c4>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4a2a      	ldr	r2, [pc, #168]	; (8004718 <HAL_RCC_OscConfig+0x7c4>)
 800466e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004672:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004674:	4b28      	ldr	r3, [pc, #160]	; (8004718 <HAL_RCC_OscConfig+0x7c4>)
 8004676:	68db      	ldr	r3, [r3, #12]
 8004678:	4a27      	ldr	r2, [pc, #156]	; (8004718 <HAL_RCC_OscConfig+0x7c4>)
 800467a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800467e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004680:	f7fd fbb6 	bl	8001df0 <HAL_GetTick>
 8004684:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004686:	e008      	b.n	800469a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004688:	f7fd fbb2 	bl	8001df0 <HAL_GetTick>
 800468c:	4602      	mov	r2, r0
 800468e:	693b      	ldr	r3, [r7, #16]
 8004690:	1ad3      	subs	r3, r2, r3
 8004692:	2b02      	cmp	r3, #2
 8004694:	d901      	bls.n	800469a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004696:	2303      	movs	r3, #3
 8004698:	e03a      	b.n	8004710 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800469a:	4b1f      	ldr	r3, [pc, #124]	; (8004718 <HAL_RCC_OscConfig+0x7c4>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d0f0      	beq.n	8004688 <HAL_RCC_OscConfig+0x734>
 80046a6:	e032      	b.n	800470e <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80046a8:	69bb      	ldr	r3, [r7, #24]
 80046aa:	2b0c      	cmp	r3, #12
 80046ac:	d02d      	beq.n	800470a <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046ae:	4b1a      	ldr	r3, [pc, #104]	; (8004718 <HAL_RCC_OscConfig+0x7c4>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4a19      	ldr	r2, [pc, #100]	; (8004718 <HAL_RCC_OscConfig+0x7c4>)
 80046b4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80046b8:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80046ba:	4b17      	ldr	r3, [pc, #92]	; (8004718 <HAL_RCC_OscConfig+0x7c4>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d105      	bne.n	80046d2 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80046c6:	4b14      	ldr	r3, [pc, #80]	; (8004718 <HAL_RCC_OscConfig+0x7c4>)
 80046c8:	68db      	ldr	r3, [r3, #12]
 80046ca:	4a13      	ldr	r2, [pc, #76]	; (8004718 <HAL_RCC_OscConfig+0x7c4>)
 80046cc:	f023 0303 	bic.w	r3, r3, #3
 80046d0:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80046d2:	4b11      	ldr	r3, [pc, #68]	; (8004718 <HAL_RCC_OscConfig+0x7c4>)
 80046d4:	68db      	ldr	r3, [r3, #12]
 80046d6:	4a10      	ldr	r2, [pc, #64]	; (8004718 <HAL_RCC_OscConfig+0x7c4>)
 80046d8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80046dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046e0:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046e2:	f7fd fb85 	bl	8001df0 <HAL_GetTick>
 80046e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046e8:	e008      	b.n	80046fc <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046ea:	f7fd fb81 	bl	8001df0 <HAL_GetTick>
 80046ee:	4602      	mov	r2, r0
 80046f0:	693b      	ldr	r3, [r7, #16]
 80046f2:	1ad3      	subs	r3, r2, r3
 80046f4:	2b02      	cmp	r3, #2
 80046f6:	d901      	bls.n	80046fc <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 80046f8:	2303      	movs	r3, #3
 80046fa:	e009      	b.n	8004710 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046fc:	4b06      	ldr	r3, [pc, #24]	; (8004718 <HAL_RCC_OscConfig+0x7c4>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004704:	2b00      	cmp	r3, #0
 8004706:	d1f0      	bne.n	80046ea <HAL_RCC_OscConfig+0x796>
 8004708:	e001      	b.n	800470e <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800470a:	2301      	movs	r3, #1
 800470c:	e000      	b.n	8004710 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 800470e:	2300      	movs	r3, #0
}
 8004710:	4618      	mov	r0, r3
 8004712:	3720      	adds	r7, #32
 8004714:	46bd      	mov	sp, r7
 8004716:	bd80      	pop	{r7, pc}
 8004718:	40021000 	.word	0x40021000
 800471c:	f99d808c 	.word	0xf99d808c

08004720 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b084      	sub	sp, #16
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
 8004728:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d101      	bne.n	8004734 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004730:	2301      	movs	r3, #1
 8004732:	e0c8      	b.n	80048c6 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004734:	4b66      	ldr	r3, [pc, #408]	; (80048d0 <HAL_RCC_ClockConfig+0x1b0>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f003 0307 	and.w	r3, r3, #7
 800473c:	683a      	ldr	r2, [r7, #0]
 800473e:	429a      	cmp	r2, r3
 8004740:	d910      	bls.n	8004764 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004742:	4b63      	ldr	r3, [pc, #396]	; (80048d0 <HAL_RCC_ClockConfig+0x1b0>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f023 0207 	bic.w	r2, r3, #7
 800474a:	4961      	ldr	r1, [pc, #388]	; (80048d0 <HAL_RCC_ClockConfig+0x1b0>)
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	4313      	orrs	r3, r2
 8004750:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004752:	4b5f      	ldr	r3, [pc, #380]	; (80048d0 <HAL_RCC_ClockConfig+0x1b0>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f003 0307 	and.w	r3, r3, #7
 800475a:	683a      	ldr	r2, [r7, #0]
 800475c:	429a      	cmp	r2, r3
 800475e:	d001      	beq.n	8004764 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004760:	2301      	movs	r3, #1
 8004762:	e0b0      	b.n	80048c6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f003 0301 	and.w	r3, r3, #1
 800476c:	2b00      	cmp	r3, #0
 800476e:	d04c      	beq.n	800480a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	2b03      	cmp	r3, #3
 8004776:	d107      	bne.n	8004788 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004778:	4b56      	ldr	r3, [pc, #344]	; (80048d4 <HAL_RCC_ClockConfig+0x1b4>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004780:	2b00      	cmp	r3, #0
 8004782:	d121      	bne.n	80047c8 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8004784:	2301      	movs	r3, #1
 8004786:	e09e      	b.n	80048c6 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	685b      	ldr	r3, [r3, #4]
 800478c:	2b02      	cmp	r3, #2
 800478e:	d107      	bne.n	80047a0 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004790:	4b50      	ldr	r3, [pc, #320]	; (80048d4 <HAL_RCC_ClockConfig+0x1b4>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004798:	2b00      	cmp	r3, #0
 800479a:	d115      	bne.n	80047c8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800479c:	2301      	movs	r3, #1
 800479e:	e092      	b.n	80048c6 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	685b      	ldr	r3, [r3, #4]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d107      	bne.n	80047b8 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80047a8:	4b4a      	ldr	r3, [pc, #296]	; (80048d4 <HAL_RCC_ClockConfig+0x1b4>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f003 0302 	and.w	r3, r3, #2
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d109      	bne.n	80047c8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80047b4:	2301      	movs	r3, #1
 80047b6:	e086      	b.n	80048c6 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80047b8:	4b46      	ldr	r3, [pc, #280]	; (80048d4 <HAL_RCC_ClockConfig+0x1b4>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d101      	bne.n	80047c8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80047c4:	2301      	movs	r3, #1
 80047c6:	e07e      	b.n	80048c6 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80047c8:	4b42      	ldr	r3, [pc, #264]	; (80048d4 <HAL_RCC_ClockConfig+0x1b4>)
 80047ca:	689b      	ldr	r3, [r3, #8]
 80047cc:	f023 0203 	bic.w	r2, r3, #3
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	493f      	ldr	r1, [pc, #252]	; (80048d4 <HAL_RCC_ClockConfig+0x1b4>)
 80047d6:	4313      	orrs	r3, r2
 80047d8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047da:	f7fd fb09 	bl	8001df0 <HAL_GetTick>
 80047de:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047e0:	e00a      	b.n	80047f8 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047e2:	f7fd fb05 	bl	8001df0 <HAL_GetTick>
 80047e6:	4602      	mov	r2, r0
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	1ad3      	subs	r3, r2, r3
 80047ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d901      	bls.n	80047f8 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80047f4:	2303      	movs	r3, #3
 80047f6:	e066      	b.n	80048c6 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047f8:	4b36      	ldr	r3, [pc, #216]	; (80048d4 <HAL_RCC_ClockConfig+0x1b4>)
 80047fa:	689b      	ldr	r3, [r3, #8]
 80047fc:	f003 020c 	and.w	r2, r3, #12
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	009b      	lsls	r3, r3, #2
 8004806:	429a      	cmp	r2, r3
 8004808:	d1eb      	bne.n	80047e2 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f003 0302 	and.w	r3, r3, #2
 8004812:	2b00      	cmp	r3, #0
 8004814:	d008      	beq.n	8004828 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004816:	4b2f      	ldr	r3, [pc, #188]	; (80048d4 <HAL_RCC_ClockConfig+0x1b4>)
 8004818:	689b      	ldr	r3, [r3, #8]
 800481a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	689b      	ldr	r3, [r3, #8]
 8004822:	492c      	ldr	r1, [pc, #176]	; (80048d4 <HAL_RCC_ClockConfig+0x1b4>)
 8004824:	4313      	orrs	r3, r2
 8004826:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004828:	4b29      	ldr	r3, [pc, #164]	; (80048d0 <HAL_RCC_ClockConfig+0x1b0>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f003 0307 	and.w	r3, r3, #7
 8004830:	683a      	ldr	r2, [r7, #0]
 8004832:	429a      	cmp	r2, r3
 8004834:	d210      	bcs.n	8004858 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004836:	4b26      	ldr	r3, [pc, #152]	; (80048d0 <HAL_RCC_ClockConfig+0x1b0>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f023 0207 	bic.w	r2, r3, #7
 800483e:	4924      	ldr	r1, [pc, #144]	; (80048d0 <HAL_RCC_ClockConfig+0x1b0>)
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	4313      	orrs	r3, r2
 8004844:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004846:	4b22      	ldr	r3, [pc, #136]	; (80048d0 <HAL_RCC_ClockConfig+0x1b0>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f003 0307 	and.w	r3, r3, #7
 800484e:	683a      	ldr	r2, [r7, #0]
 8004850:	429a      	cmp	r2, r3
 8004852:	d001      	beq.n	8004858 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8004854:	2301      	movs	r3, #1
 8004856:	e036      	b.n	80048c6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f003 0304 	and.w	r3, r3, #4
 8004860:	2b00      	cmp	r3, #0
 8004862:	d008      	beq.n	8004876 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004864:	4b1b      	ldr	r3, [pc, #108]	; (80048d4 <HAL_RCC_ClockConfig+0x1b4>)
 8004866:	689b      	ldr	r3, [r3, #8]
 8004868:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	68db      	ldr	r3, [r3, #12]
 8004870:	4918      	ldr	r1, [pc, #96]	; (80048d4 <HAL_RCC_ClockConfig+0x1b4>)
 8004872:	4313      	orrs	r3, r2
 8004874:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f003 0308 	and.w	r3, r3, #8
 800487e:	2b00      	cmp	r3, #0
 8004880:	d009      	beq.n	8004896 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004882:	4b14      	ldr	r3, [pc, #80]	; (80048d4 <HAL_RCC_ClockConfig+0x1b4>)
 8004884:	689b      	ldr	r3, [r3, #8]
 8004886:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	691b      	ldr	r3, [r3, #16]
 800488e:	00db      	lsls	r3, r3, #3
 8004890:	4910      	ldr	r1, [pc, #64]	; (80048d4 <HAL_RCC_ClockConfig+0x1b4>)
 8004892:	4313      	orrs	r3, r2
 8004894:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004896:	f000 f825 	bl	80048e4 <HAL_RCC_GetSysClockFreq>
 800489a:	4602      	mov	r2, r0
 800489c:	4b0d      	ldr	r3, [pc, #52]	; (80048d4 <HAL_RCC_ClockConfig+0x1b4>)
 800489e:	689b      	ldr	r3, [r3, #8]
 80048a0:	091b      	lsrs	r3, r3, #4
 80048a2:	f003 030f 	and.w	r3, r3, #15
 80048a6:	490c      	ldr	r1, [pc, #48]	; (80048d8 <HAL_RCC_ClockConfig+0x1b8>)
 80048a8:	5ccb      	ldrb	r3, [r1, r3]
 80048aa:	f003 031f 	and.w	r3, r3, #31
 80048ae:	fa22 f303 	lsr.w	r3, r2, r3
 80048b2:	4a0a      	ldr	r2, [pc, #40]	; (80048dc <HAL_RCC_ClockConfig+0x1bc>)
 80048b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80048b6:	4b0a      	ldr	r3, [pc, #40]	; (80048e0 <HAL_RCC_ClockConfig+0x1c0>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4618      	mov	r0, r3
 80048bc:	f7fd fa48 	bl	8001d50 <HAL_InitTick>
 80048c0:	4603      	mov	r3, r0
 80048c2:	72fb      	strb	r3, [r7, #11]

  return status;
 80048c4:	7afb      	ldrb	r3, [r7, #11]
}
 80048c6:	4618      	mov	r0, r3
 80048c8:	3710      	adds	r7, #16
 80048ca:	46bd      	mov	sp, r7
 80048cc:	bd80      	pop	{r7, pc}
 80048ce:	bf00      	nop
 80048d0:	40022000 	.word	0x40022000
 80048d4:	40021000 	.word	0x40021000
 80048d8:	0800e150 	.word	0x0800e150
 80048dc:	20000008 	.word	0x20000008
 80048e0:	2000000c 	.word	0x2000000c

080048e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80048e4:	b480      	push	{r7}
 80048e6:	b089      	sub	sp, #36	; 0x24
 80048e8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80048ea:	2300      	movs	r3, #0
 80048ec:	61fb      	str	r3, [r7, #28]
 80048ee:	2300      	movs	r3, #0
 80048f0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80048f2:	4b3e      	ldr	r3, [pc, #248]	; (80049ec <HAL_RCC_GetSysClockFreq+0x108>)
 80048f4:	689b      	ldr	r3, [r3, #8]
 80048f6:	f003 030c 	and.w	r3, r3, #12
 80048fa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80048fc:	4b3b      	ldr	r3, [pc, #236]	; (80049ec <HAL_RCC_GetSysClockFreq+0x108>)
 80048fe:	68db      	ldr	r3, [r3, #12]
 8004900:	f003 0303 	and.w	r3, r3, #3
 8004904:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004906:	693b      	ldr	r3, [r7, #16]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d005      	beq.n	8004918 <HAL_RCC_GetSysClockFreq+0x34>
 800490c:	693b      	ldr	r3, [r7, #16]
 800490e:	2b0c      	cmp	r3, #12
 8004910:	d121      	bne.n	8004956 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	2b01      	cmp	r3, #1
 8004916:	d11e      	bne.n	8004956 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004918:	4b34      	ldr	r3, [pc, #208]	; (80049ec <HAL_RCC_GetSysClockFreq+0x108>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f003 0308 	and.w	r3, r3, #8
 8004920:	2b00      	cmp	r3, #0
 8004922:	d107      	bne.n	8004934 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004924:	4b31      	ldr	r3, [pc, #196]	; (80049ec <HAL_RCC_GetSysClockFreq+0x108>)
 8004926:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800492a:	0a1b      	lsrs	r3, r3, #8
 800492c:	f003 030f 	and.w	r3, r3, #15
 8004930:	61fb      	str	r3, [r7, #28]
 8004932:	e005      	b.n	8004940 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004934:	4b2d      	ldr	r3, [pc, #180]	; (80049ec <HAL_RCC_GetSysClockFreq+0x108>)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	091b      	lsrs	r3, r3, #4
 800493a:	f003 030f 	and.w	r3, r3, #15
 800493e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004940:	4a2b      	ldr	r2, [pc, #172]	; (80049f0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004942:	69fb      	ldr	r3, [r7, #28]
 8004944:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004948:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800494a:	693b      	ldr	r3, [r7, #16]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d10d      	bne.n	800496c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004950:	69fb      	ldr	r3, [r7, #28]
 8004952:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004954:	e00a      	b.n	800496c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004956:	693b      	ldr	r3, [r7, #16]
 8004958:	2b04      	cmp	r3, #4
 800495a:	d102      	bne.n	8004962 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800495c:	4b25      	ldr	r3, [pc, #148]	; (80049f4 <HAL_RCC_GetSysClockFreq+0x110>)
 800495e:	61bb      	str	r3, [r7, #24]
 8004960:	e004      	b.n	800496c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004962:	693b      	ldr	r3, [r7, #16]
 8004964:	2b08      	cmp	r3, #8
 8004966:	d101      	bne.n	800496c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004968:	4b23      	ldr	r3, [pc, #140]	; (80049f8 <HAL_RCC_GetSysClockFreq+0x114>)
 800496a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800496c:	693b      	ldr	r3, [r7, #16]
 800496e:	2b0c      	cmp	r3, #12
 8004970:	d134      	bne.n	80049dc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004972:	4b1e      	ldr	r3, [pc, #120]	; (80049ec <HAL_RCC_GetSysClockFreq+0x108>)
 8004974:	68db      	ldr	r3, [r3, #12]
 8004976:	f003 0303 	and.w	r3, r3, #3
 800497a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800497c:	68bb      	ldr	r3, [r7, #8]
 800497e:	2b02      	cmp	r3, #2
 8004980:	d003      	beq.n	800498a <HAL_RCC_GetSysClockFreq+0xa6>
 8004982:	68bb      	ldr	r3, [r7, #8]
 8004984:	2b03      	cmp	r3, #3
 8004986:	d003      	beq.n	8004990 <HAL_RCC_GetSysClockFreq+0xac>
 8004988:	e005      	b.n	8004996 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800498a:	4b1a      	ldr	r3, [pc, #104]	; (80049f4 <HAL_RCC_GetSysClockFreq+0x110>)
 800498c:	617b      	str	r3, [r7, #20]
      break;
 800498e:	e005      	b.n	800499c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004990:	4b19      	ldr	r3, [pc, #100]	; (80049f8 <HAL_RCC_GetSysClockFreq+0x114>)
 8004992:	617b      	str	r3, [r7, #20]
      break;
 8004994:	e002      	b.n	800499c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004996:	69fb      	ldr	r3, [r7, #28]
 8004998:	617b      	str	r3, [r7, #20]
      break;
 800499a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800499c:	4b13      	ldr	r3, [pc, #76]	; (80049ec <HAL_RCC_GetSysClockFreq+0x108>)
 800499e:	68db      	ldr	r3, [r3, #12]
 80049a0:	091b      	lsrs	r3, r3, #4
 80049a2:	f003 0307 	and.w	r3, r3, #7
 80049a6:	3301      	adds	r3, #1
 80049a8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80049aa:	4b10      	ldr	r3, [pc, #64]	; (80049ec <HAL_RCC_GetSysClockFreq+0x108>)
 80049ac:	68db      	ldr	r3, [r3, #12]
 80049ae:	0a1b      	lsrs	r3, r3, #8
 80049b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80049b4:	697a      	ldr	r2, [r7, #20]
 80049b6:	fb02 f203 	mul.w	r2, r2, r3
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80049c0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80049c2:	4b0a      	ldr	r3, [pc, #40]	; (80049ec <HAL_RCC_GetSysClockFreq+0x108>)
 80049c4:	68db      	ldr	r3, [r3, #12]
 80049c6:	0e5b      	lsrs	r3, r3, #25
 80049c8:	f003 0303 	and.w	r3, r3, #3
 80049cc:	3301      	adds	r3, #1
 80049ce:	005b      	lsls	r3, r3, #1
 80049d0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80049d2:	697a      	ldr	r2, [r7, #20]
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80049da:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80049dc:	69bb      	ldr	r3, [r7, #24]
}
 80049de:	4618      	mov	r0, r3
 80049e0:	3724      	adds	r7, #36	; 0x24
 80049e2:	46bd      	mov	sp, r7
 80049e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e8:	4770      	bx	lr
 80049ea:	bf00      	nop
 80049ec:	40021000 	.word	0x40021000
 80049f0:	0800e168 	.word	0x0800e168
 80049f4:	00f42400 	.word	0x00f42400
 80049f8:	007a1200 	.word	0x007a1200

080049fc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80049fc:	b480      	push	{r7}
 80049fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a00:	4b03      	ldr	r3, [pc, #12]	; (8004a10 <HAL_RCC_GetHCLKFreq+0x14>)
 8004a02:	681b      	ldr	r3, [r3, #0]
}
 8004a04:	4618      	mov	r0, r3
 8004a06:	46bd      	mov	sp, r7
 8004a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0c:	4770      	bx	lr
 8004a0e:	bf00      	nop
 8004a10:	20000008 	.word	0x20000008

08004a14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004a18:	f7ff fff0 	bl	80049fc <HAL_RCC_GetHCLKFreq>
 8004a1c:	4602      	mov	r2, r0
 8004a1e:	4b06      	ldr	r3, [pc, #24]	; (8004a38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a20:	689b      	ldr	r3, [r3, #8]
 8004a22:	0a1b      	lsrs	r3, r3, #8
 8004a24:	f003 0307 	and.w	r3, r3, #7
 8004a28:	4904      	ldr	r1, [pc, #16]	; (8004a3c <HAL_RCC_GetPCLK1Freq+0x28>)
 8004a2a:	5ccb      	ldrb	r3, [r1, r3]
 8004a2c:	f003 031f 	and.w	r3, r3, #31
 8004a30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a34:	4618      	mov	r0, r3
 8004a36:	bd80      	pop	{r7, pc}
 8004a38:	40021000 	.word	0x40021000
 8004a3c:	0800e160 	.word	0x0800e160

08004a40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004a44:	f7ff ffda 	bl	80049fc <HAL_RCC_GetHCLKFreq>
 8004a48:	4602      	mov	r2, r0
 8004a4a:	4b06      	ldr	r3, [pc, #24]	; (8004a64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004a4c:	689b      	ldr	r3, [r3, #8]
 8004a4e:	0adb      	lsrs	r3, r3, #11
 8004a50:	f003 0307 	and.w	r3, r3, #7
 8004a54:	4904      	ldr	r1, [pc, #16]	; (8004a68 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004a56:	5ccb      	ldrb	r3, [r1, r3]
 8004a58:	f003 031f 	and.w	r3, r3, #31
 8004a5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a60:	4618      	mov	r0, r3
 8004a62:	bd80      	pop	{r7, pc}
 8004a64:	40021000 	.word	0x40021000
 8004a68:	0800e160 	.word	0x0800e160

08004a6c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b086      	sub	sp, #24
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004a74:	2300      	movs	r3, #0
 8004a76:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004a78:	4b2a      	ldr	r3, [pc, #168]	; (8004b24 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004a7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d003      	beq.n	8004a8c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004a84:	f7ff fa02 	bl	8003e8c <HAL_PWREx_GetVoltageRange>
 8004a88:	6178      	str	r0, [r7, #20]
 8004a8a:	e014      	b.n	8004ab6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004a8c:	4b25      	ldr	r3, [pc, #148]	; (8004b24 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004a8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a90:	4a24      	ldr	r2, [pc, #144]	; (8004b24 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004a92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a96:	6593      	str	r3, [r2, #88]	; 0x58
 8004a98:	4b22      	ldr	r3, [pc, #136]	; (8004b24 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004a9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004aa0:	60fb      	str	r3, [r7, #12]
 8004aa2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004aa4:	f7ff f9f2 	bl	8003e8c <HAL_PWREx_GetVoltageRange>
 8004aa8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004aaa:	4b1e      	ldr	r3, [pc, #120]	; (8004b24 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004aac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004aae:	4a1d      	ldr	r2, [pc, #116]	; (8004b24 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004ab0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ab4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004ab6:	697b      	ldr	r3, [r7, #20]
 8004ab8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004abc:	d10b      	bne.n	8004ad6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2b80      	cmp	r3, #128	; 0x80
 8004ac2:	d919      	bls.n	8004af8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2ba0      	cmp	r3, #160	; 0xa0
 8004ac8:	d902      	bls.n	8004ad0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004aca:	2302      	movs	r3, #2
 8004acc:	613b      	str	r3, [r7, #16]
 8004ace:	e013      	b.n	8004af8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	613b      	str	r3, [r7, #16]
 8004ad4:	e010      	b.n	8004af8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2b80      	cmp	r3, #128	; 0x80
 8004ada:	d902      	bls.n	8004ae2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004adc:	2303      	movs	r3, #3
 8004ade:	613b      	str	r3, [r7, #16]
 8004ae0:	e00a      	b.n	8004af8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2b80      	cmp	r3, #128	; 0x80
 8004ae6:	d102      	bne.n	8004aee <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004ae8:	2302      	movs	r3, #2
 8004aea:	613b      	str	r3, [r7, #16]
 8004aec:	e004      	b.n	8004af8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2b70      	cmp	r3, #112	; 0x70
 8004af2:	d101      	bne.n	8004af8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004af4:	2301      	movs	r3, #1
 8004af6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004af8:	4b0b      	ldr	r3, [pc, #44]	; (8004b28 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f023 0207 	bic.w	r2, r3, #7
 8004b00:	4909      	ldr	r1, [pc, #36]	; (8004b28 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004b02:	693b      	ldr	r3, [r7, #16]
 8004b04:	4313      	orrs	r3, r2
 8004b06:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004b08:	4b07      	ldr	r3, [pc, #28]	; (8004b28 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f003 0307 	and.w	r3, r3, #7
 8004b10:	693a      	ldr	r2, [r7, #16]
 8004b12:	429a      	cmp	r2, r3
 8004b14:	d001      	beq.n	8004b1a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004b16:	2301      	movs	r3, #1
 8004b18:	e000      	b.n	8004b1c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004b1a:	2300      	movs	r3, #0
}
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	3718      	adds	r7, #24
 8004b20:	46bd      	mov	sp, r7
 8004b22:	bd80      	pop	{r7, pc}
 8004b24:	40021000 	.word	0x40021000
 8004b28:	40022000 	.word	0x40022000

08004b2c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b086      	sub	sp, #24
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004b34:	2300      	movs	r3, #0
 8004b36:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004b38:	2300      	movs	r3, #0
 8004b3a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d041      	beq.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004b4c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004b50:	d02a      	beq.n	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004b52:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004b56:	d824      	bhi.n	8004ba2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004b58:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004b5c:	d008      	beq.n	8004b70 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004b5e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004b62:	d81e      	bhi.n	8004ba2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d00a      	beq.n	8004b7e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004b68:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b6c:	d010      	beq.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004b6e:	e018      	b.n	8004ba2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004b70:	4b86      	ldr	r3, [pc, #536]	; (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b72:	68db      	ldr	r3, [r3, #12]
 8004b74:	4a85      	ldr	r2, [pc, #532]	; (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b7a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004b7c:	e015      	b.n	8004baa <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	3304      	adds	r3, #4
 8004b82:	2100      	movs	r1, #0
 8004b84:	4618      	mov	r0, r3
 8004b86:	f000 fabb 	bl	8005100 <RCCEx_PLLSAI1_Config>
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004b8e:	e00c      	b.n	8004baa <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	3320      	adds	r3, #32
 8004b94:	2100      	movs	r1, #0
 8004b96:	4618      	mov	r0, r3
 8004b98:	f000 fba6 	bl	80052e8 <RCCEx_PLLSAI2_Config>
 8004b9c:	4603      	mov	r3, r0
 8004b9e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004ba0:	e003      	b.n	8004baa <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	74fb      	strb	r3, [r7, #19]
      break;
 8004ba6:	e000      	b.n	8004baa <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004ba8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004baa:	7cfb      	ldrb	r3, [r7, #19]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d10b      	bne.n	8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004bb0:	4b76      	ldr	r3, [pc, #472]	; (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004bb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bb6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004bbe:	4973      	ldr	r1, [pc, #460]	; (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004bc0:	4313      	orrs	r3, r2
 8004bc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004bc6:	e001      	b.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bc8:	7cfb      	ldrb	r3, [r7, #19]
 8004bca:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d041      	beq.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004bdc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004be0:	d02a      	beq.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004be2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004be6:	d824      	bhi.n	8004c32 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004be8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004bec:	d008      	beq.n	8004c00 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004bee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004bf2:	d81e      	bhi.n	8004c32 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d00a      	beq.n	8004c0e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004bf8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004bfc:	d010      	beq.n	8004c20 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004bfe:	e018      	b.n	8004c32 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004c00:	4b62      	ldr	r3, [pc, #392]	; (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c02:	68db      	ldr	r3, [r3, #12]
 8004c04:	4a61      	ldr	r2, [pc, #388]	; (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c0a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004c0c:	e015      	b.n	8004c3a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	3304      	adds	r3, #4
 8004c12:	2100      	movs	r1, #0
 8004c14:	4618      	mov	r0, r3
 8004c16:	f000 fa73 	bl	8005100 <RCCEx_PLLSAI1_Config>
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004c1e:	e00c      	b.n	8004c3a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	3320      	adds	r3, #32
 8004c24:	2100      	movs	r1, #0
 8004c26:	4618      	mov	r0, r3
 8004c28:	f000 fb5e 	bl	80052e8 <RCCEx_PLLSAI2_Config>
 8004c2c:	4603      	mov	r3, r0
 8004c2e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004c30:	e003      	b.n	8004c3a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004c32:	2301      	movs	r3, #1
 8004c34:	74fb      	strb	r3, [r7, #19]
      break;
 8004c36:	e000      	b.n	8004c3a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004c38:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c3a:	7cfb      	ldrb	r3, [r7, #19]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d10b      	bne.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004c40:	4b52      	ldr	r3, [pc, #328]	; (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c46:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004c4e:	494f      	ldr	r1, [pc, #316]	; (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c50:	4313      	orrs	r3, r2
 8004c52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004c56:	e001      	b.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c58:	7cfb      	ldrb	r3, [r7, #19]
 8004c5a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	f000 80a0 	beq.w	8004daa <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004c6e:	4b47      	ldr	r3, [pc, #284]	; (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d101      	bne.n	8004c7e <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	e000      	b.n	8004c80 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004c7e:	2300      	movs	r3, #0
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d00d      	beq.n	8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c84:	4b41      	ldr	r3, [pc, #260]	; (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c88:	4a40      	ldr	r2, [pc, #256]	; (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c8e:	6593      	str	r3, [r2, #88]	; 0x58
 8004c90:	4b3e      	ldr	r3, [pc, #248]	; (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c98:	60bb      	str	r3, [r7, #8]
 8004c9a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004ca0:	4b3b      	ldr	r3, [pc, #236]	; (8004d90 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a3a      	ldr	r2, [pc, #232]	; (8004d90 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004ca6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004caa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004cac:	f7fd f8a0 	bl	8001df0 <HAL_GetTick>
 8004cb0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004cb2:	e009      	b.n	8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004cb4:	f7fd f89c 	bl	8001df0 <HAL_GetTick>
 8004cb8:	4602      	mov	r2, r0
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	1ad3      	subs	r3, r2, r3
 8004cbe:	2b02      	cmp	r3, #2
 8004cc0:	d902      	bls.n	8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004cc2:	2303      	movs	r3, #3
 8004cc4:	74fb      	strb	r3, [r7, #19]
        break;
 8004cc6:	e005      	b.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004cc8:	4b31      	ldr	r3, [pc, #196]	; (8004d90 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d0ef      	beq.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004cd4:	7cfb      	ldrb	r3, [r7, #19]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d15c      	bne.n	8004d94 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004cda:	4b2c      	ldr	r3, [pc, #176]	; (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004cdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ce0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ce4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004ce6:	697b      	ldr	r3, [r7, #20]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d01f      	beq.n	8004d2c <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004cf2:	697a      	ldr	r2, [r7, #20]
 8004cf4:	429a      	cmp	r2, r3
 8004cf6:	d019      	beq.n	8004d2c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004cf8:	4b24      	ldr	r3, [pc, #144]	; (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004cfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cfe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d02:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004d04:	4b21      	ldr	r3, [pc, #132]	; (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d0a:	4a20      	ldr	r2, [pc, #128]	; (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004d14:	4b1d      	ldr	r3, [pc, #116]	; (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d1a:	4a1c      	ldr	r2, [pc, #112]	; (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004d24:	4a19      	ldr	r2, [pc, #100]	; (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d26:	697b      	ldr	r3, [r7, #20]
 8004d28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004d2c:	697b      	ldr	r3, [r7, #20]
 8004d2e:	f003 0301 	and.w	r3, r3, #1
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d016      	beq.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d36:	f7fd f85b 	bl	8001df0 <HAL_GetTick>
 8004d3a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d3c:	e00b      	b.n	8004d56 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d3e:	f7fd f857 	bl	8001df0 <HAL_GetTick>
 8004d42:	4602      	mov	r2, r0
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	1ad3      	subs	r3, r2, r3
 8004d48:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d902      	bls.n	8004d56 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004d50:	2303      	movs	r3, #3
 8004d52:	74fb      	strb	r3, [r7, #19]
            break;
 8004d54:	e006      	b.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d56:	4b0d      	ldr	r3, [pc, #52]	; (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d5c:	f003 0302 	and.w	r3, r3, #2
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d0ec      	beq.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004d64:	7cfb      	ldrb	r3, [r7, #19]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d10c      	bne.n	8004d84 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004d6a:	4b08      	ldr	r3, [pc, #32]	; (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d70:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d7a:	4904      	ldr	r1, [pc, #16]	; (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d7c:	4313      	orrs	r3, r2
 8004d7e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004d82:	e009      	b.n	8004d98 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004d84:	7cfb      	ldrb	r3, [r7, #19]
 8004d86:	74bb      	strb	r3, [r7, #18]
 8004d88:	e006      	b.n	8004d98 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004d8a:	bf00      	nop
 8004d8c:	40021000 	.word	0x40021000
 8004d90:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d94:	7cfb      	ldrb	r3, [r7, #19]
 8004d96:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004d98:	7c7b      	ldrb	r3, [r7, #17]
 8004d9a:	2b01      	cmp	r3, #1
 8004d9c:	d105      	bne.n	8004daa <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d9e:	4b9e      	ldr	r3, [pc, #632]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004da0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004da2:	4a9d      	ldr	r2, [pc, #628]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004da4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004da8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f003 0301 	and.w	r3, r3, #1
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d00a      	beq.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004db6:	4b98      	ldr	r3, [pc, #608]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004db8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dbc:	f023 0203 	bic.w	r2, r3, #3
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dc4:	4994      	ldr	r1, [pc, #592]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f003 0302 	and.w	r3, r3, #2
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d00a      	beq.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004dd8:	4b8f      	ldr	r3, [pc, #572]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004dda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dde:	f023 020c 	bic.w	r2, r3, #12
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004de6:	498c      	ldr	r1, [pc, #560]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004de8:	4313      	orrs	r3, r2
 8004dea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f003 0304 	and.w	r3, r3, #4
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d00a      	beq.n	8004e10 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004dfa:	4b87      	ldr	r3, [pc, #540]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004dfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e00:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e08:	4983      	ldr	r1, [pc, #524]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f003 0308 	and.w	r3, r3, #8
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d00a      	beq.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004e1c:	4b7e      	ldr	r3, [pc, #504]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e22:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e2a:	497b      	ldr	r1, [pc, #492]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e2c:	4313      	orrs	r3, r2
 8004e2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f003 0310 	and.w	r3, r3, #16
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d00a      	beq.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004e3e:	4b76      	ldr	r3, [pc, #472]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e44:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e4c:	4972      	ldr	r1, [pc, #456]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e4e:	4313      	orrs	r3, r2
 8004e50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f003 0320 	and.w	r3, r3, #32
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d00a      	beq.n	8004e76 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004e60:	4b6d      	ldr	r3, [pc, #436]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e66:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e6e:	496a      	ldr	r1, [pc, #424]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e70:	4313      	orrs	r3, r2
 8004e72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d00a      	beq.n	8004e98 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004e82:	4b65      	ldr	r3, [pc, #404]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e88:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e90:	4961      	ldr	r1, [pc, #388]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e92:	4313      	orrs	r3, r2
 8004e94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d00a      	beq.n	8004eba <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004ea4:	4b5c      	ldr	r3, [pc, #368]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ea6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004eaa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004eb2:	4959      	ldr	r1, [pc, #356]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004eb4:	4313      	orrs	r3, r2
 8004eb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d00a      	beq.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004ec6:	4b54      	ldr	r3, [pc, #336]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ec8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ecc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ed4:	4950      	ldr	r1, [pc, #320]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d00a      	beq.n	8004efe <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004ee8:	4b4b      	ldr	r3, [pc, #300]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004eea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004eee:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ef6:	4948      	ldr	r1, [pc, #288]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d00a      	beq.n	8004f20 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004f0a:	4b43      	ldr	r3, [pc, #268]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f10:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f18:	493f      	ldr	r1, [pc, #252]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f1a:	4313      	orrs	r3, r2
 8004f1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d028      	beq.n	8004f7e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004f2c:	4b3a      	ldr	r3, [pc, #232]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f32:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f3a:	4937      	ldr	r1, [pc, #220]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f3c:	4313      	orrs	r3, r2
 8004f3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f46:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f4a:	d106      	bne.n	8004f5a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f4c:	4b32      	ldr	r3, [pc, #200]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f4e:	68db      	ldr	r3, [r3, #12]
 8004f50:	4a31      	ldr	r2, [pc, #196]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f52:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f56:	60d3      	str	r3, [r2, #12]
 8004f58:	e011      	b.n	8004f7e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f5e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004f62:	d10c      	bne.n	8004f7e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	3304      	adds	r3, #4
 8004f68:	2101      	movs	r1, #1
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	f000 f8c8 	bl	8005100 <RCCEx_PLLSAI1_Config>
 8004f70:	4603      	mov	r3, r0
 8004f72:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004f74:	7cfb      	ldrb	r3, [r7, #19]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d001      	beq.n	8004f7e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004f7a:	7cfb      	ldrb	r3, [r7, #19]
 8004f7c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d028      	beq.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004f8a:	4b23      	ldr	r3, [pc, #140]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f90:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f98:	491f      	ldr	r1, [pc, #124]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f9a:	4313      	orrs	r3, r2
 8004f9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fa4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004fa8:	d106      	bne.n	8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004faa:	4b1b      	ldr	r3, [pc, #108]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fac:	68db      	ldr	r3, [r3, #12]
 8004fae:	4a1a      	ldr	r2, [pc, #104]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fb0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004fb4:	60d3      	str	r3, [r2, #12]
 8004fb6:	e011      	b.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fbc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004fc0:	d10c      	bne.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	3304      	adds	r3, #4
 8004fc6:	2101      	movs	r1, #1
 8004fc8:	4618      	mov	r0, r3
 8004fca:	f000 f899 	bl	8005100 <RCCEx_PLLSAI1_Config>
 8004fce:	4603      	mov	r3, r0
 8004fd0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004fd2:	7cfb      	ldrb	r3, [r7, #19]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d001      	beq.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004fd8:	7cfb      	ldrb	r3, [r7, #19]
 8004fda:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d02b      	beq.n	8005040 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004fe8:	4b0b      	ldr	r3, [pc, #44]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fee:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ff6:	4908      	ldr	r1, [pc, #32]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ff8:	4313      	orrs	r3, r2
 8004ffa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005002:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005006:	d109      	bne.n	800501c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005008:	4b03      	ldr	r3, [pc, #12]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800500a:	68db      	ldr	r3, [r3, #12]
 800500c:	4a02      	ldr	r2, [pc, #8]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800500e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005012:	60d3      	str	r3, [r2, #12]
 8005014:	e014      	b.n	8005040 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8005016:	bf00      	nop
 8005018:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005020:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005024:	d10c      	bne.n	8005040 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	3304      	adds	r3, #4
 800502a:	2101      	movs	r1, #1
 800502c:	4618      	mov	r0, r3
 800502e:	f000 f867 	bl	8005100 <RCCEx_PLLSAI1_Config>
 8005032:	4603      	mov	r3, r0
 8005034:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005036:	7cfb      	ldrb	r3, [r7, #19]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d001      	beq.n	8005040 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800503c:	7cfb      	ldrb	r3, [r7, #19]
 800503e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005048:	2b00      	cmp	r3, #0
 800504a:	d02f      	beq.n	80050ac <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800504c:	4b2b      	ldr	r3, [pc, #172]	; (80050fc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800504e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005052:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800505a:	4928      	ldr	r1, [pc, #160]	; (80050fc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800505c:	4313      	orrs	r3, r2
 800505e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005066:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800506a:	d10d      	bne.n	8005088 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	3304      	adds	r3, #4
 8005070:	2102      	movs	r1, #2
 8005072:	4618      	mov	r0, r3
 8005074:	f000 f844 	bl	8005100 <RCCEx_PLLSAI1_Config>
 8005078:	4603      	mov	r3, r0
 800507a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800507c:	7cfb      	ldrb	r3, [r7, #19]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d014      	beq.n	80050ac <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005082:	7cfb      	ldrb	r3, [r7, #19]
 8005084:	74bb      	strb	r3, [r7, #18]
 8005086:	e011      	b.n	80050ac <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800508c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005090:	d10c      	bne.n	80050ac <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	3320      	adds	r3, #32
 8005096:	2102      	movs	r1, #2
 8005098:	4618      	mov	r0, r3
 800509a:	f000 f925 	bl	80052e8 <RCCEx_PLLSAI2_Config>
 800509e:	4603      	mov	r3, r0
 80050a0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80050a2:	7cfb      	ldrb	r3, [r7, #19]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d001      	beq.n	80050ac <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80050a8:	7cfb      	ldrb	r3, [r7, #19]
 80050aa:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d00a      	beq.n	80050ce <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80050b8:	4b10      	ldr	r3, [pc, #64]	; (80050fc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80050ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050be:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80050c6:	490d      	ldr	r1, [pc, #52]	; (80050fc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80050c8:	4313      	orrs	r3, r2
 80050ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d00b      	beq.n	80050f2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80050da:	4b08      	ldr	r3, [pc, #32]	; (80050fc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80050dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050e0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80050ea:	4904      	ldr	r1, [pc, #16]	; (80050fc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80050ec:	4313      	orrs	r3, r2
 80050ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80050f2:	7cbb      	ldrb	r3, [r7, #18]
}
 80050f4:	4618      	mov	r0, r3
 80050f6:	3718      	adds	r7, #24
 80050f8:	46bd      	mov	sp, r7
 80050fa:	bd80      	pop	{r7, pc}
 80050fc:	40021000 	.word	0x40021000

08005100 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b084      	sub	sp, #16
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
 8005108:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800510a:	2300      	movs	r3, #0
 800510c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800510e:	4b75      	ldr	r3, [pc, #468]	; (80052e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005110:	68db      	ldr	r3, [r3, #12]
 8005112:	f003 0303 	and.w	r3, r3, #3
 8005116:	2b00      	cmp	r3, #0
 8005118:	d018      	beq.n	800514c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800511a:	4b72      	ldr	r3, [pc, #456]	; (80052e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800511c:	68db      	ldr	r3, [r3, #12]
 800511e:	f003 0203 	and.w	r2, r3, #3
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	429a      	cmp	r2, r3
 8005128:	d10d      	bne.n	8005146 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
       ||
 800512e:	2b00      	cmp	r3, #0
 8005130:	d009      	beq.n	8005146 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005132:	4b6c      	ldr	r3, [pc, #432]	; (80052e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005134:	68db      	ldr	r3, [r3, #12]
 8005136:	091b      	lsrs	r3, r3, #4
 8005138:	f003 0307 	and.w	r3, r3, #7
 800513c:	1c5a      	adds	r2, r3, #1
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	685b      	ldr	r3, [r3, #4]
       ||
 8005142:	429a      	cmp	r2, r3
 8005144:	d047      	beq.n	80051d6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005146:	2301      	movs	r3, #1
 8005148:	73fb      	strb	r3, [r7, #15]
 800514a:	e044      	b.n	80051d6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	2b03      	cmp	r3, #3
 8005152:	d018      	beq.n	8005186 <RCCEx_PLLSAI1_Config+0x86>
 8005154:	2b03      	cmp	r3, #3
 8005156:	d825      	bhi.n	80051a4 <RCCEx_PLLSAI1_Config+0xa4>
 8005158:	2b01      	cmp	r3, #1
 800515a:	d002      	beq.n	8005162 <RCCEx_PLLSAI1_Config+0x62>
 800515c:	2b02      	cmp	r3, #2
 800515e:	d009      	beq.n	8005174 <RCCEx_PLLSAI1_Config+0x74>
 8005160:	e020      	b.n	80051a4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005162:	4b60      	ldr	r3, [pc, #384]	; (80052e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f003 0302 	and.w	r3, r3, #2
 800516a:	2b00      	cmp	r3, #0
 800516c:	d11d      	bne.n	80051aa <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800516e:	2301      	movs	r3, #1
 8005170:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005172:	e01a      	b.n	80051aa <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005174:	4b5b      	ldr	r3, [pc, #364]	; (80052e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800517c:	2b00      	cmp	r3, #0
 800517e:	d116      	bne.n	80051ae <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005180:	2301      	movs	r3, #1
 8005182:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005184:	e013      	b.n	80051ae <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005186:	4b57      	ldr	r3, [pc, #348]	; (80052e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800518e:	2b00      	cmp	r3, #0
 8005190:	d10f      	bne.n	80051b2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005192:	4b54      	ldr	r3, [pc, #336]	; (80052e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800519a:	2b00      	cmp	r3, #0
 800519c:	d109      	bne.n	80051b2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800519e:	2301      	movs	r3, #1
 80051a0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80051a2:	e006      	b.n	80051b2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80051a4:	2301      	movs	r3, #1
 80051a6:	73fb      	strb	r3, [r7, #15]
      break;
 80051a8:	e004      	b.n	80051b4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80051aa:	bf00      	nop
 80051ac:	e002      	b.n	80051b4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80051ae:	bf00      	nop
 80051b0:	e000      	b.n	80051b4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80051b2:	bf00      	nop
    }

    if(status == HAL_OK)
 80051b4:	7bfb      	ldrb	r3, [r7, #15]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d10d      	bne.n	80051d6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80051ba:	4b4a      	ldr	r3, [pc, #296]	; (80052e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80051bc:	68db      	ldr	r3, [r3, #12]
 80051be:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6819      	ldr	r1, [r3, #0]
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	685b      	ldr	r3, [r3, #4]
 80051ca:	3b01      	subs	r3, #1
 80051cc:	011b      	lsls	r3, r3, #4
 80051ce:	430b      	orrs	r3, r1
 80051d0:	4944      	ldr	r1, [pc, #272]	; (80052e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80051d2:	4313      	orrs	r3, r2
 80051d4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80051d6:	7bfb      	ldrb	r3, [r7, #15]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d17d      	bne.n	80052d8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80051dc:	4b41      	ldr	r3, [pc, #260]	; (80052e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4a40      	ldr	r2, [pc, #256]	; (80052e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80051e2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80051e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051e8:	f7fc fe02 	bl	8001df0 <HAL_GetTick>
 80051ec:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80051ee:	e009      	b.n	8005204 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80051f0:	f7fc fdfe 	bl	8001df0 <HAL_GetTick>
 80051f4:	4602      	mov	r2, r0
 80051f6:	68bb      	ldr	r3, [r7, #8]
 80051f8:	1ad3      	subs	r3, r2, r3
 80051fa:	2b02      	cmp	r3, #2
 80051fc:	d902      	bls.n	8005204 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80051fe:	2303      	movs	r3, #3
 8005200:	73fb      	strb	r3, [r7, #15]
        break;
 8005202:	e005      	b.n	8005210 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005204:	4b37      	ldr	r3, [pc, #220]	; (80052e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800520c:	2b00      	cmp	r3, #0
 800520e:	d1ef      	bne.n	80051f0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005210:	7bfb      	ldrb	r3, [r7, #15]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d160      	bne.n	80052d8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d111      	bne.n	8005240 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800521c:	4b31      	ldr	r3, [pc, #196]	; (80052e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800521e:	691b      	ldr	r3, [r3, #16]
 8005220:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005224:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005228:	687a      	ldr	r2, [r7, #4]
 800522a:	6892      	ldr	r2, [r2, #8]
 800522c:	0211      	lsls	r1, r2, #8
 800522e:	687a      	ldr	r2, [r7, #4]
 8005230:	68d2      	ldr	r2, [r2, #12]
 8005232:	0912      	lsrs	r2, r2, #4
 8005234:	0452      	lsls	r2, r2, #17
 8005236:	430a      	orrs	r2, r1
 8005238:	492a      	ldr	r1, [pc, #168]	; (80052e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800523a:	4313      	orrs	r3, r2
 800523c:	610b      	str	r3, [r1, #16]
 800523e:	e027      	b.n	8005290 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	2b01      	cmp	r3, #1
 8005244:	d112      	bne.n	800526c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005246:	4b27      	ldr	r3, [pc, #156]	; (80052e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005248:	691b      	ldr	r3, [r3, #16]
 800524a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800524e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005252:	687a      	ldr	r2, [r7, #4]
 8005254:	6892      	ldr	r2, [r2, #8]
 8005256:	0211      	lsls	r1, r2, #8
 8005258:	687a      	ldr	r2, [r7, #4]
 800525a:	6912      	ldr	r2, [r2, #16]
 800525c:	0852      	lsrs	r2, r2, #1
 800525e:	3a01      	subs	r2, #1
 8005260:	0552      	lsls	r2, r2, #21
 8005262:	430a      	orrs	r2, r1
 8005264:	491f      	ldr	r1, [pc, #124]	; (80052e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005266:	4313      	orrs	r3, r2
 8005268:	610b      	str	r3, [r1, #16]
 800526a:	e011      	b.n	8005290 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800526c:	4b1d      	ldr	r3, [pc, #116]	; (80052e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800526e:	691b      	ldr	r3, [r3, #16]
 8005270:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005274:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005278:	687a      	ldr	r2, [r7, #4]
 800527a:	6892      	ldr	r2, [r2, #8]
 800527c:	0211      	lsls	r1, r2, #8
 800527e:	687a      	ldr	r2, [r7, #4]
 8005280:	6952      	ldr	r2, [r2, #20]
 8005282:	0852      	lsrs	r2, r2, #1
 8005284:	3a01      	subs	r2, #1
 8005286:	0652      	lsls	r2, r2, #25
 8005288:	430a      	orrs	r2, r1
 800528a:	4916      	ldr	r1, [pc, #88]	; (80052e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800528c:	4313      	orrs	r3, r2
 800528e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005290:	4b14      	ldr	r3, [pc, #80]	; (80052e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	4a13      	ldr	r2, [pc, #76]	; (80052e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005296:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800529a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800529c:	f7fc fda8 	bl	8001df0 <HAL_GetTick>
 80052a0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80052a2:	e009      	b.n	80052b8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80052a4:	f7fc fda4 	bl	8001df0 <HAL_GetTick>
 80052a8:	4602      	mov	r2, r0
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	1ad3      	subs	r3, r2, r3
 80052ae:	2b02      	cmp	r3, #2
 80052b0:	d902      	bls.n	80052b8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80052b2:	2303      	movs	r3, #3
 80052b4:	73fb      	strb	r3, [r7, #15]
          break;
 80052b6:	e005      	b.n	80052c4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80052b8:	4b0a      	ldr	r3, [pc, #40]	; (80052e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d0ef      	beq.n	80052a4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80052c4:	7bfb      	ldrb	r3, [r7, #15]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d106      	bne.n	80052d8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80052ca:	4b06      	ldr	r3, [pc, #24]	; (80052e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80052cc:	691a      	ldr	r2, [r3, #16]
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	699b      	ldr	r3, [r3, #24]
 80052d2:	4904      	ldr	r1, [pc, #16]	; (80052e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80052d4:	4313      	orrs	r3, r2
 80052d6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80052d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80052da:	4618      	mov	r0, r3
 80052dc:	3710      	adds	r7, #16
 80052de:	46bd      	mov	sp, r7
 80052e0:	bd80      	pop	{r7, pc}
 80052e2:	bf00      	nop
 80052e4:	40021000 	.word	0x40021000

080052e8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b084      	sub	sp, #16
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
 80052f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80052f2:	2300      	movs	r3, #0
 80052f4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80052f6:	4b6a      	ldr	r3, [pc, #424]	; (80054a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80052f8:	68db      	ldr	r3, [r3, #12]
 80052fa:	f003 0303 	and.w	r3, r3, #3
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d018      	beq.n	8005334 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005302:	4b67      	ldr	r3, [pc, #412]	; (80054a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005304:	68db      	ldr	r3, [r3, #12]
 8005306:	f003 0203 	and.w	r2, r3, #3
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	429a      	cmp	r2, r3
 8005310:	d10d      	bne.n	800532e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
       ||
 8005316:	2b00      	cmp	r3, #0
 8005318:	d009      	beq.n	800532e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800531a:	4b61      	ldr	r3, [pc, #388]	; (80054a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800531c:	68db      	ldr	r3, [r3, #12]
 800531e:	091b      	lsrs	r3, r3, #4
 8005320:	f003 0307 	and.w	r3, r3, #7
 8005324:	1c5a      	adds	r2, r3, #1
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	685b      	ldr	r3, [r3, #4]
       ||
 800532a:	429a      	cmp	r2, r3
 800532c:	d047      	beq.n	80053be <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800532e:	2301      	movs	r3, #1
 8005330:	73fb      	strb	r3, [r7, #15]
 8005332:	e044      	b.n	80053be <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	2b03      	cmp	r3, #3
 800533a:	d018      	beq.n	800536e <RCCEx_PLLSAI2_Config+0x86>
 800533c:	2b03      	cmp	r3, #3
 800533e:	d825      	bhi.n	800538c <RCCEx_PLLSAI2_Config+0xa4>
 8005340:	2b01      	cmp	r3, #1
 8005342:	d002      	beq.n	800534a <RCCEx_PLLSAI2_Config+0x62>
 8005344:	2b02      	cmp	r3, #2
 8005346:	d009      	beq.n	800535c <RCCEx_PLLSAI2_Config+0x74>
 8005348:	e020      	b.n	800538c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800534a:	4b55      	ldr	r3, [pc, #340]	; (80054a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f003 0302 	and.w	r3, r3, #2
 8005352:	2b00      	cmp	r3, #0
 8005354:	d11d      	bne.n	8005392 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8005356:	2301      	movs	r3, #1
 8005358:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800535a:	e01a      	b.n	8005392 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800535c:	4b50      	ldr	r3, [pc, #320]	; (80054a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005364:	2b00      	cmp	r3, #0
 8005366:	d116      	bne.n	8005396 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005368:	2301      	movs	r3, #1
 800536a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800536c:	e013      	b.n	8005396 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800536e:	4b4c      	ldr	r3, [pc, #304]	; (80054a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005376:	2b00      	cmp	r3, #0
 8005378:	d10f      	bne.n	800539a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800537a:	4b49      	ldr	r3, [pc, #292]	; (80054a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005382:	2b00      	cmp	r3, #0
 8005384:	d109      	bne.n	800539a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8005386:	2301      	movs	r3, #1
 8005388:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800538a:	e006      	b.n	800539a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800538c:	2301      	movs	r3, #1
 800538e:	73fb      	strb	r3, [r7, #15]
      break;
 8005390:	e004      	b.n	800539c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005392:	bf00      	nop
 8005394:	e002      	b.n	800539c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005396:	bf00      	nop
 8005398:	e000      	b.n	800539c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800539a:	bf00      	nop
    }

    if(status == HAL_OK)
 800539c:	7bfb      	ldrb	r3, [r7, #15]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d10d      	bne.n	80053be <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80053a2:	4b3f      	ldr	r3, [pc, #252]	; (80054a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80053a4:	68db      	ldr	r3, [r3, #12]
 80053a6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6819      	ldr	r1, [r3, #0]
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	685b      	ldr	r3, [r3, #4]
 80053b2:	3b01      	subs	r3, #1
 80053b4:	011b      	lsls	r3, r3, #4
 80053b6:	430b      	orrs	r3, r1
 80053b8:	4939      	ldr	r1, [pc, #228]	; (80054a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80053ba:	4313      	orrs	r3, r2
 80053bc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80053be:	7bfb      	ldrb	r3, [r7, #15]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d167      	bne.n	8005494 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80053c4:	4b36      	ldr	r3, [pc, #216]	; (80054a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4a35      	ldr	r2, [pc, #212]	; (80054a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80053ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80053ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80053d0:	f7fc fd0e 	bl	8001df0 <HAL_GetTick>
 80053d4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80053d6:	e009      	b.n	80053ec <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80053d8:	f7fc fd0a 	bl	8001df0 <HAL_GetTick>
 80053dc:	4602      	mov	r2, r0
 80053de:	68bb      	ldr	r3, [r7, #8]
 80053e0:	1ad3      	subs	r3, r2, r3
 80053e2:	2b02      	cmp	r3, #2
 80053e4:	d902      	bls.n	80053ec <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80053e6:	2303      	movs	r3, #3
 80053e8:	73fb      	strb	r3, [r7, #15]
        break;
 80053ea:	e005      	b.n	80053f8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80053ec:	4b2c      	ldr	r3, [pc, #176]	; (80054a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d1ef      	bne.n	80053d8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80053f8:	7bfb      	ldrb	r3, [r7, #15]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d14a      	bne.n	8005494 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d111      	bne.n	8005428 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005404:	4b26      	ldr	r3, [pc, #152]	; (80054a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005406:	695b      	ldr	r3, [r3, #20]
 8005408:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800540c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005410:	687a      	ldr	r2, [r7, #4]
 8005412:	6892      	ldr	r2, [r2, #8]
 8005414:	0211      	lsls	r1, r2, #8
 8005416:	687a      	ldr	r2, [r7, #4]
 8005418:	68d2      	ldr	r2, [r2, #12]
 800541a:	0912      	lsrs	r2, r2, #4
 800541c:	0452      	lsls	r2, r2, #17
 800541e:	430a      	orrs	r2, r1
 8005420:	491f      	ldr	r1, [pc, #124]	; (80054a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005422:	4313      	orrs	r3, r2
 8005424:	614b      	str	r3, [r1, #20]
 8005426:	e011      	b.n	800544c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005428:	4b1d      	ldr	r3, [pc, #116]	; (80054a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800542a:	695b      	ldr	r3, [r3, #20]
 800542c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005430:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005434:	687a      	ldr	r2, [r7, #4]
 8005436:	6892      	ldr	r2, [r2, #8]
 8005438:	0211      	lsls	r1, r2, #8
 800543a:	687a      	ldr	r2, [r7, #4]
 800543c:	6912      	ldr	r2, [r2, #16]
 800543e:	0852      	lsrs	r2, r2, #1
 8005440:	3a01      	subs	r2, #1
 8005442:	0652      	lsls	r2, r2, #25
 8005444:	430a      	orrs	r2, r1
 8005446:	4916      	ldr	r1, [pc, #88]	; (80054a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005448:	4313      	orrs	r3, r2
 800544a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800544c:	4b14      	ldr	r3, [pc, #80]	; (80054a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4a13      	ldr	r2, [pc, #76]	; (80054a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005452:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005456:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005458:	f7fc fcca 	bl	8001df0 <HAL_GetTick>
 800545c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800545e:	e009      	b.n	8005474 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005460:	f7fc fcc6 	bl	8001df0 <HAL_GetTick>
 8005464:	4602      	mov	r2, r0
 8005466:	68bb      	ldr	r3, [r7, #8]
 8005468:	1ad3      	subs	r3, r2, r3
 800546a:	2b02      	cmp	r3, #2
 800546c:	d902      	bls.n	8005474 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800546e:	2303      	movs	r3, #3
 8005470:	73fb      	strb	r3, [r7, #15]
          break;
 8005472:	e005      	b.n	8005480 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005474:	4b0a      	ldr	r3, [pc, #40]	; (80054a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800547c:	2b00      	cmp	r3, #0
 800547e:	d0ef      	beq.n	8005460 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005480:	7bfb      	ldrb	r3, [r7, #15]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d106      	bne.n	8005494 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005486:	4b06      	ldr	r3, [pc, #24]	; (80054a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005488:	695a      	ldr	r2, [r3, #20]
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	695b      	ldr	r3, [r3, #20]
 800548e:	4904      	ldr	r1, [pc, #16]	; (80054a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005490:	4313      	orrs	r3, r2
 8005492:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005494:	7bfb      	ldrb	r3, [r7, #15]
}
 8005496:	4618      	mov	r0, r3
 8005498:	3710      	adds	r7, #16
 800549a:	46bd      	mov	sp, r7
 800549c:	bd80      	pop	{r7, pc}
 800549e:	bf00      	nop
 80054a0:	40021000 	.word	0x40021000

080054a4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b084      	sub	sp, #16
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d101      	bne.n	80054b6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80054b2:	2301      	movs	r3, #1
 80054b4:	e095      	b.n	80055e2 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d108      	bne.n	80054d0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	685b      	ldr	r3, [r3, #4]
 80054c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80054c6:	d009      	beq.n	80054dc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2200      	movs	r2, #0
 80054cc:	61da      	str	r2, [r3, #28]
 80054ce:	e005      	b.n	80054dc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2200      	movs	r2, #0
 80054d4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2200      	movs	r2, #0
 80054da:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2200      	movs	r2, #0
 80054e0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80054e8:	b2db      	uxtb	r3, r3
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d106      	bne.n	80054fc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2200      	movs	r2, #0
 80054f2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80054f6:	6878      	ldr	r0, [r7, #4]
 80054f8:	f7fc f942 	bl	8001780 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2202      	movs	r2, #2
 8005500:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	681a      	ldr	r2, [r3, #0]
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005512:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	68db      	ldr	r3, [r3, #12]
 8005518:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800551c:	d902      	bls.n	8005524 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800551e:	2300      	movs	r3, #0
 8005520:	60fb      	str	r3, [r7, #12]
 8005522:	e002      	b.n	800552a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005524:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005528:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	68db      	ldr	r3, [r3, #12]
 800552e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005532:	d007      	beq.n	8005544 <HAL_SPI_Init+0xa0>
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	68db      	ldr	r3, [r3, #12]
 8005538:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800553c:	d002      	beq.n	8005544 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2200      	movs	r2, #0
 8005542:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	685b      	ldr	r3, [r3, #4]
 8005548:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	689b      	ldr	r3, [r3, #8]
 8005550:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005554:	431a      	orrs	r2, r3
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	691b      	ldr	r3, [r3, #16]
 800555a:	f003 0302 	and.w	r3, r3, #2
 800555e:	431a      	orrs	r2, r3
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	695b      	ldr	r3, [r3, #20]
 8005564:	f003 0301 	and.w	r3, r3, #1
 8005568:	431a      	orrs	r2, r3
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	699b      	ldr	r3, [r3, #24]
 800556e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005572:	431a      	orrs	r2, r3
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	69db      	ldr	r3, [r3, #28]
 8005578:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800557c:	431a      	orrs	r2, r3
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6a1b      	ldr	r3, [r3, #32]
 8005582:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005586:	ea42 0103 	orr.w	r1, r2, r3
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800558e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	430a      	orrs	r2, r1
 8005598:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	699b      	ldr	r3, [r3, #24]
 800559e:	0c1b      	lsrs	r3, r3, #16
 80055a0:	f003 0204 	and.w	r2, r3, #4
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055a8:	f003 0310 	and.w	r3, r3, #16
 80055ac:	431a      	orrs	r2, r3
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055b2:	f003 0308 	and.w	r3, r3, #8
 80055b6:	431a      	orrs	r2, r3
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	68db      	ldr	r3, [r3, #12]
 80055bc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80055c0:	ea42 0103 	orr.w	r1, r2, r3
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	430a      	orrs	r2, r1
 80055d0:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2200      	movs	r2, #0
 80055d6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2201      	movs	r2, #1
 80055dc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80055e0:	2300      	movs	r3, #0
}
 80055e2:	4618      	mov	r0, r3
 80055e4:	3710      	adds	r7, #16
 80055e6:	46bd      	mov	sp, r7
 80055e8:	bd80      	pop	{r7, pc}

080055ea <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055ea:	b580      	push	{r7, lr}
 80055ec:	b088      	sub	sp, #32
 80055ee:	af00      	add	r7, sp, #0
 80055f0:	60f8      	str	r0, [r7, #12]
 80055f2:	60b9      	str	r1, [r7, #8]
 80055f4:	603b      	str	r3, [r7, #0]
 80055f6:	4613      	mov	r3, r2
 80055f8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80055fa:	2300      	movs	r3, #0
 80055fc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005604:	2b01      	cmp	r3, #1
 8005606:	d101      	bne.n	800560c <HAL_SPI_Transmit+0x22>
 8005608:	2302      	movs	r3, #2
 800560a:	e158      	b.n	80058be <HAL_SPI_Transmit+0x2d4>
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	2201      	movs	r2, #1
 8005610:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005614:	f7fc fbec 	bl	8001df0 <HAL_GetTick>
 8005618:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800561a:	88fb      	ldrh	r3, [r7, #6]
 800561c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005624:	b2db      	uxtb	r3, r3
 8005626:	2b01      	cmp	r3, #1
 8005628:	d002      	beq.n	8005630 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800562a:	2302      	movs	r3, #2
 800562c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800562e:	e13d      	b.n	80058ac <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8005630:	68bb      	ldr	r3, [r7, #8]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d002      	beq.n	800563c <HAL_SPI_Transmit+0x52>
 8005636:	88fb      	ldrh	r3, [r7, #6]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d102      	bne.n	8005642 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800563c:	2301      	movs	r3, #1
 800563e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005640:	e134      	b.n	80058ac <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	2203      	movs	r2, #3
 8005646:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	2200      	movs	r2, #0
 800564e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	68ba      	ldr	r2, [r7, #8]
 8005654:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	88fa      	ldrh	r2, [r7, #6]
 800565a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	88fa      	ldrh	r2, [r7, #6]
 8005660:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	2200      	movs	r2, #0
 8005666:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	2200      	movs	r2, #0
 800566c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	2200      	movs	r2, #0
 8005674:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	2200      	movs	r2, #0
 800567c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	2200      	movs	r2, #0
 8005682:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	689b      	ldr	r3, [r3, #8]
 8005688:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800568c:	d10f      	bne.n	80056ae <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	681a      	ldr	r2, [r3, #0]
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800569c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	681a      	ldr	r2, [r3, #0]
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80056ac:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056b8:	2b40      	cmp	r3, #64	; 0x40
 80056ba:	d007      	beq.n	80056cc <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	681a      	ldr	r2, [r3, #0]
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80056ca:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	68db      	ldr	r3, [r3, #12]
 80056d0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80056d4:	d94b      	bls.n	800576e <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	685b      	ldr	r3, [r3, #4]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d002      	beq.n	80056e4 <HAL_SPI_Transmit+0xfa>
 80056de:	8afb      	ldrh	r3, [r7, #22]
 80056e0:	2b01      	cmp	r3, #1
 80056e2:	d13e      	bne.n	8005762 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056e8:	881a      	ldrh	r2, [r3, #0]
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056f4:	1c9a      	adds	r2, r3, #2
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056fe:	b29b      	uxth	r3, r3
 8005700:	3b01      	subs	r3, #1
 8005702:	b29a      	uxth	r2, r3
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005708:	e02b      	b.n	8005762 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	689b      	ldr	r3, [r3, #8]
 8005710:	f003 0302 	and.w	r3, r3, #2
 8005714:	2b02      	cmp	r3, #2
 8005716:	d112      	bne.n	800573e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800571c:	881a      	ldrh	r2, [r3, #0]
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005728:	1c9a      	adds	r2, r3, #2
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005732:	b29b      	uxth	r3, r3
 8005734:	3b01      	subs	r3, #1
 8005736:	b29a      	uxth	r2, r3
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800573c:	e011      	b.n	8005762 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800573e:	f7fc fb57 	bl	8001df0 <HAL_GetTick>
 8005742:	4602      	mov	r2, r0
 8005744:	69bb      	ldr	r3, [r7, #24]
 8005746:	1ad3      	subs	r3, r2, r3
 8005748:	683a      	ldr	r2, [r7, #0]
 800574a:	429a      	cmp	r2, r3
 800574c:	d803      	bhi.n	8005756 <HAL_SPI_Transmit+0x16c>
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005754:	d102      	bne.n	800575c <HAL_SPI_Transmit+0x172>
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d102      	bne.n	8005762 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 800575c:	2303      	movs	r3, #3
 800575e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005760:	e0a4      	b.n	80058ac <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005766:	b29b      	uxth	r3, r3
 8005768:	2b00      	cmp	r3, #0
 800576a:	d1ce      	bne.n	800570a <HAL_SPI_Transmit+0x120>
 800576c:	e07c      	b.n	8005868 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	685b      	ldr	r3, [r3, #4]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d002      	beq.n	800577c <HAL_SPI_Transmit+0x192>
 8005776:	8afb      	ldrh	r3, [r7, #22]
 8005778:	2b01      	cmp	r3, #1
 800577a:	d170      	bne.n	800585e <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005780:	b29b      	uxth	r3, r3
 8005782:	2b01      	cmp	r3, #1
 8005784:	d912      	bls.n	80057ac <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800578a:	881a      	ldrh	r2, [r3, #0]
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005796:	1c9a      	adds	r2, r3, #2
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057a0:	b29b      	uxth	r3, r3
 80057a2:	3b02      	subs	r3, #2
 80057a4:	b29a      	uxth	r2, r3
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80057aa:	e058      	b.n	800585e <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	330c      	adds	r3, #12
 80057b6:	7812      	ldrb	r2, [r2, #0]
 80057b8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057be:	1c5a      	adds	r2, r3, #1
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057c8:	b29b      	uxth	r3, r3
 80057ca:	3b01      	subs	r3, #1
 80057cc:	b29a      	uxth	r2, r3
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80057d2:	e044      	b.n	800585e <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	689b      	ldr	r3, [r3, #8]
 80057da:	f003 0302 	and.w	r3, r3, #2
 80057de:	2b02      	cmp	r3, #2
 80057e0:	d12b      	bne.n	800583a <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057e6:	b29b      	uxth	r3, r3
 80057e8:	2b01      	cmp	r3, #1
 80057ea:	d912      	bls.n	8005812 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057f0:	881a      	ldrh	r2, [r3, #0]
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057fc:	1c9a      	adds	r2, r3, #2
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005806:	b29b      	uxth	r3, r3
 8005808:	3b02      	subs	r3, #2
 800580a:	b29a      	uxth	r2, r3
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005810:	e025      	b.n	800585e <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	330c      	adds	r3, #12
 800581c:	7812      	ldrb	r2, [r2, #0]
 800581e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005824:	1c5a      	adds	r2, r3, #1
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800582e:	b29b      	uxth	r3, r3
 8005830:	3b01      	subs	r3, #1
 8005832:	b29a      	uxth	r2, r3
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005838:	e011      	b.n	800585e <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800583a:	f7fc fad9 	bl	8001df0 <HAL_GetTick>
 800583e:	4602      	mov	r2, r0
 8005840:	69bb      	ldr	r3, [r7, #24]
 8005842:	1ad3      	subs	r3, r2, r3
 8005844:	683a      	ldr	r2, [r7, #0]
 8005846:	429a      	cmp	r2, r3
 8005848:	d803      	bhi.n	8005852 <HAL_SPI_Transmit+0x268>
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005850:	d102      	bne.n	8005858 <HAL_SPI_Transmit+0x26e>
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d102      	bne.n	800585e <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8005858:	2303      	movs	r3, #3
 800585a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800585c:	e026      	b.n	80058ac <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005862:	b29b      	uxth	r3, r3
 8005864:	2b00      	cmp	r3, #0
 8005866:	d1b5      	bne.n	80057d4 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005868:	69ba      	ldr	r2, [r7, #24]
 800586a:	6839      	ldr	r1, [r7, #0]
 800586c:	68f8      	ldr	r0, [r7, #12]
 800586e:	f000 f949 	bl	8005b04 <SPI_EndRxTxTransaction>
 8005872:	4603      	mov	r3, r0
 8005874:	2b00      	cmp	r3, #0
 8005876:	d002      	beq.n	800587e <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	2220      	movs	r2, #32
 800587c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	689b      	ldr	r3, [r3, #8]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d10a      	bne.n	800589c <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005886:	2300      	movs	r3, #0
 8005888:	613b      	str	r3, [r7, #16]
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	68db      	ldr	r3, [r3, #12]
 8005890:	613b      	str	r3, [r7, #16]
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	689b      	ldr	r3, [r3, #8]
 8005898:	613b      	str	r3, [r7, #16]
 800589a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d002      	beq.n	80058aa <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 80058a4:	2301      	movs	r3, #1
 80058a6:	77fb      	strb	r3, [r7, #31]
 80058a8:	e000      	b.n	80058ac <HAL_SPI_Transmit+0x2c2>
  }

error:
 80058aa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	2201      	movs	r2, #1
 80058b0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	2200      	movs	r2, #0
 80058b8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80058bc:	7ffb      	ldrb	r3, [r7, #31]
}
 80058be:	4618      	mov	r0, r3
 80058c0:	3720      	adds	r7, #32
 80058c2:	46bd      	mov	sp, r7
 80058c4:	bd80      	pop	{r7, pc}
	...

080058c8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b088      	sub	sp, #32
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	60f8      	str	r0, [r7, #12]
 80058d0:	60b9      	str	r1, [r7, #8]
 80058d2:	603b      	str	r3, [r7, #0]
 80058d4:	4613      	mov	r3, r2
 80058d6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80058d8:	f7fc fa8a 	bl	8001df0 <HAL_GetTick>
 80058dc:	4602      	mov	r2, r0
 80058de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058e0:	1a9b      	subs	r3, r3, r2
 80058e2:	683a      	ldr	r2, [r7, #0]
 80058e4:	4413      	add	r3, r2
 80058e6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80058e8:	f7fc fa82 	bl	8001df0 <HAL_GetTick>
 80058ec:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80058ee:	4b39      	ldr	r3, [pc, #228]	; (80059d4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	015b      	lsls	r3, r3, #5
 80058f4:	0d1b      	lsrs	r3, r3, #20
 80058f6:	69fa      	ldr	r2, [r7, #28]
 80058f8:	fb02 f303 	mul.w	r3, r2, r3
 80058fc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80058fe:	e054      	b.n	80059aa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005906:	d050      	beq.n	80059aa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005908:	f7fc fa72 	bl	8001df0 <HAL_GetTick>
 800590c:	4602      	mov	r2, r0
 800590e:	69bb      	ldr	r3, [r7, #24]
 8005910:	1ad3      	subs	r3, r2, r3
 8005912:	69fa      	ldr	r2, [r7, #28]
 8005914:	429a      	cmp	r2, r3
 8005916:	d902      	bls.n	800591e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005918:	69fb      	ldr	r3, [r7, #28]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d13d      	bne.n	800599a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	685a      	ldr	r2, [r3, #4]
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800592c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	685b      	ldr	r3, [r3, #4]
 8005932:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005936:	d111      	bne.n	800595c <SPI_WaitFlagStateUntilTimeout+0x94>
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	689b      	ldr	r3, [r3, #8]
 800593c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005940:	d004      	beq.n	800594c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	689b      	ldr	r3, [r3, #8]
 8005946:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800594a:	d107      	bne.n	800595c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	681a      	ldr	r2, [r3, #0]
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800595a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005960:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005964:	d10f      	bne.n	8005986 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	681a      	ldr	r2, [r3, #0]
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005974:	601a      	str	r2, [r3, #0]
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	681a      	ldr	r2, [r3, #0]
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005984:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	2201      	movs	r2, #1
 800598a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	2200      	movs	r2, #0
 8005992:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005996:	2303      	movs	r3, #3
 8005998:	e017      	b.n	80059ca <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800599a:	697b      	ldr	r3, [r7, #20]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d101      	bne.n	80059a4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80059a0:	2300      	movs	r3, #0
 80059a2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80059a4:	697b      	ldr	r3, [r7, #20]
 80059a6:	3b01      	subs	r3, #1
 80059a8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	689a      	ldr	r2, [r3, #8]
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	4013      	ands	r3, r2
 80059b4:	68ba      	ldr	r2, [r7, #8]
 80059b6:	429a      	cmp	r2, r3
 80059b8:	bf0c      	ite	eq
 80059ba:	2301      	moveq	r3, #1
 80059bc:	2300      	movne	r3, #0
 80059be:	b2db      	uxtb	r3, r3
 80059c0:	461a      	mov	r2, r3
 80059c2:	79fb      	ldrb	r3, [r7, #7]
 80059c4:	429a      	cmp	r2, r3
 80059c6:	d19b      	bne.n	8005900 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80059c8:	2300      	movs	r3, #0
}
 80059ca:	4618      	mov	r0, r3
 80059cc:	3720      	adds	r7, #32
 80059ce:	46bd      	mov	sp, r7
 80059d0:	bd80      	pop	{r7, pc}
 80059d2:	bf00      	nop
 80059d4:	20000008 	.word	0x20000008

080059d8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b08a      	sub	sp, #40	; 0x28
 80059dc:	af00      	add	r7, sp, #0
 80059de:	60f8      	str	r0, [r7, #12]
 80059e0:	60b9      	str	r1, [r7, #8]
 80059e2:	607a      	str	r2, [r7, #4]
 80059e4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80059e6:	2300      	movs	r3, #0
 80059e8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80059ea:	f7fc fa01 	bl	8001df0 <HAL_GetTick>
 80059ee:	4602      	mov	r2, r0
 80059f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059f2:	1a9b      	subs	r3, r3, r2
 80059f4:	683a      	ldr	r2, [r7, #0]
 80059f6:	4413      	add	r3, r2
 80059f8:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80059fa:	f7fc f9f9 	bl	8001df0 <HAL_GetTick>
 80059fe:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	330c      	adds	r3, #12
 8005a06:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005a08:	4b3d      	ldr	r3, [pc, #244]	; (8005b00 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005a0a:	681a      	ldr	r2, [r3, #0]
 8005a0c:	4613      	mov	r3, r2
 8005a0e:	009b      	lsls	r3, r3, #2
 8005a10:	4413      	add	r3, r2
 8005a12:	00da      	lsls	r2, r3, #3
 8005a14:	1ad3      	subs	r3, r2, r3
 8005a16:	0d1b      	lsrs	r3, r3, #20
 8005a18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a1a:	fb02 f303 	mul.w	r3, r2, r3
 8005a1e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005a20:	e060      	b.n	8005ae4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005a22:	68bb      	ldr	r3, [r7, #8]
 8005a24:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005a28:	d107      	bne.n	8005a3a <SPI_WaitFifoStateUntilTimeout+0x62>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d104      	bne.n	8005a3a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005a30:	69fb      	ldr	r3, [r7, #28]
 8005a32:	781b      	ldrb	r3, [r3, #0]
 8005a34:	b2db      	uxtb	r3, r3
 8005a36:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005a38:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a40:	d050      	beq.n	8005ae4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005a42:	f7fc f9d5 	bl	8001df0 <HAL_GetTick>
 8005a46:	4602      	mov	r2, r0
 8005a48:	6a3b      	ldr	r3, [r7, #32]
 8005a4a:	1ad3      	subs	r3, r2, r3
 8005a4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a4e:	429a      	cmp	r2, r3
 8005a50:	d902      	bls.n	8005a58 <SPI_WaitFifoStateUntilTimeout+0x80>
 8005a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d13d      	bne.n	8005ad4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	685a      	ldr	r2, [r3, #4]
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005a66:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	685b      	ldr	r3, [r3, #4]
 8005a6c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a70:	d111      	bne.n	8005a96 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	689b      	ldr	r3, [r3, #8]
 8005a76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a7a:	d004      	beq.n	8005a86 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	689b      	ldr	r3, [r3, #8]
 8005a80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a84:	d107      	bne.n	8005a96 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	681a      	ldr	r2, [r3, #0]
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a94:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a9e:	d10f      	bne.n	8005ac0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	681a      	ldr	r2, [r3, #0]
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005aae:	601a      	str	r2, [r3, #0]
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	681a      	ldr	r2, [r3, #0]
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005abe:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	2201      	movs	r2, #1
 8005ac4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	2200      	movs	r2, #0
 8005acc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005ad0:	2303      	movs	r3, #3
 8005ad2:	e010      	b.n	8005af6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005ad4:	69bb      	ldr	r3, [r7, #24]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d101      	bne.n	8005ade <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8005ada:	2300      	movs	r3, #0
 8005adc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8005ade:	69bb      	ldr	r3, [r7, #24]
 8005ae0:	3b01      	subs	r3, #1
 8005ae2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	689a      	ldr	r2, [r3, #8]
 8005aea:	68bb      	ldr	r3, [r7, #8]
 8005aec:	4013      	ands	r3, r2
 8005aee:	687a      	ldr	r2, [r7, #4]
 8005af0:	429a      	cmp	r2, r3
 8005af2:	d196      	bne.n	8005a22 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005af4:	2300      	movs	r3, #0
}
 8005af6:	4618      	mov	r0, r3
 8005af8:	3728      	adds	r7, #40	; 0x28
 8005afa:	46bd      	mov	sp, r7
 8005afc:	bd80      	pop	{r7, pc}
 8005afe:	bf00      	nop
 8005b00:	20000008 	.word	0x20000008

08005b04 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b086      	sub	sp, #24
 8005b08:	af02      	add	r7, sp, #8
 8005b0a:	60f8      	str	r0, [r7, #12]
 8005b0c:	60b9      	str	r1, [r7, #8]
 8005b0e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	9300      	str	r3, [sp, #0]
 8005b14:	68bb      	ldr	r3, [r7, #8]
 8005b16:	2200      	movs	r2, #0
 8005b18:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005b1c:	68f8      	ldr	r0, [r7, #12]
 8005b1e:	f7ff ff5b 	bl	80059d8 <SPI_WaitFifoStateUntilTimeout>
 8005b22:	4603      	mov	r3, r0
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d007      	beq.n	8005b38 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b2c:	f043 0220 	orr.w	r2, r3, #32
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005b34:	2303      	movs	r3, #3
 8005b36:	e027      	b.n	8005b88 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	9300      	str	r3, [sp, #0]
 8005b3c:	68bb      	ldr	r3, [r7, #8]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	2180      	movs	r1, #128	; 0x80
 8005b42:	68f8      	ldr	r0, [r7, #12]
 8005b44:	f7ff fec0 	bl	80058c8 <SPI_WaitFlagStateUntilTimeout>
 8005b48:	4603      	mov	r3, r0
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d007      	beq.n	8005b5e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b52:	f043 0220 	orr.w	r2, r3, #32
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005b5a:	2303      	movs	r3, #3
 8005b5c:	e014      	b.n	8005b88 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	9300      	str	r3, [sp, #0]
 8005b62:	68bb      	ldr	r3, [r7, #8]
 8005b64:	2200      	movs	r2, #0
 8005b66:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005b6a:	68f8      	ldr	r0, [r7, #12]
 8005b6c:	f7ff ff34 	bl	80059d8 <SPI_WaitFifoStateUntilTimeout>
 8005b70:	4603      	mov	r3, r0
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d007      	beq.n	8005b86 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b7a:	f043 0220 	orr.w	r2, r3, #32
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005b82:	2303      	movs	r3, #3
 8005b84:	e000      	b.n	8005b88 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005b86:	2300      	movs	r3, #0
}
 8005b88:	4618      	mov	r0, r3
 8005b8a:	3710      	adds	r7, #16
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	bd80      	pop	{r7, pc}

08005b90 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b082      	sub	sp, #8
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d101      	bne.n	8005ba2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005b9e:	2301      	movs	r3, #1
 8005ba0:	e040      	b.n	8005c24 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d106      	bne.n	8005bb8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2200      	movs	r2, #0
 8005bae:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005bb2:	6878      	ldr	r0, [r7, #4]
 8005bb4:	f7fb ffe0 	bl	8001b78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2224      	movs	r2, #36	; 0x24
 8005bbc:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	681a      	ldr	r2, [r3, #0]
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f022 0201 	bic.w	r2, r2, #1
 8005bcc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005bce:	6878      	ldr	r0, [r7, #4]
 8005bd0:	f000 fc18 	bl	8006404 <UART_SetConfig>
 8005bd4:	4603      	mov	r3, r0
 8005bd6:	2b01      	cmp	r3, #1
 8005bd8:	d101      	bne.n	8005bde <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005bda:	2301      	movs	r3, #1
 8005bdc:	e022      	b.n	8005c24 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d002      	beq.n	8005bec <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005be6:	6878      	ldr	r0, [r7, #4]
 8005be8:	f000 fe96 	bl	8006918 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	685a      	ldr	r2, [r3, #4]
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005bfa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	689a      	ldr	r2, [r3, #8]
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005c0a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	681a      	ldr	r2, [r3, #0]
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f042 0201 	orr.w	r2, r2, #1
 8005c1a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005c1c:	6878      	ldr	r0, [r7, #4]
 8005c1e:	f000 ff1d 	bl	8006a5c <UART_CheckIdleState>
 8005c22:	4603      	mov	r3, r0
}
 8005c24:	4618      	mov	r0, r3
 8005c26:	3708      	adds	r7, #8
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	bd80      	pop	{r7, pc}

08005c2c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b08a      	sub	sp, #40	; 0x28
 8005c30:	af02      	add	r7, sp, #8
 8005c32:	60f8      	str	r0, [r7, #12]
 8005c34:	60b9      	str	r1, [r7, #8]
 8005c36:	603b      	str	r3, [r7, #0]
 8005c38:	4613      	mov	r3, r2
 8005c3a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005c40:	2b20      	cmp	r3, #32
 8005c42:	f040 8082 	bne.w	8005d4a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c46:	68bb      	ldr	r3, [r7, #8]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d002      	beq.n	8005c52 <HAL_UART_Transmit+0x26>
 8005c4c:	88fb      	ldrh	r3, [r7, #6]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d101      	bne.n	8005c56 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005c52:	2301      	movs	r3, #1
 8005c54:	e07a      	b.n	8005d4c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005c5c:	2b01      	cmp	r3, #1
 8005c5e:	d101      	bne.n	8005c64 <HAL_UART_Transmit+0x38>
 8005c60:	2302      	movs	r3, #2
 8005c62:	e073      	b.n	8005d4c <HAL_UART_Transmit+0x120>
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	2201      	movs	r2, #1
 8005c68:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	2200      	movs	r2, #0
 8005c70:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	2221      	movs	r2, #33	; 0x21
 8005c78:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005c7a:	f7fc f8b9 	bl	8001df0 <HAL_GetTick>
 8005c7e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	88fa      	ldrh	r2, [r7, #6]
 8005c84:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	88fa      	ldrh	r2, [r7, #6]
 8005c8c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	689b      	ldr	r3, [r3, #8]
 8005c94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c98:	d108      	bne.n	8005cac <HAL_UART_Transmit+0x80>
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	691b      	ldr	r3, [r3, #16]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d104      	bne.n	8005cac <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005ca6:	68bb      	ldr	r3, [r7, #8]
 8005ca8:	61bb      	str	r3, [r7, #24]
 8005caa:	e003      	b.n	8005cb4 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8005cac:	68bb      	ldr	r3, [r7, #8]
 8005cae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8005cbc:	e02d      	b.n	8005d1a <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	9300      	str	r3, [sp, #0]
 8005cc2:	697b      	ldr	r3, [r7, #20]
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	2180      	movs	r1, #128	; 0x80
 8005cc8:	68f8      	ldr	r0, [r7, #12]
 8005cca:	f000 ff10 	bl	8006aee <UART_WaitOnFlagUntilTimeout>
 8005cce:	4603      	mov	r3, r0
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d001      	beq.n	8005cd8 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8005cd4:	2303      	movs	r3, #3
 8005cd6:	e039      	b.n	8005d4c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8005cd8:	69fb      	ldr	r3, [r7, #28]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d10b      	bne.n	8005cf6 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005cde:	69bb      	ldr	r3, [r7, #24]
 8005ce0:	881a      	ldrh	r2, [r3, #0]
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005cea:	b292      	uxth	r2, r2
 8005cec:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005cee:	69bb      	ldr	r3, [r7, #24]
 8005cf0:	3302      	adds	r3, #2
 8005cf2:	61bb      	str	r3, [r7, #24]
 8005cf4:	e008      	b.n	8005d08 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005cf6:	69fb      	ldr	r3, [r7, #28]
 8005cf8:	781a      	ldrb	r2, [r3, #0]
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	b292      	uxth	r2, r2
 8005d00:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005d02:	69fb      	ldr	r3, [r7, #28]
 8005d04:	3301      	adds	r3, #1
 8005d06:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005d0e:	b29b      	uxth	r3, r3
 8005d10:	3b01      	subs	r3, #1
 8005d12:	b29a      	uxth	r2, r3
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005d20:	b29b      	uxth	r3, r3
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d1cb      	bne.n	8005cbe <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	9300      	str	r3, [sp, #0]
 8005d2a:	697b      	ldr	r3, [r7, #20]
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	2140      	movs	r1, #64	; 0x40
 8005d30:	68f8      	ldr	r0, [r7, #12]
 8005d32:	f000 fedc 	bl	8006aee <UART_WaitOnFlagUntilTimeout>
 8005d36:	4603      	mov	r3, r0
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d001      	beq.n	8005d40 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8005d3c:	2303      	movs	r3, #3
 8005d3e:	e005      	b.n	8005d4c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	2220      	movs	r2, #32
 8005d44:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005d46:	2300      	movs	r3, #0
 8005d48:	e000      	b.n	8005d4c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8005d4a:	2302      	movs	r3, #2
  }
}
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	3720      	adds	r7, #32
 8005d50:	46bd      	mov	sp, r7
 8005d52:	bd80      	pop	{r7, pc}

08005d54 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b08a      	sub	sp, #40	; 0x28
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	60f8      	str	r0, [r7, #12]
 8005d5c:	60b9      	str	r1, [r7, #8]
 8005d5e:	4613      	mov	r3, r2
 8005d60:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005d66:	2b20      	cmp	r3, #32
 8005d68:	d142      	bne.n	8005df0 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d6a:	68bb      	ldr	r3, [r7, #8]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d002      	beq.n	8005d76 <HAL_UART_Receive_IT+0x22>
 8005d70:	88fb      	ldrh	r3, [r7, #6]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d101      	bne.n	8005d7a <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8005d76:	2301      	movs	r3, #1
 8005d78:	e03b      	b.n	8005df2 <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005d80:	2b01      	cmp	r3, #1
 8005d82:	d101      	bne.n	8005d88 <HAL_UART_Receive_IT+0x34>
 8005d84:	2302      	movs	r3, #2
 8005d86:	e034      	b.n	8005df2 <HAL_UART_Receive_IT+0x9e>
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	2201      	movs	r2, #1
 8005d8c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	2200      	movs	r2, #0
 8005d94:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	4a18      	ldr	r2, [pc, #96]	; (8005dfc <HAL_UART_Receive_IT+0xa8>)
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d01f      	beq.n	8005de0 <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	685b      	ldr	r3, [r3, #4]
 8005da6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d018      	beq.n	8005de0 <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005db4:	697b      	ldr	r3, [r7, #20]
 8005db6:	e853 3f00 	ldrex	r3, [r3]
 8005dba:	613b      	str	r3, [r7, #16]
   return(result);
 8005dbc:	693b      	ldr	r3, [r7, #16]
 8005dbe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005dc2:	627b      	str	r3, [r7, #36]	; 0x24
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	461a      	mov	r2, r3
 8005dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dcc:	623b      	str	r3, [r7, #32]
 8005dce:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dd0:	69f9      	ldr	r1, [r7, #28]
 8005dd2:	6a3a      	ldr	r2, [r7, #32]
 8005dd4:	e841 2300 	strex	r3, r2, [r1]
 8005dd8:	61bb      	str	r3, [r7, #24]
   return(result);
 8005dda:	69bb      	ldr	r3, [r7, #24]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d1e6      	bne.n	8005dae <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005de0:	88fb      	ldrh	r3, [r7, #6]
 8005de2:	461a      	mov	r2, r3
 8005de4:	68b9      	ldr	r1, [r7, #8]
 8005de6:	68f8      	ldr	r0, [r7, #12]
 8005de8:	f000 ff46 	bl	8006c78 <UART_Start_Receive_IT>
 8005dec:	4603      	mov	r3, r0
 8005dee:	e000      	b.n	8005df2 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8005df0:	2302      	movs	r3, #2
  }
}
 8005df2:	4618      	mov	r0, r3
 8005df4:	3728      	adds	r7, #40	; 0x28
 8005df6:	46bd      	mov	sp, r7
 8005df8:	bd80      	pop	{r7, pc}
 8005dfa:	bf00      	nop
 8005dfc:	40008000 	.word	0x40008000

08005e00 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b0ba      	sub	sp, #232	; 0xe8
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	69db      	ldr	r3, [r3, #28]
 8005e0e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	689b      	ldr	r3, [r3, #8]
 8005e22:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005e26:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005e2a:	f640 030f 	movw	r3, #2063	; 0x80f
 8005e2e:	4013      	ands	r3, r2
 8005e30:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005e34:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d115      	bne.n	8005e68 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005e3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e40:	f003 0320 	and.w	r3, r3, #32
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d00f      	beq.n	8005e68 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005e48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e4c:	f003 0320 	and.w	r3, r3, #32
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d009      	beq.n	8005e68 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	f000 82a6 	beq.w	80063aa <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005e62:	6878      	ldr	r0, [r7, #4]
 8005e64:	4798      	blx	r3
      }
      return;
 8005e66:	e2a0      	b.n	80063aa <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8005e68:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	f000 8117 	beq.w	80060a0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005e72:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e76:	f003 0301 	and.w	r3, r3, #1
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d106      	bne.n	8005e8c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005e7e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005e82:	4b85      	ldr	r3, [pc, #532]	; (8006098 <HAL_UART_IRQHandler+0x298>)
 8005e84:	4013      	ands	r3, r2
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	f000 810a 	beq.w	80060a0 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005e8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e90:	f003 0301 	and.w	r3, r3, #1
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d011      	beq.n	8005ebc <HAL_UART_IRQHandler+0xbc>
 8005e98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d00b      	beq.n	8005ebc <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	2201      	movs	r2, #1
 8005eaa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005eb2:	f043 0201 	orr.w	r2, r3, #1
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005ebc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ec0:	f003 0302 	and.w	r3, r3, #2
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d011      	beq.n	8005eec <HAL_UART_IRQHandler+0xec>
 8005ec8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005ecc:	f003 0301 	and.w	r3, r3, #1
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d00b      	beq.n	8005eec <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	2202      	movs	r2, #2
 8005eda:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005ee2:	f043 0204 	orr.w	r2, r3, #4
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005eec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ef0:	f003 0304 	and.w	r3, r3, #4
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d011      	beq.n	8005f1c <HAL_UART_IRQHandler+0x11c>
 8005ef8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005efc:	f003 0301 	and.w	r3, r3, #1
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d00b      	beq.n	8005f1c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	2204      	movs	r2, #4
 8005f0a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005f12:	f043 0202 	orr.w	r2, r3, #2
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005f1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f20:	f003 0308 	and.w	r3, r3, #8
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d017      	beq.n	8005f58 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005f28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f2c:	f003 0320 	and.w	r3, r3, #32
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d105      	bne.n	8005f40 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005f34:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f38:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d00b      	beq.n	8005f58 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	2208      	movs	r2, #8
 8005f46:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005f4e:	f043 0208 	orr.w	r2, r3, #8
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005f58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d012      	beq.n	8005f8a <HAL_UART_IRQHandler+0x18a>
 8005f64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f68:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d00c      	beq.n	8005f8a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005f78:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005f80:	f043 0220 	orr.w	r2, r3, #32
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	f000 820c 	beq.w	80063ae <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005f96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f9a:	f003 0320 	and.w	r3, r3, #32
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d00d      	beq.n	8005fbe <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005fa2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005fa6:	f003 0320 	and.w	r3, r3, #32
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d007      	beq.n	8005fbe <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d003      	beq.n	8005fbe <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005fba:	6878      	ldr	r0, [r7, #4]
 8005fbc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005fc4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	689b      	ldr	r3, [r3, #8]
 8005fce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fd2:	2b40      	cmp	r3, #64	; 0x40
 8005fd4:	d005      	beq.n	8005fe2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005fd6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005fda:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d04f      	beq.n	8006082 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005fe2:	6878      	ldr	r0, [r7, #4]
 8005fe4:	f000 ff12 	bl	8006e0c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	689b      	ldr	r3, [r3, #8]
 8005fee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ff2:	2b40      	cmp	r3, #64	; 0x40
 8005ff4:	d141      	bne.n	800607a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	3308      	adds	r3, #8
 8005ffc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006000:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006004:	e853 3f00 	ldrex	r3, [r3]
 8006008:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800600c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006010:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006014:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	3308      	adds	r3, #8
 800601e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006022:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006026:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800602a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800602e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006032:	e841 2300 	strex	r3, r2, [r1]
 8006036:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800603a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800603e:	2b00      	cmp	r3, #0
 8006040:	d1d9      	bne.n	8005ff6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006046:	2b00      	cmp	r3, #0
 8006048:	d013      	beq.n	8006072 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800604e:	4a13      	ldr	r2, [pc, #76]	; (800609c <HAL_UART_IRQHandler+0x29c>)
 8006050:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006056:	4618      	mov	r0, r3
 8006058:	f7fd fc36 	bl	80038c8 <HAL_DMA_Abort_IT>
 800605c:	4603      	mov	r3, r0
 800605e:	2b00      	cmp	r3, #0
 8006060:	d017      	beq.n	8006092 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006066:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006068:	687a      	ldr	r2, [r7, #4]
 800606a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800606c:	4610      	mov	r0, r2
 800606e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006070:	e00f      	b.n	8006092 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006072:	6878      	ldr	r0, [r7, #4]
 8006074:	f000 f9b0 	bl	80063d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006078:	e00b      	b.n	8006092 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800607a:	6878      	ldr	r0, [r7, #4]
 800607c:	f000 f9ac 	bl	80063d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006080:	e007      	b.n	8006092 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006082:	6878      	ldr	r0, [r7, #4]
 8006084:	f000 f9a8 	bl	80063d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2200      	movs	r2, #0
 800608c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8006090:	e18d      	b.n	80063ae <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006092:	bf00      	nop
    return;
 8006094:	e18b      	b.n	80063ae <HAL_UART_IRQHandler+0x5ae>
 8006096:	bf00      	nop
 8006098:	04000120 	.word	0x04000120
 800609c:	08006ed3 	.word	0x08006ed3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060a4:	2b01      	cmp	r3, #1
 80060a6:	f040 8146 	bne.w	8006336 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80060aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060ae:	f003 0310 	and.w	r3, r3, #16
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	f000 813f 	beq.w	8006336 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80060b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060bc:	f003 0310 	and.w	r3, r3, #16
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	f000 8138 	beq.w	8006336 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	2210      	movs	r2, #16
 80060cc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	689b      	ldr	r3, [r3, #8]
 80060d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060d8:	2b40      	cmp	r3, #64	; 0x40
 80060da:	f040 80b4 	bne.w	8006246 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	685b      	ldr	r3, [r3, #4]
 80060e6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80060ea:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	f000 815f 	beq.w	80063b2 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80060fa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80060fe:	429a      	cmp	r2, r3
 8006100:	f080 8157 	bcs.w	80063b2 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800610a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f003 0320 	and.w	r3, r3, #32
 800611a:	2b00      	cmp	r3, #0
 800611c:	f040 8085 	bne.w	800622a <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006128:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800612c:	e853 3f00 	ldrex	r3, [r3]
 8006130:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006134:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006138:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800613c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	461a      	mov	r2, r3
 8006146:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800614a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800614e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006152:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006156:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800615a:	e841 2300 	strex	r3, r2, [r1]
 800615e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006162:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006166:	2b00      	cmp	r3, #0
 8006168:	d1da      	bne.n	8006120 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	3308      	adds	r3, #8
 8006170:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006172:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006174:	e853 3f00 	ldrex	r3, [r3]
 8006178:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800617a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800617c:	f023 0301 	bic.w	r3, r3, #1
 8006180:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	3308      	adds	r3, #8
 800618a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800618e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006192:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006194:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006196:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800619a:	e841 2300 	strex	r3, r2, [r1]
 800619e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80061a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d1e1      	bne.n	800616a <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	3308      	adds	r3, #8
 80061ac:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80061b0:	e853 3f00 	ldrex	r3, [r3]
 80061b4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80061b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80061b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80061bc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	3308      	adds	r3, #8
 80061c6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80061ca:	66fa      	str	r2, [r7, #108]	; 0x6c
 80061cc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061ce:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80061d0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80061d2:	e841 2300 	strex	r3, r2, [r1]
 80061d6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80061d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d1e3      	bne.n	80061a6 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	2220      	movs	r2, #32
 80061e2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2200      	movs	r2, #0
 80061e8:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061f2:	e853 3f00 	ldrex	r3, [r3]
 80061f6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80061f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80061fa:	f023 0310 	bic.w	r3, r3, #16
 80061fe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	461a      	mov	r2, r3
 8006208:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800620c:	65bb      	str	r3, [r7, #88]	; 0x58
 800620e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006210:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006212:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006214:	e841 2300 	strex	r3, r2, [r1]
 8006218:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800621a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800621c:	2b00      	cmp	r3, #0
 800621e:	d1e4      	bne.n	80061ea <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006224:	4618      	mov	r0, r3
 8006226:	f7fd fb11 	bl	800384c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006236:	b29b      	uxth	r3, r3
 8006238:	1ad3      	subs	r3, r2, r3
 800623a:	b29b      	uxth	r3, r3
 800623c:	4619      	mov	r1, r3
 800623e:	6878      	ldr	r0, [r7, #4]
 8006240:	f000 f8d4 	bl	80063ec <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006244:	e0b5      	b.n	80063b2 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006252:	b29b      	uxth	r3, r3
 8006254:	1ad3      	subs	r3, r2, r3
 8006256:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006260:	b29b      	uxth	r3, r3
 8006262:	2b00      	cmp	r3, #0
 8006264:	f000 80a7 	beq.w	80063b6 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8006268:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800626c:	2b00      	cmp	r3, #0
 800626e:	f000 80a2 	beq.w	80063b6 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006278:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800627a:	e853 3f00 	ldrex	r3, [r3]
 800627e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006280:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006282:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006286:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	461a      	mov	r2, r3
 8006290:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006294:	647b      	str	r3, [r7, #68]	; 0x44
 8006296:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006298:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800629a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800629c:	e841 2300 	strex	r3, r2, [r1]
 80062a0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80062a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d1e4      	bne.n	8006272 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	3308      	adds	r3, #8
 80062ae:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062b2:	e853 3f00 	ldrex	r3, [r3]
 80062b6:	623b      	str	r3, [r7, #32]
   return(result);
 80062b8:	6a3b      	ldr	r3, [r7, #32]
 80062ba:	f023 0301 	bic.w	r3, r3, #1
 80062be:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	3308      	adds	r3, #8
 80062c8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80062cc:	633a      	str	r2, [r7, #48]	; 0x30
 80062ce:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062d0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80062d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062d4:	e841 2300 	strex	r3, r2, [r1]
 80062d8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80062da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d1e3      	bne.n	80062a8 <HAL_UART_IRQHandler+0x4a8>
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2220      	movs	r2, #32
 80062e4:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2200      	movs	r2, #0
 80062ea:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2200      	movs	r2, #0
 80062f0:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062f8:	693b      	ldr	r3, [r7, #16]
 80062fa:	e853 3f00 	ldrex	r3, [r3]
 80062fe:	60fb      	str	r3, [r7, #12]
   return(result);
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	f023 0310 	bic.w	r3, r3, #16
 8006306:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	461a      	mov	r2, r3
 8006310:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006314:	61fb      	str	r3, [r7, #28]
 8006316:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006318:	69b9      	ldr	r1, [r7, #24]
 800631a:	69fa      	ldr	r2, [r7, #28]
 800631c:	e841 2300 	strex	r3, r2, [r1]
 8006320:	617b      	str	r3, [r7, #20]
   return(result);
 8006322:	697b      	ldr	r3, [r7, #20]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d1e4      	bne.n	80062f2 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006328:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800632c:	4619      	mov	r1, r3
 800632e:	6878      	ldr	r0, [r7, #4]
 8006330:	f000 f85c 	bl	80063ec <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006334:	e03f      	b.n	80063b6 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006336:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800633a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800633e:	2b00      	cmp	r3, #0
 8006340:	d00e      	beq.n	8006360 <HAL_UART_IRQHandler+0x560>
 8006342:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006346:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800634a:	2b00      	cmp	r3, #0
 800634c:	d008      	beq.n	8006360 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006356:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006358:	6878      	ldr	r0, [r7, #4]
 800635a:	f000 ff5a 	bl	8007212 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800635e:	e02d      	b.n	80063bc <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006360:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006364:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006368:	2b00      	cmp	r3, #0
 800636a:	d00e      	beq.n	800638a <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800636c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006370:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006374:	2b00      	cmp	r3, #0
 8006376:	d008      	beq.n	800638a <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800637c:	2b00      	cmp	r3, #0
 800637e:	d01c      	beq.n	80063ba <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006384:	6878      	ldr	r0, [r7, #4]
 8006386:	4798      	blx	r3
    }
    return;
 8006388:	e017      	b.n	80063ba <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800638a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800638e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006392:	2b00      	cmp	r3, #0
 8006394:	d012      	beq.n	80063bc <HAL_UART_IRQHandler+0x5bc>
 8006396:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800639a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d00c      	beq.n	80063bc <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 80063a2:	6878      	ldr	r0, [r7, #4]
 80063a4:	f000 fdab 	bl	8006efe <UART_EndTransmit_IT>
    return;
 80063a8:	e008      	b.n	80063bc <HAL_UART_IRQHandler+0x5bc>
      return;
 80063aa:	bf00      	nop
 80063ac:	e006      	b.n	80063bc <HAL_UART_IRQHandler+0x5bc>
    return;
 80063ae:	bf00      	nop
 80063b0:	e004      	b.n	80063bc <HAL_UART_IRQHandler+0x5bc>
      return;
 80063b2:	bf00      	nop
 80063b4:	e002      	b.n	80063bc <HAL_UART_IRQHandler+0x5bc>
      return;
 80063b6:	bf00      	nop
 80063b8:	e000      	b.n	80063bc <HAL_UART_IRQHandler+0x5bc>
    return;
 80063ba:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80063bc:	37e8      	adds	r7, #232	; 0xe8
 80063be:	46bd      	mov	sp, r7
 80063c0:	bd80      	pop	{r7, pc}
 80063c2:	bf00      	nop

080063c4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80063c4:	b480      	push	{r7}
 80063c6:	b083      	sub	sp, #12
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80063cc:	bf00      	nop
 80063ce:	370c      	adds	r7, #12
 80063d0:	46bd      	mov	sp, r7
 80063d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d6:	4770      	bx	lr

080063d8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80063d8:	b480      	push	{r7}
 80063da:	b083      	sub	sp, #12
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80063e0:	bf00      	nop
 80063e2:	370c      	adds	r7, #12
 80063e4:	46bd      	mov	sp, r7
 80063e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ea:	4770      	bx	lr

080063ec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80063ec:	b480      	push	{r7}
 80063ee:	b083      	sub	sp, #12
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
 80063f4:	460b      	mov	r3, r1
 80063f6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80063f8:	bf00      	nop
 80063fa:	370c      	adds	r7, #12
 80063fc:	46bd      	mov	sp, r7
 80063fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006402:	4770      	bx	lr

08006404 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006404:	b5b0      	push	{r4, r5, r7, lr}
 8006406:	b088      	sub	sp, #32
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800640c:	2300      	movs	r3, #0
 800640e:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	689a      	ldr	r2, [r3, #8]
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	691b      	ldr	r3, [r3, #16]
 8006418:	431a      	orrs	r2, r3
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	695b      	ldr	r3, [r3, #20]
 800641e:	431a      	orrs	r2, r3
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	69db      	ldr	r3, [r3, #28]
 8006424:	4313      	orrs	r3, r2
 8006426:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	681a      	ldr	r2, [r3, #0]
 800642e:	4bad      	ldr	r3, [pc, #692]	; (80066e4 <UART_SetConfig+0x2e0>)
 8006430:	4013      	ands	r3, r2
 8006432:	687a      	ldr	r2, [r7, #4]
 8006434:	6812      	ldr	r2, [r2, #0]
 8006436:	69f9      	ldr	r1, [r7, #28]
 8006438:	430b      	orrs	r3, r1
 800643a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	685b      	ldr	r3, [r3, #4]
 8006442:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	68da      	ldr	r2, [r3, #12]
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	430a      	orrs	r2, r1
 8006450:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	699b      	ldr	r3, [r3, #24]
 8006456:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	4aa2      	ldr	r2, [pc, #648]	; (80066e8 <UART_SetConfig+0x2e4>)
 800645e:	4293      	cmp	r3, r2
 8006460:	d004      	beq.n	800646c <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6a1b      	ldr	r3, [r3, #32]
 8006466:	69fa      	ldr	r2, [r7, #28]
 8006468:	4313      	orrs	r3, r2
 800646a:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	689b      	ldr	r3, [r3, #8]
 8006472:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	69fa      	ldr	r2, [r7, #28]
 800647c:	430a      	orrs	r2, r1
 800647e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	4a99      	ldr	r2, [pc, #612]	; (80066ec <UART_SetConfig+0x2e8>)
 8006486:	4293      	cmp	r3, r2
 8006488:	d121      	bne.n	80064ce <UART_SetConfig+0xca>
 800648a:	4b99      	ldr	r3, [pc, #612]	; (80066f0 <UART_SetConfig+0x2ec>)
 800648c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006490:	f003 0303 	and.w	r3, r3, #3
 8006494:	2b03      	cmp	r3, #3
 8006496:	d817      	bhi.n	80064c8 <UART_SetConfig+0xc4>
 8006498:	a201      	add	r2, pc, #4	; (adr r2, 80064a0 <UART_SetConfig+0x9c>)
 800649a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800649e:	bf00      	nop
 80064a0:	080064b1 	.word	0x080064b1
 80064a4:	080064bd 	.word	0x080064bd
 80064a8:	080064b7 	.word	0x080064b7
 80064ac:	080064c3 	.word	0x080064c3
 80064b0:	2301      	movs	r3, #1
 80064b2:	76fb      	strb	r3, [r7, #27]
 80064b4:	e0e7      	b.n	8006686 <UART_SetConfig+0x282>
 80064b6:	2302      	movs	r3, #2
 80064b8:	76fb      	strb	r3, [r7, #27]
 80064ba:	e0e4      	b.n	8006686 <UART_SetConfig+0x282>
 80064bc:	2304      	movs	r3, #4
 80064be:	76fb      	strb	r3, [r7, #27]
 80064c0:	e0e1      	b.n	8006686 <UART_SetConfig+0x282>
 80064c2:	2308      	movs	r3, #8
 80064c4:	76fb      	strb	r3, [r7, #27]
 80064c6:	e0de      	b.n	8006686 <UART_SetConfig+0x282>
 80064c8:	2310      	movs	r3, #16
 80064ca:	76fb      	strb	r3, [r7, #27]
 80064cc:	e0db      	b.n	8006686 <UART_SetConfig+0x282>
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	4a88      	ldr	r2, [pc, #544]	; (80066f4 <UART_SetConfig+0x2f0>)
 80064d4:	4293      	cmp	r3, r2
 80064d6:	d132      	bne.n	800653e <UART_SetConfig+0x13a>
 80064d8:	4b85      	ldr	r3, [pc, #532]	; (80066f0 <UART_SetConfig+0x2ec>)
 80064da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064de:	f003 030c 	and.w	r3, r3, #12
 80064e2:	2b0c      	cmp	r3, #12
 80064e4:	d828      	bhi.n	8006538 <UART_SetConfig+0x134>
 80064e6:	a201      	add	r2, pc, #4	; (adr r2, 80064ec <UART_SetConfig+0xe8>)
 80064e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064ec:	08006521 	.word	0x08006521
 80064f0:	08006539 	.word	0x08006539
 80064f4:	08006539 	.word	0x08006539
 80064f8:	08006539 	.word	0x08006539
 80064fc:	0800652d 	.word	0x0800652d
 8006500:	08006539 	.word	0x08006539
 8006504:	08006539 	.word	0x08006539
 8006508:	08006539 	.word	0x08006539
 800650c:	08006527 	.word	0x08006527
 8006510:	08006539 	.word	0x08006539
 8006514:	08006539 	.word	0x08006539
 8006518:	08006539 	.word	0x08006539
 800651c:	08006533 	.word	0x08006533
 8006520:	2300      	movs	r3, #0
 8006522:	76fb      	strb	r3, [r7, #27]
 8006524:	e0af      	b.n	8006686 <UART_SetConfig+0x282>
 8006526:	2302      	movs	r3, #2
 8006528:	76fb      	strb	r3, [r7, #27]
 800652a:	e0ac      	b.n	8006686 <UART_SetConfig+0x282>
 800652c:	2304      	movs	r3, #4
 800652e:	76fb      	strb	r3, [r7, #27]
 8006530:	e0a9      	b.n	8006686 <UART_SetConfig+0x282>
 8006532:	2308      	movs	r3, #8
 8006534:	76fb      	strb	r3, [r7, #27]
 8006536:	e0a6      	b.n	8006686 <UART_SetConfig+0x282>
 8006538:	2310      	movs	r3, #16
 800653a:	76fb      	strb	r3, [r7, #27]
 800653c:	e0a3      	b.n	8006686 <UART_SetConfig+0x282>
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	4a6d      	ldr	r2, [pc, #436]	; (80066f8 <UART_SetConfig+0x2f4>)
 8006544:	4293      	cmp	r3, r2
 8006546:	d120      	bne.n	800658a <UART_SetConfig+0x186>
 8006548:	4b69      	ldr	r3, [pc, #420]	; (80066f0 <UART_SetConfig+0x2ec>)
 800654a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800654e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006552:	2b30      	cmp	r3, #48	; 0x30
 8006554:	d013      	beq.n	800657e <UART_SetConfig+0x17a>
 8006556:	2b30      	cmp	r3, #48	; 0x30
 8006558:	d814      	bhi.n	8006584 <UART_SetConfig+0x180>
 800655a:	2b20      	cmp	r3, #32
 800655c:	d009      	beq.n	8006572 <UART_SetConfig+0x16e>
 800655e:	2b20      	cmp	r3, #32
 8006560:	d810      	bhi.n	8006584 <UART_SetConfig+0x180>
 8006562:	2b00      	cmp	r3, #0
 8006564:	d002      	beq.n	800656c <UART_SetConfig+0x168>
 8006566:	2b10      	cmp	r3, #16
 8006568:	d006      	beq.n	8006578 <UART_SetConfig+0x174>
 800656a:	e00b      	b.n	8006584 <UART_SetConfig+0x180>
 800656c:	2300      	movs	r3, #0
 800656e:	76fb      	strb	r3, [r7, #27]
 8006570:	e089      	b.n	8006686 <UART_SetConfig+0x282>
 8006572:	2302      	movs	r3, #2
 8006574:	76fb      	strb	r3, [r7, #27]
 8006576:	e086      	b.n	8006686 <UART_SetConfig+0x282>
 8006578:	2304      	movs	r3, #4
 800657a:	76fb      	strb	r3, [r7, #27]
 800657c:	e083      	b.n	8006686 <UART_SetConfig+0x282>
 800657e:	2308      	movs	r3, #8
 8006580:	76fb      	strb	r3, [r7, #27]
 8006582:	e080      	b.n	8006686 <UART_SetConfig+0x282>
 8006584:	2310      	movs	r3, #16
 8006586:	76fb      	strb	r3, [r7, #27]
 8006588:	e07d      	b.n	8006686 <UART_SetConfig+0x282>
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	4a5b      	ldr	r2, [pc, #364]	; (80066fc <UART_SetConfig+0x2f8>)
 8006590:	4293      	cmp	r3, r2
 8006592:	d120      	bne.n	80065d6 <UART_SetConfig+0x1d2>
 8006594:	4b56      	ldr	r3, [pc, #344]	; (80066f0 <UART_SetConfig+0x2ec>)
 8006596:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800659a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800659e:	2bc0      	cmp	r3, #192	; 0xc0
 80065a0:	d013      	beq.n	80065ca <UART_SetConfig+0x1c6>
 80065a2:	2bc0      	cmp	r3, #192	; 0xc0
 80065a4:	d814      	bhi.n	80065d0 <UART_SetConfig+0x1cc>
 80065a6:	2b80      	cmp	r3, #128	; 0x80
 80065a8:	d009      	beq.n	80065be <UART_SetConfig+0x1ba>
 80065aa:	2b80      	cmp	r3, #128	; 0x80
 80065ac:	d810      	bhi.n	80065d0 <UART_SetConfig+0x1cc>
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d002      	beq.n	80065b8 <UART_SetConfig+0x1b4>
 80065b2:	2b40      	cmp	r3, #64	; 0x40
 80065b4:	d006      	beq.n	80065c4 <UART_SetConfig+0x1c0>
 80065b6:	e00b      	b.n	80065d0 <UART_SetConfig+0x1cc>
 80065b8:	2300      	movs	r3, #0
 80065ba:	76fb      	strb	r3, [r7, #27]
 80065bc:	e063      	b.n	8006686 <UART_SetConfig+0x282>
 80065be:	2302      	movs	r3, #2
 80065c0:	76fb      	strb	r3, [r7, #27]
 80065c2:	e060      	b.n	8006686 <UART_SetConfig+0x282>
 80065c4:	2304      	movs	r3, #4
 80065c6:	76fb      	strb	r3, [r7, #27]
 80065c8:	e05d      	b.n	8006686 <UART_SetConfig+0x282>
 80065ca:	2308      	movs	r3, #8
 80065cc:	76fb      	strb	r3, [r7, #27]
 80065ce:	e05a      	b.n	8006686 <UART_SetConfig+0x282>
 80065d0:	2310      	movs	r3, #16
 80065d2:	76fb      	strb	r3, [r7, #27]
 80065d4:	e057      	b.n	8006686 <UART_SetConfig+0x282>
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	4a49      	ldr	r2, [pc, #292]	; (8006700 <UART_SetConfig+0x2fc>)
 80065dc:	4293      	cmp	r3, r2
 80065de:	d125      	bne.n	800662c <UART_SetConfig+0x228>
 80065e0:	4b43      	ldr	r3, [pc, #268]	; (80066f0 <UART_SetConfig+0x2ec>)
 80065e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80065ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80065ee:	d017      	beq.n	8006620 <UART_SetConfig+0x21c>
 80065f0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80065f4:	d817      	bhi.n	8006626 <UART_SetConfig+0x222>
 80065f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80065fa:	d00b      	beq.n	8006614 <UART_SetConfig+0x210>
 80065fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006600:	d811      	bhi.n	8006626 <UART_SetConfig+0x222>
 8006602:	2b00      	cmp	r3, #0
 8006604:	d003      	beq.n	800660e <UART_SetConfig+0x20a>
 8006606:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800660a:	d006      	beq.n	800661a <UART_SetConfig+0x216>
 800660c:	e00b      	b.n	8006626 <UART_SetConfig+0x222>
 800660e:	2300      	movs	r3, #0
 8006610:	76fb      	strb	r3, [r7, #27]
 8006612:	e038      	b.n	8006686 <UART_SetConfig+0x282>
 8006614:	2302      	movs	r3, #2
 8006616:	76fb      	strb	r3, [r7, #27]
 8006618:	e035      	b.n	8006686 <UART_SetConfig+0x282>
 800661a:	2304      	movs	r3, #4
 800661c:	76fb      	strb	r3, [r7, #27]
 800661e:	e032      	b.n	8006686 <UART_SetConfig+0x282>
 8006620:	2308      	movs	r3, #8
 8006622:	76fb      	strb	r3, [r7, #27]
 8006624:	e02f      	b.n	8006686 <UART_SetConfig+0x282>
 8006626:	2310      	movs	r3, #16
 8006628:	76fb      	strb	r3, [r7, #27]
 800662a:	e02c      	b.n	8006686 <UART_SetConfig+0x282>
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	4a2d      	ldr	r2, [pc, #180]	; (80066e8 <UART_SetConfig+0x2e4>)
 8006632:	4293      	cmp	r3, r2
 8006634:	d125      	bne.n	8006682 <UART_SetConfig+0x27e>
 8006636:	4b2e      	ldr	r3, [pc, #184]	; (80066f0 <UART_SetConfig+0x2ec>)
 8006638:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800663c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006640:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006644:	d017      	beq.n	8006676 <UART_SetConfig+0x272>
 8006646:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800664a:	d817      	bhi.n	800667c <UART_SetConfig+0x278>
 800664c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006650:	d00b      	beq.n	800666a <UART_SetConfig+0x266>
 8006652:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006656:	d811      	bhi.n	800667c <UART_SetConfig+0x278>
 8006658:	2b00      	cmp	r3, #0
 800665a:	d003      	beq.n	8006664 <UART_SetConfig+0x260>
 800665c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006660:	d006      	beq.n	8006670 <UART_SetConfig+0x26c>
 8006662:	e00b      	b.n	800667c <UART_SetConfig+0x278>
 8006664:	2300      	movs	r3, #0
 8006666:	76fb      	strb	r3, [r7, #27]
 8006668:	e00d      	b.n	8006686 <UART_SetConfig+0x282>
 800666a:	2302      	movs	r3, #2
 800666c:	76fb      	strb	r3, [r7, #27]
 800666e:	e00a      	b.n	8006686 <UART_SetConfig+0x282>
 8006670:	2304      	movs	r3, #4
 8006672:	76fb      	strb	r3, [r7, #27]
 8006674:	e007      	b.n	8006686 <UART_SetConfig+0x282>
 8006676:	2308      	movs	r3, #8
 8006678:	76fb      	strb	r3, [r7, #27]
 800667a:	e004      	b.n	8006686 <UART_SetConfig+0x282>
 800667c:	2310      	movs	r3, #16
 800667e:	76fb      	strb	r3, [r7, #27]
 8006680:	e001      	b.n	8006686 <UART_SetConfig+0x282>
 8006682:	2310      	movs	r3, #16
 8006684:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	4a17      	ldr	r2, [pc, #92]	; (80066e8 <UART_SetConfig+0x2e4>)
 800668c:	4293      	cmp	r3, r2
 800668e:	f040 8087 	bne.w	80067a0 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006692:	7efb      	ldrb	r3, [r7, #27]
 8006694:	2b08      	cmp	r3, #8
 8006696:	d837      	bhi.n	8006708 <UART_SetConfig+0x304>
 8006698:	a201      	add	r2, pc, #4	; (adr r2, 80066a0 <UART_SetConfig+0x29c>)
 800669a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800669e:	bf00      	nop
 80066a0:	080066c5 	.word	0x080066c5
 80066a4:	08006709 	.word	0x08006709
 80066a8:	080066cd 	.word	0x080066cd
 80066ac:	08006709 	.word	0x08006709
 80066b0:	080066d3 	.word	0x080066d3
 80066b4:	08006709 	.word	0x08006709
 80066b8:	08006709 	.word	0x08006709
 80066bc:	08006709 	.word	0x08006709
 80066c0:	080066db 	.word	0x080066db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80066c4:	f7fe f9a6 	bl	8004a14 <HAL_RCC_GetPCLK1Freq>
 80066c8:	6178      	str	r0, [r7, #20]
        break;
 80066ca:	e022      	b.n	8006712 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80066cc:	4b0d      	ldr	r3, [pc, #52]	; (8006704 <UART_SetConfig+0x300>)
 80066ce:	617b      	str	r3, [r7, #20]
        break;
 80066d0:	e01f      	b.n	8006712 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80066d2:	f7fe f907 	bl	80048e4 <HAL_RCC_GetSysClockFreq>
 80066d6:	6178      	str	r0, [r7, #20]
        break;
 80066d8:	e01b      	b.n	8006712 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80066da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80066de:	617b      	str	r3, [r7, #20]
        break;
 80066e0:	e017      	b.n	8006712 <UART_SetConfig+0x30e>
 80066e2:	bf00      	nop
 80066e4:	efff69f3 	.word	0xefff69f3
 80066e8:	40008000 	.word	0x40008000
 80066ec:	40013800 	.word	0x40013800
 80066f0:	40021000 	.word	0x40021000
 80066f4:	40004400 	.word	0x40004400
 80066f8:	40004800 	.word	0x40004800
 80066fc:	40004c00 	.word	0x40004c00
 8006700:	40005000 	.word	0x40005000
 8006704:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8006708:	2300      	movs	r3, #0
 800670a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800670c:	2301      	movs	r3, #1
 800670e:	76bb      	strb	r3, [r7, #26]
        break;
 8006710:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006712:	697b      	ldr	r3, [r7, #20]
 8006714:	2b00      	cmp	r3, #0
 8006716:	f000 80f1 	beq.w	80068fc <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	685a      	ldr	r2, [r3, #4]
 800671e:	4613      	mov	r3, r2
 8006720:	005b      	lsls	r3, r3, #1
 8006722:	4413      	add	r3, r2
 8006724:	697a      	ldr	r2, [r7, #20]
 8006726:	429a      	cmp	r2, r3
 8006728:	d305      	bcc.n	8006736 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	685b      	ldr	r3, [r3, #4]
 800672e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006730:	697a      	ldr	r2, [r7, #20]
 8006732:	429a      	cmp	r2, r3
 8006734:	d902      	bls.n	800673c <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8006736:	2301      	movs	r3, #1
 8006738:	76bb      	strb	r3, [r7, #26]
 800673a:	e0df      	b.n	80068fc <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800673c:	697b      	ldr	r3, [r7, #20]
 800673e:	4618      	mov	r0, r3
 8006740:	f04f 0100 	mov.w	r1, #0
 8006744:	f04f 0200 	mov.w	r2, #0
 8006748:	f04f 0300 	mov.w	r3, #0
 800674c:	020b      	lsls	r3, r1, #8
 800674e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006752:	0202      	lsls	r2, r0, #8
 8006754:	6879      	ldr	r1, [r7, #4]
 8006756:	6849      	ldr	r1, [r1, #4]
 8006758:	0849      	lsrs	r1, r1, #1
 800675a:	4608      	mov	r0, r1
 800675c:	f04f 0100 	mov.w	r1, #0
 8006760:	1814      	adds	r4, r2, r0
 8006762:	eb43 0501 	adc.w	r5, r3, r1
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	685b      	ldr	r3, [r3, #4]
 800676a:	461a      	mov	r2, r3
 800676c:	f04f 0300 	mov.w	r3, #0
 8006770:	4620      	mov	r0, r4
 8006772:	4629      	mov	r1, r5
 8006774:	f7fa fa18 	bl	8000ba8 <__aeabi_uldivmod>
 8006778:	4602      	mov	r2, r0
 800677a:	460b      	mov	r3, r1
 800677c:	4613      	mov	r3, r2
 800677e:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006780:	693b      	ldr	r3, [r7, #16]
 8006782:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006786:	d308      	bcc.n	800679a <UART_SetConfig+0x396>
 8006788:	693b      	ldr	r3, [r7, #16]
 800678a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800678e:	d204      	bcs.n	800679a <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	693a      	ldr	r2, [r7, #16]
 8006796:	60da      	str	r2, [r3, #12]
 8006798:	e0b0      	b.n	80068fc <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 800679a:	2301      	movs	r3, #1
 800679c:	76bb      	strb	r3, [r7, #26]
 800679e:	e0ad      	b.n	80068fc <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	69db      	ldr	r3, [r3, #28]
 80067a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80067a8:	d15b      	bne.n	8006862 <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 80067aa:	7efb      	ldrb	r3, [r7, #27]
 80067ac:	2b08      	cmp	r3, #8
 80067ae:	d828      	bhi.n	8006802 <UART_SetConfig+0x3fe>
 80067b0:	a201      	add	r2, pc, #4	; (adr r2, 80067b8 <UART_SetConfig+0x3b4>)
 80067b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067b6:	bf00      	nop
 80067b8:	080067dd 	.word	0x080067dd
 80067bc:	080067e5 	.word	0x080067e5
 80067c0:	080067ed 	.word	0x080067ed
 80067c4:	08006803 	.word	0x08006803
 80067c8:	080067f3 	.word	0x080067f3
 80067cc:	08006803 	.word	0x08006803
 80067d0:	08006803 	.word	0x08006803
 80067d4:	08006803 	.word	0x08006803
 80067d8:	080067fb 	.word	0x080067fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80067dc:	f7fe f91a 	bl	8004a14 <HAL_RCC_GetPCLK1Freq>
 80067e0:	6178      	str	r0, [r7, #20]
        break;
 80067e2:	e013      	b.n	800680c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80067e4:	f7fe f92c 	bl	8004a40 <HAL_RCC_GetPCLK2Freq>
 80067e8:	6178      	str	r0, [r7, #20]
        break;
 80067ea:	e00f      	b.n	800680c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80067ec:	4b49      	ldr	r3, [pc, #292]	; (8006914 <UART_SetConfig+0x510>)
 80067ee:	617b      	str	r3, [r7, #20]
        break;
 80067f0:	e00c      	b.n	800680c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80067f2:	f7fe f877 	bl	80048e4 <HAL_RCC_GetSysClockFreq>
 80067f6:	6178      	str	r0, [r7, #20]
        break;
 80067f8:	e008      	b.n	800680c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80067fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80067fe:	617b      	str	r3, [r7, #20]
        break;
 8006800:	e004      	b.n	800680c <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8006802:	2300      	movs	r3, #0
 8006804:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006806:	2301      	movs	r3, #1
 8006808:	76bb      	strb	r3, [r7, #26]
        break;
 800680a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800680c:	697b      	ldr	r3, [r7, #20]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d074      	beq.n	80068fc <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006812:	697b      	ldr	r3, [r7, #20]
 8006814:	005a      	lsls	r2, r3, #1
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	685b      	ldr	r3, [r3, #4]
 800681a:	085b      	lsrs	r3, r3, #1
 800681c:	441a      	add	r2, r3
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	685b      	ldr	r3, [r3, #4]
 8006822:	fbb2 f3f3 	udiv	r3, r2, r3
 8006826:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006828:	693b      	ldr	r3, [r7, #16]
 800682a:	2b0f      	cmp	r3, #15
 800682c:	d916      	bls.n	800685c <UART_SetConfig+0x458>
 800682e:	693b      	ldr	r3, [r7, #16]
 8006830:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006834:	d212      	bcs.n	800685c <UART_SetConfig+0x458>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006836:	693b      	ldr	r3, [r7, #16]
 8006838:	b29b      	uxth	r3, r3
 800683a:	f023 030f 	bic.w	r3, r3, #15
 800683e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006840:	693b      	ldr	r3, [r7, #16]
 8006842:	085b      	lsrs	r3, r3, #1
 8006844:	b29b      	uxth	r3, r3
 8006846:	f003 0307 	and.w	r3, r3, #7
 800684a:	b29a      	uxth	r2, r3
 800684c:	89fb      	ldrh	r3, [r7, #14]
 800684e:	4313      	orrs	r3, r2
 8006850:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	89fa      	ldrh	r2, [r7, #14]
 8006858:	60da      	str	r2, [r3, #12]
 800685a:	e04f      	b.n	80068fc <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800685c:	2301      	movs	r3, #1
 800685e:	76bb      	strb	r3, [r7, #26]
 8006860:	e04c      	b.n	80068fc <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006862:	7efb      	ldrb	r3, [r7, #27]
 8006864:	2b08      	cmp	r3, #8
 8006866:	d828      	bhi.n	80068ba <UART_SetConfig+0x4b6>
 8006868:	a201      	add	r2, pc, #4	; (adr r2, 8006870 <UART_SetConfig+0x46c>)
 800686a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800686e:	bf00      	nop
 8006870:	08006895 	.word	0x08006895
 8006874:	0800689d 	.word	0x0800689d
 8006878:	080068a5 	.word	0x080068a5
 800687c:	080068bb 	.word	0x080068bb
 8006880:	080068ab 	.word	0x080068ab
 8006884:	080068bb 	.word	0x080068bb
 8006888:	080068bb 	.word	0x080068bb
 800688c:	080068bb 	.word	0x080068bb
 8006890:	080068b3 	.word	0x080068b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006894:	f7fe f8be 	bl	8004a14 <HAL_RCC_GetPCLK1Freq>
 8006898:	6178      	str	r0, [r7, #20]
        break;
 800689a:	e013      	b.n	80068c4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800689c:	f7fe f8d0 	bl	8004a40 <HAL_RCC_GetPCLK2Freq>
 80068a0:	6178      	str	r0, [r7, #20]
        break;
 80068a2:	e00f      	b.n	80068c4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80068a4:	4b1b      	ldr	r3, [pc, #108]	; (8006914 <UART_SetConfig+0x510>)
 80068a6:	617b      	str	r3, [r7, #20]
        break;
 80068a8:	e00c      	b.n	80068c4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80068aa:	f7fe f81b 	bl	80048e4 <HAL_RCC_GetSysClockFreq>
 80068ae:	6178      	str	r0, [r7, #20]
        break;
 80068b0:	e008      	b.n	80068c4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80068b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80068b6:	617b      	str	r3, [r7, #20]
        break;
 80068b8:	e004      	b.n	80068c4 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 80068ba:	2300      	movs	r3, #0
 80068bc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80068be:	2301      	movs	r3, #1
 80068c0:	76bb      	strb	r3, [r7, #26]
        break;
 80068c2:	bf00      	nop
    }

    if (pclk != 0U)
 80068c4:	697b      	ldr	r3, [r7, #20]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d018      	beq.n	80068fc <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	685b      	ldr	r3, [r3, #4]
 80068ce:	085a      	lsrs	r2, r3, #1
 80068d0:	697b      	ldr	r3, [r7, #20]
 80068d2:	441a      	add	r2, r3
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	685b      	ldr	r3, [r3, #4]
 80068d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80068dc:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80068de:	693b      	ldr	r3, [r7, #16]
 80068e0:	2b0f      	cmp	r3, #15
 80068e2:	d909      	bls.n	80068f8 <UART_SetConfig+0x4f4>
 80068e4:	693b      	ldr	r3, [r7, #16]
 80068e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068ea:	d205      	bcs.n	80068f8 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80068ec:	693b      	ldr	r3, [r7, #16]
 80068ee:	b29a      	uxth	r2, r3
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	60da      	str	r2, [r3, #12]
 80068f6:	e001      	b.n	80068fc <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80068f8:	2301      	movs	r3, #1
 80068fa:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2200      	movs	r2, #0
 8006900:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	2200      	movs	r2, #0
 8006906:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006908:	7ebb      	ldrb	r3, [r7, #26]
}
 800690a:	4618      	mov	r0, r3
 800690c:	3720      	adds	r7, #32
 800690e:	46bd      	mov	sp, r7
 8006910:	bdb0      	pop	{r4, r5, r7, pc}
 8006912:	bf00      	nop
 8006914:	00f42400 	.word	0x00f42400

08006918 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006918:	b480      	push	{r7}
 800691a:	b083      	sub	sp, #12
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006924:	f003 0301 	and.w	r3, r3, #1
 8006928:	2b00      	cmp	r3, #0
 800692a:	d00a      	beq.n	8006942 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	685b      	ldr	r3, [r3, #4]
 8006932:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	430a      	orrs	r2, r1
 8006940:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006946:	f003 0302 	and.w	r3, r3, #2
 800694a:	2b00      	cmp	r3, #0
 800694c:	d00a      	beq.n	8006964 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	685b      	ldr	r3, [r3, #4]
 8006954:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	430a      	orrs	r2, r1
 8006962:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006968:	f003 0304 	and.w	r3, r3, #4
 800696c:	2b00      	cmp	r3, #0
 800696e:	d00a      	beq.n	8006986 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	685b      	ldr	r3, [r3, #4]
 8006976:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	430a      	orrs	r2, r1
 8006984:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800698a:	f003 0308 	and.w	r3, r3, #8
 800698e:	2b00      	cmp	r3, #0
 8006990:	d00a      	beq.n	80069a8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	685b      	ldr	r3, [r3, #4]
 8006998:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	430a      	orrs	r2, r1
 80069a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069ac:	f003 0310 	and.w	r3, r3, #16
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d00a      	beq.n	80069ca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	689b      	ldr	r3, [r3, #8]
 80069ba:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	430a      	orrs	r2, r1
 80069c8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069ce:	f003 0320 	and.w	r3, r3, #32
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d00a      	beq.n	80069ec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	689b      	ldr	r3, [r3, #8]
 80069dc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	430a      	orrs	r2, r1
 80069ea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d01a      	beq.n	8006a2e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	685b      	ldr	r3, [r3, #4]
 80069fe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	430a      	orrs	r2, r1
 8006a0c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a12:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a16:	d10a      	bne.n	8006a2e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	685b      	ldr	r3, [r3, #4]
 8006a1e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	430a      	orrs	r2, r1
 8006a2c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d00a      	beq.n	8006a50 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	685b      	ldr	r3, [r3, #4]
 8006a40:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	430a      	orrs	r2, r1
 8006a4e:	605a      	str	r2, [r3, #4]
  }
}
 8006a50:	bf00      	nop
 8006a52:	370c      	adds	r7, #12
 8006a54:	46bd      	mov	sp, r7
 8006a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5a:	4770      	bx	lr

08006a5c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	b086      	sub	sp, #24
 8006a60:	af02      	add	r7, sp, #8
 8006a62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2200      	movs	r2, #0
 8006a68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006a6c:	f7fb f9c0 	bl	8001df0 <HAL_GetTick>
 8006a70:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	f003 0308 	and.w	r3, r3, #8
 8006a7c:	2b08      	cmp	r3, #8
 8006a7e:	d10e      	bne.n	8006a9e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006a80:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006a84:	9300      	str	r3, [sp, #0]
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	2200      	movs	r2, #0
 8006a8a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006a8e:	6878      	ldr	r0, [r7, #4]
 8006a90:	f000 f82d 	bl	8006aee <UART_WaitOnFlagUntilTimeout>
 8006a94:	4603      	mov	r3, r0
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d001      	beq.n	8006a9e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006a9a:	2303      	movs	r3, #3
 8006a9c:	e023      	b.n	8006ae6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f003 0304 	and.w	r3, r3, #4
 8006aa8:	2b04      	cmp	r3, #4
 8006aaa:	d10e      	bne.n	8006aca <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006aac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006ab0:	9300      	str	r3, [sp, #0]
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006aba:	6878      	ldr	r0, [r7, #4]
 8006abc:	f000 f817 	bl	8006aee <UART_WaitOnFlagUntilTimeout>
 8006ac0:	4603      	mov	r3, r0
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d001      	beq.n	8006aca <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006ac6:	2303      	movs	r3, #3
 8006ac8:	e00d      	b.n	8006ae6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	2220      	movs	r2, #32
 8006ace:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2220      	movs	r2, #32
 8006ad4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	2200      	movs	r2, #0
 8006ada:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2200      	movs	r2, #0
 8006ae0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006ae4:	2300      	movs	r3, #0
}
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	3710      	adds	r7, #16
 8006aea:	46bd      	mov	sp, r7
 8006aec:	bd80      	pop	{r7, pc}

08006aee <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006aee:	b580      	push	{r7, lr}
 8006af0:	b09c      	sub	sp, #112	; 0x70
 8006af2:	af00      	add	r7, sp, #0
 8006af4:	60f8      	str	r0, [r7, #12]
 8006af6:	60b9      	str	r1, [r7, #8]
 8006af8:	603b      	str	r3, [r7, #0]
 8006afa:	4613      	mov	r3, r2
 8006afc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006afe:	e0a5      	b.n	8006c4c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b00:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006b02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b06:	f000 80a1 	beq.w	8006c4c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b0a:	f7fb f971 	bl	8001df0 <HAL_GetTick>
 8006b0e:	4602      	mov	r2, r0
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	1ad3      	subs	r3, r2, r3
 8006b14:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006b16:	429a      	cmp	r2, r3
 8006b18:	d302      	bcc.n	8006b20 <UART_WaitOnFlagUntilTimeout+0x32>
 8006b1a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d13e      	bne.n	8006b9e <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b28:	e853 3f00 	ldrex	r3, [r3]
 8006b2c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006b2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b30:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006b34:	667b      	str	r3, [r7, #100]	; 0x64
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	461a      	mov	r2, r3
 8006b3c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006b3e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006b40:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b42:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006b44:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006b46:	e841 2300 	strex	r3, r2, [r1]
 8006b4a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006b4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d1e6      	bne.n	8006b20 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	3308      	adds	r3, #8
 8006b58:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b5c:	e853 3f00 	ldrex	r3, [r3]
 8006b60:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006b62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b64:	f023 0301 	bic.w	r3, r3, #1
 8006b68:	663b      	str	r3, [r7, #96]	; 0x60
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	3308      	adds	r3, #8
 8006b70:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006b72:	64ba      	str	r2, [r7, #72]	; 0x48
 8006b74:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b76:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006b78:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006b7a:	e841 2300 	strex	r3, r2, [r1]
 8006b7e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006b80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d1e5      	bne.n	8006b52 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	2220      	movs	r2, #32
 8006b8a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	2220      	movs	r2, #32
 8006b90:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	2200      	movs	r2, #0
 8006b96:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006b9a:	2303      	movs	r3, #3
 8006b9c:	e067      	b.n	8006c6e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f003 0304 	and.w	r3, r3, #4
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d04f      	beq.n	8006c4c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	69db      	ldr	r3, [r3, #28]
 8006bb2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006bb6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006bba:	d147      	bne.n	8006c4c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006bc4:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bce:	e853 3f00 	ldrex	r3, [r3]
 8006bd2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bd6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006bda:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	461a      	mov	r2, r3
 8006be2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006be4:	637b      	str	r3, [r7, #52]	; 0x34
 8006be6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006be8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006bea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006bec:	e841 2300 	strex	r3, r2, [r1]
 8006bf0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006bf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d1e6      	bne.n	8006bc6 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	3308      	adds	r3, #8
 8006bfe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c00:	697b      	ldr	r3, [r7, #20]
 8006c02:	e853 3f00 	ldrex	r3, [r3]
 8006c06:	613b      	str	r3, [r7, #16]
   return(result);
 8006c08:	693b      	ldr	r3, [r7, #16]
 8006c0a:	f023 0301 	bic.w	r3, r3, #1
 8006c0e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	3308      	adds	r3, #8
 8006c16:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006c18:	623a      	str	r2, [r7, #32]
 8006c1a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c1c:	69f9      	ldr	r1, [r7, #28]
 8006c1e:	6a3a      	ldr	r2, [r7, #32]
 8006c20:	e841 2300 	strex	r3, r2, [r1]
 8006c24:	61bb      	str	r3, [r7, #24]
   return(result);
 8006c26:	69bb      	ldr	r3, [r7, #24]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d1e5      	bne.n	8006bf8 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	2220      	movs	r2, #32
 8006c30:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	2220      	movs	r2, #32
 8006c36:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	2220      	movs	r2, #32
 8006c3c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	2200      	movs	r2, #0
 8006c44:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006c48:	2303      	movs	r3, #3
 8006c4a:	e010      	b.n	8006c6e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	69da      	ldr	r2, [r3, #28]
 8006c52:	68bb      	ldr	r3, [r7, #8]
 8006c54:	4013      	ands	r3, r2
 8006c56:	68ba      	ldr	r2, [r7, #8]
 8006c58:	429a      	cmp	r2, r3
 8006c5a:	bf0c      	ite	eq
 8006c5c:	2301      	moveq	r3, #1
 8006c5e:	2300      	movne	r3, #0
 8006c60:	b2db      	uxtb	r3, r3
 8006c62:	461a      	mov	r2, r3
 8006c64:	79fb      	ldrb	r3, [r7, #7]
 8006c66:	429a      	cmp	r2, r3
 8006c68:	f43f af4a 	beq.w	8006b00 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006c6c:	2300      	movs	r3, #0
}
 8006c6e:	4618      	mov	r0, r3
 8006c70:	3770      	adds	r7, #112	; 0x70
 8006c72:	46bd      	mov	sp, r7
 8006c74:	bd80      	pop	{r7, pc}
	...

08006c78 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006c78:	b480      	push	{r7}
 8006c7a:	b097      	sub	sp, #92	; 0x5c
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	60f8      	str	r0, [r7, #12]
 8006c80:	60b9      	str	r1, [r7, #8]
 8006c82:	4613      	mov	r3, r2
 8006c84:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	68ba      	ldr	r2, [r7, #8]
 8006c8a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	88fa      	ldrh	r2, [r7, #6]
 8006c90:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	88fa      	ldrh	r2, [r7, #6]
 8006c98:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	689b      	ldr	r3, [r3, #8]
 8006ca6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006caa:	d10e      	bne.n	8006cca <UART_Start_Receive_IT+0x52>
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	691b      	ldr	r3, [r3, #16]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d105      	bne.n	8006cc0 <UART_Start_Receive_IT+0x48>
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006cba:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006cbe:	e02d      	b.n	8006d1c <UART_Start_Receive_IT+0xa4>
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	22ff      	movs	r2, #255	; 0xff
 8006cc4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006cc8:	e028      	b.n	8006d1c <UART_Start_Receive_IT+0xa4>
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	689b      	ldr	r3, [r3, #8]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d10d      	bne.n	8006cee <UART_Start_Receive_IT+0x76>
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	691b      	ldr	r3, [r3, #16]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d104      	bne.n	8006ce4 <UART_Start_Receive_IT+0x6c>
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	22ff      	movs	r2, #255	; 0xff
 8006cde:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006ce2:	e01b      	b.n	8006d1c <UART_Start_Receive_IT+0xa4>
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	227f      	movs	r2, #127	; 0x7f
 8006ce8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006cec:	e016      	b.n	8006d1c <UART_Start_Receive_IT+0xa4>
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	689b      	ldr	r3, [r3, #8]
 8006cf2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006cf6:	d10d      	bne.n	8006d14 <UART_Start_Receive_IT+0x9c>
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	691b      	ldr	r3, [r3, #16]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d104      	bne.n	8006d0a <UART_Start_Receive_IT+0x92>
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	227f      	movs	r2, #127	; 0x7f
 8006d04:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006d08:	e008      	b.n	8006d1c <UART_Start_Receive_IT+0xa4>
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	223f      	movs	r2, #63	; 0x3f
 8006d0e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006d12:	e003      	b.n	8006d1c <UART_Start_Receive_IT+0xa4>
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	2200      	movs	r2, #0
 8006d18:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	2200      	movs	r2, #0
 8006d20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	2222      	movs	r2, #34	; 0x22
 8006d28:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	3308      	adds	r3, #8
 8006d30:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d34:	e853 3f00 	ldrex	r3, [r3]
 8006d38:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006d3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d3c:	f043 0301 	orr.w	r3, r3, #1
 8006d40:	657b      	str	r3, [r7, #84]	; 0x54
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	3308      	adds	r3, #8
 8006d48:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006d4a:	64ba      	str	r2, [r7, #72]	; 0x48
 8006d4c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d4e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006d50:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006d52:	e841 2300 	strex	r3, r2, [r1]
 8006d56:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006d58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d1e5      	bne.n	8006d2a <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }  
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	689b      	ldr	r3, [r3, #8]
 8006d62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d66:	d107      	bne.n	8006d78 <UART_Start_Receive_IT+0x100>
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	691b      	ldr	r3, [r3, #16]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d103      	bne.n	8006d78 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	4a24      	ldr	r2, [pc, #144]	; (8006e04 <UART_Start_Receive_IT+0x18c>)
 8006d74:	665a      	str	r2, [r3, #100]	; 0x64
 8006d76:	e002      	b.n	8006d7e <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	4a23      	ldr	r2, [pc, #140]	; (8006e08 <UART_Start_Receive_IT+0x190>)
 8006d7c:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	2200      	movs	r2, #0
 8006d82:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	691b      	ldr	r3, [r3, #16]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d019      	beq.n	8006dc2 <UART_Start_Receive_IT+0x14a>
  { 
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d96:	e853 3f00 	ldrex	r3, [r3]
 8006d9a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d9e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8006da2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	461a      	mov	r2, r3
 8006daa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006dac:	637b      	str	r3, [r7, #52]	; 0x34
 8006dae:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006db0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006db2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006db4:	e841 2300 	strex	r3, r2, [r1]
 8006db8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006dba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d1e6      	bne.n	8006d8e <UART_Start_Receive_IT+0x116>
 8006dc0:	e018      	b.n	8006df4 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dc8:	697b      	ldr	r3, [r7, #20]
 8006dca:	e853 3f00 	ldrex	r3, [r3]
 8006dce:	613b      	str	r3, [r7, #16]
   return(result);
 8006dd0:	693b      	ldr	r3, [r7, #16]
 8006dd2:	f043 0320 	orr.w	r3, r3, #32
 8006dd6:	653b      	str	r3, [r7, #80]	; 0x50
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	461a      	mov	r2, r3
 8006dde:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006de0:	623b      	str	r3, [r7, #32]
 8006de2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006de4:	69f9      	ldr	r1, [r7, #28]
 8006de6:	6a3a      	ldr	r2, [r7, #32]
 8006de8:	e841 2300 	strex	r3, r2, [r1]
 8006dec:	61bb      	str	r3, [r7, #24]
   return(result);
 8006dee:	69bb      	ldr	r3, [r7, #24]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d1e6      	bne.n	8006dc2 <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8006df4:	2300      	movs	r3, #0
}
 8006df6:	4618      	mov	r0, r3
 8006df8:	375c      	adds	r7, #92	; 0x5c
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e00:	4770      	bx	lr
 8006e02:	bf00      	nop
 8006e04:	080070b3 	.word	0x080070b3
 8006e08:	08006f53 	.word	0x08006f53

08006e0c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006e0c:	b480      	push	{r7}
 8006e0e:	b095      	sub	sp, #84	; 0x54
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e1c:	e853 3f00 	ldrex	r3, [r3]
 8006e20:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e24:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006e28:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	461a      	mov	r2, r3
 8006e30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e32:	643b      	str	r3, [r7, #64]	; 0x40
 8006e34:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e36:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006e38:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006e3a:	e841 2300 	strex	r3, r2, [r1]
 8006e3e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006e40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d1e6      	bne.n	8006e14 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	3308      	adds	r3, #8
 8006e4c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e4e:	6a3b      	ldr	r3, [r7, #32]
 8006e50:	e853 3f00 	ldrex	r3, [r3]
 8006e54:	61fb      	str	r3, [r7, #28]
   return(result);
 8006e56:	69fb      	ldr	r3, [r7, #28]
 8006e58:	f023 0301 	bic.w	r3, r3, #1
 8006e5c:	64bb      	str	r3, [r7, #72]	; 0x48
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	3308      	adds	r3, #8
 8006e64:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006e66:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006e68:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e6a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006e6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006e6e:	e841 2300 	strex	r3, r2, [r1]
 8006e72:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d1e5      	bne.n	8006e46 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e7e:	2b01      	cmp	r3, #1
 8006e80:	d118      	bne.n	8006eb4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	e853 3f00 	ldrex	r3, [r3]
 8006e8e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006e90:	68bb      	ldr	r3, [r7, #8]
 8006e92:	f023 0310 	bic.w	r3, r3, #16
 8006e96:	647b      	str	r3, [r7, #68]	; 0x44
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	461a      	mov	r2, r3
 8006e9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ea0:	61bb      	str	r3, [r7, #24]
 8006ea2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ea4:	6979      	ldr	r1, [r7, #20]
 8006ea6:	69ba      	ldr	r2, [r7, #24]
 8006ea8:	e841 2300 	strex	r3, r2, [r1]
 8006eac:	613b      	str	r3, [r7, #16]
   return(result);
 8006eae:	693b      	ldr	r3, [r7, #16]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d1e6      	bne.n	8006e82 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2220      	movs	r2, #32
 8006eb8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2200      	movs	r2, #0
 8006ec4:	665a      	str	r2, [r3, #100]	; 0x64
}
 8006ec6:	bf00      	nop
 8006ec8:	3754      	adds	r7, #84	; 0x54
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed0:	4770      	bx	lr

08006ed2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006ed2:	b580      	push	{r7, lr}
 8006ed4:	b084      	sub	sp, #16
 8006ed6:	af00      	add	r7, sp, #0
 8006ed8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ede:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	2200      	movs	r2, #0
 8006eec:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006ef0:	68f8      	ldr	r0, [r7, #12]
 8006ef2:	f7ff fa71 	bl	80063d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006ef6:	bf00      	nop
 8006ef8:	3710      	adds	r7, #16
 8006efa:	46bd      	mov	sp, r7
 8006efc:	bd80      	pop	{r7, pc}

08006efe <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006efe:	b580      	push	{r7, lr}
 8006f00:	b088      	sub	sp, #32
 8006f02:	af00      	add	r7, sp, #0
 8006f04:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	e853 3f00 	ldrex	r3, [r3]
 8006f12:	60bb      	str	r3, [r7, #8]
   return(result);
 8006f14:	68bb      	ldr	r3, [r7, #8]
 8006f16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f1a:	61fb      	str	r3, [r7, #28]
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	461a      	mov	r2, r3
 8006f22:	69fb      	ldr	r3, [r7, #28]
 8006f24:	61bb      	str	r3, [r7, #24]
 8006f26:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f28:	6979      	ldr	r1, [r7, #20]
 8006f2a:	69ba      	ldr	r2, [r7, #24]
 8006f2c:	e841 2300 	strex	r3, r2, [r1]
 8006f30:	613b      	str	r3, [r7, #16]
   return(result);
 8006f32:	693b      	ldr	r3, [r7, #16]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d1e6      	bne.n	8006f06 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2220      	movs	r2, #32
 8006f3c:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	2200      	movs	r2, #0
 8006f42:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006f44:	6878      	ldr	r0, [r7, #4]
 8006f46:	f7ff fa3d 	bl	80063c4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006f4a:	bf00      	nop
 8006f4c:	3720      	adds	r7, #32
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	bd80      	pop	{r7, pc}

08006f52 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006f52:	b580      	push	{r7, lr}
 8006f54:	b096      	sub	sp, #88	; 0x58
 8006f56:	af00      	add	r7, sp, #0
 8006f58:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006f60:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006f68:	2b22      	cmp	r3, #34	; 0x22
 8006f6a:	f040 8094 	bne.w	8007096 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006f74:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006f78:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8006f7c:	b2d9      	uxtb	r1, r3
 8006f7e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006f82:	b2da      	uxtb	r2, r3
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f88:	400a      	ands	r2, r1
 8006f8a:	b2d2      	uxtb	r2, r2
 8006f8c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f92:	1c5a      	adds	r2, r3, #1
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006f9e:	b29b      	uxth	r3, r3
 8006fa0:	3b01      	subs	r3, #1
 8006fa2:	b29a      	uxth	r2, r3
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006fb0:	b29b      	uxth	r3, r3
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d179      	bne.n	80070aa <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fbe:	e853 3f00 	ldrex	r3, [r3]
 8006fc2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006fc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fc6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006fca:	653b      	str	r3, [r7, #80]	; 0x50
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	461a      	mov	r2, r3
 8006fd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006fd4:	647b      	str	r3, [r7, #68]	; 0x44
 8006fd6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fd8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006fda:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006fdc:	e841 2300 	strex	r3, r2, [r1]
 8006fe0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006fe2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d1e6      	bne.n	8006fb6 <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	3308      	adds	r3, #8
 8006fee:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ff2:	e853 3f00 	ldrex	r3, [r3]
 8006ff6:	623b      	str	r3, [r7, #32]
   return(result);
 8006ff8:	6a3b      	ldr	r3, [r7, #32]
 8006ffa:	f023 0301 	bic.w	r3, r3, #1
 8006ffe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	3308      	adds	r3, #8
 8007006:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007008:	633a      	str	r2, [r7, #48]	; 0x30
 800700a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800700c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800700e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007010:	e841 2300 	strex	r3, r2, [r1]
 8007014:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007018:	2b00      	cmp	r3, #0
 800701a:	d1e5      	bne.n	8006fe8 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2220      	movs	r2, #32
 8007020:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	2200      	movs	r2, #0
 8007026:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800702c:	2b01      	cmp	r3, #1
 800702e:	d12e      	bne.n	800708e <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2200      	movs	r2, #0
 8007034:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800703c:	693b      	ldr	r3, [r7, #16]
 800703e:	e853 3f00 	ldrex	r3, [r3]
 8007042:	60fb      	str	r3, [r7, #12]
   return(result);
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	f023 0310 	bic.w	r3, r3, #16
 800704a:	64bb      	str	r3, [r7, #72]	; 0x48
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	461a      	mov	r2, r3
 8007052:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007054:	61fb      	str	r3, [r7, #28]
 8007056:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007058:	69b9      	ldr	r1, [r7, #24]
 800705a:	69fa      	ldr	r2, [r7, #28]
 800705c:	e841 2300 	strex	r3, r2, [r1]
 8007060:	617b      	str	r3, [r7, #20]
   return(result);
 8007062:	697b      	ldr	r3, [r7, #20]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d1e6      	bne.n	8007036 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	69db      	ldr	r3, [r3, #28]
 800706e:	f003 0310 	and.w	r3, r3, #16
 8007072:	2b10      	cmp	r3, #16
 8007074:	d103      	bne.n	800707e <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	2210      	movs	r2, #16
 800707c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007084:	4619      	mov	r1, r3
 8007086:	6878      	ldr	r0, [r7, #4]
 8007088:	f7ff f9b0 	bl	80063ec <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800708c:	e00d      	b.n	80070aa <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800708e:	6878      	ldr	r0, [r7, #4]
 8007090:	f7fa fa2c 	bl	80014ec <HAL_UART_RxCpltCallback>
}
 8007094:	e009      	b.n	80070aa <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	8b1b      	ldrh	r3, [r3, #24]
 800709c:	b29a      	uxth	r2, r3
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f042 0208 	orr.w	r2, r2, #8
 80070a6:	b292      	uxth	r2, r2
 80070a8:	831a      	strh	r2, [r3, #24]
}
 80070aa:	bf00      	nop
 80070ac:	3758      	adds	r7, #88	; 0x58
 80070ae:	46bd      	mov	sp, r7
 80070b0:	bd80      	pop	{r7, pc}

080070b2 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80070b2:	b580      	push	{r7, lr}
 80070b4:	b096      	sub	sp, #88	; 0x58
 80070b6:	af00      	add	r7, sp, #0
 80070b8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80070c0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80070c8:	2b22      	cmp	r3, #34	; 0x22
 80070ca:	f040 8094 	bne.w	80071f6 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80070d4:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070dc:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80070de:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80070e2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80070e6:	4013      	ands	r3, r2
 80070e8:	b29a      	uxth	r2, r3
 80070ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80070ec:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070f2:	1c9a      	adds	r2, r3, #2
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80070fe:	b29b      	uxth	r3, r3
 8007100:	3b01      	subs	r3, #1
 8007102:	b29a      	uxth	r2, r3
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007110:	b29b      	uxth	r3, r3
 8007112:	2b00      	cmp	r3, #0
 8007114:	d179      	bne.n	800720a <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800711c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800711e:	e853 3f00 	ldrex	r3, [r3]
 8007122:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007126:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800712a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	461a      	mov	r2, r3
 8007132:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007134:	643b      	str	r3, [r7, #64]	; 0x40
 8007136:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007138:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800713a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800713c:	e841 2300 	strex	r3, r2, [r1]
 8007140:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007142:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007144:	2b00      	cmp	r3, #0
 8007146:	d1e6      	bne.n	8007116 <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	3308      	adds	r3, #8
 800714e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007150:	6a3b      	ldr	r3, [r7, #32]
 8007152:	e853 3f00 	ldrex	r3, [r3]
 8007156:	61fb      	str	r3, [r7, #28]
   return(result);
 8007158:	69fb      	ldr	r3, [r7, #28]
 800715a:	f023 0301 	bic.w	r3, r3, #1
 800715e:	64bb      	str	r3, [r7, #72]	; 0x48
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	3308      	adds	r3, #8
 8007166:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007168:	62fa      	str	r2, [r7, #44]	; 0x2c
 800716a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800716c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800716e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007170:	e841 2300 	strex	r3, r2, [r1]
 8007174:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007178:	2b00      	cmp	r3, #0
 800717a:	d1e5      	bne.n	8007148 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2220      	movs	r2, #32
 8007180:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	2200      	movs	r2, #0
 8007186:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800718c:	2b01      	cmp	r3, #1
 800718e:	d12e      	bne.n	80071ee <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2200      	movs	r2, #0
 8007194:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	e853 3f00 	ldrex	r3, [r3]
 80071a2:	60bb      	str	r3, [r7, #8]
   return(result);
 80071a4:	68bb      	ldr	r3, [r7, #8]
 80071a6:	f023 0310 	bic.w	r3, r3, #16
 80071aa:	647b      	str	r3, [r7, #68]	; 0x44
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	461a      	mov	r2, r3
 80071b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80071b4:	61bb      	str	r3, [r7, #24]
 80071b6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071b8:	6979      	ldr	r1, [r7, #20]
 80071ba:	69ba      	ldr	r2, [r7, #24]
 80071bc:	e841 2300 	strex	r3, r2, [r1]
 80071c0:	613b      	str	r3, [r7, #16]
   return(result);
 80071c2:	693b      	ldr	r3, [r7, #16]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d1e6      	bne.n	8007196 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	69db      	ldr	r3, [r3, #28]
 80071ce:	f003 0310 	and.w	r3, r3, #16
 80071d2:	2b10      	cmp	r3, #16
 80071d4:	d103      	bne.n	80071de <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	2210      	movs	r2, #16
 80071dc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80071e4:	4619      	mov	r1, r3
 80071e6:	6878      	ldr	r0, [r7, #4]
 80071e8:	f7ff f900 	bl	80063ec <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80071ec:	e00d      	b.n	800720a <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80071ee:	6878      	ldr	r0, [r7, #4]
 80071f0:	f7fa f97c 	bl	80014ec <HAL_UART_RxCpltCallback>
}
 80071f4:	e009      	b.n	800720a <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	8b1b      	ldrh	r3, [r3, #24]
 80071fc:	b29a      	uxth	r2, r3
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	f042 0208 	orr.w	r2, r2, #8
 8007206:	b292      	uxth	r2, r2
 8007208:	831a      	strh	r2, [r3, #24]
}
 800720a:	bf00      	nop
 800720c:	3758      	adds	r7, #88	; 0x58
 800720e:	46bd      	mov	sp, r7
 8007210:	bd80      	pop	{r7, pc}

08007212 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007212:	b480      	push	{r7}
 8007214:	b083      	sub	sp, #12
 8007216:	af00      	add	r7, sp, #0
 8007218:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800721a:	bf00      	nop
 800721c:	370c      	adds	r7, #12
 800721e:	46bd      	mov	sp, r7
 8007220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007224:	4770      	bx	lr

08007226 <bitmap_init>:
    return bitmap->width * (bitmap->depth / 8) * bitmap->height;
};

/* Initialise bitmap with given buffer. */
void bitmap_init(bitmap_t *bitmap, uint8_t *buffer)
{
 8007226:	b480      	push	{r7}
 8007228:	b083      	sub	sp, #12
 800722a:	af00      	add	r7, sp, #0
 800722c:	6078      	str	r0, [r7, #4]
 800722e:	6039      	str	r1, [r7, #0]
    bitmap->pitch = bitmap->width * (bitmap->depth / 8);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	881a      	ldrh	r2, [r3, #0]
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	799b      	ldrb	r3, [r3, #6]
 8007238:	08db      	lsrs	r3, r3, #3
 800723a:	b2db      	uxtb	r3, r3
 800723c:	b29b      	uxth	r3, r3
 800723e:	fb12 f303 	smulbb	r3, r2, r3
 8007242:	b29a      	uxth	r2, r3
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	809a      	strh	r2, [r3, #4]
    bitmap->size = bitmap->pitch * bitmap->height;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	889b      	ldrh	r3, [r3, #4]
 800724c:	461a      	mov	r2, r3
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	885b      	ldrh	r3, [r3, #2]
 8007252:	fb03 f302 	mul.w	r3, r3, r2
 8007256:	461a      	mov	r2, r3
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	609a      	str	r2, [r3, #8]
    bitmap->buffer = buffer;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	683a      	ldr	r2, [r7, #0]
 8007260:	60da      	str	r2, [r3, #12]
}
 8007262:	bf00      	nop
 8007264:	370c      	adds	r7, #12
 8007266:	46bd      	mov	sp, r7
 8007268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726c:	4770      	bx	lr

0800726e <fontx_meta>:
#include <stddef.h>
#include <string.h>

#include "fontx.h"

uint8_t fontx_meta(fontx_meta_t *meta, const uint8_t *font) {
 800726e:	b580      	push	{r7, lr}
 8007270:	b082      	sub	sp, #8
 8007272:	af00      	add	r7, sp, #0
 8007274:	6078      	str	r0, [r7, #4]
 8007276:	6039      	str	r1, [r7, #0]

    memcpy(meta->name, &font[FONTX_NAME], 8);
 8007278:	6878      	ldr	r0, [r7, #4]
 800727a:	683b      	ldr	r3, [r7, #0]
 800727c:	3306      	adds	r3, #6
 800727e:	2208      	movs	r2, #8
 8007280:	4619      	mov	r1, r3
 8007282:	f000 fca5 	bl	8007bd0 <memcpy>
    meta->width = font[FONTX_WIDTH];
 8007286:	683b      	ldr	r3, [r7, #0]
 8007288:	7b9a      	ldrb	r2, [r3, #14]
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	725a      	strb	r2, [r3, #9]
    meta->height = font[FONTX_HEIGHT];
 800728e:	683b      	ldr	r3, [r7, #0]
 8007290:	7bda      	ldrb	r2, [r3, #15]
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	729a      	strb	r2, [r3, #10]
    meta->type = font[FONTX_TYPE];
 8007296:	683b      	ldr	r3, [r7, #0]
 8007298:	7c1a      	ldrb	r2, [r3, #16]
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	72da      	strb	r2, [r3, #11]

    return 0;
 800729e:	2300      	movs	r3, #0
}
 80072a0:	4618      	mov	r0, r3
 80072a2:	3708      	adds	r7, #8
 80072a4:	46bd      	mov	sp, r7
 80072a6:	bd80      	pop	{r7, pc}

080072a8 <fontx_glyph>:


uint8_t fontx_glyph(fontx_glyph_t *glyph, wchar_t code, const uint8_t* font) {
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b08e      	sub	sp, #56	; 0x38
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	60f8      	str	r0, [r7, #12]
 80072b0:	60b9      	str	r1, [r7, #8]
 80072b2:	607a      	str	r2, [r7, #4]
    uint32_t nc, bc, sb, eb;
    uint8_t status;
    const uint8_t *block_table;
    fontx_meta_t meta;

    status = fontx_meta(&meta, font);
 80072b4:	f107 0314 	add.w	r3, r7, #20
 80072b8:	6879      	ldr	r1, [r7, #4]
 80072ba:	4618      	mov	r0, r3
 80072bc:	f7ff ffd7 	bl	800726e <fontx_meta>
 80072c0:	4603      	mov	r3, r0
 80072c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (0 != status) {
 80072c6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d002      	beq.n	80072d4 <fontx_glyph+0x2c>
        return status;
 80072ce:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80072d2:	e077      	b.n	80073c4 <fontx_glyph+0x11c>
    }

    glyph->width = meta.width;
 80072d4:	7f7a      	ldrb	r2, [r7, #29]
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	701a      	strb	r2, [r3, #0]
    glyph->height = meta.height;
 80072da:	7fba      	ldrb	r2, [r7, #30]
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	705a      	strb	r2, [r3, #1]
    glyph->pitch = (meta.width + 7) / 8;
 80072e0:	7f7b      	ldrb	r3, [r7, #29]
 80072e2:	3307      	adds	r3, #7
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	da00      	bge.n	80072ea <fontx_glyph+0x42>
 80072e8:	3307      	adds	r3, #7
 80072ea:	10db      	asrs	r3, r3, #3
 80072ec:	b2da      	uxtb	r2, r3
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	70da      	strb	r2, [r3, #3]
    glyph->size = glyph->pitch * meta.height;
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	78da      	ldrb	r2, [r3, #3]
 80072f6:	7fbb      	ldrb	r3, [r7, #30]
 80072f8:	fb12 f303 	smulbb	r3, r2, r3
 80072fc:	b2da      	uxtb	r2, r3
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	709a      	strb	r2, [r3, #2]

    if (FONTX_TYPE_SBCS == meta.type) {
 8007302:	7ffb      	ldrb	r3, [r7, #31]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d10f      	bne.n	8007328 <fontx_glyph+0x80>
        if (code < 0x100) {
 8007308:	68bb      	ldr	r3, [r7, #8]
 800730a:	2bff      	cmp	r3, #255	; 0xff
 800730c:	d859      	bhi.n	80073c2 <fontx_glyph+0x11a>
            glyph->buffer = &font[FONTX_GLYPH_DATA_START + code * glyph->size];
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	789b      	ldrb	r3, [r3, #2]
 8007312:	461a      	mov	r2, r3
 8007314:	68bb      	ldr	r3, [r7, #8]
 8007316:	fb03 f302 	mul.w	r3, r3, r2
 800731a:	3311      	adds	r3, #17
 800731c:	687a      	ldr	r2, [r7, #4]
 800731e:	441a      	add	r2, r3
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	605a      	str	r2, [r3, #4]
            return FONTX_OK;
 8007324:	2300      	movs	r3, #0
 8007326:	e04d      	b.n	80073c4 <fontx_glyph+0x11c>
        }
    } else {
        block_table = &font[FONTX_BLOCK_TABLE_START];
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	3312      	adds	r3, #18
 800732c:	62fb      	str	r3, [r7, #44]	; 0x2c
        nc = 0;
 800732e:	2300      	movs	r3, #0
 8007330:	637b      	str	r3, [r7, #52]	; 0x34
        bc = font[FONTX_BLOCK_TABLE_SIZE];
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	3311      	adds	r3, #17
 8007336:	781b      	ldrb	r3, [r3, #0]
 8007338:	633b      	str	r3, [r7, #48]	; 0x30
        while (bc--) {
 800733a:	e03d      	b.n	80073b8 <fontx_glyph+0x110>
            /* Get range of the code block_table. */
            sb = block_table[0] + block_table[1] * 0x100;
 800733c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800733e:	781b      	ldrb	r3, [r3, #0]
 8007340:	461a      	mov	r2, r3
 8007342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007344:	3301      	adds	r3, #1
 8007346:	781b      	ldrb	r3, [r3, #0]
 8007348:	021b      	lsls	r3, r3, #8
 800734a:	4413      	add	r3, r2
 800734c:	627b      	str	r3, [r7, #36]	; 0x24
            eb = block_table[2] + block_table[3] * 0x100;
 800734e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007350:	3302      	adds	r3, #2
 8007352:	781b      	ldrb	r3, [r3, #0]
 8007354:	461a      	mov	r2, r3
 8007356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007358:	3303      	adds	r3, #3
 800735a:	781b      	ldrb	r3, [r3, #0]
 800735c:	021b      	lsls	r3, r3, #8
 800735e:	4413      	add	r3, r2
 8007360:	623b      	str	r3, [r7, #32]

             /* Check if in the code block_table. */
            if (code >= sb && code <= eb) {
 8007362:	68ba      	ldr	r2, [r7, #8]
 8007364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007366:	429a      	cmp	r2, r3
 8007368:	d31c      	bcc.n	80073a4 <fontx_glyph+0xfc>
 800736a:	68ba      	ldr	r2, [r7, #8]
 800736c:	6a3b      	ldr	r3, [r7, #32]
 800736e:	429a      	cmp	r2, r3
 8007370:	d818      	bhi.n	80073a4 <fontx_glyph+0xfc>
                /* Number of codes from top of the block_table. */
                nc += code - sb;
 8007372:	68ba      	ldr	r2, [r7, #8]
 8007374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007376:	1ad3      	subs	r3, r2, r3
 8007378:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800737a:	4413      	add	r3, r2
 800737c:	637b      	str	r3, [r7, #52]	; 0x34
                glyph->buffer = &font[
                    FONTX_BLOCK_TABLE_START +
                    4 * font[FONTX_BLOCK_TABLE_SIZE] +
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	3311      	adds	r3, #17
 8007382:	781b      	ldrb	r3, [r3, #0]
 8007384:	009b      	lsls	r3, r3, #2
 8007386:	461a      	mov	r2, r3
                    nc * glyph->size
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	789b      	ldrb	r3, [r3, #2]
 800738c:	4619      	mov	r1, r3
 800738e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007390:	fb03 f301 	mul.w	r3, r3, r1
                    4 * font[FONTX_BLOCK_TABLE_SIZE] +
 8007394:	4413      	add	r3, r2
 8007396:	3312      	adds	r3, #18
                glyph->buffer = &font[
 8007398:	687a      	ldr	r2, [r7, #4]
 800739a:	441a      	add	r2, r3
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	605a      	str	r2, [r3, #4]
                ];
                return FONTX_OK;
 80073a0:	2300      	movs	r3, #0
 80073a2:	e00f      	b.n	80073c4 <fontx_glyph+0x11c>
            }
            /* Number of codes in the previous block_tables. */
            nc += eb - sb + 1;
 80073a4:	6a3a      	ldr	r2, [r7, #32]
 80073a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073a8:	1ad2      	subs	r2, r2, r3
 80073aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073ac:	4413      	add	r3, r2
 80073ae:	3301      	adds	r3, #1
 80073b0:	637b      	str	r3, [r7, #52]	; 0x34
            /* Next code block_table. */
            block_table += 4;
 80073b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073b4:	3304      	adds	r3, #4
 80073b6:	62fb      	str	r3, [r7, #44]	; 0x2c
        while (bc--) {
 80073b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073ba:	1e5a      	subs	r2, r3, #1
 80073bc:	633a      	str	r2, [r7, #48]	; 0x30
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d1bc      	bne.n	800733c <fontx_glyph+0x94>
        }
    }

    return FONTX_ERR_GLYPH_NOT_FOUND;
 80073c2:	2301      	movs	r3, #1
 80073c4:	4618      	mov	r0, r3
 80073c6:	3738      	adds	r7, #56	; 0x38
 80073c8:	46bd      	mov	sp, r7
 80073ca:	bd80      	pop	{r7, pc}

080073cc <hagl_put_pixel>:
    clip_window.x1 = x1;
    clip_window.y1 = y1;
}

void hagl_put_pixel(int16_t x0, int16_t y0, color_t color)
{
 80073cc:	b580      	push	{r7, lr}
 80073ce:	b082      	sub	sp, #8
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	4603      	mov	r3, r0
 80073d4:	80fb      	strh	r3, [r7, #6]
 80073d6:	460b      	mov	r3, r1
 80073d8:	80bb      	strh	r3, [r7, #4]
 80073da:	4613      	mov	r3, r2
 80073dc:	807b      	strh	r3, [r7, #2]
    /* x0 or y0 is before the edge, nothing to do. */
    if ((x0 < clip_window.x0) || (y0 < clip_window.y0))  {
 80073de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80073e2:	4a12      	ldr	r2, [pc, #72]	; (800742c <hagl_put_pixel+0x60>)
 80073e4:	8812      	ldrh	r2, [r2, #0]
 80073e6:	4293      	cmp	r3, r2
 80073e8:	db1a      	blt.n	8007420 <hagl_put_pixel+0x54>
 80073ea:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80073ee:	4a0f      	ldr	r2, [pc, #60]	; (800742c <hagl_put_pixel+0x60>)
 80073f0:	8852      	ldrh	r2, [r2, #2]
 80073f2:	4293      	cmp	r3, r2
 80073f4:	db14      	blt.n	8007420 <hagl_put_pixel+0x54>
        return;
    }

    /* x0 or y0 is after the edge, nothing to do. */
    if ((x0 > clip_window.x1) || (y0 > clip_window.y1)) {
 80073f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80073fa:	4a0c      	ldr	r2, [pc, #48]	; (800742c <hagl_put_pixel+0x60>)
 80073fc:	8892      	ldrh	r2, [r2, #4]
 80073fe:	4293      	cmp	r3, r2
 8007400:	dc10      	bgt.n	8007424 <hagl_put_pixel+0x58>
 8007402:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8007406:	4a09      	ldr	r2, [pc, #36]	; (800742c <hagl_put_pixel+0x60>)
 8007408:	88d2      	ldrh	r2, [r2, #6]
 800740a:	4293      	cmp	r3, r2
 800740c:	dc0a      	bgt.n	8007424 <hagl_put_pixel+0x58>
        return;
    }

    /* If still in bounds set the pixel. */
    hagl_hal_put_pixel(x0, y0, color);
 800740e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007412:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8007416:	887a      	ldrh	r2, [r7, #2]
 8007418:	4618      	mov	r0, r3
 800741a:	f7f9 ffb7 	bl	800138c <lcd_put_pixel>
 800741e:	e002      	b.n	8007426 <hagl_put_pixel+0x5a>
        return;
 8007420:	bf00      	nop
 8007422:	e000      	b.n	8007426 <hagl_put_pixel+0x5a>
        return;
 8007424:	bf00      	nop
}
 8007426:	3708      	adds	r7, #8
 8007428:	46bd      	mov	sp, r7
 800742a:	bd80      	pop	{r7, pc}
 800742c:	20000014 	.word	0x20000014

08007430 <hagl_put_char>:

    return 0;
}

uint8_t hagl_put_char(wchar_t code, int16_t x0, int16_t y0, color_t color, const uint8_t *font)
{
 8007430:	b590      	push	{r4, r7, lr}
 8007432:	f5ad 5d81 	sub.w	sp, sp, #4128	; 0x1020
 8007436:	b085      	sub	sp, #20
 8007438:	af00      	add	r7, sp, #0
 800743a:	f107 0410 	add.w	r4, r7, #16
 800743e:	3c04      	subs	r4, #4
 8007440:	6020      	str	r0, [r4, #0]
 8007442:	460c      	mov	r4, r1
 8007444:	4610      	mov	r0, r2
 8007446:	4619      	mov	r1, r3
 8007448:	f107 0310 	add.w	r3, r7, #16
 800744c:	3b06      	subs	r3, #6
 800744e:	4622      	mov	r2, r4
 8007450:	801a      	strh	r2, [r3, #0]
 8007452:	f107 0310 	add.w	r3, r7, #16
 8007456:	3b08      	subs	r3, #8
 8007458:	4602      	mov	r2, r0
 800745a:	801a      	strh	r2, [r3, #0]
 800745c:	f107 0310 	add.w	r3, r7, #16
 8007460:	3b0a      	subs	r3, #10
 8007462:	460a      	mov	r2, r1
 8007464:	801a      	strh	r2, [r3, #0]
    uint8_t set, status;
    color_t buffer[HAGL_CHAR_BUFFER_SIZE];
    bitmap_t bitmap;
    fontx_glyph_t glyph;

    status = fontx_glyph(&glyph, code, font);
 8007466:	f107 0310 	add.w	r3, r7, #16
 800746a:	3b04      	subs	r3, #4
 800746c:	f107 0010 	add.w	r0, r7, #16
 8007470:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007474:	6812      	ldr	r2, [r2, #0]
 8007476:	6819      	ldr	r1, [r3, #0]
 8007478:	f7ff ff16 	bl	80072a8 <fontx_glyph>
 800747c:	4603      	mov	r3, r0
 800747e:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8007482:	f102 0209 	add.w	r2, r2, #9
 8007486:	7013      	strb	r3, [r2, #0]

    if (0 != status) {
 8007488:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800748c:	f103 0309 	add.w	r3, r3, #9
 8007490:	781b      	ldrb	r3, [r3, #0]
 8007492:	2b00      	cmp	r3, #0
 8007494:	d001      	beq.n	800749a <hagl_put_char+0x6a>
        return 0;
 8007496:	2300      	movs	r3, #0
 8007498:	e0c2      	b.n	8007620 <hagl_put_char+0x1f0>
    }

    bitmap.width = glyph.width,
 800749a:	f107 0310 	add.w	r3, r7, #16
 800749e:	781b      	ldrb	r3, [r3, #0]
 80074a0:	b29a      	uxth	r2, r3
 80074a2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80074a6:	3b18      	subs	r3, #24
 80074a8:	801a      	strh	r2, [r3, #0]
    bitmap.height = glyph.height,
 80074aa:	f107 0310 	add.w	r3, r7, #16
 80074ae:	785b      	ldrb	r3, [r3, #1]
 80074b0:	b29a      	uxth	r2, r3
 80074b2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80074b6:	3b18      	subs	r3, #24
 80074b8:	805a      	strh	r2, [r3, #2]
    bitmap.depth = DISPLAY_DEPTH,
 80074ba:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80074be:	3b18      	subs	r3, #24
 80074c0:	2210      	movs	r2, #16
 80074c2:	719a      	strb	r2, [r3, #6]

    bitmap_init(&bitmap, (uint8_t *)buffer);
 80074c4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80074c8:	3a08      	subs	r2, #8
 80074ca:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80074ce:	3b18      	subs	r3, #24
 80074d0:	4611      	mov	r1, r2
 80074d2:	4618      	mov	r0, r3
 80074d4:	f7ff fea7 	bl	8007226 <bitmap_init>

    color_t *ptr = (color_t *) bitmap.buffer;
 80074d8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80074dc:	3b18      	subs	r3, #24
 80074de:	68db      	ldr	r3, [r3, #12]
 80074e0:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80074e4:	f102 020c 	add.w	r2, r2, #12
 80074e8:	6013      	str	r3, [r2, #0]

    for (uint8_t y = 0; y < glyph.height; y++) {
 80074ea:	2300      	movs	r3, #0
 80074ec:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80074f0:	f102 020b 	add.w	r2, r2, #11
 80074f4:	7013      	strb	r3, [r2, #0]
 80074f6:	e074      	b.n	80075e2 <hagl_put_char+0x1b2>
        for (uint8_t x = 0; x < glyph.width; x++) {
 80074f8:	2300      	movs	r3, #0
 80074fa:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80074fe:	f102 020a 	add.w	r2, r2, #10
 8007502:	7013      	strb	r3, [r2, #0]
 8007504:	e04e      	b.n	80075a4 <hagl_put_char+0x174>
            set = *(glyph.buffer + x / 8) & (0x80 >> (x % 8));
 8007506:	f107 0310 	add.w	r3, r7, #16
 800750a:	685b      	ldr	r3, [r3, #4]
 800750c:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8007510:	f102 020a 	add.w	r2, r2, #10
 8007514:	7812      	ldrb	r2, [r2, #0]
 8007516:	08d2      	lsrs	r2, r2, #3
 8007518:	b2d2      	uxtb	r2, r2
 800751a:	4413      	add	r3, r2
 800751c:	781b      	ldrb	r3, [r3, #0]
 800751e:	b25a      	sxtb	r2, r3
 8007520:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8007524:	f103 030a 	add.w	r3, r3, #10
 8007528:	781b      	ldrb	r3, [r3, #0]
 800752a:	f003 0307 	and.w	r3, r3, #7
 800752e:	2180      	movs	r1, #128	; 0x80
 8007530:	fa41 f303 	asr.w	r3, r1, r3
 8007534:	b25b      	sxtb	r3, r3
 8007536:	4013      	ands	r3, r2
 8007538:	b25b      	sxtb	r3, r3
 800753a:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800753e:	f102 0208 	add.w	r2, r2, #8
 8007542:	7013      	strb	r3, [r2, #0]
            if (set) {
 8007544:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8007548:	f103 0308 	add.w	r3, r3, #8
 800754c:	781b      	ldrb	r3, [r3, #0]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d010      	beq.n	8007574 <hagl_put_char+0x144>
                *(ptr++) = color;
 8007552:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8007556:	f103 030c 	add.w	r3, r3, #12
 800755a:	681a      	ldr	r2, [r3, #0]
 800755c:	1c93      	adds	r3, r2, #2
 800755e:	f507 5181 	add.w	r1, r7, #4128	; 0x1020
 8007562:	f101 010c 	add.w	r1, r1, #12
 8007566:	600b      	str	r3, [r1, #0]
 8007568:	f107 0310 	add.w	r3, r7, #16
 800756c:	3b0a      	subs	r3, #10
 800756e:	881b      	ldrh	r3, [r3, #0]
 8007570:	8013      	strh	r3, [r2, #0]
 8007572:	e00c      	b.n	800758e <hagl_put_char+0x15e>
            } else {
                *(ptr++) = 0x0000;
 8007574:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8007578:	f103 030c 	add.w	r3, r3, #12
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	1c9a      	adds	r2, r3, #2
 8007580:	f507 5181 	add.w	r1, r7, #4128	; 0x1020
 8007584:	f101 010c 	add.w	r1, r1, #12
 8007588:	600a      	str	r2, [r1, #0]
 800758a:	2200      	movs	r2, #0
 800758c:	801a      	strh	r2, [r3, #0]
        for (uint8_t x = 0; x < glyph.width; x++) {
 800758e:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8007592:	f103 030a 	add.w	r3, r3, #10
 8007596:	781b      	ldrb	r3, [r3, #0]
 8007598:	3301      	adds	r3, #1
 800759a:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800759e:	f102 020a 	add.w	r2, r2, #10
 80075a2:	7013      	strb	r3, [r2, #0]
 80075a4:	f107 0310 	add.w	r3, r7, #16
 80075a8:	781b      	ldrb	r3, [r3, #0]
 80075aa:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80075ae:	f102 020a 	add.w	r2, r2, #10
 80075b2:	7812      	ldrb	r2, [r2, #0]
 80075b4:	429a      	cmp	r2, r3
 80075b6:	d3a6      	bcc.n	8007506 <hagl_put_char+0xd6>
            }
        }
        glyph.buffer += glyph.pitch;
 80075b8:	f107 0310 	add.w	r3, r7, #16
 80075bc:	685b      	ldr	r3, [r3, #4]
 80075be:	f107 0210 	add.w	r2, r7, #16
 80075c2:	78d2      	ldrb	r2, [r2, #3]
 80075c4:	441a      	add	r2, r3
 80075c6:	f107 0310 	add.w	r3, r7, #16
 80075ca:	605a      	str	r2, [r3, #4]
    for (uint8_t y = 0; y < glyph.height; y++) {
 80075cc:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80075d0:	f103 030b 	add.w	r3, r3, #11
 80075d4:	781b      	ldrb	r3, [r3, #0]
 80075d6:	3301      	adds	r3, #1
 80075d8:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80075dc:	f102 020b 	add.w	r2, r2, #11
 80075e0:	7013      	strb	r3, [r2, #0]
 80075e2:	f107 0310 	add.w	r3, r7, #16
 80075e6:	785b      	ldrb	r3, [r3, #1]
 80075e8:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80075ec:	f102 020b 	add.w	r2, r2, #11
 80075f0:	7812      	ldrb	r2, [r2, #0]
 80075f2:	429a      	cmp	r2, r3
 80075f4:	d380      	bcc.n	80074f8 <hagl_put_char+0xc8>
    }

    hagl_blit(x0, y0, &bitmap);
 80075f6:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80075fa:	3a18      	subs	r2, #24
 80075fc:	f107 0310 	add.w	r3, r7, #16
 8007600:	3b08      	subs	r3, #8
 8007602:	f9b3 1000 	ldrsh.w	r1, [r3]
 8007606:	f107 0310 	add.w	r3, r7, #16
 800760a:	3b06      	subs	r3, #6
 800760c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007610:	4618      	mov	r0, r3
 8007612:	f000 f85a 	bl	80076ca <hagl_blit>

    return bitmap.width;
 8007616:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800761a:	3b18      	subs	r3, #24
 800761c:	881b      	ldrh	r3, [r3, #0]
 800761e:	b2db      	uxtb	r3, r3
}
 8007620:	4618      	mov	r0, r3
 8007622:	f507 5781 	add.w	r7, r7, #4128	; 0x1020
 8007626:	3714      	adds	r7, #20
 8007628:	46bd      	mov	sp, r7
 800762a:	bd90      	pop	{r4, r7, pc}

0800762c <hagl_put_text>:
 * Write a string of text by calling hagl_put_char() repeadetly. CR and LF
 * continue from the next line.
 */

uint16_t hagl_put_text(const wchar_t *str, int16_t x0, int16_t y0, color_t color, const unsigned char *font)
{
 800762c:	b580      	push	{r7, lr}
 800762e:	b08c      	sub	sp, #48	; 0x30
 8007630:	af02      	add	r7, sp, #8
 8007632:	60f8      	str	r0, [r7, #12]
 8007634:	4608      	mov	r0, r1
 8007636:	4611      	mov	r1, r2
 8007638:	461a      	mov	r2, r3
 800763a:	4603      	mov	r3, r0
 800763c:	817b      	strh	r3, [r7, #10]
 800763e:	460b      	mov	r3, r1
 8007640:	813b      	strh	r3, [r7, #8]
 8007642:	4613      	mov	r3, r2
 8007644:	80fb      	strh	r3, [r7, #6]
    wchar_t temp;
    uint8_t status;
    uint16_t original = x0;
 8007646:	897b      	ldrh	r3, [r7, #10]
 8007648:	84fb      	strh	r3, [r7, #38]	; 0x26
    fontx_meta_t meta;

    status = fontx_meta(&meta, font);
 800764a:	f107 0314 	add.w	r3, r7, #20
 800764e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007650:	4618      	mov	r0, r3
 8007652:	f7ff fe0c 	bl	800726e <fontx_meta>
 8007656:	4603      	mov	r3, r0
 8007658:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    if (0 != status) {
 800765c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8007660:	2b00      	cmp	r3, #0
 8007662:	d001      	beq.n	8007668 <hagl_put_text+0x3c>
        return 0;
 8007664:	2300      	movs	r3, #0
 8007666:	e02c      	b.n	80076c2 <hagl_put_text+0x96>
    }

    do {
        temp = *str++;
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	1d1a      	adds	r2, r3, #4
 800766c:	60fa      	str	r2, [r7, #12]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	623b      	str	r3, [r7, #32]
        if (13 == temp || 10 == temp) {
 8007672:	6a3b      	ldr	r3, [r7, #32]
 8007674:	2b0d      	cmp	r3, #13
 8007676:	d002      	beq.n	800767e <hagl_put_text+0x52>
 8007678:	6a3b      	ldr	r3, [r7, #32]
 800767a:	2b0a      	cmp	r3, #10
 800767c:	d108      	bne.n	8007690 <hagl_put_text+0x64>
            x0 = 0;
 800767e:	2300      	movs	r3, #0
 8007680:	817b      	strh	r3, [r7, #10]
            y0 += meta.height;
 8007682:	7fbb      	ldrb	r3, [r7, #30]
 8007684:	b29a      	uxth	r2, r3
 8007686:	893b      	ldrh	r3, [r7, #8]
 8007688:	4413      	add	r3, r2
 800768a:	b29b      	uxth	r3, r3
 800768c:	813b      	strh	r3, [r7, #8]
 800768e:	e010      	b.n	80076b2 <hagl_put_text+0x86>
        } else {
            x0 += hagl_put_char(temp, x0, y0, color, font);
 8007690:	88f8      	ldrh	r0, [r7, #6]
 8007692:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8007696:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 800769a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800769c:	9300      	str	r3, [sp, #0]
 800769e:	4603      	mov	r3, r0
 80076a0:	6a38      	ldr	r0, [r7, #32]
 80076a2:	f7ff fec5 	bl	8007430 <hagl_put_char>
 80076a6:	4603      	mov	r3, r0
 80076a8:	b29a      	uxth	r2, r3
 80076aa:	897b      	ldrh	r3, [r7, #10]
 80076ac:	4413      	add	r3, r2
 80076ae:	b29b      	uxth	r3, r3
 80076b0:	817b      	strh	r3, [r7, #10]
        }
    } while (*str != 0);
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d1d6      	bne.n	8007668 <hagl_put_text+0x3c>

    return x0 - original;
 80076ba:	897a      	ldrh	r2, [r7, #10]
 80076bc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80076be:	1ad3      	subs	r3, r2, r3
 80076c0:	b29b      	uxth	r3, r3
}
 80076c2:	4618      	mov	r0, r3
 80076c4:	3728      	adds	r7, #40	; 0x28
 80076c6:	46bd      	mov	sp, r7
 80076c8:	bd80      	pop	{r7, pc}

080076ca <hagl_blit>:
 * configurable source and destination see the file blit.c.
 *
 * TODO: Handle transparency.
 */

void hagl_blit(int16_t x0, int16_t y0, bitmap_t *source) {
 80076ca:	b580      	push	{r7, lr}
 80076cc:	b086      	sub	sp, #24
 80076ce:	af00      	add	r7, sp, #0
 80076d0:	4603      	mov	r3, r0
 80076d2:	603a      	str	r2, [r7, #0]
 80076d4:	80fb      	strh	r3, [r7, #6]
 80076d6:	460b      	mov	r3, r1
 80076d8:	80bb      	strh	r3, [r7, #4]
        /* Inside of bounds, can use HAL provided blit. */
        hagl_hal_blit(x0, y0, source);
    }
#else
    color_t color;
    color_t *ptr = (color_t *) source->buffer;
 80076da:	683b      	ldr	r3, [r7, #0]
 80076dc:	68db      	ldr	r3, [r3, #12]
 80076de:	617b      	str	r3, [r7, #20]

    for (uint16_t y = 0; y < source->height; y++) {
 80076e0:	2300      	movs	r3, #0
 80076e2:	827b      	strh	r3, [r7, #18]
 80076e4:	e020      	b.n	8007728 <hagl_blit+0x5e>
        for (uint16_t x = 0; x < source->width; x++) {
 80076e6:	2300      	movs	r3, #0
 80076e8:	823b      	strh	r3, [r7, #16]
 80076ea:	e015      	b.n	8007718 <hagl_blit+0x4e>
            color = *(ptr++);
 80076ec:	697b      	ldr	r3, [r7, #20]
 80076ee:	1c9a      	adds	r2, r3, #2
 80076f0:	617a      	str	r2, [r7, #20]
 80076f2:	881b      	ldrh	r3, [r3, #0]
 80076f4:	81fb      	strh	r3, [r7, #14]
            hagl_put_pixel(x0 + x, y0 + y, color);
 80076f6:	88fa      	ldrh	r2, [r7, #6]
 80076f8:	8a3b      	ldrh	r3, [r7, #16]
 80076fa:	4413      	add	r3, r2
 80076fc:	b29b      	uxth	r3, r3
 80076fe:	b218      	sxth	r0, r3
 8007700:	88ba      	ldrh	r2, [r7, #4]
 8007702:	8a7b      	ldrh	r3, [r7, #18]
 8007704:	4413      	add	r3, r2
 8007706:	b29b      	uxth	r3, r3
 8007708:	b21b      	sxth	r3, r3
 800770a:	89fa      	ldrh	r2, [r7, #14]
 800770c:	4619      	mov	r1, r3
 800770e:	f7ff fe5d 	bl	80073cc <hagl_put_pixel>
        for (uint16_t x = 0; x < source->width; x++) {
 8007712:	8a3b      	ldrh	r3, [r7, #16]
 8007714:	3301      	adds	r3, #1
 8007716:	823b      	strh	r3, [r7, #16]
 8007718:	683b      	ldr	r3, [r7, #0]
 800771a:	881b      	ldrh	r3, [r3, #0]
 800771c:	8a3a      	ldrh	r2, [r7, #16]
 800771e:	429a      	cmp	r2, r3
 8007720:	d3e4      	bcc.n	80076ec <hagl_blit+0x22>
    for (uint16_t y = 0; y < source->height; y++) {
 8007722:	8a7b      	ldrh	r3, [r7, #18]
 8007724:	3301      	adds	r3, #1
 8007726:	827b      	strh	r3, [r7, #18]
 8007728:	683b      	ldr	r3, [r7, #0]
 800772a:	885b      	ldrh	r3, [r3, #2]
 800772c:	8a7a      	ldrh	r2, [r7, #18]
 800772e:	429a      	cmp	r2, r3
 8007730:	d3d9      	bcc.n	80076e6 <hagl_blit+0x1c>
        }
    }
#endif
};
 8007732:	bf00      	nop
 8007734:	bf00      	nop
 8007736:	3718      	adds	r7, #24
 8007738:	46bd      	mov	sp, r7
 800773a:	bd80      	pop	{r7, pc}

0800773c <__errno>:
 800773c:	4b01      	ldr	r3, [pc, #4]	; (8007744 <__errno+0x8>)
 800773e:	6818      	ldr	r0, [r3, #0]
 8007740:	4770      	bx	lr
 8007742:	bf00      	nop
 8007744:	2000001c 	.word	0x2000001c

08007748 <__sflush_r>:
 8007748:	898a      	ldrh	r2, [r1, #12]
 800774a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800774e:	4605      	mov	r5, r0
 8007750:	0710      	lsls	r0, r2, #28
 8007752:	460c      	mov	r4, r1
 8007754:	d458      	bmi.n	8007808 <__sflush_r+0xc0>
 8007756:	684b      	ldr	r3, [r1, #4]
 8007758:	2b00      	cmp	r3, #0
 800775a:	dc05      	bgt.n	8007768 <__sflush_r+0x20>
 800775c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800775e:	2b00      	cmp	r3, #0
 8007760:	dc02      	bgt.n	8007768 <__sflush_r+0x20>
 8007762:	2000      	movs	r0, #0
 8007764:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007768:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800776a:	2e00      	cmp	r6, #0
 800776c:	d0f9      	beq.n	8007762 <__sflush_r+0x1a>
 800776e:	2300      	movs	r3, #0
 8007770:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007774:	682f      	ldr	r7, [r5, #0]
 8007776:	602b      	str	r3, [r5, #0]
 8007778:	d032      	beq.n	80077e0 <__sflush_r+0x98>
 800777a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800777c:	89a3      	ldrh	r3, [r4, #12]
 800777e:	075a      	lsls	r2, r3, #29
 8007780:	d505      	bpl.n	800778e <__sflush_r+0x46>
 8007782:	6863      	ldr	r3, [r4, #4]
 8007784:	1ac0      	subs	r0, r0, r3
 8007786:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007788:	b10b      	cbz	r3, 800778e <__sflush_r+0x46>
 800778a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800778c:	1ac0      	subs	r0, r0, r3
 800778e:	2300      	movs	r3, #0
 8007790:	4602      	mov	r2, r0
 8007792:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007794:	6a21      	ldr	r1, [r4, #32]
 8007796:	4628      	mov	r0, r5
 8007798:	47b0      	blx	r6
 800779a:	1c43      	adds	r3, r0, #1
 800779c:	89a3      	ldrh	r3, [r4, #12]
 800779e:	d106      	bne.n	80077ae <__sflush_r+0x66>
 80077a0:	6829      	ldr	r1, [r5, #0]
 80077a2:	291d      	cmp	r1, #29
 80077a4:	d82c      	bhi.n	8007800 <__sflush_r+0xb8>
 80077a6:	4a2a      	ldr	r2, [pc, #168]	; (8007850 <__sflush_r+0x108>)
 80077a8:	40ca      	lsrs	r2, r1
 80077aa:	07d6      	lsls	r6, r2, #31
 80077ac:	d528      	bpl.n	8007800 <__sflush_r+0xb8>
 80077ae:	2200      	movs	r2, #0
 80077b0:	6062      	str	r2, [r4, #4]
 80077b2:	04d9      	lsls	r1, r3, #19
 80077b4:	6922      	ldr	r2, [r4, #16]
 80077b6:	6022      	str	r2, [r4, #0]
 80077b8:	d504      	bpl.n	80077c4 <__sflush_r+0x7c>
 80077ba:	1c42      	adds	r2, r0, #1
 80077bc:	d101      	bne.n	80077c2 <__sflush_r+0x7a>
 80077be:	682b      	ldr	r3, [r5, #0]
 80077c0:	b903      	cbnz	r3, 80077c4 <__sflush_r+0x7c>
 80077c2:	6560      	str	r0, [r4, #84]	; 0x54
 80077c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80077c6:	602f      	str	r7, [r5, #0]
 80077c8:	2900      	cmp	r1, #0
 80077ca:	d0ca      	beq.n	8007762 <__sflush_r+0x1a>
 80077cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80077d0:	4299      	cmp	r1, r3
 80077d2:	d002      	beq.n	80077da <__sflush_r+0x92>
 80077d4:	4628      	mov	r0, r5
 80077d6:	f000 fa11 	bl	8007bfc <_free_r>
 80077da:	2000      	movs	r0, #0
 80077dc:	6360      	str	r0, [r4, #52]	; 0x34
 80077de:	e7c1      	b.n	8007764 <__sflush_r+0x1c>
 80077e0:	6a21      	ldr	r1, [r4, #32]
 80077e2:	2301      	movs	r3, #1
 80077e4:	4628      	mov	r0, r5
 80077e6:	47b0      	blx	r6
 80077e8:	1c41      	adds	r1, r0, #1
 80077ea:	d1c7      	bne.n	800777c <__sflush_r+0x34>
 80077ec:	682b      	ldr	r3, [r5, #0]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d0c4      	beq.n	800777c <__sflush_r+0x34>
 80077f2:	2b1d      	cmp	r3, #29
 80077f4:	d001      	beq.n	80077fa <__sflush_r+0xb2>
 80077f6:	2b16      	cmp	r3, #22
 80077f8:	d101      	bne.n	80077fe <__sflush_r+0xb6>
 80077fa:	602f      	str	r7, [r5, #0]
 80077fc:	e7b1      	b.n	8007762 <__sflush_r+0x1a>
 80077fe:	89a3      	ldrh	r3, [r4, #12]
 8007800:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007804:	81a3      	strh	r3, [r4, #12]
 8007806:	e7ad      	b.n	8007764 <__sflush_r+0x1c>
 8007808:	690f      	ldr	r7, [r1, #16]
 800780a:	2f00      	cmp	r7, #0
 800780c:	d0a9      	beq.n	8007762 <__sflush_r+0x1a>
 800780e:	0793      	lsls	r3, r2, #30
 8007810:	680e      	ldr	r6, [r1, #0]
 8007812:	bf08      	it	eq
 8007814:	694b      	ldreq	r3, [r1, #20]
 8007816:	600f      	str	r7, [r1, #0]
 8007818:	bf18      	it	ne
 800781a:	2300      	movne	r3, #0
 800781c:	eba6 0807 	sub.w	r8, r6, r7
 8007820:	608b      	str	r3, [r1, #8]
 8007822:	f1b8 0f00 	cmp.w	r8, #0
 8007826:	dd9c      	ble.n	8007762 <__sflush_r+0x1a>
 8007828:	6a21      	ldr	r1, [r4, #32]
 800782a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800782c:	4643      	mov	r3, r8
 800782e:	463a      	mov	r2, r7
 8007830:	4628      	mov	r0, r5
 8007832:	47b0      	blx	r6
 8007834:	2800      	cmp	r0, #0
 8007836:	dc06      	bgt.n	8007846 <__sflush_r+0xfe>
 8007838:	89a3      	ldrh	r3, [r4, #12]
 800783a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800783e:	81a3      	strh	r3, [r4, #12]
 8007840:	f04f 30ff 	mov.w	r0, #4294967295
 8007844:	e78e      	b.n	8007764 <__sflush_r+0x1c>
 8007846:	4407      	add	r7, r0
 8007848:	eba8 0800 	sub.w	r8, r8, r0
 800784c:	e7e9      	b.n	8007822 <__sflush_r+0xda>
 800784e:	bf00      	nop
 8007850:	20400001 	.word	0x20400001

08007854 <_fflush_r>:
 8007854:	b538      	push	{r3, r4, r5, lr}
 8007856:	690b      	ldr	r3, [r1, #16]
 8007858:	4605      	mov	r5, r0
 800785a:	460c      	mov	r4, r1
 800785c:	b913      	cbnz	r3, 8007864 <_fflush_r+0x10>
 800785e:	2500      	movs	r5, #0
 8007860:	4628      	mov	r0, r5
 8007862:	bd38      	pop	{r3, r4, r5, pc}
 8007864:	b118      	cbz	r0, 800786e <_fflush_r+0x1a>
 8007866:	6983      	ldr	r3, [r0, #24]
 8007868:	b90b      	cbnz	r3, 800786e <_fflush_r+0x1a>
 800786a:	f000 f887 	bl	800797c <__sinit>
 800786e:	4b14      	ldr	r3, [pc, #80]	; (80078c0 <_fflush_r+0x6c>)
 8007870:	429c      	cmp	r4, r3
 8007872:	d11b      	bne.n	80078ac <_fflush_r+0x58>
 8007874:	686c      	ldr	r4, [r5, #4]
 8007876:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800787a:	2b00      	cmp	r3, #0
 800787c:	d0ef      	beq.n	800785e <_fflush_r+0xa>
 800787e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007880:	07d0      	lsls	r0, r2, #31
 8007882:	d404      	bmi.n	800788e <_fflush_r+0x3a>
 8007884:	0599      	lsls	r1, r3, #22
 8007886:	d402      	bmi.n	800788e <_fflush_r+0x3a>
 8007888:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800788a:	f000 f93a 	bl	8007b02 <__retarget_lock_acquire_recursive>
 800788e:	4628      	mov	r0, r5
 8007890:	4621      	mov	r1, r4
 8007892:	f7ff ff59 	bl	8007748 <__sflush_r>
 8007896:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007898:	07da      	lsls	r2, r3, #31
 800789a:	4605      	mov	r5, r0
 800789c:	d4e0      	bmi.n	8007860 <_fflush_r+0xc>
 800789e:	89a3      	ldrh	r3, [r4, #12]
 80078a0:	059b      	lsls	r3, r3, #22
 80078a2:	d4dd      	bmi.n	8007860 <_fflush_r+0xc>
 80078a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80078a6:	f000 f92d 	bl	8007b04 <__retarget_lock_release_recursive>
 80078aa:	e7d9      	b.n	8007860 <_fflush_r+0xc>
 80078ac:	4b05      	ldr	r3, [pc, #20]	; (80078c4 <_fflush_r+0x70>)
 80078ae:	429c      	cmp	r4, r3
 80078b0:	d101      	bne.n	80078b6 <_fflush_r+0x62>
 80078b2:	68ac      	ldr	r4, [r5, #8]
 80078b4:	e7df      	b.n	8007876 <_fflush_r+0x22>
 80078b6:	4b04      	ldr	r3, [pc, #16]	; (80078c8 <_fflush_r+0x74>)
 80078b8:	429c      	cmp	r4, r3
 80078ba:	bf08      	it	eq
 80078bc:	68ec      	ldreq	r4, [r5, #12]
 80078be:	e7da      	b.n	8007876 <_fflush_r+0x22>
 80078c0:	0800e1b8 	.word	0x0800e1b8
 80078c4:	0800e1d8 	.word	0x0800e1d8
 80078c8:	0800e198 	.word	0x0800e198

080078cc <std>:
 80078cc:	2300      	movs	r3, #0
 80078ce:	b510      	push	{r4, lr}
 80078d0:	4604      	mov	r4, r0
 80078d2:	e9c0 3300 	strd	r3, r3, [r0]
 80078d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80078da:	6083      	str	r3, [r0, #8]
 80078dc:	8181      	strh	r1, [r0, #12]
 80078de:	6643      	str	r3, [r0, #100]	; 0x64
 80078e0:	81c2      	strh	r2, [r0, #14]
 80078e2:	6183      	str	r3, [r0, #24]
 80078e4:	4619      	mov	r1, r3
 80078e6:	2208      	movs	r2, #8
 80078e8:	305c      	adds	r0, #92	; 0x5c
 80078ea:	f000 f97f 	bl	8007bec <memset>
 80078ee:	4b05      	ldr	r3, [pc, #20]	; (8007904 <std+0x38>)
 80078f0:	6263      	str	r3, [r4, #36]	; 0x24
 80078f2:	4b05      	ldr	r3, [pc, #20]	; (8007908 <std+0x3c>)
 80078f4:	62a3      	str	r3, [r4, #40]	; 0x28
 80078f6:	4b05      	ldr	r3, [pc, #20]	; (800790c <std+0x40>)
 80078f8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80078fa:	4b05      	ldr	r3, [pc, #20]	; (8007910 <std+0x44>)
 80078fc:	6224      	str	r4, [r4, #32]
 80078fe:	6323      	str	r3, [r4, #48]	; 0x30
 8007900:	bd10      	pop	{r4, pc}
 8007902:	bf00      	nop
 8007904:	08008761 	.word	0x08008761
 8007908:	08008783 	.word	0x08008783
 800790c:	080087bb 	.word	0x080087bb
 8007910:	080087df 	.word	0x080087df

08007914 <_cleanup_r>:
 8007914:	4901      	ldr	r1, [pc, #4]	; (800791c <_cleanup_r+0x8>)
 8007916:	f000 b8af 	b.w	8007a78 <_fwalk_reent>
 800791a:	bf00      	nop
 800791c:	08007855 	.word	0x08007855

08007920 <__sfmoreglue>:
 8007920:	b570      	push	{r4, r5, r6, lr}
 8007922:	1e4a      	subs	r2, r1, #1
 8007924:	2568      	movs	r5, #104	; 0x68
 8007926:	4355      	muls	r5, r2
 8007928:	460e      	mov	r6, r1
 800792a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800792e:	f000 f9b5 	bl	8007c9c <_malloc_r>
 8007932:	4604      	mov	r4, r0
 8007934:	b140      	cbz	r0, 8007948 <__sfmoreglue+0x28>
 8007936:	2100      	movs	r1, #0
 8007938:	e9c0 1600 	strd	r1, r6, [r0]
 800793c:	300c      	adds	r0, #12
 800793e:	60a0      	str	r0, [r4, #8]
 8007940:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007944:	f000 f952 	bl	8007bec <memset>
 8007948:	4620      	mov	r0, r4
 800794a:	bd70      	pop	{r4, r5, r6, pc}

0800794c <__sfp_lock_acquire>:
 800794c:	4801      	ldr	r0, [pc, #4]	; (8007954 <__sfp_lock_acquire+0x8>)
 800794e:	f000 b8d8 	b.w	8007b02 <__retarget_lock_acquire_recursive>
 8007952:	bf00      	nop
 8007954:	2000a448 	.word	0x2000a448

08007958 <__sfp_lock_release>:
 8007958:	4801      	ldr	r0, [pc, #4]	; (8007960 <__sfp_lock_release+0x8>)
 800795a:	f000 b8d3 	b.w	8007b04 <__retarget_lock_release_recursive>
 800795e:	bf00      	nop
 8007960:	2000a448 	.word	0x2000a448

08007964 <__sinit_lock_acquire>:
 8007964:	4801      	ldr	r0, [pc, #4]	; (800796c <__sinit_lock_acquire+0x8>)
 8007966:	f000 b8cc 	b.w	8007b02 <__retarget_lock_acquire_recursive>
 800796a:	bf00      	nop
 800796c:	2000a443 	.word	0x2000a443

08007970 <__sinit_lock_release>:
 8007970:	4801      	ldr	r0, [pc, #4]	; (8007978 <__sinit_lock_release+0x8>)
 8007972:	f000 b8c7 	b.w	8007b04 <__retarget_lock_release_recursive>
 8007976:	bf00      	nop
 8007978:	2000a443 	.word	0x2000a443

0800797c <__sinit>:
 800797c:	b510      	push	{r4, lr}
 800797e:	4604      	mov	r4, r0
 8007980:	f7ff fff0 	bl	8007964 <__sinit_lock_acquire>
 8007984:	69a3      	ldr	r3, [r4, #24]
 8007986:	b11b      	cbz	r3, 8007990 <__sinit+0x14>
 8007988:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800798c:	f7ff bff0 	b.w	8007970 <__sinit_lock_release>
 8007990:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007994:	6523      	str	r3, [r4, #80]	; 0x50
 8007996:	4b13      	ldr	r3, [pc, #76]	; (80079e4 <__sinit+0x68>)
 8007998:	4a13      	ldr	r2, [pc, #76]	; (80079e8 <__sinit+0x6c>)
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	62a2      	str	r2, [r4, #40]	; 0x28
 800799e:	42a3      	cmp	r3, r4
 80079a0:	bf04      	itt	eq
 80079a2:	2301      	moveq	r3, #1
 80079a4:	61a3      	streq	r3, [r4, #24]
 80079a6:	4620      	mov	r0, r4
 80079a8:	f000 f820 	bl	80079ec <__sfp>
 80079ac:	6060      	str	r0, [r4, #4]
 80079ae:	4620      	mov	r0, r4
 80079b0:	f000 f81c 	bl	80079ec <__sfp>
 80079b4:	60a0      	str	r0, [r4, #8]
 80079b6:	4620      	mov	r0, r4
 80079b8:	f000 f818 	bl	80079ec <__sfp>
 80079bc:	2200      	movs	r2, #0
 80079be:	60e0      	str	r0, [r4, #12]
 80079c0:	2104      	movs	r1, #4
 80079c2:	6860      	ldr	r0, [r4, #4]
 80079c4:	f7ff ff82 	bl	80078cc <std>
 80079c8:	68a0      	ldr	r0, [r4, #8]
 80079ca:	2201      	movs	r2, #1
 80079cc:	2109      	movs	r1, #9
 80079ce:	f7ff ff7d 	bl	80078cc <std>
 80079d2:	68e0      	ldr	r0, [r4, #12]
 80079d4:	2202      	movs	r2, #2
 80079d6:	2112      	movs	r1, #18
 80079d8:	f7ff ff78 	bl	80078cc <std>
 80079dc:	2301      	movs	r3, #1
 80079de:	61a3      	str	r3, [r4, #24]
 80079e0:	e7d2      	b.n	8007988 <__sinit+0xc>
 80079e2:	bf00      	nop
 80079e4:	0800e1f8 	.word	0x0800e1f8
 80079e8:	08007915 	.word	0x08007915

080079ec <__sfp>:
 80079ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079ee:	4607      	mov	r7, r0
 80079f0:	f7ff ffac 	bl	800794c <__sfp_lock_acquire>
 80079f4:	4b1e      	ldr	r3, [pc, #120]	; (8007a70 <__sfp+0x84>)
 80079f6:	681e      	ldr	r6, [r3, #0]
 80079f8:	69b3      	ldr	r3, [r6, #24]
 80079fa:	b913      	cbnz	r3, 8007a02 <__sfp+0x16>
 80079fc:	4630      	mov	r0, r6
 80079fe:	f7ff ffbd 	bl	800797c <__sinit>
 8007a02:	3648      	adds	r6, #72	; 0x48
 8007a04:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007a08:	3b01      	subs	r3, #1
 8007a0a:	d503      	bpl.n	8007a14 <__sfp+0x28>
 8007a0c:	6833      	ldr	r3, [r6, #0]
 8007a0e:	b30b      	cbz	r3, 8007a54 <__sfp+0x68>
 8007a10:	6836      	ldr	r6, [r6, #0]
 8007a12:	e7f7      	b.n	8007a04 <__sfp+0x18>
 8007a14:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007a18:	b9d5      	cbnz	r5, 8007a50 <__sfp+0x64>
 8007a1a:	4b16      	ldr	r3, [pc, #88]	; (8007a74 <__sfp+0x88>)
 8007a1c:	60e3      	str	r3, [r4, #12]
 8007a1e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007a22:	6665      	str	r5, [r4, #100]	; 0x64
 8007a24:	f000 f86c 	bl	8007b00 <__retarget_lock_init_recursive>
 8007a28:	f7ff ff96 	bl	8007958 <__sfp_lock_release>
 8007a2c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007a30:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007a34:	6025      	str	r5, [r4, #0]
 8007a36:	61a5      	str	r5, [r4, #24]
 8007a38:	2208      	movs	r2, #8
 8007a3a:	4629      	mov	r1, r5
 8007a3c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007a40:	f000 f8d4 	bl	8007bec <memset>
 8007a44:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007a48:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007a4c:	4620      	mov	r0, r4
 8007a4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a50:	3468      	adds	r4, #104	; 0x68
 8007a52:	e7d9      	b.n	8007a08 <__sfp+0x1c>
 8007a54:	2104      	movs	r1, #4
 8007a56:	4638      	mov	r0, r7
 8007a58:	f7ff ff62 	bl	8007920 <__sfmoreglue>
 8007a5c:	4604      	mov	r4, r0
 8007a5e:	6030      	str	r0, [r6, #0]
 8007a60:	2800      	cmp	r0, #0
 8007a62:	d1d5      	bne.n	8007a10 <__sfp+0x24>
 8007a64:	f7ff ff78 	bl	8007958 <__sfp_lock_release>
 8007a68:	230c      	movs	r3, #12
 8007a6a:	603b      	str	r3, [r7, #0]
 8007a6c:	e7ee      	b.n	8007a4c <__sfp+0x60>
 8007a6e:	bf00      	nop
 8007a70:	0800e1f8 	.word	0x0800e1f8
 8007a74:	ffff0001 	.word	0xffff0001

08007a78 <_fwalk_reent>:
 8007a78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a7c:	4606      	mov	r6, r0
 8007a7e:	4688      	mov	r8, r1
 8007a80:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007a84:	2700      	movs	r7, #0
 8007a86:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007a8a:	f1b9 0901 	subs.w	r9, r9, #1
 8007a8e:	d505      	bpl.n	8007a9c <_fwalk_reent+0x24>
 8007a90:	6824      	ldr	r4, [r4, #0]
 8007a92:	2c00      	cmp	r4, #0
 8007a94:	d1f7      	bne.n	8007a86 <_fwalk_reent+0xe>
 8007a96:	4638      	mov	r0, r7
 8007a98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a9c:	89ab      	ldrh	r3, [r5, #12]
 8007a9e:	2b01      	cmp	r3, #1
 8007aa0:	d907      	bls.n	8007ab2 <_fwalk_reent+0x3a>
 8007aa2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007aa6:	3301      	adds	r3, #1
 8007aa8:	d003      	beq.n	8007ab2 <_fwalk_reent+0x3a>
 8007aaa:	4629      	mov	r1, r5
 8007aac:	4630      	mov	r0, r6
 8007aae:	47c0      	blx	r8
 8007ab0:	4307      	orrs	r7, r0
 8007ab2:	3568      	adds	r5, #104	; 0x68
 8007ab4:	e7e9      	b.n	8007a8a <_fwalk_reent+0x12>
	...

08007ab8 <__libc_init_array>:
 8007ab8:	b570      	push	{r4, r5, r6, lr}
 8007aba:	4d0d      	ldr	r5, [pc, #52]	; (8007af0 <__libc_init_array+0x38>)
 8007abc:	4c0d      	ldr	r4, [pc, #52]	; (8007af4 <__libc_init_array+0x3c>)
 8007abe:	1b64      	subs	r4, r4, r5
 8007ac0:	10a4      	asrs	r4, r4, #2
 8007ac2:	2600      	movs	r6, #0
 8007ac4:	42a6      	cmp	r6, r4
 8007ac6:	d109      	bne.n	8007adc <__libc_init_array+0x24>
 8007ac8:	4d0b      	ldr	r5, [pc, #44]	; (8007af8 <__libc_init_array+0x40>)
 8007aca:	4c0c      	ldr	r4, [pc, #48]	; (8007afc <__libc_init_array+0x44>)
 8007acc:	f003 faea 	bl	800b0a4 <_init>
 8007ad0:	1b64      	subs	r4, r4, r5
 8007ad2:	10a4      	asrs	r4, r4, #2
 8007ad4:	2600      	movs	r6, #0
 8007ad6:	42a6      	cmp	r6, r4
 8007ad8:	d105      	bne.n	8007ae6 <__libc_init_array+0x2e>
 8007ada:	bd70      	pop	{r4, r5, r6, pc}
 8007adc:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ae0:	4798      	blx	r3
 8007ae2:	3601      	adds	r6, #1
 8007ae4:	e7ee      	b.n	8007ac4 <__libc_init_array+0xc>
 8007ae6:	f855 3b04 	ldr.w	r3, [r5], #4
 8007aea:	4798      	blx	r3
 8007aec:	3601      	adds	r6, #1
 8007aee:	e7f2      	b.n	8007ad6 <__libc_init_array+0x1e>
 8007af0:	0800e738 	.word	0x0800e738
 8007af4:	0800e738 	.word	0x0800e738
 8007af8:	0800e738 	.word	0x0800e738
 8007afc:	0800e73c 	.word	0x0800e73c

08007b00 <__retarget_lock_init_recursive>:
 8007b00:	4770      	bx	lr

08007b02 <__retarget_lock_acquire_recursive>:
 8007b02:	4770      	bx	lr

08007b04 <__retarget_lock_release_recursive>:
 8007b04:	4770      	bx	lr

08007b06 <__swhatbuf_r>:
 8007b06:	b570      	push	{r4, r5, r6, lr}
 8007b08:	460e      	mov	r6, r1
 8007b0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b0e:	2900      	cmp	r1, #0
 8007b10:	b096      	sub	sp, #88	; 0x58
 8007b12:	4614      	mov	r4, r2
 8007b14:	461d      	mov	r5, r3
 8007b16:	da07      	bge.n	8007b28 <__swhatbuf_r+0x22>
 8007b18:	2300      	movs	r3, #0
 8007b1a:	602b      	str	r3, [r5, #0]
 8007b1c:	89b3      	ldrh	r3, [r6, #12]
 8007b1e:	061a      	lsls	r2, r3, #24
 8007b20:	d410      	bmi.n	8007b44 <__swhatbuf_r+0x3e>
 8007b22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007b26:	e00e      	b.n	8007b46 <__swhatbuf_r+0x40>
 8007b28:	466a      	mov	r2, sp
 8007b2a:	f001 fded 	bl	8009708 <_fstat_r>
 8007b2e:	2800      	cmp	r0, #0
 8007b30:	dbf2      	blt.n	8007b18 <__swhatbuf_r+0x12>
 8007b32:	9a01      	ldr	r2, [sp, #4]
 8007b34:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007b38:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007b3c:	425a      	negs	r2, r3
 8007b3e:	415a      	adcs	r2, r3
 8007b40:	602a      	str	r2, [r5, #0]
 8007b42:	e7ee      	b.n	8007b22 <__swhatbuf_r+0x1c>
 8007b44:	2340      	movs	r3, #64	; 0x40
 8007b46:	2000      	movs	r0, #0
 8007b48:	6023      	str	r3, [r4, #0]
 8007b4a:	b016      	add	sp, #88	; 0x58
 8007b4c:	bd70      	pop	{r4, r5, r6, pc}
	...

08007b50 <__smakebuf_r>:
 8007b50:	898b      	ldrh	r3, [r1, #12]
 8007b52:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007b54:	079d      	lsls	r5, r3, #30
 8007b56:	4606      	mov	r6, r0
 8007b58:	460c      	mov	r4, r1
 8007b5a:	d507      	bpl.n	8007b6c <__smakebuf_r+0x1c>
 8007b5c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007b60:	6023      	str	r3, [r4, #0]
 8007b62:	6123      	str	r3, [r4, #16]
 8007b64:	2301      	movs	r3, #1
 8007b66:	6163      	str	r3, [r4, #20]
 8007b68:	b002      	add	sp, #8
 8007b6a:	bd70      	pop	{r4, r5, r6, pc}
 8007b6c:	ab01      	add	r3, sp, #4
 8007b6e:	466a      	mov	r2, sp
 8007b70:	f7ff ffc9 	bl	8007b06 <__swhatbuf_r>
 8007b74:	9900      	ldr	r1, [sp, #0]
 8007b76:	4605      	mov	r5, r0
 8007b78:	4630      	mov	r0, r6
 8007b7a:	f000 f88f 	bl	8007c9c <_malloc_r>
 8007b7e:	b948      	cbnz	r0, 8007b94 <__smakebuf_r+0x44>
 8007b80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b84:	059a      	lsls	r2, r3, #22
 8007b86:	d4ef      	bmi.n	8007b68 <__smakebuf_r+0x18>
 8007b88:	f023 0303 	bic.w	r3, r3, #3
 8007b8c:	f043 0302 	orr.w	r3, r3, #2
 8007b90:	81a3      	strh	r3, [r4, #12]
 8007b92:	e7e3      	b.n	8007b5c <__smakebuf_r+0xc>
 8007b94:	4b0d      	ldr	r3, [pc, #52]	; (8007bcc <__smakebuf_r+0x7c>)
 8007b96:	62b3      	str	r3, [r6, #40]	; 0x28
 8007b98:	89a3      	ldrh	r3, [r4, #12]
 8007b9a:	6020      	str	r0, [r4, #0]
 8007b9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ba0:	81a3      	strh	r3, [r4, #12]
 8007ba2:	9b00      	ldr	r3, [sp, #0]
 8007ba4:	6163      	str	r3, [r4, #20]
 8007ba6:	9b01      	ldr	r3, [sp, #4]
 8007ba8:	6120      	str	r0, [r4, #16]
 8007baa:	b15b      	cbz	r3, 8007bc4 <__smakebuf_r+0x74>
 8007bac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007bb0:	4630      	mov	r0, r6
 8007bb2:	f001 fdbb 	bl	800972c <_isatty_r>
 8007bb6:	b128      	cbz	r0, 8007bc4 <__smakebuf_r+0x74>
 8007bb8:	89a3      	ldrh	r3, [r4, #12]
 8007bba:	f023 0303 	bic.w	r3, r3, #3
 8007bbe:	f043 0301 	orr.w	r3, r3, #1
 8007bc2:	81a3      	strh	r3, [r4, #12]
 8007bc4:	89a0      	ldrh	r0, [r4, #12]
 8007bc6:	4305      	orrs	r5, r0
 8007bc8:	81a5      	strh	r5, [r4, #12]
 8007bca:	e7cd      	b.n	8007b68 <__smakebuf_r+0x18>
 8007bcc:	08007915 	.word	0x08007915

08007bd0 <memcpy>:
 8007bd0:	440a      	add	r2, r1
 8007bd2:	4291      	cmp	r1, r2
 8007bd4:	f100 33ff 	add.w	r3, r0, #4294967295
 8007bd8:	d100      	bne.n	8007bdc <memcpy+0xc>
 8007bda:	4770      	bx	lr
 8007bdc:	b510      	push	{r4, lr}
 8007bde:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007be2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007be6:	4291      	cmp	r1, r2
 8007be8:	d1f9      	bne.n	8007bde <memcpy+0xe>
 8007bea:	bd10      	pop	{r4, pc}

08007bec <memset>:
 8007bec:	4402      	add	r2, r0
 8007bee:	4603      	mov	r3, r0
 8007bf0:	4293      	cmp	r3, r2
 8007bf2:	d100      	bne.n	8007bf6 <memset+0xa>
 8007bf4:	4770      	bx	lr
 8007bf6:	f803 1b01 	strb.w	r1, [r3], #1
 8007bfa:	e7f9      	b.n	8007bf0 <memset+0x4>

08007bfc <_free_r>:
 8007bfc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007bfe:	2900      	cmp	r1, #0
 8007c00:	d048      	beq.n	8007c94 <_free_r+0x98>
 8007c02:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007c06:	9001      	str	r0, [sp, #4]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	f1a1 0404 	sub.w	r4, r1, #4
 8007c0e:	bfb8      	it	lt
 8007c10:	18e4      	addlt	r4, r4, r3
 8007c12:	f001 fdb9 	bl	8009788 <__malloc_lock>
 8007c16:	4a20      	ldr	r2, [pc, #128]	; (8007c98 <_free_r+0x9c>)
 8007c18:	9801      	ldr	r0, [sp, #4]
 8007c1a:	6813      	ldr	r3, [r2, #0]
 8007c1c:	4615      	mov	r5, r2
 8007c1e:	b933      	cbnz	r3, 8007c2e <_free_r+0x32>
 8007c20:	6063      	str	r3, [r4, #4]
 8007c22:	6014      	str	r4, [r2, #0]
 8007c24:	b003      	add	sp, #12
 8007c26:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007c2a:	f001 bdb3 	b.w	8009794 <__malloc_unlock>
 8007c2e:	42a3      	cmp	r3, r4
 8007c30:	d90b      	bls.n	8007c4a <_free_r+0x4e>
 8007c32:	6821      	ldr	r1, [r4, #0]
 8007c34:	1862      	adds	r2, r4, r1
 8007c36:	4293      	cmp	r3, r2
 8007c38:	bf04      	itt	eq
 8007c3a:	681a      	ldreq	r2, [r3, #0]
 8007c3c:	685b      	ldreq	r3, [r3, #4]
 8007c3e:	6063      	str	r3, [r4, #4]
 8007c40:	bf04      	itt	eq
 8007c42:	1852      	addeq	r2, r2, r1
 8007c44:	6022      	streq	r2, [r4, #0]
 8007c46:	602c      	str	r4, [r5, #0]
 8007c48:	e7ec      	b.n	8007c24 <_free_r+0x28>
 8007c4a:	461a      	mov	r2, r3
 8007c4c:	685b      	ldr	r3, [r3, #4]
 8007c4e:	b10b      	cbz	r3, 8007c54 <_free_r+0x58>
 8007c50:	42a3      	cmp	r3, r4
 8007c52:	d9fa      	bls.n	8007c4a <_free_r+0x4e>
 8007c54:	6811      	ldr	r1, [r2, #0]
 8007c56:	1855      	adds	r5, r2, r1
 8007c58:	42a5      	cmp	r5, r4
 8007c5a:	d10b      	bne.n	8007c74 <_free_r+0x78>
 8007c5c:	6824      	ldr	r4, [r4, #0]
 8007c5e:	4421      	add	r1, r4
 8007c60:	1854      	adds	r4, r2, r1
 8007c62:	42a3      	cmp	r3, r4
 8007c64:	6011      	str	r1, [r2, #0]
 8007c66:	d1dd      	bne.n	8007c24 <_free_r+0x28>
 8007c68:	681c      	ldr	r4, [r3, #0]
 8007c6a:	685b      	ldr	r3, [r3, #4]
 8007c6c:	6053      	str	r3, [r2, #4]
 8007c6e:	4421      	add	r1, r4
 8007c70:	6011      	str	r1, [r2, #0]
 8007c72:	e7d7      	b.n	8007c24 <_free_r+0x28>
 8007c74:	d902      	bls.n	8007c7c <_free_r+0x80>
 8007c76:	230c      	movs	r3, #12
 8007c78:	6003      	str	r3, [r0, #0]
 8007c7a:	e7d3      	b.n	8007c24 <_free_r+0x28>
 8007c7c:	6825      	ldr	r5, [r4, #0]
 8007c7e:	1961      	adds	r1, r4, r5
 8007c80:	428b      	cmp	r3, r1
 8007c82:	bf04      	itt	eq
 8007c84:	6819      	ldreq	r1, [r3, #0]
 8007c86:	685b      	ldreq	r3, [r3, #4]
 8007c88:	6063      	str	r3, [r4, #4]
 8007c8a:	bf04      	itt	eq
 8007c8c:	1949      	addeq	r1, r1, r5
 8007c8e:	6021      	streq	r1, [r4, #0]
 8007c90:	6054      	str	r4, [r2, #4]
 8007c92:	e7c7      	b.n	8007c24 <_free_r+0x28>
 8007c94:	b003      	add	sp, #12
 8007c96:	bd30      	pop	{r4, r5, pc}
 8007c98:	2000a21c 	.word	0x2000a21c

08007c9c <_malloc_r>:
 8007c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c9e:	1ccd      	adds	r5, r1, #3
 8007ca0:	f025 0503 	bic.w	r5, r5, #3
 8007ca4:	3508      	adds	r5, #8
 8007ca6:	2d0c      	cmp	r5, #12
 8007ca8:	bf38      	it	cc
 8007caa:	250c      	movcc	r5, #12
 8007cac:	2d00      	cmp	r5, #0
 8007cae:	4606      	mov	r6, r0
 8007cb0:	db01      	blt.n	8007cb6 <_malloc_r+0x1a>
 8007cb2:	42a9      	cmp	r1, r5
 8007cb4:	d903      	bls.n	8007cbe <_malloc_r+0x22>
 8007cb6:	230c      	movs	r3, #12
 8007cb8:	6033      	str	r3, [r6, #0]
 8007cba:	2000      	movs	r0, #0
 8007cbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007cbe:	f001 fd63 	bl	8009788 <__malloc_lock>
 8007cc2:	4921      	ldr	r1, [pc, #132]	; (8007d48 <_malloc_r+0xac>)
 8007cc4:	680a      	ldr	r2, [r1, #0]
 8007cc6:	4614      	mov	r4, r2
 8007cc8:	b99c      	cbnz	r4, 8007cf2 <_malloc_r+0x56>
 8007cca:	4f20      	ldr	r7, [pc, #128]	; (8007d4c <_malloc_r+0xb0>)
 8007ccc:	683b      	ldr	r3, [r7, #0]
 8007cce:	b923      	cbnz	r3, 8007cda <_malloc_r+0x3e>
 8007cd0:	4621      	mov	r1, r4
 8007cd2:	4630      	mov	r0, r6
 8007cd4:	f000 fd34 	bl	8008740 <_sbrk_r>
 8007cd8:	6038      	str	r0, [r7, #0]
 8007cda:	4629      	mov	r1, r5
 8007cdc:	4630      	mov	r0, r6
 8007cde:	f000 fd2f 	bl	8008740 <_sbrk_r>
 8007ce2:	1c43      	adds	r3, r0, #1
 8007ce4:	d123      	bne.n	8007d2e <_malloc_r+0x92>
 8007ce6:	230c      	movs	r3, #12
 8007ce8:	6033      	str	r3, [r6, #0]
 8007cea:	4630      	mov	r0, r6
 8007cec:	f001 fd52 	bl	8009794 <__malloc_unlock>
 8007cf0:	e7e3      	b.n	8007cba <_malloc_r+0x1e>
 8007cf2:	6823      	ldr	r3, [r4, #0]
 8007cf4:	1b5b      	subs	r3, r3, r5
 8007cf6:	d417      	bmi.n	8007d28 <_malloc_r+0x8c>
 8007cf8:	2b0b      	cmp	r3, #11
 8007cfa:	d903      	bls.n	8007d04 <_malloc_r+0x68>
 8007cfc:	6023      	str	r3, [r4, #0]
 8007cfe:	441c      	add	r4, r3
 8007d00:	6025      	str	r5, [r4, #0]
 8007d02:	e004      	b.n	8007d0e <_malloc_r+0x72>
 8007d04:	6863      	ldr	r3, [r4, #4]
 8007d06:	42a2      	cmp	r2, r4
 8007d08:	bf0c      	ite	eq
 8007d0a:	600b      	streq	r3, [r1, #0]
 8007d0c:	6053      	strne	r3, [r2, #4]
 8007d0e:	4630      	mov	r0, r6
 8007d10:	f001 fd40 	bl	8009794 <__malloc_unlock>
 8007d14:	f104 000b 	add.w	r0, r4, #11
 8007d18:	1d23      	adds	r3, r4, #4
 8007d1a:	f020 0007 	bic.w	r0, r0, #7
 8007d1e:	1ac2      	subs	r2, r0, r3
 8007d20:	d0cc      	beq.n	8007cbc <_malloc_r+0x20>
 8007d22:	1a1b      	subs	r3, r3, r0
 8007d24:	50a3      	str	r3, [r4, r2]
 8007d26:	e7c9      	b.n	8007cbc <_malloc_r+0x20>
 8007d28:	4622      	mov	r2, r4
 8007d2a:	6864      	ldr	r4, [r4, #4]
 8007d2c:	e7cc      	b.n	8007cc8 <_malloc_r+0x2c>
 8007d2e:	1cc4      	adds	r4, r0, #3
 8007d30:	f024 0403 	bic.w	r4, r4, #3
 8007d34:	42a0      	cmp	r0, r4
 8007d36:	d0e3      	beq.n	8007d00 <_malloc_r+0x64>
 8007d38:	1a21      	subs	r1, r4, r0
 8007d3a:	4630      	mov	r0, r6
 8007d3c:	f000 fd00 	bl	8008740 <_sbrk_r>
 8007d40:	3001      	adds	r0, #1
 8007d42:	d1dd      	bne.n	8007d00 <_malloc_r+0x64>
 8007d44:	e7cf      	b.n	8007ce6 <_malloc_r+0x4a>
 8007d46:	bf00      	nop
 8007d48:	2000a21c 	.word	0x2000a21c
 8007d4c:	2000a220 	.word	0x2000a220

08007d50 <__cvt>:
 8007d50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007d54:	ec55 4b10 	vmov	r4, r5, d0
 8007d58:	2d00      	cmp	r5, #0
 8007d5a:	460e      	mov	r6, r1
 8007d5c:	4619      	mov	r1, r3
 8007d5e:	462b      	mov	r3, r5
 8007d60:	bfbb      	ittet	lt
 8007d62:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007d66:	461d      	movlt	r5, r3
 8007d68:	2300      	movge	r3, #0
 8007d6a:	232d      	movlt	r3, #45	; 0x2d
 8007d6c:	700b      	strb	r3, [r1, #0]
 8007d6e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007d70:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007d74:	4691      	mov	r9, r2
 8007d76:	f023 0820 	bic.w	r8, r3, #32
 8007d7a:	bfbc      	itt	lt
 8007d7c:	4622      	movlt	r2, r4
 8007d7e:	4614      	movlt	r4, r2
 8007d80:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007d84:	d005      	beq.n	8007d92 <__cvt+0x42>
 8007d86:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007d8a:	d100      	bne.n	8007d8e <__cvt+0x3e>
 8007d8c:	3601      	adds	r6, #1
 8007d8e:	2102      	movs	r1, #2
 8007d90:	e000      	b.n	8007d94 <__cvt+0x44>
 8007d92:	2103      	movs	r1, #3
 8007d94:	ab03      	add	r3, sp, #12
 8007d96:	9301      	str	r3, [sp, #4]
 8007d98:	ab02      	add	r3, sp, #8
 8007d9a:	9300      	str	r3, [sp, #0]
 8007d9c:	ec45 4b10 	vmov	d0, r4, r5
 8007da0:	4653      	mov	r3, sl
 8007da2:	4632      	mov	r2, r6
 8007da4:	f000 fec4 	bl	8008b30 <_dtoa_r>
 8007da8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007dac:	4607      	mov	r7, r0
 8007dae:	d102      	bne.n	8007db6 <__cvt+0x66>
 8007db0:	f019 0f01 	tst.w	r9, #1
 8007db4:	d022      	beq.n	8007dfc <__cvt+0xac>
 8007db6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007dba:	eb07 0906 	add.w	r9, r7, r6
 8007dbe:	d110      	bne.n	8007de2 <__cvt+0x92>
 8007dc0:	783b      	ldrb	r3, [r7, #0]
 8007dc2:	2b30      	cmp	r3, #48	; 0x30
 8007dc4:	d10a      	bne.n	8007ddc <__cvt+0x8c>
 8007dc6:	2200      	movs	r2, #0
 8007dc8:	2300      	movs	r3, #0
 8007dca:	4620      	mov	r0, r4
 8007dcc:	4629      	mov	r1, r5
 8007dce:	f7f8 fe7b 	bl	8000ac8 <__aeabi_dcmpeq>
 8007dd2:	b918      	cbnz	r0, 8007ddc <__cvt+0x8c>
 8007dd4:	f1c6 0601 	rsb	r6, r6, #1
 8007dd8:	f8ca 6000 	str.w	r6, [sl]
 8007ddc:	f8da 3000 	ldr.w	r3, [sl]
 8007de0:	4499      	add	r9, r3
 8007de2:	2200      	movs	r2, #0
 8007de4:	2300      	movs	r3, #0
 8007de6:	4620      	mov	r0, r4
 8007de8:	4629      	mov	r1, r5
 8007dea:	f7f8 fe6d 	bl	8000ac8 <__aeabi_dcmpeq>
 8007dee:	b108      	cbz	r0, 8007df4 <__cvt+0xa4>
 8007df0:	f8cd 900c 	str.w	r9, [sp, #12]
 8007df4:	2230      	movs	r2, #48	; 0x30
 8007df6:	9b03      	ldr	r3, [sp, #12]
 8007df8:	454b      	cmp	r3, r9
 8007dfa:	d307      	bcc.n	8007e0c <__cvt+0xbc>
 8007dfc:	9b03      	ldr	r3, [sp, #12]
 8007dfe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007e00:	1bdb      	subs	r3, r3, r7
 8007e02:	4638      	mov	r0, r7
 8007e04:	6013      	str	r3, [r2, #0]
 8007e06:	b004      	add	sp, #16
 8007e08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e0c:	1c59      	adds	r1, r3, #1
 8007e0e:	9103      	str	r1, [sp, #12]
 8007e10:	701a      	strb	r2, [r3, #0]
 8007e12:	e7f0      	b.n	8007df6 <__cvt+0xa6>

08007e14 <__exponent>:
 8007e14:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007e16:	4603      	mov	r3, r0
 8007e18:	2900      	cmp	r1, #0
 8007e1a:	bfb8      	it	lt
 8007e1c:	4249      	neglt	r1, r1
 8007e1e:	f803 2b02 	strb.w	r2, [r3], #2
 8007e22:	bfb4      	ite	lt
 8007e24:	222d      	movlt	r2, #45	; 0x2d
 8007e26:	222b      	movge	r2, #43	; 0x2b
 8007e28:	2909      	cmp	r1, #9
 8007e2a:	7042      	strb	r2, [r0, #1]
 8007e2c:	dd2a      	ble.n	8007e84 <__exponent+0x70>
 8007e2e:	f10d 0407 	add.w	r4, sp, #7
 8007e32:	46a4      	mov	ip, r4
 8007e34:	270a      	movs	r7, #10
 8007e36:	46a6      	mov	lr, r4
 8007e38:	460a      	mov	r2, r1
 8007e3a:	fb91 f6f7 	sdiv	r6, r1, r7
 8007e3e:	fb07 1516 	mls	r5, r7, r6, r1
 8007e42:	3530      	adds	r5, #48	; 0x30
 8007e44:	2a63      	cmp	r2, #99	; 0x63
 8007e46:	f104 34ff 	add.w	r4, r4, #4294967295
 8007e4a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007e4e:	4631      	mov	r1, r6
 8007e50:	dcf1      	bgt.n	8007e36 <__exponent+0x22>
 8007e52:	3130      	adds	r1, #48	; 0x30
 8007e54:	f1ae 0502 	sub.w	r5, lr, #2
 8007e58:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007e5c:	1c44      	adds	r4, r0, #1
 8007e5e:	4629      	mov	r1, r5
 8007e60:	4561      	cmp	r1, ip
 8007e62:	d30a      	bcc.n	8007e7a <__exponent+0x66>
 8007e64:	f10d 0209 	add.w	r2, sp, #9
 8007e68:	eba2 020e 	sub.w	r2, r2, lr
 8007e6c:	4565      	cmp	r5, ip
 8007e6e:	bf88      	it	hi
 8007e70:	2200      	movhi	r2, #0
 8007e72:	4413      	add	r3, r2
 8007e74:	1a18      	subs	r0, r3, r0
 8007e76:	b003      	add	sp, #12
 8007e78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e7a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007e7e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007e82:	e7ed      	b.n	8007e60 <__exponent+0x4c>
 8007e84:	2330      	movs	r3, #48	; 0x30
 8007e86:	3130      	adds	r1, #48	; 0x30
 8007e88:	7083      	strb	r3, [r0, #2]
 8007e8a:	70c1      	strb	r1, [r0, #3]
 8007e8c:	1d03      	adds	r3, r0, #4
 8007e8e:	e7f1      	b.n	8007e74 <__exponent+0x60>

08007e90 <_printf_float>:
 8007e90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e94:	ed2d 8b02 	vpush	{d8}
 8007e98:	b08d      	sub	sp, #52	; 0x34
 8007e9a:	460c      	mov	r4, r1
 8007e9c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007ea0:	4616      	mov	r6, r2
 8007ea2:	461f      	mov	r7, r3
 8007ea4:	4605      	mov	r5, r0
 8007ea6:	f001 fc51 	bl	800974c <_localeconv_r>
 8007eaa:	f8d0 a000 	ldr.w	sl, [r0]
 8007eae:	4650      	mov	r0, sl
 8007eb0:	f7f8 f98e 	bl	80001d0 <strlen>
 8007eb4:	2300      	movs	r3, #0
 8007eb6:	930a      	str	r3, [sp, #40]	; 0x28
 8007eb8:	6823      	ldr	r3, [r4, #0]
 8007eba:	9305      	str	r3, [sp, #20]
 8007ebc:	f8d8 3000 	ldr.w	r3, [r8]
 8007ec0:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007ec4:	3307      	adds	r3, #7
 8007ec6:	f023 0307 	bic.w	r3, r3, #7
 8007eca:	f103 0208 	add.w	r2, r3, #8
 8007ece:	f8c8 2000 	str.w	r2, [r8]
 8007ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ed6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007eda:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007ede:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007ee2:	9307      	str	r3, [sp, #28]
 8007ee4:	f8cd 8018 	str.w	r8, [sp, #24]
 8007ee8:	ee08 0a10 	vmov	s16, r0
 8007eec:	4b9f      	ldr	r3, [pc, #636]	; (800816c <_printf_float+0x2dc>)
 8007eee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007ef2:	f04f 32ff 	mov.w	r2, #4294967295
 8007ef6:	f7f8 fe19 	bl	8000b2c <__aeabi_dcmpun>
 8007efa:	bb88      	cbnz	r0, 8007f60 <_printf_float+0xd0>
 8007efc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007f00:	4b9a      	ldr	r3, [pc, #616]	; (800816c <_printf_float+0x2dc>)
 8007f02:	f04f 32ff 	mov.w	r2, #4294967295
 8007f06:	f7f8 fdf3 	bl	8000af0 <__aeabi_dcmple>
 8007f0a:	bb48      	cbnz	r0, 8007f60 <_printf_float+0xd0>
 8007f0c:	2200      	movs	r2, #0
 8007f0e:	2300      	movs	r3, #0
 8007f10:	4640      	mov	r0, r8
 8007f12:	4649      	mov	r1, r9
 8007f14:	f7f8 fde2 	bl	8000adc <__aeabi_dcmplt>
 8007f18:	b110      	cbz	r0, 8007f20 <_printf_float+0x90>
 8007f1a:	232d      	movs	r3, #45	; 0x2d
 8007f1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007f20:	4b93      	ldr	r3, [pc, #588]	; (8008170 <_printf_float+0x2e0>)
 8007f22:	4894      	ldr	r0, [pc, #592]	; (8008174 <_printf_float+0x2e4>)
 8007f24:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007f28:	bf94      	ite	ls
 8007f2a:	4698      	movls	r8, r3
 8007f2c:	4680      	movhi	r8, r0
 8007f2e:	2303      	movs	r3, #3
 8007f30:	6123      	str	r3, [r4, #16]
 8007f32:	9b05      	ldr	r3, [sp, #20]
 8007f34:	f023 0204 	bic.w	r2, r3, #4
 8007f38:	6022      	str	r2, [r4, #0]
 8007f3a:	f04f 0900 	mov.w	r9, #0
 8007f3e:	9700      	str	r7, [sp, #0]
 8007f40:	4633      	mov	r3, r6
 8007f42:	aa0b      	add	r2, sp, #44	; 0x2c
 8007f44:	4621      	mov	r1, r4
 8007f46:	4628      	mov	r0, r5
 8007f48:	f000 f9d8 	bl	80082fc <_printf_common>
 8007f4c:	3001      	adds	r0, #1
 8007f4e:	f040 8090 	bne.w	8008072 <_printf_float+0x1e2>
 8007f52:	f04f 30ff 	mov.w	r0, #4294967295
 8007f56:	b00d      	add	sp, #52	; 0x34
 8007f58:	ecbd 8b02 	vpop	{d8}
 8007f5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f60:	4642      	mov	r2, r8
 8007f62:	464b      	mov	r3, r9
 8007f64:	4640      	mov	r0, r8
 8007f66:	4649      	mov	r1, r9
 8007f68:	f7f8 fde0 	bl	8000b2c <__aeabi_dcmpun>
 8007f6c:	b140      	cbz	r0, 8007f80 <_printf_float+0xf0>
 8007f6e:	464b      	mov	r3, r9
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	bfbc      	itt	lt
 8007f74:	232d      	movlt	r3, #45	; 0x2d
 8007f76:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007f7a:	487f      	ldr	r0, [pc, #508]	; (8008178 <_printf_float+0x2e8>)
 8007f7c:	4b7f      	ldr	r3, [pc, #508]	; (800817c <_printf_float+0x2ec>)
 8007f7e:	e7d1      	b.n	8007f24 <_printf_float+0x94>
 8007f80:	6863      	ldr	r3, [r4, #4]
 8007f82:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007f86:	9206      	str	r2, [sp, #24]
 8007f88:	1c5a      	adds	r2, r3, #1
 8007f8a:	d13f      	bne.n	800800c <_printf_float+0x17c>
 8007f8c:	2306      	movs	r3, #6
 8007f8e:	6063      	str	r3, [r4, #4]
 8007f90:	9b05      	ldr	r3, [sp, #20]
 8007f92:	6861      	ldr	r1, [r4, #4]
 8007f94:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007f98:	2300      	movs	r3, #0
 8007f9a:	9303      	str	r3, [sp, #12]
 8007f9c:	ab0a      	add	r3, sp, #40	; 0x28
 8007f9e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007fa2:	ab09      	add	r3, sp, #36	; 0x24
 8007fa4:	ec49 8b10 	vmov	d0, r8, r9
 8007fa8:	9300      	str	r3, [sp, #0]
 8007faa:	6022      	str	r2, [r4, #0]
 8007fac:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007fb0:	4628      	mov	r0, r5
 8007fb2:	f7ff fecd 	bl	8007d50 <__cvt>
 8007fb6:	9b06      	ldr	r3, [sp, #24]
 8007fb8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007fba:	2b47      	cmp	r3, #71	; 0x47
 8007fbc:	4680      	mov	r8, r0
 8007fbe:	d108      	bne.n	8007fd2 <_printf_float+0x142>
 8007fc0:	1cc8      	adds	r0, r1, #3
 8007fc2:	db02      	blt.n	8007fca <_printf_float+0x13a>
 8007fc4:	6863      	ldr	r3, [r4, #4]
 8007fc6:	4299      	cmp	r1, r3
 8007fc8:	dd41      	ble.n	800804e <_printf_float+0x1be>
 8007fca:	f1ab 0b02 	sub.w	fp, fp, #2
 8007fce:	fa5f fb8b 	uxtb.w	fp, fp
 8007fd2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007fd6:	d820      	bhi.n	800801a <_printf_float+0x18a>
 8007fd8:	3901      	subs	r1, #1
 8007fda:	465a      	mov	r2, fp
 8007fdc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007fe0:	9109      	str	r1, [sp, #36]	; 0x24
 8007fe2:	f7ff ff17 	bl	8007e14 <__exponent>
 8007fe6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007fe8:	1813      	adds	r3, r2, r0
 8007fea:	2a01      	cmp	r2, #1
 8007fec:	4681      	mov	r9, r0
 8007fee:	6123      	str	r3, [r4, #16]
 8007ff0:	dc02      	bgt.n	8007ff8 <_printf_float+0x168>
 8007ff2:	6822      	ldr	r2, [r4, #0]
 8007ff4:	07d2      	lsls	r2, r2, #31
 8007ff6:	d501      	bpl.n	8007ffc <_printf_float+0x16c>
 8007ff8:	3301      	adds	r3, #1
 8007ffa:	6123      	str	r3, [r4, #16]
 8007ffc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008000:	2b00      	cmp	r3, #0
 8008002:	d09c      	beq.n	8007f3e <_printf_float+0xae>
 8008004:	232d      	movs	r3, #45	; 0x2d
 8008006:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800800a:	e798      	b.n	8007f3e <_printf_float+0xae>
 800800c:	9a06      	ldr	r2, [sp, #24]
 800800e:	2a47      	cmp	r2, #71	; 0x47
 8008010:	d1be      	bne.n	8007f90 <_printf_float+0x100>
 8008012:	2b00      	cmp	r3, #0
 8008014:	d1bc      	bne.n	8007f90 <_printf_float+0x100>
 8008016:	2301      	movs	r3, #1
 8008018:	e7b9      	b.n	8007f8e <_printf_float+0xfe>
 800801a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800801e:	d118      	bne.n	8008052 <_printf_float+0x1c2>
 8008020:	2900      	cmp	r1, #0
 8008022:	6863      	ldr	r3, [r4, #4]
 8008024:	dd0b      	ble.n	800803e <_printf_float+0x1ae>
 8008026:	6121      	str	r1, [r4, #16]
 8008028:	b913      	cbnz	r3, 8008030 <_printf_float+0x1a0>
 800802a:	6822      	ldr	r2, [r4, #0]
 800802c:	07d0      	lsls	r0, r2, #31
 800802e:	d502      	bpl.n	8008036 <_printf_float+0x1a6>
 8008030:	3301      	adds	r3, #1
 8008032:	440b      	add	r3, r1
 8008034:	6123      	str	r3, [r4, #16]
 8008036:	65a1      	str	r1, [r4, #88]	; 0x58
 8008038:	f04f 0900 	mov.w	r9, #0
 800803c:	e7de      	b.n	8007ffc <_printf_float+0x16c>
 800803e:	b913      	cbnz	r3, 8008046 <_printf_float+0x1b6>
 8008040:	6822      	ldr	r2, [r4, #0]
 8008042:	07d2      	lsls	r2, r2, #31
 8008044:	d501      	bpl.n	800804a <_printf_float+0x1ba>
 8008046:	3302      	adds	r3, #2
 8008048:	e7f4      	b.n	8008034 <_printf_float+0x1a4>
 800804a:	2301      	movs	r3, #1
 800804c:	e7f2      	b.n	8008034 <_printf_float+0x1a4>
 800804e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008052:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008054:	4299      	cmp	r1, r3
 8008056:	db05      	blt.n	8008064 <_printf_float+0x1d4>
 8008058:	6823      	ldr	r3, [r4, #0]
 800805a:	6121      	str	r1, [r4, #16]
 800805c:	07d8      	lsls	r0, r3, #31
 800805e:	d5ea      	bpl.n	8008036 <_printf_float+0x1a6>
 8008060:	1c4b      	adds	r3, r1, #1
 8008062:	e7e7      	b.n	8008034 <_printf_float+0x1a4>
 8008064:	2900      	cmp	r1, #0
 8008066:	bfd4      	ite	le
 8008068:	f1c1 0202 	rsble	r2, r1, #2
 800806c:	2201      	movgt	r2, #1
 800806e:	4413      	add	r3, r2
 8008070:	e7e0      	b.n	8008034 <_printf_float+0x1a4>
 8008072:	6823      	ldr	r3, [r4, #0]
 8008074:	055a      	lsls	r2, r3, #21
 8008076:	d407      	bmi.n	8008088 <_printf_float+0x1f8>
 8008078:	6923      	ldr	r3, [r4, #16]
 800807a:	4642      	mov	r2, r8
 800807c:	4631      	mov	r1, r6
 800807e:	4628      	mov	r0, r5
 8008080:	47b8      	blx	r7
 8008082:	3001      	adds	r0, #1
 8008084:	d12c      	bne.n	80080e0 <_printf_float+0x250>
 8008086:	e764      	b.n	8007f52 <_printf_float+0xc2>
 8008088:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800808c:	f240 80e0 	bls.w	8008250 <_printf_float+0x3c0>
 8008090:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008094:	2200      	movs	r2, #0
 8008096:	2300      	movs	r3, #0
 8008098:	f7f8 fd16 	bl	8000ac8 <__aeabi_dcmpeq>
 800809c:	2800      	cmp	r0, #0
 800809e:	d034      	beq.n	800810a <_printf_float+0x27a>
 80080a0:	4a37      	ldr	r2, [pc, #220]	; (8008180 <_printf_float+0x2f0>)
 80080a2:	2301      	movs	r3, #1
 80080a4:	4631      	mov	r1, r6
 80080a6:	4628      	mov	r0, r5
 80080a8:	47b8      	blx	r7
 80080aa:	3001      	adds	r0, #1
 80080ac:	f43f af51 	beq.w	8007f52 <_printf_float+0xc2>
 80080b0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80080b4:	429a      	cmp	r2, r3
 80080b6:	db02      	blt.n	80080be <_printf_float+0x22e>
 80080b8:	6823      	ldr	r3, [r4, #0]
 80080ba:	07d8      	lsls	r0, r3, #31
 80080bc:	d510      	bpl.n	80080e0 <_printf_float+0x250>
 80080be:	ee18 3a10 	vmov	r3, s16
 80080c2:	4652      	mov	r2, sl
 80080c4:	4631      	mov	r1, r6
 80080c6:	4628      	mov	r0, r5
 80080c8:	47b8      	blx	r7
 80080ca:	3001      	adds	r0, #1
 80080cc:	f43f af41 	beq.w	8007f52 <_printf_float+0xc2>
 80080d0:	f04f 0800 	mov.w	r8, #0
 80080d4:	f104 091a 	add.w	r9, r4, #26
 80080d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80080da:	3b01      	subs	r3, #1
 80080dc:	4543      	cmp	r3, r8
 80080de:	dc09      	bgt.n	80080f4 <_printf_float+0x264>
 80080e0:	6823      	ldr	r3, [r4, #0]
 80080e2:	079b      	lsls	r3, r3, #30
 80080e4:	f100 8105 	bmi.w	80082f2 <_printf_float+0x462>
 80080e8:	68e0      	ldr	r0, [r4, #12]
 80080ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80080ec:	4298      	cmp	r0, r3
 80080ee:	bfb8      	it	lt
 80080f0:	4618      	movlt	r0, r3
 80080f2:	e730      	b.n	8007f56 <_printf_float+0xc6>
 80080f4:	2301      	movs	r3, #1
 80080f6:	464a      	mov	r2, r9
 80080f8:	4631      	mov	r1, r6
 80080fa:	4628      	mov	r0, r5
 80080fc:	47b8      	blx	r7
 80080fe:	3001      	adds	r0, #1
 8008100:	f43f af27 	beq.w	8007f52 <_printf_float+0xc2>
 8008104:	f108 0801 	add.w	r8, r8, #1
 8008108:	e7e6      	b.n	80080d8 <_printf_float+0x248>
 800810a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800810c:	2b00      	cmp	r3, #0
 800810e:	dc39      	bgt.n	8008184 <_printf_float+0x2f4>
 8008110:	4a1b      	ldr	r2, [pc, #108]	; (8008180 <_printf_float+0x2f0>)
 8008112:	2301      	movs	r3, #1
 8008114:	4631      	mov	r1, r6
 8008116:	4628      	mov	r0, r5
 8008118:	47b8      	blx	r7
 800811a:	3001      	adds	r0, #1
 800811c:	f43f af19 	beq.w	8007f52 <_printf_float+0xc2>
 8008120:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008124:	4313      	orrs	r3, r2
 8008126:	d102      	bne.n	800812e <_printf_float+0x29e>
 8008128:	6823      	ldr	r3, [r4, #0]
 800812a:	07d9      	lsls	r1, r3, #31
 800812c:	d5d8      	bpl.n	80080e0 <_printf_float+0x250>
 800812e:	ee18 3a10 	vmov	r3, s16
 8008132:	4652      	mov	r2, sl
 8008134:	4631      	mov	r1, r6
 8008136:	4628      	mov	r0, r5
 8008138:	47b8      	blx	r7
 800813a:	3001      	adds	r0, #1
 800813c:	f43f af09 	beq.w	8007f52 <_printf_float+0xc2>
 8008140:	f04f 0900 	mov.w	r9, #0
 8008144:	f104 0a1a 	add.w	sl, r4, #26
 8008148:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800814a:	425b      	negs	r3, r3
 800814c:	454b      	cmp	r3, r9
 800814e:	dc01      	bgt.n	8008154 <_printf_float+0x2c4>
 8008150:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008152:	e792      	b.n	800807a <_printf_float+0x1ea>
 8008154:	2301      	movs	r3, #1
 8008156:	4652      	mov	r2, sl
 8008158:	4631      	mov	r1, r6
 800815a:	4628      	mov	r0, r5
 800815c:	47b8      	blx	r7
 800815e:	3001      	adds	r0, #1
 8008160:	f43f aef7 	beq.w	8007f52 <_printf_float+0xc2>
 8008164:	f109 0901 	add.w	r9, r9, #1
 8008168:	e7ee      	b.n	8008148 <_printf_float+0x2b8>
 800816a:	bf00      	nop
 800816c:	7fefffff 	.word	0x7fefffff
 8008170:	0800e1fc 	.word	0x0800e1fc
 8008174:	0800e200 	.word	0x0800e200
 8008178:	0800e208 	.word	0x0800e208
 800817c:	0800e204 	.word	0x0800e204
 8008180:	0800e20c 	.word	0x0800e20c
 8008184:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008186:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008188:	429a      	cmp	r2, r3
 800818a:	bfa8      	it	ge
 800818c:	461a      	movge	r2, r3
 800818e:	2a00      	cmp	r2, #0
 8008190:	4691      	mov	r9, r2
 8008192:	dc37      	bgt.n	8008204 <_printf_float+0x374>
 8008194:	f04f 0b00 	mov.w	fp, #0
 8008198:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800819c:	f104 021a 	add.w	r2, r4, #26
 80081a0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80081a2:	9305      	str	r3, [sp, #20]
 80081a4:	eba3 0309 	sub.w	r3, r3, r9
 80081a8:	455b      	cmp	r3, fp
 80081aa:	dc33      	bgt.n	8008214 <_printf_float+0x384>
 80081ac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80081b0:	429a      	cmp	r2, r3
 80081b2:	db3b      	blt.n	800822c <_printf_float+0x39c>
 80081b4:	6823      	ldr	r3, [r4, #0]
 80081b6:	07da      	lsls	r2, r3, #31
 80081b8:	d438      	bmi.n	800822c <_printf_float+0x39c>
 80081ba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80081bc:	9b05      	ldr	r3, [sp, #20]
 80081be:	9909      	ldr	r1, [sp, #36]	; 0x24
 80081c0:	1ad3      	subs	r3, r2, r3
 80081c2:	eba2 0901 	sub.w	r9, r2, r1
 80081c6:	4599      	cmp	r9, r3
 80081c8:	bfa8      	it	ge
 80081ca:	4699      	movge	r9, r3
 80081cc:	f1b9 0f00 	cmp.w	r9, #0
 80081d0:	dc35      	bgt.n	800823e <_printf_float+0x3ae>
 80081d2:	f04f 0800 	mov.w	r8, #0
 80081d6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80081da:	f104 0a1a 	add.w	sl, r4, #26
 80081de:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80081e2:	1a9b      	subs	r3, r3, r2
 80081e4:	eba3 0309 	sub.w	r3, r3, r9
 80081e8:	4543      	cmp	r3, r8
 80081ea:	f77f af79 	ble.w	80080e0 <_printf_float+0x250>
 80081ee:	2301      	movs	r3, #1
 80081f0:	4652      	mov	r2, sl
 80081f2:	4631      	mov	r1, r6
 80081f4:	4628      	mov	r0, r5
 80081f6:	47b8      	blx	r7
 80081f8:	3001      	adds	r0, #1
 80081fa:	f43f aeaa 	beq.w	8007f52 <_printf_float+0xc2>
 80081fe:	f108 0801 	add.w	r8, r8, #1
 8008202:	e7ec      	b.n	80081de <_printf_float+0x34e>
 8008204:	4613      	mov	r3, r2
 8008206:	4631      	mov	r1, r6
 8008208:	4642      	mov	r2, r8
 800820a:	4628      	mov	r0, r5
 800820c:	47b8      	blx	r7
 800820e:	3001      	adds	r0, #1
 8008210:	d1c0      	bne.n	8008194 <_printf_float+0x304>
 8008212:	e69e      	b.n	8007f52 <_printf_float+0xc2>
 8008214:	2301      	movs	r3, #1
 8008216:	4631      	mov	r1, r6
 8008218:	4628      	mov	r0, r5
 800821a:	9205      	str	r2, [sp, #20]
 800821c:	47b8      	blx	r7
 800821e:	3001      	adds	r0, #1
 8008220:	f43f ae97 	beq.w	8007f52 <_printf_float+0xc2>
 8008224:	9a05      	ldr	r2, [sp, #20]
 8008226:	f10b 0b01 	add.w	fp, fp, #1
 800822a:	e7b9      	b.n	80081a0 <_printf_float+0x310>
 800822c:	ee18 3a10 	vmov	r3, s16
 8008230:	4652      	mov	r2, sl
 8008232:	4631      	mov	r1, r6
 8008234:	4628      	mov	r0, r5
 8008236:	47b8      	blx	r7
 8008238:	3001      	adds	r0, #1
 800823a:	d1be      	bne.n	80081ba <_printf_float+0x32a>
 800823c:	e689      	b.n	8007f52 <_printf_float+0xc2>
 800823e:	9a05      	ldr	r2, [sp, #20]
 8008240:	464b      	mov	r3, r9
 8008242:	4442      	add	r2, r8
 8008244:	4631      	mov	r1, r6
 8008246:	4628      	mov	r0, r5
 8008248:	47b8      	blx	r7
 800824a:	3001      	adds	r0, #1
 800824c:	d1c1      	bne.n	80081d2 <_printf_float+0x342>
 800824e:	e680      	b.n	8007f52 <_printf_float+0xc2>
 8008250:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008252:	2a01      	cmp	r2, #1
 8008254:	dc01      	bgt.n	800825a <_printf_float+0x3ca>
 8008256:	07db      	lsls	r3, r3, #31
 8008258:	d538      	bpl.n	80082cc <_printf_float+0x43c>
 800825a:	2301      	movs	r3, #1
 800825c:	4642      	mov	r2, r8
 800825e:	4631      	mov	r1, r6
 8008260:	4628      	mov	r0, r5
 8008262:	47b8      	blx	r7
 8008264:	3001      	adds	r0, #1
 8008266:	f43f ae74 	beq.w	8007f52 <_printf_float+0xc2>
 800826a:	ee18 3a10 	vmov	r3, s16
 800826e:	4652      	mov	r2, sl
 8008270:	4631      	mov	r1, r6
 8008272:	4628      	mov	r0, r5
 8008274:	47b8      	blx	r7
 8008276:	3001      	adds	r0, #1
 8008278:	f43f ae6b 	beq.w	8007f52 <_printf_float+0xc2>
 800827c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008280:	2200      	movs	r2, #0
 8008282:	2300      	movs	r3, #0
 8008284:	f7f8 fc20 	bl	8000ac8 <__aeabi_dcmpeq>
 8008288:	b9d8      	cbnz	r0, 80082c2 <_printf_float+0x432>
 800828a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800828c:	f108 0201 	add.w	r2, r8, #1
 8008290:	3b01      	subs	r3, #1
 8008292:	4631      	mov	r1, r6
 8008294:	4628      	mov	r0, r5
 8008296:	47b8      	blx	r7
 8008298:	3001      	adds	r0, #1
 800829a:	d10e      	bne.n	80082ba <_printf_float+0x42a>
 800829c:	e659      	b.n	8007f52 <_printf_float+0xc2>
 800829e:	2301      	movs	r3, #1
 80082a0:	4652      	mov	r2, sl
 80082a2:	4631      	mov	r1, r6
 80082a4:	4628      	mov	r0, r5
 80082a6:	47b8      	blx	r7
 80082a8:	3001      	adds	r0, #1
 80082aa:	f43f ae52 	beq.w	8007f52 <_printf_float+0xc2>
 80082ae:	f108 0801 	add.w	r8, r8, #1
 80082b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80082b4:	3b01      	subs	r3, #1
 80082b6:	4543      	cmp	r3, r8
 80082b8:	dcf1      	bgt.n	800829e <_printf_float+0x40e>
 80082ba:	464b      	mov	r3, r9
 80082bc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80082c0:	e6dc      	b.n	800807c <_printf_float+0x1ec>
 80082c2:	f04f 0800 	mov.w	r8, #0
 80082c6:	f104 0a1a 	add.w	sl, r4, #26
 80082ca:	e7f2      	b.n	80082b2 <_printf_float+0x422>
 80082cc:	2301      	movs	r3, #1
 80082ce:	4642      	mov	r2, r8
 80082d0:	e7df      	b.n	8008292 <_printf_float+0x402>
 80082d2:	2301      	movs	r3, #1
 80082d4:	464a      	mov	r2, r9
 80082d6:	4631      	mov	r1, r6
 80082d8:	4628      	mov	r0, r5
 80082da:	47b8      	blx	r7
 80082dc:	3001      	adds	r0, #1
 80082de:	f43f ae38 	beq.w	8007f52 <_printf_float+0xc2>
 80082e2:	f108 0801 	add.w	r8, r8, #1
 80082e6:	68e3      	ldr	r3, [r4, #12]
 80082e8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80082ea:	1a5b      	subs	r3, r3, r1
 80082ec:	4543      	cmp	r3, r8
 80082ee:	dcf0      	bgt.n	80082d2 <_printf_float+0x442>
 80082f0:	e6fa      	b.n	80080e8 <_printf_float+0x258>
 80082f2:	f04f 0800 	mov.w	r8, #0
 80082f6:	f104 0919 	add.w	r9, r4, #25
 80082fa:	e7f4      	b.n	80082e6 <_printf_float+0x456>

080082fc <_printf_common>:
 80082fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008300:	4616      	mov	r6, r2
 8008302:	4699      	mov	r9, r3
 8008304:	688a      	ldr	r2, [r1, #8]
 8008306:	690b      	ldr	r3, [r1, #16]
 8008308:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800830c:	4293      	cmp	r3, r2
 800830e:	bfb8      	it	lt
 8008310:	4613      	movlt	r3, r2
 8008312:	6033      	str	r3, [r6, #0]
 8008314:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008318:	4607      	mov	r7, r0
 800831a:	460c      	mov	r4, r1
 800831c:	b10a      	cbz	r2, 8008322 <_printf_common+0x26>
 800831e:	3301      	adds	r3, #1
 8008320:	6033      	str	r3, [r6, #0]
 8008322:	6823      	ldr	r3, [r4, #0]
 8008324:	0699      	lsls	r1, r3, #26
 8008326:	bf42      	ittt	mi
 8008328:	6833      	ldrmi	r3, [r6, #0]
 800832a:	3302      	addmi	r3, #2
 800832c:	6033      	strmi	r3, [r6, #0]
 800832e:	6825      	ldr	r5, [r4, #0]
 8008330:	f015 0506 	ands.w	r5, r5, #6
 8008334:	d106      	bne.n	8008344 <_printf_common+0x48>
 8008336:	f104 0a19 	add.w	sl, r4, #25
 800833a:	68e3      	ldr	r3, [r4, #12]
 800833c:	6832      	ldr	r2, [r6, #0]
 800833e:	1a9b      	subs	r3, r3, r2
 8008340:	42ab      	cmp	r3, r5
 8008342:	dc26      	bgt.n	8008392 <_printf_common+0x96>
 8008344:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008348:	1e13      	subs	r3, r2, #0
 800834a:	6822      	ldr	r2, [r4, #0]
 800834c:	bf18      	it	ne
 800834e:	2301      	movne	r3, #1
 8008350:	0692      	lsls	r2, r2, #26
 8008352:	d42b      	bmi.n	80083ac <_printf_common+0xb0>
 8008354:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008358:	4649      	mov	r1, r9
 800835a:	4638      	mov	r0, r7
 800835c:	47c0      	blx	r8
 800835e:	3001      	adds	r0, #1
 8008360:	d01e      	beq.n	80083a0 <_printf_common+0xa4>
 8008362:	6823      	ldr	r3, [r4, #0]
 8008364:	68e5      	ldr	r5, [r4, #12]
 8008366:	6832      	ldr	r2, [r6, #0]
 8008368:	f003 0306 	and.w	r3, r3, #6
 800836c:	2b04      	cmp	r3, #4
 800836e:	bf08      	it	eq
 8008370:	1aad      	subeq	r5, r5, r2
 8008372:	68a3      	ldr	r3, [r4, #8]
 8008374:	6922      	ldr	r2, [r4, #16]
 8008376:	bf0c      	ite	eq
 8008378:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800837c:	2500      	movne	r5, #0
 800837e:	4293      	cmp	r3, r2
 8008380:	bfc4      	itt	gt
 8008382:	1a9b      	subgt	r3, r3, r2
 8008384:	18ed      	addgt	r5, r5, r3
 8008386:	2600      	movs	r6, #0
 8008388:	341a      	adds	r4, #26
 800838a:	42b5      	cmp	r5, r6
 800838c:	d11a      	bne.n	80083c4 <_printf_common+0xc8>
 800838e:	2000      	movs	r0, #0
 8008390:	e008      	b.n	80083a4 <_printf_common+0xa8>
 8008392:	2301      	movs	r3, #1
 8008394:	4652      	mov	r2, sl
 8008396:	4649      	mov	r1, r9
 8008398:	4638      	mov	r0, r7
 800839a:	47c0      	blx	r8
 800839c:	3001      	adds	r0, #1
 800839e:	d103      	bne.n	80083a8 <_printf_common+0xac>
 80083a0:	f04f 30ff 	mov.w	r0, #4294967295
 80083a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083a8:	3501      	adds	r5, #1
 80083aa:	e7c6      	b.n	800833a <_printf_common+0x3e>
 80083ac:	18e1      	adds	r1, r4, r3
 80083ae:	1c5a      	adds	r2, r3, #1
 80083b0:	2030      	movs	r0, #48	; 0x30
 80083b2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80083b6:	4422      	add	r2, r4
 80083b8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80083bc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80083c0:	3302      	adds	r3, #2
 80083c2:	e7c7      	b.n	8008354 <_printf_common+0x58>
 80083c4:	2301      	movs	r3, #1
 80083c6:	4622      	mov	r2, r4
 80083c8:	4649      	mov	r1, r9
 80083ca:	4638      	mov	r0, r7
 80083cc:	47c0      	blx	r8
 80083ce:	3001      	adds	r0, #1
 80083d0:	d0e6      	beq.n	80083a0 <_printf_common+0xa4>
 80083d2:	3601      	adds	r6, #1
 80083d4:	e7d9      	b.n	800838a <_printf_common+0x8e>
	...

080083d8 <_printf_i>:
 80083d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80083dc:	460c      	mov	r4, r1
 80083de:	4691      	mov	r9, r2
 80083e0:	7e27      	ldrb	r7, [r4, #24]
 80083e2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80083e4:	2f78      	cmp	r7, #120	; 0x78
 80083e6:	4680      	mov	r8, r0
 80083e8:	469a      	mov	sl, r3
 80083ea:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80083ee:	d807      	bhi.n	8008400 <_printf_i+0x28>
 80083f0:	2f62      	cmp	r7, #98	; 0x62
 80083f2:	d80a      	bhi.n	800840a <_printf_i+0x32>
 80083f4:	2f00      	cmp	r7, #0
 80083f6:	f000 80d8 	beq.w	80085aa <_printf_i+0x1d2>
 80083fa:	2f58      	cmp	r7, #88	; 0x58
 80083fc:	f000 80a3 	beq.w	8008546 <_printf_i+0x16e>
 8008400:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008404:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008408:	e03a      	b.n	8008480 <_printf_i+0xa8>
 800840a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800840e:	2b15      	cmp	r3, #21
 8008410:	d8f6      	bhi.n	8008400 <_printf_i+0x28>
 8008412:	a001      	add	r0, pc, #4	; (adr r0, 8008418 <_printf_i+0x40>)
 8008414:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008418:	08008471 	.word	0x08008471
 800841c:	08008485 	.word	0x08008485
 8008420:	08008401 	.word	0x08008401
 8008424:	08008401 	.word	0x08008401
 8008428:	08008401 	.word	0x08008401
 800842c:	08008401 	.word	0x08008401
 8008430:	08008485 	.word	0x08008485
 8008434:	08008401 	.word	0x08008401
 8008438:	08008401 	.word	0x08008401
 800843c:	08008401 	.word	0x08008401
 8008440:	08008401 	.word	0x08008401
 8008444:	08008591 	.word	0x08008591
 8008448:	080084b5 	.word	0x080084b5
 800844c:	08008573 	.word	0x08008573
 8008450:	08008401 	.word	0x08008401
 8008454:	08008401 	.word	0x08008401
 8008458:	080085b3 	.word	0x080085b3
 800845c:	08008401 	.word	0x08008401
 8008460:	080084b5 	.word	0x080084b5
 8008464:	08008401 	.word	0x08008401
 8008468:	08008401 	.word	0x08008401
 800846c:	0800857b 	.word	0x0800857b
 8008470:	680b      	ldr	r3, [r1, #0]
 8008472:	1d1a      	adds	r2, r3, #4
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	600a      	str	r2, [r1, #0]
 8008478:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800847c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008480:	2301      	movs	r3, #1
 8008482:	e0a3      	b.n	80085cc <_printf_i+0x1f4>
 8008484:	6825      	ldr	r5, [r4, #0]
 8008486:	6808      	ldr	r0, [r1, #0]
 8008488:	062e      	lsls	r6, r5, #24
 800848a:	f100 0304 	add.w	r3, r0, #4
 800848e:	d50a      	bpl.n	80084a6 <_printf_i+0xce>
 8008490:	6805      	ldr	r5, [r0, #0]
 8008492:	600b      	str	r3, [r1, #0]
 8008494:	2d00      	cmp	r5, #0
 8008496:	da03      	bge.n	80084a0 <_printf_i+0xc8>
 8008498:	232d      	movs	r3, #45	; 0x2d
 800849a:	426d      	negs	r5, r5
 800849c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80084a0:	485e      	ldr	r0, [pc, #376]	; (800861c <_printf_i+0x244>)
 80084a2:	230a      	movs	r3, #10
 80084a4:	e019      	b.n	80084da <_printf_i+0x102>
 80084a6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80084aa:	6805      	ldr	r5, [r0, #0]
 80084ac:	600b      	str	r3, [r1, #0]
 80084ae:	bf18      	it	ne
 80084b0:	b22d      	sxthne	r5, r5
 80084b2:	e7ef      	b.n	8008494 <_printf_i+0xbc>
 80084b4:	680b      	ldr	r3, [r1, #0]
 80084b6:	6825      	ldr	r5, [r4, #0]
 80084b8:	1d18      	adds	r0, r3, #4
 80084ba:	6008      	str	r0, [r1, #0]
 80084bc:	0628      	lsls	r0, r5, #24
 80084be:	d501      	bpl.n	80084c4 <_printf_i+0xec>
 80084c0:	681d      	ldr	r5, [r3, #0]
 80084c2:	e002      	b.n	80084ca <_printf_i+0xf2>
 80084c4:	0669      	lsls	r1, r5, #25
 80084c6:	d5fb      	bpl.n	80084c0 <_printf_i+0xe8>
 80084c8:	881d      	ldrh	r5, [r3, #0]
 80084ca:	4854      	ldr	r0, [pc, #336]	; (800861c <_printf_i+0x244>)
 80084cc:	2f6f      	cmp	r7, #111	; 0x6f
 80084ce:	bf0c      	ite	eq
 80084d0:	2308      	moveq	r3, #8
 80084d2:	230a      	movne	r3, #10
 80084d4:	2100      	movs	r1, #0
 80084d6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80084da:	6866      	ldr	r6, [r4, #4]
 80084dc:	60a6      	str	r6, [r4, #8]
 80084de:	2e00      	cmp	r6, #0
 80084e0:	bfa2      	ittt	ge
 80084e2:	6821      	ldrge	r1, [r4, #0]
 80084e4:	f021 0104 	bicge.w	r1, r1, #4
 80084e8:	6021      	strge	r1, [r4, #0]
 80084ea:	b90d      	cbnz	r5, 80084f0 <_printf_i+0x118>
 80084ec:	2e00      	cmp	r6, #0
 80084ee:	d04d      	beq.n	800858c <_printf_i+0x1b4>
 80084f0:	4616      	mov	r6, r2
 80084f2:	fbb5 f1f3 	udiv	r1, r5, r3
 80084f6:	fb03 5711 	mls	r7, r3, r1, r5
 80084fa:	5dc7      	ldrb	r7, [r0, r7]
 80084fc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008500:	462f      	mov	r7, r5
 8008502:	42bb      	cmp	r3, r7
 8008504:	460d      	mov	r5, r1
 8008506:	d9f4      	bls.n	80084f2 <_printf_i+0x11a>
 8008508:	2b08      	cmp	r3, #8
 800850a:	d10b      	bne.n	8008524 <_printf_i+0x14c>
 800850c:	6823      	ldr	r3, [r4, #0]
 800850e:	07df      	lsls	r7, r3, #31
 8008510:	d508      	bpl.n	8008524 <_printf_i+0x14c>
 8008512:	6923      	ldr	r3, [r4, #16]
 8008514:	6861      	ldr	r1, [r4, #4]
 8008516:	4299      	cmp	r1, r3
 8008518:	bfde      	ittt	le
 800851a:	2330      	movle	r3, #48	; 0x30
 800851c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008520:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008524:	1b92      	subs	r2, r2, r6
 8008526:	6122      	str	r2, [r4, #16]
 8008528:	f8cd a000 	str.w	sl, [sp]
 800852c:	464b      	mov	r3, r9
 800852e:	aa03      	add	r2, sp, #12
 8008530:	4621      	mov	r1, r4
 8008532:	4640      	mov	r0, r8
 8008534:	f7ff fee2 	bl	80082fc <_printf_common>
 8008538:	3001      	adds	r0, #1
 800853a:	d14c      	bne.n	80085d6 <_printf_i+0x1fe>
 800853c:	f04f 30ff 	mov.w	r0, #4294967295
 8008540:	b004      	add	sp, #16
 8008542:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008546:	4835      	ldr	r0, [pc, #212]	; (800861c <_printf_i+0x244>)
 8008548:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800854c:	6823      	ldr	r3, [r4, #0]
 800854e:	680e      	ldr	r6, [r1, #0]
 8008550:	061f      	lsls	r7, r3, #24
 8008552:	f856 5b04 	ldr.w	r5, [r6], #4
 8008556:	600e      	str	r6, [r1, #0]
 8008558:	d514      	bpl.n	8008584 <_printf_i+0x1ac>
 800855a:	07d9      	lsls	r1, r3, #31
 800855c:	bf44      	itt	mi
 800855e:	f043 0320 	orrmi.w	r3, r3, #32
 8008562:	6023      	strmi	r3, [r4, #0]
 8008564:	b91d      	cbnz	r5, 800856e <_printf_i+0x196>
 8008566:	6823      	ldr	r3, [r4, #0]
 8008568:	f023 0320 	bic.w	r3, r3, #32
 800856c:	6023      	str	r3, [r4, #0]
 800856e:	2310      	movs	r3, #16
 8008570:	e7b0      	b.n	80084d4 <_printf_i+0xfc>
 8008572:	6823      	ldr	r3, [r4, #0]
 8008574:	f043 0320 	orr.w	r3, r3, #32
 8008578:	6023      	str	r3, [r4, #0]
 800857a:	2378      	movs	r3, #120	; 0x78
 800857c:	4828      	ldr	r0, [pc, #160]	; (8008620 <_printf_i+0x248>)
 800857e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008582:	e7e3      	b.n	800854c <_printf_i+0x174>
 8008584:	065e      	lsls	r6, r3, #25
 8008586:	bf48      	it	mi
 8008588:	b2ad      	uxthmi	r5, r5
 800858a:	e7e6      	b.n	800855a <_printf_i+0x182>
 800858c:	4616      	mov	r6, r2
 800858e:	e7bb      	b.n	8008508 <_printf_i+0x130>
 8008590:	680b      	ldr	r3, [r1, #0]
 8008592:	6826      	ldr	r6, [r4, #0]
 8008594:	6960      	ldr	r0, [r4, #20]
 8008596:	1d1d      	adds	r5, r3, #4
 8008598:	600d      	str	r5, [r1, #0]
 800859a:	0635      	lsls	r5, r6, #24
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	d501      	bpl.n	80085a4 <_printf_i+0x1cc>
 80085a0:	6018      	str	r0, [r3, #0]
 80085a2:	e002      	b.n	80085aa <_printf_i+0x1d2>
 80085a4:	0671      	lsls	r1, r6, #25
 80085a6:	d5fb      	bpl.n	80085a0 <_printf_i+0x1c8>
 80085a8:	8018      	strh	r0, [r3, #0]
 80085aa:	2300      	movs	r3, #0
 80085ac:	6123      	str	r3, [r4, #16]
 80085ae:	4616      	mov	r6, r2
 80085b0:	e7ba      	b.n	8008528 <_printf_i+0x150>
 80085b2:	680b      	ldr	r3, [r1, #0]
 80085b4:	1d1a      	adds	r2, r3, #4
 80085b6:	600a      	str	r2, [r1, #0]
 80085b8:	681e      	ldr	r6, [r3, #0]
 80085ba:	6862      	ldr	r2, [r4, #4]
 80085bc:	2100      	movs	r1, #0
 80085be:	4630      	mov	r0, r6
 80085c0:	f7f7 fe0e 	bl	80001e0 <memchr>
 80085c4:	b108      	cbz	r0, 80085ca <_printf_i+0x1f2>
 80085c6:	1b80      	subs	r0, r0, r6
 80085c8:	6060      	str	r0, [r4, #4]
 80085ca:	6863      	ldr	r3, [r4, #4]
 80085cc:	6123      	str	r3, [r4, #16]
 80085ce:	2300      	movs	r3, #0
 80085d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80085d4:	e7a8      	b.n	8008528 <_printf_i+0x150>
 80085d6:	6923      	ldr	r3, [r4, #16]
 80085d8:	4632      	mov	r2, r6
 80085da:	4649      	mov	r1, r9
 80085dc:	4640      	mov	r0, r8
 80085de:	47d0      	blx	sl
 80085e0:	3001      	adds	r0, #1
 80085e2:	d0ab      	beq.n	800853c <_printf_i+0x164>
 80085e4:	6823      	ldr	r3, [r4, #0]
 80085e6:	079b      	lsls	r3, r3, #30
 80085e8:	d413      	bmi.n	8008612 <_printf_i+0x23a>
 80085ea:	68e0      	ldr	r0, [r4, #12]
 80085ec:	9b03      	ldr	r3, [sp, #12]
 80085ee:	4298      	cmp	r0, r3
 80085f0:	bfb8      	it	lt
 80085f2:	4618      	movlt	r0, r3
 80085f4:	e7a4      	b.n	8008540 <_printf_i+0x168>
 80085f6:	2301      	movs	r3, #1
 80085f8:	4632      	mov	r2, r6
 80085fa:	4649      	mov	r1, r9
 80085fc:	4640      	mov	r0, r8
 80085fe:	47d0      	blx	sl
 8008600:	3001      	adds	r0, #1
 8008602:	d09b      	beq.n	800853c <_printf_i+0x164>
 8008604:	3501      	adds	r5, #1
 8008606:	68e3      	ldr	r3, [r4, #12]
 8008608:	9903      	ldr	r1, [sp, #12]
 800860a:	1a5b      	subs	r3, r3, r1
 800860c:	42ab      	cmp	r3, r5
 800860e:	dcf2      	bgt.n	80085f6 <_printf_i+0x21e>
 8008610:	e7eb      	b.n	80085ea <_printf_i+0x212>
 8008612:	2500      	movs	r5, #0
 8008614:	f104 0619 	add.w	r6, r4, #25
 8008618:	e7f5      	b.n	8008606 <_printf_i+0x22e>
 800861a:	bf00      	nop
 800861c:	0800e20e 	.word	0x0800e20e
 8008620:	0800e21f 	.word	0x0800e21f

08008624 <iprintf>:
 8008624:	b40f      	push	{r0, r1, r2, r3}
 8008626:	4b0a      	ldr	r3, [pc, #40]	; (8008650 <iprintf+0x2c>)
 8008628:	b513      	push	{r0, r1, r4, lr}
 800862a:	681c      	ldr	r4, [r3, #0]
 800862c:	b124      	cbz	r4, 8008638 <iprintf+0x14>
 800862e:	69a3      	ldr	r3, [r4, #24]
 8008630:	b913      	cbnz	r3, 8008638 <iprintf+0x14>
 8008632:	4620      	mov	r0, r4
 8008634:	f7ff f9a2 	bl	800797c <__sinit>
 8008638:	ab05      	add	r3, sp, #20
 800863a:	9a04      	ldr	r2, [sp, #16]
 800863c:	68a1      	ldr	r1, [r4, #8]
 800863e:	9301      	str	r3, [sp, #4]
 8008640:	4620      	mov	r0, r4
 8008642:	f001 fc63 	bl	8009f0c <_vfiprintf_r>
 8008646:	b002      	add	sp, #8
 8008648:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800864c:	b004      	add	sp, #16
 800864e:	4770      	bx	lr
 8008650:	2000001c 	.word	0x2000001c

08008654 <_puts_r>:
 8008654:	b570      	push	{r4, r5, r6, lr}
 8008656:	460e      	mov	r6, r1
 8008658:	4605      	mov	r5, r0
 800865a:	b118      	cbz	r0, 8008664 <_puts_r+0x10>
 800865c:	6983      	ldr	r3, [r0, #24]
 800865e:	b90b      	cbnz	r3, 8008664 <_puts_r+0x10>
 8008660:	f7ff f98c 	bl	800797c <__sinit>
 8008664:	69ab      	ldr	r3, [r5, #24]
 8008666:	68ac      	ldr	r4, [r5, #8]
 8008668:	b913      	cbnz	r3, 8008670 <_puts_r+0x1c>
 800866a:	4628      	mov	r0, r5
 800866c:	f7ff f986 	bl	800797c <__sinit>
 8008670:	4b2c      	ldr	r3, [pc, #176]	; (8008724 <_puts_r+0xd0>)
 8008672:	429c      	cmp	r4, r3
 8008674:	d120      	bne.n	80086b8 <_puts_r+0x64>
 8008676:	686c      	ldr	r4, [r5, #4]
 8008678:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800867a:	07db      	lsls	r3, r3, #31
 800867c:	d405      	bmi.n	800868a <_puts_r+0x36>
 800867e:	89a3      	ldrh	r3, [r4, #12]
 8008680:	0598      	lsls	r0, r3, #22
 8008682:	d402      	bmi.n	800868a <_puts_r+0x36>
 8008684:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008686:	f7ff fa3c 	bl	8007b02 <__retarget_lock_acquire_recursive>
 800868a:	89a3      	ldrh	r3, [r4, #12]
 800868c:	0719      	lsls	r1, r3, #28
 800868e:	d51d      	bpl.n	80086cc <_puts_r+0x78>
 8008690:	6923      	ldr	r3, [r4, #16]
 8008692:	b1db      	cbz	r3, 80086cc <_puts_r+0x78>
 8008694:	3e01      	subs	r6, #1
 8008696:	68a3      	ldr	r3, [r4, #8]
 8008698:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800869c:	3b01      	subs	r3, #1
 800869e:	60a3      	str	r3, [r4, #8]
 80086a0:	bb39      	cbnz	r1, 80086f2 <_puts_r+0x9e>
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	da38      	bge.n	8008718 <_puts_r+0xc4>
 80086a6:	4622      	mov	r2, r4
 80086a8:	210a      	movs	r1, #10
 80086aa:	4628      	mov	r0, r5
 80086ac:	f000 f8d0 	bl	8008850 <__swbuf_r>
 80086b0:	3001      	adds	r0, #1
 80086b2:	d011      	beq.n	80086d8 <_puts_r+0x84>
 80086b4:	250a      	movs	r5, #10
 80086b6:	e011      	b.n	80086dc <_puts_r+0x88>
 80086b8:	4b1b      	ldr	r3, [pc, #108]	; (8008728 <_puts_r+0xd4>)
 80086ba:	429c      	cmp	r4, r3
 80086bc:	d101      	bne.n	80086c2 <_puts_r+0x6e>
 80086be:	68ac      	ldr	r4, [r5, #8]
 80086c0:	e7da      	b.n	8008678 <_puts_r+0x24>
 80086c2:	4b1a      	ldr	r3, [pc, #104]	; (800872c <_puts_r+0xd8>)
 80086c4:	429c      	cmp	r4, r3
 80086c6:	bf08      	it	eq
 80086c8:	68ec      	ldreq	r4, [r5, #12]
 80086ca:	e7d5      	b.n	8008678 <_puts_r+0x24>
 80086cc:	4621      	mov	r1, r4
 80086ce:	4628      	mov	r0, r5
 80086d0:	f000 f922 	bl	8008918 <__swsetup_r>
 80086d4:	2800      	cmp	r0, #0
 80086d6:	d0dd      	beq.n	8008694 <_puts_r+0x40>
 80086d8:	f04f 35ff 	mov.w	r5, #4294967295
 80086dc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80086de:	07da      	lsls	r2, r3, #31
 80086e0:	d405      	bmi.n	80086ee <_puts_r+0x9a>
 80086e2:	89a3      	ldrh	r3, [r4, #12]
 80086e4:	059b      	lsls	r3, r3, #22
 80086e6:	d402      	bmi.n	80086ee <_puts_r+0x9a>
 80086e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80086ea:	f7ff fa0b 	bl	8007b04 <__retarget_lock_release_recursive>
 80086ee:	4628      	mov	r0, r5
 80086f0:	bd70      	pop	{r4, r5, r6, pc}
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	da04      	bge.n	8008700 <_puts_r+0xac>
 80086f6:	69a2      	ldr	r2, [r4, #24]
 80086f8:	429a      	cmp	r2, r3
 80086fa:	dc06      	bgt.n	800870a <_puts_r+0xb6>
 80086fc:	290a      	cmp	r1, #10
 80086fe:	d004      	beq.n	800870a <_puts_r+0xb6>
 8008700:	6823      	ldr	r3, [r4, #0]
 8008702:	1c5a      	adds	r2, r3, #1
 8008704:	6022      	str	r2, [r4, #0]
 8008706:	7019      	strb	r1, [r3, #0]
 8008708:	e7c5      	b.n	8008696 <_puts_r+0x42>
 800870a:	4622      	mov	r2, r4
 800870c:	4628      	mov	r0, r5
 800870e:	f000 f89f 	bl	8008850 <__swbuf_r>
 8008712:	3001      	adds	r0, #1
 8008714:	d1bf      	bne.n	8008696 <_puts_r+0x42>
 8008716:	e7df      	b.n	80086d8 <_puts_r+0x84>
 8008718:	6823      	ldr	r3, [r4, #0]
 800871a:	250a      	movs	r5, #10
 800871c:	1c5a      	adds	r2, r3, #1
 800871e:	6022      	str	r2, [r4, #0]
 8008720:	701d      	strb	r5, [r3, #0]
 8008722:	e7db      	b.n	80086dc <_puts_r+0x88>
 8008724:	0800e1b8 	.word	0x0800e1b8
 8008728:	0800e1d8 	.word	0x0800e1d8
 800872c:	0800e198 	.word	0x0800e198

08008730 <puts>:
 8008730:	4b02      	ldr	r3, [pc, #8]	; (800873c <puts+0xc>)
 8008732:	4601      	mov	r1, r0
 8008734:	6818      	ldr	r0, [r3, #0]
 8008736:	f7ff bf8d 	b.w	8008654 <_puts_r>
 800873a:	bf00      	nop
 800873c:	2000001c 	.word	0x2000001c

08008740 <_sbrk_r>:
 8008740:	b538      	push	{r3, r4, r5, lr}
 8008742:	4d06      	ldr	r5, [pc, #24]	; (800875c <_sbrk_r+0x1c>)
 8008744:	2300      	movs	r3, #0
 8008746:	4604      	mov	r4, r0
 8008748:	4608      	mov	r0, r1
 800874a:	602b      	str	r3, [r5, #0]
 800874c:	f7f9 f96c 	bl	8001a28 <_sbrk>
 8008750:	1c43      	adds	r3, r0, #1
 8008752:	d102      	bne.n	800875a <_sbrk_r+0x1a>
 8008754:	682b      	ldr	r3, [r5, #0]
 8008756:	b103      	cbz	r3, 800875a <_sbrk_r+0x1a>
 8008758:	6023      	str	r3, [r4, #0]
 800875a:	bd38      	pop	{r3, r4, r5, pc}
 800875c:	2000a44c 	.word	0x2000a44c

08008760 <__sread>:
 8008760:	b510      	push	{r4, lr}
 8008762:	460c      	mov	r4, r1
 8008764:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008768:	f001 fd00 	bl	800a16c <_read_r>
 800876c:	2800      	cmp	r0, #0
 800876e:	bfab      	itete	ge
 8008770:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008772:	89a3      	ldrhlt	r3, [r4, #12]
 8008774:	181b      	addge	r3, r3, r0
 8008776:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800877a:	bfac      	ite	ge
 800877c:	6563      	strge	r3, [r4, #84]	; 0x54
 800877e:	81a3      	strhlt	r3, [r4, #12]
 8008780:	bd10      	pop	{r4, pc}

08008782 <__swrite>:
 8008782:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008786:	461f      	mov	r7, r3
 8008788:	898b      	ldrh	r3, [r1, #12]
 800878a:	05db      	lsls	r3, r3, #23
 800878c:	4605      	mov	r5, r0
 800878e:	460c      	mov	r4, r1
 8008790:	4616      	mov	r6, r2
 8008792:	d505      	bpl.n	80087a0 <__swrite+0x1e>
 8008794:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008798:	2302      	movs	r3, #2
 800879a:	2200      	movs	r2, #0
 800879c:	f000 ffda 	bl	8009754 <_lseek_r>
 80087a0:	89a3      	ldrh	r3, [r4, #12]
 80087a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80087a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80087aa:	81a3      	strh	r3, [r4, #12]
 80087ac:	4632      	mov	r2, r6
 80087ae:	463b      	mov	r3, r7
 80087b0:	4628      	mov	r0, r5
 80087b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80087b6:	f000 b89d 	b.w	80088f4 <_write_r>

080087ba <__sseek>:
 80087ba:	b510      	push	{r4, lr}
 80087bc:	460c      	mov	r4, r1
 80087be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80087c2:	f000 ffc7 	bl	8009754 <_lseek_r>
 80087c6:	1c43      	adds	r3, r0, #1
 80087c8:	89a3      	ldrh	r3, [r4, #12]
 80087ca:	bf15      	itete	ne
 80087cc:	6560      	strne	r0, [r4, #84]	; 0x54
 80087ce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80087d2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80087d6:	81a3      	strheq	r3, [r4, #12]
 80087d8:	bf18      	it	ne
 80087da:	81a3      	strhne	r3, [r4, #12]
 80087dc:	bd10      	pop	{r4, pc}

080087de <__sclose>:
 80087de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80087e2:	f000 b907 	b.w	80089f4 <_close_r>
	...

080087e8 <swprintf>:
 80087e8:	b40c      	push	{r2, r3}
 80087ea:	b530      	push	{r4, r5, lr}
 80087ec:	4b17      	ldr	r3, [pc, #92]	; (800884c <swprintf+0x64>)
 80087ee:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 80087f2:	681d      	ldr	r5, [r3, #0]
 80087f4:	b09d      	sub	sp, #116	; 0x74
 80087f6:	460c      	mov	r4, r1
 80087f8:	d308      	bcc.n	800880c <swprintf+0x24>
 80087fa:	238b      	movs	r3, #139	; 0x8b
 80087fc:	602b      	str	r3, [r5, #0]
 80087fe:	f04f 30ff 	mov.w	r0, #4294967295
 8008802:	b01d      	add	sp, #116	; 0x74
 8008804:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008808:	b002      	add	sp, #8
 800880a:	4770      	bx	lr
 800880c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8008810:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008814:	9002      	str	r0, [sp, #8]
 8008816:	9006      	str	r0, [sp, #24]
 8008818:	b1b1      	cbz	r1, 8008848 <swprintf+0x60>
 800881a:	1e4b      	subs	r3, r1, #1
 800881c:	009b      	lsls	r3, r3, #2
 800881e:	9304      	str	r3, [sp, #16]
 8008820:	9307      	str	r3, [sp, #28]
 8008822:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008826:	f8ad 3016 	strh.w	r3, [sp, #22]
 800882a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800882c:	ab21      	add	r3, sp, #132	; 0x84
 800882e:	a902      	add	r1, sp, #8
 8008830:	4628      	mov	r0, r5
 8008832:	9301      	str	r3, [sp, #4]
 8008834:	f001 fd1c 	bl	800a270 <_svfwprintf_r>
 8008838:	2c00      	cmp	r4, #0
 800883a:	d0de      	beq.n	80087fa <swprintf+0x12>
 800883c:	9b02      	ldr	r3, [sp, #8]
 800883e:	2200      	movs	r2, #0
 8008840:	42a0      	cmp	r0, r4
 8008842:	601a      	str	r2, [r3, #0]
 8008844:	d3dd      	bcc.n	8008802 <swprintf+0x1a>
 8008846:	e7d8      	b.n	80087fa <swprintf+0x12>
 8008848:	460b      	mov	r3, r1
 800884a:	e7e8      	b.n	800881e <swprintf+0x36>
 800884c:	2000001c 	.word	0x2000001c

08008850 <__swbuf_r>:
 8008850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008852:	460e      	mov	r6, r1
 8008854:	4614      	mov	r4, r2
 8008856:	4605      	mov	r5, r0
 8008858:	b118      	cbz	r0, 8008862 <__swbuf_r+0x12>
 800885a:	6983      	ldr	r3, [r0, #24]
 800885c:	b90b      	cbnz	r3, 8008862 <__swbuf_r+0x12>
 800885e:	f7ff f88d 	bl	800797c <__sinit>
 8008862:	4b21      	ldr	r3, [pc, #132]	; (80088e8 <__swbuf_r+0x98>)
 8008864:	429c      	cmp	r4, r3
 8008866:	d12b      	bne.n	80088c0 <__swbuf_r+0x70>
 8008868:	686c      	ldr	r4, [r5, #4]
 800886a:	69a3      	ldr	r3, [r4, #24]
 800886c:	60a3      	str	r3, [r4, #8]
 800886e:	89a3      	ldrh	r3, [r4, #12]
 8008870:	071a      	lsls	r2, r3, #28
 8008872:	d52f      	bpl.n	80088d4 <__swbuf_r+0x84>
 8008874:	6923      	ldr	r3, [r4, #16]
 8008876:	b36b      	cbz	r3, 80088d4 <__swbuf_r+0x84>
 8008878:	6923      	ldr	r3, [r4, #16]
 800887a:	6820      	ldr	r0, [r4, #0]
 800887c:	1ac0      	subs	r0, r0, r3
 800887e:	6963      	ldr	r3, [r4, #20]
 8008880:	b2f6      	uxtb	r6, r6
 8008882:	4283      	cmp	r3, r0
 8008884:	4637      	mov	r7, r6
 8008886:	dc04      	bgt.n	8008892 <__swbuf_r+0x42>
 8008888:	4621      	mov	r1, r4
 800888a:	4628      	mov	r0, r5
 800888c:	f7fe ffe2 	bl	8007854 <_fflush_r>
 8008890:	bb30      	cbnz	r0, 80088e0 <__swbuf_r+0x90>
 8008892:	68a3      	ldr	r3, [r4, #8]
 8008894:	3b01      	subs	r3, #1
 8008896:	60a3      	str	r3, [r4, #8]
 8008898:	6823      	ldr	r3, [r4, #0]
 800889a:	1c5a      	adds	r2, r3, #1
 800889c:	6022      	str	r2, [r4, #0]
 800889e:	701e      	strb	r6, [r3, #0]
 80088a0:	6963      	ldr	r3, [r4, #20]
 80088a2:	3001      	adds	r0, #1
 80088a4:	4283      	cmp	r3, r0
 80088a6:	d004      	beq.n	80088b2 <__swbuf_r+0x62>
 80088a8:	89a3      	ldrh	r3, [r4, #12]
 80088aa:	07db      	lsls	r3, r3, #31
 80088ac:	d506      	bpl.n	80088bc <__swbuf_r+0x6c>
 80088ae:	2e0a      	cmp	r6, #10
 80088b0:	d104      	bne.n	80088bc <__swbuf_r+0x6c>
 80088b2:	4621      	mov	r1, r4
 80088b4:	4628      	mov	r0, r5
 80088b6:	f7fe ffcd 	bl	8007854 <_fflush_r>
 80088ba:	b988      	cbnz	r0, 80088e0 <__swbuf_r+0x90>
 80088bc:	4638      	mov	r0, r7
 80088be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80088c0:	4b0a      	ldr	r3, [pc, #40]	; (80088ec <__swbuf_r+0x9c>)
 80088c2:	429c      	cmp	r4, r3
 80088c4:	d101      	bne.n	80088ca <__swbuf_r+0x7a>
 80088c6:	68ac      	ldr	r4, [r5, #8]
 80088c8:	e7cf      	b.n	800886a <__swbuf_r+0x1a>
 80088ca:	4b09      	ldr	r3, [pc, #36]	; (80088f0 <__swbuf_r+0xa0>)
 80088cc:	429c      	cmp	r4, r3
 80088ce:	bf08      	it	eq
 80088d0:	68ec      	ldreq	r4, [r5, #12]
 80088d2:	e7ca      	b.n	800886a <__swbuf_r+0x1a>
 80088d4:	4621      	mov	r1, r4
 80088d6:	4628      	mov	r0, r5
 80088d8:	f000 f81e 	bl	8008918 <__swsetup_r>
 80088dc:	2800      	cmp	r0, #0
 80088de:	d0cb      	beq.n	8008878 <__swbuf_r+0x28>
 80088e0:	f04f 37ff 	mov.w	r7, #4294967295
 80088e4:	e7ea      	b.n	80088bc <__swbuf_r+0x6c>
 80088e6:	bf00      	nop
 80088e8:	0800e1b8 	.word	0x0800e1b8
 80088ec:	0800e1d8 	.word	0x0800e1d8
 80088f0:	0800e198 	.word	0x0800e198

080088f4 <_write_r>:
 80088f4:	b538      	push	{r3, r4, r5, lr}
 80088f6:	4d07      	ldr	r5, [pc, #28]	; (8008914 <_write_r+0x20>)
 80088f8:	4604      	mov	r4, r0
 80088fa:	4608      	mov	r0, r1
 80088fc:	4611      	mov	r1, r2
 80088fe:	2200      	movs	r2, #0
 8008900:	602a      	str	r2, [r5, #0]
 8008902:	461a      	mov	r2, r3
 8008904:	f7f9 f83f 	bl	8001986 <_write>
 8008908:	1c43      	adds	r3, r0, #1
 800890a:	d102      	bne.n	8008912 <_write_r+0x1e>
 800890c:	682b      	ldr	r3, [r5, #0]
 800890e:	b103      	cbz	r3, 8008912 <_write_r+0x1e>
 8008910:	6023      	str	r3, [r4, #0]
 8008912:	bd38      	pop	{r3, r4, r5, pc}
 8008914:	2000a44c 	.word	0x2000a44c

08008918 <__swsetup_r>:
 8008918:	4b32      	ldr	r3, [pc, #200]	; (80089e4 <__swsetup_r+0xcc>)
 800891a:	b570      	push	{r4, r5, r6, lr}
 800891c:	681d      	ldr	r5, [r3, #0]
 800891e:	4606      	mov	r6, r0
 8008920:	460c      	mov	r4, r1
 8008922:	b125      	cbz	r5, 800892e <__swsetup_r+0x16>
 8008924:	69ab      	ldr	r3, [r5, #24]
 8008926:	b913      	cbnz	r3, 800892e <__swsetup_r+0x16>
 8008928:	4628      	mov	r0, r5
 800892a:	f7ff f827 	bl	800797c <__sinit>
 800892e:	4b2e      	ldr	r3, [pc, #184]	; (80089e8 <__swsetup_r+0xd0>)
 8008930:	429c      	cmp	r4, r3
 8008932:	d10f      	bne.n	8008954 <__swsetup_r+0x3c>
 8008934:	686c      	ldr	r4, [r5, #4]
 8008936:	89a3      	ldrh	r3, [r4, #12]
 8008938:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800893c:	0719      	lsls	r1, r3, #28
 800893e:	d42c      	bmi.n	800899a <__swsetup_r+0x82>
 8008940:	06dd      	lsls	r5, r3, #27
 8008942:	d411      	bmi.n	8008968 <__swsetup_r+0x50>
 8008944:	2309      	movs	r3, #9
 8008946:	6033      	str	r3, [r6, #0]
 8008948:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800894c:	81a3      	strh	r3, [r4, #12]
 800894e:	f04f 30ff 	mov.w	r0, #4294967295
 8008952:	e03e      	b.n	80089d2 <__swsetup_r+0xba>
 8008954:	4b25      	ldr	r3, [pc, #148]	; (80089ec <__swsetup_r+0xd4>)
 8008956:	429c      	cmp	r4, r3
 8008958:	d101      	bne.n	800895e <__swsetup_r+0x46>
 800895a:	68ac      	ldr	r4, [r5, #8]
 800895c:	e7eb      	b.n	8008936 <__swsetup_r+0x1e>
 800895e:	4b24      	ldr	r3, [pc, #144]	; (80089f0 <__swsetup_r+0xd8>)
 8008960:	429c      	cmp	r4, r3
 8008962:	bf08      	it	eq
 8008964:	68ec      	ldreq	r4, [r5, #12]
 8008966:	e7e6      	b.n	8008936 <__swsetup_r+0x1e>
 8008968:	0758      	lsls	r0, r3, #29
 800896a:	d512      	bpl.n	8008992 <__swsetup_r+0x7a>
 800896c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800896e:	b141      	cbz	r1, 8008982 <__swsetup_r+0x6a>
 8008970:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008974:	4299      	cmp	r1, r3
 8008976:	d002      	beq.n	800897e <__swsetup_r+0x66>
 8008978:	4630      	mov	r0, r6
 800897a:	f7ff f93f 	bl	8007bfc <_free_r>
 800897e:	2300      	movs	r3, #0
 8008980:	6363      	str	r3, [r4, #52]	; 0x34
 8008982:	89a3      	ldrh	r3, [r4, #12]
 8008984:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008988:	81a3      	strh	r3, [r4, #12]
 800898a:	2300      	movs	r3, #0
 800898c:	6063      	str	r3, [r4, #4]
 800898e:	6923      	ldr	r3, [r4, #16]
 8008990:	6023      	str	r3, [r4, #0]
 8008992:	89a3      	ldrh	r3, [r4, #12]
 8008994:	f043 0308 	orr.w	r3, r3, #8
 8008998:	81a3      	strh	r3, [r4, #12]
 800899a:	6923      	ldr	r3, [r4, #16]
 800899c:	b94b      	cbnz	r3, 80089b2 <__swsetup_r+0x9a>
 800899e:	89a3      	ldrh	r3, [r4, #12]
 80089a0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80089a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80089a8:	d003      	beq.n	80089b2 <__swsetup_r+0x9a>
 80089aa:	4621      	mov	r1, r4
 80089ac:	4630      	mov	r0, r6
 80089ae:	f7ff f8cf 	bl	8007b50 <__smakebuf_r>
 80089b2:	89a0      	ldrh	r0, [r4, #12]
 80089b4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80089b8:	f010 0301 	ands.w	r3, r0, #1
 80089bc:	d00a      	beq.n	80089d4 <__swsetup_r+0xbc>
 80089be:	2300      	movs	r3, #0
 80089c0:	60a3      	str	r3, [r4, #8]
 80089c2:	6963      	ldr	r3, [r4, #20]
 80089c4:	425b      	negs	r3, r3
 80089c6:	61a3      	str	r3, [r4, #24]
 80089c8:	6923      	ldr	r3, [r4, #16]
 80089ca:	b943      	cbnz	r3, 80089de <__swsetup_r+0xc6>
 80089cc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80089d0:	d1ba      	bne.n	8008948 <__swsetup_r+0x30>
 80089d2:	bd70      	pop	{r4, r5, r6, pc}
 80089d4:	0781      	lsls	r1, r0, #30
 80089d6:	bf58      	it	pl
 80089d8:	6963      	ldrpl	r3, [r4, #20]
 80089da:	60a3      	str	r3, [r4, #8]
 80089dc:	e7f4      	b.n	80089c8 <__swsetup_r+0xb0>
 80089de:	2000      	movs	r0, #0
 80089e0:	e7f7      	b.n	80089d2 <__swsetup_r+0xba>
 80089e2:	bf00      	nop
 80089e4:	2000001c 	.word	0x2000001c
 80089e8:	0800e1b8 	.word	0x0800e1b8
 80089ec:	0800e1d8 	.word	0x0800e1d8
 80089f0:	0800e198 	.word	0x0800e198

080089f4 <_close_r>:
 80089f4:	b538      	push	{r3, r4, r5, lr}
 80089f6:	4d06      	ldr	r5, [pc, #24]	; (8008a10 <_close_r+0x1c>)
 80089f8:	2300      	movs	r3, #0
 80089fa:	4604      	mov	r4, r0
 80089fc:	4608      	mov	r0, r1
 80089fe:	602b      	str	r3, [r5, #0]
 8008a00:	f7f8 ffdd 	bl	80019be <_close>
 8008a04:	1c43      	adds	r3, r0, #1
 8008a06:	d102      	bne.n	8008a0e <_close_r+0x1a>
 8008a08:	682b      	ldr	r3, [r5, #0]
 8008a0a:	b103      	cbz	r3, 8008a0e <_close_r+0x1a>
 8008a0c:	6023      	str	r3, [r4, #0]
 8008a0e:	bd38      	pop	{r3, r4, r5, pc}
 8008a10:	2000a44c 	.word	0x2000a44c

08008a14 <quorem>:
 8008a14:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a18:	6903      	ldr	r3, [r0, #16]
 8008a1a:	690c      	ldr	r4, [r1, #16]
 8008a1c:	42a3      	cmp	r3, r4
 8008a1e:	4607      	mov	r7, r0
 8008a20:	f2c0 8081 	blt.w	8008b26 <quorem+0x112>
 8008a24:	3c01      	subs	r4, #1
 8008a26:	f101 0814 	add.w	r8, r1, #20
 8008a2a:	f100 0514 	add.w	r5, r0, #20
 8008a2e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008a32:	9301      	str	r3, [sp, #4]
 8008a34:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008a38:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008a3c:	3301      	adds	r3, #1
 8008a3e:	429a      	cmp	r2, r3
 8008a40:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008a44:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008a48:	fbb2 f6f3 	udiv	r6, r2, r3
 8008a4c:	d331      	bcc.n	8008ab2 <quorem+0x9e>
 8008a4e:	f04f 0e00 	mov.w	lr, #0
 8008a52:	4640      	mov	r0, r8
 8008a54:	46ac      	mov	ip, r5
 8008a56:	46f2      	mov	sl, lr
 8008a58:	f850 2b04 	ldr.w	r2, [r0], #4
 8008a5c:	b293      	uxth	r3, r2
 8008a5e:	fb06 e303 	mla	r3, r6, r3, lr
 8008a62:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008a66:	b29b      	uxth	r3, r3
 8008a68:	ebaa 0303 	sub.w	r3, sl, r3
 8008a6c:	0c12      	lsrs	r2, r2, #16
 8008a6e:	f8dc a000 	ldr.w	sl, [ip]
 8008a72:	fb06 e202 	mla	r2, r6, r2, lr
 8008a76:	fa13 f38a 	uxtah	r3, r3, sl
 8008a7a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008a7e:	fa1f fa82 	uxth.w	sl, r2
 8008a82:	f8dc 2000 	ldr.w	r2, [ip]
 8008a86:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8008a8a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008a8e:	b29b      	uxth	r3, r3
 8008a90:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008a94:	4581      	cmp	r9, r0
 8008a96:	f84c 3b04 	str.w	r3, [ip], #4
 8008a9a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008a9e:	d2db      	bcs.n	8008a58 <quorem+0x44>
 8008aa0:	f855 300b 	ldr.w	r3, [r5, fp]
 8008aa4:	b92b      	cbnz	r3, 8008ab2 <quorem+0x9e>
 8008aa6:	9b01      	ldr	r3, [sp, #4]
 8008aa8:	3b04      	subs	r3, #4
 8008aaa:	429d      	cmp	r5, r3
 8008aac:	461a      	mov	r2, r3
 8008aae:	d32e      	bcc.n	8008b0e <quorem+0xfa>
 8008ab0:	613c      	str	r4, [r7, #16]
 8008ab2:	4638      	mov	r0, r7
 8008ab4:	f001 f8f2 	bl	8009c9c <__mcmp>
 8008ab8:	2800      	cmp	r0, #0
 8008aba:	db24      	blt.n	8008b06 <quorem+0xf2>
 8008abc:	3601      	adds	r6, #1
 8008abe:	4628      	mov	r0, r5
 8008ac0:	f04f 0c00 	mov.w	ip, #0
 8008ac4:	f858 2b04 	ldr.w	r2, [r8], #4
 8008ac8:	f8d0 e000 	ldr.w	lr, [r0]
 8008acc:	b293      	uxth	r3, r2
 8008ace:	ebac 0303 	sub.w	r3, ip, r3
 8008ad2:	0c12      	lsrs	r2, r2, #16
 8008ad4:	fa13 f38e 	uxtah	r3, r3, lr
 8008ad8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008adc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008ae0:	b29b      	uxth	r3, r3
 8008ae2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008ae6:	45c1      	cmp	r9, r8
 8008ae8:	f840 3b04 	str.w	r3, [r0], #4
 8008aec:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008af0:	d2e8      	bcs.n	8008ac4 <quorem+0xb0>
 8008af2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008af6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008afa:	b922      	cbnz	r2, 8008b06 <quorem+0xf2>
 8008afc:	3b04      	subs	r3, #4
 8008afe:	429d      	cmp	r5, r3
 8008b00:	461a      	mov	r2, r3
 8008b02:	d30a      	bcc.n	8008b1a <quorem+0x106>
 8008b04:	613c      	str	r4, [r7, #16]
 8008b06:	4630      	mov	r0, r6
 8008b08:	b003      	add	sp, #12
 8008b0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b0e:	6812      	ldr	r2, [r2, #0]
 8008b10:	3b04      	subs	r3, #4
 8008b12:	2a00      	cmp	r2, #0
 8008b14:	d1cc      	bne.n	8008ab0 <quorem+0x9c>
 8008b16:	3c01      	subs	r4, #1
 8008b18:	e7c7      	b.n	8008aaa <quorem+0x96>
 8008b1a:	6812      	ldr	r2, [r2, #0]
 8008b1c:	3b04      	subs	r3, #4
 8008b1e:	2a00      	cmp	r2, #0
 8008b20:	d1f0      	bne.n	8008b04 <quorem+0xf0>
 8008b22:	3c01      	subs	r4, #1
 8008b24:	e7eb      	b.n	8008afe <quorem+0xea>
 8008b26:	2000      	movs	r0, #0
 8008b28:	e7ee      	b.n	8008b08 <quorem+0xf4>
 8008b2a:	0000      	movs	r0, r0
 8008b2c:	0000      	movs	r0, r0
	...

08008b30 <_dtoa_r>:
 8008b30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b34:	ed2d 8b02 	vpush	{d8}
 8008b38:	ec57 6b10 	vmov	r6, r7, d0
 8008b3c:	b095      	sub	sp, #84	; 0x54
 8008b3e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008b40:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008b44:	9105      	str	r1, [sp, #20]
 8008b46:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8008b4a:	4604      	mov	r4, r0
 8008b4c:	9209      	str	r2, [sp, #36]	; 0x24
 8008b4e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008b50:	b975      	cbnz	r5, 8008b70 <_dtoa_r+0x40>
 8008b52:	2010      	movs	r0, #16
 8008b54:	f000 fe10 	bl	8009778 <malloc>
 8008b58:	4602      	mov	r2, r0
 8008b5a:	6260      	str	r0, [r4, #36]	; 0x24
 8008b5c:	b920      	cbnz	r0, 8008b68 <_dtoa_r+0x38>
 8008b5e:	4bb2      	ldr	r3, [pc, #712]	; (8008e28 <_dtoa_r+0x2f8>)
 8008b60:	21ea      	movs	r1, #234	; 0xea
 8008b62:	48b2      	ldr	r0, [pc, #712]	; (8008e2c <_dtoa_r+0x2fc>)
 8008b64:	f002 f916 	bl	800ad94 <__assert_func>
 8008b68:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008b6c:	6005      	str	r5, [r0, #0]
 8008b6e:	60c5      	str	r5, [r0, #12]
 8008b70:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008b72:	6819      	ldr	r1, [r3, #0]
 8008b74:	b151      	cbz	r1, 8008b8c <_dtoa_r+0x5c>
 8008b76:	685a      	ldr	r2, [r3, #4]
 8008b78:	604a      	str	r2, [r1, #4]
 8008b7a:	2301      	movs	r3, #1
 8008b7c:	4093      	lsls	r3, r2
 8008b7e:	608b      	str	r3, [r1, #8]
 8008b80:	4620      	mov	r0, r4
 8008b82:	f000 fe4d 	bl	8009820 <_Bfree>
 8008b86:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008b88:	2200      	movs	r2, #0
 8008b8a:	601a      	str	r2, [r3, #0]
 8008b8c:	1e3b      	subs	r3, r7, #0
 8008b8e:	bfb9      	ittee	lt
 8008b90:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008b94:	9303      	strlt	r3, [sp, #12]
 8008b96:	2300      	movge	r3, #0
 8008b98:	f8c8 3000 	strge.w	r3, [r8]
 8008b9c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8008ba0:	4ba3      	ldr	r3, [pc, #652]	; (8008e30 <_dtoa_r+0x300>)
 8008ba2:	bfbc      	itt	lt
 8008ba4:	2201      	movlt	r2, #1
 8008ba6:	f8c8 2000 	strlt.w	r2, [r8]
 8008baa:	ea33 0309 	bics.w	r3, r3, r9
 8008bae:	d11b      	bne.n	8008be8 <_dtoa_r+0xb8>
 8008bb0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008bb2:	f242 730f 	movw	r3, #9999	; 0x270f
 8008bb6:	6013      	str	r3, [r2, #0]
 8008bb8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008bbc:	4333      	orrs	r3, r6
 8008bbe:	f000 857a 	beq.w	80096b6 <_dtoa_r+0xb86>
 8008bc2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008bc4:	b963      	cbnz	r3, 8008be0 <_dtoa_r+0xb0>
 8008bc6:	4b9b      	ldr	r3, [pc, #620]	; (8008e34 <_dtoa_r+0x304>)
 8008bc8:	e024      	b.n	8008c14 <_dtoa_r+0xe4>
 8008bca:	4b9b      	ldr	r3, [pc, #620]	; (8008e38 <_dtoa_r+0x308>)
 8008bcc:	9300      	str	r3, [sp, #0]
 8008bce:	3308      	adds	r3, #8
 8008bd0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008bd2:	6013      	str	r3, [r2, #0]
 8008bd4:	9800      	ldr	r0, [sp, #0]
 8008bd6:	b015      	add	sp, #84	; 0x54
 8008bd8:	ecbd 8b02 	vpop	{d8}
 8008bdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008be0:	4b94      	ldr	r3, [pc, #592]	; (8008e34 <_dtoa_r+0x304>)
 8008be2:	9300      	str	r3, [sp, #0]
 8008be4:	3303      	adds	r3, #3
 8008be6:	e7f3      	b.n	8008bd0 <_dtoa_r+0xa0>
 8008be8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008bec:	2200      	movs	r2, #0
 8008bee:	ec51 0b17 	vmov	r0, r1, d7
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8008bf8:	f7f7 ff66 	bl	8000ac8 <__aeabi_dcmpeq>
 8008bfc:	4680      	mov	r8, r0
 8008bfe:	b158      	cbz	r0, 8008c18 <_dtoa_r+0xe8>
 8008c00:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008c02:	2301      	movs	r3, #1
 8008c04:	6013      	str	r3, [r2, #0]
 8008c06:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	f000 8551 	beq.w	80096b0 <_dtoa_r+0xb80>
 8008c0e:	488b      	ldr	r0, [pc, #556]	; (8008e3c <_dtoa_r+0x30c>)
 8008c10:	6018      	str	r0, [r3, #0]
 8008c12:	1e43      	subs	r3, r0, #1
 8008c14:	9300      	str	r3, [sp, #0]
 8008c16:	e7dd      	b.n	8008bd4 <_dtoa_r+0xa4>
 8008c18:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8008c1c:	aa12      	add	r2, sp, #72	; 0x48
 8008c1e:	a913      	add	r1, sp, #76	; 0x4c
 8008c20:	4620      	mov	r0, r4
 8008c22:	f001 f8df 	bl	8009de4 <__d2b>
 8008c26:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008c2a:	4683      	mov	fp, r0
 8008c2c:	2d00      	cmp	r5, #0
 8008c2e:	d07c      	beq.n	8008d2a <_dtoa_r+0x1fa>
 8008c30:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008c32:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8008c36:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008c3a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8008c3e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008c42:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008c46:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008c4a:	4b7d      	ldr	r3, [pc, #500]	; (8008e40 <_dtoa_r+0x310>)
 8008c4c:	2200      	movs	r2, #0
 8008c4e:	4630      	mov	r0, r6
 8008c50:	4639      	mov	r1, r7
 8008c52:	f7f7 fb19 	bl	8000288 <__aeabi_dsub>
 8008c56:	a36e      	add	r3, pc, #440	; (adr r3, 8008e10 <_dtoa_r+0x2e0>)
 8008c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c5c:	f7f7 fccc 	bl	80005f8 <__aeabi_dmul>
 8008c60:	a36d      	add	r3, pc, #436	; (adr r3, 8008e18 <_dtoa_r+0x2e8>)
 8008c62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c66:	f7f7 fb11 	bl	800028c <__adddf3>
 8008c6a:	4606      	mov	r6, r0
 8008c6c:	4628      	mov	r0, r5
 8008c6e:	460f      	mov	r7, r1
 8008c70:	f7f7 fc58 	bl	8000524 <__aeabi_i2d>
 8008c74:	a36a      	add	r3, pc, #424	; (adr r3, 8008e20 <_dtoa_r+0x2f0>)
 8008c76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c7a:	f7f7 fcbd 	bl	80005f8 <__aeabi_dmul>
 8008c7e:	4602      	mov	r2, r0
 8008c80:	460b      	mov	r3, r1
 8008c82:	4630      	mov	r0, r6
 8008c84:	4639      	mov	r1, r7
 8008c86:	f7f7 fb01 	bl	800028c <__adddf3>
 8008c8a:	4606      	mov	r6, r0
 8008c8c:	460f      	mov	r7, r1
 8008c8e:	f7f7 ff63 	bl	8000b58 <__aeabi_d2iz>
 8008c92:	2200      	movs	r2, #0
 8008c94:	4682      	mov	sl, r0
 8008c96:	2300      	movs	r3, #0
 8008c98:	4630      	mov	r0, r6
 8008c9a:	4639      	mov	r1, r7
 8008c9c:	f7f7 ff1e 	bl	8000adc <__aeabi_dcmplt>
 8008ca0:	b148      	cbz	r0, 8008cb6 <_dtoa_r+0x186>
 8008ca2:	4650      	mov	r0, sl
 8008ca4:	f7f7 fc3e 	bl	8000524 <__aeabi_i2d>
 8008ca8:	4632      	mov	r2, r6
 8008caa:	463b      	mov	r3, r7
 8008cac:	f7f7 ff0c 	bl	8000ac8 <__aeabi_dcmpeq>
 8008cb0:	b908      	cbnz	r0, 8008cb6 <_dtoa_r+0x186>
 8008cb2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008cb6:	f1ba 0f16 	cmp.w	sl, #22
 8008cba:	d854      	bhi.n	8008d66 <_dtoa_r+0x236>
 8008cbc:	4b61      	ldr	r3, [pc, #388]	; (8008e44 <_dtoa_r+0x314>)
 8008cbe:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cc6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008cca:	f7f7 ff07 	bl	8000adc <__aeabi_dcmplt>
 8008cce:	2800      	cmp	r0, #0
 8008cd0:	d04b      	beq.n	8008d6a <_dtoa_r+0x23a>
 8008cd2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008cd6:	2300      	movs	r3, #0
 8008cd8:	930e      	str	r3, [sp, #56]	; 0x38
 8008cda:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008cdc:	1b5d      	subs	r5, r3, r5
 8008cde:	1e6b      	subs	r3, r5, #1
 8008ce0:	9304      	str	r3, [sp, #16]
 8008ce2:	bf43      	ittte	mi
 8008ce4:	2300      	movmi	r3, #0
 8008ce6:	f1c5 0801 	rsbmi	r8, r5, #1
 8008cea:	9304      	strmi	r3, [sp, #16]
 8008cec:	f04f 0800 	movpl.w	r8, #0
 8008cf0:	f1ba 0f00 	cmp.w	sl, #0
 8008cf4:	db3b      	blt.n	8008d6e <_dtoa_r+0x23e>
 8008cf6:	9b04      	ldr	r3, [sp, #16]
 8008cf8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8008cfc:	4453      	add	r3, sl
 8008cfe:	9304      	str	r3, [sp, #16]
 8008d00:	2300      	movs	r3, #0
 8008d02:	9306      	str	r3, [sp, #24]
 8008d04:	9b05      	ldr	r3, [sp, #20]
 8008d06:	2b09      	cmp	r3, #9
 8008d08:	d869      	bhi.n	8008dde <_dtoa_r+0x2ae>
 8008d0a:	2b05      	cmp	r3, #5
 8008d0c:	bfc4      	itt	gt
 8008d0e:	3b04      	subgt	r3, #4
 8008d10:	9305      	strgt	r3, [sp, #20]
 8008d12:	9b05      	ldr	r3, [sp, #20]
 8008d14:	f1a3 0302 	sub.w	r3, r3, #2
 8008d18:	bfcc      	ite	gt
 8008d1a:	2500      	movgt	r5, #0
 8008d1c:	2501      	movle	r5, #1
 8008d1e:	2b03      	cmp	r3, #3
 8008d20:	d869      	bhi.n	8008df6 <_dtoa_r+0x2c6>
 8008d22:	e8df f003 	tbb	[pc, r3]
 8008d26:	4e2c      	.short	0x4e2c
 8008d28:	5a4c      	.short	0x5a4c
 8008d2a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8008d2e:	441d      	add	r5, r3
 8008d30:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008d34:	2b20      	cmp	r3, #32
 8008d36:	bfc1      	itttt	gt
 8008d38:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008d3c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008d40:	fa09 f303 	lslgt.w	r3, r9, r3
 8008d44:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008d48:	bfda      	itte	le
 8008d4a:	f1c3 0320 	rsble	r3, r3, #32
 8008d4e:	fa06 f003 	lslle.w	r0, r6, r3
 8008d52:	4318      	orrgt	r0, r3
 8008d54:	f7f7 fbd6 	bl	8000504 <__aeabi_ui2d>
 8008d58:	2301      	movs	r3, #1
 8008d5a:	4606      	mov	r6, r0
 8008d5c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008d60:	3d01      	subs	r5, #1
 8008d62:	9310      	str	r3, [sp, #64]	; 0x40
 8008d64:	e771      	b.n	8008c4a <_dtoa_r+0x11a>
 8008d66:	2301      	movs	r3, #1
 8008d68:	e7b6      	b.n	8008cd8 <_dtoa_r+0x1a8>
 8008d6a:	900e      	str	r0, [sp, #56]	; 0x38
 8008d6c:	e7b5      	b.n	8008cda <_dtoa_r+0x1aa>
 8008d6e:	f1ca 0300 	rsb	r3, sl, #0
 8008d72:	9306      	str	r3, [sp, #24]
 8008d74:	2300      	movs	r3, #0
 8008d76:	eba8 080a 	sub.w	r8, r8, sl
 8008d7a:	930d      	str	r3, [sp, #52]	; 0x34
 8008d7c:	e7c2      	b.n	8008d04 <_dtoa_r+0x1d4>
 8008d7e:	2300      	movs	r3, #0
 8008d80:	9308      	str	r3, [sp, #32]
 8008d82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	dc39      	bgt.n	8008dfc <_dtoa_r+0x2cc>
 8008d88:	f04f 0901 	mov.w	r9, #1
 8008d8c:	f8cd 9004 	str.w	r9, [sp, #4]
 8008d90:	464b      	mov	r3, r9
 8008d92:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8008d96:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008d98:	2200      	movs	r2, #0
 8008d9a:	6042      	str	r2, [r0, #4]
 8008d9c:	2204      	movs	r2, #4
 8008d9e:	f102 0614 	add.w	r6, r2, #20
 8008da2:	429e      	cmp	r6, r3
 8008da4:	6841      	ldr	r1, [r0, #4]
 8008da6:	d92f      	bls.n	8008e08 <_dtoa_r+0x2d8>
 8008da8:	4620      	mov	r0, r4
 8008daa:	f000 fcf9 	bl	80097a0 <_Balloc>
 8008dae:	9000      	str	r0, [sp, #0]
 8008db0:	2800      	cmp	r0, #0
 8008db2:	d14b      	bne.n	8008e4c <_dtoa_r+0x31c>
 8008db4:	4b24      	ldr	r3, [pc, #144]	; (8008e48 <_dtoa_r+0x318>)
 8008db6:	4602      	mov	r2, r0
 8008db8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008dbc:	e6d1      	b.n	8008b62 <_dtoa_r+0x32>
 8008dbe:	2301      	movs	r3, #1
 8008dc0:	e7de      	b.n	8008d80 <_dtoa_r+0x250>
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	9308      	str	r3, [sp, #32]
 8008dc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008dc8:	eb0a 0903 	add.w	r9, sl, r3
 8008dcc:	f109 0301 	add.w	r3, r9, #1
 8008dd0:	2b01      	cmp	r3, #1
 8008dd2:	9301      	str	r3, [sp, #4]
 8008dd4:	bfb8      	it	lt
 8008dd6:	2301      	movlt	r3, #1
 8008dd8:	e7dd      	b.n	8008d96 <_dtoa_r+0x266>
 8008dda:	2301      	movs	r3, #1
 8008ddc:	e7f2      	b.n	8008dc4 <_dtoa_r+0x294>
 8008dde:	2501      	movs	r5, #1
 8008de0:	2300      	movs	r3, #0
 8008de2:	9305      	str	r3, [sp, #20]
 8008de4:	9508      	str	r5, [sp, #32]
 8008de6:	f04f 39ff 	mov.w	r9, #4294967295
 8008dea:	2200      	movs	r2, #0
 8008dec:	f8cd 9004 	str.w	r9, [sp, #4]
 8008df0:	2312      	movs	r3, #18
 8008df2:	9209      	str	r2, [sp, #36]	; 0x24
 8008df4:	e7cf      	b.n	8008d96 <_dtoa_r+0x266>
 8008df6:	2301      	movs	r3, #1
 8008df8:	9308      	str	r3, [sp, #32]
 8008dfa:	e7f4      	b.n	8008de6 <_dtoa_r+0x2b6>
 8008dfc:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8008e00:	f8cd 9004 	str.w	r9, [sp, #4]
 8008e04:	464b      	mov	r3, r9
 8008e06:	e7c6      	b.n	8008d96 <_dtoa_r+0x266>
 8008e08:	3101      	adds	r1, #1
 8008e0a:	6041      	str	r1, [r0, #4]
 8008e0c:	0052      	lsls	r2, r2, #1
 8008e0e:	e7c6      	b.n	8008d9e <_dtoa_r+0x26e>
 8008e10:	636f4361 	.word	0x636f4361
 8008e14:	3fd287a7 	.word	0x3fd287a7
 8008e18:	8b60c8b3 	.word	0x8b60c8b3
 8008e1c:	3fc68a28 	.word	0x3fc68a28
 8008e20:	509f79fb 	.word	0x509f79fb
 8008e24:	3fd34413 	.word	0x3fd34413
 8008e28:	0800e23d 	.word	0x0800e23d
 8008e2c:	0800e254 	.word	0x0800e254
 8008e30:	7ff00000 	.word	0x7ff00000
 8008e34:	0800e239 	.word	0x0800e239
 8008e38:	0800e230 	.word	0x0800e230
 8008e3c:	0800e20d 	.word	0x0800e20d
 8008e40:	3ff80000 	.word	0x3ff80000
 8008e44:	0800e350 	.word	0x0800e350
 8008e48:	0800e2b3 	.word	0x0800e2b3
 8008e4c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008e4e:	9a00      	ldr	r2, [sp, #0]
 8008e50:	601a      	str	r2, [r3, #0]
 8008e52:	9b01      	ldr	r3, [sp, #4]
 8008e54:	2b0e      	cmp	r3, #14
 8008e56:	f200 80ad 	bhi.w	8008fb4 <_dtoa_r+0x484>
 8008e5a:	2d00      	cmp	r5, #0
 8008e5c:	f000 80aa 	beq.w	8008fb4 <_dtoa_r+0x484>
 8008e60:	f1ba 0f00 	cmp.w	sl, #0
 8008e64:	dd36      	ble.n	8008ed4 <_dtoa_r+0x3a4>
 8008e66:	4ac3      	ldr	r2, [pc, #780]	; (8009174 <_dtoa_r+0x644>)
 8008e68:	f00a 030f 	and.w	r3, sl, #15
 8008e6c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008e70:	ed93 7b00 	vldr	d7, [r3]
 8008e74:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8008e78:	ea4f 172a 	mov.w	r7, sl, asr #4
 8008e7c:	eeb0 8a47 	vmov.f32	s16, s14
 8008e80:	eef0 8a67 	vmov.f32	s17, s15
 8008e84:	d016      	beq.n	8008eb4 <_dtoa_r+0x384>
 8008e86:	4bbc      	ldr	r3, [pc, #752]	; (8009178 <_dtoa_r+0x648>)
 8008e88:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008e8c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008e90:	f7f7 fcdc 	bl	800084c <__aeabi_ddiv>
 8008e94:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008e98:	f007 070f 	and.w	r7, r7, #15
 8008e9c:	2503      	movs	r5, #3
 8008e9e:	4eb6      	ldr	r6, [pc, #728]	; (8009178 <_dtoa_r+0x648>)
 8008ea0:	b957      	cbnz	r7, 8008eb8 <_dtoa_r+0x388>
 8008ea2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008ea6:	ec53 2b18 	vmov	r2, r3, d8
 8008eaa:	f7f7 fccf 	bl	800084c <__aeabi_ddiv>
 8008eae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008eb2:	e029      	b.n	8008f08 <_dtoa_r+0x3d8>
 8008eb4:	2502      	movs	r5, #2
 8008eb6:	e7f2      	b.n	8008e9e <_dtoa_r+0x36e>
 8008eb8:	07f9      	lsls	r1, r7, #31
 8008eba:	d508      	bpl.n	8008ece <_dtoa_r+0x39e>
 8008ebc:	ec51 0b18 	vmov	r0, r1, d8
 8008ec0:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008ec4:	f7f7 fb98 	bl	80005f8 <__aeabi_dmul>
 8008ec8:	ec41 0b18 	vmov	d8, r0, r1
 8008ecc:	3501      	adds	r5, #1
 8008ece:	107f      	asrs	r7, r7, #1
 8008ed0:	3608      	adds	r6, #8
 8008ed2:	e7e5      	b.n	8008ea0 <_dtoa_r+0x370>
 8008ed4:	f000 80a6 	beq.w	8009024 <_dtoa_r+0x4f4>
 8008ed8:	f1ca 0600 	rsb	r6, sl, #0
 8008edc:	4ba5      	ldr	r3, [pc, #660]	; (8009174 <_dtoa_r+0x644>)
 8008ede:	4fa6      	ldr	r7, [pc, #664]	; (8009178 <_dtoa_r+0x648>)
 8008ee0:	f006 020f 	and.w	r2, r6, #15
 8008ee4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eec:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008ef0:	f7f7 fb82 	bl	80005f8 <__aeabi_dmul>
 8008ef4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008ef8:	1136      	asrs	r6, r6, #4
 8008efa:	2300      	movs	r3, #0
 8008efc:	2502      	movs	r5, #2
 8008efe:	2e00      	cmp	r6, #0
 8008f00:	f040 8085 	bne.w	800900e <_dtoa_r+0x4de>
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d1d2      	bne.n	8008eae <_dtoa_r+0x37e>
 8008f08:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	f000 808c 	beq.w	8009028 <_dtoa_r+0x4f8>
 8008f10:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008f14:	4b99      	ldr	r3, [pc, #612]	; (800917c <_dtoa_r+0x64c>)
 8008f16:	2200      	movs	r2, #0
 8008f18:	4630      	mov	r0, r6
 8008f1a:	4639      	mov	r1, r7
 8008f1c:	f7f7 fdde 	bl	8000adc <__aeabi_dcmplt>
 8008f20:	2800      	cmp	r0, #0
 8008f22:	f000 8081 	beq.w	8009028 <_dtoa_r+0x4f8>
 8008f26:	9b01      	ldr	r3, [sp, #4]
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d07d      	beq.n	8009028 <_dtoa_r+0x4f8>
 8008f2c:	f1b9 0f00 	cmp.w	r9, #0
 8008f30:	dd3c      	ble.n	8008fac <_dtoa_r+0x47c>
 8008f32:	f10a 33ff 	add.w	r3, sl, #4294967295
 8008f36:	9307      	str	r3, [sp, #28]
 8008f38:	2200      	movs	r2, #0
 8008f3a:	4b91      	ldr	r3, [pc, #580]	; (8009180 <_dtoa_r+0x650>)
 8008f3c:	4630      	mov	r0, r6
 8008f3e:	4639      	mov	r1, r7
 8008f40:	f7f7 fb5a 	bl	80005f8 <__aeabi_dmul>
 8008f44:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008f48:	3501      	adds	r5, #1
 8008f4a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8008f4e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008f52:	4628      	mov	r0, r5
 8008f54:	f7f7 fae6 	bl	8000524 <__aeabi_i2d>
 8008f58:	4632      	mov	r2, r6
 8008f5a:	463b      	mov	r3, r7
 8008f5c:	f7f7 fb4c 	bl	80005f8 <__aeabi_dmul>
 8008f60:	4b88      	ldr	r3, [pc, #544]	; (8009184 <_dtoa_r+0x654>)
 8008f62:	2200      	movs	r2, #0
 8008f64:	f7f7 f992 	bl	800028c <__adddf3>
 8008f68:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8008f6c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008f70:	9303      	str	r3, [sp, #12]
 8008f72:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d15c      	bne.n	8009032 <_dtoa_r+0x502>
 8008f78:	4b83      	ldr	r3, [pc, #524]	; (8009188 <_dtoa_r+0x658>)
 8008f7a:	2200      	movs	r2, #0
 8008f7c:	4630      	mov	r0, r6
 8008f7e:	4639      	mov	r1, r7
 8008f80:	f7f7 f982 	bl	8000288 <__aeabi_dsub>
 8008f84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008f88:	4606      	mov	r6, r0
 8008f8a:	460f      	mov	r7, r1
 8008f8c:	f7f7 fdc4 	bl	8000b18 <__aeabi_dcmpgt>
 8008f90:	2800      	cmp	r0, #0
 8008f92:	f040 8296 	bne.w	80094c2 <_dtoa_r+0x992>
 8008f96:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8008f9a:	4630      	mov	r0, r6
 8008f9c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008fa0:	4639      	mov	r1, r7
 8008fa2:	f7f7 fd9b 	bl	8000adc <__aeabi_dcmplt>
 8008fa6:	2800      	cmp	r0, #0
 8008fa8:	f040 8288 	bne.w	80094bc <_dtoa_r+0x98c>
 8008fac:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008fb0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008fb4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	f2c0 8158 	blt.w	800926c <_dtoa_r+0x73c>
 8008fbc:	f1ba 0f0e 	cmp.w	sl, #14
 8008fc0:	f300 8154 	bgt.w	800926c <_dtoa_r+0x73c>
 8008fc4:	4b6b      	ldr	r3, [pc, #428]	; (8009174 <_dtoa_r+0x644>)
 8008fc6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008fca:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008fce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	f280 80e3 	bge.w	800919c <_dtoa_r+0x66c>
 8008fd6:	9b01      	ldr	r3, [sp, #4]
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	f300 80df 	bgt.w	800919c <_dtoa_r+0x66c>
 8008fde:	f040 826d 	bne.w	80094bc <_dtoa_r+0x98c>
 8008fe2:	4b69      	ldr	r3, [pc, #420]	; (8009188 <_dtoa_r+0x658>)
 8008fe4:	2200      	movs	r2, #0
 8008fe6:	4640      	mov	r0, r8
 8008fe8:	4649      	mov	r1, r9
 8008fea:	f7f7 fb05 	bl	80005f8 <__aeabi_dmul>
 8008fee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008ff2:	f7f7 fd87 	bl	8000b04 <__aeabi_dcmpge>
 8008ff6:	9e01      	ldr	r6, [sp, #4]
 8008ff8:	4637      	mov	r7, r6
 8008ffa:	2800      	cmp	r0, #0
 8008ffc:	f040 8243 	bne.w	8009486 <_dtoa_r+0x956>
 8009000:	9d00      	ldr	r5, [sp, #0]
 8009002:	2331      	movs	r3, #49	; 0x31
 8009004:	f805 3b01 	strb.w	r3, [r5], #1
 8009008:	f10a 0a01 	add.w	sl, sl, #1
 800900c:	e23f      	b.n	800948e <_dtoa_r+0x95e>
 800900e:	07f2      	lsls	r2, r6, #31
 8009010:	d505      	bpl.n	800901e <_dtoa_r+0x4ee>
 8009012:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009016:	f7f7 faef 	bl	80005f8 <__aeabi_dmul>
 800901a:	3501      	adds	r5, #1
 800901c:	2301      	movs	r3, #1
 800901e:	1076      	asrs	r6, r6, #1
 8009020:	3708      	adds	r7, #8
 8009022:	e76c      	b.n	8008efe <_dtoa_r+0x3ce>
 8009024:	2502      	movs	r5, #2
 8009026:	e76f      	b.n	8008f08 <_dtoa_r+0x3d8>
 8009028:	9b01      	ldr	r3, [sp, #4]
 800902a:	f8cd a01c 	str.w	sl, [sp, #28]
 800902e:	930c      	str	r3, [sp, #48]	; 0x30
 8009030:	e78d      	b.n	8008f4e <_dtoa_r+0x41e>
 8009032:	9900      	ldr	r1, [sp, #0]
 8009034:	980c      	ldr	r0, [sp, #48]	; 0x30
 8009036:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009038:	4b4e      	ldr	r3, [pc, #312]	; (8009174 <_dtoa_r+0x644>)
 800903a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800903e:	4401      	add	r1, r0
 8009040:	9102      	str	r1, [sp, #8]
 8009042:	9908      	ldr	r1, [sp, #32]
 8009044:	eeb0 8a47 	vmov.f32	s16, s14
 8009048:	eef0 8a67 	vmov.f32	s17, s15
 800904c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009050:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009054:	2900      	cmp	r1, #0
 8009056:	d045      	beq.n	80090e4 <_dtoa_r+0x5b4>
 8009058:	494c      	ldr	r1, [pc, #304]	; (800918c <_dtoa_r+0x65c>)
 800905a:	2000      	movs	r0, #0
 800905c:	f7f7 fbf6 	bl	800084c <__aeabi_ddiv>
 8009060:	ec53 2b18 	vmov	r2, r3, d8
 8009064:	f7f7 f910 	bl	8000288 <__aeabi_dsub>
 8009068:	9d00      	ldr	r5, [sp, #0]
 800906a:	ec41 0b18 	vmov	d8, r0, r1
 800906e:	4639      	mov	r1, r7
 8009070:	4630      	mov	r0, r6
 8009072:	f7f7 fd71 	bl	8000b58 <__aeabi_d2iz>
 8009076:	900c      	str	r0, [sp, #48]	; 0x30
 8009078:	f7f7 fa54 	bl	8000524 <__aeabi_i2d>
 800907c:	4602      	mov	r2, r0
 800907e:	460b      	mov	r3, r1
 8009080:	4630      	mov	r0, r6
 8009082:	4639      	mov	r1, r7
 8009084:	f7f7 f900 	bl	8000288 <__aeabi_dsub>
 8009088:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800908a:	3330      	adds	r3, #48	; 0x30
 800908c:	f805 3b01 	strb.w	r3, [r5], #1
 8009090:	ec53 2b18 	vmov	r2, r3, d8
 8009094:	4606      	mov	r6, r0
 8009096:	460f      	mov	r7, r1
 8009098:	f7f7 fd20 	bl	8000adc <__aeabi_dcmplt>
 800909c:	2800      	cmp	r0, #0
 800909e:	d165      	bne.n	800916c <_dtoa_r+0x63c>
 80090a0:	4632      	mov	r2, r6
 80090a2:	463b      	mov	r3, r7
 80090a4:	4935      	ldr	r1, [pc, #212]	; (800917c <_dtoa_r+0x64c>)
 80090a6:	2000      	movs	r0, #0
 80090a8:	f7f7 f8ee 	bl	8000288 <__aeabi_dsub>
 80090ac:	ec53 2b18 	vmov	r2, r3, d8
 80090b0:	f7f7 fd14 	bl	8000adc <__aeabi_dcmplt>
 80090b4:	2800      	cmp	r0, #0
 80090b6:	f040 80b9 	bne.w	800922c <_dtoa_r+0x6fc>
 80090ba:	9b02      	ldr	r3, [sp, #8]
 80090bc:	429d      	cmp	r5, r3
 80090be:	f43f af75 	beq.w	8008fac <_dtoa_r+0x47c>
 80090c2:	4b2f      	ldr	r3, [pc, #188]	; (8009180 <_dtoa_r+0x650>)
 80090c4:	ec51 0b18 	vmov	r0, r1, d8
 80090c8:	2200      	movs	r2, #0
 80090ca:	f7f7 fa95 	bl	80005f8 <__aeabi_dmul>
 80090ce:	4b2c      	ldr	r3, [pc, #176]	; (8009180 <_dtoa_r+0x650>)
 80090d0:	ec41 0b18 	vmov	d8, r0, r1
 80090d4:	2200      	movs	r2, #0
 80090d6:	4630      	mov	r0, r6
 80090d8:	4639      	mov	r1, r7
 80090da:	f7f7 fa8d 	bl	80005f8 <__aeabi_dmul>
 80090de:	4606      	mov	r6, r0
 80090e0:	460f      	mov	r7, r1
 80090e2:	e7c4      	b.n	800906e <_dtoa_r+0x53e>
 80090e4:	ec51 0b17 	vmov	r0, r1, d7
 80090e8:	f7f7 fa86 	bl	80005f8 <__aeabi_dmul>
 80090ec:	9b02      	ldr	r3, [sp, #8]
 80090ee:	9d00      	ldr	r5, [sp, #0]
 80090f0:	930c      	str	r3, [sp, #48]	; 0x30
 80090f2:	ec41 0b18 	vmov	d8, r0, r1
 80090f6:	4639      	mov	r1, r7
 80090f8:	4630      	mov	r0, r6
 80090fa:	f7f7 fd2d 	bl	8000b58 <__aeabi_d2iz>
 80090fe:	9011      	str	r0, [sp, #68]	; 0x44
 8009100:	f7f7 fa10 	bl	8000524 <__aeabi_i2d>
 8009104:	4602      	mov	r2, r0
 8009106:	460b      	mov	r3, r1
 8009108:	4630      	mov	r0, r6
 800910a:	4639      	mov	r1, r7
 800910c:	f7f7 f8bc 	bl	8000288 <__aeabi_dsub>
 8009110:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009112:	3330      	adds	r3, #48	; 0x30
 8009114:	f805 3b01 	strb.w	r3, [r5], #1
 8009118:	9b02      	ldr	r3, [sp, #8]
 800911a:	429d      	cmp	r5, r3
 800911c:	4606      	mov	r6, r0
 800911e:	460f      	mov	r7, r1
 8009120:	f04f 0200 	mov.w	r2, #0
 8009124:	d134      	bne.n	8009190 <_dtoa_r+0x660>
 8009126:	4b19      	ldr	r3, [pc, #100]	; (800918c <_dtoa_r+0x65c>)
 8009128:	ec51 0b18 	vmov	r0, r1, d8
 800912c:	f7f7 f8ae 	bl	800028c <__adddf3>
 8009130:	4602      	mov	r2, r0
 8009132:	460b      	mov	r3, r1
 8009134:	4630      	mov	r0, r6
 8009136:	4639      	mov	r1, r7
 8009138:	f7f7 fcee 	bl	8000b18 <__aeabi_dcmpgt>
 800913c:	2800      	cmp	r0, #0
 800913e:	d175      	bne.n	800922c <_dtoa_r+0x6fc>
 8009140:	ec53 2b18 	vmov	r2, r3, d8
 8009144:	4911      	ldr	r1, [pc, #68]	; (800918c <_dtoa_r+0x65c>)
 8009146:	2000      	movs	r0, #0
 8009148:	f7f7 f89e 	bl	8000288 <__aeabi_dsub>
 800914c:	4602      	mov	r2, r0
 800914e:	460b      	mov	r3, r1
 8009150:	4630      	mov	r0, r6
 8009152:	4639      	mov	r1, r7
 8009154:	f7f7 fcc2 	bl	8000adc <__aeabi_dcmplt>
 8009158:	2800      	cmp	r0, #0
 800915a:	f43f af27 	beq.w	8008fac <_dtoa_r+0x47c>
 800915e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009160:	1e6b      	subs	r3, r5, #1
 8009162:	930c      	str	r3, [sp, #48]	; 0x30
 8009164:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009168:	2b30      	cmp	r3, #48	; 0x30
 800916a:	d0f8      	beq.n	800915e <_dtoa_r+0x62e>
 800916c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8009170:	e04a      	b.n	8009208 <_dtoa_r+0x6d8>
 8009172:	bf00      	nop
 8009174:	0800e350 	.word	0x0800e350
 8009178:	0800e328 	.word	0x0800e328
 800917c:	3ff00000 	.word	0x3ff00000
 8009180:	40240000 	.word	0x40240000
 8009184:	401c0000 	.word	0x401c0000
 8009188:	40140000 	.word	0x40140000
 800918c:	3fe00000 	.word	0x3fe00000
 8009190:	4baf      	ldr	r3, [pc, #700]	; (8009450 <_dtoa_r+0x920>)
 8009192:	f7f7 fa31 	bl	80005f8 <__aeabi_dmul>
 8009196:	4606      	mov	r6, r0
 8009198:	460f      	mov	r7, r1
 800919a:	e7ac      	b.n	80090f6 <_dtoa_r+0x5c6>
 800919c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80091a0:	9d00      	ldr	r5, [sp, #0]
 80091a2:	4642      	mov	r2, r8
 80091a4:	464b      	mov	r3, r9
 80091a6:	4630      	mov	r0, r6
 80091a8:	4639      	mov	r1, r7
 80091aa:	f7f7 fb4f 	bl	800084c <__aeabi_ddiv>
 80091ae:	f7f7 fcd3 	bl	8000b58 <__aeabi_d2iz>
 80091b2:	9002      	str	r0, [sp, #8]
 80091b4:	f7f7 f9b6 	bl	8000524 <__aeabi_i2d>
 80091b8:	4642      	mov	r2, r8
 80091ba:	464b      	mov	r3, r9
 80091bc:	f7f7 fa1c 	bl	80005f8 <__aeabi_dmul>
 80091c0:	4602      	mov	r2, r0
 80091c2:	460b      	mov	r3, r1
 80091c4:	4630      	mov	r0, r6
 80091c6:	4639      	mov	r1, r7
 80091c8:	f7f7 f85e 	bl	8000288 <__aeabi_dsub>
 80091cc:	9e02      	ldr	r6, [sp, #8]
 80091ce:	9f01      	ldr	r7, [sp, #4]
 80091d0:	3630      	adds	r6, #48	; 0x30
 80091d2:	f805 6b01 	strb.w	r6, [r5], #1
 80091d6:	9e00      	ldr	r6, [sp, #0]
 80091d8:	1bae      	subs	r6, r5, r6
 80091da:	42b7      	cmp	r7, r6
 80091dc:	4602      	mov	r2, r0
 80091de:	460b      	mov	r3, r1
 80091e0:	d137      	bne.n	8009252 <_dtoa_r+0x722>
 80091e2:	f7f7 f853 	bl	800028c <__adddf3>
 80091e6:	4642      	mov	r2, r8
 80091e8:	464b      	mov	r3, r9
 80091ea:	4606      	mov	r6, r0
 80091ec:	460f      	mov	r7, r1
 80091ee:	f7f7 fc93 	bl	8000b18 <__aeabi_dcmpgt>
 80091f2:	b9c8      	cbnz	r0, 8009228 <_dtoa_r+0x6f8>
 80091f4:	4642      	mov	r2, r8
 80091f6:	464b      	mov	r3, r9
 80091f8:	4630      	mov	r0, r6
 80091fa:	4639      	mov	r1, r7
 80091fc:	f7f7 fc64 	bl	8000ac8 <__aeabi_dcmpeq>
 8009200:	b110      	cbz	r0, 8009208 <_dtoa_r+0x6d8>
 8009202:	9b02      	ldr	r3, [sp, #8]
 8009204:	07d9      	lsls	r1, r3, #31
 8009206:	d40f      	bmi.n	8009228 <_dtoa_r+0x6f8>
 8009208:	4620      	mov	r0, r4
 800920a:	4659      	mov	r1, fp
 800920c:	f000 fb08 	bl	8009820 <_Bfree>
 8009210:	2300      	movs	r3, #0
 8009212:	702b      	strb	r3, [r5, #0]
 8009214:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009216:	f10a 0001 	add.w	r0, sl, #1
 800921a:	6018      	str	r0, [r3, #0]
 800921c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800921e:	2b00      	cmp	r3, #0
 8009220:	f43f acd8 	beq.w	8008bd4 <_dtoa_r+0xa4>
 8009224:	601d      	str	r5, [r3, #0]
 8009226:	e4d5      	b.n	8008bd4 <_dtoa_r+0xa4>
 8009228:	f8cd a01c 	str.w	sl, [sp, #28]
 800922c:	462b      	mov	r3, r5
 800922e:	461d      	mov	r5, r3
 8009230:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009234:	2a39      	cmp	r2, #57	; 0x39
 8009236:	d108      	bne.n	800924a <_dtoa_r+0x71a>
 8009238:	9a00      	ldr	r2, [sp, #0]
 800923a:	429a      	cmp	r2, r3
 800923c:	d1f7      	bne.n	800922e <_dtoa_r+0x6fe>
 800923e:	9a07      	ldr	r2, [sp, #28]
 8009240:	9900      	ldr	r1, [sp, #0]
 8009242:	3201      	adds	r2, #1
 8009244:	9207      	str	r2, [sp, #28]
 8009246:	2230      	movs	r2, #48	; 0x30
 8009248:	700a      	strb	r2, [r1, #0]
 800924a:	781a      	ldrb	r2, [r3, #0]
 800924c:	3201      	adds	r2, #1
 800924e:	701a      	strb	r2, [r3, #0]
 8009250:	e78c      	b.n	800916c <_dtoa_r+0x63c>
 8009252:	4b7f      	ldr	r3, [pc, #508]	; (8009450 <_dtoa_r+0x920>)
 8009254:	2200      	movs	r2, #0
 8009256:	f7f7 f9cf 	bl	80005f8 <__aeabi_dmul>
 800925a:	2200      	movs	r2, #0
 800925c:	2300      	movs	r3, #0
 800925e:	4606      	mov	r6, r0
 8009260:	460f      	mov	r7, r1
 8009262:	f7f7 fc31 	bl	8000ac8 <__aeabi_dcmpeq>
 8009266:	2800      	cmp	r0, #0
 8009268:	d09b      	beq.n	80091a2 <_dtoa_r+0x672>
 800926a:	e7cd      	b.n	8009208 <_dtoa_r+0x6d8>
 800926c:	9a08      	ldr	r2, [sp, #32]
 800926e:	2a00      	cmp	r2, #0
 8009270:	f000 80c4 	beq.w	80093fc <_dtoa_r+0x8cc>
 8009274:	9a05      	ldr	r2, [sp, #20]
 8009276:	2a01      	cmp	r2, #1
 8009278:	f300 80a8 	bgt.w	80093cc <_dtoa_r+0x89c>
 800927c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800927e:	2a00      	cmp	r2, #0
 8009280:	f000 80a0 	beq.w	80093c4 <_dtoa_r+0x894>
 8009284:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009288:	9e06      	ldr	r6, [sp, #24]
 800928a:	4645      	mov	r5, r8
 800928c:	9a04      	ldr	r2, [sp, #16]
 800928e:	2101      	movs	r1, #1
 8009290:	441a      	add	r2, r3
 8009292:	4620      	mov	r0, r4
 8009294:	4498      	add	r8, r3
 8009296:	9204      	str	r2, [sp, #16]
 8009298:	f000 fb7e 	bl	8009998 <__i2b>
 800929c:	4607      	mov	r7, r0
 800929e:	2d00      	cmp	r5, #0
 80092a0:	dd0b      	ble.n	80092ba <_dtoa_r+0x78a>
 80092a2:	9b04      	ldr	r3, [sp, #16]
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	dd08      	ble.n	80092ba <_dtoa_r+0x78a>
 80092a8:	42ab      	cmp	r3, r5
 80092aa:	9a04      	ldr	r2, [sp, #16]
 80092ac:	bfa8      	it	ge
 80092ae:	462b      	movge	r3, r5
 80092b0:	eba8 0803 	sub.w	r8, r8, r3
 80092b4:	1aed      	subs	r5, r5, r3
 80092b6:	1ad3      	subs	r3, r2, r3
 80092b8:	9304      	str	r3, [sp, #16]
 80092ba:	9b06      	ldr	r3, [sp, #24]
 80092bc:	b1fb      	cbz	r3, 80092fe <_dtoa_r+0x7ce>
 80092be:	9b08      	ldr	r3, [sp, #32]
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	f000 809f 	beq.w	8009404 <_dtoa_r+0x8d4>
 80092c6:	2e00      	cmp	r6, #0
 80092c8:	dd11      	ble.n	80092ee <_dtoa_r+0x7be>
 80092ca:	4639      	mov	r1, r7
 80092cc:	4632      	mov	r2, r6
 80092ce:	4620      	mov	r0, r4
 80092d0:	f000 fc1e 	bl	8009b10 <__pow5mult>
 80092d4:	465a      	mov	r2, fp
 80092d6:	4601      	mov	r1, r0
 80092d8:	4607      	mov	r7, r0
 80092da:	4620      	mov	r0, r4
 80092dc:	f000 fb72 	bl	80099c4 <__multiply>
 80092e0:	4659      	mov	r1, fp
 80092e2:	9007      	str	r0, [sp, #28]
 80092e4:	4620      	mov	r0, r4
 80092e6:	f000 fa9b 	bl	8009820 <_Bfree>
 80092ea:	9b07      	ldr	r3, [sp, #28]
 80092ec:	469b      	mov	fp, r3
 80092ee:	9b06      	ldr	r3, [sp, #24]
 80092f0:	1b9a      	subs	r2, r3, r6
 80092f2:	d004      	beq.n	80092fe <_dtoa_r+0x7ce>
 80092f4:	4659      	mov	r1, fp
 80092f6:	4620      	mov	r0, r4
 80092f8:	f000 fc0a 	bl	8009b10 <__pow5mult>
 80092fc:	4683      	mov	fp, r0
 80092fe:	2101      	movs	r1, #1
 8009300:	4620      	mov	r0, r4
 8009302:	f000 fb49 	bl	8009998 <__i2b>
 8009306:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009308:	2b00      	cmp	r3, #0
 800930a:	4606      	mov	r6, r0
 800930c:	dd7c      	ble.n	8009408 <_dtoa_r+0x8d8>
 800930e:	461a      	mov	r2, r3
 8009310:	4601      	mov	r1, r0
 8009312:	4620      	mov	r0, r4
 8009314:	f000 fbfc 	bl	8009b10 <__pow5mult>
 8009318:	9b05      	ldr	r3, [sp, #20]
 800931a:	2b01      	cmp	r3, #1
 800931c:	4606      	mov	r6, r0
 800931e:	dd76      	ble.n	800940e <_dtoa_r+0x8de>
 8009320:	2300      	movs	r3, #0
 8009322:	9306      	str	r3, [sp, #24]
 8009324:	6933      	ldr	r3, [r6, #16]
 8009326:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800932a:	6918      	ldr	r0, [r3, #16]
 800932c:	f000 fae4 	bl	80098f8 <__hi0bits>
 8009330:	f1c0 0020 	rsb	r0, r0, #32
 8009334:	9b04      	ldr	r3, [sp, #16]
 8009336:	4418      	add	r0, r3
 8009338:	f010 001f 	ands.w	r0, r0, #31
 800933c:	f000 8086 	beq.w	800944c <_dtoa_r+0x91c>
 8009340:	f1c0 0320 	rsb	r3, r0, #32
 8009344:	2b04      	cmp	r3, #4
 8009346:	dd7f      	ble.n	8009448 <_dtoa_r+0x918>
 8009348:	f1c0 001c 	rsb	r0, r0, #28
 800934c:	9b04      	ldr	r3, [sp, #16]
 800934e:	4403      	add	r3, r0
 8009350:	4480      	add	r8, r0
 8009352:	4405      	add	r5, r0
 8009354:	9304      	str	r3, [sp, #16]
 8009356:	f1b8 0f00 	cmp.w	r8, #0
 800935a:	dd05      	ble.n	8009368 <_dtoa_r+0x838>
 800935c:	4659      	mov	r1, fp
 800935e:	4642      	mov	r2, r8
 8009360:	4620      	mov	r0, r4
 8009362:	f000 fc2f 	bl	8009bc4 <__lshift>
 8009366:	4683      	mov	fp, r0
 8009368:	9b04      	ldr	r3, [sp, #16]
 800936a:	2b00      	cmp	r3, #0
 800936c:	dd05      	ble.n	800937a <_dtoa_r+0x84a>
 800936e:	4631      	mov	r1, r6
 8009370:	461a      	mov	r2, r3
 8009372:	4620      	mov	r0, r4
 8009374:	f000 fc26 	bl	8009bc4 <__lshift>
 8009378:	4606      	mov	r6, r0
 800937a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800937c:	2b00      	cmp	r3, #0
 800937e:	d069      	beq.n	8009454 <_dtoa_r+0x924>
 8009380:	4631      	mov	r1, r6
 8009382:	4658      	mov	r0, fp
 8009384:	f000 fc8a 	bl	8009c9c <__mcmp>
 8009388:	2800      	cmp	r0, #0
 800938a:	da63      	bge.n	8009454 <_dtoa_r+0x924>
 800938c:	2300      	movs	r3, #0
 800938e:	4659      	mov	r1, fp
 8009390:	220a      	movs	r2, #10
 8009392:	4620      	mov	r0, r4
 8009394:	f000 fa66 	bl	8009864 <__multadd>
 8009398:	9b08      	ldr	r3, [sp, #32]
 800939a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800939e:	4683      	mov	fp, r0
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	f000 818f 	beq.w	80096c4 <_dtoa_r+0xb94>
 80093a6:	4639      	mov	r1, r7
 80093a8:	2300      	movs	r3, #0
 80093aa:	220a      	movs	r2, #10
 80093ac:	4620      	mov	r0, r4
 80093ae:	f000 fa59 	bl	8009864 <__multadd>
 80093b2:	f1b9 0f00 	cmp.w	r9, #0
 80093b6:	4607      	mov	r7, r0
 80093b8:	f300 808e 	bgt.w	80094d8 <_dtoa_r+0x9a8>
 80093bc:	9b05      	ldr	r3, [sp, #20]
 80093be:	2b02      	cmp	r3, #2
 80093c0:	dc50      	bgt.n	8009464 <_dtoa_r+0x934>
 80093c2:	e089      	b.n	80094d8 <_dtoa_r+0x9a8>
 80093c4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80093c6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80093ca:	e75d      	b.n	8009288 <_dtoa_r+0x758>
 80093cc:	9b01      	ldr	r3, [sp, #4]
 80093ce:	1e5e      	subs	r6, r3, #1
 80093d0:	9b06      	ldr	r3, [sp, #24]
 80093d2:	42b3      	cmp	r3, r6
 80093d4:	bfbf      	itttt	lt
 80093d6:	9b06      	ldrlt	r3, [sp, #24]
 80093d8:	9606      	strlt	r6, [sp, #24]
 80093da:	1af2      	sublt	r2, r6, r3
 80093dc:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 80093de:	bfb6      	itet	lt
 80093e0:	189b      	addlt	r3, r3, r2
 80093e2:	1b9e      	subge	r6, r3, r6
 80093e4:	930d      	strlt	r3, [sp, #52]	; 0x34
 80093e6:	9b01      	ldr	r3, [sp, #4]
 80093e8:	bfb8      	it	lt
 80093ea:	2600      	movlt	r6, #0
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	bfb5      	itete	lt
 80093f0:	eba8 0503 	sublt.w	r5, r8, r3
 80093f4:	9b01      	ldrge	r3, [sp, #4]
 80093f6:	2300      	movlt	r3, #0
 80093f8:	4645      	movge	r5, r8
 80093fa:	e747      	b.n	800928c <_dtoa_r+0x75c>
 80093fc:	9e06      	ldr	r6, [sp, #24]
 80093fe:	9f08      	ldr	r7, [sp, #32]
 8009400:	4645      	mov	r5, r8
 8009402:	e74c      	b.n	800929e <_dtoa_r+0x76e>
 8009404:	9a06      	ldr	r2, [sp, #24]
 8009406:	e775      	b.n	80092f4 <_dtoa_r+0x7c4>
 8009408:	9b05      	ldr	r3, [sp, #20]
 800940a:	2b01      	cmp	r3, #1
 800940c:	dc18      	bgt.n	8009440 <_dtoa_r+0x910>
 800940e:	9b02      	ldr	r3, [sp, #8]
 8009410:	b9b3      	cbnz	r3, 8009440 <_dtoa_r+0x910>
 8009412:	9b03      	ldr	r3, [sp, #12]
 8009414:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009418:	b9a3      	cbnz	r3, 8009444 <_dtoa_r+0x914>
 800941a:	9b03      	ldr	r3, [sp, #12]
 800941c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009420:	0d1b      	lsrs	r3, r3, #20
 8009422:	051b      	lsls	r3, r3, #20
 8009424:	b12b      	cbz	r3, 8009432 <_dtoa_r+0x902>
 8009426:	9b04      	ldr	r3, [sp, #16]
 8009428:	3301      	adds	r3, #1
 800942a:	9304      	str	r3, [sp, #16]
 800942c:	f108 0801 	add.w	r8, r8, #1
 8009430:	2301      	movs	r3, #1
 8009432:	9306      	str	r3, [sp, #24]
 8009434:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009436:	2b00      	cmp	r3, #0
 8009438:	f47f af74 	bne.w	8009324 <_dtoa_r+0x7f4>
 800943c:	2001      	movs	r0, #1
 800943e:	e779      	b.n	8009334 <_dtoa_r+0x804>
 8009440:	2300      	movs	r3, #0
 8009442:	e7f6      	b.n	8009432 <_dtoa_r+0x902>
 8009444:	9b02      	ldr	r3, [sp, #8]
 8009446:	e7f4      	b.n	8009432 <_dtoa_r+0x902>
 8009448:	d085      	beq.n	8009356 <_dtoa_r+0x826>
 800944a:	4618      	mov	r0, r3
 800944c:	301c      	adds	r0, #28
 800944e:	e77d      	b.n	800934c <_dtoa_r+0x81c>
 8009450:	40240000 	.word	0x40240000
 8009454:	9b01      	ldr	r3, [sp, #4]
 8009456:	2b00      	cmp	r3, #0
 8009458:	dc38      	bgt.n	80094cc <_dtoa_r+0x99c>
 800945a:	9b05      	ldr	r3, [sp, #20]
 800945c:	2b02      	cmp	r3, #2
 800945e:	dd35      	ble.n	80094cc <_dtoa_r+0x99c>
 8009460:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8009464:	f1b9 0f00 	cmp.w	r9, #0
 8009468:	d10d      	bne.n	8009486 <_dtoa_r+0x956>
 800946a:	4631      	mov	r1, r6
 800946c:	464b      	mov	r3, r9
 800946e:	2205      	movs	r2, #5
 8009470:	4620      	mov	r0, r4
 8009472:	f000 f9f7 	bl	8009864 <__multadd>
 8009476:	4601      	mov	r1, r0
 8009478:	4606      	mov	r6, r0
 800947a:	4658      	mov	r0, fp
 800947c:	f000 fc0e 	bl	8009c9c <__mcmp>
 8009480:	2800      	cmp	r0, #0
 8009482:	f73f adbd 	bgt.w	8009000 <_dtoa_r+0x4d0>
 8009486:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009488:	9d00      	ldr	r5, [sp, #0]
 800948a:	ea6f 0a03 	mvn.w	sl, r3
 800948e:	f04f 0800 	mov.w	r8, #0
 8009492:	4631      	mov	r1, r6
 8009494:	4620      	mov	r0, r4
 8009496:	f000 f9c3 	bl	8009820 <_Bfree>
 800949a:	2f00      	cmp	r7, #0
 800949c:	f43f aeb4 	beq.w	8009208 <_dtoa_r+0x6d8>
 80094a0:	f1b8 0f00 	cmp.w	r8, #0
 80094a4:	d005      	beq.n	80094b2 <_dtoa_r+0x982>
 80094a6:	45b8      	cmp	r8, r7
 80094a8:	d003      	beq.n	80094b2 <_dtoa_r+0x982>
 80094aa:	4641      	mov	r1, r8
 80094ac:	4620      	mov	r0, r4
 80094ae:	f000 f9b7 	bl	8009820 <_Bfree>
 80094b2:	4639      	mov	r1, r7
 80094b4:	4620      	mov	r0, r4
 80094b6:	f000 f9b3 	bl	8009820 <_Bfree>
 80094ba:	e6a5      	b.n	8009208 <_dtoa_r+0x6d8>
 80094bc:	2600      	movs	r6, #0
 80094be:	4637      	mov	r7, r6
 80094c0:	e7e1      	b.n	8009486 <_dtoa_r+0x956>
 80094c2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80094c4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80094c8:	4637      	mov	r7, r6
 80094ca:	e599      	b.n	8009000 <_dtoa_r+0x4d0>
 80094cc:	9b08      	ldr	r3, [sp, #32]
 80094ce:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	f000 80fd 	beq.w	80096d2 <_dtoa_r+0xba2>
 80094d8:	2d00      	cmp	r5, #0
 80094da:	dd05      	ble.n	80094e8 <_dtoa_r+0x9b8>
 80094dc:	4639      	mov	r1, r7
 80094de:	462a      	mov	r2, r5
 80094e0:	4620      	mov	r0, r4
 80094e2:	f000 fb6f 	bl	8009bc4 <__lshift>
 80094e6:	4607      	mov	r7, r0
 80094e8:	9b06      	ldr	r3, [sp, #24]
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d05c      	beq.n	80095a8 <_dtoa_r+0xa78>
 80094ee:	6879      	ldr	r1, [r7, #4]
 80094f0:	4620      	mov	r0, r4
 80094f2:	f000 f955 	bl	80097a0 <_Balloc>
 80094f6:	4605      	mov	r5, r0
 80094f8:	b928      	cbnz	r0, 8009506 <_dtoa_r+0x9d6>
 80094fa:	4b80      	ldr	r3, [pc, #512]	; (80096fc <_dtoa_r+0xbcc>)
 80094fc:	4602      	mov	r2, r0
 80094fe:	f240 21ea 	movw	r1, #746	; 0x2ea
 8009502:	f7ff bb2e 	b.w	8008b62 <_dtoa_r+0x32>
 8009506:	693a      	ldr	r2, [r7, #16]
 8009508:	3202      	adds	r2, #2
 800950a:	0092      	lsls	r2, r2, #2
 800950c:	f107 010c 	add.w	r1, r7, #12
 8009510:	300c      	adds	r0, #12
 8009512:	f7fe fb5d 	bl	8007bd0 <memcpy>
 8009516:	2201      	movs	r2, #1
 8009518:	4629      	mov	r1, r5
 800951a:	4620      	mov	r0, r4
 800951c:	f000 fb52 	bl	8009bc4 <__lshift>
 8009520:	9b00      	ldr	r3, [sp, #0]
 8009522:	3301      	adds	r3, #1
 8009524:	9301      	str	r3, [sp, #4]
 8009526:	9b00      	ldr	r3, [sp, #0]
 8009528:	444b      	add	r3, r9
 800952a:	9307      	str	r3, [sp, #28]
 800952c:	9b02      	ldr	r3, [sp, #8]
 800952e:	f003 0301 	and.w	r3, r3, #1
 8009532:	46b8      	mov	r8, r7
 8009534:	9306      	str	r3, [sp, #24]
 8009536:	4607      	mov	r7, r0
 8009538:	9b01      	ldr	r3, [sp, #4]
 800953a:	4631      	mov	r1, r6
 800953c:	3b01      	subs	r3, #1
 800953e:	4658      	mov	r0, fp
 8009540:	9302      	str	r3, [sp, #8]
 8009542:	f7ff fa67 	bl	8008a14 <quorem>
 8009546:	4603      	mov	r3, r0
 8009548:	3330      	adds	r3, #48	; 0x30
 800954a:	9004      	str	r0, [sp, #16]
 800954c:	4641      	mov	r1, r8
 800954e:	4658      	mov	r0, fp
 8009550:	9308      	str	r3, [sp, #32]
 8009552:	f000 fba3 	bl	8009c9c <__mcmp>
 8009556:	463a      	mov	r2, r7
 8009558:	4681      	mov	r9, r0
 800955a:	4631      	mov	r1, r6
 800955c:	4620      	mov	r0, r4
 800955e:	f000 fbb9 	bl	8009cd4 <__mdiff>
 8009562:	68c2      	ldr	r2, [r0, #12]
 8009564:	9b08      	ldr	r3, [sp, #32]
 8009566:	4605      	mov	r5, r0
 8009568:	bb02      	cbnz	r2, 80095ac <_dtoa_r+0xa7c>
 800956a:	4601      	mov	r1, r0
 800956c:	4658      	mov	r0, fp
 800956e:	f000 fb95 	bl	8009c9c <__mcmp>
 8009572:	9b08      	ldr	r3, [sp, #32]
 8009574:	4602      	mov	r2, r0
 8009576:	4629      	mov	r1, r5
 8009578:	4620      	mov	r0, r4
 800957a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800957e:	f000 f94f 	bl	8009820 <_Bfree>
 8009582:	9b05      	ldr	r3, [sp, #20]
 8009584:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009586:	9d01      	ldr	r5, [sp, #4]
 8009588:	ea43 0102 	orr.w	r1, r3, r2
 800958c:	9b06      	ldr	r3, [sp, #24]
 800958e:	430b      	orrs	r3, r1
 8009590:	9b08      	ldr	r3, [sp, #32]
 8009592:	d10d      	bne.n	80095b0 <_dtoa_r+0xa80>
 8009594:	2b39      	cmp	r3, #57	; 0x39
 8009596:	d029      	beq.n	80095ec <_dtoa_r+0xabc>
 8009598:	f1b9 0f00 	cmp.w	r9, #0
 800959c:	dd01      	ble.n	80095a2 <_dtoa_r+0xa72>
 800959e:	9b04      	ldr	r3, [sp, #16]
 80095a0:	3331      	adds	r3, #49	; 0x31
 80095a2:	9a02      	ldr	r2, [sp, #8]
 80095a4:	7013      	strb	r3, [r2, #0]
 80095a6:	e774      	b.n	8009492 <_dtoa_r+0x962>
 80095a8:	4638      	mov	r0, r7
 80095aa:	e7b9      	b.n	8009520 <_dtoa_r+0x9f0>
 80095ac:	2201      	movs	r2, #1
 80095ae:	e7e2      	b.n	8009576 <_dtoa_r+0xa46>
 80095b0:	f1b9 0f00 	cmp.w	r9, #0
 80095b4:	db06      	blt.n	80095c4 <_dtoa_r+0xa94>
 80095b6:	9905      	ldr	r1, [sp, #20]
 80095b8:	ea41 0909 	orr.w	r9, r1, r9
 80095bc:	9906      	ldr	r1, [sp, #24]
 80095be:	ea59 0101 	orrs.w	r1, r9, r1
 80095c2:	d120      	bne.n	8009606 <_dtoa_r+0xad6>
 80095c4:	2a00      	cmp	r2, #0
 80095c6:	ddec      	ble.n	80095a2 <_dtoa_r+0xa72>
 80095c8:	4659      	mov	r1, fp
 80095ca:	2201      	movs	r2, #1
 80095cc:	4620      	mov	r0, r4
 80095ce:	9301      	str	r3, [sp, #4]
 80095d0:	f000 faf8 	bl	8009bc4 <__lshift>
 80095d4:	4631      	mov	r1, r6
 80095d6:	4683      	mov	fp, r0
 80095d8:	f000 fb60 	bl	8009c9c <__mcmp>
 80095dc:	2800      	cmp	r0, #0
 80095de:	9b01      	ldr	r3, [sp, #4]
 80095e0:	dc02      	bgt.n	80095e8 <_dtoa_r+0xab8>
 80095e2:	d1de      	bne.n	80095a2 <_dtoa_r+0xa72>
 80095e4:	07da      	lsls	r2, r3, #31
 80095e6:	d5dc      	bpl.n	80095a2 <_dtoa_r+0xa72>
 80095e8:	2b39      	cmp	r3, #57	; 0x39
 80095ea:	d1d8      	bne.n	800959e <_dtoa_r+0xa6e>
 80095ec:	9a02      	ldr	r2, [sp, #8]
 80095ee:	2339      	movs	r3, #57	; 0x39
 80095f0:	7013      	strb	r3, [r2, #0]
 80095f2:	462b      	mov	r3, r5
 80095f4:	461d      	mov	r5, r3
 80095f6:	3b01      	subs	r3, #1
 80095f8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80095fc:	2a39      	cmp	r2, #57	; 0x39
 80095fe:	d050      	beq.n	80096a2 <_dtoa_r+0xb72>
 8009600:	3201      	adds	r2, #1
 8009602:	701a      	strb	r2, [r3, #0]
 8009604:	e745      	b.n	8009492 <_dtoa_r+0x962>
 8009606:	2a00      	cmp	r2, #0
 8009608:	dd03      	ble.n	8009612 <_dtoa_r+0xae2>
 800960a:	2b39      	cmp	r3, #57	; 0x39
 800960c:	d0ee      	beq.n	80095ec <_dtoa_r+0xabc>
 800960e:	3301      	adds	r3, #1
 8009610:	e7c7      	b.n	80095a2 <_dtoa_r+0xa72>
 8009612:	9a01      	ldr	r2, [sp, #4]
 8009614:	9907      	ldr	r1, [sp, #28]
 8009616:	f802 3c01 	strb.w	r3, [r2, #-1]
 800961a:	428a      	cmp	r2, r1
 800961c:	d02a      	beq.n	8009674 <_dtoa_r+0xb44>
 800961e:	4659      	mov	r1, fp
 8009620:	2300      	movs	r3, #0
 8009622:	220a      	movs	r2, #10
 8009624:	4620      	mov	r0, r4
 8009626:	f000 f91d 	bl	8009864 <__multadd>
 800962a:	45b8      	cmp	r8, r7
 800962c:	4683      	mov	fp, r0
 800962e:	f04f 0300 	mov.w	r3, #0
 8009632:	f04f 020a 	mov.w	r2, #10
 8009636:	4641      	mov	r1, r8
 8009638:	4620      	mov	r0, r4
 800963a:	d107      	bne.n	800964c <_dtoa_r+0xb1c>
 800963c:	f000 f912 	bl	8009864 <__multadd>
 8009640:	4680      	mov	r8, r0
 8009642:	4607      	mov	r7, r0
 8009644:	9b01      	ldr	r3, [sp, #4]
 8009646:	3301      	adds	r3, #1
 8009648:	9301      	str	r3, [sp, #4]
 800964a:	e775      	b.n	8009538 <_dtoa_r+0xa08>
 800964c:	f000 f90a 	bl	8009864 <__multadd>
 8009650:	4639      	mov	r1, r7
 8009652:	4680      	mov	r8, r0
 8009654:	2300      	movs	r3, #0
 8009656:	220a      	movs	r2, #10
 8009658:	4620      	mov	r0, r4
 800965a:	f000 f903 	bl	8009864 <__multadd>
 800965e:	4607      	mov	r7, r0
 8009660:	e7f0      	b.n	8009644 <_dtoa_r+0xb14>
 8009662:	f1b9 0f00 	cmp.w	r9, #0
 8009666:	9a00      	ldr	r2, [sp, #0]
 8009668:	bfcc      	ite	gt
 800966a:	464d      	movgt	r5, r9
 800966c:	2501      	movle	r5, #1
 800966e:	4415      	add	r5, r2
 8009670:	f04f 0800 	mov.w	r8, #0
 8009674:	4659      	mov	r1, fp
 8009676:	2201      	movs	r2, #1
 8009678:	4620      	mov	r0, r4
 800967a:	9301      	str	r3, [sp, #4]
 800967c:	f000 faa2 	bl	8009bc4 <__lshift>
 8009680:	4631      	mov	r1, r6
 8009682:	4683      	mov	fp, r0
 8009684:	f000 fb0a 	bl	8009c9c <__mcmp>
 8009688:	2800      	cmp	r0, #0
 800968a:	dcb2      	bgt.n	80095f2 <_dtoa_r+0xac2>
 800968c:	d102      	bne.n	8009694 <_dtoa_r+0xb64>
 800968e:	9b01      	ldr	r3, [sp, #4]
 8009690:	07db      	lsls	r3, r3, #31
 8009692:	d4ae      	bmi.n	80095f2 <_dtoa_r+0xac2>
 8009694:	462b      	mov	r3, r5
 8009696:	461d      	mov	r5, r3
 8009698:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800969c:	2a30      	cmp	r2, #48	; 0x30
 800969e:	d0fa      	beq.n	8009696 <_dtoa_r+0xb66>
 80096a0:	e6f7      	b.n	8009492 <_dtoa_r+0x962>
 80096a2:	9a00      	ldr	r2, [sp, #0]
 80096a4:	429a      	cmp	r2, r3
 80096a6:	d1a5      	bne.n	80095f4 <_dtoa_r+0xac4>
 80096a8:	f10a 0a01 	add.w	sl, sl, #1
 80096ac:	2331      	movs	r3, #49	; 0x31
 80096ae:	e779      	b.n	80095a4 <_dtoa_r+0xa74>
 80096b0:	4b13      	ldr	r3, [pc, #76]	; (8009700 <_dtoa_r+0xbd0>)
 80096b2:	f7ff baaf 	b.w	8008c14 <_dtoa_r+0xe4>
 80096b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	f47f aa86 	bne.w	8008bca <_dtoa_r+0x9a>
 80096be:	4b11      	ldr	r3, [pc, #68]	; (8009704 <_dtoa_r+0xbd4>)
 80096c0:	f7ff baa8 	b.w	8008c14 <_dtoa_r+0xe4>
 80096c4:	f1b9 0f00 	cmp.w	r9, #0
 80096c8:	dc03      	bgt.n	80096d2 <_dtoa_r+0xba2>
 80096ca:	9b05      	ldr	r3, [sp, #20]
 80096cc:	2b02      	cmp	r3, #2
 80096ce:	f73f aec9 	bgt.w	8009464 <_dtoa_r+0x934>
 80096d2:	9d00      	ldr	r5, [sp, #0]
 80096d4:	4631      	mov	r1, r6
 80096d6:	4658      	mov	r0, fp
 80096d8:	f7ff f99c 	bl	8008a14 <quorem>
 80096dc:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80096e0:	f805 3b01 	strb.w	r3, [r5], #1
 80096e4:	9a00      	ldr	r2, [sp, #0]
 80096e6:	1aaa      	subs	r2, r5, r2
 80096e8:	4591      	cmp	r9, r2
 80096ea:	ddba      	ble.n	8009662 <_dtoa_r+0xb32>
 80096ec:	4659      	mov	r1, fp
 80096ee:	2300      	movs	r3, #0
 80096f0:	220a      	movs	r2, #10
 80096f2:	4620      	mov	r0, r4
 80096f4:	f000 f8b6 	bl	8009864 <__multadd>
 80096f8:	4683      	mov	fp, r0
 80096fa:	e7eb      	b.n	80096d4 <_dtoa_r+0xba4>
 80096fc:	0800e2b3 	.word	0x0800e2b3
 8009700:	0800e20c 	.word	0x0800e20c
 8009704:	0800e230 	.word	0x0800e230

08009708 <_fstat_r>:
 8009708:	b538      	push	{r3, r4, r5, lr}
 800970a:	4d07      	ldr	r5, [pc, #28]	; (8009728 <_fstat_r+0x20>)
 800970c:	2300      	movs	r3, #0
 800970e:	4604      	mov	r4, r0
 8009710:	4608      	mov	r0, r1
 8009712:	4611      	mov	r1, r2
 8009714:	602b      	str	r3, [r5, #0]
 8009716:	f7f8 f95e 	bl	80019d6 <_fstat>
 800971a:	1c43      	adds	r3, r0, #1
 800971c:	d102      	bne.n	8009724 <_fstat_r+0x1c>
 800971e:	682b      	ldr	r3, [r5, #0]
 8009720:	b103      	cbz	r3, 8009724 <_fstat_r+0x1c>
 8009722:	6023      	str	r3, [r4, #0]
 8009724:	bd38      	pop	{r3, r4, r5, pc}
 8009726:	bf00      	nop
 8009728:	2000a44c 	.word	0x2000a44c

0800972c <_isatty_r>:
 800972c:	b538      	push	{r3, r4, r5, lr}
 800972e:	4d06      	ldr	r5, [pc, #24]	; (8009748 <_isatty_r+0x1c>)
 8009730:	2300      	movs	r3, #0
 8009732:	4604      	mov	r4, r0
 8009734:	4608      	mov	r0, r1
 8009736:	602b      	str	r3, [r5, #0]
 8009738:	f7f8 f95d 	bl	80019f6 <_isatty>
 800973c:	1c43      	adds	r3, r0, #1
 800973e:	d102      	bne.n	8009746 <_isatty_r+0x1a>
 8009740:	682b      	ldr	r3, [r5, #0]
 8009742:	b103      	cbz	r3, 8009746 <_isatty_r+0x1a>
 8009744:	6023      	str	r3, [r4, #0]
 8009746:	bd38      	pop	{r3, r4, r5, pc}
 8009748:	2000a44c 	.word	0x2000a44c

0800974c <_localeconv_r>:
 800974c:	4800      	ldr	r0, [pc, #0]	; (8009750 <_localeconv_r+0x4>)
 800974e:	4770      	bx	lr
 8009750:	20000170 	.word	0x20000170

08009754 <_lseek_r>:
 8009754:	b538      	push	{r3, r4, r5, lr}
 8009756:	4d07      	ldr	r5, [pc, #28]	; (8009774 <_lseek_r+0x20>)
 8009758:	4604      	mov	r4, r0
 800975a:	4608      	mov	r0, r1
 800975c:	4611      	mov	r1, r2
 800975e:	2200      	movs	r2, #0
 8009760:	602a      	str	r2, [r5, #0]
 8009762:	461a      	mov	r2, r3
 8009764:	f7f8 f952 	bl	8001a0c <_lseek>
 8009768:	1c43      	adds	r3, r0, #1
 800976a:	d102      	bne.n	8009772 <_lseek_r+0x1e>
 800976c:	682b      	ldr	r3, [r5, #0]
 800976e:	b103      	cbz	r3, 8009772 <_lseek_r+0x1e>
 8009770:	6023      	str	r3, [r4, #0]
 8009772:	bd38      	pop	{r3, r4, r5, pc}
 8009774:	2000a44c 	.word	0x2000a44c

08009778 <malloc>:
 8009778:	4b02      	ldr	r3, [pc, #8]	; (8009784 <malloc+0xc>)
 800977a:	4601      	mov	r1, r0
 800977c:	6818      	ldr	r0, [r3, #0]
 800977e:	f7fe ba8d 	b.w	8007c9c <_malloc_r>
 8009782:	bf00      	nop
 8009784:	2000001c 	.word	0x2000001c

08009788 <__malloc_lock>:
 8009788:	4801      	ldr	r0, [pc, #4]	; (8009790 <__malloc_lock+0x8>)
 800978a:	f7fe b9ba 	b.w	8007b02 <__retarget_lock_acquire_recursive>
 800978e:	bf00      	nop
 8009790:	2000a444 	.word	0x2000a444

08009794 <__malloc_unlock>:
 8009794:	4801      	ldr	r0, [pc, #4]	; (800979c <__malloc_unlock+0x8>)
 8009796:	f7fe b9b5 	b.w	8007b04 <__retarget_lock_release_recursive>
 800979a:	bf00      	nop
 800979c:	2000a444 	.word	0x2000a444

080097a0 <_Balloc>:
 80097a0:	b570      	push	{r4, r5, r6, lr}
 80097a2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80097a4:	4604      	mov	r4, r0
 80097a6:	460d      	mov	r5, r1
 80097a8:	b976      	cbnz	r6, 80097c8 <_Balloc+0x28>
 80097aa:	2010      	movs	r0, #16
 80097ac:	f7ff ffe4 	bl	8009778 <malloc>
 80097b0:	4602      	mov	r2, r0
 80097b2:	6260      	str	r0, [r4, #36]	; 0x24
 80097b4:	b920      	cbnz	r0, 80097c0 <_Balloc+0x20>
 80097b6:	4b18      	ldr	r3, [pc, #96]	; (8009818 <_Balloc+0x78>)
 80097b8:	4818      	ldr	r0, [pc, #96]	; (800981c <_Balloc+0x7c>)
 80097ba:	2166      	movs	r1, #102	; 0x66
 80097bc:	f001 faea 	bl	800ad94 <__assert_func>
 80097c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80097c4:	6006      	str	r6, [r0, #0]
 80097c6:	60c6      	str	r6, [r0, #12]
 80097c8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80097ca:	68f3      	ldr	r3, [r6, #12]
 80097cc:	b183      	cbz	r3, 80097f0 <_Balloc+0x50>
 80097ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80097d0:	68db      	ldr	r3, [r3, #12]
 80097d2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80097d6:	b9b8      	cbnz	r0, 8009808 <_Balloc+0x68>
 80097d8:	2101      	movs	r1, #1
 80097da:	fa01 f605 	lsl.w	r6, r1, r5
 80097de:	1d72      	adds	r2, r6, #5
 80097e0:	0092      	lsls	r2, r2, #2
 80097e2:	4620      	mov	r0, r4
 80097e4:	f000 fb5a 	bl	8009e9c <_calloc_r>
 80097e8:	b160      	cbz	r0, 8009804 <_Balloc+0x64>
 80097ea:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80097ee:	e00e      	b.n	800980e <_Balloc+0x6e>
 80097f0:	2221      	movs	r2, #33	; 0x21
 80097f2:	2104      	movs	r1, #4
 80097f4:	4620      	mov	r0, r4
 80097f6:	f000 fb51 	bl	8009e9c <_calloc_r>
 80097fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80097fc:	60f0      	str	r0, [r6, #12]
 80097fe:	68db      	ldr	r3, [r3, #12]
 8009800:	2b00      	cmp	r3, #0
 8009802:	d1e4      	bne.n	80097ce <_Balloc+0x2e>
 8009804:	2000      	movs	r0, #0
 8009806:	bd70      	pop	{r4, r5, r6, pc}
 8009808:	6802      	ldr	r2, [r0, #0]
 800980a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800980e:	2300      	movs	r3, #0
 8009810:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009814:	e7f7      	b.n	8009806 <_Balloc+0x66>
 8009816:	bf00      	nop
 8009818:	0800e23d 	.word	0x0800e23d
 800981c:	0800e2c4 	.word	0x0800e2c4

08009820 <_Bfree>:
 8009820:	b570      	push	{r4, r5, r6, lr}
 8009822:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009824:	4605      	mov	r5, r0
 8009826:	460c      	mov	r4, r1
 8009828:	b976      	cbnz	r6, 8009848 <_Bfree+0x28>
 800982a:	2010      	movs	r0, #16
 800982c:	f7ff ffa4 	bl	8009778 <malloc>
 8009830:	4602      	mov	r2, r0
 8009832:	6268      	str	r0, [r5, #36]	; 0x24
 8009834:	b920      	cbnz	r0, 8009840 <_Bfree+0x20>
 8009836:	4b09      	ldr	r3, [pc, #36]	; (800985c <_Bfree+0x3c>)
 8009838:	4809      	ldr	r0, [pc, #36]	; (8009860 <_Bfree+0x40>)
 800983a:	218a      	movs	r1, #138	; 0x8a
 800983c:	f001 faaa 	bl	800ad94 <__assert_func>
 8009840:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009844:	6006      	str	r6, [r0, #0]
 8009846:	60c6      	str	r6, [r0, #12]
 8009848:	b13c      	cbz	r4, 800985a <_Bfree+0x3a>
 800984a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800984c:	6862      	ldr	r2, [r4, #4]
 800984e:	68db      	ldr	r3, [r3, #12]
 8009850:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009854:	6021      	str	r1, [r4, #0]
 8009856:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800985a:	bd70      	pop	{r4, r5, r6, pc}
 800985c:	0800e23d 	.word	0x0800e23d
 8009860:	0800e2c4 	.word	0x0800e2c4

08009864 <__multadd>:
 8009864:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009868:	690e      	ldr	r6, [r1, #16]
 800986a:	4607      	mov	r7, r0
 800986c:	4698      	mov	r8, r3
 800986e:	460c      	mov	r4, r1
 8009870:	f101 0014 	add.w	r0, r1, #20
 8009874:	2300      	movs	r3, #0
 8009876:	6805      	ldr	r5, [r0, #0]
 8009878:	b2a9      	uxth	r1, r5
 800987a:	fb02 8101 	mla	r1, r2, r1, r8
 800987e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8009882:	0c2d      	lsrs	r5, r5, #16
 8009884:	fb02 c505 	mla	r5, r2, r5, ip
 8009888:	b289      	uxth	r1, r1
 800988a:	3301      	adds	r3, #1
 800988c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8009890:	429e      	cmp	r6, r3
 8009892:	f840 1b04 	str.w	r1, [r0], #4
 8009896:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800989a:	dcec      	bgt.n	8009876 <__multadd+0x12>
 800989c:	f1b8 0f00 	cmp.w	r8, #0
 80098a0:	d022      	beq.n	80098e8 <__multadd+0x84>
 80098a2:	68a3      	ldr	r3, [r4, #8]
 80098a4:	42b3      	cmp	r3, r6
 80098a6:	dc19      	bgt.n	80098dc <__multadd+0x78>
 80098a8:	6861      	ldr	r1, [r4, #4]
 80098aa:	4638      	mov	r0, r7
 80098ac:	3101      	adds	r1, #1
 80098ae:	f7ff ff77 	bl	80097a0 <_Balloc>
 80098b2:	4605      	mov	r5, r0
 80098b4:	b928      	cbnz	r0, 80098c2 <__multadd+0x5e>
 80098b6:	4602      	mov	r2, r0
 80098b8:	4b0d      	ldr	r3, [pc, #52]	; (80098f0 <__multadd+0x8c>)
 80098ba:	480e      	ldr	r0, [pc, #56]	; (80098f4 <__multadd+0x90>)
 80098bc:	21b5      	movs	r1, #181	; 0xb5
 80098be:	f001 fa69 	bl	800ad94 <__assert_func>
 80098c2:	6922      	ldr	r2, [r4, #16]
 80098c4:	3202      	adds	r2, #2
 80098c6:	f104 010c 	add.w	r1, r4, #12
 80098ca:	0092      	lsls	r2, r2, #2
 80098cc:	300c      	adds	r0, #12
 80098ce:	f7fe f97f 	bl	8007bd0 <memcpy>
 80098d2:	4621      	mov	r1, r4
 80098d4:	4638      	mov	r0, r7
 80098d6:	f7ff ffa3 	bl	8009820 <_Bfree>
 80098da:	462c      	mov	r4, r5
 80098dc:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80098e0:	3601      	adds	r6, #1
 80098e2:	f8c3 8014 	str.w	r8, [r3, #20]
 80098e6:	6126      	str	r6, [r4, #16]
 80098e8:	4620      	mov	r0, r4
 80098ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80098ee:	bf00      	nop
 80098f0:	0800e2b3 	.word	0x0800e2b3
 80098f4:	0800e2c4 	.word	0x0800e2c4

080098f8 <__hi0bits>:
 80098f8:	0c03      	lsrs	r3, r0, #16
 80098fa:	041b      	lsls	r3, r3, #16
 80098fc:	b9d3      	cbnz	r3, 8009934 <__hi0bits+0x3c>
 80098fe:	0400      	lsls	r0, r0, #16
 8009900:	2310      	movs	r3, #16
 8009902:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009906:	bf04      	itt	eq
 8009908:	0200      	lsleq	r0, r0, #8
 800990a:	3308      	addeq	r3, #8
 800990c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009910:	bf04      	itt	eq
 8009912:	0100      	lsleq	r0, r0, #4
 8009914:	3304      	addeq	r3, #4
 8009916:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800991a:	bf04      	itt	eq
 800991c:	0080      	lsleq	r0, r0, #2
 800991e:	3302      	addeq	r3, #2
 8009920:	2800      	cmp	r0, #0
 8009922:	db05      	blt.n	8009930 <__hi0bits+0x38>
 8009924:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009928:	f103 0301 	add.w	r3, r3, #1
 800992c:	bf08      	it	eq
 800992e:	2320      	moveq	r3, #32
 8009930:	4618      	mov	r0, r3
 8009932:	4770      	bx	lr
 8009934:	2300      	movs	r3, #0
 8009936:	e7e4      	b.n	8009902 <__hi0bits+0xa>

08009938 <__lo0bits>:
 8009938:	6803      	ldr	r3, [r0, #0]
 800993a:	f013 0207 	ands.w	r2, r3, #7
 800993e:	4601      	mov	r1, r0
 8009940:	d00b      	beq.n	800995a <__lo0bits+0x22>
 8009942:	07da      	lsls	r2, r3, #31
 8009944:	d424      	bmi.n	8009990 <__lo0bits+0x58>
 8009946:	0798      	lsls	r0, r3, #30
 8009948:	bf49      	itett	mi
 800994a:	085b      	lsrmi	r3, r3, #1
 800994c:	089b      	lsrpl	r3, r3, #2
 800994e:	2001      	movmi	r0, #1
 8009950:	600b      	strmi	r3, [r1, #0]
 8009952:	bf5c      	itt	pl
 8009954:	600b      	strpl	r3, [r1, #0]
 8009956:	2002      	movpl	r0, #2
 8009958:	4770      	bx	lr
 800995a:	b298      	uxth	r0, r3
 800995c:	b9b0      	cbnz	r0, 800998c <__lo0bits+0x54>
 800995e:	0c1b      	lsrs	r3, r3, #16
 8009960:	2010      	movs	r0, #16
 8009962:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009966:	bf04      	itt	eq
 8009968:	0a1b      	lsreq	r3, r3, #8
 800996a:	3008      	addeq	r0, #8
 800996c:	071a      	lsls	r2, r3, #28
 800996e:	bf04      	itt	eq
 8009970:	091b      	lsreq	r3, r3, #4
 8009972:	3004      	addeq	r0, #4
 8009974:	079a      	lsls	r2, r3, #30
 8009976:	bf04      	itt	eq
 8009978:	089b      	lsreq	r3, r3, #2
 800997a:	3002      	addeq	r0, #2
 800997c:	07da      	lsls	r2, r3, #31
 800997e:	d403      	bmi.n	8009988 <__lo0bits+0x50>
 8009980:	085b      	lsrs	r3, r3, #1
 8009982:	f100 0001 	add.w	r0, r0, #1
 8009986:	d005      	beq.n	8009994 <__lo0bits+0x5c>
 8009988:	600b      	str	r3, [r1, #0]
 800998a:	4770      	bx	lr
 800998c:	4610      	mov	r0, r2
 800998e:	e7e8      	b.n	8009962 <__lo0bits+0x2a>
 8009990:	2000      	movs	r0, #0
 8009992:	4770      	bx	lr
 8009994:	2020      	movs	r0, #32
 8009996:	4770      	bx	lr

08009998 <__i2b>:
 8009998:	b510      	push	{r4, lr}
 800999a:	460c      	mov	r4, r1
 800999c:	2101      	movs	r1, #1
 800999e:	f7ff feff 	bl	80097a0 <_Balloc>
 80099a2:	4602      	mov	r2, r0
 80099a4:	b928      	cbnz	r0, 80099b2 <__i2b+0x1a>
 80099a6:	4b05      	ldr	r3, [pc, #20]	; (80099bc <__i2b+0x24>)
 80099a8:	4805      	ldr	r0, [pc, #20]	; (80099c0 <__i2b+0x28>)
 80099aa:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80099ae:	f001 f9f1 	bl	800ad94 <__assert_func>
 80099b2:	2301      	movs	r3, #1
 80099b4:	6144      	str	r4, [r0, #20]
 80099b6:	6103      	str	r3, [r0, #16]
 80099b8:	bd10      	pop	{r4, pc}
 80099ba:	bf00      	nop
 80099bc:	0800e2b3 	.word	0x0800e2b3
 80099c0:	0800e2c4 	.word	0x0800e2c4

080099c4 <__multiply>:
 80099c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099c8:	4614      	mov	r4, r2
 80099ca:	690a      	ldr	r2, [r1, #16]
 80099cc:	6923      	ldr	r3, [r4, #16]
 80099ce:	429a      	cmp	r2, r3
 80099d0:	bfb8      	it	lt
 80099d2:	460b      	movlt	r3, r1
 80099d4:	460d      	mov	r5, r1
 80099d6:	bfbc      	itt	lt
 80099d8:	4625      	movlt	r5, r4
 80099da:	461c      	movlt	r4, r3
 80099dc:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80099e0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80099e4:	68ab      	ldr	r3, [r5, #8]
 80099e6:	6869      	ldr	r1, [r5, #4]
 80099e8:	eb0a 0709 	add.w	r7, sl, r9
 80099ec:	42bb      	cmp	r3, r7
 80099ee:	b085      	sub	sp, #20
 80099f0:	bfb8      	it	lt
 80099f2:	3101      	addlt	r1, #1
 80099f4:	f7ff fed4 	bl	80097a0 <_Balloc>
 80099f8:	b930      	cbnz	r0, 8009a08 <__multiply+0x44>
 80099fa:	4602      	mov	r2, r0
 80099fc:	4b42      	ldr	r3, [pc, #264]	; (8009b08 <__multiply+0x144>)
 80099fe:	4843      	ldr	r0, [pc, #268]	; (8009b0c <__multiply+0x148>)
 8009a00:	f240 115d 	movw	r1, #349	; 0x15d
 8009a04:	f001 f9c6 	bl	800ad94 <__assert_func>
 8009a08:	f100 0614 	add.w	r6, r0, #20
 8009a0c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8009a10:	4633      	mov	r3, r6
 8009a12:	2200      	movs	r2, #0
 8009a14:	4543      	cmp	r3, r8
 8009a16:	d31e      	bcc.n	8009a56 <__multiply+0x92>
 8009a18:	f105 0c14 	add.w	ip, r5, #20
 8009a1c:	f104 0314 	add.w	r3, r4, #20
 8009a20:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8009a24:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8009a28:	9202      	str	r2, [sp, #8]
 8009a2a:	ebac 0205 	sub.w	r2, ip, r5
 8009a2e:	3a15      	subs	r2, #21
 8009a30:	f022 0203 	bic.w	r2, r2, #3
 8009a34:	3204      	adds	r2, #4
 8009a36:	f105 0115 	add.w	r1, r5, #21
 8009a3a:	458c      	cmp	ip, r1
 8009a3c:	bf38      	it	cc
 8009a3e:	2204      	movcc	r2, #4
 8009a40:	9201      	str	r2, [sp, #4]
 8009a42:	9a02      	ldr	r2, [sp, #8]
 8009a44:	9303      	str	r3, [sp, #12]
 8009a46:	429a      	cmp	r2, r3
 8009a48:	d808      	bhi.n	8009a5c <__multiply+0x98>
 8009a4a:	2f00      	cmp	r7, #0
 8009a4c:	dc55      	bgt.n	8009afa <__multiply+0x136>
 8009a4e:	6107      	str	r7, [r0, #16]
 8009a50:	b005      	add	sp, #20
 8009a52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a56:	f843 2b04 	str.w	r2, [r3], #4
 8009a5a:	e7db      	b.n	8009a14 <__multiply+0x50>
 8009a5c:	f8b3 a000 	ldrh.w	sl, [r3]
 8009a60:	f1ba 0f00 	cmp.w	sl, #0
 8009a64:	d020      	beq.n	8009aa8 <__multiply+0xe4>
 8009a66:	f105 0e14 	add.w	lr, r5, #20
 8009a6a:	46b1      	mov	r9, r6
 8009a6c:	2200      	movs	r2, #0
 8009a6e:	f85e 4b04 	ldr.w	r4, [lr], #4
 8009a72:	f8d9 b000 	ldr.w	fp, [r9]
 8009a76:	b2a1      	uxth	r1, r4
 8009a78:	fa1f fb8b 	uxth.w	fp, fp
 8009a7c:	fb0a b101 	mla	r1, sl, r1, fp
 8009a80:	4411      	add	r1, r2
 8009a82:	f8d9 2000 	ldr.w	r2, [r9]
 8009a86:	0c24      	lsrs	r4, r4, #16
 8009a88:	0c12      	lsrs	r2, r2, #16
 8009a8a:	fb0a 2404 	mla	r4, sl, r4, r2
 8009a8e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8009a92:	b289      	uxth	r1, r1
 8009a94:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8009a98:	45f4      	cmp	ip, lr
 8009a9a:	f849 1b04 	str.w	r1, [r9], #4
 8009a9e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8009aa2:	d8e4      	bhi.n	8009a6e <__multiply+0xaa>
 8009aa4:	9901      	ldr	r1, [sp, #4]
 8009aa6:	5072      	str	r2, [r6, r1]
 8009aa8:	9a03      	ldr	r2, [sp, #12]
 8009aaa:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009aae:	3304      	adds	r3, #4
 8009ab0:	f1b9 0f00 	cmp.w	r9, #0
 8009ab4:	d01f      	beq.n	8009af6 <__multiply+0x132>
 8009ab6:	6834      	ldr	r4, [r6, #0]
 8009ab8:	f105 0114 	add.w	r1, r5, #20
 8009abc:	46b6      	mov	lr, r6
 8009abe:	f04f 0a00 	mov.w	sl, #0
 8009ac2:	880a      	ldrh	r2, [r1, #0]
 8009ac4:	f8be b002 	ldrh.w	fp, [lr, #2]
 8009ac8:	fb09 b202 	mla	r2, r9, r2, fp
 8009acc:	4492      	add	sl, r2
 8009ace:	b2a4      	uxth	r4, r4
 8009ad0:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8009ad4:	f84e 4b04 	str.w	r4, [lr], #4
 8009ad8:	f851 4b04 	ldr.w	r4, [r1], #4
 8009adc:	f8be 2000 	ldrh.w	r2, [lr]
 8009ae0:	0c24      	lsrs	r4, r4, #16
 8009ae2:	fb09 2404 	mla	r4, r9, r4, r2
 8009ae6:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8009aea:	458c      	cmp	ip, r1
 8009aec:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8009af0:	d8e7      	bhi.n	8009ac2 <__multiply+0xfe>
 8009af2:	9a01      	ldr	r2, [sp, #4]
 8009af4:	50b4      	str	r4, [r6, r2]
 8009af6:	3604      	adds	r6, #4
 8009af8:	e7a3      	b.n	8009a42 <__multiply+0x7e>
 8009afa:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d1a5      	bne.n	8009a4e <__multiply+0x8a>
 8009b02:	3f01      	subs	r7, #1
 8009b04:	e7a1      	b.n	8009a4a <__multiply+0x86>
 8009b06:	bf00      	nop
 8009b08:	0800e2b3 	.word	0x0800e2b3
 8009b0c:	0800e2c4 	.word	0x0800e2c4

08009b10 <__pow5mult>:
 8009b10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009b14:	4615      	mov	r5, r2
 8009b16:	f012 0203 	ands.w	r2, r2, #3
 8009b1a:	4606      	mov	r6, r0
 8009b1c:	460f      	mov	r7, r1
 8009b1e:	d007      	beq.n	8009b30 <__pow5mult+0x20>
 8009b20:	4c25      	ldr	r4, [pc, #148]	; (8009bb8 <__pow5mult+0xa8>)
 8009b22:	3a01      	subs	r2, #1
 8009b24:	2300      	movs	r3, #0
 8009b26:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009b2a:	f7ff fe9b 	bl	8009864 <__multadd>
 8009b2e:	4607      	mov	r7, r0
 8009b30:	10ad      	asrs	r5, r5, #2
 8009b32:	d03d      	beq.n	8009bb0 <__pow5mult+0xa0>
 8009b34:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009b36:	b97c      	cbnz	r4, 8009b58 <__pow5mult+0x48>
 8009b38:	2010      	movs	r0, #16
 8009b3a:	f7ff fe1d 	bl	8009778 <malloc>
 8009b3e:	4602      	mov	r2, r0
 8009b40:	6270      	str	r0, [r6, #36]	; 0x24
 8009b42:	b928      	cbnz	r0, 8009b50 <__pow5mult+0x40>
 8009b44:	4b1d      	ldr	r3, [pc, #116]	; (8009bbc <__pow5mult+0xac>)
 8009b46:	481e      	ldr	r0, [pc, #120]	; (8009bc0 <__pow5mult+0xb0>)
 8009b48:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009b4c:	f001 f922 	bl	800ad94 <__assert_func>
 8009b50:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009b54:	6004      	str	r4, [r0, #0]
 8009b56:	60c4      	str	r4, [r0, #12]
 8009b58:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009b5c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009b60:	b94c      	cbnz	r4, 8009b76 <__pow5mult+0x66>
 8009b62:	f240 2171 	movw	r1, #625	; 0x271
 8009b66:	4630      	mov	r0, r6
 8009b68:	f7ff ff16 	bl	8009998 <__i2b>
 8009b6c:	2300      	movs	r3, #0
 8009b6e:	f8c8 0008 	str.w	r0, [r8, #8]
 8009b72:	4604      	mov	r4, r0
 8009b74:	6003      	str	r3, [r0, #0]
 8009b76:	f04f 0900 	mov.w	r9, #0
 8009b7a:	07eb      	lsls	r3, r5, #31
 8009b7c:	d50a      	bpl.n	8009b94 <__pow5mult+0x84>
 8009b7e:	4639      	mov	r1, r7
 8009b80:	4622      	mov	r2, r4
 8009b82:	4630      	mov	r0, r6
 8009b84:	f7ff ff1e 	bl	80099c4 <__multiply>
 8009b88:	4639      	mov	r1, r7
 8009b8a:	4680      	mov	r8, r0
 8009b8c:	4630      	mov	r0, r6
 8009b8e:	f7ff fe47 	bl	8009820 <_Bfree>
 8009b92:	4647      	mov	r7, r8
 8009b94:	106d      	asrs	r5, r5, #1
 8009b96:	d00b      	beq.n	8009bb0 <__pow5mult+0xa0>
 8009b98:	6820      	ldr	r0, [r4, #0]
 8009b9a:	b938      	cbnz	r0, 8009bac <__pow5mult+0x9c>
 8009b9c:	4622      	mov	r2, r4
 8009b9e:	4621      	mov	r1, r4
 8009ba0:	4630      	mov	r0, r6
 8009ba2:	f7ff ff0f 	bl	80099c4 <__multiply>
 8009ba6:	6020      	str	r0, [r4, #0]
 8009ba8:	f8c0 9000 	str.w	r9, [r0]
 8009bac:	4604      	mov	r4, r0
 8009bae:	e7e4      	b.n	8009b7a <__pow5mult+0x6a>
 8009bb0:	4638      	mov	r0, r7
 8009bb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009bb6:	bf00      	nop
 8009bb8:	0800e418 	.word	0x0800e418
 8009bbc:	0800e23d 	.word	0x0800e23d
 8009bc0:	0800e2c4 	.word	0x0800e2c4

08009bc4 <__lshift>:
 8009bc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009bc8:	460c      	mov	r4, r1
 8009bca:	6849      	ldr	r1, [r1, #4]
 8009bcc:	6923      	ldr	r3, [r4, #16]
 8009bce:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009bd2:	68a3      	ldr	r3, [r4, #8]
 8009bd4:	4607      	mov	r7, r0
 8009bd6:	4691      	mov	r9, r2
 8009bd8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009bdc:	f108 0601 	add.w	r6, r8, #1
 8009be0:	42b3      	cmp	r3, r6
 8009be2:	db0b      	blt.n	8009bfc <__lshift+0x38>
 8009be4:	4638      	mov	r0, r7
 8009be6:	f7ff fddb 	bl	80097a0 <_Balloc>
 8009bea:	4605      	mov	r5, r0
 8009bec:	b948      	cbnz	r0, 8009c02 <__lshift+0x3e>
 8009bee:	4602      	mov	r2, r0
 8009bf0:	4b28      	ldr	r3, [pc, #160]	; (8009c94 <__lshift+0xd0>)
 8009bf2:	4829      	ldr	r0, [pc, #164]	; (8009c98 <__lshift+0xd4>)
 8009bf4:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009bf8:	f001 f8cc 	bl	800ad94 <__assert_func>
 8009bfc:	3101      	adds	r1, #1
 8009bfe:	005b      	lsls	r3, r3, #1
 8009c00:	e7ee      	b.n	8009be0 <__lshift+0x1c>
 8009c02:	2300      	movs	r3, #0
 8009c04:	f100 0114 	add.w	r1, r0, #20
 8009c08:	f100 0210 	add.w	r2, r0, #16
 8009c0c:	4618      	mov	r0, r3
 8009c0e:	4553      	cmp	r3, sl
 8009c10:	db33      	blt.n	8009c7a <__lshift+0xb6>
 8009c12:	6920      	ldr	r0, [r4, #16]
 8009c14:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009c18:	f104 0314 	add.w	r3, r4, #20
 8009c1c:	f019 091f 	ands.w	r9, r9, #31
 8009c20:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009c24:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009c28:	d02b      	beq.n	8009c82 <__lshift+0xbe>
 8009c2a:	f1c9 0e20 	rsb	lr, r9, #32
 8009c2e:	468a      	mov	sl, r1
 8009c30:	2200      	movs	r2, #0
 8009c32:	6818      	ldr	r0, [r3, #0]
 8009c34:	fa00 f009 	lsl.w	r0, r0, r9
 8009c38:	4302      	orrs	r2, r0
 8009c3a:	f84a 2b04 	str.w	r2, [sl], #4
 8009c3e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009c42:	459c      	cmp	ip, r3
 8009c44:	fa22 f20e 	lsr.w	r2, r2, lr
 8009c48:	d8f3      	bhi.n	8009c32 <__lshift+0x6e>
 8009c4a:	ebac 0304 	sub.w	r3, ip, r4
 8009c4e:	3b15      	subs	r3, #21
 8009c50:	f023 0303 	bic.w	r3, r3, #3
 8009c54:	3304      	adds	r3, #4
 8009c56:	f104 0015 	add.w	r0, r4, #21
 8009c5a:	4584      	cmp	ip, r0
 8009c5c:	bf38      	it	cc
 8009c5e:	2304      	movcc	r3, #4
 8009c60:	50ca      	str	r2, [r1, r3]
 8009c62:	b10a      	cbz	r2, 8009c68 <__lshift+0xa4>
 8009c64:	f108 0602 	add.w	r6, r8, #2
 8009c68:	3e01      	subs	r6, #1
 8009c6a:	4638      	mov	r0, r7
 8009c6c:	612e      	str	r6, [r5, #16]
 8009c6e:	4621      	mov	r1, r4
 8009c70:	f7ff fdd6 	bl	8009820 <_Bfree>
 8009c74:	4628      	mov	r0, r5
 8009c76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c7a:	f842 0f04 	str.w	r0, [r2, #4]!
 8009c7e:	3301      	adds	r3, #1
 8009c80:	e7c5      	b.n	8009c0e <__lshift+0x4a>
 8009c82:	3904      	subs	r1, #4
 8009c84:	f853 2b04 	ldr.w	r2, [r3], #4
 8009c88:	f841 2f04 	str.w	r2, [r1, #4]!
 8009c8c:	459c      	cmp	ip, r3
 8009c8e:	d8f9      	bhi.n	8009c84 <__lshift+0xc0>
 8009c90:	e7ea      	b.n	8009c68 <__lshift+0xa4>
 8009c92:	bf00      	nop
 8009c94:	0800e2b3 	.word	0x0800e2b3
 8009c98:	0800e2c4 	.word	0x0800e2c4

08009c9c <__mcmp>:
 8009c9c:	b530      	push	{r4, r5, lr}
 8009c9e:	6902      	ldr	r2, [r0, #16]
 8009ca0:	690c      	ldr	r4, [r1, #16]
 8009ca2:	1b12      	subs	r2, r2, r4
 8009ca4:	d10e      	bne.n	8009cc4 <__mcmp+0x28>
 8009ca6:	f100 0314 	add.w	r3, r0, #20
 8009caa:	3114      	adds	r1, #20
 8009cac:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009cb0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009cb4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009cb8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009cbc:	42a5      	cmp	r5, r4
 8009cbe:	d003      	beq.n	8009cc8 <__mcmp+0x2c>
 8009cc0:	d305      	bcc.n	8009cce <__mcmp+0x32>
 8009cc2:	2201      	movs	r2, #1
 8009cc4:	4610      	mov	r0, r2
 8009cc6:	bd30      	pop	{r4, r5, pc}
 8009cc8:	4283      	cmp	r3, r0
 8009cca:	d3f3      	bcc.n	8009cb4 <__mcmp+0x18>
 8009ccc:	e7fa      	b.n	8009cc4 <__mcmp+0x28>
 8009cce:	f04f 32ff 	mov.w	r2, #4294967295
 8009cd2:	e7f7      	b.n	8009cc4 <__mcmp+0x28>

08009cd4 <__mdiff>:
 8009cd4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cd8:	460c      	mov	r4, r1
 8009cda:	4606      	mov	r6, r0
 8009cdc:	4611      	mov	r1, r2
 8009cde:	4620      	mov	r0, r4
 8009ce0:	4617      	mov	r7, r2
 8009ce2:	f7ff ffdb 	bl	8009c9c <__mcmp>
 8009ce6:	1e05      	subs	r5, r0, #0
 8009ce8:	d110      	bne.n	8009d0c <__mdiff+0x38>
 8009cea:	4629      	mov	r1, r5
 8009cec:	4630      	mov	r0, r6
 8009cee:	f7ff fd57 	bl	80097a0 <_Balloc>
 8009cf2:	b930      	cbnz	r0, 8009d02 <__mdiff+0x2e>
 8009cf4:	4b39      	ldr	r3, [pc, #228]	; (8009ddc <__mdiff+0x108>)
 8009cf6:	4602      	mov	r2, r0
 8009cf8:	f240 2132 	movw	r1, #562	; 0x232
 8009cfc:	4838      	ldr	r0, [pc, #224]	; (8009de0 <__mdiff+0x10c>)
 8009cfe:	f001 f849 	bl	800ad94 <__assert_func>
 8009d02:	2301      	movs	r3, #1
 8009d04:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009d08:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d0c:	bfa4      	itt	ge
 8009d0e:	463b      	movge	r3, r7
 8009d10:	4627      	movge	r7, r4
 8009d12:	4630      	mov	r0, r6
 8009d14:	6879      	ldr	r1, [r7, #4]
 8009d16:	bfa6      	itte	ge
 8009d18:	461c      	movge	r4, r3
 8009d1a:	2500      	movge	r5, #0
 8009d1c:	2501      	movlt	r5, #1
 8009d1e:	f7ff fd3f 	bl	80097a0 <_Balloc>
 8009d22:	b920      	cbnz	r0, 8009d2e <__mdiff+0x5a>
 8009d24:	4b2d      	ldr	r3, [pc, #180]	; (8009ddc <__mdiff+0x108>)
 8009d26:	4602      	mov	r2, r0
 8009d28:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009d2c:	e7e6      	b.n	8009cfc <__mdiff+0x28>
 8009d2e:	693e      	ldr	r6, [r7, #16]
 8009d30:	60c5      	str	r5, [r0, #12]
 8009d32:	6925      	ldr	r5, [r4, #16]
 8009d34:	f107 0114 	add.w	r1, r7, #20
 8009d38:	f104 0914 	add.w	r9, r4, #20
 8009d3c:	f100 0e14 	add.w	lr, r0, #20
 8009d40:	f107 0210 	add.w	r2, r7, #16
 8009d44:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8009d48:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8009d4c:	46f2      	mov	sl, lr
 8009d4e:	2700      	movs	r7, #0
 8009d50:	f859 3b04 	ldr.w	r3, [r9], #4
 8009d54:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009d58:	fa1f f883 	uxth.w	r8, r3
 8009d5c:	fa17 f78b 	uxtah	r7, r7, fp
 8009d60:	0c1b      	lsrs	r3, r3, #16
 8009d62:	eba7 0808 	sub.w	r8, r7, r8
 8009d66:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009d6a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009d6e:	fa1f f888 	uxth.w	r8, r8
 8009d72:	141f      	asrs	r7, r3, #16
 8009d74:	454d      	cmp	r5, r9
 8009d76:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009d7a:	f84a 3b04 	str.w	r3, [sl], #4
 8009d7e:	d8e7      	bhi.n	8009d50 <__mdiff+0x7c>
 8009d80:	1b2b      	subs	r3, r5, r4
 8009d82:	3b15      	subs	r3, #21
 8009d84:	f023 0303 	bic.w	r3, r3, #3
 8009d88:	3304      	adds	r3, #4
 8009d8a:	3415      	adds	r4, #21
 8009d8c:	42a5      	cmp	r5, r4
 8009d8e:	bf38      	it	cc
 8009d90:	2304      	movcc	r3, #4
 8009d92:	4419      	add	r1, r3
 8009d94:	4473      	add	r3, lr
 8009d96:	469e      	mov	lr, r3
 8009d98:	460d      	mov	r5, r1
 8009d9a:	4565      	cmp	r5, ip
 8009d9c:	d30e      	bcc.n	8009dbc <__mdiff+0xe8>
 8009d9e:	f10c 0203 	add.w	r2, ip, #3
 8009da2:	1a52      	subs	r2, r2, r1
 8009da4:	f022 0203 	bic.w	r2, r2, #3
 8009da8:	3903      	subs	r1, #3
 8009daa:	458c      	cmp	ip, r1
 8009dac:	bf38      	it	cc
 8009dae:	2200      	movcc	r2, #0
 8009db0:	441a      	add	r2, r3
 8009db2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009db6:	b17b      	cbz	r3, 8009dd8 <__mdiff+0x104>
 8009db8:	6106      	str	r6, [r0, #16]
 8009dba:	e7a5      	b.n	8009d08 <__mdiff+0x34>
 8009dbc:	f855 8b04 	ldr.w	r8, [r5], #4
 8009dc0:	fa17 f488 	uxtah	r4, r7, r8
 8009dc4:	1422      	asrs	r2, r4, #16
 8009dc6:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8009dca:	b2a4      	uxth	r4, r4
 8009dcc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8009dd0:	f84e 4b04 	str.w	r4, [lr], #4
 8009dd4:	1417      	asrs	r7, r2, #16
 8009dd6:	e7e0      	b.n	8009d9a <__mdiff+0xc6>
 8009dd8:	3e01      	subs	r6, #1
 8009dda:	e7ea      	b.n	8009db2 <__mdiff+0xde>
 8009ddc:	0800e2b3 	.word	0x0800e2b3
 8009de0:	0800e2c4 	.word	0x0800e2c4

08009de4 <__d2b>:
 8009de4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009de8:	4689      	mov	r9, r1
 8009dea:	2101      	movs	r1, #1
 8009dec:	ec57 6b10 	vmov	r6, r7, d0
 8009df0:	4690      	mov	r8, r2
 8009df2:	f7ff fcd5 	bl	80097a0 <_Balloc>
 8009df6:	4604      	mov	r4, r0
 8009df8:	b930      	cbnz	r0, 8009e08 <__d2b+0x24>
 8009dfa:	4602      	mov	r2, r0
 8009dfc:	4b25      	ldr	r3, [pc, #148]	; (8009e94 <__d2b+0xb0>)
 8009dfe:	4826      	ldr	r0, [pc, #152]	; (8009e98 <__d2b+0xb4>)
 8009e00:	f240 310a 	movw	r1, #778	; 0x30a
 8009e04:	f000 ffc6 	bl	800ad94 <__assert_func>
 8009e08:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009e0c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009e10:	bb35      	cbnz	r5, 8009e60 <__d2b+0x7c>
 8009e12:	2e00      	cmp	r6, #0
 8009e14:	9301      	str	r3, [sp, #4]
 8009e16:	d028      	beq.n	8009e6a <__d2b+0x86>
 8009e18:	4668      	mov	r0, sp
 8009e1a:	9600      	str	r6, [sp, #0]
 8009e1c:	f7ff fd8c 	bl	8009938 <__lo0bits>
 8009e20:	9900      	ldr	r1, [sp, #0]
 8009e22:	b300      	cbz	r0, 8009e66 <__d2b+0x82>
 8009e24:	9a01      	ldr	r2, [sp, #4]
 8009e26:	f1c0 0320 	rsb	r3, r0, #32
 8009e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8009e2e:	430b      	orrs	r3, r1
 8009e30:	40c2      	lsrs	r2, r0
 8009e32:	6163      	str	r3, [r4, #20]
 8009e34:	9201      	str	r2, [sp, #4]
 8009e36:	9b01      	ldr	r3, [sp, #4]
 8009e38:	61a3      	str	r3, [r4, #24]
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	bf14      	ite	ne
 8009e3e:	2202      	movne	r2, #2
 8009e40:	2201      	moveq	r2, #1
 8009e42:	6122      	str	r2, [r4, #16]
 8009e44:	b1d5      	cbz	r5, 8009e7c <__d2b+0x98>
 8009e46:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009e4a:	4405      	add	r5, r0
 8009e4c:	f8c9 5000 	str.w	r5, [r9]
 8009e50:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009e54:	f8c8 0000 	str.w	r0, [r8]
 8009e58:	4620      	mov	r0, r4
 8009e5a:	b003      	add	sp, #12
 8009e5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009e60:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009e64:	e7d5      	b.n	8009e12 <__d2b+0x2e>
 8009e66:	6161      	str	r1, [r4, #20]
 8009e68:	e7e5      	b.n	8009e36 <__d2b+0x52>
 8009e6a:	a801      	add	r0, sp, #4
 8009e6c:	f7ff fd64 	bl	8009938 <__lo0bits>
 8009e70:	9b01      	ldr	r3, [sp, #4]
 8009e72:	6163      	str	r3, [r4, #20]
 8009e74:	2201      	movs	r2, #1
 8009e76:	6122      	str	r2, [r4, #16]
 8009e78:	3020      	adds	r0, #32
 8009e7a:	e7e3      	b.n	8009e44 <__d2b+0x60>
 8009e7c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009e80:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009e84:	f8c9 0000 	str.w	r0, [r9]
 8009e88:	6918      	ldr	r0, [r3, #16]
 8009e8a:	f7ff fd35 	bl	80098f8 <__hi0bits>
 8009e8e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009e92:	e7df      	b.n	8009e54 <__d2b+0x70>
 8009e94:	0800e2b3 	.word	0x0800e2b3
 8009e98:	0800e2c4 	.word	0x0800e2c4

08009e9c <_calloc_r>:
 8009e9c:	b513      	push	{r0, r1, r4, lr}
 8009e9e:	434a      	muls	r2, r1
 8009ea0:	4611      	mov	r1, r2
 8009ea2:	9201      	str	r2, [sp, #4]
 8009ea4:	f7fd fefa 	bl	8007c9c <_malloc_r>
 8009ea8:	4604      	mov	r4, r0
 8009eaa:	b118      	cbz	r0, 8009eb4 <_calloc_r+0x18>
 8009eac:	9a01      	ldr	r2, [sp, #4]
 8009eae:	2100      	movs	r1, #0
 8009eb0:	f7fd fe9c 	bl	8007bec <memset>
 8009eb4:	4620      	mov	r0, r4
 8009eb6:	b002      	add	sp, #8
 8009eb8:	bd10      	pop	{r4, pc}

08009eba <__sfputc_r>:
 8009eba:	6893      	ldr	r3, [r2, #8]
 8009ebc:	3b01      	subs	r3, #1
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	b410      	push	{r4}
 8009ec2:	6093      	str	r3, [r2, #8]
 8009ec4:	da08      	bge.n	8009ed8 <__sfputc_r+0x1e>
 8009ec6:	6994      	ldr	r4, [r2, #24]
 8009ec8:	42a3      	cmp	r3, r4
 8009eca:	db01      	blt.n	8009ed0 <__sfputc_r+0x16>
 8009ecc:	290a      	cmp	r1, #10
 8009ece:	d103      	bne.n	8009ed8 <__sfputc_r+0x1e>
 8009ed0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009ed4:	f7fe bcbc 	b.w	8008850 <__swbuf_r>
 8009ed8:	6813      	ldr	r3, [r2, #0]
 8009eda:	1c58      	adds	r0, r3, #1
 8009edc:	6010      	str	r0, [r2, #0]
 8009ede:	7019      	strb	r1, [r3, #0]
 8009ee0:	4608      	mov	r0, r1
 8009ee2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009ee6:	4770      	bx	lr

08009ee8 <__sfputs_r>:
 8009ee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009eea:	4606      	mov	r6, r0
 8009eec:	460f      	mov	r7, r1
 8009eee:	4614      	mov	r4, r2
 8009ef0:	18d5      	adds	r5, r2, r3
 8009ef2:	42ac      	cmp	r4, r5
 8009ef4:	d101      	bne.n	8009efa <__sfputs_r+0x12>
 8009ef6:	2000      	movs	r0, #0
 8009ef8:	e007      	b.n	8009f0a <__sfputs_r+0x22>
 8009efa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009efe:	463a      	mov	r2, r7
 8009f00:	4630      	mov	r0, r6
 8009f02:	f7ff ffda 	bl	8009eba <__sfputc_r>
 8009f06:	1c43      	adds	r3, r0, #1
 8009f08:	d1f3      	bne.n	8009ef2 <__sfputs_r+0xa>
 8009f0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009f0c <_vfiprintf_r>:
 8009f0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f10:	460d      	mov	r5, r1
 8009f12:	b09d      	sub	sp, #116	; 0x74
 8009f14:	4614      	mov	r4, r2
 8009f16:	4698      	mov	r8, r3
 8009f18:	4606      	mov	r6, r0
 8009f1a:	b118      	cbz	r0, 8009f24 <_vfiprintf_r+0x18>
 8009f1c:	6983      	ldr	r3, [r0, #24]
 8009f1e:	b90b      	cbnz	r3, 8009f24 <_vfiprintf_r+0x18>
 8009f20:	f7fd fd2c 	bl	800797c <__sinit>
 8009f24:	4b89      	ldr	r3, [pc, #548]	; (800a14c <_vfiprintf_r+0x240>)
 8009f26:	429d      	cmp	r5, r3
 8009f28:	d11b      	bne.n	8009f62 <_vfiprintf_r+0x56>
 8009f2a:	6875      	ldr	r5, [r6, #4]
 8009f2c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009f2e:	07d9      	lsls	r1, r3, #31
 8009f30:	d405      	bmi.n	8009f3e <_vfiprintf_r+0x32>
 8009f32:	89ab      	ldrh	r3, [r5, #12]
 8009f34:	059a      	lsls	r2, r3, #22
 8009f36:	d402      	bmi.n	8009f3e <_vfiprintf_r+0x32>
 8009f38:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009f3a:	f7fd fde2 	bl	8007b02 <__retarget_lock_acquire_recursive>
 8009f3e:	89ab      	ldrh	r3, [r5, #12]
 8009f40:	071b      	lsls	r3, r3, #28
 8009f42:	d501      	bpl.n	8009f48 <_vfiprintf_r+0x3c>
 8009f44:	692b      	ldr	r3, [r5, #16]
 8009f46:	b9eb      	cbnz	r3, 8009f84 <_vfiprintf_r+0x78>
 8009f48:	4629      	mov	r1, r5
 8009f4a:	4630      	mov	r0, r6
 8009f4c:	f7fe fce4 	bl	8008918 <__swsetup_r>
 8009f50:	b1c0      	cbz	r0, 8009f84 <_vfiprintf_r+0x78>
 8009f52:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009f54:	07dc      	lsls	r4, r3, #31
 8009f56:	d50e      	bpl.n	8009f76 <_vfiprintf_r+0x6a>
 8009f58:	f04f 30ff 	mov.w	r0, #4294967295
 8009f5c:	b01d      	add	sp, #116	; 0x74
 8009f5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f62:	4b7b      	ldr	r3, [pc, #492]	; (800a150 <_vfiprintf_r+0x244>)
 8009f64:	429d      	cmp	r5, r3
 8009f66:	d101      	bne.n	8009f6c <_vfiprintf_r+0x60>
 8009f68:	68b5      	ldr	r5, [r6, #8]
 8009f6a:	e7df      	b.n	8009f2c <_vfiprintf_r+0x20>
 8009f6c:	4b79      	ldr	r3, [pc, #484]	; (800a154 <_vfiprintf_r+0x248>)
 8009f6e:	429d      	cmp	r5, r3
 8009f70:	bf08      	it	eq
 8009f72:	68f5      	ldreq	r5, [r6, #12]
 8009f74:	e7da      	b.n	8009f2c <_vfiprintf_r+0x20>
 8009f76:	89ab      	ldrh	r3, [r5, #12]
 8009f78:	0598      	lsls	r0, r3, #22
 8009f7a:	d4ed      	bmi.n	8009f58 <_vfiprintf_r+0x4c>
 8009f7c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009f7e:	f7fd fdc1 	bl	8007b04 <__retarget_lock_release_recursive>
 8009f82:	e7e9      	b.n	8009f58 <_vfiprintf_r+0x4c>
 8009f84:	2300      	movs	r3, #0
 8009f86:	9309      	str	r3, [sp, #36]	; 0x24
 8009f88:	2320      	movs	r3, #32
 8009f8a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009f8e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009f92:	2330      	movs	r3, #48	; 0x30
 8009f94:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a158 <_vfiprintf_r+0x24c>
 8009f98:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009f9c:	f04f 0901 	mov.w	r9, #1
 8009fa0:	4623      	mov	r3, r4
 8009fa2:	469a      	mov	sl, r3
 8009fa4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009fa8:	b10a      	cbz	r2, 8009fae <_vfiprintf_r+0xa2>
 8009faa:	2a25      	cmp	r2, #37	; 0x25
 8009fac:	d1f9      	bne.n	8009fa2 <_vfiprintf_r+0x96>
 8009fae:	ebba 0b04 	subs.w	fp, sl, r4
 8009fb2:	d00b      	beq.n	8009fcc <_vfiprintf_r+0xc0>
 8009fb4:	465b      	mov	r3, fp
 8009fb6:	4622      	mov	r2, r4
 8009fb8:	4629      	mov	r1, r5
 8009fba:	4630      	mov	r0, r6
 8009fbc:	f7ff ff94 	bl	8009ee8 <__sfputs_r>
 8009fc0:	3001      	adds	r0, #1
 8009fc2:	f000 80aa 	beq.w	800a11a <_vfiprintf_r+0x20e>
 8009fc6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009fc8:	445a      	add	r2, fp
 8009fca:	9209      	str	r2, [sp, #36]	; 0x24
 8009fcc:	f89a 3000 	ldrb.w	r3, [sl]
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	f000 80a2 	beq.w	800a11a <_vfiprintf_r+0x20e>
 8009fd6:	2300      	movs	r3, #0
 8009fd8:	f04f 32ff 	mov.w	r2, #4294967295
 8009fdc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009fe0:	f10a 0a01 	add.w	sl, sl, #1
 8009fe4:	9304      	str	r3, [sp, #16]
 8009fe6:	9307      	str	r3, [sp, #28]
 8009fe8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009fec:	931a      	str	r3, [sp, #104]	; 0x68
 8009fee:	4654      	mov	r4, sl
 8009ff0:	2205      	movs	r2, #5
 8009ff2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ff6:	4858      	ldr	r0, [pc, #352]	; (800a158 <_vfiprintf_r+0x24c>)
 8009ff8:	f7f6 f8f2 	bl	80001e0 <memchr>
 8009ffc:	9a04      	ldr	r2, [sp, #16]
 8009ffe:	b9d8      	cbnz	r0, 800a038 <_vfiprintf_r+0x12c>
 800a000:	06d1      	lsls	r1, r2, #27
 800a002:	bf44      	itt	mi
 800a004:	2320      	movmi	r3, #32
 800a006:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a00a:	0713      	lsls	r3, r2, #28
 800a00c:	bf44      	itt	mi
 800a00e:	232b      	movmi	r3, #43	; 0x2b
 800a010:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a014:	f89a 3000 	ldrb.w	r3, [sl]
 800a018:	2b2a      	cmp	r3, #42	; 0x2a
 800a01a:	d015      	beq.n	800a048 <_vfiprintf_r+0x13c>
 800a01c:	9a07      	ldr	r2, [sp, #28]
 800a01e:	4654      	mov	r4, sl
 800a020:	2000      	movs	r0, #0
 800a022:	f04f 0c0a 	mov.w	ip, #10
 800a026:	4621      	mov	r1, r4
 800a028:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a02c:	3b30      	subs	r3, #48	; 0x30
 800a02e:	2b09      	cmp	r3, #9
 800a030:	d94e      	bls.n	800a0d0 <_vfiprintf_r+0x1c4>
 800a032:	b1b0      	cbz	r0, 800a062 <_vfiprintf_r+0x156>
 800a034:	9207      	str	r2, [sp, #28]
 800a036:	e014      	b.n	800a062 <_vfiprintf_r+0x156>
 800a038:	eba0 0308 	sub.w	r3, r0, r8
 800a03c:	fa09 f303 	lsl.w	r3, r9, r3
 800a040:	4313      	orrs	r3, r2
 800a042:	9304      	str	r3, [sp, #16]
 800a044:	46a2      	mov	sl, r4
 800a046:	e7d2      	b.n	8009fee <_vfiprintf_r+0xe2>
 800a048:	9b03      	ldr	r3, [sp, #12]
 800a04a:	1d19      	adds	r1, r3, #4
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	9103      	str	r1, [sp, #12]
 800a050:	2b00      	cmp	r3, #0
 800a052:	bfbb      	ittet	lt
 800a054:	425b      	neglt	r3, r3
 800a056:	f042 0202 	orrlt.w	r2, r2, #2
 800a05a:	9307      	strge	r3, [sp, #28]
 800a05c:	9307      	strlt	r3, [sp, #28]
 800a05e:	bfb8      	it	lt
 800a060:	9204      	strlt	r2, [sp, #16]
 800a062:	7823      	ldrb	r3, [r4, #0]
 800a064:	2b2e      	cmp	r3, #46	; 0x2e
 800a066:	d10c      	bne.n	800a082 <_vfiprintf_r+0x176>
 800a068:	7863      	ldrb	r3, [r4, #1]
 800a06a:	2b2a      	cmp	r3, #42	; 0x2a
 800a06c:	d135      	bne.n	800a0da <_vfiprintf_r+0x1ce>
 800a06e:	9b03      	ldr	r3, [sp, #12]
 800a070:	1d1a      	adds	r2, r3, #4
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	9203      	str	r2, [sp, #12]
 800a076:	2b00      	cmp	r3, #0
 800a078:	bfb8      	it	lt
 800a07a:	f04f 33ff 	movlt.w	r3, #4294967295
 800a07e:	3402      	adds	r4, #2
 800a080:	9305      	str	r3, [sp, #20]
 800a082:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a168 <_vfiprintf_r+0x25c>
 800a086:	7821      	ldrb	r1, [r4, #0]
 800a088:	2203      	movs	r2, #3
 800a08a:	4650      	mov	r0, sl
 800a08c:	f7f6 f8a8 	bl	80001e0 <memchr>
 800a090:	b140      	cbz	r0, 800a0a4 <_vfiprintf_r+0x198>
 800a092:	2340      	movs	r3, #64	; 0x40
 800a094:	eba0 000a 	sub.w	r0, r0, sl
 800a098:	fa03 f000 	lsl.w	r0, r3, r0
 800a09c:	9b04      	ldr	r3, [sp, #16]
 800a09e:	4303      	orrs	r3, r0
 800a0a0:	3401      	adds	r4, #1
 800a0a2:	9304      	str	r3, [sp, #16]
 800a0a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a0a8:	482c      	ldr	r0, [pc, #176]	; (800a15c <_vfiprintf_r+0x250>)
 800a0aa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a0ae:	2206      	movs	r2, #6
 800a0b0:	f7f6 f896 	bl	80001e0 <memchr>
 800a0b4:	2800      	cmp	r0, #0
 800a0b6:	d03f      	beq.n	800a138 <_vfiprintf_r+0x22c>
 800a0b8:	4b29      	ldr	r3, [pc, #164]	; (800a160 <_vfiprintf_r+0x254>)
 800a0ba:	bb1b      	cbnz	r3, 800a104 <_vfiprintf_r+0x1f8>
 800a0bc:	9b03      	ldr	r3, [sp, #12]
 800a0be:	3307      	adds	r3, #7
 800a0c0:	f023 0307 	bic.w	r3, r3, #7
 800a0c4:	3308      	adds	r3, #8
 800a0c6:	9303      	str	r3, [sp, #12]
 800a0c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a0ca:	443b      	add	r3, r7
 800a0cc:	9309      	str	r3, [sp, #36]	; 0x24
 800a0ce:	e767      	b.n	8009fa0 <_vfiprintf_r+0x94>
 800a0d0:	fb0c 3202 	mla	r2, ip, r2, r3
 800a0d4:	460c      	mov	r4, r1
 800a0d6:	2001      	movs	r0, #1
 800a0d8:	e7a5      	b.n	800a026 <_vfiprintf_r+0x11a>
 800a0da:	2300      	movs	r3, #0
 800a0dc:	3401      	adds	r4, #1
 800a0de:	9305      	str	r3, [sp, #20]
 800a0e0:	4619      	mov	r1, r3
 800a0e2:	f04f 0c0a 	mov.w	ip, #10
 800a0e6:	4620      	mov	r0, r4
 800a0e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a0ec:	3a30      	subs	r2, #48	; 0x30
 800a0ee:	2a09      	cmp	r2, #9
 800a0f0:	d903      	bls.n	800a0fa <_vfiprintf_r+0x1ee>
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d0c5      	beq.n	800a082 <_vfiprintf_r+0x176>
 800a0f6:	9105      	str	r1, [sp, #20]
 800a0f8:	e7c3      	b.n	800a082 <_vfiprintf_r+0x176>
 800a0fa:	fb0c 2101 	mla	r1, ip, r1, r2
 800a0fe:	4604      	mov	r4, r0
 800a100:	2301      	movs	r3, #1
 800a102:	e7f0      	b.n	800a0e6 <_vfiprintf_r+0x1da>
 800a104:	ab03      	add	r3, sp, #12
 800a106:	9300      	str	r3, [sp, #0]
 800a108:	462a      	mov	r2, r5
 800a10a:	4b16      	ldr	r3, [pc, #88]	; (800a164 <_vfiprintf_r+0x258>)
 800a10c:	a904      	add	r1, sp, #16
 800a10e:	4630      	mov	r0, r6
 800a110:	f7fd febe 	bl	8007e90 <_printf_float>
 800a114:	4607      	mov	r7, r0
 800a116:	1c78      	adds	r0, r7, #1
 800a118:	d1d6      	bne.n	800a0c8 <_vfiprintf_r+0x1bc>
 800a11a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a11c:	07d9      	lsls	r1, r3, #31
 800a11e:	d405      	bmi.n	800a12c <_vfiprintf_r+0x220>
 800a120:	89ab      	ldrh	r3, [r5, #12]
 800a122:	059a      	lsls	r2, r3, #22
 800a124:	d402      	bmi.n	800a12c <_vfiprintf_r+0x220>
 800a126:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a128:	f7fd fcec 	bl	8007b04 <__retarget_lock_release_recursive>
 800a12c:	89ab      	ldrh	r3, [r5, #12]
 800a12e:	065b      	lsls	r3, r3, #25
 800a130:	f53f af12 	bmi.w	8009f58 <_vfiprintf_r+0x4c>
 800a134:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a136:	e711      	b.n	8009f5c <_vfiprintf_r+0x50>
 800a138:	ab03      	add	r3, sp, #12
 800a13a:	9300      	str	r3, [sp, #0]
 800a13c:	462a      	mov	r2, r5
 800a13e:	4b09      	ldr	r3, [pc, #36]	; (800a164 <_vfiprintf_r+0x258>)
 800a140:	a904      	add	r1, sp, #16
 800a142:	4630      	mov	r0, r6
 800a144:	f7fe f948 	bl	80083d8 <_printf_i>
 800a148:	e7e4      	b.n	800a114 <_vfiprintf_r+0x208>
 800a14a:	bf00      	nop
 800a14c:	0800e1b8 	.word	0x0800e1b8
 800a150:	0800e1d8 	.word	0x0800e1d8
 800a154:	0800e198 	.word	0x0800e198
 800a158:	0800e424 	.word	0x0800e424
 800a15c:	0800e42e 	.word	0x0800e42e
 800a160:	08007e91 	.word	0x08007e91
 800a164:	08009ee9 	.word	0x08009ee9
 800a168:	0800e42a 	.word	0x0800e42a

0800a16c <_read_r>:
 800a16c:	b538      	push	{r3, r4, r5, lr}
 800a16e:	4d07      	ldr	r5, [pc, #28]	; (800a18c <_read_r+0x20>)
 800a170:	4604      	mov	r4, r0
 800a172:	4608      	mov	r0, r1
 800a174:	4611      	mov	r1, r2
 800a176:	2200      	movs	r2, #0
 800a178:	602a      	str	r2, [r5, #0]
 800a17a:	461a      	mov	r2, r3
 800a17c:	f7f7 fbe6 	bl	800194c <_read>
 800a180:	1c43      	adds	r3, r0, #1
 800a182:	d102      	bne.n	800a18a <_read_r+0x1e>
 800a184:	682b      	ldr	r3, [r5, #0]
 800a186:	b103      	cbz	r3, 800a18a <_read_r+0x1e>
 800a188:	6023      	str	r3, [r4, #0]
 800a18a:	bd38      	pop	{r3, r4, r5, pc}
 800a18c:	2000a44c 	.word	0x2000a44c

0800a190 <wcvt>:
 800a190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a194:	b085      	sub	sp, #20
 800a196:	2b00      	cmp	r3, #0
 800a198:	461d      	mov	r5, r3
 800a19a:	4614      	mov	r4, r2
 800a19c:	bfbc      	itt	lt
 800a19e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800a1a2:	4614      	movlt	r4, r2
 800a1a4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a1a6:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800a1a8:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
 800a1ac:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
 800a1b0:	bfb6      	itet	lt
 800a1b2:	461d      	movlt	r5, r3
 800a1b4:	2300      	movge	r3, #0
 800a1b6:	232d      	movlt	r3, #45	; 0x2d
 800a1b8:	6013      	str	r3, [r2, #0]
 800a1ba:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a1bc:	f023 0820 	bic.w	r8, r3, #32
 800a1c0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a1c4:	d005      	beq.n	800a1d2 <wcvt+0x42>
 800a1c6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a1ca:	d100      	bne.n	800a1ce <wcvt+0x3e>
 800a1cc:	3601      	adds	r6, #1
 800a1ce:	2102      	movs	r1, #2
 800a1d0:	e000      	b.n	800a1d4 <wcvt+0x44>
 800a1d2:	2103      	movs	r1, #3
 800a1d4:	ab03      	add	r3, sp, #12
 800a1d6:	9301      	str	r3, [sp, #4]
 800a1d8:	ab02      	add	r3, sp, #8
 800a1da:	9300      	str	r3, [sp, #0]
 800a1dc:	ec45 4b10 	vmov	d0, r4, r5
 800a1e0:	4653      	mov	r3, sl
 800a1e2:	4632      	mov	r2, r6
 800a1e4:	f7fe fca4 	bl	8008b30 <_dtoa_r>
 800a1e8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a1ec:	4607      	mov	r7, r0
 800a1ee:	d112      	bne.n	800a216 <wcvt+0x86>
 800a1f0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a1f2:	07db      	lsls	r3, r3, #31
 800a1f4:	d40f      	bmi.n	800a216 <wcvt+0x86>
 800a1f6:	9b03      	ldr	r3, [sp, #12]
 800a1f8:	1bdb      	subs	r3, r3, r7
 800a1fa:	f8cb 3000 	str.w	r3, [fp]
 800a1fe:	2300      	movs	r3, #0
 800a200:	f8db 2000 	ldr.w	r2, [fp]
 800a204:	429a      	cmp	r2, r3
 800a206:	dd02      	ble.n	800a20e <wcvt+0x7e>
 800a208:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a20a:	4293      	cmp	r3, r2
 800a20c:	db2a      	blt.n	800a264 <wcvt+0xd4>
 800a20e:	9814      	ldr	r0, [sp, #80]	; 0x50
 800a210:	b005      	add	sp, #20
 800a212:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a216:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a21a:	eb07 0906 	add.w	r9, r7, r6
 800a21e:	d110      	bne.n	800a242 <wcvt+0xb2>
 800a220:	783b      	ldrb	r3, [r7, #0]
 800a222:	2b30      	cmp	r3, #48	; 0x30
 800a224:	d10a      	bne.n	800a23c <wcvt+0xac>
 800a226:	2200      	movs	r2, #0
 800a228:	2300      	movs	r3, #0
 800a22a:	4620      	mov	r0, r4
 800a22c:	4629      	mov	r1, r5
 800a22e:	f7f6 fc4b 	bl	8000ac8 <__aeabi_dcmpeq>
 800a232:	b918      	cbnz	r0, 800a23c <wcvt+0xac>
 800a234:	f1c6 0601 	rsb	r6, r6, #1
 800a238:	f8ca 6000 	str.w	r6, [sl]
 800a23c:	f8da 3000 	ldr.w	r3, [sl]
 800a240:	4499      	add	r9, r3
 800a242:	2200      	movs	r2, #0
 800a244:	2300      	movs	r3, #0
 800a246:	4620      	mov	r0, r4
 800a248:	4629      	mov	r1, r5
 800a24a:	f7f6 fc3d 	bl	8000ac8 <__aeabi_dcmpeq>
 800a24e:	b108      	cbz	r0, 800a254 <wcvt+0xc4>
 800a250:	f8cd 900c 	str.w	r9, [sp, #12]
 800a254:	2230      	movs	r2, #48	; 0x30
 800a256:	9b03      	ldr	r3, [sp, #12]
 800a258:	454b      	cmp	r3, r9
 800a25a:	d2cc      	bcs.n	800a1f6 <wcvt+0x66>
 800a25c:	1c59      	adds	r1, r3, #1
 800a25e:	9103      	str	r1, [sp, #12]
 800a260:	701a      	strb	r2, [r3, #0]
 800a262:	e7f8      	b.n	800a256 <wcvt+0xc6>
 800a264:	9914      	ldr	r1, [sp, #80]	; 0x50
 800a266:	5cfa      	ldrb	r2, [r7, r3]
 800a268:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800a26c:	3301      	adds	r3, #1
 800a26e:	e7c7      	b.n	800a200 <wcvt+0x70>

0800a270 <_svfwprintf_r>:
 800a270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a274:	ed2d 8b04 	vpush	{d8-d9}
 800a278:	b0d3      	sub	sp, #332	; 0x14c
 800a27a:	461d      	mov	r5, r3
 800a27c:	2300      	movs	r3, #0
 800a27e:	4689      	mov	r9, r1
 800a280:	9319      	str	r3, [sp, #100]	; 0x64
 800a282:	4683      	mov	fp, r0
 800a284:	920b      	str	r2, [sp, #44]	; 0x2c
 800a286:	f7ff fa61 	bl	800974c <_localeconv_r>
 800a28a:	6803      	ldr	r3, [r0, #0]
 800a28c:	781b      	ldrb	r3, [r3, #0]
 800a28e:	9316      	str	r3, [sp, #88]	; 0x58
 800a290:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800a294:	061c      	lsls	r4, r3, #24
 800a296:	d51a      	bpl.n	800a2ce <_svfwprintf_r+0x5e>
 800a298:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a29c:	b9bb      	cbnz	r3, 800a2ce <_svfwprintf_r+0x5e>
 800a29e:	2140      	movs	r1, #64	; 0x40
 800a2a0:	4658      	mov	r0, fp
 800a2a2:	f7fd fcfb 	bl	8007c9c <_malloc_r>
 800a2a6:	f8c9 0000 	str.w	r0, [r9]
 800a2aa:	f8c9 0010 	str.w	r0, [r9, #16]
 800a2ae:	b958      	cbnz	r0, 800a2c8 <_svfwprintf_r+0x58>
 800a2b0:	230c      	movs	r3, #12
 800a2b2:	f8cb 3000 	str.w	r3, [fp]
 800a2b6:	f04f 33ff 	mov.w	r3, #4294967295
 800a2ba:	930d      	str	r3, [sp, #52]	; 0x34
 800a2bc:	980d      	ldr	r0, [sp, #52]	; 0x34
 800a2be:	b053      	add	sp, #332	; 0x14c
 800a2c0:	ecbd 8b04 	vpop	{d8-d9}
 800a2c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2c8:	2340      	movs	r3, #64	; 0x40
 800a2ca:	f8c9 3014 	str.w	r3, [r9, #20]
 800a2ce:	ed9f 7b8e 	vldr	d7, [pc, #568]	; 800a508 <_svfwprintf_r+0x298>
 800a2d2:	2300      	movs	r3, #0
 800a2d4:	930f      	str	r3, [sp, #60]	; 0x3c
 800a2d6:	9311      	str	r3, [sp, #68]	; 0x44
 800a2d8:	930d      	str	r3, [sp, #52]	; 0x34
 800a2da:	eeb0 8a47 	vmov.f32	s16, s14
 800a2de:	eef0 8a67 	vmov.f32	s17, s15
 800a2e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a2e4:	461c      	mov	r4, r3
 800a2e6:	f853 2b04 	ldr.w	r2, [r3], #4
 800a2ea:	b10a      	cbz	r2, 800a2f0 <_svfwprintf_r+0x80>
 800a2ec:	2a25      	cmp	r2, #37	; 0x25
 800a2ee:	d1f9      	bne.n	800a2e4 <_svfwprintf_r+0x74>
 800a2f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a2f2:	42a3      	cmp	r3, r4
 800a2f4:	d00d      	beq.n	800a312 <_svfwprintf_r+0xa2>
 800a2f6:	1ae6      	subs	r6, r4, r3
 800a2f8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a2fa:	4633      	mov	r3, r6
 800a2fc:	4649      	mov	r1, r9
 800a2fe:	4658      	mov	r0, fp
 800a300:	f000 fe14 	bl	800af2c <__ssputs_r>
 800a304:	3001      	adds	r0, #1
 800a306:	f000 80e8 	beq.w	800a4da <_svfwprintf_r+0x26a>
 800a30a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a30c:	eb03 03a6 	add.w	r3, r3, r6, asr #2
 800a310:	930d      	str	r3, [sp, #52]	; 0x34
 800a312:	6823      	ldr	r3, [r4, #0]
 800a314:	2b00      	cmp	r3, #0
 800a316:	f000 80e0 	beq.w	800a4da <_svfwprintf_r+0x26a>
 800a31a:	2100      	movs	r1, #0
 800a31c:	1d22      	adds	r2, r4, #4
 800a31e:	9115      	str	r1, [sp, #84]	; 0x54
 800a320:	460e      	mov	r6, r1
 800a322:	f04f 34ff 	mov.w	r4, #4294967295
 800a326:	910c      	str	r1, [sp, #48]	; 0x30
 800a328:	460f      	mov	r7, r1
 800a32a:	200a      	movs	r0, #10
 800a32c:	f852 3b04 	ldr.w	r3, [r2], #4
 800a330:	9309      	str	r3, [sp, #36]	; 0x24
 800a332:	920b      	str	r2, [sp, #44]	; 0x2c
 800a334:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a336:	2b39      	cmp	r3, #57	; 0x39
 800a338:	d84c      	bhi.n	800a3d4 <_svfwprintf_r+0x164>
 800a33a:	2b1f      	cmp	r3, #31
 800a33c:	d94f      	bls.n	800a3de <_svfwprintf_r+0x16e>
 800a33e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a340:	3b20      	subs	r3, #32
 800a342:	2b19      	cmp	r3, #25
 800a344:	d84a      	bhi.n	800a3dc <_svfwprintf_r+0x16c>
 800a346:	e8df f003 	tbb	[pc, r3]
 800a34a:	496b      	.short	0x496b
 800a34c:	49497049 	.word	0x49497049
 800a350:	49494949 	.word	0x49494949
 800a354:	7a496c73 	.word	0x7a496c73
 800a358:	9b98497d 	.word	0x9b98497d
 800a35c:	9b9b9b9b 	.word	0x9b9b9b9b
 800a360:	9b9b9b9b 	.word	0x9b9b9b9b
 800a364:	2b33      	cmp	r3, #51	; 0x33
 800a366:	d839      	bhi.n	800a3dc <_svfwprintf_r+0x16c>
 800a368:	e8df f013 	tbh	[pc, r3, lsl #1]
 800a36c:	003800e8 	.word	0x003800e8
 800a370:	003800e8 	.word	0x003800e8
 800a374:	00380038 	.word	0x00380038
 800a378:	009d0038 	.word	0x009d0038
 800a37c:	00380038 	.word	0x00380038
 800a380:	00380038 	.word	0x00380038
 800a384:	00380038 	.word	0x00380038
 800a388:	00380038 	.word	0x00380038
 800a38c:	00380038 	.word	0x00380038
 800a390:	03200038 	.word	0x03200038
 800a394:	00380038 	.word	0x00380038
 800a398:	00380038 	.word	0x00380038
 800a39c:	00380038 	.word	0x00380038
 800a3a0:	00380038 	.word	0x00380038
 800a3a4:	00380038 	.word	0x00380038
 800a3a8:	00d400a6 	.word	0x00d400a6
 800a3ac:	00e800e8 	.word	0x00e800e8
 800a3b0:	00a000e8 	.word	0x00a000e8
 800a3b4:	003800d4 	.word	0x003800d4
 800a3b8:	00a30038 	.word	0x00a30038
 800a3bc:	02880038 	.word	0x02880038
 800a3c0:	02a60299 	.word	0x02a60299
 800a3c4:	003800a3 	.word	0x003800a3
 800a3c8:	003802c5 	.word	0x003802c5
 800a3cc:	00380315 	.word	0x00380315
 800a3d0:	00420038 	.word	0x00420038
 800a3d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a3d6:	3b45      	subs	r3, #69	; 0x45
 800a3d8:	2b33      	cmp	r3, #51	; 0x33
 800a3da:	d9c3      	bls.n	800a364 <_svfwprintf_r+0xf4>
 800a3dc:	b111      	cbz	r1, 800a3e4 <_svfwprintf_r+0x174>
 800a3de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d07a      	beq.n	800a4da <_svfwprintf_r+0x26a>
 800a3e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a3e6:	932a      	str	r3, [sp, #168]	; 0xa8
 800a3e8:	2000      	movs	r0, #0
 800a3ea:	9015      	str	r0, [sp, #84]	; 0x54
 800a3ec:	950a      	str	r5, [sp, #40]	; 0x28
 800a3ee:	e081      	b.n	800a4f4 <_svfwprintf_r+0x284>
 800a3f0:	b101      	cbz	r1, 800a3f4 <_svfwprintf_r+0x184>
 800a3f2:	9615      	str	r6, [sp, #84]	; 0x54
 800a3f4:	4b46      	ldr	r3, [pc, #280]	; (800a510 <_svfwprintf_r+0x2a0>)
 800a3f6:	930f      	str	r3, [sp, #60]	; 0x3c
 800a3f8:	462a      	mov	r2, r5
 800a3fa:	06f8      	lsls	r0, r7, #27
 800a3fc:	f852 3b04 	ldr.w	r3, [r2], #4
 800a400:	920a      	str	r2, [sp, #40]	; 0x28
 800a402:	d402      	bmi.n	800a40a <_svfwprintf_r+0x19a>
 800a404:	0679      	lsls	r1, r7, #25
 800a406:	bf48      	it	mi
 800a408:	b29b      	uxthmi	r3, r3
 800a40a:	07fa      	lsls	r2, r7, #31
 800a40c:	d506      	bpl.n	800a41c <_svfwprintf_r+0x1ac>
 800a40e:	b12b      	cbz	r3, 800a41c <_svfwprintf_r+0x1ac>
 800a410:	2230      	movs	r2, #48	; 0x30
 800a412:	921a      	str	r2, [sp, #104]	; 0x68
 800a414:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a416:	921b      	str	r2, [sp, #108]	; 0x6c
 800a418:	f047 0702 	orr.w	r7, r7, #2
 800a41c:	2202      	movs	r2, #2
 800a41e:	e259      	b.n	800a8d4 <_svfwprintf_r+0x664>
 800a420:	b90e      	cbnz	r6, 800a426 <_svfwprintf_r+0x1b6>
 800a422:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800a424:	2101      	movs	r1, #1
 800a426:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a428:	e780      	b.n	800a32c <_svfwprintf_r+0xbc>
 800a42a:	f047 0701 	orr.w	r7, r7, #1
 800a42e:	e7fa      	b.n	800a426 <_svfwprintf_r+0x1b6>
 800a430:	f855 3b04 	ldr.w	r3, [r5], #4
 800a434:	930c      	str	r3, [sp, #48]	; 0x30
 800a436:	2b00      	cmp	r3, #0
 800a438:	daf5      	bge.n	800a426 <_svfwprintf_r+0x1b6>
 800a43a:	425b      	negs	r3, r3
 800a43c:	930c      	str	r3, [sp, #48]	; 0x30
 800a43e:	f047 0704 	orr.w	r7, r7, #4
 800a442:	e7f0      	b.n	800a426 <_svfwprintf_r+0x1b6>
 800a444:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a446:	f852 3b04 	ldr.w	r3, [r2], #4
 800a44a:	9309      	str	r3, [sp, #36]	; 0x24
 800a44c:	2b2a      	cmp	r3, #42	; 0x2a
 800a44e:	d112      	bne.n	800a476 <_svfwprintf_r+0x206>
 800a450:	f855 4b04 	ldr.w	r4, [r5], #4
 800a454:	920b      	str	r2, [sp, #44]	; 0x2c
 800a456:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
 800a45a:	e7e4      	b.n	800a426 <_svfwprintf_r+0x1b6>
 800a45c:	fb00 3404 	mla	r4, r0, r4, r3
 800a460:	f852 3b04 	ldr.w	r3, [r2], #4
 800a464:	9309      	str	r3, [sp, #36]	; 0x24
 800a466:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a468:	3b30      	subs	r3, #48	; 0x30
 800a46a:	2b09      	cmp	r3, #9
 800a46c:	d9f6      	bls.n	800a45c <_svfwprintf_r+0x1ec>
 800a46e:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
 800a472:	920b      	str	r2, [sp, #44]	; 0x2c
 800a474:	e75e      	b.n	800a334 <_svfwprintf_r+0xc4>
 800a476:	2400      	movs	r4, #0
 800a478:	e7f5      	b.n	800a466 <_svfwprintf_r+0x1f6>
 800a47a:	f047 0780 	orr.w	r7, r7, #128	; 0x80
 800a47e:	e7d2      	b.n	800a426 <_svfwprintf_r+0x1b6>
 800a480:	2300      	movs	r3, #0
 800a482:	930c      	str	r3, [sp, #48]	; 0x30
 800a484:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a486:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a488:	fb00 2303 	mla	r3, r0, r3, r2
 800a48c:	3b30      	subs	r3, #48	; 0x30
 800a48e:	930c      	str	r3, [sp, #48]	; 0x30
 800a490:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a492:	461a      	mov	r2, r3
 800a494:	f852 3b04 	ldr.w	r3, [r2], #4
 800a498:	9309      	str	r3, [sp, #36]	; 0x24
 800a49a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a49c:	920b      	str	r2, [sp, #44]	; 0x2c
 800a49e:	3b30      	subs	r3, #48	; 0x30
 800a4a0:	2b09      	cmp	r3, #9
 800a4a2:	d9ef      	bls.n	800a484 <_svfwprintf_r+0x214>
 800a4a4:	e746      	b.n	800a334 <_svfwprintf_r+0xc4>
 800a4a6:	f047 0708 	orr.w	r7, r7, #8
 800a4aa:	e7bc      	b.n	800a426 <_svfwprintf_r+0x1b6>
 800a4ac:	f047 0740 	orr.w	r7, r7, #64	; 0x40
 800a4b0:	e7b9      	b.n	800a426 <_svfwprintf_r+0x1b6>
 800a4b2:	f047 0710 	orr.w	r7, r7, #16
 800a4b6:	e7b6      	b.n	800a426 <_svfwprintf_r+0x1b6>
 800a4b8:	b101      	cbz	r1, 800a4bc <_svfwprintf_r+0x24c>
 800a4ba:	9615      	str	r6, [sp, #84]	; 0x54
 800a4bc:	1d2b      	adds	r3, r5, #4
 800a4be:	06f8      	lsls	r0, r7, #27
 800a4c0:	930a      	str	r3, [sp, #40]	; 0x28
 800a4c2:	d41e      	bmi.n	800a502 <_svfwprintf_r+0x292>
 800a4c4:	6828      	ldr	r0, [r5, #0]
 800a4c6:	f000 fc83 	bl	800add0 <btowc>
 800a4ca:	1c41      	adds	r1, r0, #1
 800a4cc:	d10e      	bne.n	800a4ec <_svfwprintf_r+0x27c>
 800a4ce:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800a4d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a4d6:	f8a9 300c 	strh.w	r3, [r9, #12]
 800a4da:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800a4de:	f013 0f40 	tst.w	r3, #64	; 0x40
 800a4e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a4e4:	bf18      	it	ne
 800a4e6:	f04f 33ff 	movne.w	r3, #4294967295
 800a4ea:	e6e6      	b.n	800a2ba <_svfwprintf_r+0x4a>
 800a4ec:	902a      	str	r0, [sp, #168]	; 0xa8
 800a4ee:	2000      	movs	r0, #0
 800a4f0:	902b      	str	r0, [sp, #172]	; 0xac
 800a4f2:	9015      	str	r0, [sp, #84]	; 0x54
 800a4f4:	4680      	mov	r8, r0
 800a4f6:	2401      	movs	r4, #1
 800a4f8:	4606      	mov	r6, r0
 800a4fa:	4605      	mov	r5, r0
 800a4fc:	f10d 0aa8 	add.w	sl, sp, #168	; 0xa8
 800a500:	e107      	b.n	800a712 <_svfwprintf_r+0x4a2>
 800a502:	682b      	ldr	r3, [r5, #0]
 800a504:	932a      	str	r3, [sp, #168]	; 0xa8
 800a506:	e7f2      	b.n	800a4ee <_svfwprintf_r+0x27e>
	...
 800a510:	0800e4bc 	.word	0x0800e4bc
 800a514:	b101      	cbz	r1, 800a518 <_svfwprintf_r+0x2a8>
 800a516:	9615      	str	r6, [sp, #84]	; 0x54
 800a518:	1d2b      	adds	r3, r5, #4
 800a51a:	06fa      	lsls	r2, r7, #27
 800a51c:	930a      	str	r3, [sp, #40]	; 0x28
 800a51e:	d507      	bpl.n	800a530 <_svfwprintf_r+0x2c0>
 800a520:	682b      	ldr	r3, [r5, #0]
 800a522:	2b00      	cmp	r3, #0
 800a524:	da02      	bge.n	800a52c <_svfwprintf_r+0x2bc>
 800a526:	222d      	movs	r2, #45	; 0x2d
 800a528:	425b      	negs	r3, r3
 800a52a:	9215      	str	r2, [sp, #84]	; 0x54
 800a52c:	2201      	movs	r2, #1
 800a52e:	e1d3      	b.n	800a8d8 <_svfwprintf_r+0x668>
 800a530:	682b      	ldr	r3, [r5, #0]
 800a532:	f017 0f40 	tst.w	r7, #64	; 0x40
 800a536:	bf18      	it	ne
 800a538:	b21b      	sxthne	r3, r3
 800a53a:	e7f2      	b.n	800a522 <_svfwprintf_r+0x2b2>
 800a53c:	b101      	cbz	r1, 800a540 <_svfwprintf_r+0x2d0>
 800a53e:	9615      	str	r6, [sp, #84]	; 0x54
 800a540:	3507      	adds	r5, #7
 800a542:	f025 0307 	bic.w	r3, r5, #7
 800a546:	ecb3 7b02 	vldmia	r3!, {d7}
 800a54a:	930a      	str	r3, [sp, #40]	; 0x28
 800a54c:	eeb0 8a47 	vmov.f32	s16, s14
 800a550:	eef0 8a67 	vmov.f32	s17, s15
 800a554:	ee18 3a90 	vmov	r3, s17
 800a558:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a55c:	ee09 3a90 	vmov	s19, r3
 800a560:	eeb0 9a47 	vmov.f32	s18, s14
 800a564:	4bb3      	ldr	r3, [pc, #716]	; (800a834 <_svfwprintf_r+0x5c4>)
 800a566:	ec51 0b19 	vmov	r0, r1, d9
 800a56a:	f04f 32ff 	mov.w	r2, #4294967295
 800a56e:	f7f6 fadd 	bl	8000b2c <__aeabi_dcmpun>
 800a572:	b9f0      	cbnz	r0, 800a5b2 <_svfwprintf_r+0x342>
 800a574:	4baf      	ldr	r3, [pc, #700]	; (800a834 <_svfwprintf_r+0x5c4>)
 800a576:	ec51 0b19 	vmov	r0, r1, d9
 800a57a:	f04f 32ff 	mov.w	r2, #4294967295
 800a57e:	f7f6 fab7 	bl	8000af0 <__aeabi_dcmple>
 800a582:	b9b0      	cbnz	r0, 800a5b2 <_svfwprintf_r+0x342>
 800a584:	ec51 0b18 	vmov	r0, r1, d8
 800a588:	2200      	movs	r2, #0
 800a58a:	2300      	movs	r3, #0
 800a58c:	f7f6 faa6 	bl	8000adc <__aeabi_dcmplt>
 800a590:	b108      	cbz	r0, 800a596 <_svfwprintf_r+0x326>
 800a592:	232d      	movs	r3, #45	; 0x2d
 800a594:	9315      	str	r3, [sp, #84]	; 0x54
 800a596:	4ba8      	ldr	r3, [pc, #672]	; (800a838 <_svfwprintf_r+0x5c8>)
 800a598:	48a8      	ldr	r0, [pc, #672]	; (800a83c <_svfwprintf_r+0x5cc>)
 800a59a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a59c:	f027 0780 	bic.w	r7, r7, #128	; 0x80
 800a5a0:	2a47      	cmp	r2, #71	; 0x47
 800a5a2:	bf94      	ite	ls
 800a5a4:	469a      	movls	sl, r3
 800a5a6:	4682      	movhi	sl, r0
 800a5a8:	f04f 0800 	mov.w	r8, #0
 800a5ac:	2403      	movs	r4, #3
 800a5ae:	4646      	mov	r6, r8
 800a5b0:	e3d2      	b.n	800ad58 <_svfwprintf_r+0xae8>
 800a5b2:	ec53 2b18 	vmov	r2, r3, d8
 800a5b6:	ec51 0b18 	vmov	r0, r1, d8
 800a5ba:	f7f6 fab7 	bl	8000b2c <__aeabi_dcmpun>
 800a5be:	b140      	cbz	r0, 800a5d2 <_svfwprintf_r+0x362>
 800a5c0:	ee18 3a90 	vmov	r3, s17
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	bfbc      	itt	lt
 800a5c8:	232d      	movlt	r3, #45	; 0x2d
 800a5ca:	9315      	strlt	r3, [sp, #84]	; 0x54
 800a5cc:	489c      	ldr	r0, [pc, #624]	; (800a840 <_svfwprintf_r+0x5d0>)
 800a5ce:	4b9d      	ldr	r3, [pc, #628]	; (800a844 <_svfwprintf_r+0x5d4>)
 800a5d0:	e7e3      	b.n	800a59a <_svfwprintf_r+0x32a>
 800a5d2:	1c63      	adds	r3, r4, #1
 800a5d4:	f000 810f 	beq.w	800a7f6 <_svfwprintf_r+0x586>
 800a5d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a5da:	f023 0320 	bic.w	r3, r3, #32
 800a5de:	2b47      	cmp	r3, #71	; 0x47
 800a5e0:	d102      	bne.n	800a5e8 <_svfwprintf_r+0x378>
 800a5e2:	2c00      	cmp	r4, #0
 800a5e4:	bf08      	it	eq
 800a5e6:	2401      	moveq	r4, #1
 800a5e8:	f447 7380 	orr.w	r3, r7, #256	; 0x100
 800a5ec:	930e      	str	r3, [sp, #56]	; 0x38
 800a5ee:	2328      	movs	r3, #40	; 0x28
 800a5f0:	9307      	str	r3, [sp, #28]
 800a5f2:	ab19      	add	r3, sp, #100	; 0x64
 800a5f4:	9305      	str	r3, [sp, #20]
 800a5f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a5f8:	9304      	str	r3, [sp, #16]
 800a5fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a5fc:	f10d 08a8 	add.w	r8, sp, #168	; 0xa8
 800a600:	ae18      	add	r6, sp, #96	; 0x60
 800a602:	ad17      	add	r5, sp, #92	; 0x5c
 800a604:	e9cd 4300 	strd	r4, r3, [sp]
 800a608:	f8cd 8018 	str.w	r8, [sp, #24]
 800a60c:	ec53 2b18 	vmov	r2, r3, d8
 800a610:	9603      	str	r6, [sp, #12]
 800a612:	9502      	str	r5, [sp, #8]
 800a614:	4658      	mov	r0, fp
 800a616:	f7ff fdbb 	bl	800a190 <wcvt>
 800a61a:	4540      	cmp	r0, r8
 800a61c:	4682      	mov	sl, r0
 800a61e:	f040 80ec 	bne.w	800a7fa <_svfwprintf_r+0x58a>
 800a622:	9919      	ldr	r1, [sp, #100]	; 0x64
 800a624:	2928      	cmp	r1, #40	; 0x28
 800a626:	f340 80e8 	ble.w	800a7fa <_svfwprintf_r+0x58a>
 800a62a:	0089      	lsls	r1, r1, #2
 800a62c:	4658      	mov	r0, fp
 800a62e:	f7fd fb35 	bl	8007c9c <_malloc_r>
 800a632:	4680      	mov	r8, r0
 800a634:	2800      	cmp	r0, #0
 800a636:	f43f af4a 	beq.w	800a4ce <_svfwprintf_r+0x25e>
 800a63a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a63c:	9502      	str	r5, [sp, #8]
 800a63e:	e9cd 0306 	strd	r0, r3, [sp, #24]
 800a642:	ab19      	add	r3, sp, #100	; 0x64
 800a644:	9305      	str	r3, [sp, #20]
 800a646:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a648:	e9cd 6303 	strd	r6, r3, [sp, #12]
 800a64c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a64e:	4658      	mov	r0, fp
 800a650:	e9cd 4300 	strd	r4, r3, [sp]
 800a654:	ec53 2b18 	vmov	r2, r3, d8
 800a658:	f7ff fd9a 	bl	800a190 <wcvt>
 800a65c:	4682      	mov	sl, r0
 800a65e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a660:	9d18      	ldr	r5, [sp, #96]	; 0x60
 800a662:	f023 0320 	bic.w	r3, r3, #32
 800a666:	2b47      	cmp	r3, #71	; 0x47
 800a668:	f040 80ca 	bne.w	800a800 <_svfwprintf_r+0x590>
 800a66c:	1cee      	adds	r6, r5, #3
 800a66e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a670:	db02      	blt.n	800a678 <_svfwprintf_r+0x408>
 800a672:	42ac      	cmp	r4, r5
 800a674:	f280 80ed 	bge.w	800a852 <_svfwprintf_r+0x5e2>
 800a678:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a67a:	3b02      	subs	r3, #2
 800a67c:	9309      	str	r3, [sp, #36]	; 0x24
 800a67e:	1e6b      	subs	r3, r5, #1
 800a680:	2b00      	cmp	r3, #0
 800a682:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a684:	9318      	str	r3, [sp, #96]	; 0x60
 800a686:	bfb8      	it	lt
 800a688:	f1c5 0301 	rsblt	r3, r5, #1
 800a68c:	921c      	str	r2, [sp, #112]	; 0x70
 800a68e:	bfb4      	ite	lt
 800a690:	222d      	movlt	r2, #45	; 0x2d
 800a692:	222b      	movge	r2, #43	; 0x2b
 800a694:	2b09      	cmp	r3, #9
 800a696:	921d      	str	r2, [sp, #116]	; 0x74
 800a698:	f340 80c5 	ble.w	800a826 <_svfwprintf_r+0x5b6>
 800a69c:	a82a      	add	r0, sp, #168	; 0xa8
 800a69e:	250a      	movs	r5, #10
 800a6a0:	4602      	mov	r2, r0
 800a6a2:	fb93 f4f5 	sdiv	r4, r3, r5
 800a6a6:	fb05 3114 	mls	r1, r5, r4, r3
 800a6aa:	3130      	adds	r1, #48	; 0x30
 800a6ac:	f842 1c04 	str.w	r1, [r2, #-4]
 800a6b0:	4619      	mov	r1, r3
 800a6b2:	2963      	cmp	r1, #99	; 0x63
 800a6b4:	f1a0 0004 	sub.w	r0, r0, #4
 800a6b8:	4623      	mov	r3, r4
 800a6ba:	dcf1      	bgt.n	800a6a0 <_svfwprintf_r+0x430>
 800a6bc:	3330      	adds	r3, #48	; 0x30
 800a6be:	f840 3c04 	str.w	r3, [r0, #-4]
 800a6c2:	f1a2 0108 	sub.w	r1, r2, #8
 800a6c6:	a81e      	add	r0, sp, #120	; 0x78
 800a6c8:	ab2a      	add	r3, sp, #168	; 0xa8
 800a6ca:	4299      	cmp	r1, r3
 800a6cc:	f0c0 80a6 	bcc.w	800a81c <_svfwprintf_r+0x5ac>
 800a6d0:	f10d 04b3 	add.w	r4, sp, #179	; 0xb3
 800a6d4:	1aa4      	subs	r4, r4, r2
 800a6d6:	f024 0403 	bic.w	r4, r4, #3
 800a6da:	3a0b      	subs	r2, #11
 800a6dc:	429a      	cmp	r2, r3
 800a6de:	bf88      	it	hi
 800a6e0:	2400      	movhi	r4, #0
 800a6e2:	ab1e      	add	r3, sp, #120	; 0x78
 800a6e4:	441c      	add	r4, r3
 800a6e6:	a81c      	add	r0, sp, #112	; 0x70
 800a6e8:	1a24      	subs	r4, r4, r0
 800a6ea:	10a3      	asrs	r3, r4, #2
 800a6ec:	9311      	str	r3, [sp, #68]	; 0x44
 800a6ee:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a6f0:	2b01      	cmp	r3, #1
 800a6f2:	eb03 04a4 	add.w	r4, r3, r4, asr #2
 800a6f6:	dc02      	bgt.n	800a6fe <_svfwprintf_r+0x48e>
 800a6f8:	f017 0501 	ands.w	r5, r7, #1
 800a6fc:	d001      	beq.n	800a702 <_svfwprintf_r+0x492>
 800a6fe:	3401      	adds	r4, #1
 800a700:	2500      	movs	r5, #0
 800a702:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800a704:	2e00      	cmp	r6, #0
 800a706:	f000 817d 	beq.w	800aa04 <_svfwprintf_r+0x794>
 800a70a:	232d      	movs	r3, #45	; 0x2d
 800a70c:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 800a70e:	9315      	str	r3, [sp, #84]	; 0x54
 800a710:	2600      	movs	r6, #0
 800a712:	42a6      	cmp	r6, r4
 800a714:	4633      	mov	r3, r6
 800a716:	bfb8      	it	lt
 800a718:	4623      	movlt	r3, r4
 800a71a:	930e      	str	r3, [sp, #56]	; 0x38
 800a71c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a71e:	b113      	cbz	r3, 800a726 <_svfwprintf_r+0x4b6>
 800a720:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a722:	3301      	adds	r3, #1
 800a724:	930e      	str	r3, [sp, #56]	; 0x38
 800a726:	f017 0302 	ands.w	r3, r7, #2
 800a72a:	9312      	str	r3, [sp, #72]	; 0x48
 800a72c:	bf1e      	ittt	ne
 800a72e:	9b0e      	ldrne	r3, [sp, #56]	; 0x38
 800a730:	3302      	addne	r3, #2
 800a732:	930e      	strne	r3, [sp, #56]	; 0x38
 800a734:	f017 0384 	ands.w	r3, r7, #132	; 0x84
 800a738:	9313      	str	r3, [sp, #76]	; 0x4c
 800a73a:	f000 8165 	beq.w	800aa08 <_svfwprintf_r+0x798>
 800a73e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a740:	b143      	cbz	r3, 800a754 <_svfwprintf_r+0x4e4>
 800a742:	2304      	movs	r3, #4
 800a744:	aa15      	add	r2, sp, #84	; 0x54
 800a746:	4649      	mov	r1, r9
 800a748:	4658      	mov	r0, fp
 800a74a:	f000 fbef 	bl	800af2c <__ssputs_r>
 800a74e:	3001      	adds	r0, #1
 800a750:	f000 816d 	beq.w	800aa2e <_svfwprintf_r+0x7be>
 800a754:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a756:	b143      	cbz	r3, 800a76a <_svfwprintf_r+0x4fa>
 800a758:	2308      	movs	r3, #8
 800a75a:	aa1a      	add	r2, sp, #104	; 0x68
 800a75c:	4649      	mov	r1, r9
 800a75e:	4658      	mov	r0, fp
 800a760:	f000 fbe4 	bl	800af2c <__ssputs_r>
 800a764:	3001      	adds	r0, #1
 800a766:	f000 8162 	beq.w	800aa2e <_svfwprintf_r+0x7be>
 800a76a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a76c:	2b80      	cmp	r3, #128	; 0x80
 800a76e:	d113      	bne.n	800a798 <_svfwprintf_r+0x528>
 800a770:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a772:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a774:	1a9b      	subs	r3, r3, r2
 800a776:	2b00      	cmp	r3, #0
 800a778:	9310      	str	r3, [sp, #64]	; 0x40
 800a77a:	dd0d      	ble.n	800a798 <_svfwprintf_r+0x528>
 800a77c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a77e:	4a32      	ldr	r2, [pc, #200]	; (800a848 <_svfwprintf_r+0x5d8>)
 800a780:	2b10      	cmp	r3, #16
 800a782:	f300 8169 	bgt.w	800aa58 <_svfwprintf_r+0x7e8>
 800a786:	4a30      	ldr	r2, [pc, #192]	; (800a848 <_svfwprintf_r+0x5d8>)
 800a788:	009b      	lsls	r3, r3, #2
 800a78a:	4649      	mov	r1, r9
 800a78c:	4658      	mov	r0, fp
 800a78e:	f000 fbcd 	bl	800af2c <__ssputs_r>
 800a792:	3001      	adds	r0, #1
 800a794:	f000 814b 	beq.w	800aa2e <_svfwprintf_r+0x7be>
 800a798:	1b36      	subs	r6, r6, r4
 800a79a:	2e00      	cmp	r6, #0
 800a79c:	dd0c      	ble.n	800a7b8 <_svfwprintf_r+0x548>
 800a79e:	2e10      	cmp	r6, #16
 800a7a0:	4a29      	ldr	r2, [pc, #164]	; (800a848 <_svfwprintf_r+0x5d8>)
 800a7a2:	f300 8164 	bgt.w	800aa6e <_svfwprintf_r+0x7fe>
 800a7a6:	4a28      	ldr	r2, [pc, #160]	; (800a848 <_svfwprintf_r+0x5d8>)
 800a7a8:	00b3      	lsls	r3, r6, #2
 800a7aa:	4649      	mov	r1, r9
 800a7ac:	4658      	mov	r0, fp
 800a7ae:	f000 fbbd 	bl	800af2c <__ssputs_r>
 800a7b2:	3001      	adds	r0, #1
 800a7b4:	f000 813b 	beq.w	800aa2e <_svfwprintf_r+0x7be>
 800a7b8:	05f9      	lsls	r1, r7, #23
 800a7ba:	f100 8161 	bmi.w	800aa80 <_svfwprintf_r+0x810>
 800a7be:	00a3      	lsls	r3, r4, #2
 800a7c0:	4652      	mov	r2, sl
 800a7c2:	4649      	mov	r1, r9
 800a7c4:	4658      	mov	r0, fp
 800a7c6:	f000 fbb1 	bl	800af2c <__ssputs_r>
 800a7ca:	3001      	adds	r0, #1
 800a7cc:	f000 812f 	beq.w	800aa2e <_svfwprintf_r+0x7be>
 800a7d0:	077a      	lsls	r2, r7, #29
 800a7d2:	f100 827f 	bmi.w	800acd4 <_svfwprintf_r+0xa64>
 800a7d6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a7da:	990e      	ldr	r1, [sp, #56]	; 0x38
 800a7dc:	428a      	cmp	r2, r1
 800a7de:	bfac      	ite	ge
 800a7e0:	189b      	addge	r3, r3, r2
 800a7e2:	185b      	addlt	r3, r3, r1
 800a7e4:	930d      	str	r3, [sp, #52]	; 0x34
 800a7e6:	f1b8 0f00 	cmp.w	r8, #0
 800a7ea:	d056      	beq.n	800a89a <_svfwprintf_r+0x62a>
 800a7ec:	4641      	mov	r1, r8
 800a7ee:	4658      	mov	r0, fp
 800a7f0:	f7fd fa04 	bl	8007bfc <_free_r>
 800a7f4:	e051      	b.n	800a89a <_svfwprintf_r+0x62a>
 800a7f6:	2406      	movs	r4, #6
 800a7f8:	e6f6      	b.n	800a5e8 <_svfwprintf_r+0x378>
 800a7fa:	f04f 0800 	mov.w	r8, #0
 800a7fe:	e72e      	b.n	800a65e <_svfwprintf_r+0x3ee>
 800a800:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a802:	2b66      	cmp	r3, #102	; 0x66
 800a804:	f47f af3b 	bne.w	800a67e <_svfwprintf_r+0x40e>
 800a808:	f007 0301 	and.w	r3, r7, #1
 800a80c:	2d00      	cmp	r5, #0
 800a80e:	ea43 0304 	orr.w	r3, r3, r4
 800a812:	dd1b      	ble.n	800a84c <_svfwprintf_r+0x5dc>
 800a814:	b363      	cbz	r3, 800a870 <_svfwprintf_r+0x600>
 800a816:	3401      	adds	r4, #1
 800a818:	442c      	add	r4, r5
 800a81a:	e772      	b.n	800a702 <_svfwprintf_r+0x492>
 800a81c:	f851 4b04 	ldr.w	r4, [r1], #4
 800a820:	f840 4b04 	str.w	r4, [r0], #4
 800a824:	e751      	b.n	800a6ca <_svfwprintf_r+0x45a>
 800a826:	2230      	movs	r2, #48	; 0x30
 800a828:	4413      	add	r3, r2
 800a82a:	921e      	str	r2, [sp, #120]	; 0x78
 800a82c:	931f      	str	r3, [sp, #124]	; 0x7c
 800a82e:	ac20      	add	r4, sp, #128	; 0x80
 800a830:	e759      	b.n	800a6e6 <_svfwprintf_r+0x476>
 800a832:	bf00      	nop
 800a834:	7fefffff 	.word	0x7fefffff
 800a838:	0800e438 	.word	0x0800e438
 800a83c:	0800e448 	.word	0x0800e448
 800a840:	0800e468 	.word	0x0800e468
 800a844:	0800e458 	.word	0x0800e458
 800a848:	0800e548 	.word	0x0800e548
 800a84c:	b193      	cbz	r3, 800a874 <_svfwprintf_r+0x604>
 800a84e:	3402      	adds	r4, #2
 800a850:	e757      	b.n	800a702 <_svfwprintf_r+0x492>
 800a852:	429d      	cmp	r5, r3
 800a854:	db05      	blt.n	800a862 <_svfwprintf_r+0x5f2>
 800a856:	07fc      	lsls	r4, r7, #31
 800a858:	d50e      	bpl.n	800a878 <_svfwprintf_r+0x608>
 800a85a:	1c6c      	adds	r4, r5, #1
 800a85c:	2367      	movs	r3, #103	; 0x67
 800a85e:	9309      	str	r3, [sp, #36]	; 0x24
 800a860:	e74f      	b.n	800a702 <_svfwprintf_r+0x492>
 800a862:	2d00      	cmp	r5, #0
 800a864:	bfd4      	ite	le
 800a866:	f1c5 0402 	rsble	r4, r5, #2
 800a86a:	2401      	movgt	r4, #1
 800a86c:	441c      	add	r4, r3
 800a86e:	e7f5      	b.n	800a85c <_svfwprintf_r+0x5ec>
 800a870:	462c      	mov	r4, r5
 800a872:	e746      	b.n	800a702 <_svfwprintf_r+0x492>
 800a874:	2401      	movs	r4, #1
 800a876:	e744      	b.n	800a702 <_svfwprintf_r+0x492>
 800a878:	462c      	mov	r4, r5
 800a87a:	e7ef      	b.n	800a85c <_svfwprintf_r+0x5ec>
 800a87c:	b101      	cbz	r1, 800a880 <_svfwprintf_r+0x610>
 800a87e:	9615      	str	r6, [sp, #84]	; 0x54
 800a880:	1d2b      	adds	r3, r5, #4
 800a882:	06f8      	lsls	r0, r7, #27
 800a884:	930a      	str	r3, [sp, #40]	; 0x28
 800a886:	d503      	bpl.n	800a890 <_svfwprintf_r+0x620>
 800a888:	682b      	ldr	r3, [r5, #0]
 800a88a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a88c:	601a      	str	r2, [r3, #0]
 800a88e:	e004      	b.n	800a89a <_svfwprintf_r+0x62a>
 800a890:	0679      	lsls	r1, r7, #25
 800a892:	d5f9      	bpl.n	800a888 <_svfwprintf_r+0x618>
 800a894:	682b      	ldr	r3, [r5, #0]
 800a896:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a898:	801a      	strh	r2, [r3, #0]
 800a89a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800a89c:	e521      	b.n	800a2e2 <_svfwprintf_r+0x72>
 800a89e:	462a      	mov	r2, r5
 800a8a0:	f017 0110 	ands.w	r1, r7, #16
 800a8a4:	f852 3b04 	ldr.w	r3, [r2], #4
 800a8a8:	920a      	str	r2, [sp, #40]	; 0x28
 800a8aa:	d103      	bne.n	800a8b4 <_svfwprintf_r+0x644>
 800a8ac:	f017 0240 	ands.w	r2, r7, #64	; 0x40
 800a8b0:	d010      	beq.n	800a8d4 <_svfwprintf_r+0x664>
 800a8b2:	b29b      	uxth	r3, r3
 800a8b4:	2200      	movs	r2, #0
 800a8b6:	e00d      	b.n	800a8d4 <_svfwprintf_r+0x664>
 800a8b8:	462a      	mov	r2, r5
 800a8ba:	2178      	movs	r1, #120	; 0x78
 800a8bc:	f852 3b04 	ldr.w	r3, [r2], #4
 800a8c0:	920a      	str	r2, [sp, #40]	; 0x28
 800a8c2:	2230      	movs	r2, #48	; 0x30
 800a8c4:	e9cd 211a 	strd	r2, r1, [sp, #104]	; 0x68
 800a8c8:	4aa5      	ldr	r2, [pc, #660]	; (800ab60 <_svfwprintf_r+0x8f0>)
 800a8ca:	920f      	str	r2, [sp, #60]	; 0x3c
 800a8cc:	f047 0702 	orr.w	r7, r7, #2
 800a8d0:	2202      	movs	r2, #2
 800a8d2:	9109      	str	r1, [sp, #36]	; 0x24
 800a8d4:	2100      	movs	r1, #0
 800a8d6:	9115      	str	r1, [sp, #84]	; 0x54
 800a8d8:	1c66      	adds	r6, r4, #1
 800a8da:	f000 8218 	beq.w	800ad0e <_svfwprintf_r+0xa9e>
 800a8de:	f027 0180 	bic.w	r1, r7, #128	; 0x80
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	f040 8217 	bne.w	800ad16 <_svfwprintf_r+0xaa6>
 800a8e8:	2c00      	cmp	r4, #0
 800a8ea:	f000 8083 	beq.w	800a9f4 <_svfwprintf_r+0x784>
 800a8ee:	2a01      	cmp	r2, #1
 800a8f0:	f040 8214 	bne.w	800ad1c <_svfwprintf_r+0xaac>
 800a8f4:	e060      	b.n	800a9b8 <_svfwprintf_r+0x748>
 800a8f6:	462b      	mov	r3, r5
 800a8f8:	2600      	movs	r6, #0
 800a8fa:	f853 ab04 	ldr.w	sl, [r3], #4
 800a8fe:	930a      	str	r3, [sp, #40]	; 0x28
 800a900:	f017 0510 	ands.w	r5, r7, #16
 800a904:	9615      	str	r6, [sp, #84]	; 0x54
 800a906:	d12d      	bne.n	800a964 <_svfwprintf_r+0x6f4>
 800a908:	1c62      	adds	r2, r4, #1
 800a90a:	d014      	beq.n	800a936 <_svfwprintf_r+0x6c6>
 800a90c:	4622      	mov	r2, r4
 800a90e:	4629      	mov	r1, r5
 800a910:	4650      	mov	r0, sl
 800a912:	4626      	mov	r6, r4
 800a914:	f7f5 fc64 	bl	80001e0 <memchr>
 800a918:	b108      	cbz	r0, 800a91e <_svfwprintf_r+0x6ae>
 800a91a:	eba0 060a 	sub.w	r6, r0, sl
 800a91e:	2e27      	cmp	r6, #39	; 0x27
 800a920:	d90e      	bls.n	800a940 <_svfwprintf_r+0x6d0>
 800a922:	1c71      	adds	r1, r6, #1
 800a924:	0089      	lsls	r1, r1, #2
 800a926:	4658      	mov	r0, fp
 800a928:	f7fd f9b8 	bl	8007c9c <_malloc_r>
 800a92c:	2800      	cmp	r0, #0
 800a92e:	f43f adce 	beq.w	800a4ce <_svfwprintf_r+0x25e>
 800a932:	4680      	mov	r8, r0
 800a934:	e007      	b.n	800a946 <_svfwprintf_r+0x6d6>
 800a936:	4650      	mov	r0, sl
 800a938:	f7f5 fc4a 	bl	80001d0 <strlen>
 800a93c:	4606      	mov	r6, r0
 800a93e:	e7ee      	b.n	800a91e <_svfwprintf_r+0x6ae>
 800a940:	f04f 0800 	mov.w	r8, #0
 800a944:	a82a      	add	r0, sp, #168	; 0xa8
 800a946:	4634      	mov	r4, r6
 800a948:	2300      	movs	r3, #0
 800a94a:	42b3      	cmp	r3, r6
 800a94c:	d104      	bne.n	800a958 <_svfwprintf_r+0x6e8>
 800a94e:	2600      	movs	r6, #0
 800a950:	f840 6023 	str.w	r6, [r0, r3, lsl #2]
 800a954:	4682      	mov	sl, r0
 800a956:	e6dc      	b.n	800a712 <_svfwprintf_r+0x4a2>
 800a958:	f81a 2003 	ldrb.w	r2, [sl, r3]
 800a95c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 800a960:	3301      	adds	r3, #1
 800a962:	e7f2      	b.n	800a94a <_svfwprintf_r+0x6da>
 800a964:	1c63      	adds	r3, r4, #1
 800a966:	d011      	beq.n	800a98c <_svfwprintf_r+0x71c>
 800a968:	4622      	mov	r2, r4
 800a96a:	4631      	mov	r1, r6
 800a96c:	4650      	mov	r0, sl
 800a96e:	f000 fa02 	bl	800ad76 <wmemchr>
 800a972:	4680      	mov	r8, r0
 800a974:	2800      	cmp	r0, #0
 800a976:	f43f ae1a 	beq.w	800a5ae <_svfwprintf_r+0x33e>
 800a97a:	eba0 080a 	sub.w	r8, r0, sl
 800a97e:	ea4f 08a8 	mov.w	r8, r8, asr #2
 800a982:	4544      	cmp	r4, r8
 800a984:	bfa8      	it	ge
 800a986:	4644      	movge	r4, r8
 800a988:	46b0      	mov	r8, r6
 800a98a:	e610      	b.n	800a5ae <_svfwprintf_r+0x33e>
 800a98c:	4650      	mov	r0, sl
 800a98e:	f000 f9e9 	bl	800ad64 <wcslen>
 800a992:	4604      	mov	r4, r0
 800a994:	e7f8      	b.n	800a988 <_svfwprintf_r+0x718>
 800a996:	462a      	mov	r2, r5
 800a998:	06fe      	lsls	r6, r7, #27
 800a99a:	f852 3b04 	ldr.w	r3, [r2], #4
 800a99e:	920a      	str	r2, [sp, #40]	; 0x28
 800a9a0:	d402      	bmi.n	800a9a8 <_svfwprintf_r+0x738>
 800a9a2:	067d      	lsls	r5, r7, #25
 800a9a4:	d500      	bpl.n	800a9a8 <_svfwprintf_r+0x738>
 800a9a6:	b29b      	uxth	r3, r3
 800a9a8:	2201      	movs	r2, #1
 800a9aa:	e793      	b.n	800a8d4 <_svfwprintf_r+0x664>
 800a9ac:	b101      	cbz	r1, 800a9b0 <_svfwprintf_r+0x740>
 800a9ae:	9615      	str	r6, [sp, #84]	; 0x54
 800a9b0:	4b6c      	ldr	r3, [pc, #432]	; (800ab64 <_svfwprintf_r+0x8f4>)
 800a9b2:	e520      	b.n	800a3f6 <_svfwprintf_r+0x186>
 800a9b4:	2b09      	cmp	r3, #9
 800a9b6:	d804      	bhi.n	800a9c2 <_svfwprintf_r+0x752>
 800a9b8:	3330      	adds	r3, #48	; 0x30
 800a9ba:	9351      	str	r3, [sp, #324]	; 0x144
 800a9bc:	f50d 7aa2 	add.w	sl, sp, #324	; 0x144
 800a9c0:	e1c2      	b.n	800ad48 <_svfwprintf_r+0xad8>
 800a9c2:	f50d 7aa4 	add.w	sl, sp, #328	; 0x148
 800a9c6:	250a      	movs	r5, #10
 800a9c8:	fbb3 f0f5 	udiv	r0, r3, r5
 800a9cc:	fb05 3210 	mls	r2, r5, r0, r3
 800a9d0:	3230      	adds	r2, #48	; 0x30
 800a9d2:	f84a 2d04 	str.w	r2, [sl, #-4]!
 800a9d6:	461a      	mov	r2, r3
 800a9d8:	2a09      	cmp	r2, #9
 800a9da:	4603      	mov	r3, r0
 800a9dc:	d8f4      	bhi.n	800a9c8 <_svfwprintf_r+0x758>
 800a9de:	e1b3      	b.n	800ad48 <_svfwprintf_r+0xad8>
 800a9e0:	f003 020f 	and.w	r2, r3, #15
 800a9e4:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800a9e6:	091b      	lsrs	r3, r3, #4
 800a9e8:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 800a9ec:	f84a 2d04 	str.w	r2, [sl, #-4]!
 800a9f0:	d1f6      	bne.n	800a9e0 <_svfwprintf_r+0x770>
 800a9f2:	e1a9      	b.n	800ad48 <_svfwprintf_r+0xad8>
 800a9f4:	b91a      	cbnz	r2, 800a9fe <_svfwprintf_r+0x78e>
 800a9f6:	07f8      	lsls	r0, r7, #31
 800a9f8:	d501      	bpl.n	800a9fe <_svfwprintf_r+0x78e>
 800a9fa:	2330      	movs	r3, #48	; 0x30
 800a9fc:	e7dd      	b.n	800a9ba <_svfwprintf_r+0x74a>
 800a9fe:	f50d 7aa4 	add.w	sl, sp, #328	; 0x148
 800aa02:	e1a1      	b.n	800ad48 <_svfwprintf_r+0xad8>
 800aa04:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 800aa06:	e684      	b.n	800a712 <_svfwprintf_r+0x4a2>
 800aa08:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800aa0a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800aa0c:	1a9b      	subs	r3, r3, r2
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	9310      	str	r3, [sp, #64]	; 0x40
 800aa12:	f77f ae94 	ble.w	800a73e <_svfwprintf_r+0x4ce>
 800aa16:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800aa18:	2b10      	cmp	r3, #16
 800aa1a:	dc11      	bgt.n	800aa40 <_svfwprintf_r+0x7d0>
 800aa1c:	4a52      	ldr	r2, [pc, #328]	; (800ab68 <_svfwprintf_r+0x8f8>)
 800aa1e:	009b      	lsls	r3, r3, #2
 800aa20:	4649      	mov	r1, r9
 800aa22:	4658      	mov	r0, fp
 800aa24:	f000 fa82 	bl	800af2c <__ssputs_r>
 800aa28:	3001      	adds	r0, #1
 800aa2a:	f47f ae88 	bne.w	800a73e <_svfwprintf_r+0x4ce>
 800aa2e:	f1b8 0f00 	cmp.w	r8, #0
 800aa32:	f43f ad52 	beq.w	800a4da <_svfwprintf_r+0x26a>
 800aa36:	4641      	mov	r1, r8
 800aa38:	4658      	mov	r0, fp
 800aa3a:	f7fd f8df 	bl	8007bfc <_free_r>
 800aa3e:	e54c      	b.n	800a4da <_svfwprintf_r+0x26a>
 800aa40:	4a49      	ldr	r2, [pc, #292]	; (800ab68 <_svfwprintf_r+0x8f8>)
 800aa42:	2340      	movs	r3, #64	; 0x40
 800aa44:	4649      	mov	r1, r9
 800aa46:	4658      	mov	r0, fp
 800aa48:	f000 fa70 	bl	800af2c <__ssputs_r>
 800aa4c:	3001      	adds	r0, #1
 800aa4e:	d0ee      	beq.n	800aa2e <_svfwprintf_r+0x7be>
 800aa50:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800aa52:	3b10      	subs	r3, #16
 800aa54:	9310      	str	r3, [sp, #64]	; 0x40
 800aa56:	e7de      	b.n	800aa16 <_svfwprintf_r+0x7a6>
 800aa58:	2340      	movs	r3, #64	; 0x40
 800aa5a:	4649      	mov	r1, r9
 800aa5c:	4658      	mov	r0, fp
 800aa5e:	f000 fa65 	bl	800af2c <__ssputs_r>
 800aa62:	3001      	adds	r0, #1
 800aa64:	d0e3      	beq.n	800aa2e <_svfwprintf_r+0x7be>
 800aa66:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800aa68:	3b10      	subs	r3, #16
 800aa6a:	9310      	str	r3, [sp, #64]	; 0x40
 800aa6c:	e686      	b.n	800a77c <_svfwprintf_r+0x50c>
 800aa6e:	2340      	movs	r3, #64	; 0x40
 800aa70:	4649      	mov	r1, r9
 800aa72:	4658      	mov	r0, fp
 800aa74:	f000 fa5a 	bl	800af2c <__ssputs_r>
 800aa78:	3001      	adds	r0, #1
 800aa7a:	d0d8      	beq.n	800aa2e <_svfwprintf_r+0x7be>
 800aa7c:	3e10      	subs	r6, #16
 800aa7e:	e68e      	b.n	800a79e <_svfwprintf_r+0x52e>
 800aa80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa82:	2b65      	cmp	r3, #101	; 0x65
 800aa84:	f240 80e4 	bls.w	800ac50 <_svfwprintf_r+0x9e0>
 800aa88:	ec51 0b18 	vmov	r0, r1, d8
 800aa8c:	2200      	movs	r2, #0
 800aa8e:	2300      	movs	r3, #0
 800aa90:	f7f6 f81a 	bl	8000ac8 <__aeabi_dcmpeq>
 800aa94:	b358      	cbz	r0, 800aaee <_svfwprintf_r+0x87e>
 800aa96:	4a35      	ldr	r2, [pc, #212]	; (800ab6c <_svfwprintf_r+0x8fc>)
 800aa98:	2304      	movs	r3, #4
 800aa9a:	4649      	mov	r1, r9
 800aa9c:	4658      	mov	r0, fp
 800aa9e:	f000 fa45 	bl	800af2c <__ssputs_r>
 800aaa2:	3001      	adds	r0, #1
 800aaa4:	d0c3      	beq.n	800aa2e <_svfwprintf_r+0x7be>
 800aaa6:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 800aaaa:	429a      	cmp	r2, r3
 800aaac:	db02      	blt.n	800aab4 <_svfwprintf_r+0x844>
 800aaae:	07fb      	lsls	r3, r7, #31
 800aab0:	f57f ae8e 	bpl.w	800a7d0 <_svfwprintf_r+0x560>
 800aab4:	2304      	movs	r3, #4
 800aab6:	aa16      	add	r2, sp, #88	; 0x58
 800aab8:	4649      	mov	r1, r9
 800aaba:	4658      	mov	r0, fp
 800aabc:	f000 fa36 	bl	800af2c <__ssputs_r>
 800aac0:	3001      	adds	r0, #1
 800aac2:	d0b4      	beq.n	800aa2e <_svfwprintf_r+0x7be>
 800aac4:	9c19      	ldr	r4, [sp, #100]	; 0x64
 800aac6:	3c01      	subs	r4, #1
 800aac8:	2c00      	cmp	r4, #0
 800aaca:	f77f ae81 	ble.w	800a7d0 <_svfwprintf_r+0x560>
 800aace:	4d28      	ldr	r5, [pc, #160]	; (800ab70 <_svfwprintf_r+0x900>)
 800aad0:	2c10      	cmp	r4, #16
 800aad2:	dc02      	bgt.n	800aada <_svfwprintf_r+0x86a>
 800aad4:	4a26      	ldr	r2, [pc, #152]	; (800ab70 <_svfwprintf_r+0x900>)
 800aad6:	00a3      	lsls	r3, r4, #2
 800aad8:	e673      	b.n	800a7c2 <_svfwprintf_r+0x552>
 800aada:	2340      	movs	r3, #64	; 0x40
 800aadc:	462a      	mov	r2, r5
 800aade:	4649      	mov	r1, r9
 800aae0:	4658      	mov	r0, fp
 800aae2:	f000 fa23 	bl	800af2c <__ssputs_r>
 800aae6:	3001      	adds	r0, #1
 800aae8:	d0a1      	beq.n	800aa2e <_svfwprintf_r+0x7be>
 800aaea:	3c10      	subs	r4, #16
 800aaec:	e7f0      	b.n	800aad0 <_svfwprintf_r+0x860>
 800aaee:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	dc3f      	bgt.n	800ab74 <_svfwprintf_r+0x904>
 800aaf4:	4a1d      	ldr	r2, [pc, #116]	; (800ab6c <_svfwprintf_r+0x8fc>)
 800aaf6:	2304      	movs	r3, #4
 800aaf8:	4649      	mov	r1, r9
 800aafa:	4658      	mov	r0, fp
 800aafc:	f000 fa16 	bl	800af2c <__ssputs_r>
 800ab00:	3001      	adds	r0, #1
 800ab02:	d094      	beq.n	800aa2e <_svfwprintf_r+0x7be>
 800ab04:	e9dd 3218 	ldrd	r3, r2, [sp, #96]	; 0x60
 800ab08:	4313      	orrs	r3, r2
 800ab0a:	f007 0201 	and.w	r2, r7, #1
 800ab0e:	4313      	orrs	r3, r2
 800ab10:	f43f ae5e 	beq.w	800a7d0 <_svfwprintf_r+0x560>
 800ab14:	2304      	movs	r3, #4
 800ab16:	aa16      	add	r2, sp, #88	; 0x58
 800ab18:	4649      	mov	r1, r9
 800ab1a:	4658      	mov	r0, fp
 800ab1c:	f000 fa06 	bl	800af2c <__ssputs_r>
 800ab20:	3001      	adds	r0, #1
 800ab22:	d084      	beq.n	800aa2e <_svfwprintf_r+0x7be>
 800ab24:	9c18      	ldr	r4, [sp, #96]	; 0x60
 800ab26:	2c00      	cmp	r4, #0
 800ab28:	da0c      	bge.n	800ab44 <_svfwprintf_r+0x8d4>
 800ab2a:	4d11      	ldr	r5, [pc, #68]	; (800ab70 <_svfwprintf_r+0x900>)
 800ab2c:	4264      	negs	r4, r4
 800ab2e:	2c10      	cmp	r4, #16
 800ab30:	dc0b      	bgt.n	800ab4a <_svfwprintf_r+0x8da>
 800ab32:	4a0f      	ldr	r2, [pc, #60]	; (800ab70 <_svfwprintf_r+0x900>)
 800ab34:	00a3      	lsls	r3, r4, #2
 800ab36:	4649      	mov	r1, r9
 800ab38:	4658      	mov	r0, fp
 800ab3a:	f000 f9f7 	bl	800af2c <__ssputs_r>
 800ab3e:	3001      	adds	r0, #1
 800ab40:	f43f af75 	beq.w	800aa2e <_svfwprintf_r+0x7be>
 800ab44:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ab46:	009b      	lsls	r3, r3, #2
 800ab48:	e63a      	b.n	800a7c0 <_svfwprintf_r+0x550>
 800ab4a:	2340      	movs	r3, #64	; 0x40
 800ab4c:	462a      	mov	r2, r5
 800ab4e:	4649      	mov	r1, r9
 800ab50:	4658      	mov	r0, fp
 800ab52:	f000 f9eb 	bl	800af2c <__ssputs_r>
 800ab56:	3001      	adds	r0, #1
 800ab58:	f43f af69 	beq.w	800aa2e <_svfwprintf_r+0x7be>
 800ab5c:	3c10      	subs	r4, #16
 800ab5e:	e7e6      	b.n	800ab2e <_svfwprintf_r+0x8be>
 800ab60:	0800e4bc 	.word	0x0800e4bc
 800ab64:	0800e478 	.word	0x0800e478
 800ab68:	0800e508 	.word	0x0800e508
 800ab6c:	0800e500 	.word	0x0800e500
 800ab70:	0800e548 	.word	0x0800e548
 800ab74:	9c19      	ldr	r4, [sp, #100]	; 0x64
 800ab76:	f344 041d 	sbfx	r4, r4, #0, #30
 800ab7a:	42ac      	cmp	r4, r5
 800ab7c:	bfa8      	it	ge
 800ab7e:	462c      	movge	r4, r5
 800ab80:	2c00      	cmp	r4, #0
 800ab82:	dc20      	bgt.n	800abc6 <_svfwprintf_r+0x956>
 800ab84:	2c00      	cmp	r4, #0
 800ab86:	bfac      	ite	ge
 800ab88:	1b2c      	subge	r4, r5, r4
 800ab8a:	462c      	movlt	r4, r5
 800ab8c:	2c00      	cmp	r4, #0
 800ab8e:	dd0b      	ble.n	800aba8 <_svfwprintf_r+0x938>
 800ab90:	4e72      	ldr	r6, [pc, #456]	; (800ad5c <_svfwprintf_r+0xaec>)
 800ab92:	2c10      	cmp	r4, #16
 800ab94:	dc20      	bgt.n	800abd8 <_svfwprintf_r+0x968>
 800ab96:	4a71      	ldr	r2, [pc, #452]	; (800ad5c <_svfwprintf_r+0xaec>)
 800ab98:	00a3      	lsls	r3, r4, #2
 800ab9a:	4649      	mov	r1, r9
 800ab9c:	4658      	mov	r0, fp
 800ab9e:	f000 f9c5 	bl	800af2c <__ssputs_r>
 800aba2:	3001      	adds	r0, #1
 800aba4:	f43f af43 	beq.w	800aa2e <_svfwprintf_r+0x7be>
 800aba8:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 800abac:	429a      	cmp	r2, r3
 800abae:	ea4f 0585 	mov.w	r5, r5, lsl #2
 800abb2:	da1c      	bge.n	800abee <_svfwprintf_r+0x97e>
 800abb4:	2304      	movs	r3, #4
 800abb6:	aa16      	add	r2, sp, #88	; 0x58
 800abb8:	4649      	mov	r1, r9
 800abba:	4658      	mov	r0, fp
 800abbc:	f000 f9b6 	bl	800af2c <__ssputs_r>
 800abc0:	3001      	adds	r0, #1
 800abc2:	d116      	bne.n	800abf2 <_svfwprintf_r+0x982>
 800abc4:	e733      	b.n	800aa2e <_svfwprintf_r+0x7be>
 800abc6:	00a3      	lsls	r3, r4, #2
 800abc8:	4652      	mov	r2, sl
 800abca:	4649      	mov	r1, r9
 800abcc:	4658      	mov	r0, fp
 800abce:	f000 f9ad 	bl	800af2c <__ssputs_r>
 800abd2:	3001      	adds	r0, #1
 800abd4:	d1d6      	bne.n	800ab84 <_svfwprintf_r+0x914>
 800abd6:	e72a      	b.n	800aa2e <_svfwprintf_r+0x7be>
 800abd8:	2340      	movs	r3, #64	; 0x40
 800abda:	4632      	mov	r2, r6
 800abdc:	4649      	mov	r1, r9
 800abde:	4658      	mov	r0, fp
 800abe0:	f000 f9a4 	bl	800af2c <__ssputs_r>
 800abe4:	3001      	adds	r0, #1
 800abe6:	f43f af22 	beq.w	800aa2e <_svfwprintf_r+0x7be>
 800abea:	3c10      	subs	r4, #16
 800abec:	e7d1      	b.n	800ab92 <_svfwprintf_r+0x922>
 800abee:	07fe      	lsls	r6, r7, #31
 800abf0:	d4e0      	bmi.n	800abb4 <_svfwprintf_r+0x944>
 800abf2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800abf4:	ebc5 0483 	rsb	r4, r5, r3, lsl #2
 800abf8:	10a2      	asrs	r2, r4, #2
 800abfa:	9c18      	ldr	r4, [sp, #96]	; 0x60
 800abfc:	1b1c      	subs	r4, r3, r4
 800abfe:	4294      	cmp	r4, r2
 800ac00:	bfa8      	it	ge
 800ac02:	4614      	movge	r4, r2
 800ac04:	2c00      	cmp	r4, #0
 800ac06:	dd09      	ble.n	800ac1c <_svfwprintf_r+0x9ac>
 800ac08:	00a3      	lsls	r3, r4, #2
 800ac0a:	eb0a 0205 	add.w	r2, sl, r5
 800ac0e:	4649      	mov	r1, r9
 800ac10:	4658      	mov	r0, fp
 800ac12:	f000 f98b 	bl	800af2c <__ssputs_r>
 800ac16:	3001      	adds	r0, #1
 800ac18:	f43f af09 	beq.w	800aa2e <_svfwprintf_r+0x7be>
 800ac1c:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 800ac20:	2c00      	cmp	r4, #0
 800ac22:	eba3 0302 	sub.w	r3, r3, r2
 800ac26:	bfac      	ite	ge
 800ac28:	1b1c      	subge	r4, r3, r4
 800ac2a:	461c      	movlt	r4, r3
 800ac2c:	2c00      	cmp	r4, #0
 800ac2e:	f77f adcf 	ble.w	800a7d0 <_svfwprintf_r+0x560>
 800ac32:	4d4a      	ldr	r5, [pc, #296]	; (800ad5c <_svfwprintf_r+0xaec>)
 800ac34:	2c10      	cmp	r4, #16
 800ac36:	f77f af4d 	ble.w	800aad4 <_svfwprintf_r+0x864>
 800ac3a:	2340      	movs	r3, #64	; 0x40
 800ac3c:	462a      	mov	r2, r5
 800ac3e:	4649      	mov	r1, r9
 800ac40:	4658      	mov	r0, fp
 800ac42:	f000 f973 	bl	800af2c <__ssputs_r>
 800ac46:	3001      	adds	r0, #1
 800ac48:	f43f aef1 	beq.w	800aa2e <_svfwprintf_r+0x7be>
 800ac4c:	3c10      	subs	r4, #16
 800ac4e:	e7f1      	b.n	800ac34 <_svfwprintf_r+0x9c4>
 800ac50:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ac52:	2b01      	cmp	r3, #1
 800ac54:	4652      	mov	r2, sl
 800ac56:	f04f 0304 	mov.w	r3, #4
 800ac5a:	4649      	mov	r1, r9
 800ac5c:	4658      	mov	r0, fp
 800ac5e:	dc01      	bgt.n	800ac64 <_svfwprintf_r+0x9f4>
 800ac60:	07fc      	lsls	r4, r7, #31
 800ac62:	d51b      	bpl.n	800ac9c <_svfwprintf_r+0xa2c>
 800ac64:	f000 f962 	bl	800af2c <__ssputs_r>
 800ac68:	3001      	adds	r0, #1
 800ac6a:	f43f aee0 	beq.w	800aa2e <_svfwprintf_r+0x7be>
 800ac6e:	2304      	movs	r3, #4
 800ac70:	aa16      	add	r2, sp, #88	; 0x58
 800ac72:	4649      	mov	r1, r9
 800ac74:	4658      	mov	r0, fp
 800ac76:	f000 f959 	bl	800af2c <__ssputs_r>
 800ac7a:	3001      	adds	r0, #1
 800ac7c:	f43f aed7 	beq.w	800aa2e <_svfwprintf_r+0x7be>
 800ac80:	9c19      	ldr	r4, [sp, #100]	; 0x64
 800ac82:	ec51 0b18 	vmov	r0, r1, d8
 800ac86:	2200      	movs	r2, #0
 800ac88:	2300      	movs	r3, #0
 800ac8a:	3c01      	subs	r4, #1
 800ac8c:	f7f5 ff1c 	bl	8000ac8 <__aeabi_dcmpeq>
 800ac90:	b968      	cbnz	r0, 800acae <_svfwprintf_r+0xa3e>
 800ac92:	00a3      	lsls	r3, r4, #2
 800ac94:	f10a 0204 	add.w	r2, sl, #4
 800ac98:	4649      	mov	r1, r9
 800ac9a:	4658      	mov	r0, fp
 800ac9c:	f000 f946 	bl	800af2c <__ssputs_r>
 800aca0:	3001      	adds	r0, #1
 800aca2:	f43f aec4 	beq.w	800aa2e <_svfwprintf_r+0x7be>
 800aca6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800aca8:	aa1c      	add	r2, sp, #112	; 0x70
 800acaa:	009b      	lsls	r3, r3, #2
 800acac:	e589      	b.n	800a7c2 <_svfwprintf_r+0x552>
 800acae:	2c00      	cmp	r4, #0
 800acb0:	ddf9      	ble.n	800aca6 <_svfwprintf_r+0xa36>
 800acb2:	4d2a      	ldr	r5, [pc, #168]	; (800ad5c <_svfwprintf_r+0xaec>)
 800acb4:	2c10      	cmp	r4, #16
 800acb6:	dc02      	bgt.n	800acbe <_svfwprintf_r+0xa4e>
 800acb8:	4a28      	ldr	r2, [pc, #160]	; (800ad5c <_svfwprintf_r+0xaec>)
 800acba:	00a3      	lsls	r3, r4, #2
 800acbc:	e7ec      	b.n	800ac98 <_svfwprintf_r+0xa28>
 800acbe:	2340      	movs	r3, #64	; 0x40
 800acc0:	462a      	mov	r2, r5
 800acc2:	4649      	mov	r1, r9
 800acc4:	4658      	mov	r0, fp
 800acc6:	f000 f931 	bl	800af2c <__ssputs_r>
 800acca:	3001      	adds	r0, #1
 800accc:	f43f aeaf 	beq.w	800aa2e <_svfwprintf_r+0x7be>
 800acd0:	3c10      	subs	r4, #16
 800acd2:	e7ef      	b.n	800acb4 <_svfwprintf_r+0xa44>
 800acd4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800acd6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800acd8:	1a9c      	subs	r4, r3, r2
 800acda:	2c00      	cmp	r4, #0
 800acdc:	f77f ad7b 	ble.w	800a7d6 <_svfwprintf_r+0x566>
 800ace0:	2c10      	cmp	r4, #16
 800ace2:	dc09      	bgt.n	800acf8 <_svfwprintf_r+0xa88>
 800ace4:	4a1e      	ldr	r2, [pc, #120]	; (800ad60 <_svfwprintf_r+0xaf0>)
 800ace6:	00a3      	lsls	r3, r4, #2
 800ace8:	4649      	mov	r1, r9
 800acea:	4658      	mov	r0, fp
 800acec:	f000 f91e 	bl	800af2c <__ssputs_r>
 800acf0:	3001      	adds	r0, #1
 800acf2:	f47f ad70 	bne.w	800a7d6 <_svfwprintf_r+0x566>
 800acf6:	e69a      	b.n	800aa2e <_svfwprintf_r+0x7be>
 800acf8:	4a19      	ldr	r2, [pc, #100]	; (800ad60 <_svfwprintf_r+0xaf0>)
 800acfa:	2340      	movs	r3, #64	; 0x40
 800acfc:	4649      	mov	r1, r9
 800acfe:	4658      	mov	r0, fp
 800ad00:	f000 f914 	bl	800af2c <__ssputs_r>
 800ad04:	3001      	adds	r0, #1
 800ad06:	f43f ae92 	beq.w	800aa2e <_svfwprintf_r+0x7be>
 800ad0a:	3c10      	subs	r4, #16
 800ad0c:	e7e8      	b.n	800ace0 <_svfwprintf_r+0xa70>
 800ad0e:	4639      	mov	r1, r7
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	f43f adec 	beq.w	800a8ee <_svfwprintf_r+0x67e>
 800ad16:	2a01      	cmp	r2, #1
 800ad18:	f43f ae4c 	beq.w	800a9b4 <_svfwprintf_r+0x744>
 800ad1c:	2a02      	cmp	r2, #2
 800ad1e:	f50d 7aa4 	add.w	sl, sp, #328	; 0x148
 800ad22:	f43f ae5d 	beq.w	800a9e0 <_svfwprintf_r+0x770>
 800ad26:	f003 0207 	and.w	r2, r3, #7
 800ad2a:	3230      	adds	r2, #48	; 0x30
 800ad2c:	08db      	lsrs	r3, r3, #3
 800ad2e:	4650      	mov	r0, sl
 800ad30:	f84a 2d04 	str.w	r2, [sl, #-4]!
 800ad34:	d1f7      	bne.n	800ad26 <_svfwprintf_r+0xab6>
 800ad36:	07cd      	lsls	r5, r1, #31
 800ad38:	d506      	bpl.n	800ad48 <_svfwprintf_r+0xad8>
 800ad3a:	2a30      	cmp	r2, #48	; 0x30
 800ad3c:	d004      	beq.n	800ad48 <_svfwprintf_r+0xad8>
 800ad3e:	2330      	movs	r3, #48	; 0x30
 800ad40:	f84a 3c04 	str.w	r3, [sl, #-4]
 800ad44:	f1a0 0a08 	sub.w	sl, r0, #8
 800ad48:	ab52      	add	r3, sp, #328	; 0x148
 800ad4a:	4626      	mov	r6, r4
 800ad4c:	eba3 040a 	sub.w	r4, r3, sl
 800ad50:	10a4      	asrs	r4, r4, #2
 800ad52:	460f      	mov	r7, r1
 800ad54:	f04f 0800 	mov.w	r8, #0
 800ad58:	4645      	mov	r5, r8
 800ad5a:	e4da      	b.n	800a712 <_svfwprintf_r+0x4a2>
 800ad5c:	0800e548 	.word	0x0800e548
 800ad60:	0800e508 	.word	0x0800e508

0800ad64 <wcslen>:
 800ad64:	4602      	mov	r2, r0
 800ad66:	4613      	mov	r3, r2
 800ad68:	3204      	adds	r2, #4
 800ad6a:	6819      	ldr	r1, [r3, #0]
 800ad6c:	2900      	cmp	r1, #0
 800ad6e:	d1fa      	bne.n	800ad66 <wcslen+0x2>
 800ad70:	1a18      	subs	r0, r3, r0
 800ad72:	1080      	asrs	r0, r0, #2
 800ad74:	4770      	bx	lr

0800ad76 <wmemchr>:
 800ad76:	b530      	push	{r4, r5, lr}
 800ad78:	2400      	movs	r4, #0
 800ad7a:	4294      	cmp	r4, r2
 800ad7c:	4603      	mov	r3, r0
 800ad7e:	d102      	bne.n	800ad86 <wmemchr+0x10>
 800ad80:	2300      	movs	r3, #0
 800ad82:	4618      	mov	r0, r3
 800ad84:	bd30      	pop	{r4, r5, pc}
 800ad86:	681d      	ldr	r5, [r3, #0]
 800ad88:	428d      	cmp	r5, r1
 800ad8a:	f100 0004 	add.w	r0, r0, #4
 800ad8e:	d0f8      	beq.n	800ad82 <wmemchr+0xc>
 800ad90:	3401      	adds	r4, #1
 800ad92:	e7f2      	b.n	800ad7a <wmemchr+0x4>

0800ad94 <__assert_func>:
 800ad94:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ad96:	4614      	mov	r4, r2
 800ad98:	461a      	mov	r2, r3
 800ad9a:	4b09      	ldr	r3, [pc, #36]	; (800adc0 <__assert_func+0x2c>)
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	4605      	mov	r5, r0
 800ada0:	68d8      	ldr	r0, [r3, #12]
 800ada2:	b14c      	cbz	r4, 800adb8 <__assert_func+0x24>
 800ada4:	4b07      	ldr	r3, [pc, #28]	; (800adc4 <__assert_func+0x30>)
 800ada6:	9100      	str	r1, [sp, #0]
 800ada8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800adac:	4906      	ldr	r1, [pc, #24]	; (800adc8 <__assert_func+0x34>)
 800adae:	462b      	mov	r3, r5
 800adb0:	f000 f858 	bl	800ae64 <fiprintf>
 800adb4:	f000 f922 	bl	800affc <abort>
 800adb8:	4b04      	ldr	r3, [pc, #16]	; (800adcc <__assert_func+0x38>)
 800adba:	461c      	mov	r4, r3
 800adbc:	e7f3      	b.n	800ada6 <__assert_func+0x12>
 800adbe:	bf00      	nop
 800adc0:	2000001c 	.word	0x2000001c
 800adc4:	0800e588 	.word	0x0800e588
 800adc8:	0800e595 	.word	0x0800e595
 800adcc:	0800e5c3 	.word	0x0800e5c3

0800add0 <btowc>:
 800add0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800add2:	1c43      	adds	r3, r0, #1
 800add4:	b087      	sub	sp, #28
 800add6:	d103      	bne.n	800ade0 <btowc+0x10>
 800add8:	f04f 30ff 	mov.w	r0, #4294967295
 800addc:	b007      	add	sp, #28
 800adde:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ade0:	4d1c      	ldr	r5, [pc, #112]	; (800ae54 <btowc+0x84>)
 800ade2:	f88d 000b 	strb.w	r0, [sp, #11]
 800ade6:	ae04      	add	r6, sp, #16
 800ade8:	2208      	movs	r2, #8
 800adea:	2100      	movs	r1, #0
 800adec:	4630      	mov	r0, r6
 800adee:	f7fc fefd 	bl	8007bec <memset>
 800adf2:	682f      	ldr	r7, [r5, #0]
 800adf4:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 800adf6:	b9fc      	cbnz	r4, 800ae38 <btowc+0x68>
 800adf8:	2050      	movs	r0, #80	; 0x50
 800adfa:	f7fe fcbd 	bl	8009778 <malloc>
 800adfe:	4602      	mov	r2, r0
 800ae00:	65b8      	str	r0, [r7, #88]	; 0x58
 800ae02:	b920      	cbnz	r0, 800ae0e <btowc+0x3e>
 800ae04:	4b14      	ldr	r3, [pc, #80]	; (800ae58 <btowc+0x88>)
 800ae06:	4815      	ldr	r0, [pc, #84]	; (800ae5c <btowc+0x8c>)
 800ae08:	2118      	movs	r1, #24
 800ae0a:	f7ff ffc3 	bl	800ad94 <__assert_func>
 800ae0e:	682b      	ldr	r3, [r5, #0]
 800ae10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ae12:	e9c3 4400 	strd	r4, r4, [r3]
 800ae16:	e9c3 4402 	strd	r4, r4, [r3, #8]
 800ae1a:	e9c3 4404 	strd	r4, r4, [r3, #16]
 800ae1e:	e9c3 440a 	strd	r4, r4, [r3, #40]	; 0x28
 800ae22:	e9c3 440c 	strd	r4, r4, [r3, #48]	; 0x30
 800ae26:	e9c3 440e 	strd	r4, r4, [r3, #56]	; 0x38
 800ae2a:	e9c3 4410 	strd	r4, r4, [r3, #64]	; 0x40
 800ae2e:	e9c3 4412 	strd	r4, r4, [r3, #72]	; 0x48
 800ae32:	619c      	str	r4, [r3, #24]
 800ae34:	771c      	strb	r4, [r3, #28]
 800ae36:	625c      	str	r4, [r3, #36]	; 0x24
 800ae38:	4b09      	ldr	r3, [pc, #36]	; (800ae60 <btowc+0x90>)
 800ae3a:	9600      	str	r6, [sp, #0]
 800ae3c:	f8d3 40e4 	ldr.w	r4, [r3, #228]	; 0xe4
 800ae40:	6828      	ldr	r0, [r5, #0]
 800ae42:	2301      	movs	r3, #1
 800ae44:	f10d 020b 	add.w	r2, sp, #11
 800ae48:	a903      	add	r1, sp, #12
 800ae4a:	47a0      	blx	r4
 800ae4c:	2801      	cmp	r0, #1
 800ae4e:	d8c3      	bhi.n	800add8 <btowc+0x8>
 800ae50:	9803      	ldr	r0, [sp, #12]
 800ae52:	e7c3      	b.n	800addc <btowc+0xc>
 800ae54:	2000001c 	.word	0x2000001c
 800ae58:	0800e23d 	.word	0x0800e23d
 800ae5c:	0800e5c4 	.word	0x0800e5c4
 800ae60:	20000080 	.word	0x20000080

0800ae64 <fiprintf>:
 800ae64:	b40e      	push	{r1, r2, r3}
 800ae66:	b503      	push	{r0, r1, lr}
 800ae68:	4601      	mov	r1, r0
 800ae6a:	ab03      	add	r3, sp, #12
 800ae6c:	4805      	ldr	r0, [pc, #20]	; (800ae84 <fiprintf+0x20>)
 800ae6e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ae72:	6800      	ldr	r0, [r0, #0]
 800ae74:	9301      	str	r3, [sp, #4]
 800ae76:	f7ff f849 	bl	8009f0c <_vfiprintf_r>
 800ae7a:	b002      	add	sp, #8
 800ae7c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ae80:	b003      	add	sp, #12
 800ae82:	4770      	bx	lr
 800ae84:	2000001c 	.word	0x2000001c

0800ae88 <__ascii_mbtowc>:
 800ae88:	b082      	sub	sp, #8
 800ae8a:	b901      	cbnz	r1, 800ae8e <__ascii_mbtowc+0x6>
 800ae8c:	a901      	add	r1, sp, #4
 800ae8e:	b142      	cbz	r2, 800aea2 <__ascii_mbtowc+0x1a>
 800ae90:	b14b      	cbz	r3, 800aea6 <__ascii_mbtowc+0x1e>
 800ae92:	7813      	ldrb	r3, [r2, #0]
 800ae94:	600b      	str	r3, [r1, #0]
 800ae96:	7812      	ldrb	r2, [r2, #0]
 800ae98:	1e10      	subs	r0, r2, #0
 800ae9a:	bf18      	it	ne
 800ae9c:	2001      	movne	r0, #1
 800ae9e:	b002      	add	sp, #8
 800aea0:	4770      	bx	lr
 800aea2:	4610      	mov	r0, r2
 800aea4:	e7fb      	b.n	800ae9e <__ascii_mbtowc+0x16>
 800aea6:	f06f 0001 	mvn.w	r0, #1
 800aeaa:	e7f8      	b.n	800ae9e <__ascii_mbtowc+0x16>

0800aeac <memmove>:
 800aeac:	4288      	cmp	r0, r1
 800aeae:	b510      	push	{r4, lr}
 800aeb0:	eb01 0402 	add.w	r4, r1, r2
 800aeb4:	d902      	bls.n	800aebc <memmove+0x10>
 800aeb6:	4284      	cmp	r4, r0
 800aeb8:	4623      	mov	r3, r4
 800aeba:	d807      	bhi.n	800aecc <memmove+0x20>
 800aebc:	1e43      	subs	r3, r0, #1
 800aebe:	42a1      	cmp	r1, r4
 800aec0:	d008      	beq.n	800aed4 <memmove+0x28>
 800aec2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800aec6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800aeca:	e7f8      	b.n	800aebe <memmove+0x12>
 800aecc:	4402      	add	r2, r0
 800aece:	4601      	mov	r1, r0
 800aed0:	428a      	cmp	r2, r1
 800aed2:	d100      	bne.n	800aed6 <memmove+0x2a>
 800aed4:	bd10      	pop	{r4, pc}
 800aed6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800aeda:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800aede:	e7f7      	b.n	800aed0 <memmove+0x24>

0800aee0 <_realloc_r>:
 800aee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aee2:	4607      	mov	r7, r0
 800aee4:	4614      	mov	r4, r2
 800aee6:	460e      	mov	r6, r1
 800aee8:	b921      	cbnz	r1, 800aef4 <_realloc_r+0x14>
 800aeea:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800aeee:	4611      	mov	r1, r2
 800aef0:	f7fc bed4 	b.w	8007c9c <_malloc_r>
 800aef4:	b922      	cbnz	r2, 800af00 <_realloc_r+0x20>
 800aef6:	f7fc fe81 	bl	8007bfc <_free_r>
 800aefa:	4625      	mov	r5, r4
 800aefc:	4628      	mov	r0, r5
 800aefe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800af00:	f000 f883 	bl	800b00a <_malloc_usable_size_r>
 800af04:	42a0      	cmp	r0, r4
 800af06:	d20f      	bcs.n	800af28 <_realloc_r+0x48>
 800af08:	4621      	mov	r1, r4
 800af0a:	4638      	mov	r0, r7
 800af0c:	f7fc fec6 	bl	8007c9c <_malloc_r>
 800af10:	4605      	mov	r5, r0
 800af12:	2800      	cmp	r0, #0
 800af14:	d0f2      	beq.n	800aefc <_realloc_r+0x1c>
 800af16:	4631      	mov	r1, r6
 800af18:	4622      	mov	r2, r4
 800af1a:	f7fc fe59 	bl	8007bd0 <memcpy>
 800af1e:	4631      	mov	r1, r6
 800af20:	4638      	mov	r0, r7
 800af22:	f7fc fe6b 	bl	8007bfc <_free_r>
 800af26:	e7e9      	b.n	800aefc <_realloc_r+0x1c>
 800af28:	4635      	mov	r5, r6
 800af2a:	e7e7      	b.n	800aefc <_realloc_r+0x1c>

0800af2c <__ssputs_r>:
 800af2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af30:	688e      	ldr	r6, [r1, #8]
 800af32:	429e      	cmp	r6, r3
 800af34:	4682      	mov	sl, r0
 800af36:	460c      	mov	r4, r1
 800af38:	4690      	mov	r8, r2
 800af3a:	461f      	mov	r7, r3
 800af3c:	d838      	bhi.n	800afb0 <__ssputs_r+0x84>
 800af3e:	898a      	ldrh	r2, [r1, #12]
 800af40:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800af44:	d032      	beq.n	800afac <__ssputs_r+0x80>
 800af46:	6825      	ldr	r5, [r4, #0]
 800af48:	6909      	ldr	r1, [r1, #16]
 800af4a:	eba5 0901 	sub.w	r9, r5, r1
 800af4e:	6965      	ldr	r5, [r4, #20]
 800af50:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800af54:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800af58:	3301      	adds	r3, #1
 800af5a:	444b      	add	r3, r9
 800af5c:	106d      	asrs	r5, r5, #1
 800af5e:	429d      	cmp	r5, r3
 800af60:	bf38      	it	cc
 800af62:	461d      	movcc	r5, r3
 800af64:	0553      	lsls	r3, r2, #21
 800af66:	d531      	bpl.n	800afcc <__ssputs_r+0xa0>
 800af68:	4629      	mov	r1, r5
 800af6a:	f7fc fe97 	bl	8007c9c <_malloc_r>
 800af6e:	4606      	mov	r6, r0
 800af70:	b950      	cbnz	r0, 800af88 <__ssputs_r+0x5c>
 800af72:	230c      	movs	r3, #12
 800af74:	f8ca 3000 	str.w	r3, [sl]
 800af78:	89a3      	ldrh	r3, [r4, #12]
 800af7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800af7e:	81a3      	strh	r3, [r4, #12]
 800af80:	f04f 30ff 	mov.w	r0, #4294967295
 800af84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af88:	6921      	ldr	r1, [r4, #16]
 800af8a:	464a      	mov	r2, r9
 800af8c:	f7fc fe20 	bl	8007bd0 <memcpy>
 800af90:	89a3      	ldrh	r3, [r4, #12]
 800af92:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800af96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800af9a:	81a3      	strh	r3, [r4, #12]
 800af9c:	6126      	str	r6, [r4, #16]
 800af9e:	6165      	str	r5, [r4, #20]
 800afa0:	444e      	add	r6, r9
 800afa2:	eba5 0509 	sub.w	r5, r5, r9
 800afa6:	6026      	str	r6, [r4, #0]
 800afa8:	60a5      	str	r5, [r4, #8]
 800afaa:	463e      	mov	r6, r7
 800afac:	42be      	cmp	r6, r7
 800afae:	d900      	bls.n	800afb2 <__ssputs_r+0x86>
 800afb0:	463e      	mov	r6, r7
 800afb2:	4632      	mov	r2, r6
 800afb4:	6820      	ldr	r0, [r4, #0]
 800afb6:	4641      	mov	r1, r8
 800afb8:	f7ff ff78 	bl	800aeac <memmove>
 800afbc:	68a3      	ldr	r3, [r4, #8]
 800afbe:	6822      	ldr	r2, [r4, #0]
 800afc0:	1b9b      	subs	r3, r3, r6
 800afc2:	4432      	add	r2, r6
 800afc4:	60a3      	str	r3, [r4, #8]
 800afc6:	6022      	str	r2, [r4, #0]
 800afc8:	2000      	movs	r0, #0
 800afca:	e7db      	b.n	800af84 <__ssputs_r+0x58>
 800afcc:	462a      	mov	r2, r5
 800afce:	f7ff ff87 	bl	800aee0 <_realloc_r>
 800afd2:	4606      	mov	r6, r0
 800afd4:	2800      	cmp	r0, #0
 800afd6:	d1e1      	bne.n	800af9c <__ssputs_r+0x70>
 800afd8:	6921      	ldr	r1, [r4, #16]
 800afda:	4650      	mov	r0, sl
 800afdc:	f7fc fe0e 	bl	8007bfc <_free_r>
 800afe0:	e7c7      	b.n	800af72 <__ssputs_r+0x46>

0800afe2 <__ascii_wctomb>:
 800afe2:	b149      	cbz	r1, 800aff8 <__ascii_wctomb+0x16>
 800afe4:	2aff      	cmp	r2, #255	; 0xff
 800afe6:	bf85      	ittet	hi
 800afe8:	238a      	movhi	r3, #138	; 0x8a
 800afea:	6003      	strhi	r3, [r0, #0]
 800afec:	700a      	strbls	r2, [r1, #0]
 800afee:	f04f 30ff 	movhi.w	r0, #4294967295
 800aff2:	bf98      	it	ls
 800aff4:	2001      	movls	r0, #1
 800aff6:	4770      	bx	lr
 800aff8:	4608      	mov	r0, r1
 800affa:	4770      	bx	lr

0800affc <abort>:
 800affc:	b508      	push	{r3, lr}
 800affe:	2006      	movs	r0, #6
 800b000:	f000 f834 	bl	800b06c <raise>
 800b004:	2001      	movs	r0, #1
 800b006:	f7f6 fc97 	bl	8001938 <_exit>

0800b00a <_malloc_usable_size_r>:
 800b00a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b00e:	1f18      	subs	r0, r3, #4
 800b010:	2b00      	cmp	r3, #0
 800b012:	bfbc      	itt	lt
 800b014:	580b      	ldrlt	r3, [r1, r0]
 800b016:	18c0      	addlt	r0, r0, r3
 800b018:	4770      	bx	lr

0800b01a <_raise_r>:
 800b01a:	291f      	cmp	r1, #31
 800b01c:	b538      	push	{r3, r4, r5, lr}
 800b01e:	4604      	mov	r4, r0
 800b020:	460d      	mov	r5, r1
 800b022:	d904      	bls.n	800b02e <_raise_r+0x14>
 800b024:	2316      	movs	r3, #22
 800b026:	6003      	str	r3, [r0, #0]
 800b028:	f04f 30ff 	mov.w	r0, #4294967295
 800b02c:	bd38      	pop	{r3, r4, r5, pc}
 800b02e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b030:	b112      	cbz	r2, 800b038 <_raise_r+0x1e>
 800b032:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b036:	b94b      	cbnz	r3, 800b04c <_raise_r+0x32>
 800b038:	4620      	mov	r0, r4
 800b03a:	f000 f831 	bl	800b0a0 <_getpid_r>
 800b03e:	462a      	mov	r2, r5
 800b040:	4601      	mov	r1, r0
 800b042:	4620      	mov	r0, r4
 800b044:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b048:	f000 b818 	b.w	800b07c <_kill_r>
 800b04c:	2b01      	cmp	r3, #1
 800b04e:	d00a      	beq.n	800b066 <_raise_r+0x4c>
 800b050:	1c59      	adds	r1, r3, #1
 800b052:	d103      	bne.n	800b05c <_raise_r+0x42>
 800b054:	2316      	movs	r3, #22
 800b056:	6003      	str	r3, [r0, #0]
 800b058:	2001      	movs	r0, #1
 800b05a:	e7e7      	b.n	800b02c <_raise_r+0x12>
 800b05c:	2400      	movs	r4, #0
 800b05e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b062:	4628      	mov	r0, r5
 800b064:	4798      	blx	r3
 800b066:	2000      	movs	r0, #0
 800b068:	e7e0      	b.n	800b02c <_raise_r+0x12>
	...

0800b06c <raise>:
 800b06c:	4b02      	ldr	r3, [pc, #8]	; (800b078 <raise+0xc>)
 800b06e:	4601      	mov	r1, r0
 800b070:	6818      	ldr	r0, [r3, #0]
 800b072:	f7ff bfd2 	b.w	800b01a <_raise_r>
 800b076:	bf00      	nop
 800b078:	2000001c 	.word	0x2000001c

0800b07c <_kill_r>:
 800b07c:	b538      	push	{r3, r4, r5, lr}
 800b07e:	4d07      	ldr	r5, [pc, #28]	; (800b09c <_kill_r+0x20>)
 800b080:	2300      	movs	r3, #0
 800b082:	4604      	mov	r4, r0
 800b084:	4608      	mov	r0, r1
 800b086:	4611      	mov	r1, r2
 800b088:	602b      	str	r3, [r5, #0]
 800b08a:	f7f6 fc45 	bl	8001918 <_kill>
 800b08e:	1c43      	adds	r3, r0, #1
 800b090:	d102      	bne.n	800b098 <_kill_r+0x1c>
 800b092:	682b      	ldr	r3, [r5, #0]
 800b094:	b103      	cbz	r3, 800b098 <_kill_r+0x1c>
 800b096:	6023      	str	r3, [r4, #0]
 800b098:	bd38      	pop	{r3, r4, r5, pc}
 800b09a:	bf00      	nop
 800b09c:	2000a44c 	.word	0x2000a44c

0800b0a0 <_getpid_r>:
 800b0a0:	f7f6 bc32 	b.w	8001908 <_getpid>

0800b0a4 <_init>:
 800b0a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0a6:	bf00      	nop
 800b0a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b0aa:	bc08      	pop	{r3}
 800b0ac:	469e      	mov	lr, r3
 800b0ae:	4770      	bx	lr

0800b0b0 <_fini>:
 800b0b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0b2:	bf00      	nop
 800b0b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b0b6:	bc08      	pop	{r3}
 800b0b8:	469e      	mov	lr, r3
 800b0ba:	4770      	bx	lr
