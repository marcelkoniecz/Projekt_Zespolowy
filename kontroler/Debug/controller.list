
controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009fc0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000364c  0800a150  0800a150  0001a150  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d79c  0800d79c  000201ec  2**0
                  CONTENTS
  4 .ARM          00000008  0800d79c  0800d79c  0001d79c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d7a4  0800d7a4  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d7a4  0800d7a4  0001d7a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d7a8  0800d7a8  0001d7a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  0800d7ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000a25c  200001ec  0800d998  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000a448  0800d998  0002a448  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b28b  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000036f4  00000000  00000000  0003b4a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001230  00000000  00000000  0003eba0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010b8  00000000  00000000  0003fdd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002acf4  00000000  00000000  00040e88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017194  00000000  00000000  0006bb7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010260e  00000000  00000000  00082d10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0018531e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d24  00000000  00000000  00185374  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001ec 	.word	0x200001ec
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a138 	.word	0x0800a138

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f0 	.word	0x200001f0
 80001cc:	0800a138 	.word	0x0800a138

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b96e 	b.w	8000e9c <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468c      	mov	ip, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	f040 8083 	bne.w	8000cee <__udivmoddi4+0x116>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4617      	mov	r7, r2
 8000bec:	d947      	bls.n	8000c7e <__udivmoddi4+0xa6>
 8000bee:	fab2 f282 	clz	r2, r2
 8000bf2:	b142      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	f1c2 0020 	rsb	r0, r2, #32
 8000bf8:	fa24 f000 	lsr.w	r0, r4, r0
 8000bfc:	4091      	lsls	r1, r2
 8000bfe:	4097      	lsls	r7, r2
 8000c00:	ea40 0c01 	orr.w	ip, r0, r1
 8000c04:	4094      	lsls	r4, r2
 8000c06:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c0a:	0c23      	lsrs	r3, r4, #16
 8000c0c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c10:	fa1f fe87 	uxth.w	lr, r7
 8000c14:	fb08 c116 	mls	r1, r8, r6, ip
 8000c18:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c20:	4299      	cmp	r1, r3
 8000c22:	d909      	bls.n	8000c38 <__udivmoddi4+0x60>
 8000c24:	18fb      	adds	r3, r7, r3
 8000c26:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2a:	f080 8119 	bcs.w	8000e60 <__udivmoddi4+0x288>
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	f240 8116 	bls.w	8000e60 <__udivmoddi4+0x288>
 8000c34:	3e02      	subs	r6, #2
 8000c36:	443b      	add	r3, r7
 8000c38:	1a5b      	subs	r3, r3, r1
 8000c3a:	b2a4      	uxth	r4, r4
 8000c3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c40:	fb08 3310 	mls	r3, r8, r0, r3
 8000c44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c48:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c4c:	45a6      	cmp	lr, r4
 8000c4e:	d909      	bls.n	8000c64 <__udivmoddi4+0x8c>
 8000c50:	193c      	adds	r4, r7, r4
 8000c52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c56:	f080 8105 	bcs.w	8000e64 <__udivmoddi4+0x28c>
 8000c5a:	45a6      	cmp	lr, r4
 8000c5c:	f240 8102 	bls.w	8000e64 <__udivmoddi4+0x28c>
 8000c60:	3802      	subs	r0, #2
 8000c62:	443c      	add	r4, r7
 8000c64:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c68:	eba4 040e 	sub.w	r4, r4, lr
 8000c6c:	2600      	movs	r6, #0
 8000c6e:	b11d      	cbz	r5, 8000c78 <__udivmoddi4+0xa0>
 8000c70:	40d4      	lsrs	r4, r2
 8000c72:	2300      	movs	r3, #0
 8000c74:	e9c5 4300 	strd	r4, r3, [r5]
 8000c78:	4631      	mov	r1, r6
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	b902      	cbnz	r2, 8000c82 <__udivmoddi4+0xaa>
 8000c80:	deff      	udf	#255	; 0xff
 8000c82:	fab2 f282 	clz	r2, r2
 8000c86:	2a00      	cmp	r2, #0
 8000c88:	d150      	bne.n	8000d2c <__udivmoddi4+0x154>
 8000c8a:	1bcb      	subs	r3, r1, r7
 8000c8c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c90:	fa1f f887 	uxth.w	r8, r7
 8000c94:	2601      	movs	r6, #1
 8000c96:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c9a:	0c21      	lsrs	r1, r4, #16
 8000c9c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ca0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ca4:	fb08 f30c 	mul.w	r3, r8, ip
 8000ca8:	428b      	cmp	r3, r1
 8000caa:	d907      	bls.n	8000cbc <__udivmoddi4+0xe4>
 8000cac:	1879      	adds	r1, r7, r1
 8000cae:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cb2:	d202      	bcs.n	8000cba <__udivmoddi4+0xe2>
 8000cb4:	428b      	cmp	r3, r1
 8000cb6:	f200 80e9 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cba:	4684      	mov	ip, r0
 8000cbc:	1ac9      	subs	r1, r1, r3
 8000cbe:	b2a3      	uxth	r3, r4
 8000cc0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cc4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cc8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ccc:	fb08 f800 	mul.w	r8, r8, r0
 8000cd0:	45a0      	cmp	r8, r4
 8000cd2:	d907      	bls.n	8000ce4 <__udivmoddi4+0x10c>
 8000cd4:	193c      	adds	r4, r7, r4
 8000cd6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cda:	d202      	bcs.n	8000ce2 <__udivmoddi4+0x10a>
 8000cdc:	45a0      	cmp	r8, r4
 8000cde:	f200 80d9 	bhi.w	8000e94 <__udivmoddi4+0x2bc>
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	eba4 0408 	sub.w	r4, r4, r8
 8000ce8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cec:	e7bf      	b.n	8000c6e <__udivmoddi4+0x96>
 8000cee:	428b      	cmp	r3, r1
 8000cf0:	d909      	bls.n	8000d06 <__udivmoddi4+0x12e>
 8000cf2:	2d00      	cmp	r5, #0
 8000cf4:	f000 80b1 	beq.w	8000e5a <__udivmoddi4+0x282>
 8000cf8:	2600      	movs	r6, #0
 8000cfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000cfe:	4630      	mov	r0, r6
 8000d00:	4631      	mov	r1, r6
 8000d02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d06:	fab3 f683 	clz	r6, r3
 8000d0a:	2e00      	cmp	r6, #0
 8000d0c:	d14a      	bne.n	8000da4 <__udivmoddi4+0x1cc>
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d302      	bcc.n	8000d18 <__udivmoddi4+0x140>
 8000d12:	4282      	cmp	r2, r0
 8000d14:	f200 80b8 	bhi.w	8000e88 <__udivmoddi4+0x2b0>
 8000d18:	1a84      	subs	r4, r0, r2
 8000d1a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d1e:	2001      	movs	r0, #1
 8000d20:	468c      	mov	ip, r1
 8000d22:	2d00      	cmp	r5, #0
 8000d24:	d0a8      	beq.n	8000c78 <__udivmoddi4+0xa0>
 8000d26:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d2a:	e7a5      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000d2c:	f1c2 0320 	rsb	r3, r2, #32
 8000d30:	fa20 f603 	lsr.w	r6, r0, r3
 8000d34:	4097      	lsls	r7, r2
 8000d36:	fa01 f002 	lsl.w	r0, r1, r2
 8000d3a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d3e:	40d9      	lsrs	r1, r3
 8000d40:	4330      	orrs	r0, r6
 8000d42:	0c03      	lsrs	r3, r0, #16
 8000d44:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d48:	fa1f f887 	uxth.w	r8, r7
 8000d4c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d50:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d54:	fb06 f108 	mul.w	r1, r6, r8
 8000d58:	4299      	cmp	r1, r3
 8000d5a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x19c>
 8000d60:	18fb      	adds	r3, r7, r3
 8000d62:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d66:	f080 808d 	bcs.w	8000e84 <__udivmoddi4+0x2ac>
 8000d6a:	4299      	cmp	r1, r3
 8000d6c:	f240 808a 	bls.w	8000e84 <__udivmoddi4+0x2ac>
 8000d70:	3e02      	subs	r6, #2
 8000d72:	443b      	add	r3, r7
 8000d74:	1a5b      	subs	r3, r3, r1
 8000d76:	b281      	uxth	r1, r0
 8000d78:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d7c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d84:	fb00 f308 	mul.w	r3, r0, r8
 8000d88:	428b      	cmp	r3, r1
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0x1c4>
 8000d8c:	1879      	adds	r1, r7, r1
 8000d8e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d92:	d273      	bcs.n	8000e7c <__udivmoddi4+0x2a4>
 8000d94:	428b      	cmp	r3, r1
 8000d96:	d971      	bls.n	8000e7c <__udivmoddi4+0x2a4>
 8000d98:	3802      	subs	r0, #2
 8000d9a:	4439      	add	r1, r7
 8000d9c:	1acb      	subs	r3, r1, r3
 8000d9e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000da2:	e778      	b.n	8000c96 <__udivmoddi4+0xbe>
 8000da4:	f1c6 0c20 	rsb	ip, r6, #32
 8000da8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dac:	fa22 f30c 	lsr.w	r3, r2, ip
 8000db0:	431c      	orrs	r4, r3
 8000db2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000db6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dba:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dbe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000dc2:	431f      	orrs	r7, r3
 8000dc4:	0c3b      	lsrs	r3, r7, #16
 8000dc6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dca:	fa1f f884 	uxth.w	r8, r4
 8000dce:	fb0e 1119 	mls	r1, lr, r9, r1
 8000dd2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000dd6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dda:	458a      	cmp	sl, r1
 8000ddc:	fa02 f206 	lsl.w	r2, r2, r6
 8000de0:	fa00 f306 	lsl.w	r3, r0, r6
 8000de4:	d908      	bls.n	8000df8 <__udivmoddi4+0x220>
 8000de6:	1861      	adds	r1, r4, r1
 8000de8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dec:	d248      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000dee:	458a      	cmp	sl, r1
 8000df0:	d946      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000df2:	f1a9 0902 	sub.w	r9, r9, #2
 8000df6:	4421      	add	r1, r4
 8000df8:	eba1 010a 	sub.w	r1, r1, sl
 8000dfc:	b2bf      	uxth	r7, r7
 8000dfe:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e02:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e06:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e0a:	fb00 f808 	mul.w	r8, r0, r8
 8000e0e:	45b8      	cmp	r8, r7
 8000e10:	d907      	bls.n	8000e22 <__udivmoddi4+0x24a>
 8000e12:	19e7      	adds	r7, r4, r7
 8000e14:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e18:	d22e      	bcs.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1a:	45b8      	cmp	r8, r7
 8000e1c:	d92c      	bls.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1e:	3802      	subs	r0, #2
 8000e20:	4427      	add	r7, r4
 8000e22:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e26:	eba7 0708 	sub.w	r7, r7, r8
 8000e2a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e2e:	454f      	cmp	r7, r9
 8000e30:	46c6      	mov	lr, r8
 8000e32:	4649      	mov	r1, r9
 8000e34:	d31a      	bcc.n	8000e6c <__udivmoddi4+0x294>
 8000e36:	d017      	beq.n	8000e68 <__udivmoddi4+0x290>
 8000e38:	b15d      	cbz	r5, 8000e52 <__udivmoddi4+0x27a>
 8000e3a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e3e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e42:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e46:	40f2      	lsrs	r2, r6
 8000e48:	ea4c 0202 	orr.w	r2, ip, r2
 8000e4c:	40f7      	lsrs	r7, r6
 8000e4e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e52:	2600      	movs	r6, #0
 8000e54:	4631      	mov	r1, r6
 8000e56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e5a:	462e      	mov	r6, r5
 8000e5c:	4628      	mov	r0, r5
 8000e5e:	e70b      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000e60:	4606      	mov	r6, r0
 8000e62:	e6e9      	b.n	8000c38 <__udivmoddi4+0x60>
 8000e64:	4618      	mov	r0, r3
 8000e66:	e6fd      	b.n	8000c64 <__udivmoddi4+0x8c>
 8000e68:	4543      	cmp	r3, r8
 8000e6a:	d2e5      	bcs.n	8000e38 <__udivmoddi4+0x260>
 8000e6c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e70:	eb69 0104 	sbc.w	r1, r9, r4
 8000e74:	3801      	subs	r0, #1
 8000e76:	e7df      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	e7d2      	b.n	8000e22 <__udivmoddi4+0x24a>
 8000e7c:	4660      	mov	r0, ip
 8000e7e:	e78d      	b.n	8000d9c <__udivmoddi4+0x1c4>
 8000e80:	4681      	mov	r9, r0
 8000e82:	e7b9      	b.n	8000df8 <__udivmoddi4+0x220>
 8000e84:	4666      	mov	r6, ip
 8000e86:	e775      	b.n	8000d74 <__udivmoddi4+0x19c>
 8000e88:	4630      	mov	r0, r6
 8000e8a:	e74a      	b.n	8000d22 <__udivmoddi4+0x14a>
 8000e8c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e90:	4439      	add	r1, r7
 8000e92:	e713      	b.n	8000cbc <__udivmoddi4+0xe4>
 8000e94:	3802      	subs	r0, #2
 8000e96:	443c      	add	r4, r7
 8000e98:	e724      	b.n	8000ce4 <__udivmoddi4+0x10c>
 8000e9a:	bf00      	nop

08000e9c <__aeabi_idiv0>:
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop

08000ea0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b08a      	sub	sp, #40	; 0x28
 8000ea4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000ea6:	f107 031c 	add.w	r3, r7, #28
 8000eaa:	2200      	movs	r2, #0
 8000eac:	601a      	str	r2, [r3, #0]
 8000eae:	605a      	str	r2, [r3, #4]
 8000eb0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000eb2:	1d3b      	adds	r3, r7, #4
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	601a      	str	r2, [r3, #0]
 8000eb8:	605a      	str	r2, [r3, #4]
 8000eba:	609a      	str	r2, [r3, #8]
 8000ebc:	60da      	str	r2, [r3, #12]
 8000ebe:	611a      	str	r2, [r3, #16]
 8000ec0:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000ec2:	4b37      	ldr	r3, [pc, #220]	; (8000fa0 <MX_ADC1_Init+0x100>)
 8000ec4:	4a37      	ldr	r2, [pc, #220]	; (8000fa4 <MX_ADC1_Init+0x104>)
 8000ec6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000ec8:	4b35      	ldr	r3, [pc, #212]	; (8000fa0 <MX_ADC1_Init+0x100>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ece:	4b34      	ldr	r3, [pc, #208]	; (8000fa0 <MX_ADC1_Init+0x100>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ed4:	4b32      	ldr	r3, [pc, #200]	; (8000fa0 <MX_ADC1_Init+0x100>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000eda:	4b31      	ldr	r3, [pc, #196]	; (8000fa0 <MX_ADC1_Init+0x100>)
 8000edc:	2201      	movs	r2, #1
 8000ede:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ee0:	4b2f      	ldr	r3, [pc, #188]	; (8000fa0 <MX_ADC1_Init+0x100>)
 8000ee2:	2204      	movs	r2, #4
 8000ee4:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000ee6:	4b2e      	ldr	r3, [pc, #184]	; (8000fa0 <MX_ADC1_Init+0x100>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000eec:	4b2c      	ldr	r3, [pc, #176]	; (8000fa0 <MX_ADC1_Init+0x100>)
 8000eee:	2201      	movs	r2, #1
 8000ef0:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 2;
 8000ef2:	4b2b      	ldr	r3, [pc, #172]	; (8000fa0 <MX_ADC1_Init+0x100>)
 8000ef4:	2202      	movs	r2, #2
 8000ef6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ef8:	4b29      	ldr	r3, [pc, #164]	; (8000fa0 <MX_ADC1_Init+0x100>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f00:	4b27      	ldr	r3, [pc, #156]	; (8000fa0 <MX_ADC1_Init+0x100>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f06:	4b26      	ldr	r3, [pc, #152]	; (8000fa0 <MX_ADC1_Init+0x100>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000f0c:	4b24      	ldr	r3, [pc, #144]	; (8000fa0 <MX_ADC1_Init+0x100>)
 8000f0e:	2201      	movs	r2, #1
 8000f10:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000f14:	4b22      	ldr	r3, [pc, #136]	; (8000fa0 <MX_ADC1_Init+0x100>)
 8000f16:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f1a:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000f1c:	4b20      	ldr	r3, [pc, #128]	; (8000fa0 <MX_ADC1_Init+0x100>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f24:	481e      	ldr	r0, [pc, #120]	; (8000fa0 <MX_ADC1_Init+0x100>)
 8000f26:	f001 f913 	bl	8002150 <HAL_ADC_Init>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d001      	beq.n	8000f34 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000f30:	f000 fb7a 	bl	8001628 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000f34:	2300      	movs	r3, #0
 8000f36:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000f38:	f107 031c 	add.w	r3, r7, #28
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	4818      	ldr	r0, [pc, #96]	; (8000fa0 <MX_ADC1_Init+0x100>)
 8000f40:	f002 f92e 	bl	80031a0 <HAL_ADCEx_MultiModeConfigChannel>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d001      	beq.n	8000f4e <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8000f4a:	f000 fb6d 	bl	8001628 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000f4e:	4b16      	ldr	r3, [pc, #88]	; (8000fa8 <MX_ADC1_Init+0x108>)
 8000f50:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f52:	2306      	movs	r3, #6
 8000f54:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 8000f56:	2305      	movs	r3, #5
 8000f58:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000f5a:	237f      	movs	r3, #127	; 0x7f
 8000f5c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000f5e:	2304      	movs	r3, #4
 8000f60:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000f62:	2300      	movs	r3, #0
 8000f64:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f66:	1d3b      	adds	r3, r7, #4
 8000f68:	4619      	mov	r1, r3
 8000f6a:	480d      	ldr	r0, [pc, #52]	; (8000fa0 <MX_ADC1_Init+0x100>)
 8000f6c:	f001 fb20 	bl	80025b0 <HAL_ADC_ConfigChannel>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d001      	beq.n	8000f7a <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 8000f76:	f000 fb57 	bl	8001628 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000f7a:	4b0c      	ldr	r3, [pc, #48]	; (8000fac <MX_ADC1_Init+0x10c>)
 8000f7c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000f7e:	230c      	movs	r3, #12
 8000f80:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f82:	1d3b      	adds	r3, r7, #4
 8000f84:	4619      	mov	r1, r3
 8000f86:	4806      	ldr	r0, [pc, #24]	; (8000fa0 <MX_ADC1_Init+0x100>)
 8000f88:	f001 fb12 	bl	80025b0 <HAL_ADC_ConfigChannel>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d001      	beq.n	8000f96 <MX_ADC1_Init+0xf6>
  {
    Error_Handler();
 8000f92:	f000 fb49 	bl	8001628 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f96:	bf00      	nop
 8000f98:	3728      	adds	r7, #40	; 0x28
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	2000a21c 	.word	0x2000a21c
 8000fa4:	50040000 	.word	0x50040000
 8000fa8:	04300002 	.word	0x04300002
 8000fac:	08600004 	.word	0x08600004

08000fb0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b0ac      	sub	sp, #176	; 0xb0
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	601a      	str	r2, [r3, #0]
 8000fc0:	605a      	str	r2, [r3, #4]
 8000fc2:	609a      	str	r2, [r3, #8]
 8000fc4:	60da      	str	r2, [r3, #12]
 8000fc6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fc8:	f107 0314 	add.w	r3, r7, #20
 8000fcc:	2288      	movs	r2, #136	; 0x88
 8000fce:	2100      	movs	r1, #0
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f005 fee1 	bl	8006d98 <memset>
  if(adcHandle->Instance==ADC1)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	4a3c      	ldr	r2, [pc, #240]	; (80010cc <HAL_ADC_MspInit+0x11c>)
 8000fdc:	4293      	cmp	r3, r2
 8000fde:	d171      	bne.n	80010c4 <HAL_ADC_MspInit+0x114>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000fe0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000fe4:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000fe6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000fea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8000ff6:	2310      	movs	r3, #16
 8000ff8:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000ffa:	2307      	movs	r3, #7
 8000ffc:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000ffe:	2302      	movs	r3, #2
 8001000:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001002:	2302      	movs	r3, #2
 8001004:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001006:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800100a:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800100c:	f107 0314 	add.w	r3, r7, #20
 8001010:	4618      	mov	r0, r3
 8001012:	f003 fc91 	bl	8004938 <HAL_RCCEx_PeriphCLKConfig>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d001      	beq.n	8001020 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 800101c:	f000 fb04 	bl	8001628 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001020:	4b2b      	ldr	r3, [pc, #172]	; (80010d0 <HAL_ADC_MspInit+0x120>)
 8001022:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001024:	4a2a      	ldr	r2, [pc, #168]	; (80010d0 <HAL_ADC_MspInit+0x120>)
 8001026:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800102a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800102c:	4b28      	ldr	r3, [pc, #160]	; (80010d0 <HAL_ADC_MspInit+0x120>)
 800102e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001030:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001034:	613b      	str	r3, [r7, #16]
 8001036:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001038:	4b25      	ldr	r3, [pc, #148]	; (80010d0 <HAL_ADC_MspInit+0x120>)
 800103a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800103c:	4a24      	ldr	r2, [pc, #144]	; (80010d0 <HAL_ADC_MspInit+0x120>)
 800103e:	f043 0304 	orr.w	r3, r3, #4
 8001042:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001044:	4b22      	ldr	r3, [pc, #136]	; (80010d0 <HAL_ADC_MspInit+0x120>)
 8001046:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001048:	f003 0304 	and.w	r3, r3, #4
 800104c:	60fb      	str	r3, [r7, #12]
 800104e:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    PC1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001050:	2303      	movs	r3, #3
 8001052:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001056:	230b      	movs	r3, #11
 8001058:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105c:	2300      	movs	r3, #0
 800105e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001062:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001066:	4619      	mov	r1, r3
 8001068:	481a      	ldr	r0, [pc, #104]	; (80010d4 <HAL_ADC_MspInit+0x124>)
 800106a:	f002 fc53 	bl	8003914 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800106e:	4b1a      	ldr	r3, [pc, #104]	; (80010d8 <HAL_ADC_MspInit+0x128>)
 8001070:	4a1a      	ldr	r2, [pc, #104]	; (80010dc <HAL_ADC_MspInit+0x12c>)
 8001072:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8001074:	4b18      	ldr	r3, [pc, #96]	; (80010d8 <HAL_ADC_MspInit+0x128>)
 8001076:	2200      	movs	r2, #0
 8001078:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800107a:	4b17      	ldr	r3, [pc, #92]	; (80010d8 <HAL_ADC_MspInit+0x128>)
 800107c:	2200      	movs	r2, #0
 800107e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001080:	4b15      	ldr	r3, [pc, #84]	; (80010d8 <HAL_ADC_MspInit+0x128>)
 8001082:	2200      	movs	r2, #0
 8001084:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001086:	4b14      	ldr	r3, [pc, #80]	; (80010d8 <HAL_ADC_MspInit+0x128>)
 8001088:	2280      	movs	r2, #128	; 0x80
 800108a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800108c:	4b12      	ldr	r3, [pc, #72]	; (80010d8 <HAL_ADC_MspInit+0x128>)
 800108e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001092:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001094:	4b10      	ldr	r3, [pc, #64]	; (80010d8 <HAL_ADC_MspInit+0x128>)
 8001096:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800109a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800109c:	4b0e      	ldr	r3, [pc, #56]	; (80010d8 <HAL_ADC_MspInit+0x128>)
 800109e:	2220      	movs	r2, #32
 80010a0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80010a2:	4b0d      	ldr	r3, [pc, #52]	; (80010d8 <HAL_ADC_MspInit+0x128>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80010a8:	480b      	ldr	r0, [pc, #44]	; (80010d8 <HAL_ADC_MspInit+0x128>)
 80010aa:	f002 fa3b 	bl	8003524 <HAL_DMA_Init>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d001      	beq.n	80010b8 <HAL_ADC_MspInit+0x108>
    {
      Error_Handler();
 80010b4:	f000 fab8 	bl	8001628 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	4a07      	ldr	r2, [pc, #28]	; (80010d8 <HAL_ADC_MspInit+0x128>)
 80010bc:	64da      	str	r2, [r3, #76]	; 0x4c
 80010be:	4a06      	ldr	r2, [pc, #24]	; (80010d8 <HAL_ADC_MspInit+0x128>)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80010c4:	bf00      	nop
 80010c6:	37b0      	adds	r7, #176	; 0xb0
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	50040000 	.word	0x50040000
 80010d0:	40021000 	.word	0x40021000
 80010d4:	48000800 	.word	0x48000800
 80010d8:	2000a280 	.word	0x2000a280
 80010dc:	40020008 	.word	0x40020008

080010e0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80010e6:	4b0c      	ldr	r3, [pc, #48]	; (8001118 <MX_DMA_Init+0x38>)
 80010e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010ea:	4a0b      	ldr	r2, [pc, #44]	; (8001118 <MX_DMA_Init+0x38>)
 80010ec:	f043 0301 	orr.w	r3, r3, #1
 80010f0:	6493      	str	r3, [r2, #72]	; 0x48
 80010f2:	4b09      	ldr	r3, [pc, #36]	; (8001118 <MX_DMA_Init+0x38>)
 80010f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010f6:	f003 0301 	and.w	r3, r3, #1
 80010fa:	607b      	str	r3, [r7, #4]
 80010fc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80010fe:	2200      	movs	r2, #0
 8001100:	2100      	movs	r1, #0
 8001102:	200b      	movs	r0, #11
 8001104:	f002 f9d7 	bl	80034b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001108:	200b      	movs	r0, #11
 800110a:	f002 f9f0 	bl	80034ee <HAL_NVIC_EnableIRQ>

}
 800110e:	bf00      	nop
 8001110:	3708      	adds	r7, #8
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	40021000 	.word	0x40021000

0800111c <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b088      	sub	sp, #32
 8001120:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001122:	f107 030c 	add.w	r3, r7, #12
 8001126:	2200      	movs	r2, #0
 8001128:	601a      	str	r2, [r3, #0]
 800112a:	605a      	str	r2, [r3, #4]
 800112c:	609a      	str	r2, [r3, #8]
 800112e:	60da      	str	r2, [r3, #12]
 8001130:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001132:	4b21      	ldr	r3, [pc, #132]	; (80011b8 <MX_GPIO_Init+0x9c>)
 8001134:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001136:	4a20      	ldr	r2, [pc, #128]	; (80011b8 <MX_GPIO_Init+0x9c>)
 8001138:	f043 0304 	orr.w	r3, r3, #4
 800113c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800113e:	4b1e      	ldr	r3, [pc, #120]	; (80011b8 <MX_GPIO_Init+0x9c>)
 8001140:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001142:	f003 0304 	and.w	r3, r3, #4
 8001146:	60bb      	str	r3, [r7, #8]
 8001148:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800114a:	4b1b      	ldr	r3, [pc, #108]	; (80011b8 <MX_GPIO_Init+0x9c>)
 800114c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800114e:	4a1a      	ldr	r2, [pc, #104]	; (80011b8 <MX_GPIO_Init+0x9c>)
 8001150:	f043 0301 	orr.w	r3, r3, #1
 8001154:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001156:	4b18      	ldr	r3, [pc, #96]	; (80011b8 <MX_GPIO_Init+0x9c>)
 8001158:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800115a:	f003 0301 	and.w	r3, r3, #1
 800115e:	607b      	str	r3, [r7, #4]
 8001160:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001162:	4b15      	ldr	r3, [pc, #84]	; (80011b8 <MX_GPIO_Init+0x9c>)
 8001164:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001166:	4a14      	ldr	r2, [pc, #80]	; (80011b8 <MX_GPIO_Init+0x9c>)
 8001168:	f043 0302 	orr.w	r3, r3, #2
 800116c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800116e:	4b12      	ldr	r3, [pc, #72]	; (80011b8 <MX_GPIO_Init+0x9c>)
 8001170:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001172:	f003 0302 	and.w	r3, r3, #2
 8001176:	603b      	str	r3, [r7, #0]
 8001178:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_RST_Pin|LCD_DC_Pin, GPIO_PIN_RESET);
 800117a:	2200      	movs	r2, #0
 800117c:	f640 0104 	movw	r1, #2052	; 0x804
 8001180:	480e      	ldr	r0, [pc, #56]	; (80011bc <MX_GPIO_Init+0xa0>)
 8001182:	f002 fd71 	bl	8003c68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8001186:	2201      	movs	r2, #1
 8001188:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800118c:	480b      	ldr	r0, [pc, #44]	; (80011bc <MX_GPIO_Init+0xa0>)
 800118e:	f002 fd6b 	bl	8003c68 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LCD_RST_Pin|LCD_DC_Pin|LCD_CS_Pin;
 8001192:	f641 0304 	movw	r3, #6148	; 0x1804
 8001196:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001198:	2301      	movs	r3, #1
 800119a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119c:	2300      	movs	r3, #0
 800119e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a0:	2300      	movs	r3, #0
 80011a2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011a4:	f107 030c 	add.w	r3, r7, #12
 80011a8:	4619      	mov	r1, r3
 80011aa:	4804      	ldr	r0, [pc, #16]	; (80011bc <MX_GPIO_Init+0xa0>)
 80011ac:	f002 fbb2 	bl	8003914 <HAL_GPIO_Init>

}
 80011b0:	bf00      	nop
 80011b2:	3720      	adds	r7, #32
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	40021000 	.word	0x40021000
 80011bc:	48000400 	.word	0x48000400

080011c0 <lcd_cmd>:

static uint16_t frame_buffer[LCD_WIDTH * LCD_HEIGHT];


static void lcd_cmd(uint8_t cmd)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	4603      	mov	r3, r0
 80011c8:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET);
 80011ca:	2200      	movs	r2, #0
 80011cc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011d0:	480c      	ldr	r0, [pc, #48]	; (8001204 <lcd_cmd+0x44>)
 80011d2:	f002 fd49 	bl	8003c68 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 80011d6:	2200      	movs	r2, #0
 80011d8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011dc:	4809      	ldr	r0, [pc, #36]	; (8001204 <lcd_cmd+0x44>)
 80011de:	f002 fd43 	bl	8003c68 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &cmd, 1, HAL_MAX_DELAY);
 80011e2:	1df9      	adds	r1, r7, #7
 80011e4:	f04f 33ff 	mov.w	r3, #4294967295
 80011e8:	2201      	movs	r2, #1
 80011ea:	4807      	ldr	r0, [pc, #28]	; (8001208 <lcd_cmd+0x48>)
 80011ec:	f004 f903 	bl	80053f6 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 80011f0:	2201      	movs	r2, #1
 80011f2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011f6:	4803      	ldr	r0, [pc, #12]	; (8001204 <lcd_cmd+0x44>)
 80011f8:	f002 fd36 	bl	8003c68 <HAL_GPIO_WritePin>
}
 80011fc:	bf00      	nop
 80011fe:	3708      	adds	r7, #8
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	48000400 	.word	0x48000400
 8001208:	2000a2c8 	.word	0x2000a2c8

0800120c <lcd_data>:

static void lcd_data(uint8_t data)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0
 8001212:	4603      	mov	r3, r0
 8001214:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 8001216:	2201      	movs	r2, #1
 8001218:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800121c:	480c      	ldr	r0, [pc, #48]	; (8001250 <lcd_data+0x44>)
 800121e:	f002 fd23 	bl	8003c68 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8001222:	2200      	movs	r2, #0
 8001224:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001228:	4809      	ldr	r0, [pc, #36]	; (8001250 <lcd_data+0x44>)
 800122a:	f002 fd1d 	bl	8003c68 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &data, 1, HAL_MAX_DELAY);
 800122e:	1df9      	adds	r1, r7, #7
 8001230:	f04f 33ff 	mov.w	r3, #4294967295
 8001234:	2201      	movs	r2, #1
 8001236:	4807      	ldr	r0, [pc, #28]	; (8001254 <lcd_data+0x48>)
 8001238:	f004 f8dd 	bl	80053f6 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 800123c:	2201      	movs	r2, #1
 800123e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001242:	4803      	ldr	r0, [pc, #12]	; (8001250 <lcd_data+0x44>)
 8001244:	f002 fd10 	bl	8003c68 <HAL_GPIO_WritePin>
}
 8001248:	bf00      	nop
 800124a:	3708      	adds	r7, #8
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	48000400 	.word	0x48000400
 8001254:	2000a2c8 	.word	0x2000a2c8

08001258 <lcd_send>:

#define CMD(x)			((x) | 0x100)

static void lcd_send(uint16_t value)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b082      	sub	sp, #8
 800125c:	af00      	add	r7, sp, #0
 800125e:	4603      	mov	r3, r0
 8001260:	80fb      	strh	r3, [r7, #6]
	if (value & 0x100) {
 8001262:	88fb      	ldrh	r3, [r7, #6]
 8001264:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001268:	2b00      	cmp	r3, #0
 800126a:	d005      	beq.n	8001278 <lcd_send+0x20>
		lcd_cmd(value);
 800126c:	88fb      	ldrh	r3, [r7, #6]
 800126e:	b2db      	uxtb	r3, r3
 8001270:	4618      	mov	r0, r3
 8001272:	f7ff ffa5 	bl	80011c0 <lcd_cmd>
	} else {
		lcd_data(value);
	}
}
 8001276:	e004      	b.n	8001282 <lcd_send+0x2a>
		lcd_data(value);
 8001278:	88fb      	ldrh	r3, [r7, #6]
 800127a:	b2db      	uxtb	r3, r3
 800127c:	4618      	mov	r0, r3
 800127e:	f7ff ffc5 	bl	800120c <lcd_data>
}
 8001282:	bf00      	nop
 8001284:	3708      	adds	r7, #8
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
	...

0800128c <lcd_init>:
  CMD(ST7735S_COLMOD), 0x05,
  CMD(ST7735S_MADCTL), 0xa0,
};

void lcd_init(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af00      	add	r7, sp, #0
  int i;

  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_RESET);
 8001292:	2200      	movs	r2, #0
 8001294:	2104      	movs	r1, #4
 8001296:	4817      	ldr	r0, [pc, #92]	; (80012f4 <lcd_init+0x68>)
 8001298:	f002 fce6 	bl	8003c68 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 800129c:	2064      	movs	r0, #100	; 0x64
 800129e:	f000 fd37 	bl	8001d10 <HAL_Delay>
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_SET);
 80012a2:	2201      	movs	r2, #1
 80012a4:	2104      	movs	r1, #4
 80012a6:	4813      	ldr	r0, [pc, #76]	; (80012f4 <lcd_init+0x68>)
 80012a8:	f002 fcde 	bl	8003c68 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 80012ac:	2064      	movs	r0, #100	; 0x64
 80012ae:	f000 fd2f 	bl	8001d10 <HAL_Delay>

  for (i = 0; i < sizeof(init_table) / sizeof(uint16_t); i++) {
 80012b2:	2300      	movs	r3, #0
 80012b4:	607b      	str	r3, [r7, #4]
 80012b6:	e009      	b.n	80012cc <lcd_init+0x40>
    lcd_send(init_table[i]);
 80012b8:	4a0f      	ldr	r2, [pc, #60]	; (80012f8 <lcd_init+0x6c>)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80012c0:	4618      	mov	r0, r3
 80012c2:	f7ff ffc9 	bl	8001258 <lcd_send>
  for (i = 0; i < sizeof(init_table) / sizeof(uint16_t); i++) {
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	3301      	adds	r3, #1
 80012ca:	607b      	str	r3, [r7, #4]
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	2b4b      	cmp	r3, #75	; 0x4b
 80012d0:	d9f2      	bls.n	80012b8 <lcd_init+0x2c>
  }

  HAL_Delay(200);
 80012d2:	20c8      	movs	r0, #200	; 0xc8
 80012d4:	f000 fd1c 	bl	8001d10 <HAL_Delay>

  lcd_cmd(ST7735S_SLPOUT);
 80012d8:	2011      	movs	r0, #17
 80012da:	f7ff ff71 	bl	80011c0 <lcd_cmd>
  HAL_Delay(120);
 80012de:	2078      	movs	r0, #120	; 0x78
 80012e0:	f000 fd16 	bl	8001d10 <HAL_Delay>

  lcd_cmd(ST7735S_DISPON);
 80012e4:	2029      	movs	r0, #41	; 0x29
 80012e6:	f7ff ff6b 	bl	80011c0 <lcd_cmd>
}
 80012ea:	bf00      	nop
 80012ec:	3708      	adds	r7, #8
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	48000400 	.word	0x48000400
 80012f8:	0800a174 	.word	0x0800a174

080012fc <lcd_data16>:

static void lcd_data16(uint16_t value)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0
 8001302:	4603      	mov	r3, r0
 8001304:	80fb      	strh	r3, [r7, #6]
	lcd_data(value >> 8);
 8001306:	88fb      	ldrh	r3, [r7, #6]
 8001308:	0a1b      	lsrs	r3, r3, #8
 800130a:	b29b      	uxth	r3, r3
 800130c:	b2db      	uxtb	r3, r3
 800130e:	4618      	mov	r0, r3
 8001310:	f7ff ff7c 	bl	800120c <lcd_data>
	lcd_data(value);
 8001314:	88fb      	ldrh	r3, [r7, #6]
 8001316:	b2db      	uxtb	r3, r3
 8001318:	4618      	mov	r0, r3
 800131a:	f7ff ff77 	bl	800120c <lcd_data>
}
 800131e:	bf00      	nop
 8001320:	3708      	adds	r7, #8
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}

08001326 <lcd_set_window>:

#define LCD_OFFSET_X  1
#define LCD_OFFSET_Y  2

static void lcd_set_window(int x, int y, int width, int height)
{
 8001326:	b580      	push	{r7, lr}
 8001328:	b084      	sub	sp, #16
 800132a:	af00      	add	r7, sp, #0
 800132c:	60f8      	str	r0, [r7, #12]
 800132e:	60b9      	str	r1, [r7, #8]
 8001330:	607a      	str	r2, [r7, #4]
 8001332:	603b      	str	r3, [r7, #0]
  lcd_cmd(ST7735S_CASET);
 8001334:	202a      	movs	r0, #42	; 0x2a
 8001336:	f7ff ff43 	bl	80011c0 <lcd_cmd>
  lcd_data16(LCD_OFFSET_X + x);
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	b29b      	uxth	r3, r3
 800133e:	3301      	adds	r3, #1
 8001340:	b29b      	uxth	r3, r3
 8001342:	4618      	mov	r0, r3
 8001344:	f7ff ffda 	bl	80012fc <lcd_data16>
  lcd_data16(LCD_OFFSET_X + x + width - 1);
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	b29a      	uxth	r2, r3
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	b29b      	uxth	r3, r3
 8001350:	4413      	add	r3, r2
 8001352:	b29b      	uxth	r3, r3
 8001354:	4618      	mov	r0, r3
 8001356:	f7ff ffd1 	bl	80012fc <lcd_data16>

  lcd_cmd(ST7735S_RASET);
 800135a:	202b      	movs	r0, #43	; 0x2b
 800135c:	f7ff ff30 	bl	80011c0 <lcd_cmd>
  lcd_data16(LCD_OFFSET_Y + y);
 8001360:	68bb      	ldr	r3, [r7, #8]
 8001362:	b29b      	uxth	r3, r3
 8001364:	3302      	adds	r3, #2
 8001366:	b29b      	uxth	r3, r3
 8001368:	4618      	mov	r0, r3
 800136a:	f7ff ffc7 	bl	80012fc <lcd_data16>
  lcd_data16(LCD_OFFSET_Y + y + height- 1);
 800136e:	68bb      	ldr	r3, [r7, #8]
 8001370:	b29a      	uxth	r2, r3
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	b29b      	uxth	r3, r3
 8001376:	4413      	add	r3, r2
 8001378:	b29b      	uxth	r3, r3
 800137a:	3301      	adds	r3, #1
 800137c:	b29b      	uxth	r3, r3
 800137e:	4618      	mov	r0, r3
 8001380:	f7ff ffbc 	bl	80012fc <lcd_data16>
}
 8001384:	bf00      	nop
 8001386:	3710      	adds	r7, #16
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}

0800138c <lcd_put_pixel>:

void lcd_put_pixel(int x, int y, uint16_t color)
{
 800138c:	b480      	push	{r7}
 800138e:	b085      	sub	sp, #20
 8001390:	af00      	add	r7, sp, #0
 8001392:	60f8      	str	r0, [r7, #12]
 8001394:	60b9      	str	r1, [r7, #8]
 8001396:	4613      	mov	r3, r2
 8001398:	80fb      	strh	r3, [r7, #6]
	frame_buffer[x + y * LCD_WIDTH] = color;
 800139a:	68ba      	ldr	r2, [r7, #8]
 800139c:	4613      	mov	r3, r2
 800139e:	009b      	lsls	r3, r3, #2
 80013a0:	4413      	add	r3, r2
 80013a2:	015b      	lsls	r3, r3, #5
 80013a4:	461a      	mov	r2, r3
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	4413      	add	r3, r2
 80013aa:	4905      	ldr	r1, [pc, #20]	; (80013c0 <lcd_put_pixel+0x34>)
 80013ac:	88fa      	ldrh	r2, [r7, #6]
 80013ae:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 80013b2:	bf00      	nop
 80013b4:	3714      	adds	r7, #20
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr
 80013be:	bf00      	nop
 80013c0:	20000208 	.word	0x20000208

080013c4 <lcd_copy>:

void lcd_copy(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
	lcd_set_window(0, 0, LCD_WIDTH, LCD_HEIGHT);
 80013c8:	2380      	movs	r3, #128	; 0x80
 80013ca:	22a0      	movs	r2, #160	; 0xa0
 80013cc:	2100      	movs	r1, #0
 80013ce:	2000      	movs	r0, #0
 80013d0:	f7ff ffa9 	bl	8001326 <lcd_set_window>
	lcd_cmd(ST7735S_RAMWR);
 80013d4:	202c      	movs	r0, #44	; 0x2c
 80013d6:	f7ff fef3 	bl	80011c0 <lcd_cmd>
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 80013da:	2201      	movs	r2, #1
 80013dc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013e0:	480c      	ldr	r0, [pc, #48]	; (8001414 <lcd_copy+0x50>)
 80013e2:	f002 fc41 	bl	8003c68 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 80013e6:	2200      	movs	r2, #0
 80013e8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013ec:	4809      	ldr	r0, [pc, #36]	; (8001414 <lcd_copy+0x50>)
 80013ee:	f002 fc3b 	bl	8003c68 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint8_t*)frame_buffer, sizeof(frame_buffer), HAL_MAX_DELAY);
 80013f2:	f04f 33ff 	mov.w	r3, #4294967295
 80013f6:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 80013fa:	4907      	ldr	r1, [pc, #28]	; (8001418 <lcd_copy+0x54>)
 80013fc:	4807      	ldr	r0, [pc, #28]	; (800141c <lcd_copy+0x58>)
 80013fe:	f003 fffa 	bl	80053f6 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8001402:	2201      	movs	r2, #1
 8001404:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001408:	4802      	ldr	r0, [pc, #8]	; (8001414 <lcd_copy+0x50>)
 800140a:	f002 fc2d 	bl	8003c68 <HAL_GPIO_WritePin>
}
 800140e:	bf00      	nop
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	48000400 	.word	0x48000400
 8001418:	20000208 	.word	0x20000208
 800141c:	2000a2c8 	.word	0x2000a2c8

08001420 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b082      	sub	sp, #8
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  if (ch == '\n') {
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2b0a      	cmp	r3, #10
 800142c:	d102      	bne.n	8001434 <__io_putchar+0x14>
    __io_putchar('\r');
 800142e:	200d      	movs	r0, #13
 8001430:	f7ff fff6 	bl	8001420 <__io_putchar>
  }

  HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8001434:	1d39      	adds	r1, r7, #4
 8001436:	f04f 33ff 	mov.w	r3, #4294967295
 800143a:	2201      	movs	r2, #1
 800143c:	4803      	ldr	r0, [pc, #12]	; (800144c <__io_putchar+0x2c>)
 800143e:	f004 fafb 	bl	8005a38 <HAL_UART_Transmit>

  return 1;
 8001442:	2301      	movs	r3, #1
}
 8001444:	4618      	mov	r0, r3
 8001446:	3708      	adds	r7, #8
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	2000a3b0 	.word	0x2000a3b0

08001450 <calculateDirection>:
uint16_t south=0;
uint16_t east = 4000;
uint16_t west=0;

uint8_t calculateDirection(uint32_t measurement_y, uint32_t measurement_x)
{
 8001450:	b480      	push	{r7}
 8001452:	b083      	sub	sp, #12
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
 8001458:	6039      	str	r1, [r7, #0]
	if(abs(measurement_y-north) < eps)
 800145a:	4b1f      	ldr	r3, [pc, #124]	; (80014d8 <calculateDirection+0x88>)
 800145c:	881b      	ldrh	r3, [r3, #0]
 800145e:	461a      	mov	r2, r3
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	1a9b      	subs	r3, r3, r2
 8001464:	2b00      	cmp	r3, #0
 8001466:	bfb8      	it	lt
 8001468:	425b      	neglt	r3, r3
 800146a:	4a1c      	ldr	r2, [pc, #112]	; (80014dc <calculateDirection+0x8c>)
 800146c:	8812      	ldrh	r2, [r2, #0]
 800146e:	4293      	cmp	r3, r2
 8001470:	da01      	bge.n	8001476 <calculateDirection+0x26>
		return 1;
 8001472:	2301      	movs	r3, #1
 8001474:	e02a      	b.n	80014cc <calculateDirection+0x7c>
	else if(abs(measurement_y-south) < eps)
 8001476:	4b1a      	ldr	r3, [pc, #104]	; (80014e0 <calculateDirection+0x90>)
 8001478:	881b      	ldrh	r3, [r3, #0]
 800147a:	461a      	mov	r2, r3
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	1a9b      	subs	r3, r3, r2
 8001480:	2b00      	cmp	r3, #0
 8001482:	bfb8      	it	lt
 8001484:	425b      	neglt	r3, r3
 8001486:	4a15      	ldr	r2, [pc, #84]	; (80014dc <calculateDirection+0x8c>)
 8001488:	8812      	ldrh	r2, [r2, #0]
 800148a:	4293      	cmp	r3, r2
 800148c:	da01      	bge.n	8001492 <calculateDirection+0x42>
		return 3;
 800148e:	2303      	movs	r3, #3
 8001490:	e01c      	b.n	80014cc <calculateDirection+0x7c>
	else if(abs(measurement_x-west) < eps)
 8001492:	4b14      	ldr	r3, [pc, #80]	; (80014e4 <calculateDirection+0x94>)
 8001494:	881b      	ldrh	r3, [r3, #0]
 8001496:	461a      	mov	r2, r3
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	1a9b      	subs	r3, r3, r2
 800149c:	2b00      	cmp	r3, #0
 800149e:	bfb8      	it	lt
 80014a0:	425b      	neglt	r3, r3
 80014a2:	4a0e      	ldr	r2, [pc, #56]	; (80014dc <calculateDirection+0x8c>)
 80014a4:	8812      	ldrh	r2, [r2, #0]
 80014a6:	4293      	cmp	r3, r2
 80014a8:	da01      	bge.n	80014ae <calculateDirection+0x5e>
		return 4;
 80014aa:	2304      	movs	r3, #4
 80014ac:	e00e      	b.n	80014cc <calculateDirection+0x7c>
	else if(abs(measurement_x-east) < eps)
 80014ae:	4b0e      	ldr	r3, [pc, #56]	; (80014e8 <calculateDirection+0x98>)
 80014b0:	881b      	ldrh	r3, [r3, #0]
 80014b2:	461a      	mov	r2, r3
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	1a9b      	subs	r3, r3, r2
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	bfb8      	it	lt
 80014bc:	425b      	neglt	r3, r3
 80014be:	4a07      	ldr	r2, [pc, #28]	; (80014dc <calculateDirection+0x8c>)
 80014c0:	8812      	ldrh	r2, [r2, #0]
 80014c2:	4293      	cmp	r3, r2
 80014c4:	da01      	bge.n	80014ca <calculateDirection+0x7a>
		return 2;
 80014c6:	2302      	movs	r3, #2
 80014c8:	e000      	b.n	80014cc <calculateDirection+0x7c>
	else return 0;
 80014ca:	2300      	movs	r3, #0
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	370c      	adds	r7, #12
 80014d0:	46bd      	mov	sp, r7
 80014d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d6:	4770      	bx	lr
 80014d8:	20000002 	.word	0x20000002
 80014dc:	20000000 	.word	0x20000000
 80014e0:	2000a208 	.word	0x2000a208
 80014e4:	2000a20a 	.word	0x2000a20a
 80014e8:	20000004 	.word	0x20000004

080014ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b096      	sub	sp, #88	; 0x58
 80014f0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014f2:	f000 fb98 	bl	8001c26 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014f6:	f000 f845 	bl	8001584 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014fa:	f7ff fe0f 	bl	800111c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80014fe:	f000 fa99 	bl	8001a34 <MX_USART2_UART_Init>
  MX_UART4_Init();
 8001502:	f000 fa67 	bl	80019d4 <MX_UART4_Init>
  MX_DMA_Init();
 8001506:	f7ff fdeb 	bl	80010e0 <MX_DMA_Init>
  MX_ADC1_Init();
 800150a:	f7ff fcc9 	bl	8000ea0 <MX_ADC1_Init>
  MX_SPI2_Init();
 800150e:	f000 f891 	bl	8001634 <MX_SPI2_Init>
   * value array stands for measurements from joystick
   * value[0] - measurement from Y-axis
   * value[1] - measurement from X-axis
   */
  volatile static uint16_t value[2];
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8001512:	217f      	movs	r1, #127	; 0x7f
 8001514:	4816      	ldr	r0, [pc, #88]	; (8001570 <main+0x84>)
 8001516:	f001 fde3 	bl	80030e0 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)value, 2);
 800151a:	2202      	movs	r2, #2
 800151c:	4915      	ldr	r1, [pc, #84]	; (8001574 <main+0x88>)
 800151e:	4814      	ldr	r0, [pc, #80]	; (8001570 <main+0x84>)
 8001520:	f000 ff6c 	bl	80023fc <HAL_ADC_Start_DMA>

//  wchar_t text_direction[15];
  lcd_init();
 8001524:	f7ff feb2 	bl	800128c <lcd_init>
  {
//	  printf("Dir: %d\n", calculateDirection(value[0],value[1]));
//	  sprintf(text_direction,"Direction: %d",calculateDirection(value[0],value[1]));
//	  sprintf(text_direction,"Direction:%d",1);
	  wchar_t  ws[20];
	  swprintf(ws, 20, L"%hs%d", "Direction: ",calculateDirection(value[0],value[1]));
 8001528:	4b12      	ldr	r3, [pc, #72]	; (8001574 <main+0x88>)
 800152a:	881b      	ldrh	r3, [r3, #0]
 800152c:	b29b      	uxth	r3, r3
 800152e:	461a      	mov	r2, r3
 8001530:	4b10      	ldr	r3, [pc, #64]	; (8001574 <main+0x88>)
 8001532:	885b      	ldrh	r3, [r3, #2]
 8001534:	b29b      	uxth	r3, r3
 8001536:	4619      	mov	r1, r3
 8001538:	4610      	mov	r0, r2
 800153a:	f7ff ff89 	bl	8001450 <calculateDirection>
 800153e:	4603      	mov	r3, r0
 8001540:	4638      	mov	r0, r7
 8001542:	9300      	str	r3, [sp, #0]
 8001544:	4b0c      	ldr	r3, [pc, #48]	; (8001578 <main+0x8c>)
 8001546:	4a0d      	ldr	r2, [pc, #52]	; (800157c <main+0x90>)
 8001548:	2114      	movs	r1, #20
 800154a:	f006 f995 	bl	8007878 <swprintf>
	  hagl_put_text(ws,30,30,YELLOW,font6x9);
 800154e:	4638      	mov	r0, r7
 8001550:	4b0b      	ldr	r3, [pc, #44]	; (8001580 <main+0x94>)
 8001552:	9300      	str	r3, [sp, #0]
 8001554:	f24e 03ff 	movw	r3, #57599	; 0xe0ff
 8001558:	221e      	movs	r2, #30
 800155a:	211e      	movs	r1, #30
 800155c:	f005 f93c 	bl	80067d8 <hagl_put_text>
	  lcd_copy();
 8001560:	f7ff ff30 	bl	80013c4 <lcd_copy>
	  HAL_Delay(500);
 8001564:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001568:	f000 fbd2 	bl	8001d10 <HAL_Delay>
  {
 800156c:	e7dc      	b.n	8001528 <main+0x3c>
 800156e:	bf00      	nop
 8001570:	2000a21c 	.word	0x2000a21c
 8001574:	2000a20c 	.word	0x2000a20c
 8001578:	0800a150 	.word	0x0800a150
 800157c:	0800a15c 	.word	0x0800a15c
 8001580:	0800a20c 	.word	0x0800a20c

08001584 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b096      	sub	sp, #88	; 0x58
 8001588:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800158a:	f107 0314 	add.w	r3, r7, #20
 800158e:	2244      	movs	r2, #68	; 0x44
 8001590:	2100      	movs	r1, #0
 8001592:	4618      	mov	r0, r3
 8001594:	f005 fc00 	bl	8006d98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001598:	463b      	mov	r3, r7
 800159a:	2200      	movs	r2, #0
 800159c:	601a      	str	r2, [r3, #0]
 800159e:	605a      	str	r2, [r3, #4]
 80015a0:	609a      	str	r2, [r3, #8]
 80015a2:	60da      	str	r2, [r3, #12]
 80015a4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80015a6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80015aa:	f002 fb83 	bl	8003cb4 <HAL_PWREx_ControlVoltageScaling>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d001      	beq.n	80015b8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80015b4:	f000 f838 	bl	8001628 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80015b8:	2310      	movs	r3, #16
 80015ba:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80015bc:	2301      	movs	r3, #1
 80015be:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80015c0:	2300      	movs	r3, #0
 80015c2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80015c4:	2360      	movs	r3, #96	; 0x60
 80015c6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015c8:	2302      	movs	r3, #2
 80015ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80015cc:	2301      	movs	r3, #1
 80015ce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80015d0:	2301      	movs	r3, #1
 80015d2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80015d4:	2328      	movs	r3, #40	; 0x28
 80015d6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80015d8:	2307      	movs	r3, #7
 80015da:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80015dc:	2302      	movs	r3, #2
 80015de:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80015e0:	2302      	movs	r3, #2
 80015e2:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015e4:	f107 0314 	add.w	r3, r7, #20
 80015e8:	4618      	mov	r0, r3
 80015ea:	f002 fbb9 	bl	8003d60 <HAL_RCC_OscConfig>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d001      	beq.n	80015f8 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80015f4:	f000 f818 	bl	8001628 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015f8:	230f      	movs	r3, #15
 80015fa:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015fc:	2303      	movs	r3, #3
 80015fe:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001600:	2300      	movs	r3, #0
 8001602:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001604:	2300      	movs	r3, #0
 8001606:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001608:	2300      	movs	r3, #0
 800160a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800160c:	463b      	mov	r3, r7
 800160e:	2104      	movs	r1, #4
 8001610:	4618      	mov	r0, r3
 8001612:	f002 ff8b 	bl	800452c <HAL_RCC_ClockConfig>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	d001      	beq.n	8001620 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 800161c:	f000 f804 	bl	8001628 <Error_Handler>
  }
}
 8001620:	bf00      	nop
 8001622:	3758      	adds	r7, #88	; 0x58
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}

08001628 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800162c:	b672      	cpsid	i
}
 800162e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001630:	e7fe      	b.n	8001630 <Error_Handler+0x8>
	...

08001634 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001638:	4b1b      	ldr	r3, [pc, #108]	; (80016a8 <MX_SPI2_Init+0x74>)
 800163a:	4a1c      	ldr	r2, [pc, #112]	; (80016ac <MX_SPI2_Init+0x78>)
 800163c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800163e:	4b1a      	ldr	r3, [pc, #104]	; (80016a8 <MX_SPI2_Init+0x74>)
 8001640:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001644:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001646:	4b18      	ldr	r3, [pc, #96]	; (80016a8 <MX_SPI2_Init+0x74>)
 8001648:	2200      	movs	r2, #0
 800164a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800164c:	4b16      	ldr	r3, [pc, #88]	; (80016a8 <MX_SPI2_Init+0x74>)
 800164e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001652:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001654:	4b14      	ldr	r3, [pc, #80]	; (80016a8 <MX_SPI2_Init+0x74>)
 8001656:	2200      	movs	r2, #0
 8001658:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800165a:	4b13      	ldr	r3, [pc, #76]	; (80016a8 <MX_SPI2_Init+0x74>)
 800165c:	2200      	movs	r2, #0
 800165e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001660:	4b11      	ldr	r3, [pc, #68]	; (80016a8 <MX_SPI2_Init+0x74>)
 8001662:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001666:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001668:	4b0f      	ldr	r3, [pc, #60]	; (80016a8 <MX_SPI2_Init+0x74>)
 800166a:	2210      	movs	r2, #16
 800166c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800166e:	4b0e      	ldr	r3, [pc, #56]	; (80016a8 <MX_SPI2_Init+0x74>)
 8001670:	2200      	movs	r2, #0
 8001672:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001674:	4b0c      	ldr	r3, [pc, #48]	; (80016a8 <MX_SPI2_Init+0x74>)
 8001676:	2200      	movs	r2, #0
 8001678:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800167a:	4b0b      	ldr	r3, [pc, #44]	; (80016a8 <MX_SPI2_Init+0x74>)
 800167c:	2200      	movs	r2, #0
 800167e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001680:	4b09      	ldr	r3, [pc, #36]	; (80016a8 <MX_SPI2_Init+0x74>)
 8001682:	2207      	movs	r2, #7
 8001684:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001686:	4b08      	ldr	r3, [pc, #32]	; (80016a8 <MX_SPI2_Init+0x74>)
 8001688:	2200      	movs	r2, #0
 800168a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800168c:	4b06      	ldr	r3, [pc, #24]	; (80016a8 <MX_SPI2_Init+0x74>)
 800168e:	2200      	movs	r2, #0
 8001690:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001692:	4805      	ldr	r0, [pc, #20]	; (80016a8 <MX_SPI2_Init+0x74>)
 8001694:	f003 fe0c 	bl	80052b0 <HAL_SPI_Init>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d001      	beq.n	80016a2 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800169e:	f7ff ffc3 	bl	8001628 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80016a2:	bf00      	nop
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	2000a2c8 	.word	0x2000a2c8
 80016ac:	40003800 	.word	0x40003800

080016b0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b08a      	sub	sp, #40	; 0x28
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016b8:	f107 0314 	add.w	r3, r7, #20
 80016bc:	2200      	movs	r2, #0
 80016be:	601a      	str	r2, [r3, #0]
 80016c0:	605a      	str	r2, [r3, #4]
 80016c2:	609a      	str	r2, [r3, #8]
 80016c4:	60da      	str	r2, [r3, #12]
 80016c6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a25      	ldr	r2, [pc, #148]	; (8001764 <HAL_SPI_MspInit+0xb4>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d144      	bne.n	800175c <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80016d2:	4b25      	ldr	r3, [pc, #148]	; (8001768 <HAL_SPI_MspInit+0xb8>)
 80016d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016d6:	4a24      	ldr	r2, [pc, #144]	; (8001768 <HAL_SPI_MspInit+0xb8>)
 80016d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016dc:	6593      	str	r3, [r2, #88]	; 0x58
 80016de:	4b22      	ldr	r3, [pc, #136]	; (8001768 <HAL_SPI_MspInit+0xb8>)
 80016e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016e6:	613b      	str	r3, [r7, #16]
 80016e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016ea:	4b1f      	ldr	r3, [pc, #124]	; (8001768 <HAL_SPI_MspInit+0xb8>)
 80016ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ee:	4a1e      	ldr	r2, [pc, #120]	; (8001768 <HAL_SPI_MspInit+0xb8>)
 80016f0:	f043 0304 	orr.w	r3, r3, #4
 80016f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016f6:	4b1c      	ldr	r3, [pc, #112]	; (8001768 <HAL_SPI_MspInit+0xb8>)
 80016f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016fa:	f003 0304 	and.w	r3, r3, #4
 80016fe:	60fb      	str	r3, [r7, #12]
 8001700:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001702:	4b19      	ldr	r3, [pc, #100]	; (8001768 <HAL_SPI_MspInit+0xb8>)
 8001704:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001706:	4a18      	ldr	r2, [pc, #96]	; (8001768 <HAL_SPI_MspInit+0xb8>)
 8001708:	f043 0302 	orr.w	r3, r3, #2
 800170c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800170e:	4b16      	ldr	r3, [pc, #88]	; (8001768 <HAL_SPI_MspInit+0xb8>)
 8001710:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001712:	f003 0302 	and.w	r3, r3, #2
 8001716:	60bb      	str	r3, [r7, #8]
 8001718:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800171a:	2308      	movs	r3, #8
 800171c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800171e:	2302      	movs	r3, #2
 8001720:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001722:	2300      	movs	r3, #0
 8001724:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001726:	2303      	movs	r3, #3
 8001728:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800172a:	2305      	movs	r3, #5
 800172c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800172e:	f107 0314 	add.w	r3, r7, #20
 8001732:	4619      	mov	r1, r3
 8001734:	480d      	ldr	r0, [pc, #52]	; (800176c <HAL_SPI_MspInit+0xbc>)
 8001736:	f002 f8ed 	bl	8003914 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800173a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800173e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001740:	2302      	movs	r3, #2
 8001742:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001744:	2300      	movs	r3, #0
 8001746:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001748:	2303      	movs	r3, #3
 800174a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800174c:	2305      	movs	r3, #5
 800174e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001750:	f107 0314 	add.w	r3, r7, #20
 8001754:	4619      	mov	r1, r3
 8001756:	4806      	ldr	r0, [pc, #24]	; (8001770 <HAL_SPI_MspInit+0xc0>)
 8001758:	f002 f8dc 	bl	8003914 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 800175c:	bf00      	nop
 800175e:	3728      	adds	r7, #40	; 0x28
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}
 8001764:	40003800 	.word	0x40003800
 8001768:	40021000 	.word	0x40021000
 800176c:	48000800 	.word	0x48000800
 8001770:	48000400 	.word	0x48000400

08001774 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001774:	b480      	push	{r7}
 8001776:	b083      	sub	sp, #12
 8001778:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800177a:	4b0f      	ldr	r3, [pc, #60]	; (80017b8 <HAL_MspInit+0x44>)
 800177c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800177e:	4a0e      	ldr	r2, [pc, #56]	; (80017b8 <HAL_MspInit+0x44>)
 8001780:	f043 0301 	orr.w	r3, r3, #1
 8001784:	6613      	str	r3, [r2, #96]	; 0x60
 8001786:	4b0c      	ldr	r3, [pc, #48]	; (80017b8 <HAL_MspInit+0x44>)
 8001788:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800178a:	f003 0301 	and.w	r3, r3, #1
 800178e:	607b      	str	r3, [r7, #4]
 8001790:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001792:	4b09      	ldr	r3, [pc, #36]	; (80017b8 <HAL_MspInit+0x44>)
 8001794:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001796:	4a08      	ldr	r2, [pc, #32]	; (80017b8 <HAL_MspInit+0x44>)
 8001798:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800179c:	6593      	str	r3, [r2, #88]	; 0x58
 800179e:	4b06      	ldr	r3, [pc, #24]	; (80017b8 <HAL_MspInit+0x44>)
 80017a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017a6:	603b      	str	r3, [r7, #0]
 80017a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017aa:	bf00      	nop
 80017ac:	370c      	adds	r7, #12
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr
 80017b6:	bf00      	nop
 80017b8:	40021000 	.word	0x40021000

080017bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017c0:	e7fe      	b.n	80017c0 <NMI_Handler+0x4>

080017c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017c2:	b480      	push	{r7}
 80017c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017c6:	e7fe      	b.n	80017c6 <HardFault_Handler+0x4>

080017c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017cc:	e7fe      	b.n	80017cc <MemManage_Handler+0x4>

080017ce <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017ce:	b480      	push	{r7}
 80017d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017d2:	e7fe      	b.n	80017d2 <BusFault_Handler+0x4>

080017d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017d8:	e7fe      	b.n	80017d8 <UsageFault_Handler+0x4>

080017da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017da:	b480      	push	{r7}
 80017dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017de:	bf00      	nop
 80017e0:	46bd      	mov	sp, r7
 80017e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e6:	4770      	bx	lr

080017e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017ec:	bf00      	nop
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr

080017f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017f6:	b480      	push	{r7}
 80017f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017fa:	bf00      	nop
 80017fc:	46bd      	mov	sp, r7
 80017fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001802:	4770      	bx	lr

08001804 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001808:	f000 fa62 	bl	8001cd0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800180c:	bf00      	nop
 800180e:	bd80      	pop	{r7, pc}

08001810 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001814:	4802      	ldr	r0, [pc, #8]	; (8001820 <DMA1_Channel1_IRQHandler+0x10>)
 8001816:	f001 ff9d 	bl	8003754 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800181a:	bf00      	nop
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	2000a280 	.word	0x2000a280

08001824 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001824:	b480      	push	{r7}
 8001826:	af00      	add	r7, sp, #0
	return 1;
 8001828:	2301      	movs	r3, #1
}
 800182a:	4618      	mov	r0, r3
 800182c:	46bd      	mov	sp, r7
 800182e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001832:	4770      	bx	lr

08001834 <_kill>:

int _kill(int pid, int sig)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b082      	sub	sp, #8
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
 800183c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800183e:	f005 f853 	bl	80068e8 <__errno>
 8001842:	4603      	mov	r3, r0
 8001844:	2216      	movs	r2, #22
 8001846:	601a      	str	r2, [r3, #0]
	return -1;
 8001848:	f04f 33ff 	mov.w	r3, #4294967295
}
 800184c:	4618      	mov	r0, r3
 800184e:	3708      	adds	r7, #8
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}

08001854 <_exit>:

void _exit (int status)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b082      	sub	sp, #8
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800185c:	f04f 31ff 	mov.w	r1, #4294967295
 8001860:	6878      	ldr	r0, [r7, #4]
 8001862:	f7ff ffe7 	bl	8001834 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001866:	e7fe      	b.n	8001866 <_exit+0x12>

08001868 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b086      	sub	sp, #24
 800186c:	af00      	add	r7, sp, #0
 800186e:	60f8      	str	r0, [r7, #12]
 8001870:	60b9      	str	r1, [r7, #8]
 8001872:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001874:	2300      	movs	r3, #0
 8001876:	617b      	str	r3, [r7, #20]
 8001878:	e00a      	b.n	8001890 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800187a:	f3af 8000 	nop.w
 800187e:	4601      	mov	r1, r0
 8001880:	68bb      	ldr	r3, [r7, #8]
 8001882:	1c5a      	adds	r2, r3, #1
 8001884:	60ba      	str	r2, [r7, #8]
 8001886:	b2ca      	uxtb	r2, r1
 8001888:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	3301      	adds	r3, #1
 800188e:	617b      	str	r3, [r7, #20]
 8001890:	697a      	ldr	r2, [r7, #20]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	429a      	cmp	r2, r3
 8001896:	dbf0      	blt.n	800187a <_read+0x12>
	}

return len;
 8001898:	687b      	ldr	r3, [r7, #4]
}
 800189a:	4618      	mov	r0, r3
 800189c:	3718      	adds	r7, #24
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}

080018a2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80018a2:	b580      	push	{r7, lr}
 80018a4:	b086      	sub	sp, #24
 80018a6:	af00      	add	r7, sp, #0
 80018a8:	60f8      	str	r0, [r7, #12]
 80018aa:	60b9      	str	r1, [r7, #8]
 80018ac:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018ae:	2300      	movs	r3, #0
 80018b0:	617b      	str	r3, [r7, #20]
 80018b2:	e009      	b.n	80018c8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80018b4:	68bb      	ldr	r3, [r7, #8]
 80018b6:	1c5a      	adds	r2, r3, #1
 80018b8:	60ba      	str	r2, [r7, #8]
 80018ba:	781b      	ldrb	r3, [r3, #0]
 80018bc:	4618      	mov	r0, r3
 80018be:	f7ff fdaf 	bl	8001420 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	3301      	adds	r3, #1
 80018c6:	617b      	str	r3, [r7, #20]
 80018c8:	697a      	ldr	r2, [r7, #20]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	429a      	cmp	r2, r3
 80018ce:	dbf1      	blt.n	80018b4 <_write+0x12>
	}
	return len;
 80018d0:	687b      	ldr	r3, [r7, #4]
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	3718      	adds	r7, #24
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}

080018da <_close>:

int _close(int file)
{
 80018da:	b480      	push	{r7}
 80018dc:	b083      	sub	sp, #12
 80018de:	af00      	add	r7, sp, #0
 80018e0:	6078      	str	r0, [r7, #4]
	return -1;
 80018e2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	370c      	adds	r7, #12
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr

080018f2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80018f2:	b480      	push	{r7}
 80018f4:	b083      	sub	sp, #12
 80018f6:	af00      	add	r7, sp, #0
 80018f8:	6078      	str	r0, [r7, #4]
 80018fa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001902:	605a      	str	r2, [r3, #4]
	return 0;
 8001904:	2300      	movs	r3, #0
}
 8001906:	4618      	mov	r0, r3
 8001908:	370c      	adds	r7, #12
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr

08001912 <_isatty>:

int _isatty(int file)
{
 8001912:	b480      	push	{r7}
 8001914:	b083      	sub	sp, #12
 8001916:	af00      	add	r7, sp, #0
 8001918:	6078      	str	r0, [r7, #4]
	return 1;
 800191a:	2301      	movs	r3, #1
}
 800191c:	4618      	mov	r0, r3
 800191e:	370c      	adds	r7, #12
 8001920:	46bd      	mov	sp, r7
 8001922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001926:	4770      	bx	lr

08001928 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001928:	b480      	push	{r7}
 800192a:	b085      	sub	sp, #20
 800192c:	af00      	add	r7, sp, #0
 800192e:	60f8      	str	r0, [r7, #12]
 8001930:	60b9      	str	r1, [r7, #8]
 8001932:	607a      	str	r2, [r7, #4]
	return 0;
 8001934:	2300      	movs	r3, #0
}
 8001936:	4618      	mov	r0, r3
 8001938:	3714      	adds	r7, #20
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr
	...

08001944 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b086      	sub	sp, #24
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800194c:	4a14      	ldr	r2, [pc, #80]	; (80019a0 <_sbrk+0x5c>)
 800194e:	4b15      	ldr	r3, [pc, #84]	; (80019a4 <_sbrk+0x60>)
 8001950:	1ad3      	subs	r3, r2, r3
 8001952:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001958:	4b13      	ldr	r3, [pc, #76]	; (80019a8 <_sbrk+0x64>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d102      	bne.n	8001966 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001960:	4b11      	ldr	r3, [pc, #68]	; (80019a8 <_sbrk+0x64>)
 8001962:	4a12      	ldr	r2, [pc, #72]	; (80019ac <_sbrk+0x68>)
 8001964:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001966:	4b10      	ldr	r3, [pc, #64]	; (80019a8 <_sbrk+0x64>)
 8001968:	681a      	ldr	r2, [r3, #0]
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	4413      	add	r3, r2
 800196e:	693a      	ldr	r2, [r7, #16]
 8001970:	429a      	cmp	r2, r3
 8001972:	d207      	bcs.n	8001984 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001974:	f004 ffb8 	bl	80068e8 <__errno>
 8001978:	4603      	mov	r3, r0
 800197a:	220c      	movs	r2, #12
 800197c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800197e:	f04f 33ff 	mov.w	r3, #4294967295
 8001982:	e009      	b.n	8001998 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001984:	4b08      	ldr	r3, [pc, #32]	; (80019a8 <_sbrk+0x64>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800198a:	4b07      	ldr	r3, [pc, #28]	; (80019a8 <_sbrk+0x64>)
 800198c:	681a      	ldr	r2, [r3, #0]
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	4413      	add	r3, r2
 8001992:	4a05      	ldr	r2, [pc, #20]	; (80019a8 <_sbrk+0x64>)
 8001994:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001996:	68fb      	ldr	r3, [r7, #12]
}
 8001998:	4618      	mov	r0, r3
 800199a:	3718      	adds	r7, #24
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}
 80019a0:	20018000 	.word	0x20018000
 80019a4:	00000400 	.word	0x00000400
 80019a8:	2000a210 	.word	0x2000a210
 80019ac:	2000a448 	.word	0x2000a448

080019b0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80019b0:	b480      	push	{r7}
 80019b2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80019b4:	4b06      	ldr	r3, [pc, #24]	; (80019d0 <SystemInit+0x20>)
 80019b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019ba:	4a05      	ldr	r2, [pc, #20]	; (80019d0 <SystemInit+0x20>)
 80019bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80019c4:	bf00      	nop
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr
 80019ce:	bf00      	nop
 80019d0:	e000ed00 	.word	0xe000ed00

080019d4 <MX_UART4_Init>:
UART_HandleTypeDef huart4;
UART_HandleTypeDef huart2;

/* UART4 init function */
void MX_UART4_Init(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80019d8:	4b14      	ldr	r3, [pc, #80]	; (8001a2c <MX_UART4_Init+0x58>)
 80019da:	4a15      	ldr	r2, [pc, #84]	; (8001a30 <MX_UART4_Init+0x5c>)
 80019dc:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80019de:	4b13      	ldr	r3, [pc, #76]	; (8001a2c <MX_UART4_Init+0x58>)
 80019e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80019e4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80019e6:	4b11      	ldr	r3, [pc, #68]	; (8001a2c <MX_UART4_Init+0x58>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80019ec:	4b0f      	ldr	r3, [pc, #60]	; (8001a2c <MX_UART4_Init+0x58>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80019f2:	4b0e      	ldr	r3, [pc, #56]	; (8001a2c <MX_UART4_Init+0x58>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80019f8:	4b0c      	ldr	r3, [pc, #48]	; (8001a2c <MX_UART4_Init+0x58>)
 80019fa:	220c      	movs	r2, #12
 80019fc:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019fe:	4b0b      	ldr	r3, [pc, #44]	; (8001a2c <MX_UART4_Init+0x58>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a04:	4b09      	ldr	r3, [pc, #36]	; (8001a2c <MX_UART4_Init+0x58>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a0a:	4b08      	ldr	r3, [pc, #32]	; (8001a2c <MX_UART4_Init+0x58>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a10:	4b06      	ldr	r3, [pc, #24]	; (8001a2c <MX_UART4_Init+0x58>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001a16:	4805      	ldr	r0, [pc, #20]	; (8001a2c <MX_UART4_Init+0x58>)
 8001a18:	f003 ffc0 	bl	800599c <HAL_UART_Init>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d001      	beq.n	8001a26 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8001a22:	f7ff fe01 	bl	8001628 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001a26:	bf00      	nop
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	2000a32c 	.word	0x2000a32c
 8001a30:	40004c00 	.word	0x40004c00

08001a34 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001a38:	4b14      	ldr	r3, [pc, #80]	; (8001a8c <MX_USART2_UART_Init+0x58>)
 8001a3a:	4a15      	ldr	r2, [pc, #84]	; (8001a90 <MX_USART2_UART_Init+0x5c>)
 8001a3c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001a3e:	4b13      	ldr	r3, [pc, #76]	; (8001a8c <MX_USART2_UART_Init+0x58>)
 8001a40:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a44:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001a46:	4b11      	ldr	r3, [pc, #68]	; (8001a8c <MX_USART2_UART_Init+0x58>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001a4c:	4b0f      	ldr	r3, [pc, #60]	; (8001a8c <MX_USART2_UART_Init+0x58>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001a52:	4b0e      	ldr	r3, [pc, #56]	; (8001a8c <MX_USART2_UART_Init+0x58>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001a58:	4b0c      	ldr	r3, [pc, #48]	; (8001a8c <MX_USART2_UART_Init+0x58>)
 8001a5a:	220c      	movs	r2, #12
 8001a5c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a5e:	4b0b      	ldr	r3, [pc, #44]	; (8001a8c <MX_USART2_UART_Init+0x58>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a64:	4b09      	ldr	r3, [pc, #36]	; (8001a8c <MX_USART2_UART_Init+0x58>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a6a:	4b08      	ldr	r3, [pc, #32]	; (8001a8c <MX_USART2_UART_Init+0x58>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a70:	4b06      	ldr	r3, [pc, #24]	; (8001a8c <MX_USART2_UART_Init+0x58>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001a76:	4805      	ldr	r0, [pc, #20]	; (8001a8c <MX_USART2_UART_Init+0x58>)
 8001a78:	f003 ff90 	bl	800599c <HAL_UART_Init>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d001      	beq.n	8001a86 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001a82:	f7ff fdd1 	bl	8001628 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001a86:	bf00      	nop
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	2000a3b0 	.word	0x2000a3b0
 8001a90:	40004400 	.word	0x40004400

08001a94 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b0ae      	sub	sp, #184	; 0xb8
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a9c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	601a      	str	r2, [r3, #0]
 8001aa4:	605a      	str	r2, [r3, #4]
 8001aa6:	609a      	str	r2, [r3, #8]
 8001aa8:	60da      	str	r2, [r3, #12]
 8001aaa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001aac:	f107 031c 	add.w	r3, r7, #28
 8001ab0:	2288      	movs	r2, #136	; 0x88
 8001ab2:	2100      	movs	r1, #0
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f005 f96f 	bl	8006d98 <memset>
  if(uartHandle->Instance==UART4)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4a42      	ldr	r2, [pc, #264]	; (8001bc8 <HAL_UART_MspInit+0x134>)
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d13c      	bne.n	8001b3e <HAL_UART_MspInit+0xaa>
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001ac4:	2308      	movs	r3, #8
 8001ac6:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001acc:	f107 031c 	add.w	r3, r7, #28
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f002 ff31 	bl	8004938 <HAL_RCCEx_PeriphCLKConfig>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d001      	beq.n	8001ae0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001adc:	f7ff fda4 	bl	8001628 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001ae0:	4b3a      	ldr	r3, [pc, #232]	; (8001bcc <HAL_UART_MspInit+0x138>)
 8001ae2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ae4:	4a39      	ldr	r2, [pc, #228]	; (8001bcc <HAL_UART_MspInit+0x138>)
 8001ae6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001aea:	6593      	str	r3, [r2, #88]	; 0x58
 8001aec:	4b37      	ldr	r3, [pc, #220]	; (8001bcc <HAL_UART_MspInit+0x138>)
 8001aee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001af0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001af4:	61bb      	str	r3, [r7, #24]
 8001af6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001af8:	4b34      	ldr	r3, [pc, #208]	; (8001bcc <HAL_UART_MspInit+0x138>)
 8001afa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001afc:	4a33      	ldr	r2, [pc, #204]	; (8001bcc <HAL_UART_MspInit+0x138>)
 8001afe:	f043 0301 	orr.w	r3, r3, #1
 8001b02:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b04:	4b31      	ldr	r3, [pc, #196]	; (8001bcc <HAL_UART_MspInit+0x138>)
 8001b06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b08:	f003 0301 	and.w	r3, r3, #1
 8001b0c:	617b      	str	r3, [r7, #20]
 8001b0e:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001b10:	2303      	movs	r3, #3
 8001b12:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b16:	2302      	movs	r3, #2
 8001b18:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b22:	2303      	movs	r3, #3
 8001b24:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001b28:	2308      	movs	r3, #8
 8001b2a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b2e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001b32:	4619      	mov	r1, r3
 8001b34:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b38:	f001 feec 	bl	8003914 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001b3c:	e040      	b.n	8001bc0 <HAL_UART_MspInit+0x12c>
  else if(uartHandle->Instance==USART2)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4a23      	ldr	r2, [pc, #140]	; (8001bd0 <HAL_UART_MspInit+0x13c>)
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d13b      	bne.n	8001bc0 <HAL_UART_MspInit+0x12c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001b48:	2302      	movs	r3, #2
 8001b4a:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b50:	f107 031c 	add.w	r3, r7, #28
 8001b54:	4618      	mov	r0, r3
 8001b56:	f002 feef 	bl	8004938 <HAL_RCCEx_PeriphCLKConfig>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d001      	beq.n	8001b64 <HAL_UART_MspInit+0xd0>
      Error_Handler();
 8001b60:	f7ff fd62 	bl	8001628 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b64:	4b19      	ldr	r3, [pc, #100]	; (8001bcc <HAL_UART_MspInit+0x138>)
 8001b66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b68:	4a18      	ldr	r2, [pc, #96]	; (8001bcc <HAL_UART_MspInit+0x138>)
 8001b6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b6e:	6593      	str	r3, [r2, #88]	; 0x58
 8001b70:	4b16      	ldr	r3, [pc, #88]	; (8001bcc <HAL_UART_MspInit+0x138>)
 8001b72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b78:	613b      	str	r3, [r7, #16]
 8001b7a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b7c:	4b13      	ldr	r3, [pc, #76]	; (8001bcc <HAL_UART_MspInit+0x138>)
 8001b7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b80:	4a12      	ldr	r2, [pc, #72]	; (8001bcc <HAL_UART_MspInit+0x138>)
 8001b82:	f043 0301 	orr.w	r3, r3, #1
 8001b86:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b88:	4b10      	ldr	r3, [pc, #64]	; (8001bcc <HAL_UART_MspInit+0x138>)
 8001b8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b8c:	f003 0301 	and.w	r3, r3, #1
 8001b90:	60fb      	str	r3, [r7, #12]
 8001b92:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001b94:	230c      	movs	r3, #12
 8001b96:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b9a:	2302      	movs	r3, #2
 8001b9c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ba6:	2303      	movs	r3, #3
 8001ba8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001bac:	2307      	movs	r3, #7
 8001bae:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bb2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bbc:	f001 feaa 	bl	8003914 <HAL_GPIO_Init>
}
 8001bc0:	bf00      	nop
 8001bc2:	37b8      	adds	r7, #184	; 0xb8
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}
 8001bc8:	40004c00 	.word	0x40004c00
 8001bcc:	40021000 	.word	0x40021000
 8001bd0:	40004400 	.word	0x40004400

08001bd4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001bd4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c0c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001bd8:	f7ff feea 	bl	80019b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001bdc:	480c      	ldr	r0, [pc, #48]	; (8001c10 <LoopForever+0x6>)
  ldr r1, =_edata
 8001bde:	490d      	ldr	r1, [pc, #52]	; (8001c14 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001be0:	4a0d      	ldr	r2, [pc, #52]	; (8001c18 <LoopForever+0xe>)
  movs r3, #0
 8001be2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001be4:	e002      	b.n	8001bec <LoopCopyDataInit>

08001be6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001be6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001be8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bea:	3304      	adds	r3, #4

08001bec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bf0:	d3f9      	bcc.n	8001be6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bf2:	4a0a      	ldr	r2, [pc, #40]	; (8001c1c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001bf4:	4c0a      	ldr	r4, [pc, #40]	; (8001c20 <LoopForever+0x16>)
  movs r3, #0
 8001bf6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bf8:	e001      	b.n	8001bfe <LoopFillZerobss>

08001bfa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bfa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bfc:	3204      	adds	r2, #4

08001bfe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bfe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c00:	d3fb      	bcc.n	8001bfa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c02:	f005 f82f 	bl	8006c64 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001c06:	f7ff fc71 	bl	80014ec <main>

08001c0a <LoopForever>:

LoopForever:
    b LoopForever
 8001c0a:	e7fe      	b.n	8001c0a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001c0c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001c10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c14:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8001c18:	0800d7ac 	.word	0x0800d7ac
  ldr r2, =_sbss
 8001c1c:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8001c20:	2000a448 	.word	0x2000a448

08001c24 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001c24:	e7fe      	b.n	8001c24 <ADC1_2_IRQHandler>

08001c26 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c26:	b580      	push	{r7, lr}
 8001c28:	b082      	sub	sp, #8
 8001c2a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c30:	2003      	movs	r0, #3
 8001c32:	f001 fc35 	bl	80034a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c36:	200f      	movs	r0, #15
 8001c38:	f000 f80e 	bl	8001c58 <HAL_InitTick>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d002      	beq.n	8001c48 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001c42:	2301      	movs	r3, #1
 8001c44:	71fb      	strb	r3, [r7, #7]
 8001c46:	e001      	b.n	8001c4c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001c48:	f7ff fd94 	bl	8001774 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001c4c:	79fb      	ldrb	r3, [r7, #7]
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	3708      	adds	r7, #8
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
	...

08001c58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b084      	sub	sp, #16
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001c60:	2300      	movs	r3, #0
 8001c62:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001c64:	4b17      	ldr	r3, [pc, #92]	; (8001cc4 <HAL_InitTick+0x6c>)
 8001c66:	781b      	ldrb	r3, [r3, #0]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d023      	beq.n	8001cb4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001c6c:	4b16      	ldr	r3, [pc, #88]	; (8001cc8 <HAL_InitTick+0x70>)
 8001c6e:	681a      	ldr	r2, [r3, #0]
 8001c70:	4b14      	ldr	r3, [pc, #80]	; (8001cc4 <HAL_InitTick+0x6c>)
 8001c72:	781b      	ldrb	r3, [r3, #0]
 8001c74:	4619      	mov	r1, r3
 8001c76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c82:	4618      	mov	r0, r3
 8001c84:	f001 fc41 	bl	800350a <HAL_SYSTICK_Config>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d10f      	bne.n	8001cae <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2b0f      	cmp	r3, #15
 8001c92:	d809      	bhi.n	8001ca8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c94:	2200      	movs	r2, #0
 8001c96:	6879      	ldr	r1, [r7, #4]
 8001c98:	f04f 30ff 	mov.w	r0, #4294967295
 8001c9c:	f001 fc0b 	bl	80034b6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001ca0:	4a0a      	ldr	r2, [pc, #40]	; (8001ccc <HAL_InitTick+0x74>)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6013      	str	r3, [r2, #0]
 8001ca6:	e007      	b.n	8001cb8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	73fb      	strb	r3, [r7, #15]
 8001cac:	e004      	b.n	8001cb8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	73fb      	strb	r3, [r7, #15]
 8001cb2:	e001      	b.n	8001cb8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001cb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	3710      	adds	r7, #16
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	20000010 	.word	0x20000010
 8001cc8:	20000008 	.word	0x20000008
 8001ccc:	2000000c 	.word	0x2000000c

08001cd0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001cd4:	4b06      	ldr	r3, [pc, #24]	; (8001cf0 <HAL_IncTick+0x20>)
 8001cd6:	781b      	ldrb	r3, [r3, #0]
 8001cd8:	461a      	mov	r2, r3
 8001cda:	4b06      	ldr	r3, [pc, #24]	; (8001cf4 <HAL_IncTick+0x24>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4413      	add	r3, r2
 8001ce0:	4a04      	ldr	r2, [pc, #16]	; (8001cf4 <HAL_IncTick+0x24>)
 8001ce2:	6013      	str	r3, [r2, #0]
}
 8001ce4:	bf00      	nop
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr
 8001cee:	bf00      	nop
 8001cf0:	20000010 	.word	0x20000010
 8001cf4:	2000a434 	.word	0x2000a434

08001cf8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	af00      	add	r7, sp, #0
  return uwTick;
 8001cfc:	4b03      	ldr	r3, [pc, #12]	; (8001d0c <HAL_GetTick+0x14>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr
 8001d0a:	bf00      	nop
 8001d0c:	2000a434 	.word	0x2000a434

08001d10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b084      	sub	sp, #16
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d18:	f7ff ffee 	bl	8001cf8 <HAL_GetTick>
 8001d1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d28:	d005      	beq.n	8001d36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001d2a:	4b0a      	ldr	r3, [pc, #40]	; (8001d54 <HAL_Delay+0x44>)
 8001d2c:	781b      	ldrb	r3, [r3, #0]
 8001d2e:	461a      	mov	r2, r3
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	4413      	add	r3, r2
 8001d34:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d36:	bf00      	nop
 8001d38:	f7ff ffde 	bl	8001cf8 <HAL_GetTick>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	68bb      	ldr	r3, [r7, #8]
 8001d40:	1ad3      	subs	r3, r2, r3
 8001d42:	68fa      	ldr	r2, [r7, #12]
 8001d44:	429a      	cmp	r2, r3
 8001d46:	d8f7      	bhi.n	8001d38 <HAL_Delay+0x28>
  {
  }
}
 8001d48:	bf00      	nop
 8001d4a:	bf00      	nop
 8001d4c:	3710      	adds	r7, #16
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	20000010 	.word	0x20000010

08001d58 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b083      	sub	sp, #12
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
 8001d60:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	689b      	ldr	r3, [r3, #8]
 8001d66:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	431a      	orrs	r2, r3
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	609a      	str	r2, [r3, #8]
}
 8001d72:	bf00      	nop
 8001d74:	370c      	adds	r7, #12
 8001d76:	46bd      	mov	sp, r7
 8001d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7c:	4770      	bx	lr

08001d7e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001d7e:	b480      	push	{r7}
 8001d80:	b083      	sub	sp, #12
 8001d82:	af00      	add	r7, sp, #0
 8001d84:	6078      	str	r0, [r7, #4]
 8001d86:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	431a      	orrs	r2, r3
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	609a      	str	r2, [r3, #8]
}
 8001d98:	bf00      	nop
 8001d9a:	370c      	adds	r7, #12
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da2:	4770      	bx	lr

08001da4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b083      	sub	sp, #12
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	370c      	adds	r7, #12
 8001db8:	46bd      	mov	sp, r7
 8001dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbe:	4770      	bx	lr

08001dc0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b087      	sub	sp, #28
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	60f8      	str	r0, [r7, #12]
 8001dc8:	60b9      	str	r1, [r7, #8]
 8001dca:	607a      	str	r2, [r7, #4]
 8001dcc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	3360      	adds	r3, #96	; 0x60
 8001dd2:	461a      	mov	r2, r3
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	009b      	lsls	r3, r3, #2
 8001dd8:	4413      	add	r3, r2
 8001dda:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	681a      	ldr	r2, [r3, #0]
 8001de0:	4b08      	ldr	r3, [pc, #32]	; (8001e04 <LL_ADC_SetOffset+0x44>)
 8001de2:	4013      	ands	r3, r2
 8001de4:	687a      	ldr	r2, [r7, #4]
 8001de6:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001dea:	683a      	ldr	r2, [r7, #0]
 8001dec:	430a      	orrs	r2, r1
 8001dee:	4313      	orrs	r3, r2
 8001df0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001df8:	bf00      	nop
 8001dfa:	371c      	adds	r7, #28
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e02:	4770      	bx	lr
 8001e04:	03fff000 	.word	0x03fff000

08001e08 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b085      	sub	sp, #20
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
 8001e10:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	3360      	adds	r3, #96	; 0x60
 8001e16:	461a      	mov	r2, r3
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	009b      	lsls	r3, r3, #2
 8001e1c:	4413      	add	r3, r2
 8001e1e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	3714      	adds	r7, #20
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e32:	4770      	bx	lr

08001e34 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b087      	sub	sp, #28
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	60f8      	str	r0, [r7, #12]
 8001e3c:	60b9      	str	r1, [r7, #8]
 8001e3e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	3360      	adds	r3, #96	; 0x60
 8001e44:	461a      	mov	r2, r3
 8001e46:	68bb      	ldr	r3, [r7, #8]
 8001e48:	009b      	lsls	r3, r3, #2
 8001e4a:	4413      	add	r3, r2
 8001e4c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001e4e:	697b      	ldr	r3, [r7, #20]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	431a      	orrs	r2, r3
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001e5e:	bf00      	nop
 8001e60:	371c      	adds	r7, #28
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr

08001e6a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001e6a:	b480      	push	{r7}
 8001e6c:	b083      	sub	sp, #12
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	68db      	ldr	r3, [r3, #12]
 8001e76:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d101      	bne.n	8001e82 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e000      	b.n	8001e84 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001e82:	2300      	movs	r3, #0
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	370c      	adds	r7, #12
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8e:	4770      	bx	lr

08001e90 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b087      	sub	sp, #28
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	60f8      	str	r0, [r7, #12]
 8001e98:	60b9      	str	r1, [r7, #8]
 8001e9a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	3330      	adds	r3, #48	; 0x30
 8001ea0:	461a      	mov	r2, r3
 8001ea2:	68bb      	ldr	r3, [r7, #8]
 8001ea4:	0a1b      	lsrs	r3, r3, #8
 8001ea6:	009b      	lsls	r3, r3, #2
 8001ea8:	f003 030c 	and.w	r3, r3, #12
 8001eac:	4413      	add	r3, r2
 8001eae:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	68bb      	ldr	r3, [r7, #8]
 8001eb6:	f003 031f 	and.w	r3, r3, #31
 8001eba:	211f      	movs	r1, #31
 8001ebc:	fa01 f303 	lsl.w	r3, r1, r3
 8001ec0:	43db      	mvns	r3, r3
 8001ec2:	401a      	ands	r2, r3
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	0e9b      	lsrs	r3, r3, #26
 8001ec8:	f003 011f 	and.w	r1, r3, #31
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	f003 031f 	and.w	r3, r3, #31
 8001ed2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ed6:	431a      	orrs	r2, r3
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001edc:	bf00      	nop
 8001ede:	371c      	adds	r7, #28
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee6:	4770      	bx	lr

08001ee8 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b087      	sub	sp, #28
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	60f8      	str	r0, [r7, #12]
 8001ef0:	60b9      	str	r1, [r7, #8]
 8001ef2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	3314      	adds	r3, #20
 8001ef8:	461a      	mov	r2, r3
 8001efa:	68bb      	ldr	r3, [r7, #8]
 8001efc:	0e5b      	lsrs	r3, r3, #25
 8001efe:	009b      	lsls	r3, r3, #2
 8001f00:	f003 0304 	and.w	r3, r3, #4
 8001f04:	4413      	add	r3, r2
 8001f06:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	681a      	ldr	r2, [r3, #0]
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	0d1b      	lsrs	r3, r3, #20
 8001f10:	f003 031f 	and.w	r3, r3, #31
 8001f14:	2107      	movs	r1, #7
 8001f16:	fa01 f303 	lsl.w	r3, r1, r3
 8001f1a:	43db      	mvns	r3, r3
 8001f1c:	401a      	ands	r2, r3
 8001f1e:	68bb      	ldr	r3, [r7, #8]
 8001f20:	0d1b      	lsrs	r3, r3, #20
 8001f22:	f003 031f 	and.w	r3, r3, #31
 8001f26:	6879      	ldr	r1, [r7, #4]
 8001f28:	fa01 f303 	lsl.w	r3, r1, r3
 8001f2c:	431a      	orrs	r2, r3
 8001f2e:	697b      	ldr	r3, [r7, #20]
 8001f30:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001f32:	bf00      	nop
 8001f34:	371c      	adds	r7, #28
 8001f36:	46bd      	mov	sp, r7
 8001f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3c:	4770      	bx	lr
	...

08001f40 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b085      	sub	sp, #20
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	60f8      	str	r0, [r7, #12]
 8001f48:	60b9      	str	r1, [r7, #8]
 8001f4a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001f52:	68bb      	ldr	r3, [r7, #8]
 8001f54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f58:	43db      	mvns	r3, r3
 8001f5a:	401a      	ands	r2, r3
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	f003 0318 	and.w	r3, r3, #24
 8001f62:	4908      	ldr	r1, [pc, #32]	; (8001f84 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001f64:	40d9      	lsrs	r1, r3
 8001f66:	68bb      	ldr	r3, [r7, #8]
 8001f68:	400b      	ands	r3, r1
 8001f6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f6e:	431a      	orrs	r2, r3
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001f76:	bf00      	nop
 8001f78:	3714      	adds	r7, #20
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr
 8001f82:	bf00      	nop
 8001f84:	0007ffff 	.word	0x0007ffff

08001f88 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b083      	sub	sp, #12
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	689b      	ldr	r3, [r3, #8]
 8001f94:	f003 031f 	and.w	r3, r3, #31
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	370c      	adds	r7, #12
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa2:	4770      	bx	lr

08001fa4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b083      	sub	sp, #12
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001fb4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001fb8:	687a      	ldr	r2, [r7, #4]
 8001fba:	6093      	str	r3, [r2, #8]
}
 8001fbc:	bf00      	nop
 8001fbe:	370c      	adds	r7, #12
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr

08001fc8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b083      	sub	sp, #12
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	689b      	ldr	r3, [r3, #8]
 8001fd4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001fd8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001fdc:	d101      	bne.n	8001fe2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e000      	b.n	8001fe4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001fe2:	2300      	movs	r3, #0
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	370c      	adds	r7, #12
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fee:	4770      	bx	lr

08001ff0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b083      	sub	sp, #12
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	689b      	ldr	r3, [r3, #8]
 8001ffc:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002000:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002004:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800200c:	bf00      	nop
 800200e:	370c      	adds	r7, #12
 8002010:	46bd      	mov	sp, r7
 8002012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002016:	4770      	bx	lr

08002018 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002018:	b480      	push	{r7}
 800201a:	b083      	sub	sp, #12
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	689b      	ldr	r3, [r3, #8]
 8002024:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002028:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800202c:	d101      	bne.n	8002032 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800202e:	2301      	movs	r3, #1
 8002030:	e000      	b.n	8002034 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002032:	2300      	movs	r3, #0
}
 8002034:	4618      	mov	r0, r3
 8002036:	370c      	adds	r7, #12
 8002038:	46bd      	mov	sp, r7
 800203a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203e:	4770      	bx	lr

08002040 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002040:	b480      	push	{r7}
 8002042:	b083      	sub	sp, #12
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	689b      	ldr	r3, [r3, #8]
 800204c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002050:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002054:	f043 0201 	orr.w	r2, r3, #1
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800205c:	bf00      	nop
 800205e:	370c      	adds	r7, #12
 8002060:	46bd      	mov	sp, r7
 8002062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002066:	4770      	bx	lr

08002068 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002068:	b480      	push	{r7}
 800206a:	b083      	sub	sp, #12
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	689b      	ldr	r3, [r3, #8]
 8002074:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002078:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800207c:	f043 0202 	orr.w	r2, r3, #2
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002084:	bf00      	nop
 8002086:	370c      	adds	r7, #12
 8002088:	46bd      	mov	sp, r7
 800208a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208e:	4770      	bx	lr

08002090 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002090:	b480      	push	{r7}
 8002092:	b083      	sub	sp, #12
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	689b      	ldr	r3, [r3, #8]
 800209c:	f003 0301 	and.w	r3, r3, #1
 80020a0:	2b01      	cmp	r3, #1
 80020a2:	d101      	bne.n	80020a8 <LL_ADC_IsEnabled+0x18>
 80020a4:	2301      	movs	r3, #1
 80020a6:	e000      	b.n	80020aa <LL_ADC_IsEnabled+0x1a>
 80020a8:	2300      	movs	r3, #0
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	370c      	adds	r7, #12
 80020ae:	46bd      	mov	sp, r7
 80020b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b4:	4770      	bx	lr

080020b6 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80020b6:	b480      	push	{r7}
 80020b8:	b083      	sub	sp, #12
 80020ba:	af00      	add	r7, sp, #0
 80020bc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	f003 0302 	and.w	r3, r3, #2
 80020c6:	2b02      	cmp	r3, #2
 80020c8:	d101      	bne.n	80020ce <LL_ADC_IsDisableOngoing+0x18>
 80020ca:	2301      	movs	r3, #1
 80020cc:	e000      	b.n	80020d0 <LL_ADC_IsDisableOngoing+0x1a>
 80020ce:	2300      	movs	r3, #0
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	370c      	adds	r7, #12
 80020d4:	46bd      	mov	sp, r7
 80020d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020da:	4770      	bx	lr

080020dc <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80020dc:	b480      	push	{r7}
 80020de:	b083      	sub	sp, #12
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	689b      	ldr	r3, [r3, #8]
 80020e8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80020ec:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80020f0:	f043 0204 	orr.w	r2, r3, #4
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80020f8:	bf00      	nop
 80020fa:	370c      	adds	r7, #12
 80020fc:	46bd      	mov	sp, r7
 80020fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002102:	4770      	bx	lr

08002104 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002104:	b480      	push	{r7}
 8002106:	b083      	sub	sp, #12
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	689b      	ldr	r3, [r3, #8]
 8002110:	f003 0304 	and.w	r3, r3, #4
 8002114:	2b04      	cmp	r3, #4
 8002116:	d101      	bne.n	800211c <LL_ADC_REG_IsConversionOngoing+0x18>
 8002118:	2301      	movs	r3, #1
 800211a:	e000      	b.n	800211e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800211c:	2300      	movs	r3, #0
}
 800211e:	4618      	mov	r0, r3
 8002120:	370c      	adds	r7, #12
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr

0800212a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800212a:	b480      	push	{r7}
 800212c:	b083      	sub	sp, #12
 800212e:	af00      	add	r7, sp, #0
 8002130:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	f003 0308 	and.w	r3, r3, #8
 800213a:	2b08      	cmp	r3, #8
 800213c:	d101      	bne.n	8002142 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800213e:	2301      	movs	r3, #1
 8002140:	e000      	b.n	8002144 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002142:	2300      	movs	r3, #0
}
 8002144:	4618      	mov	r0, r3
 8002146:	370c      	adds	r7, #12
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr

08002150 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002150:	b590      	push	{r4, r7, lr}
 8002152:	b089      	sub	sp, #36	; 0x24
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002158:	2300      	movs	r3, #0
 800215a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800215c:	2300      	movs	r3, #0
 800215e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d101      	bne.n	800216a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	e136      	b.n	80023d8 <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	691b      	ldr	r3, [r3, #16]
 800216e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002174:	2b00      	cmp	r3, #0
 8002176:	d109      	bne.n	800218c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002178:	6878      	ldr	r0, [r7, #4]
 800217a:	f7fe ff19 	bl	8000fb0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2200      	movs	r2, #0
 8002182:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2200      	movs	r2, #0
 8002188:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4618      	mov	r0, r3
 8002192:	f7ff ff19 	bl	8001fc8 <LL_ADC_IsDeepPowerDownEnabled>
 8002196:	4603      	mov	r3, r0
 8002198:	2b00      	cmp	r3, #0
 800219a:	d004      	beq.n	80021a6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4618      	mov	r0, r3
 80021a2:	f7ff feff 	bl	8001fa4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4618      	mov	r0, r3
 80021ac:	f7ff ff34 	bl	8002018 <LL_ADC_IsInternalRegulatorEnabled>
 80021b0:	4603      	mov	r3, r0
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d115      	bne.n	80021e2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4618      	mov	r0, r3
 80021bc:	f7ff ff18 	bl	8001ff0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80021c0:	4b87      	ldr	r3, [pc, #540]	; (80023e0 <HAL_ADC_Init+0x290>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	099b      	lsrs	r3, r3, #6
 80021c6:	4a87      	ldr	r2, [pc, #540]	; (80023e4 <HAL_ADC_Init+0x294>)
 80021c8:	fba2 2303 	umull	r2, r3, r2, r3
 80021cc:	099b      	lsrs	r3, r3, #6
 80021ce:	3301      	adds	r3, #1
 80021d0:	005b      	lsls	r3, r3, #1
 80021d2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80021d4:	e002      	b.n	80021dc <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80021d6:	68bb      	ldr	r3, [r7, #8]
 80021d8:	3b01      	subs	r3, #1
 80021da:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d1f9      	bne.n	80021d6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4618      	mov	r0, r3
 80021e8:	f7ff ff16 	bl	8002018 <LL_ADC_IsInternalRegulatorEnabled>
 80021ec:	4603      	mov	r3, r0
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d10d      	bne.n	800220e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021f6:	f043 0210 	orr.w	r2, r3, #16
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002202:	f043 0201 	orr.w	r2, r3, #1
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800220a:	2301      	movs	r3, #1
 800220c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4618      	mov	r0, r3
 8002214:	f7ff ff76 	bl	8002104 <LL_ADC_REG_IsConversionOngoing>
 8002218:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800221e:	f003 0310 	and.w	r3, r3, #16
 8002222:	2b00      	cmp	r3, #0
 8002224:	f040 80cf 	bne.w	80023c6 <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	2b00      	cmp	r3, #0
 800222c:	f040 80cb 	bne.w	80023c6 <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002234:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002238:	f043 0202 	orr.w	r2, r3, #2
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4618      	mov	r0, r3
 8002246:	f7ff ff23 	bl	8002090 <LL_ADC_IsEnabled>
 800224a:	4603      	mov	r3, r0
 800224c:	2b00      	cmp	r3, #0
 800224e:	d115      	bne.n	800227c <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002250:	4865      	ldr	r0, [pc, #404]	; (80023e8 <HAL_ADC_Init+0x298>)
 8002252:	f7ff ff1d 	bl	8002090 <LL_ADC_IsEnabled>
 8002256:	4604      	mov	r4, r0
 8002258:	4864      	ldr	r0, [pc, #400]	; (80023ec <HAL_ADC_Init+0x29c>)
 800225a:	f7ff ff19 	bl	8002090 <LL_ADC_IsEnabled>
 800225e:	4603      	mov	r3, r0
 8002260:	431c      	orrs	r4, r3
 8002262:	4863      	ldr	r0, [pc, #396]	; (80023f0 <HAL_ADC_Init+0x2a0>)
 8002264:	f7ff ff14 	bl	8002090 <LL_ADC_IsEnabled>
 8002268:	4603      	mov	r3, r0
 800226a:	4323      	orrs	r3, r4
 800226c:	2b00      	cmp	r3, #0
 800226e:	d105      	bne.n	800227c <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	4619      	mov	r1, r3
 8002276:	485f      	ldr	r0, [pc, #380]	; (80023f4 <HAL_ADC_Init+0x2a4>)
 8002278:	f7ff fd6e 	bl	8001d58 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	7e5b      	ldrb	r3, [r3, #25]
 8002280:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002286:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 800228c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002292:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	f893 3020 	ldrb.w	r3, [r3, #32]
 800229a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800229c:	4313      	orrs	r3, r2
 800229e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022a6:	2b01      	cmp	r3, #1
 80022a8:	d106      	bne.n	80022b8 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ae:	3b01      	subs	r3, #1
 80022b0:	045b      	lsls	r3, r3, #17
 80022b2:	69ba      	ldr	r2, [r7, #24]
 80022b4:	4313      	orrs	r3, r2
 80022b6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d009      	beq.n	80022d4 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022c4:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022cc:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80022ce:	69ba      	ldr	r2, [r7, #24]
 80022d0:	4313      	orrs	r3, r2
 80022d2:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	68da      	ldr	r2, [r3, #12]
 80022da:	4b47      	ldr	r3, [pc, #284]	; (80023f8 <HAL_ADC_Init+0x2a8>)
 80022dc:	4013      	ands	r3, r2
 80022de:	687a      	ldr	r2, [r7, #4]
 80022e0:	6812      	ldr	r2, [r2, #0]
 80022e2:	69b9      	ldr	r1, [r7, #24]
 80022e4:	430b      	orrs	r3, r1
 80022e6:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4618      	mov	r0, r3
 80022ee:	f7ff ff09 	bl	8002104 <LL_ADC_REG_IsConversionOngoing>
 80022f2:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4618      	mov	r0, r3
 80022fa:	f7ff ff16 	bl	800212a <LL_ADC_INJ_IsConversionOngoing>
 80022fe:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002300:	693b      	ldr	r3, [r7, #16]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d13d      	bne.n	8002382 <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d13a      	bne.n	8002382 <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002310:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002318:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800231a:	4313      	orrs	r3, r2
 800231c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	68db      	ldr	r3, [r3, #12]
 8002324:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002328:	f023 0302 	bic.w	r3, r3, #2
 800232c:	687a      	ldr	r2, [r7, #4]
 800232e:	6812      	ldr	r2, [r2, #0]
 8002330:	69b9      	ldr	r1, [r7, #24]
 8002332:	430b      	orrs	r3, r1
 8002334:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800233c:	2b01      	cmp	r3, #1
 800233e:	d118      	bne.n	8002372 <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	691b      	ldr	r3, [r3, #16]
 8002346:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800234a:	f023 0304 	bic.w	r3, r3, #4
 800234e:	687a      	ldr	r2, [r7, #4]
 8002350:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002352:	687a      	ldr	r2, [r7, #4]
 8002354:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002356:	4311      	orrs	r1, r2
 8002358:	687a      	ldr	r2, [r7, #4]
 800235a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800235c:	4311      	orrs	r1, r2
 800235e:	687a      	ldr	r2, [r7, #4]
 8002360:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002362:	430a      	orrs	r2, r1
 8002364:	431a      	orrs	r2, r3
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f042 0201 	orr.w	r2, r2, #1
 800236e:	611a      	str	r2, [r3, #16]
 8002370:	e007      	b.n	8002382 <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	691a      	ldr	r2, [r3, #16]
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f022 0201 	bic.w	r2, r2, #1
 8002380:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	691b      	ldr	r3, [r3, #16]
 8002386:	2b01      	cmp	r3, #1
 8002388:	d10c      	bne.n	80023a4 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002390:	f023 010f 	bic.w	r1, r3, #15
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	69db      	ldr	r3, [r3, #28]
 8002398:	1e5a      	subs	r2, r3, #1
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	430a      	orrs	r2, r1
 80023a0:	631a      	str	r2, [r3, #48]	; 0x30
 80023a2:	e007      	b.n	80023b4 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f022 020f 	bic.w	r2, r2, #15
 80023b2:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023b8:	f023 0303 	bic.w	r3, r3, #3
 80023bc:	f043 0201 	orr.w	r2, r3, #1
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	655a      	str	r2, [r3, #84]	; 0x54
 80023c4:	e007      	b.n	80023d6 <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023ca:	f043 0210 	orr.w	r2, r3, #16
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80023d2:	2301      	movs	r3, #1
 80023d4:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80023d6:	7ffb      	ldrb	r3, [r7, #31]
}
 80023d8:	4618      	mov	r0, r3
 80023da:	3724      	adds	r7, #36	; 0x24
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd90      	pop	{r4, r7, pc}
 80023e0:	20000008 	.word	0x20000008
 80023e4:	053e2d63 	.word	0x053e2d63
 80023e8:	50040000 	.word	0x50040000
 80023ec:	50040100 	.word	0x50040100
 80023f0:	50040200 	.word	0x50040200
 80023f4:	50040300 	.word	0x50040300
 80023f8:	fff0c007 	.word	0xfff0c007

080023fc <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b086      	sub	sp, #24
 8002400:	af00      	add	r7, sp, #0
 8002402:	60f8      	str	r0, [r7, #12]
 8002404:	60b9      	str	r1, [r7, #8]
 8002406:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002408:	4853      	ldr	r0, [pc, #332]	; (8002558 <HAL_ADC_Start_DMA+0x15c>)
 800240a:	f7ff fdbd 	bl	8001f88 <LL_ADC_GetMultimode>
 800240e:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4618      	mov	r0, r3
 8002416:	f7ff fe75 	bl	8002104 <LL_ADC_REG_IsConversionOngoing>
 800241a:	4603      	mov	r3, r0
 800241c:	2b00      	cmp	r3, #0
 800241e:	f040 8093 	bne.w	8002548 <HAL_ADC_Start_DMA+0x14c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002428:	2b01      	cmp	r3, #1
 800242a:	d101      	bne.n	8002430 <HAL_ADC_Start_DMA+0x34>
 800242c:	2302      	movs	r3, #2
 800242e:	e08e      	b.n	800254e <HAL_ADC_Start_DMA+0x152>
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	2201      	movs	r2, #1
 8002434:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a47      	ldr	r2, [pc, #284]	; (800255c <HAL_ADC_Start_DMA+0x160>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d008      	beq.n	8002454 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002442:	693b      	ldr	r3, [r7, #16]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d005      	beq.n	8002454 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002448:	693b      	ldr	r3, [r7, #16]
 800244a:	2b05      	cmp	r3, #5
 800244c:	d002      	beq.n	8002454 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	2b09      	cmp	r3, #9
 8002452:	d172      	bne.n	800253a <HAL_ADC_Start_DMA+0x13e>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002454:	68f8      	ldr	r0, [r7, #12]
 8002456:	f000 fc9b 	bl	8002d90 <ADC_Enable>
 800245a:	4603      	mov	r3, r0
 800245c:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800245e:	7dfb      	ldrb	r3, [r7, #23]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d165      	bne.n	8002530 <HAL_ADC_Start_DMA+0x134>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002468:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800246c:	f023 0301 	bic.w	r3, r3, #1
 8002470:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a38      	ldr	r2, [pc, #224]	; (8002560 <HAL_ADC_Start_DMA+0x164>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d002      	beq.n	8002488 <HAL_ADC_Start_DMA+0x8c>
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	e000      	b.n	800248a <HAL_ADC_Start_DMA+0x8e>
 8002488:	4b36      	ldr	r3, [pc, #216]	; (8002564 <HAL_ADC_Start_DMA+0x168>)
 800248a:	68fa      	ldr	r2, [r7, #12]
 800248c:	6812      	ldr	r2, [r2, #0]
 800248e:	4293      	cmp	r3, r2
 8002490:	d002      	beq.n	8002498 <HAL_ADC_Start_DMA+0x9c>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002492:	693b      	ldr	r3, [r7, #16]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d105      	bne.n	80024a4 <HAL_ADC_Start_DMA+0xa8>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800249c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	655a      	str	r2, [r3, #84]	; 0x54
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d006      	beq.n	80024be <HAL_ADC_Start_DMA+0xc2>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024b4:	f023 0206 	bic.w	r2, r3, #6
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	659a      	str	r2, [r3, #88]	; 0x58
 80024bc:	e002      	b.n	80024c4 <HAL_ADC_Start_DMA+0xc8>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	2200      	movs	r2, #0
 80024c2:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024c8:	4a27      	ldr	r2, [pc, #156]	; (8002568 <HAL_ADC_Start_DMA+0x16c>)
 80024ca:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024d0:	4a26      	ldr	r2, [pc, #152]	; (800256c <HAL_ADC_Start_DMA+0x170>)
 80024d2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024d8:	4a25      	ldr	r2, [pc, #148]	; (8002570 <HAL_ADC_Start_DMA+0x174>)
 80024da:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	221c      	movs	r2, #28
 80024e2:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	2200      	movs	r2, #0
 80024e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	685a      	ldr	r2, [r3, #4]
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f042 0210 	orr.w	r2, r2, #16
 80024fa:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	68da      	ldr	r2, [r3, #12]
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f042 0201 	orr.w	r2, r2, #1
 800250a:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	3340      	adds	r3, #64	; 0x40
 8002516:	4619      	mov	r1, r3
 8002518:	68ba      	ldr	r2, [r7, #8]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	f001 f8ba 	bl	8003694 <HAL_DMA_Start_IT>
 8002520:	4603      	mov	r3, r0
 8002522:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4618      	mov	r0, r3
 800252a:	f7ff fdd7 	bl	80020dc <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800252e:	e00d      	b.n	800254c <HAL_ADC_Start_DMA+0x150>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	2200      	movs	r2, #0
 8002534:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8002538:	e008      	b.n	800254c <HAL_ADC_Start_DMA+0x150>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	2200      	movs	r2, #0
 8002542:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002546:	e001      	b.n	800254c <HAL_ADC_Start_DMA+0x150>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002548:	2302      	movs	r3, #2
 800254a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800254c:	7dfb      	ldrb	r3, [r7, #23]
}
 800254e:	4618      	mov	r0, r3
 8002550:	3718      	adds	r7, #24
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	50040300 	.word	0x50040300
 800255c:	50040200 	.word	0x50040200
 8002560:	50040100 	.word	0x50040100
 8002564:	50040000 	.word	0x50040000
 8002568:	08002f13 	.word	0x08002f13
 800256c:	08002feb 	.word	0x08002feb
 8002570:	08003007 	.word	0x08003007

08002574 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002574:	b480      	push	{r7}
 8002576:	b083      	sub	sp, #12
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800257c:	bf00      	nop
 800257e:	370c      	adds	r7, #12
 8002580:	46bd      	mov	sp, r7
 8002582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002586:	4770      	bx	lr

08002588 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002588:	b480      	push	{r7}
 800258a:	b083      	sub	sp, #12
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002590:	bf00      	nop
 8002592:	370c      	adds	r7, #12
 8002594:	46bd      	mov	sp, r7
 8002596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259a:	4770      	bx	lr

0800259c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800259c:	b480      	push	{r7}
 800259e:	b083      	sub	sp, #12
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80025a4:	bf00      	nop
 80025a6:	370c      	adds	r7, #12
 80025a8:	46bd      	mov	sp, r7
 80025aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ae:	4770      	bx	lr

080025b0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b0b6      	sub	sp, #216	; 0xd8
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
 80025b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025ba:	2300      	movs	r3, #0
 80025bc:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80025c0:	2300      	movs	r3, #0
 80025c2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80025ca:	2b01      	cmp	r3, #1
 80025cc:	d101      	bne.n	80025d2 <HAL_ADC_ConfigChannel+0x22>
 80025ce:	2302      	movs	r3, #2
 80025d0:	e3c7      	b.n	8002d62 <HAL_ADC_ConfigChannel+0x7b2>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2201      	movs	r2, #1
 80025d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4618      	mov	r0, r3
 80025e0:	f7ff fd90 	bl	8002104 <LL_ADC_REG_IsConversionOngoing>
 80025e4:	4603      	mov	r3, r0
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	f040 83a8 	bne.w	8002d3c <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	2b05      	cmp	r3, #5
 80025f2:	d824      	bhi.n	800263e <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	3b02      	subs	r3, #2
 80025fa:	2b03      	cmp	r3, #3
 80025fc:	d81b      	bhi.n	8002636 <HAL_ADC_ConfigChannel+0x86>
 80025fe:	a201      	add	r2, pc, #4	; (adr r2, 8002604 <HAL_ADC_ConfigChannel+0x54>)
 8002600:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002604:	08002615 	.word	0x08002615
 8002608:	0800261d 	.word	0x0800261d
 800260c:	08002625 	.word	0x08002625
 8002610:	0800262d 	.word	0x0800262d
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	220c      	movs	r2, #12
 8002618:	605a      	str	r2, [r3, #4]
          break;
 800261a:	e011      	b.n	8002640 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	2212      	movs	r2, #18
 8002620:	605a      	str	r2, [r3, #4]
          break;
 8002622:	e00d      	b.n	8002640 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	2218      	movs	r2, #24
 8002628:	605a      	str	r2, [r3, #4]
          break;
 800262a:	e009      	b.n	8002640 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002632:	605a      	str	r2, [r3, #4]
          break;
 8002634:	e004      	b.n	8002640 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	2206      	movs	r2, #6
 800263a:	605a      	str	r2, [r3, #4]
          break;
 800263c:	e000      	b.n	8002640 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 800263e:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6818      	ldr	r0, [r3, #0]
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	6859      	ldr	r1, [r3, #4]
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	461a      	mov	r2, r3
 800264e:	f7ff fc1f 	bl	8001e90 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4618      	mov	r0, r3
 8002658:	f7ff fd54 	bl	8002104 <LL_ADC_REG_IsConversionOngoing>
 800265c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4618      	mov	r0, r3
 8002666:	f7ff fd60 	bl	800212a <LL_ADC_INJ_IsConversionOngoing>
 800266a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800266e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002672:	2b00      	cmp	r3, #0
 8002674:	f040 81a6 	bne.w	80029c4 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002678:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800267c:	2b00      	cmp	r3, #0
 800267e:	f040 81a1 	bne.w	80029c4 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6818      	ldr	r0, [r3, #0]
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	6819      	ldr	r1, [r3, #0]
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	461a      	mov	r2, r3
 8002690:	f7ff fc2a 	bl	8001ee8 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	695a      	ldr	r2, [r3, #20]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	68db      	ldr	r3, [r3, #12]
 800269e:	08db      	lsrs	r3, r3, #3
 80026a0:	f003 0303 	and.w	r3, r3, #3
 80026a4:	005b      	lsls	r3, r3, #1
 80026a6:	fa02 f303 	lsl.w	r3, r2, r3
 80026aa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	691b      	ldr	r3, [r3, #16]
 80026b2:	2b04      	cmp	r3, #4
 80026b4:	d00a      	beq.n	80026cc <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6818      	ldr	r0, [r3, #0]
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	6919      	ldr	r1, [r3, #16]
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	681a      	ldr	r2, [r3, #0]
 80026c2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80026c6:	f7ff fb7b 	bl	8001dc0 <LL_ADC_SetOffset>
 80026ca:	e17b      	b.n	80029c4 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	2100      	movs	r1, #0
 80026d2:	4618      	mov	r0, r3
 80026d4:	f7ff fb98 	bl	8001e08 <LL_ADC_GetOffsetChannel>
 80026d8:	4603      	mov	r3, r0
 80026da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d10a      	bne.n	80026f8 <HAL_ADC_ConfigChannel+0x148>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	2100      	movs	r1, #0
 80026e8:	4618      	mov	r0, r3
 80026ea:	f7ff fb8d 	bl	8001e08 <LL_ADC_GetOffsetChannel>
 80026ee:	4603      	mov	r3, r0
 80026f0:	0e9b      	lsrs	r3, r3, #26
 80026f2:	f003 021f 	and.w	r2, r3, #31
 80026f6:	e01e      	b.n	8002736 <HAL_ADC_ConfigChannel+0x186>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	2100      	movs	r1, #0
 80026fe:	4618      	mov	r0, r3
 8002700:	f7ff fb82 	bl	8001e08 <LL_ADC_GetOffsetChannel>
 8002704:	4603      	mov	r3, r0
 8002706:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800270a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800270e:	fa93 f3a3 	rbit	r3, r3
 8002712:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002716:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800271a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800271e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002722:	2b00      	cmp	r3, #0
 8002724:	d101      	bne.n	800272a <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8002726:	2320      	movs	r3, #32
 8002728:	e004      	b.n	8002734 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 800272a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800272e:	fab3 f383 	clz	r3, r3
 8002732:	b2db      	uxtb	r3, r3
 8002734:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800273e:	2b00      	cmp	r3, #0
 8002740:	d105      	bne.n	800274e <HAL_ADC_ConfigChannel+0x19e>
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	0e9b      	lsrs	r3, r3, #26
 8002748:	f003 031f 	and.w	r3, r3, #31
 800274c:	e018      	b.n	8002780 <HAL_ADC_ConfigChannel+0x1d0>
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002756:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800275a:	fa93 f3a3 	rbit	r3, r3
 800275e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002762:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002766:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800276a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800276e:	2b00      	cmp	r3, #0
 8002770:	d101      	bne.n	8002776 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8002772:	2320      	movs	r3, #32
 8002774:	e004      	b.n	8002780 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8002776:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800277a:	fab3 f383 	clz	r3, r3
 800277e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002780:	429a      	cmp	r2, r3
 8002782:	d106      	bne.n	8002792 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	2200      	movs	r2, #0
 800278a:	2100      	movs	r1, #0
 800278c:	4618      	mov	r0, r3
 800278e:	f7ff fb51 	bl	8001e34 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	2101      	movs	r1, #1
 8002798:	4618      	mov	r0, r3
 800279a:	f7ff fb35 	bl	8001e08 <LL_ADC_GetOffsetChannel>
 800279e:	4603      	mov	r3, r0
 80027a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d10a      	bne.n	80027be <HAL_ADC_ConfigChannel+0x20e>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	2101      	movs	r1, #1
 80027ae:	4618      	mov	r0, r3
 80027b0:	f7ff fb2a 	bl	8001e08 <LL_ADC_GetOffsetChannel>
 80027b4:	4603      	mov	r3, r0
 80027b6:	0e9b      	lsrs	r3, r3, #26
 80027b8:	f003 021f 	and.w	r2, r3, #31
 80027bc:	e01e      	b.n	80027fc <HAL_ADC_ConfigChannel+0x24c>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	2101      	movs	r1, #1
 80027c4:	4618      	mov	r0, r3
 80027c6:	f7ff fb1f 	bl	8001e08 <LL_ADC_GetOffsetChannel>
 80027ca:	4603      	mov	r3, r0
 80027cc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027d0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80027d4:	fa93 f3a3 	rbit	r3, r3
 80027d8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80027dc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80027e0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80027e4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d101      	bne.n	80027f0 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 80027ec:	2320      	movs	r3, #32
 80027ee:	e004      	b.n	80027fa <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 80027f0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80027f4:	fab3 f383 	clz	r3, r3
 80027f8:	b2db      	uxtb	r3, r3
 80027fa:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002804:	2b00      	cmp	r3, #0
 8002806:	d105      	bne.n	8002814 <HAL_ADC_ConfigChannel+0x264>
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	0e9b      	lsrs	r3, r3, #26
 800280e:	f003 031f 	and.w	r3, r3, #31
 8002812:	e018      	b.n	8002846 <HAL_ADC_ConfigChannel+0x296>
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800281c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002820:	fa93 f3a3 	rbit	r3, r3
 8002824:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002828:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800282c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002830:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002834:	2b00      	cmp	r3, #0
 8002836:	d101      	bne.n	800283c <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8002838:	2320      	movs	r3, #32
 800283a:	e004      	b.n	8002846 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 800283c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002840:	fab3 f383 	clz	r3, r3
 8002844:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002846:	429a      	cmp	r2, r3
 8002848:	d106      	bne.n	8002858 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	2200      	movs	r2, #0
 8002850:	2101      	movs	r1, #1
 8002852:	4618      	mov	r0, r3
 8002854:	f7ff faee 	bl	8001e34 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	2102      	movs	r1, #2
 800285e:	4618      	mov	r0, r3
 8002860:	f7ff fad2 	bl	8001e08 <LL_ADC_GetOffsetChannel>
 8002864:	4603      	mov	r3, r0
 8002866:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800286a:	2b00      	cmp	r3, #0
 800286c:	d10a      	bne.n	8002884 <HAL_ADC_ConfigChannel+0x2d4>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	2102      	movs	r1, #2
 8002874:	4618      	mov	r0, r3
 8002876:	f7ff fac7 	bl	8001e08 <LL_ADC_GetOffsetChannel>
 800287a:	4603      	mov	r3, r0
 800287c:	0e9b      	lsrs	r3, r3, #26
 800287e:	f003 021f 	and.w	r2, r3, #31
 8002882:	e01e      	b.n	80028c2 <HAL_ADC_ConfigChannel+0x312>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	2102      	movs	r1, #2
 800288a:	4618      	mov	r0, r3
 800288c:	f7ff fabc 	bl	8001e08 <LL_ADC_GetOffsetChannel>
 8002890:	4603      	mov	r3, r0
 8002892:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002896:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800289a:	fa93 f3a3 	rbit	r3, r3
 800289e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80028a2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80028a6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80028aa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d101      	bne.n	80028b6 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 80028b2:	2320      	movs	r3, #32
 80028b4:	e004      	b.n	80028c0 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80028b6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80028ba:	fab3 f383 	clz	r3, r3
 80028be:	b2db      	uxtb	r3, r3
 80028c0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d105      	bne.n	80028da <HAL_ADC_ConfigChannel+0x32a>
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	0e9b      	lsrs	r3, r3, #26
 80028d4:	f003 031f 	and.w	r3, r3, #31
 80028d8:	e016      	b.n	8002908 <HAL_ADC_ConfigChannel+0x358>
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028e2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80028e6:	fa93 f3a3 	rbit	r3, r3
 80028ea:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80028ec:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80028ee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80028f2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d101      	bne.n	80028fe <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 80028fa:	2320      	movs	r3, #32
 80028fc:	e004      	b.n	8002908 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 80028fe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002902:	fab3 f383 	clz	r3, r3
 8002906:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002908:	429a      	cmp	r2, r3
 800290a:	d106      	bne.n	800291a <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	2200      	movs	r2, #0
 8002912:	2102      	movs	r1, #2
 8002914:	4618      	mov	r0, r3
 8002916:	f7ff fa8d 	bl	8001e34 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	2103      	movs	r1, #3
 8002920:	4618      	mov	r0, r3
 8002922:	f7ff fa71 	bl	8001e08 <LL_ADC_GetOffsetChannel>
 8002926:	4603      	mov	r3, r0
 8002928:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800292c:	2b00      	cmp	r3, #0
 800292e:	d10a      	bne.n	8002946 <HAL_ADC_ConfigChannel+0x396>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	2103      	movs	r1, #3
 8002936:	4618      	mov	r0, r3
 8002938:	f7ff fa66 	bl	8001e08 <LL_ADC_GetOffsetChannel>
 800293c:	4603      	mov	r3, r0
 800293e:	0e9b      	lsrs	r3, r3, #26
 8002940:	f003 021f 	and.w	r2, r3, #31
 8002944:	e017      	b.n	8002976 <HAL_ADC_ConfigChannel+0x3c6>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	2103      	movs	r1, #3
 800294c:	4618      	mov	r0, r3
 800294e:	f7ff fa5b 	bl	8001e08 <LL_ADC_GetOffsetChannel>
 8002952:	4603      	mov	r3, r0
 8002954:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002956:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002958:	fa93 f3a3 	rbit	r3, r3
 800295c:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800295e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002960:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002962:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002964:	2b00      	cmp	r3, #0
 8002966:	d101      	bne.n	800296c <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8002968:	2320      	movs	r3, #32
 800296a:	e003      	b.n	8002974 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 800296c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800296e:	fab3 f383 	clz	r3, r3
 8002972:	b2db      	uxtb	r3, r3
 8002974:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800297e:	2b00      	cmp	r3, #0
 8002980:	d105      	bne.n	800298e <HAL_ADC_ConfigChannel+0x3de>
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	0e9b      	lsrs	r3, r3, #26
 8002988:	f003 031f 	and.w	r3, r3, #31
 800298c:	e011      	b.n	80029b2 <HAL_ADC_ConfigChannel+0x402>
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002994:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002996:	fa93 f3a3 	rbit	r3, r3
 800299a:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800299c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800299e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80029a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d101      	bne.n	80029aa <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 80029a6:	2320      	movs	r3, #32
 80029a8:	e003      	b.n	80029b2 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 80029aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029ac:	fab3 f383 	clz	r3, r3
 80029b0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80029b2:	429a      	cmp	r2, r3
 80029b4:	d106      	bne.n	80029c4 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	2200      	movs	r2, #0
 80029bc:	2103      	movs	r1, #3
 80029be:	4618      	mov	r0, r3
 80029c0:	f7ff fa38 	bl	8001e34 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4618      	mov	r0, r3
 80029ca:	f7ff fb61 	bl	8002090 <LL_ADC_IsEnabled>
 80029ce:	4603      	mov	r3, r0
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	f040 813f 	bne.w	8002c54 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6818      	ldr	r0, [r3, #0]
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	6819      	ldr	r1, [r3, #0]
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	68db      	ldr	r3, [r3, #12]
 80029e2:	461a      	mov	r2, r3
 80029e4:	f7ff faac 	bl	8001f40 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	68db      	ldr	r3, [r3, #12]
 80029ec:	4a8e      	ldr	r2, [pc, #568]	; (8002c28 <HAL_ADC_ConfigChannel+0x678>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	f040 8130 	bne.w	8002c54 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d10b      	bne.n	8002a1c <HAL_ADC_ConfigChannel+0x46c>
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	0e9b      	lsrs	r3, r3, #26
 8002a0a:	3301      	adds	r3, #1
 8002a0c:	f003 031f 	and.w	r3, r3, #31
 8002a10:	2b09      	cmp	r3, #9
 8002a12:	bf94      	ite	ls
 8002a14:	2301      	movls	r3, #1
 8002a16:	2300      	movhi	r3, #0
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	e019      	b.n	8002a50 <HAL_ADC_ConfigChannel+0x4a0>
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a22:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a24:	fa93 f3a3 	rbit	r3, r3
 8002a28:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002a2a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a2c:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002a2e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d101      	bne.n	8002a38 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8002a34:	2320      	movs	r3, #32
 8002a36:	e003      	b.n	8002a40 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8002a38:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002a3a:	fab3 f383 	clz	r3, r3
 8002a3e:	b2db      	uxtb	r3, r3
 8002a40:	3301      	adds	r3, #1
 8002a42:	f003 031f 	and.w	r3, r3, #31
 8002a46:	2b09      	cmp	r3, #9
 8002a48:	bf94      	ite	ls
 8002a4a:	2301      	movls	r3, #1
 8002a4c:	2300      	movhi	r3, #0
 8002a4e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d079      	beq.n	8002b48 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d107      	bne.n	8002a70 <HAL_ADC_ConfigChannel+0x4c0>
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	0e9b      	lsrs	r3, r3, #26
 8002a66:	3301      	adds	r3, #1
 8002a68:	069b      	lsls	r3, r3, #26
 8002a6a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a6e:	e015      	b.n	8002a9c <HAL_ADC_ConfigChannel+0x4ec>
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a78:	fa93 f3a3 	rbit	r3, r3
 8002a7c:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002a7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a80:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002a82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d101      	bne.n	8002a8c <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8002a88:	2320      	movs	r3, #32
 8002a8a:	e003      	b.n	8002a94 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8002a8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a8e:	fab3 f383 	clz	r3, r3
 8002a92:	b2db      	uxtb	r3, r3
 8002a94:	3301      	adds	r3, #1
 8002a96:	069b      	lsls	r3, r3, #26
 8002a98:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d109      	bne.n	8002abc <HAL_ADC_ConfigChannel+0x50c>
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	0e9b      	lsrs	r3, r3, #26
 8002aae:	3301      	adds	r3, #1
 8002ab0:	f003 031f 	and.w	r3, r3, #31
 8002ab4:	2101      	movs	r1, #1
 8002ab6:	fa01 f303 	lsl.w	r3, r1, r3
 8002aba:	e017      	b.n	8002aec <HAL_ADC_ConfigChannel+0x53c>
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ac2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ac4:	fa93 f3a3 	rbit	r3, r3
 8002ac8:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002aca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002acc:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002ace:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d101      	bne.n	8002ad8 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8002ad4:	2320      	movs	r3, #32
 8002ad6:	e003      	b.n	8002ae0 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8002ad8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ada:	fab3 f383 	clz	r3, r3
 8002ade:	b2db      	uxtb	r3, r3
 8002ae0:	3301      	adds	r3, #1
 8002ae2:	f003 031f 	and.w	r3, r3, #31
 8002ae6:	2101      	movs	r1, #1
 8002ae8:	fa01 f303 	lsl.w	r3, r1, r3
 8002aec:	ea42 0103 	orr.w	r1, r2, r3
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d10a      	bne.n	8002b12 <HAL_ADC_ConfigChannel+0x562>
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	0e9b      	lsrs	r3, r3, #26
 8002b02:	3301      	adds	r3, #1
 8002b04:	f003 021f 	and.w	r2, r3, #31
 8002b08:	4613      	mov	r3, r2
 8002b0a:	005b      	lsls	r3, r3, #1
 8002b0c:	4413      	add	r3, r2
 8002b0e:	051b      	lsls	r3, r3, #20
 8002b10:	e018      	b.n	8002b44 <HAL_ADC_ConfigChannel+0x594>
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b1a:	fa93 f3a3 	rbit	r3, r3
 8002b1e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002b20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b22:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002b24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d101      	bne.n	8002b2e <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8002b2a:	2320      	movs	r3, #32
 8002b2c:	e003      	b.n	8002b36 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8002b2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b30:	fab3 f383 	clz	r3, r3
 8002b34:	b2db      	uxtb	r3, r3
 8002b36:	3301      	adds	r3, #1
 8002b38:	f003 021f 	and.w	r2, r3, #31
 8002b3c:	4613      	mov	r3, r2
 8002b3e:	005b      	lsls	r3, r3, #1
 8002b40:	4413      	add	r3, r2
 8002b42:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b44:	430b      	orrs	r3, r1
 8002b46:	e080      	b.n	8002c4a <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d107      	bne.n	8002b64 <HAL_ADC_ConfigChannel+0x5b4>
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	0e9b      	lsrs	r3, r3, #26
 8002b5a:	3301      	adds	r3, #1
 8002b5c:	069b      	lsls	r3, r3, #26
 8002b5e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b62:	e015      	b.n	8002b90 <HAL_ADC_ConfigChannel+0x5e0>
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b6c:	fa93 f3a3 	rbit	r3, r3
 8002b70:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002b72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b74:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d101      	bne.n	8002b80 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8002b7c:	2320      	movs	r3, #32
 8002b7e:	e003      	b.n	8002b88 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8002b80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b82:	fab3 f383 	clz	r3, r3
 8002b86:	b2db      	uxtb	r3, r3
 8002b88:	3301      	adds	r3, #1
 8002b8a:	069b      	lsls	r3, r3, #26
 8002b8c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d109      	bne.n	8002bb0 <HAL_ADC_ConfigChannel+0x600>
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	0e9b      	lsrs	r3, r3, #26
 8002ba2:	3301      	adds	r3, #1
 8002ba4:	f003 031f 	and.w	r3, r3, #31
 8002ba8:	2101      	movs	r1, #1
 8002baa:	fa01 f303 	lsl.w	r3, r1, r3
 8002bae:	e017      	b.n	8002be0 <HAL_ADC_ConfigChannel+0x630>
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bb6:	6a3b      	ldr	r3, [r7, #32]
 8002bb8:	fa93 f3a3 	rbit	r3, r3
 8002bbc:	61fb      	str	r3, [r7, #28]
  return result;
 8002bbe:	69fb      	ldr	r3, [r7, #28]
 8002bc0:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d101      	bne.n	8002bcc <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8002bc8:	2320      	movs	r3, #32
 8002bca:	e003      	b.n	8002bd4 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8002bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bce:	fab3 f383 	clz	r3, r3
 8002bd2:	b2db      	uxtb	r3, r3
 8002bd4:	3301      	adds	r3, #1
 8002bd6:	f003 031f 	and.w	r3, r3, #31
 8002bda:	2101      	movs	r1, #1
 8002bdc:	fa01 f303 	lsl.w	r3, r1, r3
 8002be0:	ea42 0103 	orr.w	r1, r2, r3
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d10d      	bne.n	8002c0c <HAL_ADC_ConfigChannel+0x65c>
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	0e9b      	lsrs	r3, r3, #26
 8002bf6:	3301      	adds	r3, #1
 8002bf8:	f003 021f 	and.w	r2, r3, #31
 8002bfc:	4613      	mov	r3, r2
 8002bfe:	005b      	lsls	r3, r3, #1
 8002c00:	4413      	add	r3, r2
 8002c02:	3b1e      	subs	r3, #30
 8002c04:	051b      	lsls	r3, r3, #20
 8002c06:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002c0a:	e01d      	b.n	8002c48 <HAL_ADC_ConfigChannel+0x698>
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	fa93 f3a3 	rbit	r3, r3
 8002c18:	613b      	str	r3, [r7, #16]
  return result;
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002c1e:	69bb      	ldr	r3, [r7, #24]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d103      	bne.n	8002c2c <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8002c24:	2320      	movs	r3, #32
 8002c26:	e005      	b.n	8002c34 <HAL_ADC_ConfigChannel+0x684>
 8002c28:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002c2c:	69bb      	ldr	r3, [r7, #24]
 8002c2e:	fab3 f383 	clz	r3, r3
 8002c32:	b2db      	uxtb	r3, r3
 8002c34:	3301      	adds	r3, #1
 8002c36:	f003 021f 	and.w	r2, r3, #31
 8002c3a:	4613      	mov	r3, r2
 8002c3c:	005b      	lsls	r3, r3, #1
 8002c3e:	4413      	add	r3, r2
 8002c40:	3b1e      	subs	r3, #30
 8002c42:	051b      	lsls	r3, r3, #20
 8002c44:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c48:	430b      	orrs	r3, r1
 8002c4a:	683a      	ldr	r2, [r7, #0]
 8002c4c:	6892      	ldr	r2, [r2, #8]
 8002c4e:	4619      	mov	r1, r3
 8002c50:	f7ff f94a 	bl	8001ee8 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	681a      	ldr	r2, [r3, #0]
 8002c58:	4b44      	ldr	r3, [pc, #272]	; (8002d6c <HAL_ADC_ConfigChannel+0x7bc>)
 8002c5a:	4013      	ands	r3, r2
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d07a      	beq.n	8002d56 <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002c60:	4843      	ldr	r0, [pc, #268]	; (8002d70 <HAL_ADC_ConfigChannel+0x7c0>)
 8002c62:	f7ff f89f 	bl	8001da4 <LL_ADC_GetCommonPathInternalCh>
 8002c66:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a41      	ldr	r2, [pc, #260]	; (8002d74 <HAL_ADC_ConfigChannel+0x7c4>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d12c      	bne.n	8002cce <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002c74:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002c78:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d126      	bne.n	8002cce <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a3c      	ldr	r2, [pc, #240]	; (8002d78 <HAL_ADC_ConfigChannel+0x7c8>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d004      	beq.n	8002c94 <HAL_ADC_ConfigChannel+0x6e4>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a3b      	ldr	r2, [pc, #236]	; (8002d7c <HAL_ADC_ConfigChannel+0x7cc>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d15d      	bne.n	8002d50 <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002c94:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002c98:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002c9c:	4619      	mov	r1, r3
 8002c9e:	4834      	ldr	r0, [pc, #208]	; (8002d70 <HAL_ADC_ConfigChannel+0x7c0>)
 8002ca0:	f7ff f86d 	bl	8001d7e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002ca4:	4b36      	ldr	r3, [pc, #216]	; (8002d80 <HAL_ADC_ConfigChannel+0x7d0>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	099b      	lsrs	r3, r3, #6
 8002caa:	4a36      	ldr	r2, [pc, #216]	; (8002d84 <HAL_ADC_ConfigChannel+0x7d4>)
 8002cac:	fba2 2303 	umull	r2, r3, r2, r3
 8002cb0:	099b      	lsrs	r3, r3, #6
 8002cb2:	1c5a      	adds	r2, r3, #1
 8002cb4:	4613      	mov	r3, r2
 8002cb6:	005b      	lsls	r3, r3, #1
 8002cb8:	4413      	add	r3, r2
 8002cba:	009b      	lsls	r3, r3, #2
 8002cbc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002cbe:	e002      	b.n	8002cc6 <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	3b01      	subs	r3, #1
 8002cc4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d1f9      	bne.n	8002cc0 <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002ccc:	e040      	b.n	8002d50 <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a2d      	ldr	r2, [pc, #180]	; (8002d88 <HAL_ADC_ConfigChannel+0x7d8>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d118      	bne.n	8002d0a <HAL_ADC_ConfigChannel+0x75a>
 8002cd8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002cdc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d112      	bne.n	8002d0a <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a23      	ldr	r2, [pc, #140]	; (8002d78 <HAL_ADC_ConfigChannel+0x7c8>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d004      	beq.n	8002cf8 <HAL_ADC_ConfigChannel+0x748>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4a22      	ldr	r2, [pc, #136]	; (8002d7c <HAL_ADC_ConfigChannel+0x7cc>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d12d      	bne.n	8002d54 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002cf8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002cfc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d00:	4619      	mov	r1, r3
 8002d02:	481b      	ldr	r0, [pc, #108]	; (8002d70 <HAL_ADC_ConfigChannel+0x7c0>)
 8002d04:	f7ff f83b 	bl	8001d7e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002d08:	e024      	b.n	8002d54 <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a1f      	ldr	r2, [pc, #124]	; (8002d8c <HAL_ADC_ConfigChannel+0x7dc>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d120      	bne.n	8002d56 <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002d14:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002d18:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d11a      	bne.n	8002d56 <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a14      	ldr	r2, [pc, #80]	; (8002d78 <HAL_ADC_ConfigChannel+0x7c8>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d115      	bne.n	8002d56 <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002d2a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002d2e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002d32:	4619      	mov	r1, r3
 8002d34:	480e      	ldr	r0, [pc, #56]	; (8002d70 <HAL_ADC_ConfigChannel+0x7c0>)
 8002d36:	f7ff f822 	bl	8001d7e <LL_ADC_SetCommonPathInternalCh>
 8002d3a:	e00c      	b.n	8002d56 <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d40:	f043 0220 	orr.w	r2, r3, #32
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002d4e:	e002      	b.n	8002d56 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002d50:	bf00      	nop
 8002d52:	e000      	b.n	8002d56 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002d54:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002d5e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	37d8      	adds	r7, #216	; 0xd8
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}
 8002d6a:	bf00      	nop
 8002d6c:	80080000 	.word	0x80080000
 8002d70:	50040300 	.word	0x50040300
 8002d74:	c7520000 	.word	0xc7520000
 8002d78:	50040000 	.word	0x50040000
 8002d7c:	50040200 	.word	0x50040200
 8002d80:	20000008 	.word	0x20000008
 8002d84:	053e2d63 	.word	0x053e2d63
 8002d88:	cb840000 	.word	0xcb840000
 8002d8c:	80000001 	.word	0x80000001

08002d90 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b084      	sub	sp, #16
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f7ff f977 	bl	8002090 <LL_ADC_IsEnabled>
 8002da2:	4603      	mov	r3, r0
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d14d      	bne.n	8002e44 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	689a      	ldr	r2, [r3, #8]
 8002dae:	4b28      	ldr	r3, [pc, #160]	; (8002e50 <ADC_Enable+0xc0>)
 8002db0:	4013      	ands	r3, r2
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d00d      	beq.n	8002dd2 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dba:	f043 0210 	orr.w	r2, r3, #16
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dc6:	f043 0201 	orr.w	r2, r3, #1
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e039      	b.n	8002e46 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f7ff f932 	bl	8002040 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002ddc:	f7fe ff8c 	bl	8001cf8 <HAL_GetTick>
 8002de0:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002de2:	e028      	b.n	8002e36 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4618      	mov	r0, r3
 8002dea:	f7ff f951 	bl	8002090 <LL_ADC_IsEnabled>
 8002dee:	4603      	mov	r3, r0
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d104      	bne.n	8002dfe <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4618      	mov	r0, r3
 8002dfa:	f7ff f921 	bl	8002040 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002dfe:	f7fe ff7b 	bl	8001cf8 <HAL_GetTick>
 8002e02:	4602      	mov	r2, r0
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	1ad3      	subs	r3, r2, r3
 8002e08:	2b02      	cmp	r3, #2
 8002e0a:	d914      	bls.n	8002e36 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f003 0301 	and.w	r3, r3, #1
 8002e16:	2b01      	cmp	r3, #1
 8002e18:	d00d      	beq.n	8002e36 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e1e:	f043 0210 	orr.w	r2, r3, #16
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e2a:	f043 0201 	orr.w	r2, r3, #1
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002e32:	2301      	movs	r3, #1
 8002e34:	e007      	b.n	8002e46 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f003 0301 	and.w	r3, r3, #1
 8002e40:	2b01      	cmp	r3, #1
 8002e42:	d1cf      	bne.n	8002de4 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002e44:	2300      	movs	r3, #0
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	3710      	adds	r7, #16
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}
 8002e4e:	bf00      	nop
 8002e50:	8000003f 	.word	0x8000003f

08002e54 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b084      	sub	sp, #16
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4618      	mov	r0, r3
 8002e62:	f7ff f928 	bl	80020b6 <LL_ADC_IsDisableOngoing>
 8002e66:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	f7ff f90f 	bl	8002090 <LL_ADC_IsEnabled>
 8002e72:	4603      	mov	r3, r0
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d047      	beq.n	8002f08 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d144      	bne.n	8002f08 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	689b      	ldr	r3, [r3, #8]
 8002e84:	f003 030d 	and.w	r3, r3, #13
 8002e88:	2b01      	cmp	r3, #1
 8002e8a:	d10c      	bne.n	8002ea6 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4618      	mov	r0, r3
 8002e92:	f7ff f8e9 	bl	8002068 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	2203      	movs	r2, #3
 8002e9c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002e9e:	f7fe ff2b 	bl	8001cf8 <HAL_GetTick>
 8002ea2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002ea4:	e029      	b.n	8002efa <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eaa:	f043 0210 	orr.w	r2, r3, #16
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eb6:	f043 0201 	orr.w	r2, r3, #1
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e023      	b.n	8002f0a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002ec2:	f7fe ff19 	bl	8001cf8 <HAL_GetTick>
 8002ec6:	4602      	mov	r2, r0
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	1ad3      	subs	r3, r2, r3
 8002ecc:	2b02      	cmp	r3, #2
 8002ece:	d914      	bls.n	8002efa <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	689b      	ldr	r3, [r3, #8]
 8002ed6:	f003 0301 	and.w	r3, r3, #1
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d00d      	beq.n	8002efa <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ee2:	f043 0210 	orr.w	r2, r3, #16
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eee:	f043 0201 	orr.w	r2, r3, #1
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e007      	b.n	8002f0a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	f003 0301 	and.w	r3, r3, #1
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d1dc      	bne.n	8002ec2 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002f08:	2300      	movs	r3, #0
}
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	3710      	adds	r7, #16
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}

08002f12 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002f12:	b580      	push	{r7, lr}
 8002f14:	b084      	sub	sp, #16
 8002f16:	af00      	add	r7, sp, #0
 8002f18:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f1e:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f24:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d14b      	bne.n	8002fc4 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f30:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f003 0308 	and.w	r3, r3, #8
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d021      	beq.n	8002f8a <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f7fe ff8d 	bl	8001e6a <LL_ADC_REG_IsTriggerSourceSWStart>
 8002f50:	4603      	mov	r3, r0
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d032      	beq.n	8002fbc <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	68db      	ldr	r3, [r3, #12]
 8002f5c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d12b      	bne.n	8002fbc <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f68:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f74:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d11f      	bne.n	8002fbc <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f80:	f043 0201 	orr.w	r2, r3, #1
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	655a      	str	r2, [r3, #84]	; 0x54
 8002f88:	e018      	b.n	8002fbc <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	68db      	ldr	r3, [r3, #12]
 8002f90:	f003 0302 	and.w	r3, r3, #2
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d111      	bne.n	8002fbc <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f9c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fa8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d105      	bne.n	8002fbc <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fb4:	f043 0201 	orr.w	r2, r3, #1
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002fbc:	68f8      	ldr	r0, [r7, #12]
 8002fbe:	f7ff fad9 	bl	8002574 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002fc2:	e00e      	b.n	8002fe2 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fc8:	f003 0310 	and.w	r3, r3, #16
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d003      	beq.n	8002fd8 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002fd0:	68f8      	ldr	r0, [r7, #12]
 8002fd2:	f7ff fae3 	bl	800259c <HAL_ADC_ErrorCallback>
}
 8002fd6:	e004      	b.n	8002fe2 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	4798      	blx	r3
}
 8002fe2:	bf00      	nop
 8002fe4:	3710      	adds	r7, #16
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}

08002fea <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002fea:	b580      	push	{r7, lr}
 8002fec:	b084      	sub	sp, #16
 8002fee:	af00      	add	r7, sp, #0
 8002ff0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ff6:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002ff8:	68f8      	ldr	r0, [r7, #12]
 8002ffa:	f7ff fac5 	bl	8002588 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002ffe:	bf00      	nop
 8003000:	3710      	adds	r7, #16
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}

08003006 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003006:	b580      	push	{r7, lr}
 8003008:	b084      	sub	sp, #16
 800300a:	af00      	add	r7, sp, #0
 800300c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003012:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003018:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003024:	f043 0204 	orr.w	r2, r3, #4
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800302c:	68f8      	ldr	r0, [r7, #12]
 800302e:	f7ff fab5 	bl	800259c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003032:	bf00      	nop
 8003034:	3710      	adds	r7, #16
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}

0800303a <LL_ADC_IsEnabled>:
{
 800303a:	b480      	push	{r7}
 800303c:	b083      	sub	sp, #12
 800303e:	af00      	add	r7, sp, #0
 8003040:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	f003 0301 	and.w	r3, r3, #1
 800304a:	2b01      	cmp	r3, #1
 800304c:	d101      	bne.n	8003052 <LL_ADC_IsEnabled+0x18>
 800304e:	2301      	movs	r3, #1
 8003050:	e000      	b.n	8003054 <LL_ADC_IsEnabled+0x1a>
 8003052:	2300      	movs	r3, #0
}
 8003054:	4618      	mov	r0, r3
 8003056:	370c      	adds	r7, #12
 8003058:	46bd      	mov	sp, r7
 800305a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305e:	4770      	bx	lr

08003060 <LL_ADC_StartCalibration>:
{
 8003060:	b480      	push	{r7}
 8003062:	b083      	sub	sp, #12
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
 8003068:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8003072:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003076:	683a      	ldr	r2, [r7, #0]
 8003078:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800307c:	4313      	orrs	r3, r2
 800307e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	609a      	str	r2, [r3, #8]
}
 8003086:	bf00      	nop
 8003088:	370c      	adds	r7, #12
 800308a:	46bd      	mov	sp, r7
 800308c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003090:	4770      	bx	lr

08003092 <LL_ADC_IsCalibrationOnGoing>:
{
 8003092:	b480      	push	{r7}
 8003094:	b083      	sub	sp, #12
 8003096:	af00      	add	r7, sp, #0
 8003098:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	689b      	ldr	r3, [r3, #8]
 800309e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80030a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80030a6:	d101      	bne.n	80030ac <LL_ADC_IsCalibrationOnGoing+0x1a>
 80030a8:	2301      	movs	r3, #1
 80030aa:	e000      	b.n	80030ae <LL_ADC_IsCalibrationOnGoing+0x1c>
 80030ac:	2300      	movs	r3, #0
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	370c      	adds	r7, #12
 80030b2:	46bd      	mov	sp, r7
 80030b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b8:	4770      	bx	lr

080030ba <LL_ADC_REG_IsConversionOngoing>:
{
 80030ba:	b480      	push	{r7}
 80030bc:	b083      	sub	sp, #12
 80030be:	af00      	add	r7, sp, #0
 80030c0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	f003 0304 	and.w	r3, r3, #4
 80030ca:	2b04      	cmp	r3, #4
 80030cc:	d101      	bne.n	80030d2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80030ce:	2301      	movs	r3, #1
 80030d0:	e000      	b.n	80030d4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80030d2:	2300      	movs	r3, #0
}
 80030d4:	4618      	mov	r0, r3
 80030d6:	370c      	adds	r7, #12
 80030d8:	46bd      	mov	sp, r7
 80030da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030de:	4770      	bx	lr

080030e0 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b084      	sub	sp, #16
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
 80030e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80030ea:	2300      	movs	r3, #0
 80030ec:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	d101      	bne.n	80030fc <HAL_ADCEx_Calibration_Start+0x1c>
 80030f8:	2302      	movs	r3, #2
 80030fa:	e04d      	b.n	8003198 <HAL_ADCEx_Calibration_Start+0xb8>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2201      	movs	r2, #1
 8003100:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003104:	6878      	ldr	r0, [r7, #4]
 8003106:	f7ff fea5 	bl	8002e54 <ADC_Disable>
 800310a:	4603      	mov	r3, r0
 800310c:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800310e:	7bfb      	ldrb	r3, [r7, #15]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d136      	bne.n	8003182 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003118:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800311c:	f023 0302 	bic.w	r3, r3, #2
 8003120:	f043 0202 	orr.w	r2, r3, #2
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	6839      	ldr	r1, [r7, #0]
 800312e:	4618      	mov	r0, r3
 8003130:	f7ff ff96 	bl	8003060 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003134:	e014      	b.n	8003160 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8003136:	68bb      	ldr	r3, [r7, #8]
 8003138:	3301      	adds	r3, #1
 800313a:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 8003142:	d30d      	bcc.n	8003160 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003148:	f023 0312 	bic.w	r3, r3, #18
 800314c:	f043 0210 	orr.w	r2, r3, #16
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2200      	movs	r2, #0
 8003158:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 800315c:	2301      	movs	r3, #1
 800315e:	e01b      	b.n	8003198 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4618      	mov	r0, r3
 8003166:	f7ff ff94 	bl	8003092 <LL_ADC_IsCalibrationOnGoing>
 800316a:	4603      	mov	r3, r0
 800316c:	2b00      	cmp	r3, #0
 800316e:	d1e2      	bne.n	8003136 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003174:	f023 0303 	bic.w	r3, r3, #3
 8003178:	f043 0201 	orr.w	r2, r3, #1
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	655a      	str	r2, [r3, #84]	; 0x54
 8003180:	e005      	b.n	800318e <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003186:	f043 0210 	orr.w	r2, r3, #16
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2200      	movs	r2, #0
 8003192:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003196:	7bfb      	ldrb	r3, [r7, #15]
}
 8003198:	4618      	mov	r0, r3
 800319a:	3710      	adds	r7, #16
 800319c:	46bd      	mov	sp, r7
 800319e:	bd80      	pop	{r7, pc}

080031a0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80031a0:	b590      	push	{r4, r7, lr}
 80031a2:	b09f      	sub	sp, #124	; 0x7c
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
 80031a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031aa:	2300      	movs	r3, #0
 80031ac:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80031b6:	2b01      	cmp	r3, #1
 80031b8:	d101      	bne.n	80031be <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80031ba:	2302      	movs	r3, #2
 80031bc:	e093      	b.n	80032e6 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2201      	movs	r2, #1
 80031c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 80031c6:	2300      	movs	r3, #0
 80031c8:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 80031ca:	2300      	movs	r3, #0
 80031cc:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a47      	ldr	r2, [pc, #284]	; (80032f0 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d102      	bne.n	80031de <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80031d8:	4b46      	ldr	r3, [pc, #280]	; (80032f4 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80031da:	60bb      	str	r3, [r7, #8]
 80031dc:	e001      	b.n	80031e2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80031de:	2300      	movs	r3, #0
 80031e0:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80031e2:	68bb      	ldr	r3, [r7, #8]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d10b      	bne.n	8003200 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031ec:	f043 0220 	orr.w	r2, r3, #32
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2200      	movs	r2, #0
 80031f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80031fc:	2301      	movs	r3, #1
 80031fe:	e072      	b.n	80032e6 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	4618      	mov	r0, r3
 8003204:	f7ff ff59 	bl	80030ba <LL_ADC_REG_IsConversionOngoing>
 8003208:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4618      	mov	r0, r3
 8003210:	f7ff ff53 	bl	80030ba <LL_ADC_REG_IsConversionOngoing>
 8003214:	4603      	mov	r3, r0
 8003216:	2b00      	cmp	r3, #0
 8003218:	d154      	bne.n	80032c4 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800321a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800321c:	2b00      	cmp	r3, #0
 800321e:	d151      	bne.n	80032c4 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003220:	4b35      	ldr	r3, [pc, #212]	; (80032f8 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8003222:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d02c      	beq.n	8003286 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800322c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	6859      	ldr	r1, [r3, #4]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800323e:	035b      	lsls	r3, r3, #13
 8003240:	430b      	orrs	r3, r1
 8003242:	431a      	orrs	r2, r3
 8003244:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003246:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003248:	4829      	ldr	r0, [pc, #164]	; (80032f0 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800324a:	f7ff fef6 	bl	800303a <LL_ADC_IsEnabled>
 800324e:	4604      	mov	r4, r0
 8003250:	4828      	ldr	r0, [pc, #160]	; (80032f4 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003252:	f7ff fef2 	bl	800303a <LL_ADC_IsEnabled>
 8003256:	4603      	mov	r3, r0
 8003258:	431c      	orrs	r4, r3
 800325a:	4828      	ldr	r0, [pc, #160]	; (80032fc <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800325c:	f7ff feed 	bl	800303a <LL_ADC_IsEnabled>
 8003260:	4603      	mov	r3, r0
 8003262:	4323      	orrs	r3, r4
 8003264:	2b00      	cmp	r3, #0
 8003266:	d137      	bne.n	80032d8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003268:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003270:	f023 030f 	bic.w	r3, r3, #15
 8003274:	683a      	ldr	r2, [r7, #0]
 8003276:	6811      	ldr	r1, [r2, #0]
 8003278:	683a      	ldr	r2, [r7, #0]
 800327a:	6892      	ldr	r2, [r2, #8]
 800327c:	430a      	orrs	r2, r1
 800327e:	431a      	orrs	r2, r3
 8003280:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003282:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003284:	e028      	b.n	80032d8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003286:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003288:	689b      	ldr	r3, [r3, #8]
 800328a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800328e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003290:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003292:	4817      	ldr	r0, [pc, #92]	; (80032f0 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003294:	f7ff fed1 	bl	800303a <LL_ADC_IsEnabled>
 8003298:	4604      	mov	r4, r0
 800329a:	4816      	ldr	r0, [pc, #88]	; (80032f4 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800329c:	f7ff fecd 	bl	800303a <LL_ADC_IsEnabled>
 80032a0:	4603      	mov	r3, r0
 80032a2:	431c      	orrs	r4, r3
 80032a4:	4815      	ldr	r0, [pc, #84]	; (80032fc <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80032a6:	f7ff fec8 	bl	800303a <LL_ADC_IsEnabled>
 80032aa:	4603      	mov	r3, r0
 80032ac:	4323      	orrs	r3, r4
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d112      	bne.n	80032d8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80032b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032b4:	689b      	ldr	r3, [r3, #8]
 80032b6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80032ba:	f023 030f 	bic.w	r3, r3, #15
 80032be:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80032c0:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80032c2:	e009      	b.n	80032d8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032c8:	f043 0220 	orr.w	r2, r3, #32
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80032d0:	2301      	movs	r3, #1
 80032d2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80032d6:	e000      	b.n	80032da <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80032d8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2200      	movs	r2, #0
 80032de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80032e2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80032e6:	4618      	mov	r0, r3
 80032e8:	377c      	adds	r7, #124	; 0x7c
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd90      	pop	{r4, r7, pc}
 80032ee:	bf00      	nop
 80032f0:	50040000 	.word	0x50040000
 80032f4:	50040100 	.word	0x50040100
 80032f8:	50040300 	.word	0x50040300
 80032fc:	50040200 	.word	0x50040200

08003300 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003300:	b480      	push	{r7}
 8003302:	b085      	sub	sp, #20
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	f003 0307 	and.w	r3, r3, #7
 800330e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003310:	4b0c      	ldr	r3, [pc, #48]	; (8003344 <__NVIC_SetPriorityGrouping+0x44>)
 8003312:	68db      	ldr	r3, [r3, #12]
 8003314:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003316:	68ba      	ldr	r2, [r7, #8]
 8003318:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800331c:	4013      	ands	r3, r2
 800331e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003328:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800332c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003330:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003332:	4a04      	ldr	r2, [pc, #16]	; (8003344 <__NVIC_SetPriorityGrouping+0x44>)
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	60d3      	str	r3, [r2, #12]
}
 8003338:	bf00      	nop
 800333a:	3714      	adds	r7, #20
 800333c:	46bd      	mov	sp, r7
 800333e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003342:	4770      	bx	lr
 8003344:	e000ed00 	.word	0xe000ed00

08003348 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003348:	b480      	push	{r7}
 800334a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800334c:	4b04      	ldr	r3, [pc, #16]	; (8003360 <__NVIC_GetPriorityGrouping+0x18>)
 800334e:	68db      	ldr	r3, [r3, #12]
 8003350:	0a1b      	lsrs	r3, r3, #8
 8003352:	f003 0307 	and.w	r3, r3, #7
}
 8003356:	4618      	mov	r0, r3
 8003358:	46bd      	mov	sp, r7
 800335a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335e:	4770      	bx	lr
 8003360:	e000ed00 	.word	0xe000ed00

08003364 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003364:	b480      	push	{r7}
 8003366:	b083      	sub	sp, #12
 8003368:	af00      	add	r7, sp, #0
 800336a:	4603      	mov	r3, r0
 800336c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800336e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003372:	2b00      	cmp	r3, #0
 8003374:	db0b      	blt.n	800338e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003376:	79fb      	ldrb	r3, [r7, #7]
 8003378:	f003 021f 	and.w	r2, r3, #31
 800337c:	4907      	ldr	r1, [pc, #28]	; (800339c <__NVIC_EnableIRQ+0x38>)
 800337e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003382:	095b      	lsrs	r3, r3, #5
 8003384:	2001      	movs	r0, #1
 8003386:	fa00 f202 	lsl.w	r2, r0, r2
 800338a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800338e:	bf00      	nop
 8003390:	370c      	adds	r7, #12
 8003392:	46bd      	mov	sp, r7
 8003394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003398:	4770      	bx	lr
 800339a:	bf00      	nop
 800339c:	e000e100 	.word	0xe000e100

080033a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b083      	sub	sp, #12
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	4603      	mov	r3, r0
 80033a8:	6039      	str	r1, [r7, #0]
 80033aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	db0a      	blt.n	80033ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	b2da      	uxtb	r2, r3
 80033b8:	490c      	ldr	r1, [pc, #48]	; (80033ec <__NVIC_SetPriority+0x4c>)
 80033ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033be:	0112      	lsls	r2, r2, #4
 80033c0:	b2d2      	uxtb	r2, r2
 80033c2:	440b      	add	r3, r1
 80033c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80033c8:	e00a      	b.n	80033e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	b2da      	uxtb	r2, r3
 80033ce:	4908      	ldr	r1, [pc, #32]	; (80033f0 <__NVIC_SetPriority+0x50>)
 80033d0:	79fb      	ldrb	r3, [r7, #7]
 80033d2:	f003 030f 	and.w	r3, r3, #15
 80033d6:	3b04      	subs	r3, #4
 80033d8:	0112      	lsls	r2, r2, #4
 80033da:	b2d2      	uxtb	r2, r2
 80033dc:	440b      	add	r3, r1
 80033de:	761a      	strb	r2, [r3, #24]
}
 80033e0:	bf00      	nop
 80033e2:	370c      	adds	r7, #12
 80033e4:	46bd      	mov	sp, r7
 80033e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ea:	4770      	bx	lr
 80033ec:	e000e100 	.word	0xe000e100
 80033f0:	e000ed00 	.word	0xe000ed00

080033f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033f4:	b480      	push	{r7}
 80033f6:	b089      	sub	sp, #36	; 0x24
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	60f8      	str	r0, [r7, #12]
 80033fc:	60b9      	str	r1, [r7, #8]
 80033fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	f003 0307 	and.w	r3, r3, #7
 8003406:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003408:	69fb      	ldr	r3, [r7, #28]
 800340a:	f1c3 0307 	rsb	r3, r3, #7
 800340e:	2b04      	cmp	r3, #4
 8003410:	bf28      	it	cs
 8003412:	2304      	movcs	r3, #4
 8003414:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003416:	69fb      	ldr	r3, [r7, #28]
 8003418:	3304      	adds	r3, #4
 800341a:	2b06      	cmp	r3, #6
 800341c:	d902      	bls.n	8003424 <NVIC_EncodePriority+0x30>
 800341e:	69fb      	ldr	r3, [r7, #28]
 8003420:	3b03      	subs	r3, #3
 8003422:	e000      	b.n	8003426 <NVIC_EncodePriority+0x32>
 8003424:	2300      	movs	r3, #0
 8003426:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003428:	f04f 32ff 	mov.w	r2, #4294967295
 800342c:	69bb      	ldr	r3, [r7, #24]
 800342e:	fa02 f303 	lsl.w	r3, r2, r3
 8003432:	43da      	mvns	r2, r3
 8003434:	68bb      	ldr	r3, [r7, #8]
 8003436:	401a      	ands	r2, r3
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800343c:	f04f 31ff 	mov.w	r1, #4294967295
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	fa01 f303 	lsl.w	r3, r1, r3
 8003446:	43d9      	mvns	r1, r3
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800344c:	4313      	orrs	r3, r2
         );
}
 800344e:	4618      	mov	r0, r3
 8003450:	3724      	adds	r7, #36	; 0x24
 8003452:	46bd      	mov	sp, r7
 8003454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003458:	4770      	bx	lr
	...

0800345c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b082      	sub	sp, #8
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	3b01      	subs	r3, #1
 8003468:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800346c:	d301      	bcc.n	8003472 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800346e:	2301      	movs	r3, #1
 8003470:	e00f      	b.n	8003492 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003472:	4a0a      	ldr	r2, [pc, #40]	; (800349c <SysTick_Config+0x40>)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	3b01      	subs	r3, #1
 8003478:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800347a:	210f      	movs	r1, #15
 800347c:	f04f 30ff 	mov.w	r0, #4294967295
 8003480:	f7ff ff8e 	bl	80033a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003484:	4b05      	ldr	r3, [pc, #20]	; (800349c <SysTick_Config+0x40>)
 8003486:	2200      	movs	r2, #0
 8003488:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800348a:	4b04      	ldr	r3, [pc, #16]	; (800349c <SysTick_Config+0x40>)
 800348c:	2207      	movs	r2, #7
 800348e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003490:	2300      	movs	r3, #0
}
 8003492:	4618      	mov	r0, r3
 8003494:	3708      	adds	r7, #8
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}
 800349a:	bf00      	nop
 800349c:	e000e010 	.word	0xe000e010

080034a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b082      	sub	sp, #8
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80034a8:	6878      	ldr	r0, [r7, #4]
 80034aa:	f7ff ff29 	bl	8003300 <__NVIC_SetPriorityGrouping>
}
 80034ae:	bf00      	nop
 80034b0:	3708      	adds	r7, #8
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}

080034b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034b6:	b580      	push	{r7, lr}
 80034b8:	b086      	sub	sp, #24
 80034ba:	af00      	add	r7, sp, #0
 80034bc:	4603      	mov	r3, r0
 80034be:	60b9      	str	r1, [r7, #8]
 80034c0:	607a      	str	r2, [r7, #4]
 80034c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80034c4:	2300      	movs	r3, #0
 80034c6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80034c8:	f7ff ff3e 	bl	8003348 <__NVIC_GetPriorityGrouping>
 80034cc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80034ce:	687a      	ldr	r2, [r7, #4]
 80034d0:	68b9      	ldr	r1, [r7, #8]
 80034d2:	6978      	ldr	r0, [r7, #20]
 80034d4:	f7ff ff8e 	bl	80033f4 <NVIC_EncodePriority>
 80034d8:	4602      	mov	r2, r0
 80034da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034de:	4611      	mov	r1, r2
 80034e0:	4618      	mov	r0, r3
 80034e2:	f7ff ff5d 	bl	80033a0 <__NVIC_SetPriority>
}
 80034e6:	bf00      	nop
 80034e8:	3718      	adds	r7, #24
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}

080034ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034ee:	b580      	push	{r7, lr}
 80034f0:	b082      	sub	sp, #8
 80034f2:	af00      	add	r7, sp, #0
 80034f4:	4603      	mov	r3, r0
 80034f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80034f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034fc:	4618      	mov	r0, r3
 80034fe:	f7ff ff31 	bl	8003364 <__NVIC_EnableIRQ>
}
 8003502:	bf00      	nop
 8003504:	3708      	adds	r7, #8
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}

0800350a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800350a:	b580      	push	{r7, lr}
 800350c:	b082      	sub	sp, #8
 800350e:	af00      	add	r7, sp, #0
 8003510:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003512:	6878      	ldr	r0, [r7, #4]
 8003514:	f7ff ffa2 	bl	800345c <SysTick_Config>
 8003518:	4603      	mov	r3, r0
}
 800351a:	4618      	mov	r0, r3
 800351c:	3708      	adds	r7, #8
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}
	...

08003524 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003524:	b480      	push	{r7}
 8003526:	b085      	sub	sp, #20
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d101      	bne.n	8003536 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	e098      	b.n	8003668 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	461a      	mov	r2, r3
 800353c:	4b4d      	ldr	r3, [pc, #308]	; (8003674 <HAL_DMA_Init+0x150>)
 800353e:	429a      	cmp	r2, r3
 8003540:	d80f      	bhi.n	8003562 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	461a      	mov	r2, r3
 8003548:	4b4b      	ldr	r3, [pc, #300]	; (8003678 <HAL_DMA_Init+0x154>)
 800354a:	4413      	add	r3, r2
 800354c:	4a4b      	ldr	r2, [pc, #300]	; (800367c <HAL_DMA_Init+0x158>)
 800354e:	fba2 2303 	umull	r2, r3, r2, r3
 8003552:	091b      	lsrs	r3, r3, #4
 8003554:	009a      	lsls	r2, r3, #2
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	4a48      	ldr	r2, [pc, #288]	; (8003680 <HAL_DMA_Init+0x15c>)
 800355e:	641a      	str	r2, [r3, #64]	; 0x40
 8003560:	e00e      	b.n	8003580 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	461a      	mov	r2, r3
 8003568:	4b46      	ldr	r3, [pc, #280]	; (8003684 <HAL_DMA_Init+0x160>)
 800356a:	4413      	add	r3, r2
 800356c:	4a43      	ldr	r2, [pc, #268]	; (800367c <HAL_DMA_Init+0x158>)
 800356e:	fba2 2303 	umull	r2, r3, r2, r3
 8003572:	091b      	lsrs	r3, r3, #4
 8003574:	009a      	lsls	r2, r3, #2
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	4a42      	ldr	r2, [pc, #264]	; (8003688 <HAL_DMA_Init+0x164>)
 800357e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2202      	movs	r2, #2
 8003584:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003596:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800359a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80035a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	691b      	ldr	r3, [r3, #16]
 80035aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	699b      	ldr	r3, [r3, #24]
 80035b6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035bc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6a1b      	ldr	r3, [r3, #32]
 80035c2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80035c4:	68fa      	ldr	r2, [r7, #12]
 80035c6:	4313      	orrs	r3, r2
 80035c8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	68fa      	ldr	r2, [r7, #12]
 80035d0:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	689b      	ldr	r3, [r3, #8]
 80035d6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80035da:	d039      	beq.n	8003650 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e0:	4a27      	ldr	r2, [pc, #156]	; (8003680 <HAL_DMA_Init+0x15c>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d11a      	bne.n	800361c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80035e6:	4b29      	ldr	r3, [pc, #164]	; (800368c <HAL_DMA_Init+0x168>)
 80035e8:	681a      	ldr	r2, [r3, #0]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ee:	f003 031c 	and.w	r3, r3, #28
 80035f2:	210f      	movs	r1, #15
 80035f4:	fa01 f303 	lsl.w	r3, r1, r3
 80035f8:	43db      	mvns	r3, r3
 80035fa:	4924      	ldr	r1, [pc, #144]	; (800368c <HAL_DMA_Init+0x168>)
 80035fc:	4013      	ands	r3, r2
 80035fe:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003600:	4b22      	ldr	r3, [pc, #136]	; (800368c <HAL_DMA_Init+0x168>)
 8003602:	681a      	ldr	r2, [r3, #0]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6859      	ldr	r1, [r3, #4]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800360c:	f003 031c 	and.w	r3, r3, #28
 8003610:	fa01 f303 	lsl.w	r3, r1, r3
 8003614:	491d      	ldr	r1, [pc, #116]	; (800368c <HAL_DMA_Init+0x168>)
 8003616:	4313      	orrs	r3, r2
 8003618:	600b      	str	r3, [r1, #0]
 800361a:	e019      	b.n	8003650 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800361c:	4b1c      	ldr	r3, [pc, #112]	; (8003690 <HAL_DMA_Init+0x16c>)
 800361e:	681a      	ldr	r2, [r3, #0]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003624:	f003 031c 	and.w	r3, r3, #28
 8003628:	210f      	movs	r1, #15
 800362a:	fa01 f303 	lsl.w	r3, r1, r3
 800362e:	43db      	mvns	r3, r3
 8003630:	4917      	ldr	r1, [pc, #92]	; (8003690 <HAL_DMA_Init+0x16c>)
 8003632:	4013      	ands	r3, r2
 8003634:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003636:	4b16      	ldr	r3, [pc, #88]	; (8003690 <HAL_DMA_Init+0x16c>)
 8003638:	681a      	ldr	r2, [r3, #0]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6859      	ldr	r1, [r3, #4]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003642:	f003 031c 	and.w	r3, r3, #28
 8003646:	fa01 f303 	lsl.w	r3, r1, r3
 800364a:	4911      	ldr	r1, [pc, #68]	; (8003690 <HAL_DMA_Init+0x16c>)
 800364c:	4313      	orrs	r3, r2
 800364e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2200      	movs	r2, #0
 8003654:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2201      	movs	r2, #1
 800365a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2200      	movs	r2, #0
 8003662:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003666:	2300      	movs	r3, #0
}
 8003668:	4618      	mov	r0, r3
 800366a:	3714      	adds	r7, #20
 800366c:	46bd      	mov	sp, r7
 800366e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003672:	4770      	bx	lr
 8003674:	40020407 	.word	0x40020407
 8003678:	bffdfff8 	.word	0xbffdfff8
 800367c:	cccccccd 	.word	0xcccccccd
 8003680:	40020000 	.word	0x40020000
 8003684:	bffdfbf8 	.word	0xbffdfbf8
 8003688:	40020400 	.word	0x40020400
 800368c:	400200a8 	.word	0x400200a8
 8003690:	400204a8 	.word	0x400204a8

08003694 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b086      	sub	sp, #24
 8003698:	af00      	add	r7, sp, #0
 800369a:	60f8      	str	r0, [r7, #12]
 800369c:	60b9      	str	r1, [r7, #8]
 800369e:	607a      	str	r2, [r7, #4]
 80036a0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80036a2:	2300      	movs	r3, #0
 80036a4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80036ac:	2b01      	cmp	r3, #1
 80036ae:	d101      	bne.n	80036b4 <HAL_DMA_Start_IT+0x20>
 80036b0:	2302      	movs	r3, #2
 80036b2:	e04b      	b.n	800374c <HAL_DMA_Start_IT+0xb8>
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	2201      	movs	r2, #1
 80036b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80036c2:	b2db      	uxtb	r3, r3
 80036c4:	2b01      	cmp	r3, #1
 80036c6:	d13a      	bne.n	800373e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	2202      	movs	r2, #2
 80036cc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	2200      	movs	r2, #0
 80036d4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	681a      	ldr	r2, [r3, #0]
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f022 0201 	bic.w	r2, r2, #1
 80036e4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	687a      	ldr	r2, [r7, #4]
 80036ea:	68b9      	ldr	r1, [r7, #8]
 80036ec:	68f8      	ldr	r0, [r7, #12]
 80036ee:	f000 f8e0 	bl	80038b2 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d008      	beq.n	800370c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	681a      	ldr	r2, [r3, #0]
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f042 020e 	orr.w	r2, r2, #14
 8003708:	601a      	str	r2, [r3, #0]
 800370a:	e00f      	b.n	800372c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	681a      	ldr	r2, [r3, #0]
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f022 0204 	bic.w	r2, r2, #4
 800371a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	681a      	ldr	r2, [r3, #0]
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f042 020a 	orr.w	r2, r2, #10
 800372a:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	681a      	ldr	r2, [r3, #0]
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f042 0201 	orr.w	r2, r2, #1
 800373a:	601a      	str	r2, [r3, #0]
 800373c:	e005      	b.n	800374a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	2200      	movs	r2, #0
 8003742:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003746:	2302      	movs	r3, #2
 8003748:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800374a:	7dfb      	ldrb	r3, [r7, #23]
}
 800374c:	4618      	mov	r0, r3
 800374e:	3718      	adds	r7, #24
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}

08003754 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b084      	sub	sp, #16
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003770:	f003 031c 	and.w	r3, r3, #28
 8003774:	2204      	movs	r2, #4
 8003776:	409a      	lsls	r2, r3
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	4013      	ands	r3, r2
 800377c:	2b00      	cmp	r3, #0
 800377e:	d026      	beq.n	80037ce <HAL_DMA_IRQHandler+0x7a>
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	f003 0304 	and.w	r3, r3, #4
 8003786:	2b00      	cmp	r3, #0
 8003788:	d021      	beq.n	80037ce <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f003 0320 	and.w	r3, r3, #32
 8003794:	2b00      	cmp	r3, #0
 8003796:	d107      	bne.n	80037a8 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	681a      	ldr	r2, [r3, #0]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f022 0204 	bic.w	r2, r2, #4
 80037a6:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037ac:	f003 021c 	and.w	r2, r3, #28
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b4:	2104      	movs	r1, #4
 80037b6:	fa01 f202 	lsl.w	r2, r1, r2
 80037ba:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d071      	beq.n	80038a8 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037c8:	6878      	ldr	r0, [r7, #4]
 80037ca:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80037cc:	e06c      	b.n	80038a8 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037d2:	f003 031c 	and.w	r3, r3, #28
 80037d6:	2202      	movs	r2, #2
 80037d8:	409a      	lsls	r2, r3
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	4013      	ands	r3, r2
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d02e      	beq.n	8003840 <HAL_DMA_IRQHandler+0xec>
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	f003 0302 	and.w	r3, r3, #2
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d029      	beq.n	8003840 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f003 0320 	and.w	r3, r3, #32
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d10b      	bne.n	8003812 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	681a      	ldr	r2, [r3, #0]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f022 020a 	bic.w	r2, r2, #10
 8003808:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2201      	movs	r2, #1
 800380e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003816:	f003 021c 	and.w	r2, r3, #28
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800381e:	2102      	movs	r1, #2
 8003820:	fa01 f202 	lsl.w	r2, r1, r2
 8003824:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2200      	movs	r2, #0
 800382a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003832:	2b00      	cmp	r3, #0
 8003834:	d038      	beq.n	80038a8 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800383a:	6878      	ldr	r0, [r7, #4]
 800383c:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800383e:	e033      	b.n	80038a8 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003844:	f003 031c 	and.w	r3, r3, #28
 8003848:	2208      	movs	r2, #8
 800384a:	409a      	lsls	r2, r3
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	4013      	ands	r3, r2
 8003850:	2b00      	cmp	r3, #0
 8003852:	d02a      	beq.n	80038aa <HAL_DMA_IRQHandler+0x156>
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	f003 0308 	and.w	r3, r3, #8
 800385a:	2b00      	cmp	r3, #0
 800385c:	d025      	beq.n	80038aa <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	681a      	ldr	r2, [r3, #0]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f022 020e 	bic.w	r2, r2, #14
 800386c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003872:	f003 021c 	and.w	r2, r3, #28
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800387a:	2101      	movs	r1, #1
 800387c:	fa01 f202 	lsl.w	r2, r1, r2
 8003880:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2201      	movs	r2, #1
 8003886:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2201      	movs	r2, #1
 800388c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2200      	movs	r2, #0
 8003894:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800389c:	2b00      	cmp	r3, #0
 800389e:	d004      	beq.n	80038aa <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038a4:	6878      	ldr	r0, [r7, #4]
 80038a6:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80038a8:	bf00      	nop
 80038aa:	bf00      	nop
}
 80038ac:	3710      	adds	r7, #16
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}

080038b2 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80038b2:	b480      	push	{r7}
 80038b4:	b085      	sub	sp, #20
 80038b6:	af00      	add	r7, sp, #0
 80038b8:	60f8      	str	r0, [r7, #12]
 80038ba:	60b9      	str	r1, [r7, #8]
 80038bc:	607a      	str	r2, [r7, #4]
 80038be:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038c4:	f003 021c 	and.w	r2, r3, #28
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038cc:	2101      	movs	r1, #1
 80038ce:	fa01 f202 	lsl.w	r2, r1, r2
 80038d2:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	683a      	ldr	r2, [r7, #0]
 80038da:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	689b      	ldr	r3, [r3, #8]
 80038e0:	2b10      	cmp	r3, #16
 80038e2:	d108      	bne.n	80038f6 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	687a      	ldr	r2, [r7, #4]
 80038ea:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	68ba      	ldr	r2, [r7, #8]
 80038f2:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80038f4:	e007      	b.n	8003906 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	68ba      	ldr	r2, [r7, #8]
 80038fc:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	687a      	ldr	r2, [r7, #4]
 8003904:	60da      	str	r2, [r3, #12]
}
 8003906:	bf00      	nop
 8003908:	3714      	adds	r7, #20
 800390a:	46bd      	mov	sp, r7
 800390c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003910:	4770      	bx	lr
	...

08003914 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003914:	b480      	push	{r7}
 8003916:	b087      	sub	sp, #28
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
 800391c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800391e:	2300      	movs	r3, #0
 8003920:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003922:	e17f      	b.n	8003c24 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	681a      	ldr	r2, [r3, #0]
 8003928:	2101      	movs	r1, #1
 800392a:	697b      	ldr	r3, [r7, #20]
 800392c:	fa01 f303 	lsl.w	r3, r1, r3
 8003930:	4013      	ands	r3, r2
 8003932:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	2b00      	cmp	r3, #0
 8003938:	f000 8171 	beq.w	8003c1e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	f003 0303 	and.w	r3, r3, #3
 8003944:	2b01      	cmp	r3, #1
 8003946:	d005      	beq.n	8003954 <HAL_GPIO_Init+0x40>
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	f003 0303 	and.w	r3, r3, #3
 8003950:	2b02      	cmp	r3, #2
 8003952:	d130      	bne.n	80039b6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	689b      	ldr	r3, [r3, #8]
 8003958:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800395a:	697b      	ldr	r3, [r7, #20]
 800395c:	005b      	lsls	r3, r3, #1
 800395e:	2203      	movs	r2, #3
 8003960:	fa02 f303 	lsl.w	r3, r2, r3
 8003964:	43db      	mvns	r3, r3
 8003966:	693a      	ldr	r2, [r7, #16]
 8003968:	4013      	ands	r3, r2
 800396a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	68da      	ldr	r2, [r3, #12]
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	005b      	lsls	r3, r3, #1
 8003974:	fa02 f303 	lsl.w	r3, r2, r3
 8003978:	693a      	ldr	r2, [r7, #16]
 800397a:	4313      	orrs	r3, r2
 800397c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	693a      	ldr	r2, [r7, #16]
 8003982:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800398a:	2201      	movs	r2, #1
 800398c:	697b      	ldr	r3, [r7, #20]
 800398e:	fa02 f303 	lsl.w	r3, r2, r3
 8003992:	43db      	mvns	r3, r3
 8003994:	693a      	ldr	r2, [r7, #16]
 8003996:	4013      	ands	r3, r2
 8003998:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	091b      	lsrs	r3, r3, #4
 80039a0:	f003 0201 	and.w	r2, r3, #1
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	fa02 f303 	lsl.w	r3, r2, r3
 80039aa:	693a      	ldr	r2, [r7, #16]
 80039ac:	4313      	orrs	r3, r2
 80039ae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	693a      	ldr	r2, [r7, #16]
 80039b4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	f003 0303 	and.w	r3, r3, #3
 80039be:	2b03      	cmp	r3, #3
 80039c0:	d118      	bne.n	80039f4 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039c6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80039c8:	2201      	movs	r2, #1
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	fa02 f303 	lsl.w	r3, r2, r3
 80039d0:	43db      	mvns	r3, r3
 80039d2:	693a      	ldr	r2, [r7, #16]
 80039d4:	4013      	ands	r3, r2
 80039d6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	08db      	lsrs	r3, r3, #3
 80039de:	f003 0201 	and.w	r2, r3, #1
 80039e2:	697b      	ldr	r3, [r7, #20]
 80039e4:	fa02 f303 	lsl.w	r3, r2, r3
 80039e8:	693a      	ldr	r2, [r7, #16]
 80039ea:	4313      	orrs	r3, r2
 80039ec:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	693a      	ldr	r2, [r7, #16]
 80039f2:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	f003 0303 	and.w	r3, r3, #3
 80039fc:	2b03      	cmp	r3, #3
 80039fe:	d017      	beq.n	8003a30 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	68db      	ldr	r3, [r3, #12]
 8003a04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003a06:	697b      	ldr	r3, [r7, #20]
 8003a08:	005b      	lsls	r3, r3, #1
 8003a0a:	2203      	movs	r2, #3
 8003a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a10:	43db      	mvns	r3, r3
 8003a12:	693a      	ldr	r2, [r7, #16]
 8003a14:	4013      	ands	r3, r2
 8003a16:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	689a      	ldr	r2, [r3, #8]
 8003a1c:	697b      	ldr	r3, [r7, #20]
 8003a1e:	005b      	lsls	r3, r3, #1
 8003a20:	fa02 f303 	lsl.w	r3, r2, r3
 8003a24:	693a      	ldr	r2, [r7, #16]
 8003a26:	4313      	orrs	r3, r2
 8003a28:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	693a      	ldr	r2, [r7, #16]
 8003a2e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	f003 0303 	and.w	r3, r3, #3
 8003a38:	2b02      	cmp	r3, #2
 8003a3a:	d123      	bne.n	8003a84 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003a3c:	697b      	ldr	r3, [r7, #20]
 8003a3e:	08da      	lsrs	r2, r3, #3
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	3208      	adds	r2, #8
 8003a44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a48:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003a4a:	697b      	ldr	r3, [r7, #20]
 8003a4c:	f003 0307 	and.w	r3, r3, #7
 8003a50:	009b      	lsls	r3, r3, #2
 8003a52:	220f      	movs	r2, #15
 8003a54:	fa02 f303 	lsl.w	r3, r2, r3
 8003a58:	43db      	mvns	r3, r3
 8003a5a:	693a      	ldr	r2, [r7, #16]
 8003a5c:	4013      	ands	r3, r2
 8003a5e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	691a      	ldr	r2, [r3, #16]
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	f003 0307 	and.w	r3, r3, #7
 8003a6a:	009b      	lsls	r3, r3, #2
 8003a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a70:	693a      	ldr	r2, [r7, #16]
 8003a72:	4313      	orrs	r3, r2
 8003a74:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003a76:	697b      	ldr	r3, [r7, #20]
 8003a78:	08da      	lsrs	r2, r3, #3
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	3208      	adds	r2, #8
 8003a7e:	6939      	ldr	r1, [r7, #16]
 8003a80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003a8a:	697b      	ldr	r3, [r7, #20]
 8003a8c:	005b      	lsls	r3, r3, #1
 8003a8e:	2203      	movs	r2, #3
 8003a90:	fa02 f303 	lsl.w	r3, r2, r3
 8003a94:	43db      	mvns	r3, r3
 8003a96:	693a      	ldr	r2, [r7, #16]
 8003a98:	4013      	ands	r3, r2
 8003a9a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	f003 0203 	and.w	r2, r3, #3
 8003aa4:	697b      	ldr	r3, [r7, #20]
 8003aa6:	005b      	lsls	r3, r3, #1
 8003aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8003aac:	693a      	ldr	r2, [r7, #16]
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	693a      	ldr	r2, [r7, #16]
 8003ab6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	f000 80ac 	beq.w	8003c1e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ac6:	4b5f      	ldr	r3, [pc, #380]	; (8003c44 <HAL_GPIO_Init+0x330>)
 8003ac8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003aca:	4a5e      	ldr	r2, [pc, #376]	; (8003c44 <HAL_GPIO_Init+0x330>)
 8003acc:	f043 0301 	orr.w	r3, r3, #1
 8003ad0:	6613      	str	r3, [r2, #96]	; 0x60
 8003ad2:	4b5c      	ldr	r3, [pc, #368]	; (8003c44 <HAL_GPIO_Init+0x330>)
 8003ad4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ad6:	f003 0301 	and.w	r3, r3, #1
 8003ada:	60bb      	str	r3, [r7, #8]
 8003adc:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003ade:	4a5a      	ldr	r2, [pc, #360]	; (8003c48 <HAL_GPIO_Init+0x334>)
 8003ae0:	697b      	ldr	r3, [r7, #20]
 8003ae2:	089b      	lsrs	r3, r3, #2
 8003ae4:	3302      	adds	r3, #2
 8003ae6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003aea:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	f003 0303 	and.w	r3, r3, #3
 8003af2:	009b      	lsls	r3, r3, #2
 8003af4:	220f      	movs	r2, #15
 8003af6:	fa02 f303 	lsl.w	r3, r2, r3
 8003afa:	43db      	mvns	r3, r3
 8003afc:	693a      	ldr	r2, [r7, #16]
 8003afe:	4013      	ands	r3, r2
 8003b00:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003b08:	d025      	beq.n	8003b56 <HAL_GPIO_Init+0x242>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	4a4f      	ldr	r2, [pc, #316]	; (8003c4c <HAL_GPIO_Init+0x338>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d01f      	beq.n	8003b52 <HAL_GPIO_Init+0x23e>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	4a4e      	ldr	r2, [pc, #312]	; (8003c50 <HAL_GPIO_Init+0x33c>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d019      	beq.n	8003b4e <HAL_GPIO_Init+0x23a>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	4a4d      	ldr	r2, [pc, #308]	; (8003c54 <HAL_GPIO_Init+0x340>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d013      	beq.n	8003b4a <HAL_GPIO_Init+0x236>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	4a4c      	ldr	r2, [pc, #304]	; (8003c58 <HAL_GPIO_Init+0x344>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d00d      	beq.n	8003b46 <HAL_GPIO_Init+0x232>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	4a4b      	ldr	r2, [pc, #300]	; (8003c5c <HAL_GPIO_Init+0x348>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d007      	beq.n	8003b42 <HAL_GPIO_Init+0x22e>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	4a4a      	ldr	r2, [pc, #296]	; (8003c60 <HAL_GPIO_Init+0x34c>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d101      	bne.n	8003b3e <HAL_GPIO_Init+0x22a>
 8003b3a:	2306      	movs	r3, #6
 8003b3c:	e00c      	b.n	8003b58 <HAL_GPIO_Init+0x244>
 8003b3e:	2307      	movs	r3, #7
 8003b40:	e00a      	b.n	8003b58 <HAL_GPIO_Init+0x244>
 8003b42:	2305      	movs	r3, #5
 8003b44:	e008      	b.n	8003b58 <HAL_GPIO_Init+0x244>
 8003b46:	2304      	movs	r3, #4
 8003b48:	e006      	b.n	8003b58 <HAL_GPIO_Init+0x244>
 8003b4a:	2303      	movs	r3, #3
 8003b4c:	e004      	b.n	8003b58 <HAL_GPIO_Init+0x244>
 8003b4e:	2302      	movs	r3, #2
 8003b50:	e002      	b.n	8003b58 <HAL_GPIO_Init+0x244>
 8003b52:	2301      	movs	r3, #1
 8003b54:	e000      	b.n	8003b58 <HAL_GPIO_Init+0x244>
 8003b56:	2300      	movs	r3, #0
 8003b58:	697a      	ldr	r2, [r7, #20]
 8003b5a:	f002 0203 	and.w	r2, r2, #3
 8003b5e:	0092      	lsls	r2, r2, #2
 8003b60:	4093      	lsls	r3, r2
 8003b62:	693a      	ldr	r2, [r7, #16]
 8003b64:	4313      	orrs	r3, r2
 8003b66:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003b68:	4937      	ldr	r1, [pc, #220]	; (8003c48 <HAL_GPIO_Init+0x334>)
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	089b      	lsrs	r3, r3, #2
 8003b6e:	3302      	adds	r3, #2
 8003b70:	693a      	ldr	r2, [r7, #16]
 8003b72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003b76:	4b3b      	ldr	r3, [pc, #236]	; (8003c64 <HAL_GPIO_Init+0x350>)
 8003b78:	689b      	ldr	r3, [r3, #8]
 8003b7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	43db      	mvns	r3, r3
 8003b80:	693a      	ldr	r2, [r7, #16]
 8003b82:	4013      	ands	r3, r2
 8003b84:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d003      	beq.n	8003b9a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003b92:	693a      	ldr	r2, [r7, #16]
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	4313      	orrs	r3, r2
 8003b98:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003b9a:	4a32      	ldr	r2, [pc, #200]	; (8003c64 <HAL_GPIO_Init+0x350>)
 8003b9c:	693b      	ldr	r3, [r7, #16]
 8003b9e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003ba0:	4b30      	ldr	r3, [pc, #192]	; (8003c64 <HAL_GPIO_Init+0x350>)
 8003ba2:	68db      	ldr	r3, [r3, #12]
 8003ba4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	43db      	mvns	r3, r3
 8003baa:	693a      	ldr	r2, [r7, #16]
 8003bac:	4013      	ands	r3, r2
 8003bae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d003      	beq.n	8003bc4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003bbc:	693a      	ldr	r2, [r7, #16]
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003bc4:	4a27      	ldr	r2, [pc, #156]	; (8003c64 <HAL_GPIO_Init+0x350>)
 8003bc6:	693b      	ldr	r3, [r7, #16]
 8003bc8:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003bca:	4b26      	ldr	r3, [pc, #152]	; (8003c64 <HAL_GPIO_Init+0x350>)
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	43db      	mvns	r3, r3
 8003bd4:	693a      	ldr	r2, [r7, #16]
 8003bd6:	4013      	ands	r3, r2
 8003bd8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d003      	beq.n	8003bee <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003be6:	693a      	ldr	r2, [r7, #16]
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	4313      	orrs	r3, r2
 8003bec:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003bee:	4a1d      	ldr	r2, [pc, #116]	; (8003c64 <HAL_GPIO_Init+0x350>)
 8003bf0:	693b      	ldr	r3, [r7, #16]
 8003bf2:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003bf4:	4b1b      	ldr	r3, [pc, #108]	; (8003c64 <HAL_GPIO_Init+0x350>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	43db      	mvns	r3, r3
 8003bfe:	693a      	ldr	r2, [r7, #16]
 8003c00:	4013      	ands	r3, r2
 8003c02:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d003      	beq.n	8003c18 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003c10:	693a      	ldr	r2, [r7, #16]
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	4313      	orrs	r3, r2
 8003c16:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003c18:	4a12      	ldr	r2, [pc, #72]	; (8003c64 <HAL_GPIO_Init+0x350>)
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003c1e:	697b      	ldr	r3, [r7, #20]
 8003c20:	3301      	adds	r3, #1
 8003c22:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	681a      	ldr	r2, [r3, #0]
 8003c28:	697b      	ldr	r3, [r7, #20]
 8003c2a:	fa22 f303 	lsr.w	r3, r2, r3
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	f47f ae78 	bne.w	8003924 <HAL_GPIO_Init+0x10>
  }
}
 8003c34:	bf00      	nop
 8003c36:	bf00      	nop
 8003c38:	371c      	adds	r7, #28
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c40:	4770      	bx	lr
 8003c42:	bf00      	nop
 8003c44:	40021000 	.word	0x40021000
 8003c48:	40010000 	.word	0x40010000
 8003c4c:	48000400 	.word	0x48000400
 8003c50:	48000800 	.word	0x48000800
 8003c54:	48000c00 	.word	0x48000c00
 8003c58:	48001000 	.word	0x48001000
 8003c5c:	48001400 	.word	0x48001400
 8003c60:	48001800 	.word	0x48001800
 8003c64:	40010400 	.word	0x40010400

08003c68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b083      	sub	sp, #12
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
 8003c70:	460b      	mov	r3, r1
 8003c72:	807b      	strh	r3, [r7, #2]
 8003c74:	4613      	mov	r3, r2
 8003c76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003c78:	787b      	ldrb	r3, [r7, #1]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d003      	beq.n	8003c86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003c7e:	887a      	ldrh	r2, [r7, #2]
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003c84:	e002      	b.n	8003c8c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003c86:	887a      	ldrh	r2, [r7, #2]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003c8c:	bf00      	nop
 8003c8e:	370c      	adds	r7, #12
 8003c90:	46bd      	mov	sp, r7
 8003c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c96:	4770      	bx	lr

08003c98 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003c9c:	4b04      	ldr	r3, [pc, #16]	; (8003cb0 <HAL_PWREx_GetVoltageRange+0x18>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cac:	4770      	bx	lr
 8003cae:	bf00      	nop
 8003cb0:	40007000 	.word	0x40007000

08003cb4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b085      	sub	sp, #20
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003cc2:	d130      	bne.n	8003d26 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003cc4:	4b23      	ldr	r3, [pc, #140]	; (8003d54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003ccc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003cd0:	d038      	beq.n	8003d44 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003cd2:	4b20      	ldr	r3, [pc, #128]	; (8003d54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003cda:	4a1e      	ldr	r2, [pc, #120]	; (8003d54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003cdc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003ce0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003ce2:	4b1d      	ldr	r3, [pc, #116]	; (8003d58 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	2232      	movs	r2, #50	; 0x32
 8003ce8:	fb02 f303 	mul.w	r3, r2, r3
 8003cec:	4a1b      	ldr	r2, [pc, #108]	; (8003d5c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003cee:	fba2 2303 	umull	r2, r3, r2, r3
 8003cf2:	0c9b      	lsrs	r3, r3, #18
 8003cf4:	3301      	adds	r3, #1
 8003cf6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003cf8:	e002      	b.n	8003d00 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	3b01      	subs	r3, #1
 8003cfe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d00:	4b14      	ldr	r3, [pc, #80]	; (8003d54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d02:	695b      	ldr	r3, [r3, #20]
 8003d04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d0c:	d102      	bne.n	8003d14 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d1f2      	bne.n	8003cfa <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003d14:	4b0f      	ldr	r3, [pc, #60]	; (8003d54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d16:	695b      	ldr	r3, [r3, #20]
 8003d18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d20:	d110      	bne.n	8003d44 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003d22:	2303      	movs	r3, #3
 8003d24:	e00f      	b.n	8003d46 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003d26:	4b0b      	ldr	r3, [pc, #44]	; (8003d54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003d2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d32:	d007      	beq.n	8003d44 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003d34:	4b07      	ldr	r3, [pc, #28]	; (8003d54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003d3c:	4a05      	ldr	r2, [pc, #20]	; (8003d54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d3e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003d42:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003d44:	2300      	movs	r3, #0
}
 8003d46:	4618      	mov	r0, r3
 8003d48:	3714      	adds	r7, #20
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d50:	4770      	bx	lr
 8003d52:	bf00      	nop
 8003d54:	40007000 	.word	0x40007000
 8003d58:	20000008 	.word	0x20000008
 8003d5c:	431bde83 	.word	0x431bde83

08003d60 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b088      	sub	sp, #32
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d101      	bne.n	8003d72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	e3d4      	b.n	800451c <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d72:	4ba1      	ldr	r3, [pc, #644]	; (8003ff8 <HAL_RCC_OscConfig+0x298>)
 8003d74:	689b      	ldr	r3, [r3, #8]
 8003d76:	f003 030c 	and.w	r3, r3, #12
 8003d7a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003d7c:	4b9e      	ldr	r3, [pc, #632]	; (8003ff8 <HAL_RCC_OscConfig+0x298>)
 8003d7e:	68db      	ldr	r3, [r3, #12]
 8003d80:	f003 0303 	and.w	r3, r3, #3
 8003d84:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f003 0310 	and.w	r3, r3, #16
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	f000 80e4 	beq.w	8003f5c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003d94:	69bb      	ldr	r3, [r7, #24]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d007      	beq.n	8003daa <HAL_RCC_OscConfig+0x4a>
 8003d9a:	69bb      	ldr	r3, [r7, #24]
 8003d9c:	2b0c      	cmp	r3, #12
 8003d9e:	f040 808b 	bne.w	8003eb8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	2b01      	cmp	r3, #1
 8003da6:	f040 8087 	bne.w	8003eb8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003daa:	4b93      	ldr	r3, [pc, #588]	; (8003ff8 <HAL_RCC_OscConfig+0x298>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f003 0302 	and.w	r3, r3, #2
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d005      	beq.n	8003dc2 <HAL_RCC_OscConfig+0x62>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	699b      	ldr	r3, [r3, #24]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d101      	bne.n	8003dc2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	e3ac      	b.n	800451c <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6a1a      	ldr	r2, [r3, #32]
 8003dc6:	4b8c      	ldr	r3, [pc, #560]	; (8003ff8 <HAL_RCC_OscConfig+0x298>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f003 0308 	and.w	r3, r3, #8
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d004      	beq.n	8003ddc <HAL_RCC_OscConfig+0x7c>
 8003dd2:	4b89      	ldr	r3, [pc, #548]	; (8003ff8 <HAL_RCC_OscConfig+0x298>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003dda:	e005      	b.n	8003de8 <HAL_RCC_OscConfig+0x88>
 8003ddc:	4b86      	ldr	r3, [pc, #536]	; (8003ff8 <HAL_RCC_OscConfig+0x298>)
 8003dde:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003de2:	091b      	lsrs	r3, r3, #4
 8003de4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d223      	bcs.n	8003e34 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6a1b      	ldr	r3, [r3, #32]
 8003df0:	4618      	mov	r0, r3
 8003df2:	f000 fd41 	bl	8004878 <RCC_SetFlashLatencyFromMSIRange>
 8003df6:	4603      	mov	r3, r0
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d001      	beq.n	8003e00 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	e38d      	b.n	800451c <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003e00:	4b7d      	ldr	r3, [pc, #500]	; (8003ff8 <HAL_RCC_OscConfig+0x298>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a7c      	ldr	r2, [pc, #496]	; (8003ff8 <HAL_RCC_OscConfig+0x298>)
 8003e06:	f043 0308 	orr.w	r3, r3, #8
 8003e0a:	6013      	str	r3, [r2, #0]
 8003e0c:	4b7a      	ldr	r3, [pc, #488]	; (8003ff8 <HAL_RCC_OscConfig+0x298>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6a1b      	ldr	r3, [r3, #32]
 8003e18:	4977      	ldr	r1, [pc, #476]	; (8003ff8 <HAL_RCC_OscConfig+0x298>)
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003e1e:	4b76      	ldr	r3, [pc, #472]	; (8003ff8 <HAL_RCC_OscConfig+0x298>)
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	69db      	ldr	r3, [r3, #28]
 8003e2a:	021b      	lsls	r3, r3, #8
 8003e2c:	4972      	ldr	r1, [pc, #456]	; (8003ff8 <HAL_RCC_OscConfig+0x298>)
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	604b      	str	r3, [r1, #4]
 8003e32:	e025      	b.n	8003e80 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003e34:	4b70      	ldr	r3, [pc, #448]	; (8003ff8 <HAL_RCC_OscConfig+0x298>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a6f      	ldr	r2, [pc, #444]	; (8003ff8 <HAL_RCC_OscConfig+0x298>)
 8003e3a:	f043 0308 	orr.w	r3, r3, #8
 8003e3e:	6013      	str	r3, [r2, #0]
 8003e40:	4b6d      	ldr	r3, [pc, #436]	; (8003ff8 <HAL_RCC_OscConfig+0x298>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6a1b      	ldr	r3, [r3, #32]
 8003e4c:	496a      	ldr	r1, [pc, #424]	; (8003ff8 <HAL_RCC_OscConfig+0x298>)
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003e52:	4b69      	ldr	r3, [pc, #420]	; (8003ff8 <HAL_RCC_OscConfig+0x298>)
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	69db      	ldr	r3, [r3, #28]
 8003e5e:	021b      	lsls	r3, r3, #8
 8003e60:	4965      	ldr	r1, [pc, #404]	; (8003ff8 <HAL_RCC_OscConfig+0x298>)
 8003e62:	4313      	orrs	r3, r2
 8003e64:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003e66:	69bb      	ldr	r3, [r7, #24]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d109      	bne.n	8003e80 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6a1b      	ldr	r3, [r3, #32]
 8003e70:	4618      	mov	r0, r3
 8003e72:	f000 fd01 	bl	8004878 <RCC_SetFlashLatencyFromMSIRange>
 8003e76:	4603      	mov	r3, r0
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d001      	beq.n	8003e80 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	e34d      	b.n	800451c <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003e80:	f000 fc36 	bl	80046f0 <HAL_RCC_GetSysClockFreq>
 8003e84:	4602      	mov	r2, r0
 8003e86:	4b5c      	ldr	r3, [pc, #368]	; (8003ff8 <HAL_RCC_OscConfig+0x298>)
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	091b      	lsrs	r3, r3, #4
 8003e8c:	f003 030f 	and.w	r3, r3, #15
 8003e90:	495a      	ldr	r1, [pc, #360]	; (8003ffc <HAL_RCC_OscConfig+0x29c>)
 8003e92:	5ccb      	ldrb	r3, [r1, r3]
 8003e94:	f003 031f 	and.w	r3, r3, #31
 8003e98:	fa22 f303 	lsr.w	r3, r2, r3
 8003e9c:	4a58      	ldr	r2, [pc, #352]	; (8004000 <HAL_RCC_OscConfig+0x2a0>)
 8003e9e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003ea0:	4b58      	ldr	r3, [pc, #352]	; (8004004 <HAL_RCC_OscConfig+0x2a4>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	f7fd fed7 	bl	8001c58 <HAL_InitTick>
 8003eaa:	4603      	mov	r3, r0
 8003eac:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003eae:	7bfb      	ldrb	r3, [r7, #15]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d052      	beq.n	8003f5a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003eb4:	7bfb      	ldrb	r3, [r7, #15]
 8003eb6:	e331      	b.n	800451c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	699b      	ldr	r3, [r3, #24]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d032      	beq.n	8003f26 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003ec0:	4b4d      	ldr	r3, [pc, #308]	; (8003ff8 <HAL_RCC_OscConfig+0x298>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a4c      	ldr	r2, [pc, #304]	; (8003ff8 <HAL_RCC_OscConfig+0x298>)
 8003ec6:	f043 0301 	orr.w	r3, r3, #1
 8003eca:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003ecc:	f7fd ff14 	bl	8001cf8 <HAL_GetTick>
 8003ed0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003ed2:	e008      	b.n	8003ee6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003ed4:	f7fd ff10 	bl	8001cf8 <HAL_GetTick>
 8003ed8:	4602      	mov	r2, r0
 8003eda:	693b      	ldr	r3, [r7, #16]
 8003edc:	1ad3      	subs	r3, r2, r3
 8003ede:	2b02      	cmp	r3, #2
 8003ee0:	d901      	bls.n	8003ee6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003ee2:	2303      	movs	r3, #3
 8003ee4:	e31a      	b.n	800451c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003ee6:	4b44      	ldr	r3, [pc, #272]	; (8003ff8 <HAL_RCC_OscConfig+0x298>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f003 0302 	and.w	r3, r3, #2
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d0f0      	beq.n	8003ed4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003ef2:	4b41      	ldr	r3, [pc, #260]	; (8003ff8 <HAL_RCC_OscConfig+0x298>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a40      	ldr	r2, [pc, #256]	; (8003ff8 <HAL_RCC_OscConfig+0x298>)
 8003ef8:	f043 0308 	orr.w	r3, r3, #8
 8003efc:	6013      	str	r3, [r2, #0]
 8003efe:	4b3e      	ldr	r3, [pc, #248]	; (8003ff8 <HAL_RCC_OscConfig+0x298>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6a1b      	ldr	r3, [r3, #32]
 8003f0a:	493b      	ldr	r1, [pc, #236]	; (8003ff8 <HAL_RCC_OscConfig+0x298>)
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003f10:	4b39      	ldr	r3, [pc, #228]	; (8003ff8 <HAL_RCC_OscConfig+0x298>)
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	69db      	ldr	r3, [r3, #28]
 8003f1c:	021b      	lsls	r3, r3, #8
 8003f1e:	4936      	ldr	r1, [pc, #216]	; (8003ff8 <HAL_RCC_OscConfig+0x298>)
 8003f20:	4313      	orrs	r3, r2
 8003f22:	604b      	str	r3, [r1, #4]
 8003f24:	e01a      	b.n	8003f5c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003f26:	4b34      	ldr	r3, [pc, #208]	; (8003ff8 <HAL_RCC_OscConfig+0x298>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a33      	ldr	r2, [pc, #204]	; (8003ff8 <HAL_RCC_OscConfig+0x298>)
 8003f2c:	f023 0301 	bic.w	r3, r3, #1
 8003f30:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003f32:	f7fd fee1 	bl	8001cf8 <HAL_GetTick>
 8003f36:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003f38:	e008      	b.n	8003f4c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003f3a:	f7fd fedd 	bl	8001cf8 <HAL_GetTick>
 8003f3e:	4602      	mov	r2, r0
 8003f40:	693b      	ldr	r3, [r7, #16]
 8003f42:	1ad3      	subs	r3, r2, r3
 8003f44:	2b02      	cmp	r3, #2
 8003f46:	d901      	bls.n	8003f4c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003f48:	2303      	movs	r3, #3
 8003f4a:	e2e7      	b.n	800451c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003f4c:	4b2a      	ldr	r3, [pc, #168]	; (8003ff8 <HAL_RCC_OscConfig+0x298>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f003 0302 	and.w	r3, r3, #2
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d1f0      	bne.n	8003f3a <HAL_RCC_OscConfig+0x1da>
 8003f58:	e000      	b.n	8003f5c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003f5a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f003 0301 	and.w	r3, r3, #1
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d074      	beq.n	8004052 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003f68:	69bb      	ldr	r3, [r7, #24]
 8003f6a:	2b08      	cmp	r3, #8
 8003f6c:	d005      	beq.n	8003f7a <HAL_RCC_OscConfig+0x21a>
 8003f6e:	69bb      	ldr	r3, [r7, #24]
 8003f70:	2b0c      	cmp	r3, #12
 8003f72:	d10e      	bne.n	8003f92 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003f74:	697b      	ldr	r3, [r7, #20]
 8003f76:	2b03      	cmp	r3, #3
 8003f78:	d10b      	bne.n	8003f92 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f7a:	4b1f      	ldr	r3, [pc, #124]	; (8003ff8 <HAL_RCC_OscConfig+0x298>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d064      	beq.n	8004050 <HAL_RCC_OscConfig+0x2f0>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d160      	bne.n	8004050 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003f8e:	2301      	movs	r3, #1
 8003f90:	e2c4      	b.n	800451c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f9a:	d106      	bne.n	8003faa <HAL_RCC_OscConfig+0x24a>
 8003f9c:	4b16      	ldr	r3, [pc, #88]	; (8003ff8 <HAL_RCC_OscConfig+0x298>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a15      	ldr	r2, [pc, #84]	; (8003ff8 <HAL_RCC_OscConfig+0x298>)
 8003fa2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fa6:	6013      	str	r3, [r2, #0]
 8003fa8:	e01d      	b.n	8003fe6 <HAL_RCC_OscConfig+0x286>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003fb2:	d10c      	bne.n	8003fce <HAL_RCC_OscConfig+0x26e>
 8003fb4:	4b10      	ldr	r3, [pc, #64]	; (8003ff8 <HAL_RCC_OscConfig+0x298>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a0f      	ldr	r2, [pc, #60]	; (8003ff8 <HAL_RCC_OscConfig+0x298>)
 8003fba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003fbe:	6013      	str	r3, [r2, #0]
 8003fc0:	4b0d      	ldr	r3, [pc, #52]	; (8003ff8 <HAL_RCC_OscConfig+0x298>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a0c      	ldr	r2, [pc, #48]	; (8003ff8 <HAL_RCC_OscConfig+0x298>)
 8003fc6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fca:	6013      	str	r3, [r2, #0]
 8003fcc:	e00b      	b.n	8003fe6 <HAL_RCC_OscConfig+0x286>
 8003fce:	4b0a      	ldr	r3, [pc, #40]	; (8003ff8 <HAL_RCC_OscConfig+0x298>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a09      	ldr	r2, [pc, #36]	; (8003ff8 <HAL_RCC_OscConfig+0x298>)
 8003fd4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fd8:	6013      	str	r3, [r2, #0]
 8003fda:	4b07      	ldr	r3, [pc, #28]	; (8003ff8 <HAL_RCC_OscConfig+0x298>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a06      	ldr	r2, [pc, #24]	; (8003ff8 <HAL_RCC_OscConfig+0x298>)
 8003fe0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003fe4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d01c      	beq.n	8004028 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fee:	f7fd fe83 	bl	8001cf8 <HAL_GetTick>
 8003ff2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ff4:	e011      	b.n	800401a <HAL_RCC_OscConfig+0x2ba>
 8003ff6:	bf00      	nop
 8003ff8:	40021000 	.word	0x40021000
 8003ffc:	0800d1c4 	.word	0x0800d1c4
 8004000:	20000008 	.word	0x20000008
 8004004:	2000000c 	.word	0x2000000c
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004008:	f7fd fe76 	bl	8001cf8 <HAL_GetTick>
 800400c:	4602      	mov	r2, r0
 800400e:	693b      	ldr	r3, [r7, #16]
 8004010:	1ad3      	subs	r3, r2, r3
 8004012:	2b64      	cmp	r3, #100	; 0x64
 8004014:	d901      	bls.n	800401a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004016:	2303      	movs	r3, #3
 8004018:	e280      	b.n	800451c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800401a:	4baf      	ldr	r3, [pc, #700]	; (80042d8 <HAL_RCC_OscConfig+0x578>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004022:	2b00      	cmp	r3, #0
 8004024:	d0f0      	beq.n	8004008 <HAL_RCC_OscConfig+0x2a8>
 8004026:	e014      	b.n	8004052 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004028:	f7fd fe66 	bl	8001cf8 <HAL_GetTick>
 800402c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800402e:	e008      	b.n	8004042 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004030:	f7fd fe62 	bl	8001cf8 <HAL_GetTick>
 8004034:	4602      	mov	r2, r0
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	1ad3      	subs	r3, r2, r3
 800403a:	2b64      	cmp	r3, #100	; 0x64
 800403c:	d901      	bls.n	8004042 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800403e:	2303      	movs	r3, #3
 8004040:	e26c      	b.n	800451c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004042:	4ba5      	ldr	r3, [pc, #660]	; (80042d8 <HAL_RCC_OscConfig+0x578>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800404a:	2b00      	cmp	r3, #0
 800404c:	d1f0      	bne.n	8004030 <HAL_RCC_OscConfig+0x2d0>
 800404e:	e000      	b.n	8004052 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004050:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f003 0302 	and.w	r3, r3, #2
 800405a:	2b00      	cmp	r3, #0
 800405c:	d060      	beq.n	8004120 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800405e:	69bb      	ldr	r3, [r7, #24]
 8004060:	2b04      	cmp	r3, #4
 8004062:	d005      	beq.n	8004070 <HAL_RCC_OscConfig+0x310>
 8004064:	69bb      	ldr	r3, [r7, #24]
 8004066:	2b0c      	cmp	r3, #12
 8004068:	d119      	bne.n	800409e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800406a:	697b      	ldr	r3, [r7, #20]
 800406c:	2b02      	cmp	r3, #2
 800406e:	d116      	bne.n	800409e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004070:	4b99      	ldr	r3, [pc, #612]	; (80042d8 <HAL_RCC_OscConfig+0x578>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004078:	2b00      	cmp	r3, #0
 800407a:	d005      	beq.n	8004088 <HAL_RCC_OscConfig+0x328>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	68db      	ldr	r3, [r3, #12]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d101      	bne.n	8004088 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004084:	2301      	movs	r3, #1
 8004086:	e249      	b.n	800451c <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004088:	4b93      	ldr	r3, [pc, #588]	; (80042d8 <HAL_RCC_OscConfig+0x578>)
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	691b      	ldr	r3, [r3, #16]
 8004094:	061b      	lsls	r3, r3, #24
 8004096:	4990      	ldr	r1, [pc, #576]	; (80042d8 <HAL_RCC_OscConfig+0x578>)
 8004098:	4313      	orrs	r3, r2
 800409a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800409c:	e040      	b.n	8004120 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	68db      	ldr	r3, [r3, #12]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d023      	beq.n	80040ee <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80040a6:	4b8c      	ldr	r3, [pc, #560]	; (80042d8 <HAL_RCC_OscConfig+0x578>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a8b      	ldr	r2, [pc, #556]	; (80042d8 <HAL_RCC_OscConfig+0x578>)
 80040ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040b2:	f7fd fe21 	bl	8001cf8 <HAL_GetTick>
 80040b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80040b8:	e008      	b.n	80040cc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80040ba:	f7fd fe1d 	bl	8001cf8 <HAL_GetTick>
 80040be:	4602      	mov	r2, r0
 80040c0:	693b      	ldr	r3, [r7, #16]
 80040c2:	1ad3      	subs	r3, r2, r3
 80040c4:	2b02      	cmp	r3, #2
 80040c6:	d901      	bls.n	80040cc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80040c8:	2303      	movs	r3, #3
 80040ca:	e227      	b.n	800451c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80040cc:	4b82      	ldr	r3, [pc, #520]	; (80042d8 <HAL_RCC_OscConfig+0x578>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d0f0      	beq.n	80040ba <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040d8:	4b7f      	ldr	r3, [pc, #508]	; (80042d8 <HAL_RCC_OscConfig+0x578>)
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	691b      	ldr	r3, [r3, #16]
 80040e4:	061b      	lsls	r3, r3, #24
 80040e6:	497c      	ldr	r1, [pc, #496]	; (80042d8 <HAL_RCC_OscConfig+0x578>)
 80040e8:	4313      	orrs	r3, r2
 80040ea:	604b      	str	r3, [r1, #4]
 80040ec:	e018      	b.n	8004120 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80040ee:	4b7a      	ldr	r3, [pc, #488]	; (80042d8 <HAL_RCC_OscConfig+0x578>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4a79      	ldr	r2, [pc, #484]	; (80042d8 <HAL_RCC_OscConfig+0x578>)
 80040f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80040f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040fa:	f7fd fdfd 	bl	8001cf8 <HAL_GetTick>
 80040fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004100:	e008      	b.n	8004114 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004102:	f7fd fdf9 	bl	8001cf8 <HAL_GetTick>
 8004106:	4602      	mov	r2, r0
 8004108:	693b      	ldr	r3, [r7, #16]
 800410a:	1ad3      	subs	r3, r2, r3
 800410c:	2b02      	cmp	r3, #2
 800410e:	d901      	bls.n	8004114 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004110:	2303      	movs	r3, #3
 8004112:	e203      	b.n	800451c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004114:	4b70      	ldr	r3, [pc, #448]	; (80042d8 <HAL_RCC_OscConfig+0x578>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800411c:	2b00      	cmp	r3, #0
 800411e:	d1f0      	bne.n	8004102 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f003 0308 	and.w	r3, r3, #8
 8004128:	2b00      	cmp	r3, #0
 800412a:	d03c      	beq.n	80041a6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	695b      	ldr	r3, [r3, #20]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d01c      	beq.n	800416e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004134:	4b68      	ldr	r3, [pc, #416]	; (80042d8 <HAL_RCC_OscConfig+0x578>)
 8004136:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800413a:	4a67      	ldr	r2, [pc, #412]	; (80042d8 <HAL_RCC_OscConfig+0x578>)
 800413c:	f043 0301 	orr.w	r3, r3, #1
 8004140:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004144:	f7fd fdd8 	bl	8001cf8 <HAL_GetTick>
 8004148:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800414a:	e008      	b.n	800415e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800414c:	f7fd fdd4 	bl	8001cf8 <HAL_GetTick>
 8004150:	4602      	mov	r2, r0
 8004152:	693b      	ldr	r3, [r7, #16]
 8004154:	1ad3      	subs	r3, r2, r3
 8004156:	2b02      	cmp	r3, #2
 8004158:	d901      	bls.n	800415e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800415a:	2303      	movs	r3, #3
 800415c:	e1de      	b.n	800451c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800415e:	4b5e      	ldr	r3, [pc, #376]	; (80042d8 <HAL_RCC_OscConfig+0x578>)
 8004160:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004164:	f003 0302 	and.w	r3, r3, #2
 8004168:	2b00      	cmp	r3, #0
 800416a:	d0ef      	beq.n	800414c <HAL_RCC_OscConfig+0x3ec>
 800416c:	e01b      	b.n	80041a6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800416e:	4b5a      	ldr	r3, [pc, #360]	; (80042d8 <HAL_RCC_OscConfig+0x578>)
 8004170:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004174:	4a58      	ldr	r2, [pc, #352]	; (80042d8 <HAL_RCC_OscConfig+0x578>)
 8004176:	f023 0301 	bic.w	r3, r3, #1
 800417a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800417e:	f7fd fdbb 	bl	8001cf8 <HAL_GetTick>
 8004182:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004184:	e008      	b.n	8004198 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004186:	f7fd fdb7 	bl	8001cf8 <HAL_GetTick>
 800418a:	4602      	mov	r2, r0
 800418c:	693b      	ldr	r3, [r7, #16]
 800418e:	1ad3      	subs	r3, r2, r3
 8004190:	2b02      	cmp	r3, #2
 8004192:	d901      	bls.n	8004198 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004194:	2303      	movs	r3, #3
 8004196:	e1c1      	b.n	800451c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004198:	4b4f      	ldr	r3, [pc, #316]	; (80042d8 <HAL_RCC_OscConfig+0x578>)
 800419a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800419e:	f003 0302 	and.w	r3, r3, #2
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d1ef      	bne.n	8004186 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f003 0304 	and.w	r3, r3, #4
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	f000 80a6 	beq.w	8004300 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041b4:	2300      	movs	r3, #0
 80041b6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80041b8:	4b47      	ldr	r3, [pc, #284]	; (80042d8 <HAL_RCC_OscConfig+0x578>)
 80041ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d10d      	bne.n	80041e0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041c4:	4b44      	ldr	r3, [pc, #272]	; (80042d8 <HAL_RCC_OscConfig+0x578>)
 80041c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041c8:	4a43      	ldr	r2, [pc, #268]	; (80042d8 <HAL_RCC_OscConfig+0x578>)
 80041ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041ce:	6593      	str	r3, [r2, #88]	; 0x58
 80041d0:	4b41      	ldr	r3, [pc, #260]	; (80042d8 <HAL_RCC_OscConfig+0x578>)
 80041d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041d8:	60bb      	str	r3, [r7, #8]
 80041da:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041dc:	2301      	movs	r3, #1
 80041de:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80041e0:	4b3e      	ldr	r3, [pc, #248]	; (80042dc <HAL_RCC_OscConfig+0x57c>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d118      	bne.n	800421e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80041ec:	4b3b      	ldr	r3, [pc, #236]	; (80042dc <HAL_RCC_OscConfig+0x57c>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a3a      	ldr	r2, [pc, #232]	; (80042dc <HAL_RCC_OscConfig+0x57c>)
 80041f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041f6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041f8:	f7fd fd7e 	bl	8001cf8 <HAL_GetTick>
 80041fc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80041fe:	e008      	b.n	8004212 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004200:	f7fd fd7a 	bl	8001cf8 <HAL_GetTick>
 8004204:	4602      	mov	r2, r0
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	1ad3      	subs	r3, r2, r3
 800420a:	2b02      	cmp	r3, #2
 800420c:	d901      	bls.n	8004212 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800420e:	2303      	movs	r3, #3
 8004210:	e184      	b.n	800451c <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004212:	4b32      	ldr	r3, [pc, #200]	; (80042dc <HAL_RCC_OscConfig+0x57c>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800421a:	2b00      	cmp	r3, #0
 800421c:	d0f0      	beq.n	8004200 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	689b      	ldr	r3, [r3, #8]
 8004222:	2b01      	cmp	r3, #1
 8004224:	d108      	bne.n	8004238 <HAL_RCC_OscConfig+0x4d8>
 8004226:	4b2c      	ldr	r3, [pc, #176]	; (80042d8 <HAL_RCC_OscConfig+0x578>)
 8004228:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800422c:	4a2a      	ldr	r2, [pc, #168]	; (80042d8 <HAL_RCC_OscConfig+0x578>)
 800422e:	f043 0301 	orr.w	r3, r3, #1
 8004232:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004236:	e024      	b.n	8004282 <HAL_RCC_OscConfig+0x522>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	689b      	ldr	r3, [r3, #8]
 800423c:	2b05      	cmp	r3, #5
 800423e:	d110      	bne.n	8004262 <HAL_RCC_OscConfig+0x502>
 8004240:	4b25      	ldr	r3, [pc, #148]	; (80042d8 <HAL_RCC_OscConfig+0x578>)
 8004242:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004246:	4a24      	ldr	r2, [pc, #144]	; (80042d8 <HAL_RCC_OscConfig+0x578>)
 8004248:	f043 0304 	orr.w	r3, r3, #4
 800424c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004250:	4b21      	ldr	r3, [pc, #132]	; (80042d8 <HAL_RCC_OscConfig+0x578>)
 8004252:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004256:	4a20      	ldr	r2, [pc, #128]	; (80042d8 <HAL_RCC_OscConfig+0x578>)
 8004258:	f043 0301 	orr.w	r3, r3, #1
 800425c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004260:	e00f      	b.n	8004282 <HAL_RCC_OscConfig+0x522>
 8004262:	4b1d      	ldr	r3, [pc, #116]	; (80042d8 <HAL_RCC_OscConfig+0x578>)
 8004264:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004268:	4a1b      	ldr	r2, [pc, #108]	; (80042d8 <HAL_RCC_OscConfig+0x578>)
 800426a:	f023 0301 	bic.w	r3, r3, #1
 800426e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004272:	4b19      	ldr	r3, [pc, #100]	; (80042d8 <HAL_RCC_OscConfig+0x578>)
 8004274:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004278:	4a17      	ldr	r2, [pc, #92]	; (80042d8 <HAL_RCC_OscConfig+0x578>)
 800427a:	f023 0304 	bic.w	r3, r3, #4
 800427e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	689b      	ldr	r3, [r3, #8]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d016      	beq.n	80042b8 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800428a:	f7fd fd35 	bl	8001cf8 <HAL_GetTick>
 800428e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004290:	e00a      	b.n	80042a8 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004292:	f7fd fd31 	bl	8001cf8 <HAL_GetTick>
 8004296:	4602      	mov	r2, r0
 8004298:	693b      	ldr	r3, [r7, #16]
 800429a:	1ad3      	subs	r3, r2, r3
 800429c:	f241 3288 	movw	r2, #5000	; 0x1388
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d901      	bls.n	80042a8 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80042a4:	2303      	movs	r3, #3
 80042a6:	e139      	b.n	800451c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042a8:	4b0b      	ldr	r3, [pc, #44]	; (80042d8 <HAL_RCC_OscConfig+0x578>)
 80042aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042ae:	f003 0302 	and.w	r3, r3, #2
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d0ed      	beq.n	8004292 <HAL_RCC_OscConfig+0x532>
 80042b6:	e01a      	b.n	80042ee <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042b8:	f7fd fd1e 	bl	8001cf8 <HAL_GetTick>
 80042bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80042be:	e00f      	b.n	80042e0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042c0:	f7fd fd1a 	bl	8001cf8 <HAL_GetTick>
 80042c4:	4602      	mov	r2, r0
 80042c6:	693b      	ldr	r3, [r7, #16]
 80042c8:	1ad3      	subs	r3, r2, r3
 80042ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d906      	bls.n	80042e0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80042d2:	2303      	movs	r3, #3
 80042d4:	e122      	b.n	800451c <HAL_RCC_OscConfig+0x7bc>
 80042d6:	bf00      	nop
 80042d8:	40021000 	.word	0x40021000
 80042dc:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80042e0:	4b90      	ldr	r3, [pc, #576]	; (8004524 <HAL_RCC_OscConfig+0x7c4>)
 80042e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042e6:	f003 0302 	and.w	r3, r3, #2
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d1e8      	bne.n	80042c0 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80042ee:	7ffb      	ldrb	r3, [r7, #31]
 80042f0:	2b01      	cmp	r3, #1
 80042f2:	d105      	bne.n	8004300 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042f4:	4b8b      	ldr	r3, [pc, #556]	; (8004524 <HAL_RCC_OscConfig+0x7c4>)
 80042f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042f8:	4a8a      	ldr	r2, [pc, #552]	; (8004524 <HAL_RCC_OscConfig+0x7c4>)
 80042fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042fe:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004304:	2b00      	cmp	r3, #0
 8004306:	f000 8108 	beq.w	800451a <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800430e:	2b02      	cmp	r3, #2
 8004310:	f040 80d0 	bne.w	80044b4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004314:	4b83      	ldr	r3, [pc, #524]	; (8004524 <HAL_RCC_OscConfig+0x7c4>)
 8004316:	68db      	ldr	r3, [r3, #12]
 8004318:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800431a:	697b      	ldr	r3, [r7, #20]
 800431c:	f003 0203 	and.w	r2, r3, #3
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004324:	429a      	cmp	r2, r3
 8004326:	d130      	bne.n	800438a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004328:	697b      	ldr	r3, [r7, #20]
 800432a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004332:	3b01      	subs	r3, #1
 8004334:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004336:	429a      	cmp	r2, r3
 8004338:	d127      	bne.n	800438a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800433a:	697b      	ldr	r3, [r7, #20]
 800433c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004344:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004346:	429a      	cmp	r2, r3
 8004348:	d11f      	bne.n	800438a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800434a:	697b      	ldr	r3, [r7, #20]
 800434c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004350:	687a      	ldr	r2, [r7, #4]
 8004352:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004354:	2a07      	cmp	r2, #7
 8004356:	bf14      	ite	ne
 8004358:	2201      	movne	r2, #1
 800435a:	2200      	moveq	r2, #0
 800435c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800435e:	4293      	cmp	r3, r2
 8004360:	d113      	bne.n	800438a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004362:	697b      	ldr	r3, [r7, #20]
 8004364:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800436c:	085b      	lsrs	r3, r3, #1
 800436e:	3b01      	subs	r3, #1
 8004370:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004372:	429a      	cmp	r2, r3
 8004374:	d109      	bne.n	800438a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004376:	697b      	ldr	r3, [r7, #20]
 8004378:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004380:	085b      	lsrs	r3, r3, #1
 8004382:	3b01      	subs	r3, #1
 8004384:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004386:	429a      	cmp	r2, r3
 8004388:	d06e      	beq.n	8004468 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800438a:	69bb      	ldr	r3, [r7, #24]
 800438c:	2b0c      	cmp	r3, #12
 800438e:	d069      	beq.n	8004464 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004390:	4b64      	ldr	r3, [pc, #400]	; (8004524 <HAL_RCC_OscConfig+0x7c4>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004398:	2b00      	cmp	r3, #0
 800439a:	d105      	bne.n	80043a8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800439c:	4b61      	ldr	r3, [pc, #388]	; (8004524 <HAL_RCC_OscConfig+0x7c4>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d001      	beq.n	80043ac <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80043a8:	2301      	movs	r3, #1
 80043aa:	e0b7      	b.n	800451c <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80043ac:	4b5d      	ldr	r3, [pc, #372]	; (8004524 <HAL_RCC_OscConfig+0x7c4>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a5c      	ldr	r2, [pc, #368]	; (8004524 <HAL_RCC_OscConfig+0x7c4>)
 80043b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80043b6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80043b8:	f7fd fc9e 	bl	8001cf8 <HAL_GetTick>
 80043bc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043be:	e008      	b.n	80043d2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043c0:	f7fd fc9a 	bl	8001cf8 <HAL_GetTick>
 80043c4:	4602      	mov	r2, r0
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	1ad3      	subs	r3, r2, r3
 80043ca:	2b02      	cmp	r3, #2
 80043cc:	d901      	bls.n	80043d2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80043ce:	2303      	movs	r3, #3
 80043d0:	e0a4      	b.n	800451c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043d2:	4b54      	ldr	r3, [pc, #336]	; (8004524 <HAL_RCC_OscConfig+0x7c4>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d1f0      	bne.n	80043c0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80043de:	4b51      	ldr	r3, [pc, #324]	; (8004524 <HAL_RCC_OscConfig+0x7c4>)
 80043e0:	68da      	ldr	r2, [r3, #12]
 80043e2:	4b51      	ldr	r3, [pc, #324]	; (8004528 <HAL_RCC_OscConfig+0x7c8>)
 80043e4:	4013      	ands	r3, r2
 80043e6:	687a      	ldr	r2, [r7, #4]
 80043e8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80043ea:	687a      	ldr	r2, [r7, #4]
 80043ec:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80043ee:	3a01      	subs	r2, #1
 80043f0:	0112      	lsls	r2, r2, #4
 80043f2:	4311      	orrs	r1, r2
 80043f4:	687a      	ldr	r2, [r7, #4]
 80043f6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80043f8:	0212      	lsls	r2, r2, #8
 80043fa:	4311      	orrs	r1, r2
 80043fc:	687a      	ldr	r2, [r7, #4]
 80043fe:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004400:	0852      	lsrs	r2, r2, #1
 8004402:	3a01      	subs	r2, #1
 8004404:	0552      	lsls	r2, r2, #21
 8004406:	4311      	orrs	r1, r2
 8004408:	687a      	ldr	r2, [r7, #4]
 800440a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800440c:	0852      	lsrs	r2, r2, #1
 800440e:	3a01      	subs	r2, #1
 8004410:	0652      	lsls	r2, r2, #25
 8004412:	4311      	orrs	r1, r2
 8004414:	687a      	ldr	r2, [r7, #4]
 8004416:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004418:	0912      	lsrs	r2, r2, #4
 800441a:	0452      	lsls	r2, r2, #17
 800441c:	430a      	orrs	r2, r1
 800441e:	4941      	ldr	r1, [pc, #260]	; (8004524 <HAL_RCC_OscConfig+0x7c4>)
 8004420:	4313      	orrs	r3, r2
 8004422:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004424:	4b3f      	ldr	r3, [pc, #252]	; (8004524 <HAL_RCC_OscConfig+0x7c4>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a3e      	ldr	r2, [pc, #248]	; (8004524 <HAL_RCC_OscConfig+0x7c4>)
 800442a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800442e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004430:	4b3c      	ldr	r3, [pc, #240]	; (8004524 <HAL_RCC_OscConfig+0x7c4>)
 8004432:	68db      	ldr	r3, [r3, #12]
 8004434:	4a3b      	ldr	r2, [pc, #236]	; (8004524 <HAL_RCC_OscConfig+0x7c4>)
 8004436:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800443a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800443c:	f7fd fc5c 	bl	8001cf8 <HAL_GetTick>
 8004440:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004442:	e008      	b.n	8004456 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004444:	f7fd fc58 	bl	8001cf8 <HAL_GetTick>
 8004448:	4602      	mov	r2, r0
 800444a:	693b      	ldr	r3, [r7, #16]
 800444c:	1ad3      	subs	r3, r2, r3
 800444e:	2b02      	cmp	r3, #2
 8004450:	d901      	bls.n	8004456 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004452:	2303      	movs	r3, #3
 8004454:	e062      	b.n	800451c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004456:	4b33      	ldr	r3, [pc, #204]	; (8004524 <HAL_RCC_OscConfig+0x7c4>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800445e:	2b00      	cmp	r3, #0
 8004460:	d0f0      	beq.n	8004444 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004462:	e05a      	b.n	800451a <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004464:	2301      	movs	r3, #1
 8004466:	e059      	b.n	800451c <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004468:	4b2e      	ldr	r3, [pc, #184]	; (8004524 <HAL_RCC_OscConfig+0x7c4>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004470:	2b00      	cmp	r3, #0
 8004472:	d152      	bne.n	800451a <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004474:	4b2b      	ldr	r3, [pc, #172]	; (8004524 <HAL_RCC_OscConfig+0x7c4>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a2a      	ldr	r2, [pc, #168]	; (8004524 <HAL_RCC_OscConfig+0x7c4>)
 800447a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800447e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004480:	4b28      	ldr	r3, [pc, #160]	; (8004524 <HAL_RCC_OscConfig+0x7c4>)
 8004482:	68db      	ldr	r3, [r3, #12]
 8004484:	4a27      	ldr	r2, [pc, #156]	; (8004524 <HAL_RCC_OscConfig+0x7c4>)
 8004486:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800448a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800448c:	f7fd fc34 	bl	8001cf8 <HAL_GetTick>
 8004490:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004492:	e008      	b.n	80044a6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004494:	f7fd fc30 	bl	8001cf8 <HAL_GetTick>
 8004498:	4602      	mov	r2, r0
 800449a:	693b      	ldr	r3, [r7, #16]
 800449c:	1ad3      	subs	r3, r2, r3
 800449e:	2b02      	cmp	r3, #2
 80044a0:	d901      	bls.n	80044a6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80044a2:	2303      	movs	r3, #3
 80044a4:	e03a      	b.n	800451c <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80044a6:	4b1f      	ldr	r3, [pc, #124]	; (8004524 <HAL_RCC_OscConfig+0x7c4>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d0f0      	beq.n	8004494 <HAL_RCC_OscConfig+0x734>
 80044b2:	e032      	b.n	800451a <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80044b4:	69bb      	ldr	r3, [r7, #24]
 80044b6:	2b0c      	cmp	r3, #12
 80044b8:	d02d      	beq.n	8004516 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044ba:	4b1a      	ldr	r3, [pc, #104]	; (8004524 <HAL_RCC_OscConfig+0x7c4>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a19      	ldr	r2, [pc, #100]	; (8004524 <HAL_RCC_OscConfig+0x7c4>)
 80044c0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80044c4:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80044c6:	4b17      	ldr	r3, [pc, #92]	; (8004524 <HAL_RCC_OscConfig+0x7c4>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d105      	bne.n	80044de <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80044d2:	4b14      	ldr	r3, [pc, #80]	; (8004524 <HAL_RCC_OscConfig+0x7c4>)
 80044d4:	68db      	ldr	r3, [r3, #12]
 80044d6:	4a13      	ldr	r2, [pc, #76]	; (8004524 <HAL_RCC_OscConfig+0x7c4>)
 80044d8:	f023 0303 	bic.w	r3, r3, #3
 80044dc:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80044de:	4b11      	ldr	r3, [pc, #68]	; (8004524 <HAL_RCC_OscConfig+0x7c4>)
 80044e0:	68db      	ldr	r3, [r3, #12]
 80044e2:	4a10      	ldr	r2, [pc, #64]	; (8004524 <HAL_RCC_OscConfig+0x7c4>)
 80044e4:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80044e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044ec:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044ee:	f7fd fc03 	bl	8001cf8 <HAL_GetTick>
 80044f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80044f4:	e008      	b.n	8004508 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044f6:	f7fd fbff 	bl	8001cf8 <HAL_GetTick>
 80044fa:	4602      	mov	r2, r0
 80044fc:	693b      	ldr	r3, [r7, #16]
 80044fe:	1ad3      	subs	r3, r2, r3
 8004500:	2b02      	cmp	r3, #2
 8004502:	d901      	bls.n	8004508 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8004504:	2303      	movs	r3, #3
 8004506:	e009      	b.n	800451c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004508:	4b06      	ldr	r3, [pc, #24]	; (8004524 <HAL_RCC_OscConfig+0x7c4>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004510:	2b00      	cmp	r3, #0
 8004512:	d1f0      	bne.n	80044f6 <HAL_RCC_OscConfig+0x796>
 8004514:	e001      	b.n	800451a <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004516:	2301      	movs	r3, #1
 8004518:	e000      	b.n	800451c <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 800451a:	2300      	movs	r3, #0
}
 800451c:	4618      	mov	r0, r3
 800451e:	3720      	adds	r7, #32
 8004520:	46bd      	mov	sp, r7
 8004522:	bd80      	pop	{r7, pc}
 8004524:	40021000 	.word	0x40021000
 8004528:	f99d808c 	.word	0xf99d808c

0800452c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b084      	sub	sp, #16
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
 8004534:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d101      	bne.n	8004540 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800453c:	2301      	movs	r3, #1
 800453e:	e0c8      	b.n	80046d2 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004540:	4b66      	ldr	r3, [pc, #408]	; (80046dc <HAL_RCC_ClockConfig+0x1b0>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f003 0307 	and.w	r3, r3, #7
 8004548:	683a      	ldr	r2, [r7, #0]
 800454a:	429a      	cmp	r2, r3
 800454c:	d910      	bls.n	8004570 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800454e:	4b63      	ldr	r3, [pc, #396]	; (80046dc <HAL_RCC_ClockConfig+0x1b0>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f023 0207 	bic.w	r2, r3, #7
 8004556:	4961      	ldr	r1, [pc, #388]	; (80046dc <HAL_RCC_ClockConfig+0x1b0>)
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	4313      	orrs	r3, r2
 800455c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800455e:	4b5f      	ldr	r3, [pc, #380]	; (80046dc <HAL_RCC_ClockConfig+0x1b0>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f003 0307 	and.w	r3, r3, #7
 8004566:	683a      	ldr	r2, [r7, #0]
 8004568:	429a      	cmp	r2, r3
 800456a:	d001      	beq.n	8004570 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800456c:	2301      	movs	r3, #1
 800456e:	e0b0      	b.n	80046d2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f003 0301 	and.w	r3, r3, #1
 8004578:	2b00      	cmp	r3, #0
 800457a:	d04c      	beq.n	8004616 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	2b03      	cmp	r3, #3
 8004582:	d107      	bne.n	8004594 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004584:	4b56      	ldr	r3, [pc, #344]	; (80046e0 <HAL_RCC_ClockConfig+0x1b4>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800458c:	2b00      	cmp	r3, #0
 800458e:	d121      	bne.n	80045d4 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8004590:	2301      	movs	r3, #1
 8004592:	e09e      	b.n	80046d2 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	2b02      	cmp	r3, #2
 800459a:	d107      	bne.n	80045ac <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800459c:	4b50      	ldr	r3, [pc, #320]	; (80046e0 <HAL_RCC_ClockConfig+0x1b4>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d115      	bne.n	80045d4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80045a8:	2301      	movs	r3, #1
 80045aa:	e092      	b.n	80046d2 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d107      	bne.n	80045c4 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80045b4:	4b4a      	ldr	r3, [pc, #296]	; (80046e0 <HAL_RCC_ClockConfig+0x1b4>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f003 0302 	and.w	r3, r3, #2
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d109      	bne.n	80045d4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80045c0:	2301      	movs	r3, #1
 80045c2:	e086      	b.n	80046d2 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80045c4:	4b46      	ldr	r3, [pc, #280]	; (80046e0 <HAL_RCC_ClockConfig+0x1b4>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d101      	bne.n	80045d4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80045d0:	2301      	movs	r3, #1
 80045d2:	e07e      	b.n	80046d2 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80045d4:	4b42      	ldr	r3, [pc, #264]	; (80046e0 <HAL_RCC_ClockConfig+0x1b4>)
 80045d6:	689b      	ldr	r3, [r3, #8]
 80045d8:	f023 0203 	bic.w	r2, r3, #3
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	493f      	ldr	r1, [pc, #252]	; (80046e0 <HAL_RCC_ClockConfig+0x1b4>)
 80045e2:	4313      	orrs	r3, r2
 80045e4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045e6:	f7fd fb87 	bl	8001cf8 <HAL_GetTick>
 80045ea:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045ec:	e00a      	b.n	8004604 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045ee:	f7fd fb83 	bl	8001cf8 <HAL_GetTick>
 80045f2:	4602      	mov	r2, r0
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	1ad3      	subs	r3, r2, r3
 80045f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d901      	bls.n	8004604 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8004600:	2303      	movs	r3, #3
 8004602:	e066      	b.n	80046d2 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004604:	4b36      	ldr	r3, [pc, #216]	; (80046e0 <HAL_RCC_ClockConfig+0x1b4>)
 8004606:	689b      	ldr	r3, [r3, #8]
 8004608:	f003 020c 	and.w	r2, r3, #12
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	009b      	lsls	r3, r3, #2
 8004612:	429a      	cmp	r2, r3
 8004614:	d1eb      	bne.n	80045ee <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f003 0302 	and.w	r3, r3, #2
 800461e:	2b00      	cmp	r3, #0
 8004620:	d008      	beq.n	8004634 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004622:	4b2f      	ldr	r3, [pc, #188]	; (80046e0 <HAL_RCC_ClockConfig+0x1b4>)
 8004624:	689b      	ldr	r3, [r3, #8]
 8004626:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	689b      	ldr	r3, [r3, #8]
 800462e:	492c      	ldr	r1, [pc, #176]	; (80046e0 <HAL_RCC_ClockConfig+0x1b4>)
 8004630:	4313      	orrs	r3, r2
 8004632:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004634:	4b29      	ldr	r3, [pc, #164]	; (80046dc <HAL_RCC_ClockConfig+0x1b0>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f003 0307 	and.w	r3, r3, #7
 800463c:	683a      	ldr	r2, [r7, #0]
 800463e:	429a      	cmp	r2, r3
 8004640:	d210      	bcs.n	8004664 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004642:	4b26      	ldr	r3, [pc, #152]	; (80046dc <HAL_RCC_ClockConfig+0x1b0>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f023 0207 	bic.w	r2, r3, #7
 800464a:	4924      	ldr	r1, [pc, #144]	; (80046dc <HAL_RCC_ClockConfig+0x1b0>)
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	4313      	orrs	r3, r2
 8004650:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004652:	4b22      	ldr	r3, [pc, #136]	; (80046dc <HAL_RCC_ClockConfig+0x1b0>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f003 0307 	and.w	r3, r3, #7
 800465a:	683a      	ldr	r2, [r7, #0]
 800465c:	429a      	cmp	r2, r3
 800465e:	d001      	beq.n	8004664 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8004660:	2301      	movs	r3, #1
 8004662:	e036      	b.n	80046d2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f003 0304 	and.w	r3, r3, #4
 800466c:	2b00      	cmp	r3, #0
 800466e:	d008      	beq.n	8004682 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004670:	4b1b      	ldr	r3, [pc, #108]	; (80046e0 <HAL_RCC_ClockConfig+0x1b4>)
 8004672:	689b      	ldr	r3, [r3, #8]
 8004674:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	68db      	ldr	r3, [r3, #12]
 800467c:	4918      	ldr	r1, [pc, #96]	; (80046e0 <HAL_RCC_ClockConfig+0x1b4>)
 800467e:	4313      	orrs	r3, r2
 8004680:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f003 0308 	and.w	r3, r3, #8
 800468a:	2b00      	cmp	r3, #0
 800468c:	d009      	beq.n	80046a2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800468e:	4b14      	ldr	r3, [pc, #80]	; (80046e0 <HAL_RCC_ClockConfig+0x1b4>)
 8004690:	689b      	ldr	r3, [r3, #8]
 8004692:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	691b      	ldr	r3, [r3, #16]
 800469a:	00db      	lsls	r3, r3, #3
 800469c:	4910      	ldr	r1, [pc, #64]	; (80046e0 <HAL_RCC_ClockConfig+0x1b4>)
 800469e:	4313      	orrs	r3, r2
 80046a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80046a2:	f000 f825 	bl	80046f0 <HAL_RCC_GetSysClockFreq>
 80046a6:	4602      	mov	r2, r0
 80046a8:	4b0d      	ldr	r3, [pc, #52]	; (80046e0 <HAL_RCC_ClockConfig+0x1b4>)
 80046aa:	689b      	ldr	r3, [r3, #8]
 80046ac:	091b      	lsrs	r3, r3, #4
 80046ae:	f003 030f 	and.w	r3, r3, #15
 80046b2:	490c      	ldr	r1, [pc, #48]	; (80046e4 <HAL_RCC_ClockConfig+0x1b8>)
 80046b4:	5ccb      	ldrb	r3, [r1, r3]
 80046b6:	f003 031f 	and.w	r3, r3, #31
 80046ba:	fa22 f303 	lsr.w	r3, r2, r3
 80046be:	4a0a      	ldr	r2, [pc, #40]	; (80046e8 <HAL_RCC_ClockConfig+0x1bc>)
 80046c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80046c2:	4b0a      	ldr	r3, [pc, #40]	; (80046ec <HAL_RCC_ClockConfig+0x1c0>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4618      	mov	r0, r3
 80046c8:	f7fd fac6 	bl	8001c58 <HAL_InitTick>
 80046cc:	4603      	mov	r3, r0
 80046ce:	72fb      	strb	r3, [r7, #11]

  return status;
 80046d0:	7afb      	ldrb	r3, [r7, #11]
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	3710      	adds	r7, #16
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}
 80046da:	bf00      	nop
 80046dc:	40022000 	.word	0x40022000
 80046e0:	40021000 	.word	0x40021000
 80046e4:	0800d1c4 	.word	0x0800d1c4
 80046e8:	20000008 	.word	0x20000008
 80046ec:	2000000c 	.word	0x2000000c

080046f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80046f0:	b480      	push	{r7}
 80046f2:	b089      	sub	sp, #36	; 0x24
 80046f4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80046f6:	2300      	movs	r3, #0
 80046f8:	61fb      	str	r3, [r7, #28]
 80046fa:	2300      	movs	r3, #0
 80046fc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80046fe:	4b3e      	ldr	r3, [pc, #248]	; (80047f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004700:	689b      	ldr	r3, [r3, #8]
 8004702:	f003 030c 	and.w	r3, r3, #12
 8004706:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004708:	4b3b      	ldr	r3, [pc, #236]	; (80047f8 <HAL_RCC_GetSysClockFreq+0x108>)
 800470a:	68db      	ldr	r3, [r3, #12]
 800470c:	f003 0303 	and.w	r3, r3, #3
 8004710:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004712:	693b      	ldr	r3, [r7, #16]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d005      	beq.n	8004724 <HAL_RCC_GetSysClockFreq+0x34>
 8004718:	693b      	ldr	r3, [r7, #16]
 800471a:	2b0c      	cmp	r3, #12
 800471c:	d121      	bne.n	8004762 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	2b01      	cmp	r3, #1
 8004722:	d11e      	bne.n	8004762 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004724:	4b34      	ldr	r3, [pc, #208]	; (80047f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f003 0308 	and.w	r3, r3, #8
 800472c:	2b00      	cmp	r3, #0
 800472e:	d107      	bne.n	8004740 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004730:	4b31      	ldr	r3, [pc, #196]	; (80047f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004732:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004736:	0a1b      	lsrs	r3, r3, #8
 8004738:	f003 030f 	and.w	r3, r3, #15
 800473c:	61fb      	str	r3, [r7, #28]
 800473e:	e005      	b.n	800474c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004740:	4b2d      	ldr	r3, [pc, #180]	; (80047f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	091b      	lsrs	r3, r3, #4
 8004746:	f003 030f 	and.w	r3, r3, #15
 800474a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800474c:	4a2b      	ldr	r2, [pc, #172]	; (80047fc <HAL_RCC_GetSysClockFreq+0x10c>)
 800474e:	69fb      	ldr	r3, [r7, #28]
 8004750:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004754:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004756:	693b      	ldr	r3, [r7, #16]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d10d      	bne.n	8004778 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800475c:	69fb      	ldr	r3, [r7, #28]
 800475e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004760:	e00a      	b.n	8004778 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004762:	693b      	ldr	r3, [r7, #16]
 8004764:	2b04      	cmp	r3, #4
 8004766:	d102      	bne.n	800476e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004768:	4b25      	ldr	r3, [pc, #148]	; (8004800 <HAL_RCC_GetSysClockFreq+0x110>)
 800476a:	61bb      	str	r3, [r7, #24]
 800476c:	e004      	b.n	8004778 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800476e:	693b      	ldr	r3, [r7, #16]
 8004770:	2b08      	cmp	r3, #8
 8004772:	d101      	bne.n	8004778 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004774:	4b23      	ldr	r3, [pc, #140]	; (8004804 <HAL_RCC_GetSysClockFreq+0x114>)
 8004776:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004778:	693b      	ldr	r3, [r7, #16]
 800477a:	2b0c      	cmp	r3, #12
 800477c:	d134      	bne.n	80047e8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800477e:	4b1e      	ldr	r3, [pc, #120]	; (80047f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004780:	68db      	ldr	r3, [r3, #12]
 8004782:	f003 0303 	and.w	r3, r3, #3
 8004786:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	2b02      	cmp	r3, #2
 800478c:	d003      	beq.n	8004796 <HAL_RCC_GetSysClockFreq+0xa6>
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	2b03      	cmp	r3, #3
 8004792:	d003      	beq.n	800479c <HAL_RCC_GetSysClockFreq+0xac>
 8004794:	e005      	b.n	80047a2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004796:	4b1a      	ldr	r3, [pc, #104]	; (8004800 <HAL_RCC_GetSysClockFreq+0x110>)
 8004798:	617b      	str	r3, [r7, #20]
      break;
 800479a:	e005      	b.n	80047a8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800479c:	4b19      	ldr	r3, [pc, #100]	; (8004804 <HAL_RCC_GetSysClockFreq+0x114>)
 800479e:	617b      	str	r3, [r7, #20]
      break;
 80047a0:	e002      	b.n	80047a8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80047a2:	69fb      	ldr	r3, [r7, #28]
 80047a4:	617b      	str	r3, [r7, #20]
      break;
 80047a6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80047a8:	4b13      	ldr	r3, [pc, #76]	; (80047f8 <HAL_RCC_GetSysClockFreq+0x108>)
 80047aa:	68db      	ldr	r3, [r3, #12]
 80047ac:	091b      	lsrs	r3, r3, #4
 80047ae:	f003 0307 	and.w	r3, r3, #7
 80047b2:	3301      	adds	r3, #1
 80047b4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80047b6:	4b10      	ldr	r3, [pc, #64]	; (80047f8 <HAL_RCC_GetSysClockFreq+0x108>)
 80047b8:	68db      	ldr	r3, [r3, #12]
 80047ba:	0a1b      	lsrs	r3, r3, #8
 80047bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80047c0:	697a      	ldr	r2, [r7, #20]
 80047c2:	fb02 f203 	mul.w	r2, r2, r3
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80047cc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80047ce:	4b0a      	ldr	r3, [pc, #40]	; (80047f8 <HAL_RCC_GetSysClockFreq+0x108>)
 80047d0:	68db      	ldr	r3, [r3, #12]
 80047d2:	0e5b      	lsrs	r3, r3, #25
 80047d4:	f003 0303 	and.w	r3, r3, #3
 80047d8:	3301      	adds	r3, #1
 80047da:	005b      	lsls	r3, r3, #1
 80047dc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80047de:	697a      	ldr	r2, [r7, #20]
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80047e6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80047e8:	69bb      	ldr	r3, [r7, #24]
}
 80047ea:	4618      	mov	r0, r3
 80047ec:	3724      	adds	r7, #36	; 0x24
 80047ee:	46bd      	mov	sp, r7
 80047f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f4:	4770      	bx	lr
 80047f6:	bf00      	nop
 80047f8:	40021000 	.word	0x40021000
 80047fc:	0800d1dc 	.word	0x0800d1dc
 8004800:	00f42400 	.word	0x00f42400
 8004804:	007a1200 	.word	0x007a1200

08004808 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004808:	b480      	push	{r7}
 800480a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800480c:	4b03      	ldr	r3, [pc, #12]	; (800481c <HAL_RCC_GetHCLKFreq+0x14>)
 800480e:	681b      	ldr	r3, [r3, #0]
}
 8004810:	4618      	mov	r0, r3
 8004812:	46bd      	mov	sp, r7
 8004814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004818:	4770      	bx	lr
 800481a:	bf00      	nop
 800481c:	20000008 	.word	0x20000008

08004820 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004824:	f7ff fff0 	bl	8004808 <HAL_RCC_GetHCLKFreq>
 8004828:	4602      	mov	r2, r0
 800482a:	4b06      	ldr	r3, [pc, #24]	; (8004844 <HAL_RCC_GetPCLK1Freq+0x24>)
 800482c:	689b      	ldr	r3, [r3, #8]
 800482e:	0a1b      	lsrs	r3, r3, #8
 8004830:	f003 0307 	and.w	r3, r3, #7
 8004834:	4904      	ldr	r1, [pc, #16]	; (8004848 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004836:	5ccb      	ldrb	r3, [r1, r3]
 8004838:	f003 031f 	and.w	r3, r3, #31
 800483c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004840:	4618      	mov	r0, r3
 8004842:	bd80      	pop	{r7, pc}
 8004844:	40021000 	.word	0x40021000
 8004848:	0800d1d4 	.word	0x0800d1d4

0800484c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004850:	f7ff ffda 	bl	8004808 <HAL_RCC_GetHCLKFreq>
 8004854:	4602      	mov	r2, r0
 8004856:	4b06      	ldr	r3, [pc, #24]	; (8004870 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004858:	689b      	ldr	r3, [r3, #8]
 800485a:	0adb      	lsrs	r3, r3, #11
 800485c:	f003 0307 	and.w	r3, r3, #7
 8004860:	4904      	ldr	r1, [pc, #16]	; (8004874 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004862:	5ccb      	ldrb	r3, [r1, r3]
 8004864:	f003 031f 	and.w	r3, r3, #31
 8004868:	fa22 f303 	lsr.w	r3, r2, r3
}
 800486c:	4618      	mov	r0, r3
 800486e:	bd80      	pop	{r7, pc}
 8004870:	40021000 	.word	0x40021000
 8004874:	0800d1d4 	.word	0x0800d1d4

08004878 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b086      	sub	sp, #24
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004880:	2300      	movs	r3, #0
 8004882:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004884:	4b2a      	ldr	r3, [pc, #168]	; (8004930 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004886:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004888:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800488c:	2b00      	cmp	r3, #0
 800488e:	d003      	beq.n	8004898 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004890:	f7ff fa02 	bl	8003c98 <HAL_PWREx_GetVoltageRange>
 8004894:	6178      	str	r0, [r7, #20]
 8004896:	e014      	b.n	80048c2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004898:	4b25      	ldr	r3, [pc, #148]	; (8004930 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800489a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800489c:	4a24      	ldr	r2, [pc, #144]	; (8004930 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800489e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048a2:	6593      	str	r3, [r2, #88]	; 0x58
 80048a4:	4b22      	ldr	r3, [pc, #136]	; (8004930 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80048a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048ac:	60fb      	str	r3, [r7, #12]
 80048ae:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80048b0:	f7ff f9f2 	bl	8003c98 <HAL_PWREx_GetVoltageRange>
 80048b4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80048b6:	4b1e      	ldr	r3, [pc, #120]	; (8004930 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80048b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048ba:	4a1d      	ldr	r2, [pc, #116]	; (8004930 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80048bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048c0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80048c2:	697b      	ldr	r3, [r7, #20]
 80048c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048c8:	d10b      	bne.n	80048e2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2b80      	cmp	r3, #128	; 0x80
 80048ce:	d919      	bls.n	8004904 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2ba0      	cmp	r3, #160	; 0xa0
 80048d4:	d902      	bls.n	80048dc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80048d6:	2302      	movs	r3, #2
 80048d8:	613b      	str	r3, [r7, #16]
 80048da:	e013      	b.n	8004904 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80048dc:	2301      	movs	r3, #1
 80048de:	613b      	str	r3, [r7, #16]
 80048e0:	e010      	b.n	8004904 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2b80      	cmp	r3, #128	; 0x80
 80048e6:	d902      	bls.n	80048ee <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80048e8:	2303      	movs	r3, #3
 80048ea:	613b      	str	r3, [r7, #16]
 80048ec:	e00a      	b.n	8004904 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2b80      	cmp	r3, #128	; 0x80
 80048f2:	d102      	bne.n	80048fa <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80048f4:	2302      	movs	r3, #2
 80048f6:	613b      	str	r3, [r7, #16]
 80048f8:	e004      	b.n	8004904 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2b70      	cmp	r3, #112	; 0x70
 80048fe:	d101      	bne.n	8004904 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004900:	2301      	movs	r3, #1
 8004902:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004904:	4b0b      	ldr	r3, [pc, #44]	; (8004934 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f023 0207 	bic.w	r2, r3, #7
 800490c:	4909      	ldr	r1, [pc, #36]	; (8004934 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800490e:	693b      	ldr	r3, [r7, #16]
 8004910:	4313      	orrs	r3, r2
 8004912:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004914:	4b07      	ldr	r3, [pc, #28]	; (8004934 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f003 0307 	and.w	r3, r3, #7
 800491c:	693a      	ldr	r2, [r7, #16]
 800491e:	429a      	cmp	r2, r3
 8004920:	d001      	beq.n	8004926 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004922:	2301      	movs	r3, #1
 8004924:	e000      	b.n	8004928 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004926:	2300      	movs	r3, #0
}
 8004928:	4618      	mov	r0, r3
 800492a:	3718      	adds	r7, #24
 800492c:	46bd      	mov	sp, r7
 800492e:	bd80      	pop	{r7, pc}
 8004930:	40021000 	.word	0x40021000
 8004934:	40022000 	.word	0x40022000

08004938 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b086      	sub	sp, #24
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004940:	2300      	movs	r3, #0
 8004942:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004944:	2300      	movs	r3, #0
 8004946:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004950:	2b00      	cmp	r3, #0
 8004952:	d041      	beq.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004958:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800495c:	d02a      	beq.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800495e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004962:	d824      	bhi.n	80049ae <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004964:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004968:	d008      	beq.n	800497c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800496a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800496e:	d81e      	bhi.n	80049ae <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004970:	2b00      	cmp	r3, #0
 8004972:	d00a      	beq.n	800498a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004974:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004978:	d010      	beq.n	800499c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800497a:	e018      	b.n	80049ae <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800497c:	4b86      	ldr	r3, [pc, #536]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800497e:	68db      	ldr	r3, [r3, #12]
 8004980:	4a85      	ldr	r2, [pc, #532]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004982:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004986:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004988:	e015      	b.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	3304      	adds	r3, #4
 800498e:	2100      	movs	r1, #0
 8004990:	4618      	mov	r0, r3
 8004992:	f000 fabb 	bl	8004f0c <RCCEx_PLLSAI1_Config>
 8004996:	4603      	mov	r3, r0
 8004998:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800499a:	e00c      	b.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	3320      	adds	r3, #32
 80049a0:	2100      	movs	r1, #0
 80049a2:	4618      	mov	r0, r3
 80049a4:	f000 fba6 	bl	80050f4 <RCCEx_PLLSAI2_Config>
 80049a8:	4603      	mov	r3, r0
 80049aa:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80049ac:	e003      	b.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80049ae:	2301      	movs	r3, #1
 80049b0:	74fb      	strb	r3, [r7, #19]
      break;
 80049b2:	e000      	b.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80049b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80049b6:	7cfb      	ldrb	r3, [r7, #19]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d10b      	bne.n	80049d4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80049bc:	4b76      	ldr	r3, [pc, #472]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049c2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80049ca:	4973      	ldr	r1, [pc, #460]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049cc:	4313      	orrs	r3, r2
 80049ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80049d2:	e001      	b.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049d4:	7cfb      	ldrb	r3, [r7, #19]
 80049d6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d041      	beq.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80049e8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80049ec:	d02a      	beq.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80049ee:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80049f2:	d824      	bhi.n	8004a3e <HAL_RCCEx_PeriphCLKConfig+0x106>
 80049f4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80049f8:	d008      	beq.n	8004a0c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80049fa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80049fe:	d81e      	bhi.n	8004a3e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d00a      	beq.n	8004a1a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004a04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004a08:	d010      	beq.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004a0a:	e018      	b.n	8004a3e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004a0c:	4b62      	ldr	r3, [pc, #392]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a0e:	68db      	ldr	r3, [r3, #12]
 8004a10:	4a61      	ldr	r2, [pc, #388]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a16:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004a18:	e015      	b.n	8004a46 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	3304      	adds	r3, #4
 8004a1e:	2100      	movs	r1, #0
 8004a20:	4618      	mov	r0, r3
 8004a22:	f000 fa73 	bl	8004f0c <RCCEx_PLLSAI1_Config>
 8004a26:	4603      	mov	r3, r0
 8004a28:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004a2a:	e00c      	b.n	8004a46 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	3320      	adds	r3, #32
 8004a30:	2100      	movs	r1, #0
 8004a32:	4618      	mov	r0, r3
 8004a34:	f000 fb5e 	bl	80050f4 <RCCEx_PLLSAI2_Config>
 8004a38:	4603      	mov	r3, r0
 8004a3a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004a3c:	e003      	b.n	8004a46 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004a3e:	2301      	movs	r3, #1
 8004a40:	74fb      	strb	r3, [r7, #19]
      break;
 8004a42:	e000      	b.n	8004a46 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004a44:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a46:	7cfb      	ldrb	r3, [r7, #19]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d10b      	bne.n	8004a64 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004a4c:	4b52      	ldr	r3, [pc, #328]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a52:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004a5a:	494f      	ldr	r1, [pc, #316]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004a62:	e001      	b.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a64:	7cfb      	ldrb	r3, [r7, #19]
 8004a66:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	f000 80a0 	beq.w	8004bb6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a76:	2300      	movs	r3, #0
 8004a78:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004a7a:	4b47      	ldr	r3, [pc, #284]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d101      	bne.n	8004a8a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004a86:	2301      	movs	r3, #1
 8004a88:	e000      	b.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d00d      	beq.n	8004aac <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a90:	4b41      	ldr	r3, [pc, #260]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a94:	4a40      	ldr	r2, [pc, #256]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a9a:	6593      	str	r3, [r2, #88]	; 0x58
 8004a9c:	4b3e      	ldr	r3, [pc, #248]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004aa0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004aa4:	60bb      	str	r3, [r7, #8]
 8004aa6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004aac:	4b3b      	ldr	r3, [pc, #236]	; (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a3a      	ldr	r2, [pc, #232]	; (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004ab2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ab6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004ab8:	f7fd f91e 	bl	8001cf8 <HAL_GetTick>
 8004abc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004abe:	e009      	b.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ac0:	f7fd f91a 	bl	8001cf8 <HAL_GetTick>
 8004ac4:	4602      	mov	r2, r0
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	1ad3      	subs	r3, r2, r3
 8004aca:	2b02      	cmp	r3, #2
 8004acc:	d902      	bls.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004ace:	2303      	movs	r3, #3
 8004ad0:	74fb      	strb	r3, [r7, #19]
        break;
 8004ad2:	e005      	b.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004ad4:	4b31      	ldr	r3, [pc, #196]	; (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d0ef      	beq.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004ae0:	7cfb      	ldrb	r3, [r7, #19]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d15c      	bne.n	8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004ae6:	4b2c      	ldr	r3, [pc, #176]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ae8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004aec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004af0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004af2:	697b      	ldr	r3, [r7, #20]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d01f      	beq.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004afe:	697a      	ldr	r2, [r7, #20]
 8004b00:	429a      	cmp	r2, r3
 8004b02:	d019      	beq.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004b04:	4b24      	ldr	r3, [pc, #144]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b0e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004b10:	4b21      	ldr	r3, [pc, #132]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b16:	4a20      	ldr	r2, [pc, #128]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004b20:	4b1d      	ldr	r3, [pc, #116]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b26:	4a1c      	ldr	r2, [pc, #112]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004b30:	4a19      	ldr	r2, [pc, #100]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b32:	697b      	ldr	r3, [r7, #20]
 8004b34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	f003 0301 	and.w	r3, r3, #1
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d016      	beq.n	8004b70 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b42:	f7fd f8d9 	bl	8001cf8 <HAL_GetTick>
 8004b46:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b48:	e00b      	b.n	8004b62 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b4a:	f7fd f8d5 	bl	8001cf8 <HAL_GetTick>
 8004b4e:	4602      	mov	r2, r0
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	1ad3      	subs	r3, r2, r3
 8004b54:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d902      	bls.n	8004b62 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004b5c:	2303      	movs	r3, #3
 8004b5e:	74fb      	strb	r3, [r7, #19]
            break;
 8004b60:	e006      	b.n	8004b70 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b62:	4b0d      	ldr	r3, [pc, #52]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b68:	f003 0302 	and.w	r3, r3, #2
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d0ec      	beq.n	8004b4a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004b70:	7cfb      	ldrb	r3, [r7, #19]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d10c      	bne.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004b76:	4b08      	ldr	r3, [pc, #32]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b7c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b86:	4904      	ldr	r1, [pc, #16]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004b8e:	e009      	b.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004b90:	7cfb      	ldrb	r3, [r7, #19]
 8004b92:	74bb      	strb	r3, [r7, #18]
 8004b94:	e006      	b.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004b96:	bf00      	nop
 8004b98:	40021000 	.word	0x40021000
 8004b9c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ba0:	7cfb      	ldrb	r3, [r7, #19]
 8004ba2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004ba4:	7c7b      	ldrb	r3, [r7, #17]
 8004ba6:	2b01      	cmp	r3, #1
 8004ba8:	d105      	bne.n	8004bb6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004baa:	4b9e      	ldr	r3, [pc, #632]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bae:	4a9d      	ldr	r2, [pc, #628]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bb0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004bb4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f003 0301 	and.w	r3, r3, #1
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d00a      	beq.n	8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004bc2:	4b98      	ldr	r3, [pc, #608]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bc8:	f023 0203 	bic.w	r2, r3, #3
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bd0:	4994      	ldr	r1, [pc, #592]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bd2:	4313      	orrs	r3, r2
 8004bd4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f003 0302 	and.w	r3, r3, #2
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d00a      	beq.n	8004bfa <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004be4:	4b8f      	ldr	r3, [pc, #572]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004be6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bea:	f023 020c 	bic.w	r2, r3, #12
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bf2:	498c      	ldr	r1, [pc, #560]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bf4:	4313      	orrs	r3, r2
 8004bf6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f003 0304 	and.w	r3, r3, #4
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d00a      	beq.n	8004c1c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004c06:	4b87      	ldr	r3, [pc, #540]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c0c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c14:	4983      	ldr	r1, [pc, #524]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c16:	4313      	orrs	r3, r2
 8004c18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f003 0308 	and.w	r3, r3, #8
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d00a      	beq.n	8004c3e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004c28:	4b7e      	ldr	r3, [pc, #504]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c2e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c36:	497b      	ldr	r1, [pc, #492]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c38:	4313      	orrs	r3, r2
 8004c3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f003 0310 	and.w	r3, r3, #16
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d00a      	beq.n	8004c60 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004c4a:	4b76      	ldr	r3, [pc, #472]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c50:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c58:	4972      	ldr	r1, [pc, #456]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f003 0320 	and.w	r3, r3, #32
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d00a      	beq.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004c6c:	4b6d      	ldr	r3, [pc, #436]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c72:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c7a:	496a      	ldr	r1, [pc, #424]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c7c:	4313      	orrs	r3, r2
 8004c7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d00a      	beq.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004c8e:	4b65      	ldr	r3, [pc, #404]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c94:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c9c:	4961      	ldr	r1, [pc, #388]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c9e:	4313      	orrs	r3, r2
 8004ca0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d00a      	beq.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004cb0:	4b5c      	ldr	r3, [pc, #368]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cb6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cbe:	4959      	ldr	r1, [pc, #356]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cc0:	4313      	orrs	r3, r2
 8004cc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d00a      	beq.n	8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004cd2:	4b54      	ldr	r3, [pc, #336]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cd8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ce0:	4950      	ldr	r1, [pc, #320]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d00a      	beq.n	8004d0a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004cf4:	4b4b      	ldr	r3, [pc, #300]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cfa:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d02:	4948      	ldr	r1, [pc, #288]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d04:	4313      	orrs	r3, r2
 8004d06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d00a      	beq.n	8004d2c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004d16:	4b43      	ldr	r3, [pc, #268]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d1c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d24:	493f      	ldr	r1, [pc, #252]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d26:	4313      	orrs	r3, r2
 8004d28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d028      	beq.n	8004d8a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004d38:	4b3a      	ldr	r3, [pc, #232]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d3e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d46:	4937      	ldr	r1, [pc, #220]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d48:	4313      	orrs	r3, r2
 8004d4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d52:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004d56:	d106      	bne.n	8004d66 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004d58:	4b32      	ldr	r3, [pc, #200]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d5a:	68db      	ldr	r3, [r3, #12]
 8004d5c:	4a31      	ldr	r2, [pc, #196]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d5e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004d62:	60d3      	str	r3, [r2, #12]
 8004d64:	e011      	b.n	8004d8a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d6a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004d6e:	d10c      	bne.n	8004d8a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	3304      	adds	r3, #4
 8004d74:	2101      	movs	r1, #1
 8004d76:	4618      	mov	r0, r3
 8004d78:	f000 f8c8 	bl	8004f0c <RCCEx_PLLSAI1_Config>
 8004d7c:	4603      	mov	r3, r0
 8004d7e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004d80:	7cfb      	ldrb	r3, [r7, #19]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d001      	beq.n	8004d8a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004d86:	7cfb      	ldrb	r3, [r7, #19]
 8004d88:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d028      	beq.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004d96:	4b23      	ldr	r3, [pc, #140]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d9c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004da4:	491f      	ldr	r1, [pc, #124]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004da6:	4313      	orrs	r3, r2
 8004da8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004db0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004db4:	d106      	bne.n	8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004db6:	4b1b      	ldr	r3, [pc, #108]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004db8:	68db      	ldr	r3, [r3, #12]
 8004dba:	4a1a      	ldr	r2, [pc, #104]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004dbc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004dc0:	60d3      	str	r3, [r2, #12]
 8004dc2:	e011      	b.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dc8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004dcc:	d10c      	bne.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	3304      	adds	r3, #4
 8004dd2:	2101      	movs	r1, #1
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	f000 f899 	bl	8004f0c <RCCEx_PLLSAI1_Config>
 8004dda:	4603      	mov	r3, r0
 8004ddc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004dde:	7cfb      	ldrb	r3, [r7, #19]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d001      	beq.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004de4:	7cfb      	ldrb	r3, [r7, #19]
 8004de6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d02b      	beq.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004df4:	4b0b      	ldr	r3, [pc, #44]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004df6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dfa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e02:	4908      	ldr	r1, [pc, #32]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e04:	4313      	orrs	r3, r2
 8004e06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e0e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e12:	d109      	bne.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e14:	4b03      	ldr	r3, [pc, #12]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e16:	68db      	ldr	r3, [r3, #12]
 8004e18:	4a02      	ldr	r2, [pc, #8]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e1a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e1e:	60d3      	str	r3, [r2, #12]
 8004e20:	e014      	b.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004e22:	bf00      	nop
 8004e24:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e2c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004e30:	d10c      	bne.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	3304      	adds	r3, #4
 8004e36:	2101      	movs	r1, #1
 8004e38:	4618      	mov	r0, r3
 8004e3a:	f000 f867 	bl	8004f0c <RCCEx_PLLSAI1_Config>
 8004e3e:	4603      	mov	r3, r0
 8004e40:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004e42:	7cfb      	ldrb	r3, [r7, #19]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d001      	beq.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004e48:	7cfb      	ldrb	r3, [r7, #19]
 8004e4a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d02f      	beq.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004e58:	4b2b      	ldr	r3, [pc, #172]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004e5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e5e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e66:	4928      	ldr	r1, [pc, #160]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e72:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004e76:	d10d      	bne.n	8004e94 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	3304      	adds	r3, #4
 8004e7c:	2102      	movs	r1, #2
 8004e7e:	4618      	mov	r0, r3
 8004e80:	f000 f844 	bl	8004f0c <RCCEx_PLLSAI1_Config>
 8004e84:	4603      	mov	r3, r0
 8004e86:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004e88:	7cfb      	ldrb	r3, [r7, #19]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d014      	beq.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004e8e:	7cfb      	ldrb	r3, [r7, #19]
 8004e90:	74bb      	strb	r3, [r7, #18]
 8004e92:	e011      	b.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e98:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e9c:	d10c      	bne.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	3320      	adds	r3, #32
 8004ea2:	2102      	movs	r1, #2
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	f000 f925 	bl	80050f4 <RCCEx_PLLSAI2_Config>
 8004eaa:	4603      	mov	r3, r0
 8004eac:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004eae:	7cfb      	ldrb	r3, [r7, #19]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d001      	beq.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004eb4:	7cfb      	ldrb	r3, [r7, #19]
 8004eb6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d00a      	beq.n	8004eda <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004ec4:	4b10      	ldr	r3, [pc, #64]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004ec6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004eca:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ed2:	490d      	ldr	r1, [pc, #52]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004ed4:	4313      	orrs	r3, r2
 8004ed6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d00b      	beq.n	8004efe <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004ee6:	4b08      	ldr	r3, [pc, #32]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004ee8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004eec:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ef6:	4904      	ldr	r1, [pc, #16]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004efe:	7cbb      	ldrb	r3, [r7, #18]
}
 8004f00:	4618      	mov	r0, r3
 8004f02:	3718      	adds	r7, #24
 8004f04:	46bd      	mov	sp, r7
 8004f06:	bd80      	pop	{r7, pc}
 8004f08:	40021000 	.word	0x40021000

08004f0c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b084      	sub	sp, #16
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
 8004f14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004f16:	2300      	movs	r3, #0
 8004f18:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004f1a:	4b75      	ldr	r3, [pc, #468]	; (80050f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f1c:	68db      	ldr	r3, [r3, #12]
 8004f1e:	f003 0303 	and.w	r3, r3, #3
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d018      	beq.n	8004f58 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004f26:	4b72      	ldr	r3, [pc, #456]	; (80050f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f28:	68db      	ldr	r3, [r3, #12]
 8004f2a:	f003 0203 	and.w	r2, r3, #3
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	429a      	cmp	r2, r3
 8004f34:	d10d      	bne.n	8004f52 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
       ||
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d009      	beq.n	8004f52 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004f3e:	4b6c      	ldr	r3, [pc, #432]	; (80050f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f40:	68db      	ldr	r3, [r3, #12]
 8004f42:	091b      	lsrs	r3, r3, #4
 8004f44:	f003 0307 	and.w	r3, r3, #7
 8004f48:	1c5a      	adds	r2, r3, #1
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	685b      	ldr	r3, [r3, #4]
       ||
 8004f4e:	429a      	cmp	r2, r3
 8004f50:	d047      	beq.n	8004fe2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004f52:	2301      	movs	r3, #1
 8004f54:	73fb      	strb	r3, [r7, #15]
 8004f56:	e044      	b.n	8004fe2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	2b03      	cmp	r3, #3
 8004f5e:	d018      	beq.n	8004f92 <RCCEx_PLLSAI1_Config+0x86>
 8004f60:	2b03      	cmp	r3, #3
 8004f62:	d825      	bhi.n	8004fb0 <RCCEx_PLLSAI1_Config+0xa4>
 8004f64:	2b01      	cmp	r3, #1
 8004f66:	d002      	beq.n	8004f6e <RCCEx_PLLSAI1_Config+0x62>
 8004f68:	2b02      	cmp	r3, #2
 8004f6a:	d009      	beq.n	8004f80 <RCCEx_PLLSAI1_Config+0x74>
 8004f6c:	e020      	b.n	8004fb0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004f6e:	4b60      	ldr	r3, [pc, #384]	; (80050f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f003 0302 	and.w	r3, r3, #2
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d11d      	bne.n	8004fb6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f7e:	e01a      	b.n	8004fb6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004f80:	4b5b      	ldr	r3, [pc, #364]	; (80050f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d116      	bne.n	8004fba <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004f8c:	2301      	movs	r3, #1
 8004f8e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f90:	e013      	b.n	8004fba <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004f92:	4b57      	ldr	r3, [pc, #348]	; (80050f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d10f      	bne.n	8004fbe <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004f9e:	4b54      	ldr	r3, [pc, #336]	; (80050f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d109      	bne.n	8004fbe <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004faa:	2301      	movs	r3, #1
 8004fac:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004fae:	e006      	b.n	8004fbe <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	73fb      	strb	r3, [r7, #15]
      break;
 8004fb4:	e004      	b.n	8004fc0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004fb6:	bf00      	nop
 8004fb8:	e002      	b.n	8004fc0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004fba:	bf00      	nop
 8004fbc:	e000      	b.n	8004fc0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004fbe:	bf00      	nop
    }

    if(status == HAL_OK)
 8004fc0:	7bfb      	ldrb	r3, [r7, #15]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d10d      	bne.n	8004fe2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004fc6:	4b4a      	ldr	r3, [pc, #296]	; (80050f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fc8:	68db      	ldr	r3, [r3, #12]
 8004fca:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6819      	ldr	r1, [r3, #0]
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	3b01      	subs	r3, #1
 8004fd8:	011b      	lsls	r3, r3, #4
 8004fda:	430b      	orrs	r3, r1
 8004fdc:	4944      	ldr	r1, [pc, #272]	; (80050f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fde:	4313      	orrs	r3, r2
 8004fe0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004fe2:	7bfb      	ldrb	r3, [r7, #15]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d17d      	bne.n	80050e4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004fe8:	4b41      	ldr	r3, [pc, #260]	; (80050f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	4a40      	ldr	r2, [pc, #256]	; (80050f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fee:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004ff2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ff4:	f7fc fe80 	bl	8001cf8 <HAL_GetTick>
 8004ff8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004ffa:	e009      	b.n	8005010 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004ffc:	f7fc fe7c 	bl	8001cf8 <HAL_GetTick>
 8005000:	4602      	mov	r2, r0
 8005002:	68bb      	ldr	r3, [r7, #8]
 8005004:	1ad3      	subs	r3, r2, r3
 8005006:	2b02      	cmp	r3, #2
 8005008:	d902      	bls.n	8005010 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800500a:	2303      	movs	r3, #3
 800500c:	73fb      	strb	r3, [r7, #15]
        break;
 800500e:	e005      	b.n	800501c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005010:	4b37      	ldr	r3, [pc, #220]	; (80050f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005018:	2b00      	cmp	r3, #0
 800501a:	d1ef      	bne.n	8004ffc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800501c:	7bfb      	ldrb	r3, [r7, #15]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d160      	bne.n	80050e4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d111      	bne.n	800504c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005028:	4b31      	ldr	r3, [pc, #196]	; (80050f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800502a:	691b      	ldr	r3, [r3, #16]
 800502c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005030:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005034:	687a      	ldr	r2, [r7, #4]
 8005036:	6892      	ldr	r2, [r2, #8]
 8005038:	0211      	lsls	r1, r2, #8
 800503a:	687a      	ldr	r2, [r7, #4]
 800503c:	68d2      	ldr	r2, [r2, #12]
 800503e:	0912      	lsrs	r2, r2, #4
 8005040:	0452      	lsls	r2, r2, #17
 8005042:	430a      	orrs	r2, r1
 8005044:	492a      	ldr	r1, [pc, #168]	; (80050f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005046:	4313      	orrs	r3, r2
 8005048:	610b      	str	r3, [r1, #16]
 800504a:	e027      	b.n	800509c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	2b01      	cmp	r3, #1
 8005050:	d112      	bne.n	8005078 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005052:	4b27      	ldr	r3, [pc, #156]	; (80050f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005054:	691b      	ldr	r3, [r3, #16]
 8005056:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800505a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800505e:	687a      	ldr	r2, [r7, #4]
 8005060:	6892      	ldr	r2, [r2, #8]
 8005062:	0211      	lsls	r1, r2, #8
 8005064:	687a      	ldr	r2, [r7, #4]
 8005066:	6912      	ldr	r2, [r2, #16]
 8005068:	0852      	lsrs	r2, r2, #1
 800506a:	3a01      	subs	r2, #1
 800506c:	0552      	lsls	r2, r2, #21
 800506e:	430a      	orrs	r2, r1
 8005070:	491f      	ldr	r1, [pc, #124]	; (80050f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005072:	4313      	orrs	r3, r2
 8005074:	610b      	str	r3, [r1, #16]
 8005076:	e011      	b.n	800509c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005078:	4b1d      	ldr	r3, [pc, #116]	; (80050f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800507a:	691b      	ldr	r3, [r3, #16]
 800507c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005080:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005084:	687a      	ldr	r2, [r7, #4]
 8005086:	6892      	ldr	r2, [r2, #8]
 8005088:	0211      	lsls	r1, r2, #8
 800508a:	687a      	ldr	r2, [r7, #4]
 800508c:	6952      	ldr	r2, [r2, #20]
 800508e:	0852      	lsrs	r2, r2, #1
 8005090:	3a01      	subs	r2, #1
 8005092:	0652      	lsls	r2, r2, #25
 8005094:	430a      	orrs	r2, r1
 8005096:	4916      	ldr	r1, [pc, #88]	; (80050f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005098:	4313      	orrs	r3, r2
 800509a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800509c:	4b14      	ldr	r3, [pc, #80]	; (80050f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4a13      	ldr	r2, [pc, #76]	; (80050f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80050a2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80050a6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050a8:	f7fc fe26 	bl	8001cf8 <HAL_GetTick>
 80050ac:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80050ae:	e009      	b.n	80050c4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80050b0:	f7fc fe22 	bl	8001cf8 <HAL_GetTick>
 80050b4:	4602      	mov	r2, r0
 80050b6:	68bb      	ldr	r3, [r7, #8]
 80050b8:	1ad3      	subs	r3, r2, r3
 80050ba:	2b02      	cmp	r3, #2
 80050bc:	d902      	bls.n	80050c4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80050be:	2303      	movs	r3, #3
 80050c0:	73fb      	strb	r3, [r7, #15]
          break;
 80050c2:	e005      	b.n	80050d0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80050c4:	4b0a      	ldr	r3, [pc, #40]	; (80050f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d0ef      	beq.n	80050b0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80050d0:	7bfb      	ldrb	r3, [r7, #15]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d106      	bne.n	80050e4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80050d6:	4b06      	ldr	r3, [pc, #24]	; (80050f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80050d8:	691a      	ldr	r2, [r3, #16]
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	699b      	ldr	r3, [r3, #24]
 80050de:	4904      	ldr	r1, [pc, #16]	; (80050f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80050e0:	4313      	orrs	r3, r2
 80050e2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80050e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80050e6:	4618      	mov	r0, r3
 80050e8:	3710      	adds	r7, #16
 80050ea:	46bd      	mov	sp, r7
 80050ec:	bd80      	pop	{r7, pc}
 80050ee:	bf00      	nop
 80050f0:	40021000 	.word	0x40021000

080050f4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b084      	sub	sp, #16
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
 80050fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80050fe:	2300      	movs	r3, #0
 8005100:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005102:	4b6a      	ldr	r3, [pc, #424]	; (80052ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8005104:	68db      	ldr	r3, [r3, #12]
 8005106:	f003 0303 	and.w	r3, r3, #3
 800510a:	2b00      	cmp	r3, #0
 800510c:	d018      	beq.n	8005140 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800510e:	4b67      	ldr	r3, [pc, #412]	; (80052ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8005110:	68db      	ldr	r3, [r3, #12]
 8005112:	f003 0203 	and.w	r2, r3, #3
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	429a      	cmp	r2, r3
 800511c:	d10d      	bne.n	800513a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
       ||
 8005122:	2b00      	cmp	r3, #0
 8005124:	d009      	beq.n	800513a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005126:	4b61      	ldr	r3, [pc, #388]	; (80052ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8005128:	68db      	ldr	r3, [r3, #12]
 800512a:	091b      	lsrs	r3, r3, #4
 800512c:	f003 0307 	and.w	r3, r3, #7
 8005130:	1c5a      	adds	r2, r3, #1
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	685b      	ldr	r3, [r3, #4]
       ||
 8005136:	429a      	cmp	r2, r3
 8005138:	d047      	beq.n	80051ca <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800513a:	2301      	movs	r3, #1
 800513c:	73fb      	strb	r3, [r7, #15]
 800513e:	e044      	b.n	80051ca <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	2b03      	cmp	r3, #3
 8005146:	d018      	beq.n	800517a <RCCEx_PLLSAI2_Config+0x86>
 8005148:	2b03      	cmp	r3, #3
 800514a:	d825      	bhi.n	8005198 <RCCEx_PLLSAI2_Config+0xa4>
 800514c:	2b01      	cmp	r3, #1
 800514e:	d002      	beq.n	8005156 <RCCEx_PLLSAI2_Config+0x62>
 8005150:	2b02      	cmp	r3, #2
 8005152:	d009      	beq.n	8005168 <RCCEx_PLLSAI2_Config+0x74>
 8005154:	e020      	b.n	8005198 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005156:	4b55      	ldr	r3, [pc, #340]	; (80052ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f003 0302 	and.w	r3, r3, #2
 800515e:	2b00      	cmp	r3, #0
 8005160:	d11d      	bne.n	800519e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8005162:	2301      	movs	r3, #1
 8005164:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005166:	e01a      	b.n	800519e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005168:	4b50      	ldr	r3, [pc, #320]	; (80052ac <RCCEx_PLLSAI2_Config+0x1b8>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005170:	2b00      	cmp	r3, #0
 8005172:	d116      	bne.n	80051a2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005174:	2301      	movs	r3, #1
 8005176:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005178:	e013      	b.n	80051a2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800517a:	4b4c      	ldr	r3, [pc, #304]	; (80052ac <RCCEx_PLLSAI2_Config+0x1b8>)
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005182:	2b00      	cmp	r3, #0
 8005184:	d10f      	bne.n	80051a6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005186:	4b49      	ldr	r3, [pc, #292]	; (80052ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800518e:	2b00      	cmp	r3, #0
 8005190:	d109      	bne.n	80051a6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8005192:	2301      	movs	r3, #1
 8005194:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005196:	e006      	b.n	80051a6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005198:	2301      	movs	r3, #1
 800519a:	73fb      	strb	r3, [r7, #15]
      break;
 800519c:	e004      	b.n	80051a8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800519e:	bf00      	nop
 80051a0:	e002      	b.n	80051a8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80051a2:	bf00      	nop
 80051a4:	e000      	b.n	80051a8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80051a6:	bf00      	nop
    }

    if(status == HAL_OK)
 80051a8:	7bfb      	ldrb	r3, [r7, #15]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d10d      	bne.n	80051ca <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80051ae:	4b3f      	ldr	r3, [pc, #252]	; (80052ac <RCCEx_PLLSAI2_Config+0x1b8>)
 80051b0:	68db      	ldr	r3, [r3, #12]
 80051b2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6819      	ldr	r1, [r3, #0]
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	685b      	ldr	r3, [r3, #4]
 80051be:	3b01      	subs	r3, #1
 80051c0:	011b      	lsls	r3, r3, #4
 80051c2:	430b      	orrs	r3, r1
 80051c4:	4939      	ldr	r1, [pc, #228]	; (80052ac <RCCEx_PLLSAI2_Config+0x1b8>)
 80051c6:	4313      	orrs	r3, r2
 80051c8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80051ca:	7bfb      	ldrb	r3, [r7, #15]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d167      	bne.n	80052a0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80051d0:	4b36      	ldr	r3, [pc, #216]	; (80052ac <RCCEx_PLLSAI2_Config+0x1b8>)
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4a35      	ldr	r2, [pc, #212]	; (80052ac <RCCEx_PLLSAI2_Config+0x1b8>)
 80051d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80051da:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051dc:	f7fc fd8c 	bl	8001cf8 <HAL_GetTick>
 80051e0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80051e2:	e009      	b.n	80051f8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80051e4:	f7fc fd88 	bl	8001cf8 <HAL_GetTick>
 80051e8:	4602      	mov	r2, r0
 80051ea:	68bb      	ldr	r3, [r7, #8]
 80051ec:	1ad3      	subs	r3, r2, r3
 80051ee:	2b02      	cmp	r3, #2
 80051f0:	d902      	bls.n	80051f8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80051f2:	2303      	movs	r3, #3
 80051f4:	73fb      	strb	r3, [r7, #15]
        break;
 80051f6:	e005      	b.n	8005204 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80051f8:	4b2c      	ldr	r3, [pc, #176]	; (80052ac <RCCEx_PLLSAI2_Config+0x1b8>)
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005200:	2b00      	cmp	r3, #0
 8005202:	d1ef      	bne.n	80051e4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005204:	7bfb      	ldrb	r3, [r7, #15]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d14a      	bne.n	80052a0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d111      	bne.n	8005234 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005210:	4b26      	ldr	r3, [pc, #152]	; (80052ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8005212:	695b      	ldr	r3, [r3, #20]
 8005214:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005218:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800521c:	687a      	ldr	r2, [r7, #4]
 800521e:	6892      	ldr	r2, [r2, #8]
 8005220:	0211      	lsls	r1, r2, #8
 8005222:	687a      	ldr	r2, [r7, #4]
 8005224:	68d2      	ldr	r2, [r2, #12]
 8005226:	0912      	lsrs	r2, r2, #4
 8005228:	0452      	lsls	r2, r2, #17
 800522a:	430a      	orrs	r2, r1
 800522c:	491f      	ldr	r1, [pc, #124]	; (80052ac <RCCEx_PLLSAI2_Config+0x1b8>)
 800522e:	4313      	orrs	r3, r2
 8005230:	614b      	str	r3, [r1, #20]
 8005232:	e011      	b.n	8005258 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005234:	4b1d      	ldr	r3, [pc, #116]	; (80052ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8005236:	695b      	ldr	r3, [r3, #20]
 8005238:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800523c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005240:	687a      	ldr	r2, [r7, #4]
 8005242:	6892      	ldr	r2, [r2, #8]
 8005244:	0211      	lsls	r1, r2, #8
 8005246:	687a      	ldr	r2, [r7, #4]
 8005248:	6912      	ldr	r2, [r2, #16]
 800524a:	0852      	lsrs	r2, r2, #1
 800524c:	3a01      	subs	r2, #1
 800524e:	0652      	lsls	r2, r2, #25
 8005250:	430a      	orrs	r2, r1
 8005252:	4916      	ldr	r1, [pc, #88]	; (80052ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8005254:	4313      	orrs	r3, r2
 8005256:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005258:	4b14      	ldr	r3, [pc, #80]	; (80052ac <RCCEx_PLLSAI2_Config+0x1b8>)
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	4a13      	ldr	r2, [pc, #76]	; (80052ac <RCCEx_PLLSAI2_Config+0x1b8>)
 800525e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005262:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005264:	f7fc fd48 	bl	8001cf8 <HAL_GetTick>
 8005268:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800526a:	e009      	b.n	8005280 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800526c:	f7fc fd44 	bl	8001cf8 <HAL_GetTick>
 8005270:	4602      	mov	r2, r0
 8005272:	68bb      	ldr	r3, [r7, #8]
 8005274:	1ad3      	subs	r3, r2, r3
 8005276:	2b02      	cmp	r3, #2
 8005278:	d902      	bls.n	8005280 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800527a:	2303      	movs	r3, #3
 800527c:	73fb      	strb	r3, [r7, #15]
          break;
 800527e:	e005      	b.n	800528c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005280:	4b0a      	ldr	r3, [pc, #40]	; (80052ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005288:	2b00      	cmp	r3, #0
 800528a:	d0ef      	beq.n	800526c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800528c:	7bfb      	ldrb	r3, [r7, #15]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d106      	bne.n	80052a0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005292:	4b06      	ldr	r3, [pc, #24]	; (80052ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8005294:	695a      	ldr	r2, [r3, #20]
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	695b      	ldr	r3, [r3, #20]
 800529a:	4904      	ldr	r1, [pc, #16]	; (80052ac <RCCEx_PLLSAI2_Config+0x1b8>)
 800529c:	4313      	orrs	r3, r2
 800529e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80052a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80052a2:	4618      	mov	r0, r3
 80052a4:	3710      	adds	r7, #16
 80052a6:	46bd      	mov	sp, r7
 80052a8:	bd80      	pop	{r7, pc}
 80052aa:	bf00      	nop
 80052ac:	40021000 	.word	0x40021000

080052b0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b084      	sub	sp, #16
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d101      	bne.n	80052c2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80052be:	2301      	movs	r3, #1
 80052c0:	e095      	b.n	80053ee <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d108      	bne.n	80052dc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	685b      	ldr	r3, [r3, #4]
 80052ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80052d2:	d009      	beq.n	80052e8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2200      	movs	r2, #0
 80052d8:	61da      	str	r2, [r3, #28]
 80052da:	e005      	b.n	80052e8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2200      	movs	r2, #0
 80052e0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2200      	movs	r2, #0
 80052e6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2200      	movs	r2, #0
 80052ec:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80052f4:	b2db      	uxtb	r3, r3
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d106      	bne.n	8005308 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2200      	movs	r2, #0
 80052fe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005302:	6878      	ldr	r0, [r7, #4]
 8005304:	f7fc f9d4 	bl	80016b0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2202      	movs	r2, #2
 800530c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	681a      	ldr	r2, [r3, #0]
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800531e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	68db      	ldr	r3, [r3, #12]
 8005324:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005328:	d902      	bls.n	8005330 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800532a:	2300      	movs	r3, #0
 800532c:	60fb      	str	r3, [r7, #12]
 800532e:	e002      	b.n	8005336 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005330:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005334:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	68db      	ldr	r3, [r3, #12]
 800533a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800533e:	d007      	beq.n	8005350 <HAL_SPI_Init+0xa0>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	68db      	ldr	r3, [r3, #12]
 8005344:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005348:	d002      	beq.n	8005350 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2200      	movs	r2, #0
 800534e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	685b      	ldr	r3, [r3, #4]
 8005354:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	689b      	ldr	r3, [r3, #8]
 800535c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005360:	431a      	orrs	r2, r3
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	691b      	ldr	r3, [r3, #16]
 8005366:	f003 0302 	and.w	r3, r3, #2
 800536a:	431a      	orrs	r2, r3
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	695b      	ldr	r3, [r3, #20]
 8005370:	f003 0301 	and.w	r3, r3, #1
 8005374:	431a      	orrs	r2, r3
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	699b      	ldr	r3, [r3, #24]
 800537a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800537e:	431a      	orrs	r2, r3
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	69db      	ldr	r3, [r3, #28]
 8005384:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005388:	431a      	orrs	r2, r3
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6a1b      	ldr	r3, [r3, #32]
 800538e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005392:	ea42 0103 	orr.w	r1, r2, r3
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800539a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	430a      	orrs	r2, r1
 80053a4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	699b      	ldr	r3, [r3, #24]
 80053aa:	0c1b      	lsrs	r3, r3, #16
 80053ac:	f003 0204 	and.w	r2, r3, #4
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053b4:	f003 0310 	and.w	r3, r3, #16
 80053b8:	431a      	orrs	r2, r3
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053be:	f003 0308 	and.w	r3, r3, #8
 80053c2:	431a      	orrs	r2, r3
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	68db      	ldr	r3, [r3, #12]
 80053c8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80053cc:	ea42 0103 	orr.w	r1, r2, r3
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	430a      	orrs	r2, r1
 80053dc:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2200      	movs	r2, #0
 80053e2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2201      	movs	r2, #1
 80053e8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80053ec:	2300      	movs	r3, #0
}
 80053ee:	4618      	mov	r0, r3
 80053f0:	3710      	adds	r7, #16
 80053f2:	46bd      	mov	sp, r7
 80053f4:	bd80      	pop	{r7, pc}

080053f6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80053f6:	b580      	push	{r7, lr}
 80053f8:	b088      	sub	sp, #32
 80053fa:	af00      	add	r7, sp, #0
 80053fc:	60f8      	str	r0, [r7, #12]
 80053fe:	60b9      	str	r1, [r7, #8]
 8005400:	603b      	str	r3, [r7, #0]
 8005402:	4613      	mov	r3, r2
 8005404:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005406:	2300      	movs	r3, #0
 8005408:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005410:	2b01      	cmp	r3, #1
 8005412:	d101      	bne.n	8005418 <HAL_SPI_Transmit+0x22>
 8005414:	2302      	movs	r3, #2
 8005416:	e158      	b.n	80056ca <HAL_SPI_Transmit+0x2d4>
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	2201      	movs	r2, #1
 800541c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005420:	f7fc fc6a 	bl	8001cf8 <HAL_GetTick>
 8005424:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005426:	88fb      	ldrh	r3, [r7, #6]
 8005428:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005430:	b2db      	uxtb	r3, r3
 8005432:	2b01      	cmp	r3, #1
 8005434:	d002      	beq.n	800543c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005436:	2302      	movs	r3, #2
 8005438:	77fb      	strb	r3, [r7, #31]
    goto error;
 800543a:	e13d      	b.n	80056b8 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 800543c:	68bb      	ldr	r3, [r7, #8]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d002      	beq.n	8005448 <HAL_SPI_Transmit+0x52>
 8005442:	88fb      	ldrh	r3, [r7, #6]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d102      	bne.n	800544e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005448:	2301      	movs	r3, #1
 800544a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800544c:	e134      	b.n	80056b8 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	2203      	movs	r2, #3
 8005452:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	2200      	movs	r2, #0
 800545a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	68ba      	ldr	r2, [r7, #8]
 8005460:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	88fa      	ldrh	r2, [r7, #6]
 8005466:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	88fa      	ldrh	r2, [r7, #6]
 800546c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	2200      	movs	r2, #0
 8005472:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	2200      	movs	r2, #0
 8005478:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	2200      	movs	r2, #0
 8005480:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	2200      	movs	r2, #0
 8005488:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	2200      	movs	r2, #0
 800548e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	689b      	ldr	r3, [r3, #8]
 8005494:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005498:	d10f      	bne.n	80054ba <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	681a      	ldr	r2, [r3, #0]
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80054a8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	681a      	ldr	r2, [r3, #0]
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80054b8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054c4:	2b40      	cmp	r3, #64	; 0x40
 80054c6:	d007      	beq.n	80054d8 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	681a      	ldr	r2, [r3, #0]
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80054d6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	68db      	ldr	r3, [r3, #12]
 80054dc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80054e0:	d94b      	bls.n	800557a <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	685b      	ldr	r3, [r3, #4]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d002      	beq.n	80054f0 <HAL_SPI_Transmit+0xfa>
 80054ea:	8afb      	ldrh	r3, [r7, #22]
 80054ec:	2b01      	cmp	r3, #1
 80054ee:	d13e      	bne.n	800556e <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054f4:	881a      	ldrh	r2, [r3, #0]
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005500:	1c9a      	adds	r2, r3, #2
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800550a:	b29b      	uxth	r3, r3
 800550c:	3b01      	subs	r3, #1
 800550e:	b29a      	uxth	r2, r3
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005514:	e02b      	b.n	800556e <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	689b      	ldr	r3, [r3, #8]
 800551c:	f003 0302 	and.w	r3, r3, #2
 8005520:	2b02      	cmp	r3, #2
 8005522:	d112      	bne.n	800554a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005528:	881a      	ldrh	r2, [r3, #0]
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005534:	1c9a      	adds	r2, r3, #2
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800553e:	b29b      	uxth	r3, r3
 8005540:	3b01      	subs	r3, #1
 8005542:	b29a      	uxth	r2, r3
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005548:	e011      	b.n	800556e <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800554a:	f7fc fbd5 	bl	8001cf8 <HAL_GetTick>
 800554e:	4602      	mov	r2, r0
 8005550:	69bb      	ldr	r3, [r7, #24]
 8005552:	1ad3      	subs	r3, r2, r3
 8005554:	683a      	ldr	r2, [r7, #0]
 8005556:	429a      	cmp	r2, r3
 8005558:	d803      	bhi.n	8005562 <HAL_SPI_Transmit+0x16c>
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005560:	d102      	bne.n	8005568 <HAL_SPI_Transmit+0x172>
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d102      	bne.n	800556e <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8005568:	2303      	movs	r3, #3
 800556a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800556c:	e0a4      	b.n	80056b8 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005572:	b29b      	uxth	r3, r3
 8005574:	2b00      	cmp	r3, #0
 8005576:	d1ce      	bne.n	8005516 <HAL_SPI_Transmit+0x120>
 8005578:	e07c      	b.n	8005674 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	685b      	ldr	r3, [r3, #4]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d002      	beq.n	8005588 <HAL_SPI_Transmit+0x192>
 8005582:	8afb      	ldrh	r3, [r7, #22]
 8005584:	2b01      	cmp	r3, #1
 8005586:	d170      	bne.n	800566a <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800558c:	b29b      	uxth	r3, r3
 800558e:	2b01      	cmp	r3, #1
 8005590:	d912      	bls.n	80055b8 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005596:	881a      	ldrh	r2, [r3, #0]
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055a2:	1c9a      	adds	r2, r3, #2
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055ac:	b29b      	uxth	r3, r3
 80055ae:	3b02      	subs	r3, #2
 80055b0:	b29a      	uxth	r2, r3
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80055b6:	e058      	b.n	800566a <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	330c      	adds	r3, #12
 80055c2:	7812      	ldrb	r2, [r2, #0]
 80055c4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055ca:	1c5a      	adds	r2, r3, #1
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055d4:	b29b      	uxth	r3, r3
 80055d6:	3b01      	subs	r3, #1
 80055d8:	b29a      	uxth	r2, r3
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80055de:	e044      	b.n	800566a <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	689b      	ldr	r3, [r3, #8]
 80055e6:	f003 0302 	and.w	r3, r3, #2
 80055ea:	2b02      	cmp	r3, #2
 80055ec:	d12b      	bne.n	8005646 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055f2:	b29b      	uxth	r3, r3
 80055f4:	2b01      	cmp	r3, #1
 80055f6:	d912      	bls.n	800561e <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055fc:	881a      	ldrh	r2, [r3, #0]
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005608:	1c9a      	adds	r2, r3, #2
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005612:	b29b      	uxth	r3, r3
 8005614:	3b02      	subs	r3, #2
 8005616:	b29a      	uxth	r2, r3
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800561c:	e025      	b.n	800566a <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	330c      	adds	r3, #12
 8005628:	7812      	ldrb	r2, [r2, #0]
 800562a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005630:	1c5a      	adds	r2, r3, #1
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800563a:	b29b      	uxth	r3, r3
 800563c:	3b01      	subs	r3, #1
 800563e:	b29a      	uxth	r2, r3
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005644:	e011      	b.n	800566a <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005646:	f7fc fb57 	bl	8001cf8 <HAL_GetTick>
 800564a:	4602      	mov	r2, r0
 800564c:	69bb      	ldr	r3, [r7, #24]
 800564e:	1ad3      	subs	r3, r2, r3
 8005650:	683a      	ldr	r2, [r7, #0]
 8005652:	429a      	cmp	r2, r3
 8005654:	d803      	bhi.n	800565e <HAL_SPI_Transmit+0x268>
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	f1b3 3fff 	cmp.w	r3, #4294967295
 800565c:	d102      	bne.n	8005664 <HAL_SPI_Transmit+0x26e>
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d102      	bne.n	800566a <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8005664:	2303      	movs	r3, #3
 8005666:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005668:	e026      	b.n	80056b8 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800566e:	b29b      	uxth	r3, r3
 8005670:	2b00      	cmp	r3, #0
 8005672:	d1b5      	bne.n	80055e0 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005674:	69ba      	ldr	r2, [r7, #24]
 8005676:	6839      	ldr	r1, [r7, #0]
 8005678:	68f8      	ldr	r0, [r7, #12]
 800567a:	f000 f949 	bl	8005910 <SPI_EndRxTxTransaction>
 800567e:	4603      	mov	r3, r0
 8005680:	2b00      	cmp	r3, #0
 8005682:	d002      	beq.n	800568a <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	2220      	movs	r2, #32
 8005688:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	689b      	ldr	r3, [r3, #8]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d10a      	bne.n	80056a8 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005692:	2300      	movs	r3, #0
 8005694:	613b      	str	r3, [r7, #16]
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	68db      	ldr	r3, [r3, #12]
 800569c:	613b      	str	r3, [r7, #16]
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	689b      	ldr	r3, [r3, #8]
 80056a4:	613b      	str	r3, [r7, #16]
 80056a6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d002      	beq.n	80056b6 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 80056b0:	2301      	movs	r3, #1
 80056b2:	77fb      	strb	r3, [r7, #31]
 80056b4:	e000      	b.n	80056b8 <HAL_SPI_Transmit+0x2c2>
  }

error:
 80056b6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	2201      	movs	r2, #1
 80056bc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	2200      	movs	r2, #0
 80056c4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80056c8:	7ffb      	ldrb	r3, [r7, #31]
}
 80056ca:	4618      	mov	r0, r3
 80056cc:	3720      	adds	r7, #32
 80056ce:	46bd      	mov	sp, r7
 80056d0:	bd80      	pop	{r7, pc}
	...

080056d4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b088      	sub	sp, #32
 80056d8:	af00      	add	r7, sp, #0
 80056da:	60f8      	str	r0, [r7, #12]
 80056dc:	60b9      	str	r1, [r7, #8]
 80056de:	603b      	str	r3, [r7, #0]
 80056e0:	4613      	mov	r3, r2
 80056e2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80056e4:	f7fc fb08 	bl	8001cf8 <HAL_GetTick>
 80056e8:	4602      	mov	r2, r0
 80056ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056ec:	1a9b      	subs	r3, r3, r2
 80056ee:	683a      	ldr	r2, [r7, #0]
 80056f0:	4413      	add	r3, r2
 80056f2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80056f4:	f7fc fb00 	bl	8001cf8 <HAL_GetTick>
 80056f8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80056fa:	4b39      	ldr	r3, [pc, #228]	; (80057e0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	015b      	lsls	r3, r3, #5
 8005700:	0d1b      	lsrs	r3, r3, #20
 8005702:	69fa      	ldr	r2, [r7, #28]
 8005704:	fb02 f303 	mul.w	r3, r2, r3
 8005708:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800570a:	e054      	b.n	80057b6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005712:	d050      	beq.n	80057b6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005714:	f7fc faf0 	bl	8001cf8 <HAL_GetTick>
 8005718:	4602      	mov	r2, r0
 800571a:	69bb      	ldr	r3, [r7, #24]
 800571c:	1ad3      	subs	r3, r2, r3
 800571e:	69fa      	ldr	r2, [r7, #28]
 8005720:	429a      	cmp	r2, r3
 8005722:	d902      	bls.n	800572a <SPI_WaitFlagStateUntilTimeout+0x56>
 8005724:	69fb      	ldr	r3, [r7, #28]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d13d      	bne.n	80057a6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	685a      	ldr	r2, [r3, #4]
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005738:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	685b      	ldr	r3, [r3, #4]
 800573e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005742:	d111      	bne.n	8005768 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	689b      	ldr	r3, [r3, #8]
 8005748:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800574c:	d004      	beq.n	8005758 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	689b      	ldr	r3, [r3, #8]
 8005752:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005756:	d107      	bne.n	8005768 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	681a      	ldr	r2, [r3, #0]
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005766:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800576c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005770:	d10f      	bne.n	8005792 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	681a      	ldr	r2, [r3, #0]
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005780:	601a      	str	r2, [r3, #0]
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	681a      	ldr	r2, [r3, #0]
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005790:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	2201      	movs	r2, #1
 8005796:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	2200      	movs	r2, #0
 800579e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80057a2:	2303      	movs	r3, #3
 80057a4:	e017      	b.n	80057d6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80057a6:	697b      	ldr	r3, [r7, #20]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d101      	bne.n	80057b0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80057ac:	2300      	movs	r3, #0
 80057ae:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80057b0:	697b      	ldr	r3, [r7, #20]
 80057b2:	3b01      	subs	r3, #1
 80057b4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	689a      	ldr	r2, [r3, #8]
 80057bc:	68bb      	ldr	r3, [r7, #8]
 80057be:	4013      	ands	r3, r2
 80057c0:	68ba      	ldr	r2, [r7, #8]
 80057c2:	429a      	cmp	r2, r3
 80057c4:	bf0c      	ite	eq
 80057c6:	2301      	moveq	r3, #1
 80057c8:	2300      	movne	r3, #0
 80057ca:	b2db      	uxtb	r3, r3
 80057cc:	461a      	mov	r2, r3
 80057ce:	79fb      	ldrb	r3, [r7, #7]
 80057d0:	429a      	cmp	r2, r3
 80057d2:	d19b      	bne.n	800570c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80057d4:	2300      	movs	r3, #0
}
 80057d6:	4618      	mov	r0, r3
 80057d8:	3720      	adds	r7, #32
 80057da:	46bd      	mov	sp, r7
 80057dc:	bd80      	pop	{r7, pc}
 80057de:	bf00      	nop
 80057e0:	20000008 	.word	0x20000008

080057e4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b08a      	sub	sp, #40	; 0x28
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	60f8      	str	r0, [r7, #12]
 80057ec:	60b9      	str	r1, [r7, #8]
 80057ee:	607a      	str	r2, [r7, #4]
 80057f0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80057f2:	2300      	movs	r3, #0
 80057f4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80057f6:	f7fc fa7f 	bl	8001cf8 <HAL_GetTick>
 80057fa:	4602      	mov	r2, r0
 80057fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057fe:	1a9b      	subs	r3, r3, r2
 8005800:	683a      	ldr	r2, [r7, #0]
 8005802:	4413      	add	r3, r2
 8005804:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8005806:	f7fc fa77 	bl	8001cf8 <HAL_GetTick>
 800580a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	330c      	adds	r3, #12
 8005812:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005814:	4b3d      	ldr	r3, [pc, #244]	; (800590c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005816:	681a      	ldr	r2, [r3, #0]
 8005818:	4613      	mov	r3, r2
 800581a:	009b      	lsls	r3, r3, #2
 800581c:	4413      	add	r3, r2
 800581e:	00da      	lsls	r2, r3, #3
 8005820:	1ad3      	subs	r3, r2, r3
 8005822:	0d1b      	lsrs	r3, r3, #20
 8005824:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005826:	fb02 f303 	mul.w	r3, r2, r3
 800582a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800582c:	e060      	b.n	80058f0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005834:	d107      	bne.n	8005846 <SPI_WaitFifoStateUntilTimeout+0x62>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d104      	bne.n	8005846 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800583c:	69fb      	ldr	r3, [r7, #28]
 800583e:	781b      	ldrb	r3, [r3, #0]
 8005840:	b2db      	uxtb	r3, r3
 8005842:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005844:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	f1b3 3fff 	cmp.w	r3, #4294967295
 800584c:	d050      	beq.n	80058f0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800584e:	f7fc fa53 	bl	8001cf8 <HAL_GetTick>
 8005852:	4602      	mov	r2, r0
 8005854:	6a3b      	ldr	r3, [r7, #32]
 8005856:	1ad3      	subs	r3, r2, r3
 8005858:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800585a:	429a      	cmp	r2, r3
 800585c:	d902      	bls.n	8005864 <SPI_WaitFifoStateUntilTimeout+0x80>
 800585e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005860:	2b00      	cmp	r3, #0
 8005862:	d13d      	bne.n	80058e0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	685a      	ldr	r2, [r3, #4]
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005872:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	685b      	ldr	r3, [r3, #4]
 8005878:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800587c:	d111      	bne.n	80058a2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	689b      	ldr	r3, [r3, #8]
 8005882:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005886:	d004      	beq.n	8005892 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	689b      	ldr	r3, [r3, #8]
 800588c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005890:	d107      	bne.n	80058a2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	681a      	ldr	r2, [r3, #0]
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80058a0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058aa:	d10f      	bne.n	80058cc <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	681a      	ldr	r2, [r3, #0]
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80058ba:	601a      	str	r2, [r3, #0]
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	681a      	ldr	r2, [r3, #0]
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80058ca:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	2201      	movs	r2, #1
 80058d0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	2200      	movs	r2, #0
 80058d8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80058dc:	2303      	movs	r3, #3
 80058de:	e010      	b.n	8005902 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80058e0:	69bb      	ldr	r3, [r7, #24]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d101      	bne.n	80058ea <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80058e6:	2300      	movs	r3, #0
 80058e8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80058ea:	69bb      	ldr	r3, [r7, #24]
 80058ec:	3b01      	subs	r3, #1
 80058ee:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	689a      	ldr	r2, [r3, #8]
 80058f6:	68bb      	ldr	r3, [r7, #8]
 80058f8:	4013      	ands	r3, r2
 80058fa:	687a      	ldr	r2, [r7, #4]
 80058fc:	429a      	cmp	r2, r3
 80058fe:	d196      	bne.n	800582e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005900:	2300      	movs	r3, #0
}
 8005902:	4618      	mov	r0, r3
 8005904:	3728      	adds	r7, #40	; 0x28
 8005906:	46bd      	mov	sp, r7
 8005908:	bd80      	pop	{r7, pc}
 800590a:	bf00      	nop
 800590c:	20000008 	.word	0x20000008

08005910 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b086      	sub	sp, #24
 8005914:	af02      	add	r7, sp, #8
 8005916:	60f8      	str	r0, [r7, #12]
 8005918:	60b9      	str	r1, [r7, #8]
 800591a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	9300      	str	r3, [sp, #0]
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	2200      	movs	r2, #0
 8005924:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005928:	68f8      	ldr	r0, [r7, #12]
 800592a:	f7ff ff5b 	bl	80057e4 <SPI_WaitFifoStateUntilTimeout>
 800592e:	4603      	mov	r3, r0
 8005930:	2b00      	cmp	r3, #0
 8005932:	d007      	beq.n	8005944 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005938:	f043 0220 	orr.w	r2, r3, #32
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005940:	2303      	movs	r3, #3
 8005942:	e027      	b.n	8005994 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	9300      	str	r3, [sp, #0]
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	2200      	movs	r2, #0
 800594c:	2180      	movs	r1, #128	; 0x80
 800594e:	68f8      	ldr	r0, [r7, #12]
 8005950:	f7ff fec0 	bl	80056d4 <SPI_WaitFlagStateUntilTimeout>
 8005954:	4603      	mov	r3, r0
 8005956:	2b00      	cmp	r3, #0
 8005958:	d007      	beq.n	800596a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800595e:	f043 0220 	orr.w	r2, r3, #32
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005966:	2303      	movs	r3, #3
 8005968:	e014      	b.n	8005994 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	9300      	str	r3, [sp, #0]
 800596e:	68bb      	ldr	r3, [r7, #8]
 8005970:	2200      	movs	r2, #0
 8005972:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005976:	68f8      	ldr	r0, [r7, #12]
 8005978:	f7ff ff34 	bl	80057e4 <SPI_WaitFifoStateUntilTimeout>
 800597c:	4603      	mov	r3, r0
 800597e:	2b00      	cmp	r3, #0
 8005980:	d007      	beq.n	8005992 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005986:	f043 0220 	orr.w	r2, r3, #32
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800598e:	2303      	movs	r3, #3
 8005990:	e000      	b.n	8005994 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005992:	2300      	movs	r3, #0
}
 8005994:	4618      	mov	r0, r3
 8005996:	3710      	adds	r7, #16
 8005998:	46bd      	mov	sp, r7
 800599a:	bd80      	pop	{r7, pc}

0800599c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b082      	sub	sp, #8
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d101      	bne.n	80059ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80059aa:	2301      	movs	r3, #1
 80059ac:	e040      	b.n	8005a30 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d106      	bne.n	80059c4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2200      	movs	r2, #0
 80059ba:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80059be:	6878      	ldr	r0, [r7, #4]
 80059c0:	f7fc f868 	bl	8001a94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2224      	movs	r2, #36	; 0x24
 80059c8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	681a      	ldr	r2, [r3, #0]
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f022 0201 	bic.w	r2, r2, #1
 80059d8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80059da:	6878      	ldr	r0, [r7, #4]
 80059dc:	f000 f8c0 	bl	8005b60 <UART_SetConfig>
 80059e0:	4603      	mov	r3, r0
 80059e2:	2b01      	cmp	r3, #1
 80059e4:	d101      	bne.n	80059ea <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80059e6:	2301      	movs	r3, #1
 80059e8:	e022      	b.n	8005a30 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d002      	beq.n	80059f8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80059f2:	6878      	ldr	r0, [r7, #4]
 80059f4:	f000 fb3e 	bl	8006074 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	685a      	ldr	r2, [r3, #4]
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005a06:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	689a      	ldr	r2, [r3, #8]
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005a16:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	681a      	ldr	r2, [r3, #0]
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f042 0201 	orr.w	r2, r2, #1
 8005a26:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005a28:	6878      	ldr	r0, [r7, #4]
 8005a2a:	f000 fbc5 	bl	80061b8 <UART_CheckIdleState>
 8005a2e:	4603      	mov	r3, r0
}
 8005a30:	4618      	mov	r0, r3
 8005a32:	3708      	adds	r7, #8
 8005a34:	46bd      	mov	sp, r7
 8005a36:	bd80      	pop	{r7, pc}

08005a38 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	b08a      	sub	sp, #40	; 0x28
 8005a3c:	af02      	add	r7, sp, #8
 8005a3e:	60f8      	str	r0, [r7, #12]
 8005a40:	60b9      	str	r1, [r7, #8]
 8005a42:	603b      	str	r3, [r7, #0]
 8005a44:	4613      	mov	r3, r2
 8005a46:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005a4c:	2b20      	cmp	r3, #32
 8005a4e:	f040 8082 	bne.w	8005b56 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a52:	68bb      	ldr	r3, [r7, #8]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d002      	beq.n	8005a5e <HAL_UART_Transmit+0x26>
 8005a58:	88fb      	ldrh	r3, [r7, #6]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d101      	bne.n	8005a62 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005a5e:	2301      	movs	r3, #1
 8005a60:	e07a      	b.n	8005b58 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005a68:	2b01      	cmp	r3, #1
 8005a6a:	d101      	bne.n	8005a70 <HAL_UART_Transmit+0x38>
 8005a6c:	2302      	movs	r3, #2
 8005a6e:	e073      	b.n	8005b58 <HAL_UART_Transmit+0x120>
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	2201      	movs	r2, #1
 8005a74:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	2221      	movs	r2, #33	; 0x21
 8005a84:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005a86:	f7fc f937 	bl	8001cf8 <HAL_GetTick>
 8005a8a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	88fa      	ldrh	r2, [r7, #6]
 8005a90:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	88fa      	ldrh	r2, [r7, #6]
 8005a98:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	689b      	ldr	r3, [r3, #8]
 8005aa0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005aa4:	d108      	bne.n	8005ab8 <HAL_UART_Transmit+0x80>
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	691b      	ldr	r3, [r3, #16]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d104      	bne.n	8005ab8 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8005aae:	2300      	movs	r3, #0
 8005ab0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005ab2:	68bb      	ldr	r3, [r7, #8]
 8005ab4:	61bb      	str	r3, [r7, #24]
 8005ab6:	e003      	b.n	8005ac0 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8005ab8:	68bb      	ldr	r3, [r7, #8]
 8005aba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005abc:	2300      	movs	r3, #0
 8005abe:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8005ac8:	e02d      	b.n	8005b26 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	9300      	str	r3, [sp, #0]
 8005ace:	697b      	ldr	r3, [r7, #20]
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	2180      	movs	r1, #128	; 0x80
 8005ad4:	68f8      	ldr	r0, [r7, #12]
 8005ad6:	f000 fbb8 	bl	800624a <UART_WaitOnFlagUntilTimeout>
 8005ada:	4603      	mov	r3, r0
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d001      	beq.n	8005ae4 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8005ae0:	2303      	movs	r3, #3
 8005ae2:	e039      	b.n	8005b58 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8005ae4:	69fb      	ldr	r3, [r7, #28]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d10b      	bne.n	8005b02 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005aea:	69bb      	ldr	r3, [r7, #24]
 8005aec:	881a      	ldrh	r2, [r3, #0]
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005af6:	b292      	uxth	r2, r2
 8005af8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005afa:	69bb      	ldr	r3, [r7, #24]
 8005afc:	3302      	adds	r3, #2
 8005afe:	61bb      	str	r3, [r7, #24]
 8005b00:	e008      	b.n	8005b14 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005b02:	69fb      	ldr	r3, [r7, #28]
 8005b04:	781a      	ldrb	r2, [r3, #0]
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	b292      	uxth	r2, r2
 8005b0c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005b0e:	69fb      	ldr	r3, [r7, #28]
 8005b10:	3301      	adds	r3, #1
 8005b12:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005b1a:	b29b      	uxth	r3, r3
 8005b1c:	3b01      	subs	r3, #1
 8005b1e:	b29a      	uxth	r2, r3
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005b2c:	b29b      	uxth	r3, r3
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d1cb      	bne.n	8005aca <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	9300      	str	r3, [sp, #0]
 8005b36:	697b      	ldr	r3, [r7, #20]
 8005b38:	2200      	movs	r2, #0
 8005b3a:	2140      	movs	r1, #64	; 0x40
 8005b3c:	68f8      	ldr	r0, [r7, #12]
 8005b3e:	f000 fb84 	bl	800624a <UART_WaitOnFlagUntilTimeout>
 8005b42:	4603      	mov	r3, r0
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d001      	beq.n	8005b4c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8005b48:	2303      	movs	r3, #3
 8005b4a:	e005      	b.n	8005b58 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	2220      	movs	r2, #32
 8005b50:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005b52:	2300      	movs	r3, #0
 8005b54:	e000      	b.n	8005b58 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8005b56:	2302      	movs	r3, #2
  }
}
 8005b58:	4618      	mov	r0, r3
 8005b5a:	3720      	adds	r7, #32
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	bd80      	pop	{r7, pc}

08005b60 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005b60:	b5b0      	push	{r4, r5, r7, lr}
 8005b62:	b088      	sub	sp, #32
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005b68:	2300      	movs	r3, #0
 8005b6a:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	689a      	ldr	r2, [r3, #8]
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	691b      	ldr	r3, [r3, #16]
 8005b74:	431a      	orrs	r2, r3
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	695b      	ldr	r3, [r3, #20]
 8005b7a:	431a      	orrs	r2, r3
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	69db      	ldr	r3, [r3, #28]
 8005b80:	4313      	orrs	r3, r2
 8005b82:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	681a      	ldr	r2, [r3, #0]
 8005b8a:	4bad      	ldr	r3, [pc, #692]	; (8005e40 <UART_SetConfig+0x2e0>)
 8005b8c:	4013      	ands	r3, r2
 8005b8e:	687a      	ldr	r2, [r7, #4]
 8005b90:	6812      	ldr	r2, [r2, #0]
 8005b92:	69f9      	ldr	r1, [r7, #28]
 8005b94:	430b      	orrs	r3, r1
 8005b96:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	685b      	ldr	r3, [r3, #4]
 8005b9e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	68da      	ldr	r2, [r3, #12]
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	430a      	orrs	r2, r1
 8005bac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	699b      	ldr	r3, [r3, #24]
 8005bb2:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	4aa2      	ldr	r2, [pc, #648]	; (8005e44 <UART_SetConfig+0x2e4>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d004      	beq.n	8005bc8 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6a1b      	ldr	r3, [r3, #32]
 8005bc2:	69fa      	ldr	r2, [r7, #28]
 8005bc4:	4313      	orrs	r3, r2
 8005bc6:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	689b      	ldr	r3, [r3, #8]
 8005bce:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	69fa      	ldr	r2, [r7, #28]
 8005bd8:	430a      	orrs	r2, r1
 8005bda:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	4a99      	ldr	r2, [pc, #612]	; (8005e48 <UART_SetConfig+0x2e8>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d121      	bne.n	8005c2a <UART_SetConfig+0xca>
 8005be6:	4b99      	ldr	r3, [pc, #612]	; (8005e4c <UART_SetConfig+0x2ec>)
 8005be8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bec:	f003 0303 	and.w	r3, r3, #3
 8005bf0:	2b03      	cmp	r3, #3
 8005bf2:	d817      	bhi.n	8005c24 <UART_SetConfig+0xc4>
 8005bf4:	a201      	add	r2, pc, #4	; (adr r2, 8005bfc <UART_SetConfig+0x9c>)
 8005bf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bfa:	bf00      	nop
 8005bfc:	08005c0d 	.word	0x08005c0d
 8005c00:	08005c19 	.word	0x08005c19
 8005c04:	08005c13 	.word	0x08005c13
 8005c08:	08005c1f 	.word	0x08005c1f
 8005c0c:	2301      	movs	r3, #1
 8005c0e:	76fb      	strb	r3, [r7, #27]
 8005c10:	e0e7      	b.n	8005de2 <UART_SetConfig+0x282>
 8005c12:	2302      	movs	r3, #2
 8005c14:	76fb      	strb	r3, [r7, #27]
 8005c16:	e0e4      	b.n	8005de2 <UART_SetConfig+0x282>
 8005c18:	2304      	movs	r3, #4
 8005c1a:	76fb      	strb	r3, [r7, #27]
 8005c1c:	e0e1      	b.n	8005de2 <UART_SetConfig+0x282>
 8005c1e:	2308      	movs	r3, #8
 8005c20:	76fb      	strb	r3, [r7, #27]
 8005c22:	e0de      	b.n	8005de2 <UART_SetConfig+0x282>
 8005c24:	2310      	movs	r3, #16
 8005c26:	76fb      	strb	r3, [r7, #27]
 8005c28:	e0db      	b.n	8005de2 <UART_SetConfig+0x282>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	4a88      	ldr	r2, [pc, #544]	; (8005e50 <UART_SetConfig+0x2f0>)
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d132      	bne.n	8005c9a <UART_SetConfig+0x13a>
 8005c34:	4b85      	ldr	r3, [pc, #532]	; (8005e4c <UART_SetConfig+0x2ec>)
 8005c36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c3a:	f003 030c 	and.w	r3, r3, #12
 8005c3e:	2b0c      	cmp	r3, #12
 8005c40:	d828      	bhi.n	8005c94 <UART_SetConfig+0x134>
 8005c42:	a201      	add	r2, pc, #4	; (adr r2, 8005c48 <UART_SetConfig+0xe8>)
 8005c44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c48:	08005c7d 	.word	0x08005c7d
 8005c4c:	08005c95 	.word	0x08005c95
 8005c50:	08005c95 	.word	0x08005c95
 8005c54:	08005c95 	.word	0x08005c95
 8005c58:	08005c89 	.word	0x08005c89
 8005c5c:	08005c95 	.word	0x08005c95
 8005c60:	08005c95 	.word	0x08005c95
 8005c64:	08005c95 	.word	0x08005c95
 8005c68:	08005c83 	.word	0x08005c83
 8005c6c:	08005c95 	.word	0x08005c95
 8005c70:	08005c95 	.word	0x08005c95
 8005c74:	08005c95 	.word	0x08005c95
 8005c78:	08005c8f 	.word	0x08005c8f
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	76fb      	strb	r3, [r7, #27]
 8005c80:	e0af      	b.n	8005de2 <UART_SetConfig+0x282>
 8005c82:	2302      	movs	r3, #2
 8005c84:	76fb      	strb	r3, [r7, #27]
 8005c86:	e0ac      	b.n	8005de2 <UART_SetConfig+0x282>
 8005c88:	2304      	movs	r3, #4
 8005c8a:	76fb      	strb	r3, [r7, #27]
 8005c8c:	e0a9      	b.n	8005de2 <UART_SetConfig+0x282>
 8005c8e:	2308      	movs	r3, #8
 8005c90:	76fb      	strb	r3, [r7, #27]
 8005c92:	e0a6      	b.n	8005de2 <UART_SetConfig+0x282>
 8005c94:	2310      	movs	r3, #16
 8005c96:	76fb      	strb	r3, [r7, #27]
 8005c98:	e0a3      	b.n	8005de2 <UART_SetConfig+0x282>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	4a6d      	ldr	r2, [pc, #436]	; (8005e54 <UART_SetConfig+0x2f4>)
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d120      	bne.n	8005ce6 <UART_SetConfig+0x186>
 8005ca4:	4b69      	ldr	r3, [pc, #420]	; (8005e4c <UART_SetConfig+0x2ec>)
 8005ca6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005caa:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005cae:	2b30      	cmp	r3, #48	; 0x30
 8005cb0:	d013      	beq.n	8005cda <UART_SetConfig+0x17a>
 8005cb2:	2b30      	cmp	r3, #48	; 0x30
 8005cb4:	d814      	bhi.n	8005ce0 <UART_SetConfig+0x180>
 8005cb6:	2b20      	cmp	r3, #32
 8005cb8:	d009      	beq.n	8005cce <UART_SetConfig+0x16e>
 8005cba:	2b20      	cmp	r3, #32
 8005cbc:	d810      	bhi.n	8005ce0 <UART_SetConfig+0x180>
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d002      	beq.n	8005cc8 <UART_SetConfig+0x168>
 8005cc2:	2b10      	cmp	r3, #16
 8005cc4:	d006      	beq.n	8005cd4 <UART_SetConfig+0x174>
 8005cc6:	e00b      	b.n	8005ce0 <UART_SetConfig+0x180>
 8005cc8:	2300      	movs	r3, #0
 8005cca:	76fb      	strb	r3, [r7, #27]
 8005ccc:	e089      	b.n	8005de2 <UART_SetConfig+0x282>
 8005cce:	2302      	movs	r3, #2
 8005cd0:	76fb      	strb	r3, [r7, #27]
 8005cd2:	e086      	b.n	8005de2 <UART_SetConfig+0x282>
 8005cd4:	2304      	movs	r3, #4
 8005cd6:	76fb      	strb	r3, [r7, #27]
 8005cd8:	e083      	b.n	8005de2 <UART_SetConfig+0x282>
 8005cda:	2308      	movs	r3, #8
 8005cdc:	76fb      	strb	r3, [r7, #27]
 8005cde:	e080      	b.n	8005de2 <UART_SetConfig+0x282>
 8005ce0:	2310      	movs	r3, #16
 8005ce2:	76fb      	strb	r3, [r7, #27]
 8005ce4:	e07d      	b.n	8005de2 <UART_SetConfig+0x282>
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	4a5b      	ldr	r2, [pc, #364]	; (8005e58 <UART_SetConfig+0x2f8>)
 8005cec:	4293      	cmp	r3, r2
 8005cee:	d120      	bne.n	8005d32 <UART_SetConfig+0x1d2>
 8005cf0:	4b56      	ldr	r3, [pc, #344]	; (8005e4c <UART_SetConfig+0x2ec>)
 8005cf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cf6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005cfa:	2bc0      	cmp	r3, #192	; 0xc0
 8005cfc:	d013      	beq.n	8005d26 <UART_SetConfig+0x1c6>
 8005cfe:	2bc0      	cmp	r3, #192	; 0xc0
 8005d00:	d814      	bhi.n	8005d2c <UART_SetConfig+0x1cc>
 8005d02:	2b80      	cmp	r3, #128	; 0x80
 8005d04:	d009      	beq.n	8005d1a <UART_SetConfig+0x1ba>
 8005d06:	2b80      	cmp	r3, #128	; 0x80
 8005d08:	d810      	bhi.n	8005d2c <UART_SetConfig+0x1cc>
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d002      	beq.n	8005d14 <UART_SetConfig+0x1b4>
 8005d0e:	2b40      	cmp	r3, #64	; 0x40
 8005d10:	d006      	beq.n	8005d20 <UART_SetConfig+0x1c0>
 8005d12:	e00b      	b.n	8005d2c <UART_SetConfig+0x1cc>
 8005d14:	2300      	movs	r3, #0
 8005d16:	76fb      	strb	r3, [r7, #27]
 8005d18:	e063      	b.n	8005de2 <UART_SetConfig+0x282>
 8005d1a:	2302      	movs	r3, #2
 8005d1c:	76fb      	strb	r3, [r7, #27]
 8005d1e:	e060      	b.n	8005de2 <UART_SetConfig+0x282>
 8005d20:	2304      	movs	r3, #4
 8005d22:	76fb      	strb	r3, [r7, #27]
 8005d24:	e05d      	b.n	8005de2 <UART_SetConfig+0x282>
 8005d26:	2308      	movs	r3, #8
 8005d28:	76fb      	strb	r3, [r7, #27]
 8005d2a:	e05a      	b.n	8005de2 <UART_SetConfig+0x282>
 8005d2c:	2310      	movs	r3, #16
 8005d2e:	76fb      	strb	r3, [r7, #27]
 8005d30:	e057      	b.n	8005de2 <UART_SetConfig+0x282>
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	4a49      	ldr	r2, [pc, #292]	; (8005e5c <UART_SetConfig+0x2fc>)
 8005d38:	4293      	cmp	r3, r2
 8005d3a:	d125      	bne.n	8005d88 <UART_SetConfig+0x228>
 8005d3c:	4b43      	ldr	r3, [pc, #268]	; (8005e4c <UART_SetConfig+0x2ec>)
 8005d3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d46:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005d4a:	d017      	beq.n	8005d7c <UART_SetConfig+0x21c>
 8005d4c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005d50:	d817      	bhi.n	8005d82 <UART_SetConfig+0x222>
 8005d52:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d56:	d00b      	beq.n	8005d70 <UART_SetConfig+0x210>
 8005d58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d5c:	d811      	bhi.n	8005d82 <UART_SetConfig+0x222>
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d003      	beq.n	8005d6a <UART_SetConfig+0x20a>
 8005d62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d66:	d006      	beq.n	8005d76 <UART_SetConfig+0x216>
 8005d68:	e00b      	b.n	8005d82 <UART_SetConfig+0x222>
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	76fb      	strb	r3, [r7, #27]
 8005d6e:	e038      	b.n	8005de2 <UART_SetConfig+0x282>
 8005d70:	2302      	movs	r3, #2
 8005d72:	76fb      	strb	r3, [r7, #27]
 8005d74:	e035      	b.n	8005de2 <UART_SetConfig+0x282>
 8005d76:	2304      	movs	r3, #4
 8005d78:	76fb      	strb	r3, [r7, #27]
 8005d7a:	e032      	b.n	8005de2 <UART_SetConfig+0x282>
 8005d7c:	2308      	movs	r3, #8
 8005d7e:	76fb      	strb	r3, [r7, #27]
 8005d80:	e02f      	b.n	8005de2 <UART_SetConfig+0x282>
 8005d82:	2310      	movs	r3, #16
 8005d84:	76fb      	strb	r3, [r7, #27]
 8005d86:	e02c      	b.n	8005de2 <UART_SetConfig+0x282>
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	4a2d      	ldr	r2, [pc, #180]	; (8005e44 <UART_SetConfig+0x2e4>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d125      	bne.n	8005dde <UART_SetConfig+0x27e>
 8005d92:	4b2e      	ldr	r3, [pc, #184]	; (8005e4c <UART_SetConfig+0x2ec>)
 8005d94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d98:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005d9c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005da0:	d017      	beq.n	8005dd2 <UART_SetConfig+0x272>
 8005da2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005da6:	d817      	bhi.n	8005dd8 <UART_SetConfig+0x278>
 8005da8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005dac:	d00b      	beq.n	8005dc6 <UART_SetConfig+0x266>
 8005dae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005db2:	d811      	bhi.n	8005dd8 <UART_SetConfig+0x278>
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d003      	beq.n	8005dc0 <UART_SetConfig+0x260>
 8005db8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005dbc:	d006      	beq.n	8005dcc <UART_SetConfig+0x26c>
 8005dbe:	e00b      	b.n	8005dd8 <UART_SetConfig+0x278>
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	76fb      	strb	r3, [r7, #27]
 8005dc4:	e00d      	b.n	8005de2 <UART_SetConfig+0x282>
 8005dc6:	2302      	movs	r3, #2
 8005dc8:	76fb      	strb	r3, [r7, #27]
 8005dca:	e00a      	b.n	8005de2 <UART_SetConfig+0x282>
 8005dcc:	2304      	movs	r3, #4
 8005dce:	76fb      	strb	r3, [r7, #27]
 8005dd0:	e007      	b.n	8005de2 <UART_SetConfig+0x282>
 8005dd2:	2308      	movs	r3, #8
 8005dd4:	76fb      	strb	r3, [r7, #27]
 8005dd6:	e004      	b.n	8005de2 <UART_SetConfig+0x282>
 8005dd8:	2310      	movs	r3, #16
 8005dda:	76fb      	strb	r3, [r7, #27]
 8005ddc:	e001      	b.n	8005de2 <UART_SetConfig+0x282>
 8005dde:	2310      	movs	r3, #16
 8005de0:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	4a17      	ldr	r2, [pc, #92]	; (8005e44 <UART_SetConfig+0x2e4>)
 8005de8:	4293      	cmp	r3, r2
 8005dea:	f040 8087 	bne.w	8005efc <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005dee:	7efb      	ldrb	r3, [r7, #27]
 8005df0:	2b08      	cmp	r3, #8
 8005df2:	d837      	bhi.n	8005e64 <UART_SetConfig+0x304>
 8005df4:	a201      	add	r2, pc, #4	; (adr r2, 8005dfc <UART_SetConfig+0x29c>)
 8005df6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dfa:	bf00      	nop
 8005dfc:	08005e21 	.word	0x08005e21
 8005e00:	08005e65 	.word	0x08005e65
 8005e04:	08005e29 	.word	0x08005e29
 8005e08:	08005e65 	.word	0x08005e65
 8005e0c:	08005e2f 	.word	0x08005e2f
 8005e10:	08005e65 	.word	0x08005e65
 8005e14:	08005e65 	.word	0x08005e65
 8005e18:	08005e65 	.word	0x08005e65
 8005e1c:	08005e37 	.word	0x08005e37
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e20:	f7fe fcfe 	bl	8004820 <HAL_RCC_GetPCLK1Freq>
 8005e24:	6178      	str	r0, [r7, #20]
        break;
 8005e26:	e022      	b.n	8005e6e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005e28:	4b0d      	ldr	r3, [pc, #52]	; (8005e60 <UART_SetConfig+0x300>)
 8005e2a:	617b      	str	r3, [r7, #20]
        break;
 8005e2c:	e01f      	b.n	8005e6e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005e2e:	f7fe fc5f 	bl	80046f0 <HAL_RCC_GetSysClockFreq>
 8005e32:	6178      	str	r0, [r7, #20]
        break;
 8005e34:	e01b      	b.n	8005e6e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e3a:	617b      	str	r3, [r7, #20]
        break;
 8005e3c:	e017      	b.n	8005e6e <UART_SetConfig+0x30e>
 8005e3e:	bf00      	nop
 8005e40:	efff69f3 	.word	0xefff69f3
 8005e44:	40008000 	.word	0x40008000
 8005e48:	40013800 	.word	0x40013800
 8005e4c:	40021000 	.word	0x40021000
 8005e50:	40004400 	.word	0x40004400
 8005e54:	40004800 	.word	0x40004800
 8005e58:	40004c00 	.word	0x40004c00
 8005e5c:	40005000 	.word	0x40005000
 8005e60:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8005e64:	2300      	movs	r3, #0
 8005e66:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005e68:	2301      	movs	r3, #1
 8005e6a:	76bb      	strb	r3, [r7, #26]
        break;
 8005e6c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005e6e:	697b      	ldr	r3, [r7, #20]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	f000 80f1 	beq.w	8006058 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	685a      	ldr	r2, [r3, #4]
 8005e7a:	4613      	mov	r3, r2
 8005e7c:	005b      	lsls	r3, r3, #1
 8005e7e:	4413      	add	r3, r2
 8005e80:	697a      	ldr	r2, [r7, #20]
 8005e82:	429a      	cmp	r2, r3
 8005e84:	d305      	bcc.n	8005e92 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	685b      	ldr	r3, [r3, #4]
 8005e8a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005e8c:	697a      	ldr	r2, [r7, #20]
 8005e8e:	429a      	cmp	r2, r3
 8005e90:	d902      	bls.n	8005e98 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8005e92:	2301      	movs	r3, #1
 8005e94:	76bb      	strb	r3, [r7, #26]
 8005e96:	e0df      	b.n	8006058 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005e98:	697b      	ldr	r3, [r7, #20]
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	f04f 0100 	mov.w	r1, #0
 8005ea0:	f04f 0200 	mov.w	r2, #0
 8005ea4:	f04f 0300 	mov.w	r3, #0
 8005ea8:	020b      	lsls	r3, r1, #8
 8005eaa:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005eae:	0202      	lsls	r2, r0, #8
 8005eb0:	6879      	ldr	r1, [r7, #4]
 8005eb2:	6849      	ldr	r1, [r1, #4]
 8005eb4:	0849      	lsrs	r1, r1, #1
 8005eb6:	4608      	mov	r0, r1
 8005eb8:	f04f 0100 	mov.w	r1, #0
 8005ebc:	1814      	adds	r4, r2, r0
 8005ebe:	eb43 0501 	adc.w	r5, r3, r1
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	685b      	ldr	r3, [r3, #4]
 8005ec6:	461a      	mov	r2, r3
 8005ec8:	f04f 0300 	mov.w	r3, #0
 8005ecc:	4620      	mov	r0, r4
 8005ece:	4629      	mov	r1, r5
 8005ed0:	f7fa fe6a 	bl	8000ba8 <__aeabi_uldivmod>
 8005ed4:	4602      	mov	r2, r0
 8005ed6:	460b      	mov	r3, r1
 8005ed8:	4613      	mov	r3, r2
 8005eda:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005edc:	693b      	ldr	r3, [r7, #16]
 8005ede:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005ee2:	d308      	bcc.n	8005ef6 <UART_SetConfig+0x396>
 8005ee4:	693b      	ldr	r3, [r7, #16]
 8005ee6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005eea:	d204      	bcs.n	8005ef6 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	693a      	ldr	r2, [r7, #16]
 8005ef2:	60da      	str	r2, [r3, #12]
 8005ef4:	e0b0      	b.n	8006058 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8005ef6:	2301      	movs	r3, #1
 8005ef8:	76bb      	strb	r3, [r7, #26]
 8005efa:	e0ad      	b.n	8006058 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	69db      	ldr	r3, [r3, #28]
 8005f00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f04:	d15b      	bne.n	8005fbe <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 8005f06:	7efb      	ldrb	r3, [r7, #27]
 8005f08:	2b08      	cmp	r3, #8
 8005f0a:	d828      	bhi.n	8005f5e <UART_SetConfig+0x3fe>
 8005f0c:	a201      	add	r2, pc, #4	; (adr r2, 8005f14 <UART_SetConfig+0x3b4>)
 8005f0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f12:	bf00      	nop
 8005f14:	08005f39 	.word	0x08005f39
 8005f18:	08005f41 	.word	0x08005f41
 8005f1c:	08005f49 	.word	0x08005f49
 8005f20:	08005f5f 	.word	0x08005f5f
 8005f24:	08005f4f 	.word	0x08005f4f
 8005f28:	08005f5f 	.word	0x08005f5f
 8005f2c:	08005f5f 	.word	0x08005f5f
 8005f30:	08005f5f 	.word	0x08005f5f
 8005f34:	08005f57 	.word	0x08005f57
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f38:	f7fe fc72 	bl	8004820 <HAL_RCC_GetPCLK1Freq>
 8005f3c:	6178      	str	r0, [r7, #20]
        break;
 8005f3e:	e013      	b.n	8005f68 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005f40:	f7fe fc84 	bl	800484c <HAL_RCC_GetPCLK2Freq>
 8005f44:	6178      	str	r0, [r7, #20]
        break;
 8005f46:	e00f      	b.n	8005f68 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005f48:	4b49      	ldr	r3, [pc, #292]	; (8006070 <UART_SetConfig+0x510>)
 8005f4a:	617b      	str	r3, [r7, #20]
        break;
 8005f4c:	e00c      	b.n	8005f68 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005f4e:	f7fe fbcf 	bl	80046f0 <HAL_RCC_GetSysClockFreq>
 8005f52:	6178      	str	r0, [r7, #20]
        break;
 8005f54:	e008      	b.n	8005f68 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f5a:	617b      	str	r3, [r7, #20]
        break;
 8005f5c:	e004      	b.n	8005f68 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8005f5e:	2300      	movs	r3, #0
 8005f60:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005f62:	2301      	movs	r3, #1
 8005f64:	76bb      	strb	r3, [r7, #26]
        break;
 8005f66:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005f68:	697b      	ldr	r3, [r7, #20]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d074      	beq.n	8006058 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005f6e:	697b      	ldr	r3, [r7, #20]
 8005f70:	005a      	lsls	r2, r3, #1
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	685b      	ldr	r3, [r3, #4]
 8005f76:	085b      	lsrs	r3, r3, #1
 8005f78:	441a      	add	r2, r3
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	685b      	ldr	r3, [r3, #4]
 8005f7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f82:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005f84:	693b      	ldr	r3, [r7, #16]
 8005f86:	2b0f      	cmp	r3, #15
 8005f88:	d916      	bls.n	8005fb8 <UART_SetConfig+0x458>
 8005f8a:	693b      	ldr	r3, [r7, #16]
 8005f8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f90:	d212      	bcs.n	8005fb8 <UART_SetConfig+0x458>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005f92:	693b      	ldr	r3, [r7, #16]
 8005f94:	b29b      	uxth	r3, r3
 8005f96:	f023 030f 	bic.w	r3, r3, #15
 8005f9a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005f9c:	693b      	ldr	r3, [r7, #16]
 8005f9e:	085b      	lsrs	r3, r3, #1
 8005fa0:	b29b      	uxth	r3, r3
 8005fa2:	f003 0307 	and.w	r3, r3, #7
 8005fa6:	b29a      	uxth	r2, r3
 8005fa8:	89fb      	ldrh	r3, [r7, #14]
 8005faa:	4313      	orrs	r3, r2
 8005fac:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	89fa      	ldrh	r2, [r7, #14]
 8005fb4:	60da      	str	r2, [r3, #12]
 8005fb6:	e04f      	b.n	8006058 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8005fb8:	2301      	movs	r3, #1
 8005fba:	76bb      	strb	r3, [r7, #26]
 8005fbc:	e04c      	b.n	8006058 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005fbe:	7efb      	ldrb	r3, [r7, #27]
 8005fc0:	2b08      	cmp	r3, #8
 8005fc2:	d828      	bhi.n	8006016 <UART_SetConfig+0x4b6>
 8005fc4:	a201      	add	r2, pc, #4	; (adr r2, 8005fcc <UART_SetConfig+0x46c>)
 8005fc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fca:	bf00      	nop
 8005fcc:	08005ff1 	.word	0x08005ff1
 8005fd0:	08005ff9 	.word	0x08005ff9
 8005fd4:	08006001 	.word	0x08006001
 8005fd8:	08006017 	.word	0x08006017
 8005fdc:	08006007 	.word	0x08006007
 8005fe0:	08006017 	.word	0x08006017
 8005fe4:	08006017 	.word	0x08006017
 8005fe8:	08006017 	.word	0x08006017
 8005fec:	0800600f 	.word	0x0800600f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ff0:	f7fe fc16 	bl	8004820 <HAL_RCC_GetPCLK1Freq>
 8005ff4:	6178      	str	r0, [r7, #20]
        break;
 8005ff6:	e013      	b.n	8006020 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005ff8:	f7fe fc28 	bl	800484c <HAL_RCC_GetPCLK2Freq>
 8005ffc:	6178      	str	r0, [r7, #20]
        break;
 8005ffe:	e00f      	b.n	8006020 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006000:	4b1b      	ldr	r3, [pc, #108]	; (8006070 <UART_SetConfig+0x510>)
 8006002:	617b      	str	r3, [r7, #20]
        break;
 8006004:	e00c      	b.n	8006020 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006006:	f7fe fb73 	bl	80046f0 <HAL_RCC_GetSysClockFreq>
 800600a:	6178      	str	r0, [r7, #20]
        break;
 800600c:	e008      	b.n	8006020 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800600e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006012:	617b      	str	r3, [r7, #20]
        break;
 8006014:	e004      	b.n	8006020 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8006016:	2300      	movs	r3, #0
 8006018:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800601a:	2301      	movs	r3, #1
 800601c:	76bb      	strb	r3, [r7, #26]
        break;
 800601e:	bf00      	nop
    }

    if (pclk != 0U)
 8006020:	697b      	ldr	r3, [r7, #20]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d018      	beq.n	8006058 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	685b      	ldr	r3, [r3, #4]
 800602a:	085a      	lsrs	r2, r3, #1
 800602c:	697b      	ldr	r3, [r7, #20]
 800602e:	441a      	add	r2, r3
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	685b      	ldr	r3, [r3, #4]
 8006034:	fbb2 f3f3 	udiv	r3, r2, r3
 8006038:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800603a:	693b      	ldr	r3, [r7, #16]
 800603c:	2b0f      	cmp	r3, #15
 800603e:	d909      	bls.n	8006054 <UART_SetConfig+0x4f4>
 8006040:	693b      	ldr	r3, [r7, #16]
 8006042:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006046:	d205      	bcs.n	8006054 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006048:	693b      	ldr	r3, [r7, #16]
 800604a:	b29a      	uxth	r2, r3
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	60da      	str	r2, [r3, #12]
 8006052:	e001      	b.n	8006058 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8006054:	2301      	movs	r3, #1
 8006056:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2200      	movs	r2, #0
 800605c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	2200      	movs	r2, #0
 8006062:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006064:	7ebb      	ldrb	r3, [r7, #26]
}
 8006066:	4618      	mov	r0, r3
 8006068:	3720      	adds	r7, #32
 800606a:	46bd      	mov	sp, r7
 800606c:	bdb0      	pop	{r4, r5, r7, pc}
 800606e:	bf00      	nop
 8006070:	00f42400 	.word	0x00f42400

08006074 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006074:	b480      	push	{r7}
 8006076:	b083      	sub	sp, #12
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006080:	f003 0301 	and.w	r3, r3, #1
 8006084:	2b00      	cmp	r3, #0
 8006086:	d00a      	beq.n	800609e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	685b      	ldr	r3, [r3, #4]
 800608e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	430a      	orrs	r2, r1
 800609c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060a2:	f003 0302 	and.w	r3, r3, #2
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d00a      	beq.n	80060c0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	685b      	ldr	r3, [r3, #4]
 80060b0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	430a      	orrs	r2, r1
 80060be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060c4:	f003 0304 	and.w	r3, r3, #4
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d00a      	beq.n	80060e2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	685b      	ldr	r3, [r3, #4]
 80060d2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	430a      	orrs	r2, r1
 80060e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060e6:	f003 0308 	and.w	r3, r3, #8
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d00a      	beq.n	8006104 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	685b      	ldr	r3, [r3, #4]
 80060f4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	430a      	orrs	r2, r1
 8006102:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006108:	f003 0310 	and.w	r3, r3, #16
 800610c:	2b00      	cmp	r3, #0
 800610e:	d00a      	beq.n	8006126 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	689b      	ldr	r3, [r3, #8]
 8006116:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	430a      	orrs	r2, r1
 8006124:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800612a:	f003 0320 	and.w	r3, r3, #32
 800612e:	2b00      	cmp	r3, #0
 8006130:	d00a      	beq.n	8006148 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	689b      	ldr	r3, [r3, #8]
 8006138:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	430a      	orrs	r2, r1
 8006146:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800614c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006150:	2b00      	cmp	r3, #0
 8006152:	d01a      	beq.n	800618a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	685b      	ldr	r3, [r3, #4]
 800615a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	430a      	orrs	r2, r1
 8006168:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800616e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006172:	d10a      	bne.n	800618a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	685b      	ldr	r3, [r3, #4]
 800617a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	430a      	orrs	r2, r1
 8006188:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800618e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006192:	2b00      	cmp	r3, #0
 8006194:	d00a      	beq.n	80061ac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	685b      	ldr	r3, [r3, #4]
 800619c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	430a      	orrs	r2, r1
 80061aa:	605a      	str	r2, [r3, #4]
  }
}
 80061ac:	bf00      	nop
 80061ae:	370c      	adds	r7, #12
 80061b0:	46bd      	mov	sp, r7
 80061b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b6:	4770      	bx	lr

080061b8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b086      	sub	sp, #24
 80061bc:	af02      	add	r7, sp, #8
 80061be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2200      	movs	r2, #0
 80061c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80061c8:	f7fb fd96 	bl	8001cf8 <HAL_GetTick>
 80061cc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f003 0308 	and.w	r3, r3, #8
 80061d8:	2b08      	cmp	r3, #8
 80061da:	d10e      	bne.n	80061fa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80061dc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80061e0:	9300      	str	r3, [sp, #0]
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	2200      	movs	r2, #0
 80061e6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80061ea:	6878      	ldr	r0, [r7, #4]
 80061ec:	f000 f82d 	bl	800624a <UART_WaitOnFlagUntilTimeout>
 80061f0:	4603      	mov	r3, r0
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d001      	beq.n	80061fa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80061f6:	2303      	movs	r3, #3
 80061f8:	e023      	b.n	8006242 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f003 0304 	and.w	r3, r3, #4
 8006204:	2b04      	cmp	r3, #4
 8006206:	d10e      	bne.n	8006226 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006208:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800620c:	9300      	str	r3, [sp, #0]
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	2200      	movs	r2, #0
 8006212:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006216:	6878      	ldr	r0, [r7, #4]
 8006218:	f000 f817 	bl	800624a <UART_WaitOnFlagUntilTimeout>
 800621c:	4603      	mov	r3, r0
 800621e:	2b00      	cmp	r3, #0
 8006220:	d001      	beq.n	8006226 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006222:	2303      	movs	r3, #3
 8006224:	e00d      	b.n	8006242 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2220      	movs	r2, #32
 800622a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2220      	movs	r2, #32
 8006230:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2200      	movs	r2, #0
 8006236:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2200      	movs	r2, #0
 800623c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006240:	2300      	movs	r3, #0
}
 8006242:	4618      	mov	r0, r3
 8006244:	3710      	adds	r7, #16
 8006246:	46bd      	mov	sp, r7
 8006248:	bd80      	pop	{r7, pc}

0800624a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800624a:	b580      	push	{r7, lr}
 800624c:	b09c      	sub	sp, #112	; 0x70
 800624e:	af00      	add	r7, sp, #0
 8006250:	60f8      	str	r0, [r7, #12]
 8006252:	60b9      	str	r1, [r7, #8]
 8006254:	603b      	str	r3, [r7, #0]
 8006256:	4613      	mov	r3, r2
 8006258:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800625a:	e0a5      	b.n	80063a8 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800625c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800625e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006262:	f000 80a1 	beq.w	80063a8 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006266:	f7fb fd47 	bl	8001cf8 <HAL_GetTick>
 800626a:	4602      	mov	r2, r0
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	1ad3      	subs	r3, r2, r3
 8006270:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006272:	429a      	cmp	r2, r3
 8006274:	d302      	bcc.n	800627c <UART_WaitOnFlagUntilTimeout+0x32>
 8006276:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006278:	2b00      	cmp	r3, #0
 800627a:	d13e      	bne.n	80062fa <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006282:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006284:	e853 3f00 	ldrex	r3, [r3]
 8006288:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800628a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800628c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006290:	667b      	str	r3, [r7, #100]	; 0x64
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	461a      	mov	r2, r3
 8006298:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800629a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800629c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800629e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80062a0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80062a2:	e841 2300 	strex	r3, r2, [r1]
 80062a6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80062a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d1e6      	bne.n	800627c <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	3308      	adds	r3, #8
 80062b4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062b8:	e853 3f00 	ldrex	r3, [r3]
 80062bc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80062be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062c0:	f023 0301 	bic.w	r3, r3, #1
 80062c4:	663b      	str	r3, [r7, #96]	; 0x60
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	3308      	adds	r3, #8
 80062cc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80062ce:	64ba      	str	r2, [r7, #72]	; 0x48
 80062d0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062d2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80062d4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80062d6:	e841 2300 	strex	r3, r2, [r1]
 80062da:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80062dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d1e5      	bne.n	80062ae <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	2220      	movs	r2, #32
 80062e6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	2220      	movs	r2, #32
 80062ec:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	2200      	movs	r2, #0
 80062f2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80062f6:	2303      	movs	r3, #3
 80062f8:	e067      	b.n	80063ca <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f003 0304 	and.w	r3, r3, #4
 8006304:	2b00      	cmp	r3, #0
 8006306:	d04f      	beq.n	80063a8 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	69db      	ldr	r3, [r3, #28]
 800630e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006312:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006316:	d147      	bne.n	80063a8 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006320:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800632a:	e853 3f00 	ldrex	r3, [r3]
 800632e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006332:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006336:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	461a      	mov	r2, r3
 800633e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006340:	637b      	str	r3, [r7, #52]	; 0x34
 8006342:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006344:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006346:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006348:	e841 2300 	strex	r3, r2, [r1]
 800634c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800634e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006350:	2b00      	cmp	r3, #0
 8006352:	d1e6      	bne.n	8006322 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	3308      	adds	r3, #8
 800635a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800635c:	697b      	ldr	r3, [r7, #20]
 800635e:	e853 3f00 	ldrex	r3, [r3]
 8006362:	613b      	str	r3, [r7, #16]
   return(result);
 8006364:	693b      	ldr	r3, [r7, #16]
 8006366:	f023 0301 	bic.w	r3, r3, #1
 800636a:	66bb      	str	r3, [r7, #104]	; 0x68
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	3308      	adds	r3, #8
 8006372:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006374:	623a      	str	r2, [r7, #32]
 8006376:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006378:	69f9      	ldr	r1, [r7, #28]
 800637a:	6a3a      	ldr	r2, [r7, #32]
 800637c:	e841 2300 	strex	r3, r2, [r1]
 8006380:	61bb      	str	r3, [r7, #24]
   return(result);
 8006382:	69bb      	ldr	r3, [r7, #24]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d1e5      	bne.n	8006354 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	2220      	movs	r2, #32
 800638c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	2220      	movs	r2, #32
 8006392:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	2220      	movs	r2, #32
 8006398:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	2200      	movs	r2, #0
 80063a0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80063a4:	2303      	movs	r3, #3
 80063a6:	e010      	b.n	80063ca <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	69da      	ldr	r2, [r3, #28]
 80063ae:	68bb      	ldr	r3, [r7, #8]
 80063b0:	4013      	ands	r3, r2
 80063b2:	68ba      	ldr	r2, [r7, #8]
 80063b4:	429a      	cmp	r2, r3
 80063b6:	bf0c      	ite	eq
 80063b8:	2301      	moveq	r3, #1
 80063ba:	2300      	movne	r3, #0
 80063bc:	b2db      	uxtb	r3, r3
 80063be:	461a      	mov	r2, r3
 80063c0:	79fb      	ldrb	r3, [r7, #7]
 80063c2:	429a      	cmp	r2, r3
 80063c4:	f43f af4a 	beq.w	800625c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80063c8:	2300      	movs	r3, #0
}
 80063ca:	4618      	mov	r0, r3
 80063cc:	3770      	adds	r7, #112	; 0x70
 80063ce:	46bd      	mov	sp, r7
 80063d0:	bd80      	pop	{r7, pc}

080063d2 <bitmap_init>:
    return bitmap->width * (bitmap->depth / 8) * bitmap->height;
};

/* Initialise bitmap with given buffer. */
void bitmap_init(bitmap_t *bitmap, uint8_t *buffer)
{
 80063d2:	b480      	push	{r7}
 80063d4:	b083      	sub	sp, #12
 80063d6:	af00      	add	r7, sp, #0
 80063d8:	6078      	str	r0, [r7, #4]
 80063da:	6039      	str	r1, [r7, #0]
    bitmap->pitch = bitmap->width * (bitmap->depth / 8);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	881a      	ldrh	r2, [r3, #0]
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	799b      	ldrb	r3, [r3, #6]
 80063e4:	08db      	lsrs	r3, r3, #3
 80063e6:	b2db      	uxtb	r3, r3
 80063e8:	b29b      	uxth	r3, r3
 80063ea:	fb12 f303 	smulbb	r3, r2, r3
 80063ee:	b29a      	uxth	r2, r3
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	809a      	strh	r2, [r3, #4]
    bitmap->size = bitmap->pitch * bitmap->height;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	889b      	ldrh	r3, [r3, #4]
 80063f8:	461a      	mov	r2, r3
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	885b      	ldrh	r3, [r3, #2]
 80063fe:	fb03 f302 	mul.w	r3, r3, r2
 8006402:	461a      	mov	r2, r3
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	609a      	str	r2, [r3, #8]
    bitmap->buffer = buffer;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	683a      	ldr	r2, [r7, #0]
 800640c:	60da      	str	r2, [r3, #12]
}
 800640e:	bf00      	nop
 8006410:	370c      	adds	r7, #12
 8006412:	46bd      	mov	sp, r7
 8006414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006418:	4770      	bx	lr

0800641a <fontx_meta>:
#include <stddef.h>
#include <string.h>

#include "fontx.h"

uint8_t fontx_meta(fontx_meta_t *meta, const uint8_t *font) {
 800641a:	b580      	push	{r7, lr}
 800641c:	b082      	sub	sp, #8
 800641e:	af00      	add	r7, sp, #0
 8006420:	6078      	str	r0, [r7, #4]
 8006422:	6039      	str	r1, [r7, #0]

    memcpy(meta->name, &font[FONTX_NAME], 8);
 8006424:	6878      	ldr	r0, [r7, #4]
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	3306      	adds	r3, #6
 800642a:	2208      	movs	r2, #8
 800642c:	4619      	mov	r1, r3
 800642e:	f000 fca5 	bl	8006d7c <memcpy>
    meta->width = font[FONTX_WIDTH];
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	7b9a      	ldrb	r2, [r3, #14]
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	725a      	strb	r2, [r3, #9]
    meta->height = font[FONTX_HEIGHT];
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	7bda      	ldrb	r2, [r3, #15]
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	729a      	strb	r2, [r3, #10]
    meta->type = font[FONTX_TYPE];
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	7c1a      	ldrb	r2, [r3, #16]
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	72da      	strb	r2, [r3, #11]

    return 0;
 800644a:	2300      	movs	r3, #0
}
 800644c:	4618      	mov	r0, r3
 800644e:	3708      	adds	r7, #8
 8006450:	46bd      	mov	sp, r7
 8006452:	bd80      	pop	{r7, pc}

08006454 <fontx_glyph>:


uint8_t fontx_glyph(fontx_glyph_t *glyph, wchar_t code, const uint8_t* font) {
 8006454:	b580      	push	{r7, lr}
 8006456:	b08e      	sub	sp, #56	; 0x38
 8006458:	af00      	add	r7, sp, #0
 800645a:	60f8      	str	r0, [r7, #12]
 800645c:	60b9      	str	r1, [r7, #8]
 800645e:	607a      	str	r2, [r7, #4]
    uint32_t nc, bc, sb, eb;
    uint8_t status;
    const uint8_t *block_table;
    fontx_meta_t meta;

    status = fontx_meta(&meta, font);
 8006460:	f107 0314 	add.w	r3, r7, #20
 8006464:	6879      	ldr	r1, [r7, #4]
 8006466:	4618      	mov	r0, r3
 8006468:	f7ff ffd7 	bl	800641a <fontx_meta>
 800646c:	4603      	mov	r3, r0
 800646e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (0 != status) {
 8006472:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006476:	2b00      	cmp	r3, #0
 8006478:	d002      	beq.n	8006480 <fontx_glyph+0x2c>
        return status;
 800647a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800647e:	e077      	b.n	8006570 <fontx_glyph+0x11c>
    }

    glyph->width = meta.width;
 8006480:	7f7a      	ldrb	r2, [r7, #29]
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	701a      	strb	r2, [r3, #0]
    glyph->height = meta.height;
 8006486:	7fba      	ldrb	r2, [r7, #30]
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	705a      	strb	r2, [r3, #1]
    glyph->pitch = (meta.width + 7) / 8;
 800648c:	7f7b      	ldrb	r3, [r7, #29]
 800648e:	3307      	adds	r3, #7
 8006490:	2b00      	cmp	r3, #0
 8006492:	da00      	bge.n	8006496 <fontx_glyph+0x42>
 8006494:	3307      	adds	r3, #7
 8006496:	10db      	asrs	r3, r3, #3
 8006498:	b2da      	uxtb	r2, r3
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	70da      	strb	r2, [r3, #3]
    glyph->size = glyph->pitch * meta.height;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	78da      	ldrb	r2, [r3, #3]
 80064a2:	7fbb      	ldrb	r3, [r7, #30]
 80064a4:	fb12 f303 	smulbb	r3, r2, r3
 80064a8:	b2da      	uxtb	r2, r3
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	709a      	strb	r2, [r3, #2]

    if (FONTX_TYPE_SBCS == meta.type) {
 80064ae:	7ffb      	ldrb	r3, [r7, #31]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d10f      	bne.n	80064d4 <fontx_glyph+0x80>
        if (code < 0x100) {
 80064b4:	68bb      	ldr	r3, [r7, #8]
 80064b6:	2bff      	cmp	r3, #255	; 0xff
 80064b8:	d859      	bhi.n	800656e <fontx_glyph+0x11a>
            glyph->buffer = &font[FONTX_GLYPH_DATA_START + code * glyph->size];
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	789b      	ldrb	r3, [r3, #2]
 80064be:	461a      	mov	r2, r3
 80064c0:	68bb      	ldr	r3, [r7, #8]
 80064c2:	fb03 f302 	mul.w	r3, r3, r2
 80064c6:	3311      	adds	r3, #17
 80064c8:	687a      	ldr	r2, [r7, #4]
 80064ca:	441a      	add	r2, r3
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	605a      	str	r2, [r3, #4]
            return FONTX_OK;
 80064d0:	2300      	movs	r3, #0
 80064d2:	e04d      	b.n	8006570 <fontx_glyph+0x11c>
        }
    } else {
        block_table = &font[FONTX_BLOCK_TABLE_START];
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	3312      	adds	r3, #18
 80064d8:	62fb      	str	r3, [r7, #44]	; 0x2c
        nc = 0;
 80064da:	2300      	movs	r3, #0
 80064dc:	637b      	str	r3, [r7, #52]	; 0x34
        bc = font[FONTX_BLOCK_TABLE_SIZE];
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	3311      	adds	r3, #17
 80064e2:	781b      	ldrb	r3, [r3, #0]
 80064e4:	633b      	str	r3, [r7, #48]	; 0x30
        while (bc--) {
 80064e6:	e03d      	b.n	8006564 <fontx_glyph+0x110>
            /* Get range of the code block_table. */
            sb = block_table[0] + block_table[1] * 0x100;
 80064e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064ea:	781b      	ldrb	r3, [r3, #0]
 80064ec:	461a      	mov	r2, r3
 80064ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064f0:	3301      	adds	r3, #1
 80064f2:	781b      	ldrb	r3, [r3, #0]
 80064f4:	021b      	lsls	r3, r3, #8
 80064f6:	4413      	add	r3, r2
 80064f8:	627b      	str	r3, [r7, #36]	; 0x24
            eb = block_table[2] + block_table[3] * 0x100;
 80064fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064fc:	3302      	adds	r3, #2
 80064fe:	781b      	ldrb	r3, [r3, #0]
 8006500:	461a      	mov	r2, r3
 8006502:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006504:	3303      	adds	r3, #3
 8006506:	781b      	ldrb	r3, [r3, #0]
 8006508:	021b      	lsls	r3, r3, #8
 800650a:	4413      	add	r3, r2
 800650c:	623b      	str	r3, [r7, #32]

             /* Check if in the code block_table. */
            if (code >= sb && code <= eb) {
 800650e:	68ba      	ldr	r2, [r7, #8]
 8006510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006512:	429a      	cmp	r2, r3
 8006514:	d31c      	bcc.n	8006550 <fontx_glyph+0xfc>
 8006516:	68ba      	ldr	r2, [r7, #8]
 8006518:	6a3b      	ldr	r3, [r7, #32]
 800651a:	429a      	cmp	r2, r3
 800651c:	d818      	bhi.n	8006550 <fontx_glyph+0xfc>
                /* Number of codes from top of the block_table. */
                nc += code - sb;
 800651e:	68ba      	ldr	r2, [r7, #8]
 8006520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006522:	1ad3      	subs	r3, r2, r3
 8006524:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006526:	4413      	add	r3, r2
 8006528:	637b      	str	r3, [r7, #52]	; 0x34
                glyph->buffer = &font[
                    FONTX_BLOCK_TABLE_START +
                    4 * font[FONTX_BLOCK_TABLE_SIZE] +
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	3311      	adds	r3, #17
 800652e:	781b      	ldrb	r3, [r3, #0]
 8006530:	009b      	lsls	r3, r3, #2
 8006532:	461a      	mov	r2, r3
                    nc * glyph->size
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	789b      	ldrb	r3, [r3, #2]
 8006538:	4619      	mov	r1, r3
 800653a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800653c:	fb03 f301 	mul.w	r3, r3, r1
                    4 * font[FONTX_BLOCK_TABLE_SIZE] +
 8006540:	4413      	add	r3, r2
 8006542:	3312      	adds	r3, #18
                glyph->buffer = &font[
 8006544:	687a      	ldr	r2, [r7, #4]
 8006546:	441a      	add	r2, r3
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	605a      	str	r2, [r3, #4]
                ];
                return FONTX_OK;
 800654c:	2300      	movs	r3, #0
 800654e:	e00f      	b.n	8006570 <fontx_glyph+0x11c>
            }
            /* Number of codes in the previous block_tables. */
            nc += eb - sb + 1;
 8006550:	6a3a      	ldr	r2, [r7, #32]
 8006552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006554:	1ad2      	subs	r2, r2, r3
 8006556:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006558:	4413      	add	r3, r2
 800655a:	3301      	adds	r3, #1
 800655c:	637b      	str	r3, [r7, #52]	; 0x34
            /* Next code block_table. */
            block_table += 4;
 800655e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006560:	3304      	adds	r3, #4
 8006562:	62fb      	str	r3, [r7, #44]	; 0x2c
        while (bc--) {
 8006564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006566:	1e5a      	subs	r2, r3, #1
 8006568:	633a      	str	r2, [r7, #48]	; 0x30
 800656a:	2b00      	cmp	r3, #0
 800656c:	d1bc      	bne.n	80064e8 <fontx_glyph+0x94>
        }
    }

    return FONTX_ERR_GLYPH_NOT_FOUND;
 800656e:	2301      	movs	r3, #1
 8006570:	4618      	mov	r0, r3
 8006572:	3738      	adds	r7, #56	; 0x38
 8006574:	46bd      	mov	sp, r7
 8006576:	bd80      	pop	{r7, pc}

08006578 <hagl_put_pixel>:
    clip_window.x1 = x1;
    clip_window.y1 = y1;
}

void hagl_put_pixel(int16_t x0, int16_t y0, color_t color)
{
 8006578:	b580      	push	{r7, lr}
 800657a:	b082      	sub	sp, #8
 800657c:	af00      	add	r7, sp, #0
 800657e:	4603      	mov	r3, r0
 8006580:	80fb      	strh	r3, [r7, #6]
 8006582:	460b      	mov	r3, r1
 8006584:	80bb      	strh	r3, [r7, #4]
 8006586:	4613      	mov	r3, r2
 8006588:	807b      	strh	r3, [r7, #2]
    /* x0 or y0 is before the edge, nothing to do. */
    if ((x0 < clip_window.x0) || (y0 < clip_window.y0))  {
 800658a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800658e:	4a12      	ldr	r2, [pc, #72]	; (80065d8 <hagl_put_pixel+0x60>)
 8006590:	8812      	ldrh	r2, [r2, #0]
 8006592:	4293      	cmp	r3, r2
 8006594:	db1a      	blt.n	80065cc <hagl_put_pixel+0x54>
 8006596:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800659a:	4a0f      	ldr	r2, [pc, #60]	; (80065d8 <hagl_put_pixel+0x60>)
 800659c:	8852      	ldrh	r2, [r2, #2]
 800659e:	4293      	cmp	r3, r2
 80065a0:	db14      	blt.n	80065cc <hagl_put_pixel+0x54>
        return;
    }

    /* x0 or y0 is after the edge, nothing to do. */
    if ((x0 > clip_window.x1) || (y0 > clip_window.y1)) {
 80065a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80065a6:	4a0c      	ldr	r2, [pc, #48]	; (80065d8 <hagl_put_pixel+0x60>)
 80065a8:	8892      	ldrh	r2, [r2, #4]
 80065aa:	4293      	cmp	r3, r2
 80065ac:	dc10      	bgt.n	80065d0 <hagl_put_pixel+0x58>
 80065ae:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80065b2:	4a09      	ldr	r2, [pc, #36]	; (80065d8 <hagl_put_pixel+0x60>)
 80065b4:	88d2      	ldrh	r2, [r2, #6]
 80065b6:	4293      	cmp	r3, r2
 80065b8:	dc0a      	bgt.n	80065d0 <hagl_put_pixel+0x58>
        return;
    }

    /* If still in bounds set the pixel. */
    hagl_hal_put_pixel(x0, y0, color);
 80065ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80065be:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80065c2:	887a      	ldrh	r2, [r7, #2]
 80065c4:	4618      	mov	r0, r3
 80065c6:	f7fa fee1 	bl	800138c <lcd_put_pixel>
 80065ca:	e002      	b.n	80065d2 <hagl_put_pixel+0x5a>
        return;
 80065cc:	bf00      	nop
 80065ce:	e000      	b.n	80065d2 <hagl_put_pixel+0x5a>
        return;
 80065d0:	bf00      	nop
}
 80065d2:	3708      	adds	r7, #8
 80065d4:	46bd      	mov	sp, r7
 80065d6:	bd80      	pop	{r7, pc}
 80065d8:	20000014 	.word	0x20000014

080065dc <hagl_put_char>:

    return 0;
}

uint8_t hagl_put_char(wchar_t code, int16_t x0, int16_t y0, color_t color, const uint8_t *font)
{
 80065dc:	b590      	push	{r4, r7, lr}
 80065de:	f5ad 5d81 	sub.w	sp, sp, #4128	; 0x1020
 80065e2:	b085      	sub	sp, #20
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	f107 0410 	add.w	r4, r7, #16
 80065ea:	3c04      	subs	r4, #4
 80065ec:	6020      	str	r0, [r4, #0]
 80065ee:	460c      	mov	r4, r1
 80065f0:	4610      	mov	r0, r2
 80065f2:	4619      	mov	r1, r3
 80065f4:	f107 0310 	add.w	r3, r7, #16
 80065f8:	3b06      	subs	r3, #6
 80065fa:	4622      	mov	r2, r4
 80065fc:	801a      	strh	r2, [r3, #0]
 80065fe:	f107 0310 	add.w	r3, r7, #16
 8006602:	3b08      	subs	r3, #8
 8006604:	4602      	mov	r2, r0
 8006606:	801a      	strh	r2, [r3, #0]
 8006608:	f107 0310 	add.w	r3, r7, #16
 800660c:	3b0a      	subs	r3, #10
 800660e:	460a      	mov	r2, r1
 8006610:	801a      	strh	r2, [r3, #0]
    uint8_t set, status;
    color_t buffer[HAGL_CHAR_BUFFER_SIZE];
    bitmap_t bitmap;
    fontx_glyph_t glyph;

    status = fontx_glyph(&glyph, code, font);
 8006612:	f107 0310 	add.w	r3, r7, #16
 8006616:	3b04      	subs	r3, #4
 8006618:	f107 0010 	add.w	r0, r7, #16
 800661c:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8006620:	6812      	ldr	r2, [r2, #0]
 8006622:	6819      	ldr	r1, [r3, #0]
 8006624:	f7ff ff16 	bl	8006454 <fontx_glyph>
 8006628:	4603      	mov	r3, r0
 800662a:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800662e:	f102 0209 	add.w	r2, r2, #9
 8006632:	7013      	strb	r3, [r2, #0]

    if (0 != status) {
 8006634:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8006638:	f103 0309 	add.w	r3, r3, #9
 800663c:	781b      	ldrb	r3, [r3, #0]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d001      	beq.n	8006646 <hagl_put_char+0x6a>
        return 0;
 8006642:	2300      	movs	r3, #0
 8006644:	e0c2      	b.n	80067cc <hagl_put_char+0x1f0>
    }

    bitmap.width = glyph.width,
 8006646:	f107 0310 	add.w	r3, r7, #16
 800664a:	781b      	ldrb	r3, [r3, #0]
 800664c:	b29a      	uxth	r2, r3
 800664e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006652:	3b18      	subs	r3, #24
 8006654:	801a      	strh	r2, [r3, #0]
    bitmap.height = glyph.height,
 8006656:	f107 0310 	add.w	r3, r7, #16
 800665a:	785b      	ldrb	r3, [r3, #1]
 800665c:	b29a      	uxth	r2, r3
 800665e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006662:	3b18      	subs	r3, #24
 8006664:	805a      	strh	r2, [r3, #2]
    bitmap.depth = DISPLAY_DEPTH,
 8006666:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800666a:	3b18      	subs	r3, #24
 800666c:	2210      	movs	r2, #16
 800666e:	719a      	strb	r2, [r3, #6]

    bitmap_init(&bitmap, (uint8_t *)buffer);
 8006670:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8006674:	3a08      	subs	r2, #8
 8006676:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800667a:	3b18      	subs	r3, #24
 800667c:	4611      	mov	r1, r2
 800667e:	4618      	mov	r0, r3
 8006680:	f7ff fea7 	bl	80063d2 <bitmap_init>

    color_t *ptr = (color_t *) bitmap.buffer;
 8006684:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006688:	3b18      	subs	r3, #24
 800668a:	68db      	ldr	r3, [r3, #12]
 800668c:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8006690:	f102 020c 	add.w	r2, r2, #12
 8006694:	6013      	str	r3, [r2, #0]

    for (uint8_t y = 0; y < glyph.height; y++) {
 8006696:	2300      	movs	r3, #0
 8006698:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800669c:	f102 020b 	add.w	r2, r2, #11
 80066a0:	7013      	strb	r3, [r2, #0]
 80066a2:	e074      	b.n	800678e <hagl_put_char+0x1b2>
        for (uint8_t x = 0; x < glyph.width; x++) {
 80066a4:	2300      	movs	r3, #0
 80066a6:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80066aa:	f102 020a 	add.w	r2, r2, #10
 80066ae:	7013      	strb	r3, [r2, #0]
 80066b0:	e04e      	b.n	8006750 <hagl_put_char+0x174>
            set = *(glyph.buffer + x / 8) & (0x80 >> (x % 8));
 80066b2:	f107 0310 	add.w	r3, r7, #16
 80066b6:	685b      	ldr	r3, [r3, #4]
 80066b8:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80066bc:	f102 020a 	add.w	r2, r2, #10
 80066c0:	7812      	ldrb	r2, [r2, #0]
 80066c2:	08d2      	lsrs	r2, r2, #3
 80066c4:	b2d2      	uxtb	r2, r2
 80066c6:	4413      	add	r3, r2
 80066c8:	781b      	ldrb	r3, [r3, #0]
 80066ca:	b25a      	sxtb	r2, r3
 80066cc:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80066d0:	f103 030a 	add.w	r3, r3, #10
 80066d4:	781b      	ldrb	r3, [r3, #0]
 80066d6:	f003 0307 	and.w	r3, r3, #7
 80066da:	2180      	movs	r1, #128	; 0x80
 80066dc:	fa41 f303 	asr.w	r3, r1, r3
 80066e0:	b25b      	sxtb	r3, r3
 80066e2:	4013      	ands	r3, r2
 80066e4:	b25b      	sxtb	r3, r3
 80066e6:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80066ea:	f102 0208 	add.w	r2, r2, #8
 80066ee:	7013      	strb	r3, [r2, #0]
            if (set) {
 80066f0:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80066f4:	f103 0308 	add.w	r3, r3, #8
 80066f8:	781b      	ldrb	r3, [r3, #0]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d010      	beq.n	8006720 <hagl_put_char+0x144>
                *(ptr++) = color;
 80066fe:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8006702:	f103 030c 	add.w	r3, r3, #12
 8006706:	681a      	ldr	r2, [r3, #0]
 8006708:	1c93      	adds	r3, r2, #2
 800670a:	f507 5181 	add.w	r1, r7, #4128	; 0x1020
 800670e:	f101 010c 	add.w	r1, r1, #12
 8006712:	600b      	str	r3, [r1, #0]
 8006714:	f107 0310 	add.w	r3, r7, #16
 8006718:	3b0a      	subs	r3, #10
 800671a:	881b      	ldrh	r3, [r3, #0]
 800671c:	8013      	strh	r3, [r2, #0]
 800671e:	e00c      	b.n	800673a <hagl_put_char+0x15e>
            } else {
                *(ptr++) = 0x0000;
 8006720:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8006724:	f103 030c 	add.w	r3, r3, #12
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	1c9a      	adds	r2, r3, #2
 800672c:	f507 5181 	add.w	r1, r7, #4128	; 0x1020
 8006730:	f101 010c 	add.w	r1, r1, #12
 8006734:	600a      	str	r2, [r1, #0]
 8006736:	2200      	movs	r2, #0
 8006738:	801a      	strh	r2, [r3, #0]
        for (uint8_t x = 0; x < glyph.width; x++) {
 800673a:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800673e:	f103 030a 	add.w	r3, r3, #10
 8006742:	781b      	ldrb	r3, [r3, #0]
 8006744:	3301      	adds	r3, #1
 8006746:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800674a:	f102 020a 	add.w	r2, r2, #10
 800674e:	7013      	strb	r3, [r2, #0]
 8006750:	f107 0310 	add.w	r3, r7, #16
 8006754:	781b      	ldrb	r3, [r3, #0]
 8006756:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800675a:	f102 020a 	add.w	r2, r2, #10
 800675e:	7812      	ldrb	r2, [r2, #0]
 8006760:	429a      	cmp	r2, r3
 8006762:	d3a6      	bcc.n	80066b2 <hagl_put_char+0xd6>
            }
        }
        glyph.buffer += glyph.pitch;
 8006764:	f107 0310 	add.w	r3, r7, #16
 8006768:	685b      	ldr	r3, [r3, #4]
 800676a:	f107 0210 	add.w	r2, r7, #16
 800676e:	78d2      	ldrb	r2, [r2, #3]
 8006770:	441a      	add	r2, r3
 8006772:	f107 0310 	add.w	r3, r7, #16
 8006776:	605a      	str	r2, [r3, #4]
    for (uint8_t y = 0; y < glyph.height; y++) {
 8006778:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800677c:	f103 030b 	add.w	r3, r3, #11
 8006780:	781b      	ldrb	r3, [r3, #0]
 8006782:	3301      	adds	r3, #1
 8006784:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8006788:	f102 020b 	add.w	r2, r2, #11
 800678c:	7013      	strb	r3, [r2, #0]
 800678e:	f107 0310 	add.w	r3, r7, #16
 8006792:	785b      	ldrb	r3, [r3, #1]
 8006794:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8006798:	f102 020b 	add.w	r2, r2, #11
 800679c:	7812      	ldrb	r2, [r2, #0]
 800679e:	429a      	cmp	r2, r3
 80067a0:	d380      	bcc.n	80066a4 <hagl_put_char+0xc8>
    }

    hagl_blit(x0, y0, &bitmap);
 80067a2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80067a6:	3a18      	subs	r2, #24
 80067a8:	f107 0310 	add.w	r3, r7, #16
 80067ac:	3b08      	subs	r3, #8
 80067ae:	f9b3 1000 	ldrsh.w	r1, [r3]
 80067b2:	f107 0310 	add.w	r3, r7, #16
 80067b6:	3b06      	subs	r3, #6
 80067b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80067bc:	4618      	mov	r0, r3
 80067be:	f000 f85a 	bl	8006876 <hagl_blit>

    return bitmap.width;
 80067c2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80067c6:	3b18      	subs	r3, #24
 80067c8:	881b      	ldrh	r3, [r3, #0]
 80067ca:	b2db      	uxtb	r3, r3
}
 80067cc:	4618      	mov	r0, r3
 80067ce:	f507 5781 	add.w	r7, r7, #4128	; 0x1020
 80067d2:	3714      	adds	r7, #20
 80067d4:	46bd      	mov	sp, r7
 80067d6:	bd90      	pop	{r4, r7, pc}

080067d8 <hagl_put_text>:
 * Write a string of text by calling hagl_put_char() repeadetly. CR and LF
 * continue from the next line.
 */

uint16_t hagl_put_text(const wchar_t *str, int16_t x0, int16_t y0, color_t color, const unsigned char *font)
{
 80067d8:	b580      	push	{r7, lr}
 80067da:	b08c      	sub	sp, #48	; 0x30
 80067dc:	af02      	add	r7, sp, #8
 80067de:	60f8      	str	r0, [r7, #12]
 80067e0:	4608      	mov	r0, r1
 80067e2:	4611      	mov	r1, r2
 80067e4:	461a      	mov	r2, r3
 80067e6:	4603      	mov	r3, r0
 80067e8:	817b      	strh	r3, [r7, #10]
 80067ea:	460b      	mov	r3, r1
 80067ec:	813b      	strh	r3, [r7, #8]
 80067ee:	4613      	mov	r3, r2
 80067f0:	80fb      	strh	r3, [r7, #6]
    wchar_t temp;
    uint8_t status;
    uint16_t original = x0;
 80067f2:	897b      	ldrh	r3, [r7, #10]
 80067f4:	84fb      	strh	r3, [r7, #38]	; 0x26
    fontx_meta_t meta;

    status = fontx_meta(&meta, font);
 80067f6:	f107 0314 	add.w	r3, r7, #20
 80067fa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80067fc:	4618      	mov	r0, r3
 80067fe:	f7ff fe0c 	bl	800641a <fontx_meta>
 8006802:	4603      	mov	r3, r0
 8006804:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    if (0 != status) {
 8006808:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800680c:	2b00      	cmp	r3, #0
 800680e:	d001      	beq.n	8006814 <hagl_put_text+0x3c>
        return 0;
 8006810:	2300      	movs	r3, #0
 8006812:	e02c      	b.n	800686e <hagl_put_text+0x96>
    }

    do {
        temp = *str++;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	1d1a      	adds	r2, r3, #4
 8006818:	60fa      	str	r2, [r7, #12]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	623b      	str	r3, [r7, #32]
        if (13 == temp || 10 == temp) {
 800681e:	6a3b      	ldr	r3, [r7, #32]
 8006820:	2b0d      	cmp	r3, #13
 8006822:	d002      	beq.n	800682a <hagl_put_text+0x52>
 8006824:	6a3b      	ldr	r3, [r7, #32]
 8006826:	2b0a      	cmp	r3, #10
 8006828:	d108      	bne.n	800683c <hagl_put_text+0x64>
            x0 = 0;
 800682a:	2300      	movs	r3, #0
 800682c:	817b      	strh	r3, [r7, #10]
            y0 += meta.height;
 800682e:	7fbb      	ldrb	r3, [r7, #30]
 8006830:	b29a      	uxth	r2, r3
 8006832:	893b      	ldrh	r3, [r7, #8]
 8006834:	4413      	add	r3, r2
 8006836:	b29b      	uxth	r3, r3
 8006838:	813b      	strh	r3, [r7, #8]
 800683a:	e010      	b.n	800685e <hagl_put_text+0x86>
        } else {
            x0 += hagl_put_char(temp, x0, y0, color, font);
 800683c:	88f8      	ldrh	r0, [r7, #6]
 800683e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8006842:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8006846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006848:	9300      	str	r3, [sp, #0]
 800684a:	4603      	mov	r3, r0
 800684c:	6a38      	ldr	r0, [r7, #32]
 800684e:	f7ff fec5 	bl	80065dc <hagl_put_char>
 8006852:	4603      	mov	r3, r0
 8006854:	b29a      	uxth	r2, r3
 8006856:	897b      	ldrh	r3, [r7, #10]
 8006858:	4413      	add	r3, r2
 800685a:	b29b      	uxth	r3, r3
 800685c:	817b      	strh	r3, [r7, #10]
        }
    } while (*str != 0);
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d1d6      	bne.n	8006814 <hagl_put_text+0x3c>

    return x0 - original;
 8006866:	897a      	ldrh	r2, [r7, #10]
 8006868:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800686a:	1ad3      	subs	r3, r2, r3
 800686c:	b29b      	uxth	r3, r3
}
 800686e:	4618      	mov	r0, r3
 8006870:	3728      	adds	r7, #40	; 0x28
 8006872:	46bd      	mov	sp, r7
 8006874:	bd80      	pop	{r7, pc}

08006876 <hagl_blit>:
 * configurable source and destination see the file blit.c.
 *
 * TODO: Handle transparency.
 */

void hagl_blit(int16_t x0, int16_t y0, bitmap_t *source) {
 8006876:	b580      	push	{r7, lr}
 8006878:	b086      	sub	sp, #24
 800687a:	af00      	add	r7, sp, #0
 800687c:	4603      	mov	r3, r0
 800687e:	603a      	str	r2, [r7, #0]
 8006880:	80fb      	strh	r3, [r7, #6]
 8006882:	460b      	mov	r3, r1
 8006884:	80bb      	strh	r3, [r7, #4]
        /* Inside of bounds, can use HAL provided blit. */
        hagl_hal_blit(x0, y0, source);
    }
#else
    color_t color;
    color_t *ptr = (color_t *) source->buffer;
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	68db      	ldr	r3, [r3, #12]
 800688a:	617b      	str	r3, [r7, #20]

    for (uint16_t y = 0; y < source->height; y++) {
 800688c:	2300      	movs	r3, #0
 800688e:	827b      	strh	r3, [r7, #18]
 8006890:	e020      	b.n	80068d4 <hagl_blit+0x5e>
        for (uint16_t x = 0; x < source->width; x++) {
 8006892:	2300      	movs	r3, #0
 8006894:	823b      	strh	r3, [r7, #16]
 8006896:	e015      	b.n	80068c4 <hagl_blit+0x4e>
            color = *(ptr++);
 8006898:	697b      	ldr	r3, [r7, #20]
 800689a:	1c9a      	adds	r2, r3, #2
 800689c:	617a      	str	r2, [r7, #20]
 800689e:	881b      	ldrh	r3, [r3, #0]
 80068a0:	81fb      	strh	r3, [r7, #14]
            hagl_put_pixel(x0 + x, y0 + y, color);
 80068a2:	88fa      	ldrh	r2, [r7, #6]
 80068a4:	8a3b      	ldrh	r3, [r7, #16]
 80068a6:	4413      	add	r3, r2
 80068a8:	b29b      	uxth	r3, r3
 80068aa:	b218      	sxth	r0, r3
 80068ac:	88ba      	ldrh	r2, [r7, #4]
 80068ae:	8a7b      	ldrh	r3, [r7, #18]
 80068b0:	4413      	add	r3, r2
 80068b2:	b29b      	uxth	r3, r3
 80068b4:	b21b      	sxth	r3, r3
 80068b6:	89fa      	ldrh	r2, [r7, #14]
 80068b8:	4619      	mov	r1, r3
 80068ba:	f7ff fe5d 	bl	8006578 <hagl_put_pixel>
        for (uint16_t x = 0; x < source->width; x++) {
 80068be:	8a3b      	ldrh	r3, [r7, #16]
 80068c0:	3301      	adds	r3, #1
 80068c2:	823b      	strh	r3, [r7, #16]
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	881b      	ldrh	r3, [r3, #0]
 80068c8:	8a3a      	ldrh	r2, [r7, #16]
 80068ca:	429a      	cmp	r2, r3
 80068cc:	d3e4      	bcc.n	8006898 <hagl_blit+0x22>
    for (uint16_t y = 0; y < source->height; y++) {
 80068ce:	8a7b      	ldrh	r3, [r7, #18]
 80068d0:	3301      	adds	r3, #1
 80068d2:	827b      	strh	r3, [r7, #18]
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	885b      	ldrh	r3, [r3, #2]
 80068d8:	8a7a      	ldrh	r2, [r7, #18]
 80068da:	429a      	cmp	r2, r3
 80068dc:	d3d9      	bcc.n	8006892 <hagl_blit+0x1c>
        }
    }
#endif
};
 80068de:	bf00      	nop
 80068e0:	bf00      	nop
 80068e2:	3718      	adds	r7, #24
 80068e4:	46bd      	mov	sp, r7
 80068e6:	bd80      	pop	{r7, pc}

080068e8 <__errno>:
 80068e8:	4b01      	ldr	r3, [pc, #4]	; (80068f0 <__errno+0x8>)
 80068ea:	6818      	ldr	r0, [r3, #0]
 80068ec:	4770      	bx	lr
 80068ee:	bf00      	nop
 80068f0:	2000001c 	.word	0x2000001c

080068f4 <__sflush_r>:
 80068f4:	898a      	ldrh	r2, [r1, #12]
 80068f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80068fa:	4605      	mov	r5, r0
 80068fc:	0710      	lsls	r0, r2, #28
 80068fe:	460c      	mov	r4, r1
 8006900:	d458      	bmi.n	80069b4 <__sflush_r+0xc0>
 8006902:	684b      	ldr	r3, [r1, #4]
 8006904:	2b00      	cmp	r3, #0
 8006906:	dc05      	bgt.n	8006914 <__sflush_r+0x20>
 8006908:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800690a:	2b00      	cmp	r3, #0
 800690c:	dc02      	bgt.n	8006914 <__sflush_r+0x20>
 800690e:	2000      	movs	r0, #0
 8006910:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006914:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006916:	2e00      	cmp	r6, #0
 8006918:	d0f9      	beq.n	800690e <__sflush_r+0x1a>
 800691a:	2300      	movs	r3, #0
 800691c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006920:	682f      	ldr	r7, [r5, #0]
 8006922:	602b      	str	r3, [r5, #0]
 8006924:	d032      	beq.n	800698c <__sflush_r+0x98>
 8006926:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006928:	89a3      	ldrh	r3, [r4, #12]
 800692a:	075a      	lsls	r2, r3, #29
 800692c:	d505      	bpl.n	800693a <__sflush_r+0x46>
 800692e:	6863      	ldr	r3, [r4, #4]
 8006930:	1ac0      	subs	r0, r0, r3
 8006932:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006934:	b10b      	cbz	r3, 800693a <__sflush_r+0x46>
 8006936:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006938:	1ac0      	subs	r0, r0, r3
 800693a:	2300      	movs	r3, #0
 800693c:	4602      	mov	r2, r0
 800693e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006940:	6a21      	ldr	r1, [r4, #32]
 8006942:	4628      	mov	r0, r5
 8006944:	47b0      	blx	r6
 8006946:	1c43      	adds	r3, r0, #1
 8006948:	89a3      	ldrh	r3, [r4, #12]
 800694a:	d106      	bne.n	800695a <__sflush_r+0x66>
 800694c:	6829      	ldr	r1, [r5, #0]
 800694e:	291d      	cmp	r1, #29
 8006950:	d82c      	bhi.n	80069ac <__sflush_r+0xb8>
 8006952:	4a2a      	ldr	r2, [pc, #168]	; (80069fc <__sflush_r+0x108>)
 8006954:	40ca      	lsrs	r2, r1
 8006956:	07d6      	lsls	r6, r2, #31
 8006958:	d528      	bpl.n	80069ac <__sflush_r+0xb8>
 800695a:	2200      	movs	r2, #0
 800695c:	6062      	str	r2, [r4, #4]
 800695e:	04d9      	lsls	r1, r3, #19
 8006960:	6922      	ldr	r2, [r4, #16]
 8006962:	6022      	str	r2, [r4, #0]
 8006964:	d504      	bpl.n	8006970 <__sflush_r+0x7c>
 8006966:	1c42      	adds	r2, r0, #1
 8006968:	d101      	bne.n	800696e <__sflush_r+0x7a>
 800696a:	682b      	ldr	r3, [r5, #0]
 800696c:	b903      	cbnz	r3, 8006970 <__sflush_r+0x7c>
 800696e:	6560      	str	r0, [r4, #84]	; 0x54
 8006970:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006972:	602f      	str	r7, [r5, #0]
 8006974:	2900      	cmp	r1, #0
 8006976:	d0ca      	beq.n	800690e <__sflush_r+0x1a>
 8006978:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800697c:	4299      	cmp	r1, r3
 800697e:	d002      	beq.n	8006986 <__sflush_r+0x92>
 8006980:	4628      	mov	r0, r5
 8006982:	f000 fa11 	bl	8006da8 <_free_r>
 8006986:	2000      	movs	r0, #0
 8006988:	6360      	str	r0, [r4, #52]	; 0x34
 800698a:	e7c1      	b.n	8006910 <__sflush_r+0x1c>
 800698c:	6a21      	ldr	r1, [r4, #32]
 800698e:	2301      	movs	r3, #1
 8006990:	4628      	mov	r0, r5
 8006992:	47b0      	blx	r6
 8006994:	1c41      	adds	r1, r0, #1
 8006996:	d1c7      	bne.n	8006928 <__sflush_r+0x34>
 8006998:	682b      	ldr	r3, [r5, #0]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d0c4      	beq.n	8006928 <__sflush_r+0x34>
 800699e:	2b1d      	cmp	r3, #29
 80069a0:	d001      	beq.n	80069a6 <__sflush_r+0xb2>
 80069a2:	2b16      	cmp	r3, #22
 80069a4:	d101      	bne.n	80069aa <__sflush_r+0xb6>
 80069a6:	602f      	str	r7, [r5, #0]
 80069a8:	e7b1      	b.n	800690e <__sflush_r+0x1a>
 80069aa:	89a3      	ldrh	r3, [r4, #12]
 80069ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80069b0:	81a3      	strh	r3, [r4, #12]
 80069b2:	e7ad      	b.n	8006910 <__sflush_r+0x1c>
 80069b4:	690f      	ldr	r7, [r1, #16]
 80069b6:	2f00      	cmp	r7, #0
 80069b8:	d0a9      	beq.n	800690e <__sflush_r+0x1a>
 80069ba:	0793      	lsls	r3, r2, #30
 80069bc:	680e      	ldr	r6, [r1, #0]
 80069be:	bf08      	it	eq
 80069c0:	694b      	ldreq	r3, [r1, #20]
 80069c2:	600f      	str	r7, [r1, #0]
 80069c4:	bf18      	it	ne
 80069c6:	2300      	movne	r3, #0
 80069c8:	eba6 0807 	sub.w	r8, r6, r7
 80069cc:	608b      	str	r3, [r1, #8]
 80069ce:	f1b8 0f00 	cmp.w	r8, #0
 80069d2:	dd9c      	ble.n	800690e <__sflush_r+0x1a>
 80069d4:	6a21      	ldr	r1, [r4, #32]
 80069d6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80069d8:	4643      	mov	r3, r8
 80069da:	463a      	mov	r2, r7
 80069dc:	4628      	mov	r0, r5
 80069de:	47b0      	blx	r6
 80069e0:	2800      	cmp	r0, #0
 80069e2:	dc06      	bgt.n	80069f2 <__sflush_r+0xfe>
 80069e4:	89a3      	ldrh	r3, [r4, #12]
 80069e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80069ea:	81a3      	strh	r3, [r4, #12]
 80069ec:	f04f 30ff 	mov.w	r0, #4294967295
 80069f0:	e78e      	b.n	8006910 <__sflush_r+0x1c>
 80069f2:	4407      	add	r7, r0
 80069f4:	eba8 0800 	sub.w	r8, r8, r0
 80069f8:	e7e9      	b.n	80069ce <__sflush_r+0xda>
 80069fa:	bf00      	nop
 80069fc:	20400001 	.word	0x20400001

08006a00 <_fflush_r>:
 8006a00:	b538      	push	{r3, r4, r5, lr}
 8006a02:	690b      	ldr	r3, [r1, #16]
 8006a04:	4605      	mov	r5, r0
 8006a06:	460c      	mov	r4, r1
 8006a08:	b913      	cbnz	r3, 8006a10 <_fflush_r+0x10>
 8006a0a:	2500      	movs	r5, #0
 8006a0c:	4628      	mov	r0, r5
 8006a0e:	bd38      	pop	{r3, r4, r5, pc}
 8006a10:	b118      	cbz	r0, 8006a1a <_fflush_r+0x1a>
 8006a12:	6983      	ldr	r3, [r0, #24]
 8006a14:	b90b      	cbnz	r3, 8006a1a <_fflush_r+0x1a>
 8006a16:	f000 f887 	bl	8006b28 <__sinit>
 8006a1a:	4b14      	ldr	r3, [pc, #80]	; (8006a6c <_fflush_r+0x6c>)
 8006a1c:	429c      	cmp	r4, r3
 8006a1e:	d11b      	bne.n	8006a58 <_fflush_r+0x58>
 8006a20:	686c      	ldr	r4, [r5, #4]
 8006a22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d0ef      	beq.n	8006a0a <_fflush_r+0xa>
 8006a2a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006a2c:	07d0      	lsls	r0, r2, #31
 8006a2e:	d404      	bmi.n	8006a3a <_fflush_r+0x3a>
 8006a30:	0599      	lsls	r1, r3, #22
 8006a32:	d402      	bmi.n	8006a3a <_fflush_r+0x3a>
 8006a34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006a36:	f000 f93a 	bl	8006cae <__retarget_lock_acquire_recursive>
 8006a3a:	4628      	mov	r0, r5
 8006a3c:	4621      	mov	r1, r4
 8006a3e:	f7ff ff59 	bl	80068f4 <__sflush_r>
 8006a42:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006a44:	07da      	lsls	r2, r3, #31
 8006a46:	4605      	mov	r5, r0
 8006a48:	d4e0      	bmi.n	8006a0c <_fflush_r+0xc>
 8006a4a:	89a3      	ldrh	r3, [r4, #12]
 8006a4c:	059b      	lsls	r3, r3, #22
 8006a4e:	d4dd      	bmi.n	8006a0c <_fflush_r+0xc>
 8006a50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006a52:	f000 f92d 	bl	8006cb0 <__retarget_lock_release_recursive>
 8006a56:	e7d9      	b.n	8006a0c <_fflush_r+0xc>
 8006a58:	4b05      	ldr	r3, [pc, #20]	; (8006a70 <_fflush_r+0x70>)
 8006a5a:	429c      	cmp	r4, r3
 8006a5c:	d101      	bne.n	8006a62 <_fflush_r+0x62>
 8006a5e:	68ac      	ldr	r4, [r5, #8]
 8006a60:	e7df      	b.n	8006a22 <_fflush_r+0x22>
 8006a62:	4b04      	ldr	r3, [pc, #16]	; (8006a74 <_fflush_r+0x74>)
 8006a64:	429c      	cmp	r4, r3
 8006a66:	bf08      	it	eq
 8006a68:	68ec      	ldreq	r4, [r5, #12]
 8006a6a:	e7da      	b.n	8006a22 <_fflush_r+0x22>
 8006a6c:	0800d22c 	.word	0x0800d22c
 8006a70:	0800d24c 	.word	0x0800d24c
 8006a74:	0800d20c 	.word	0x0800d20c

08006a78 <std>:
 8006a78:	2300      	movs	r3, #0
 8006a7a:	b510      	push	{r4, lr}
 8006a7c:	4604      	mov	r4, r0
 8006a7e:	e9c0 3300 	strd	r3, r3, [r0]
 8006a82:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006a86:	6083      	str	r3, [r0, #8]
 8006a88:	8181      	strh	r1, [r0, #12]
 8006a8a:	6643      	str	r3, [r0, #100]	; 0x64
 8006a8c:	81c2      	strh	r2, [r0, #14]
 8006a8e:	6183      	str	r3, [r0, #24]
 8006a90:	4619      	mov	r1, r3
 8006a92:	2208      	movs	r2, #8
 8006a94:	305c      	adds	r0, #92	; 0x5c
 8006a96:	f000 f97f 	bl	8006d98 <memset>
 8006a9a:	4b05      	ldr	r3, [pc, #20]	; (8006ab0 <std+0x38>)
 8006a9c:	6263      	str	r3, [r4, #36]	; 0x24
 8006a9e:	4b05      	ldr	r3, [pc, #20]	; (8006ab4 <std+0x3c>)
 8006aa0:	62a3      	str	r3, [r4, #40]	; 0x28
 8006aa2:	4b05      	ldr	r3, [pc, #20]	; (8006ab8 <std+0x40>)
 8006aa4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006aa6:	4b05      	ldr	r3, [pc, #20]	; (8006abc <std+0x44>)
 8006aa8:	6224      	str	r4, [r4, #32]
 8006aaa:	6323      	str	r3, [r4, #48]	; 0x30
 8006aac:	bd10      	pop	{r4, pc}
 8006aae:	bf00      	nop
 8006ab0:	080077f1 	.word	0x080077f1
 8006ab4:	08007813 	.word	0x08007813
 8006ab8:	0800784b 	.word	0x0800784b
 8006abc:	0800786f 	.word	0x0800786f

08006ac0 <_cleanup_r>:
 8006ac0:	4901      	ldr	r1, [pc, #4]	; (8006ac8 <_cleanup_r+0x8>)
 8006ac2:	f000 b8af 	b.w	8006c24 <_fwalk_reent>
 8006ac6:	bf00      	nop
 8006ac8:	08006a01 	.word	0x08006a01

08006acc <__sfmoreglue>:
 8006acc:	b570      	push	{r4, r5, r6, lr}
 8006ace:	1e4a      	subs	r2, r1, #1
 8006ad0:	2568      	movs	r5, #104	; 0x68
 8006ad2:	4355      	muls	r5, r2
 8006ad4:	460e      	mov	r6, r1
 8006ad6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006ada:	f000 f9b5 	bl	8006e48 <_malloc_r>
 8006ade:	4604      	mov	r4, r0
 8006ae0:	b140      	cbz	r0, 8006af4 <__sfmoreglue+0x28>
 8006ae2:	2100      	movs	r1, #0
 8006ae4:	e9c0 1600 	strd	r1, r6, [r0]
 8006ae8:	300c      	adds	r0, #12
 8006aea:	60a0      	str	r0, [r4, #8]
 8006aec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006af0:	f000 f952 	bl	8006d98 <memset>
 8006af4:	4620      	mov	r0, r4
 8006af6:	bd70      	pop	{r4, r5, r6, pc}

08006af8 <__sfp_lock_acquire>:
 8006af8:	4801      	ldr	r0, [pc, #4]	; (8006b00 <__sfp_lock_acquire+0x8>)
 8006afa:	f000 b8d8 	b.w	8006cae <__retarget_lock_acquire_recursive>
 8006afe:	bf00      	nop
 8006b00:	2000a440 	.word	0x2000a440

08006b04 <__sfp_lock_release>:
 8006b04:	4801      	ldr	r0, [pc, #4]	; (8006b0c <__sfp_lock_release+0x8>)
 8006b06:	f000 b8d3 	b.w	8006cb0 <__retarget_lock_release_recursive>
 8006b0a:	bf00      	nop
 8006b0c:	2000a440 	.word	0x2000a440

08006b10 <__sinit_lock_acquire>:
 8006b10:	4801      	ldr	r0, [pc, #4]	; (8006b18 <__sinit_lock_acquire+0x8>)
 8006b12:	f000 b8cc 	b.w	8006cae <__retarget_lock_acquire_recursive>
 8006b16:	bf00      	nop
 8006b18:	2000a43b 	.word	0x2000a43b

08006b1c <__sinit_lock_release>:
 8006b1c:	4801      	ldr	r0, [pc, #4]	; (8006b24 <__sinit_lock_release+0x8>)
 8006b1e:	f000 b8c7 	b.w	8006cb0 <__retarget_lock_release_recursive>
 8006b22:	bf00      	nop
 8006b24:	2000a43b 	.word	0x2000a43b

08006b28 <__sinit>:
 8006b28:	b510      	push	{r4, lr}
 8006b2a:	4604      	mov	r4, r0
 8006b2c:	f7ff fff0 	bl	8006b10 <__sinit_lock_acquire>
 8006b30:	69a3      	ldr	r3, [r4, #24]
 8006b32:	b11b      	cbz	r3, 8006b3c <__sinit+0x14>
 8006b34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b38:	f7ff bff0 	b.w	8006b1c <__sinit_lock_release>
 8006b3c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006b40:	6523      	str	r3, [r4, #80]	; 0x50
 8006b42:	4b13      	ldr	r3, [pc, #76]	; (8006b90 <__sinit+0x68>)
 8006b44:	4a13      	ldr	r2, [pc, #76]	; (8006b94 <__sinit+0x6c>)
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	62a2      	str	r2, [r4, #40]	; 0x28
 8006b4a:	42a3      	cmp	r3, r4
 8006b4c:	bf04      	itt	eq
 8006b4e:	2301      	moveq	r3, #1
 8006b50:	61a3      	streq	r3, [r4, #24]
 8006b52:	4620      	mov	r0, r4
 8006b54:	f000 f820 	bl	8006b98 <__sfp>
 8006b58:	6060      	str	r0, [r4, #4]
 8006b5a:	4620      	mov	r0, r4
 8006b5c:	f000 f81c 	bl	8006b98 <__sfp>
 8006b60:	60a0      	str	r0, [r4, #8]
 8006b62:	4620      	mov	r0, r4
 8006b64:	f000 f818 	bl	8006b98 <__sfp>
 8006b68:	2200      	movs	r2, #0
 8006b6a:	60e0      	str	r0, [r4, #12]
 8006b6c:	2104      	movs	r1, #4
 8006b6e:	6860      	ldr	r0, [r4, #4]
 8006b70:	f7ff ff82 	bl	8006a78 <std>
 8006b74:	68a0      	ldr	r0, [r4, #8]
 8006b76:	2201      	movs	r2, #1
 8006b78:	2109      	movs	r1, #9
 8006b7a:	f7ff ff7d 	bl	8006a78 <std>
 8006b7e:	68e0      	ldr	r0, [r4, #12]
 8006b80:	2202      	movs	r2, #2
 8006b82:	2112      	movs	r1, #18
 8006b84:	f7ff ff78 	bl	8006a78 <std>
 8006b88:	2301      	movs	r3, #1
 8006b8a:	61a3      	str	r3, [r4, #24]
 8006b8c:	e7d2      	b.n	8006b34 <__sinit+0xc>
 8006b8e:	bf00      	nop
 8006b90:	0800d26c 	.word	0x0800d26c
 8006b94:	08006ac1 	.word	0x08006ac1

08006b98 <__sfp>:
 8006b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b9a:	4607      	mov	r7, r0
 8006b9c:	f7ff ffac 	bl	8006af8 <__sfp_lock_acquire>
 8006ba0:	4b1e      	ldr	r3, [pc, #120]	; (8006c1c <__sfp+0x84>)
 8006ba2:	681e      	ldr	r6, [r3, #0]
 8006ba4:	69b3      	ldr	r3, [r6, #24]
 8006ba6:	b913      	cbnz	r3, 8006bae <__sfp+0x16>
 8006ba8:	4630      	mov	r0, r6
 8006baa:	f7ff ffbd 	bl	8006b28 <__sinit>
 8006bae:	3648      	adds	r6, #72	; 0x48
 8006bb0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006bb4:	3b01      	subs	r3, #1
 8006bb6:	d503      	bpl.n	8006bc0 <__sfp+0x28>
 8006bb8:	6833      	ldr	r3, [r6, #0]
 8006bba:	b30b      	cbz	r3, 8006c00 <__sfp+0x68>
 8006bbc:	6836      	ldr	r6, [r6, #0]
 8006bbe:	e7f7      	b.n	8006bb0 <__sfp+0x18>
 8006bc0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006bc4:	b9d5      	cbnz	r5, 8006bfc <__sfp+0x64>
 8006bc6:	4b16      	ldr	r3, [pc, #88]	; (8006c20 <__sfp+0x88>)
 8006bc8:	60e3      	str	r3, [r4, #12]
 8006bca:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006bce:	6665      	str	r5, [r4, #100]	; 0x64
 8006bd0:	f000 f86c 	bl	8006cac <__retarget_lock_init_recursive>
 8006bd4:	f7ff ff96 	bl	8006b04 <__sfp_lock_release>
 8006bd8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006bdc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006be0:	6025      	str	r5, [r4, #0]
 8006be2:	61a5      	str	r5, [r4, #24]
 8006be4:	2208      	movs	r2, #8
 8006be6:	4629      	mov	r1, r5
 8006be8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006bec:	f000 f8d4 	bl	8006d98 <memset>
 8006bf0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006bf4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006bf8:	4620      	mov	r0, r4
 8006bfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006bfc:	3468      	adds	r4, #104	; 0x68
 8006bfe:	e7d9      	b.n	8006bb4 <__sfp+0x1c>
 8006c00:	2104      	movs	r1, #4
 8006c02:	4638      	mov	r0, r7
 8006c04:	f7ff ff62 	bl	8006acc <__sfmoreglue>
 8006c08:	4604      	mov	r4, r0
 8006c0a:	6030      	str	r0, [r6, #0]
 8006c0c:	2800      	cmp	r0, #0
 8006c0e:	d1d5      	bne.n	8006bbc <__sfp+0x24>
 8006c10:	f7ff ff78 	bl	8006b04 <__sfp_lock_release>
 8006c14:	230c      	movs	r3, #12
 8006c16:	603b      	str	r3, [r7, #0]
 8006c18:	e7ee      	b.n	8006bf8 <__sfp+0x60>
 8006c1a:	bf00      	nop
 8006c1c:	0800d26c 	.word	0x0800d26c
 8006c20:	ffff0001 	.word	0xffff0001

08006c24 <_fwalk_reent>:
 8006c24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c28:	4606      	mov	r6, r0
 8006c2a:	4688      	mov	r8, r1
 8006c2c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006c30:	2700      	movs	r7, #0
 8006c32:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006c36:	f1b9 0901 	subs.w	r9, r9, #1
 8006c3a:	d505      	bpl.n	8006c48 <_fwalk_reent+0x24>
 8006c3c:	6824      	ldr	r4, [r4, #0]
 8006c3e:	2c00      	cmp	r4, #0
 8006c40:	d1f7      	bne.n	8006c32 <_fwalk_reent+0xe>
 8006c42:	4638      	mov	r0, r7
 8006c44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c48:	89ab      	ldrh	r3, [r5, #12]
 8006c4a:	2b01      	cmp	r3, #1
 8006c4c:	d907      	bls.n	8006c5e <_fwalk_reent+0x3a>
 8006c4e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006c52:	3301      	adds	r3, #1
 8006c54:	d003      	beq.n	8006c5e <_fwalk_reent+0x3a>
 8006c56:	4629      	mov	r1, r5
 8006c58:	4630      	mov	r0, r6
 8006c5a:	47c0      	blx	r8
 8006c5c:	4307      	orrs	r7, r0
 8006c5e:	3568      	adds	r5, #104	; 0x68
 8006c60:	e7e9      	b.n	8006c36 <_fwalk_reent+0x12>
	...

08006c64 <__libc_init_array>:
 8006c64:	b570      	push	{r4, r5, r6, lr}
 8006c66:	4d0d      	ldr	r5, [pc, #52]	; (8006c9c <__libc_init_array+0x38>)
 8006c68:	4c0d      	ldr	r4, [pc, #52]	; (8006ca0 <__libc_init_array+0x3c>)
 8006c6a:	1b64      	subs	r4, r4, r5
 8006c6c:	10a4      	asrs	r4, r4, #2
 8006c6e:	2600      	movs	r6, #0
 8006c70:	42a6      	cmp	r6, r4
 8006c72:	d109      	bne.n	8006c88 <__libc_init_array+0x24>
 8006c74:	4d0b      	ldr	r5, [pc, #44]	; (8006ca4 <__libc_init_array+0x40>)
 8006c76:	4c0c      	ldr	r4, [pc, #48]	; (8006ca8 <__libc_init_array+0x44>)
 8006c78:	f003 fa5e 	bl	800a138 <_init>
 8006c7c:	1b64      	subs	r4, r4, r5
 8006c7e:	10a4      	asrs	r4, r4, #2
 8006c80:	2600      	movs	r6, #0
 8006c82:	42a6      	cmp	r6, r4
 8006c84:	d105      	bne.n	8006c92 <__libc_init_array+0x2e>
 8006c86:	bd70      	pop	{r4, r5, r6, pc}
 8006c88:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c8c:	4798      	blx	r3
 8006c8e:	3601      	adds	r6, #1
 8006c90:	e7ee      	b.n	8006c70 <__libc_init_array+0xc>
 8006c92:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c96:	4798      	blx	r3
 8006c98:	3601      	adds	r6, #1
 8006c9a:	e7f2      	b.n	8006c82 <__libc_init_array+0x1e>
 8006c9c:	0800d7a4 	.word	0x0800d7a4
 8006ca0:	0800d7a4 	.word	0x0800d7a4
 8006ca4:	0800d7a4 	.word	0x0800d7a4
 8006ca8:	0800d7a8 	.word	0x0800d7a8

08006cac <__retarget_lock_init_recursive>:
 8006cac:	4770      	bx	lr

08006cae <__retarget_lock_acquire_recursive>:
 8006cae:	4770      	bx	lr

08006cb0 <__retarget_lock_release_recursive>:
 8006cb0:	4770      	bx	lr

08006cb2 <__swhatbuf_r>:
 8006cb2:	b570      	push	{r4, r5, r6, lr}
 8006cb4:	460e      	mov	r6, r1
 8006cb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006cba:	2900      	cmp	r1, #0
 8006cbc:	b096      	sub	sp, #88	; 0x58
 8006cbe:	4614      	mov	r4, r2
 8006cc0:	461d      	mov	r5, r3
 8006cc2:	da07      	bge.n	8006cd4 <__swhatbuf_r+0x22>
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	602b      	str	r3, [r5, #0]
 8006cc8:	89b3      	ldrh	r3, [r6, #12]
 8006cca:	061a      	lsls	r2, r3, #24
 8006ccc:	d410      	bmi.n	8006cf0 <__swhatbuf_r+0x3e>
 8006cce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006cd2:	e00e      	b.n	8006cf2 <__swhatbuf_r+0x40>
 8006cd4:	466a      	mov	r2, sp
 8006cd6:	f001 fc9f 	bl	8008618 <_fstat_r>
 8006cda:	2800      	cmp	r0, #0
 8006cdc:	dbf2      	blt.n	8006cc4 <__swhatbuf_r+0x12>
 8006cde:	9a01      	ldr	r2, [sp, #4]
 8006ce0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006ce4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006ce8:	425a      	negs	r2, r3
 8006cea:	415a      	adcs	r2, r3
 8006cec:	602a      	str	r2, [r5, #0]
 8006cee:	e7ee      	b.n	8006cce <__swhatbuf_r+0x1c>
 8006cf0:	2340      	movs	r3, #64	; 0x40
 8006cf2:	2000      	movs	r0, #0
 8006cf4:	6023      	str	r3, [r4, #0]
 8006cf6:	b016      	add	sp, #88	; 0x58
 8006cf8:	bd70      	pop	{r4, r5, r6, pc}
	...

08006cfc <__smakebuf_r>:
 8006cfc:	898b      	ldrh	r3, [r1, #12]
 8006cfe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006d00:	079d      	lsls	r5, r3, #30
 8006d02:	4606      	mov	r6, r0
 8006d04:	460c      	mov	r4, r1
 8006d06:	d507      	bpl.n	8006d18 <__smakebuf_r+0x1c>
 8006d08:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006d0c:	6023      	str	r3, [r4, #0]
 8006d0e:	6123      	str	r3, [r4, #16]
 8006d10:	2301      	movs	r3, #1
 8006d12:	6163      	str	r3, [r4, #20]
 8006d14:	b002      	add	sp, #8
 8006d16:	bd70      	pop	{r4, r5, r6, pc}
 8006d18:	ab01      	add	r3, sp, #4
 8006d1a:	466a      	mov	r2, sp
 8006d1c:	f7ff ffc9 	bl	8006cb2 <__swhatbuf_r>
 8006d20:	9900      	ldr	r1, [sp, #0]
 8006d22:	4605      	mov	r5, r0
 8006d24:	4630      	mov	r0, r6
 8006d26:	f000 f88f 	bl	8006e48 <_malloc_r>
 8006d2a:	b948      	cbnz	r0, 8006d40 <__smakebuf_r+0x44>
 8006d2c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d30:	059a      	lsls	r2, r3, #22
 8006d32:	d4ef      	bmi.n	8006d14 <__smakebuf_r+0x18>
 8006d34:	f023 0303 	bic.w	r3, r3, #3
 8006d38:	f043 0302 	orr.w	r3, r3, #2
 8006d3c:	81a3      	strh	r3, [r4, #12]
 8006d3e:	e7e3      	b.n	8006d08 <__smakebuf_r+0xc>
 8006d40:	4b0d      	ldr	r3, [pc, #52]	; (8006d78 <__smakebuf_r+0x7c>)
 8006d42:	62b3      	str	r3, [r6, #40]	; 0x28
 8006d44:	89a3      	ldrh	r3, [r4, #12]
 8006d46:	6020      	str	r0, [r4, #0]
 8006d48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d4c:	81a3      	strh	r3, [r4, #12]
 8006d4e:	9b00      	ldr	r3, [sp, #0]
 8006d50:	6163      	str	r3, [r4, #20]
 8006d52:	9b01      	ldr	r3, [sp, #4]
 8006d54:	6120      	str	r0, [r4, #16]
 8006d56:	b15b      	cbz	r3, 8006d70 <__smakebuf_r+0x74>
 8006d58:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006d5c:	4630      	mov	r0, r6
 8006d5e:	f001 fc6d 	bl	800863c <_isatty_r>
 8006d62:	b128      	cbz	r0, 8006d70 <__smakebuf_r+0x74>
 8006d64:	89a3      	ldrh	r3, [r4, #12]
 8006d66:	f023 0303 	bic.w	r3, r3, #3
 8006d6a:	f043 0301 	orr.w	r3, r3, #1
 8006d6e:	81a3      	strh	r3, [r4, #12]
 8006d70:	89a0      	ldrh	r0, [r4, #12]
 8006d72:	4305      	orrs	r5, r0
 8006d74:	81a5      	strh	r5, [r4, #12]
 8006d76:	e7cd      	b.n	8006d14 <__smakebuf_r+0x18>
 8006d78:	08006ac1 	.word	0x08006ac1

08006d7c <memcpy>:
 8006d7c:	440a      	add	r2, r1
 8006d7e:	4291      	cmp	r1, r2
 8006d80:	f100 33ff 	add.w	r3, r0, #4294967295
 8006d84:	d100      	bne.n	8006d88 <memcpy+0xc>
 8006d86:	4770      	bx	lr
 8006d88:	b510      	push	{r4, lr}
 8006d8a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006d8e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006d92:	4291      	cmp	r1, r2
 8006d94:	d1f9      	bne.n	8006d8a <memcpy+0xe>
 8006d96:	bd10      	pop	{r4, pc}

08006d98 <memset>:
 8006d98:	4402      	add	r2, r0
 8006d9a:	4603      	mov	r3, r0
 8006d9c:	4293      	cmp	r3, r2
 8006d9e:	d100      	bne.n	8006da2 <memset+0xa>
 8006da0:	4770      	bx	lr
 8006da2:	f803 1b01 	strb.w	r1, [r3], #1
 8006da6:	e7f9      	b.n	8006d9c <memset+0x4>

08006da8 <_free_r>:
 8006da8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006daa:	2900      	cmp	r1, #0
 8006dac:	d048      	beq.n	8006e40 <_free_r+0x98>
 8006dae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006db2:	9001      	str	r0, [sp, #4]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	f1a1 0404 	sub.w	r4, r1, #4
 8006dba:	bfb8      	it	lt
 8006dbc:	18e4      	addlt	r4, r4, r3
 8006dbe:	f001 fc6b 	bl	8008698 <__malloc_lock>
 8006dc2:	4a20      	ldr	r2, [pc, #128]	; (8006e44 <_free_r+0x9c>)
 8006dc4:	9801      	ldr	r0, [sp, #4]
 8006dc6:	6813      	ldr	r3, [r2, #0]
 8006dc8:	4615      	mov	r5, r2
 8006dca:	b933      	cbnz	r3, 8006dda <_free_r+0x32>
 8006dcc:	6063      	str	r3, [r4, #4]
 8006dce:	6014      	str	r4, [r2, #0]
 8006dd0:	b003      	add	sp, #12
 8006dd2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006dd6:	f001 bc65 	b.w	80086a4 <__malloc_unlock>
 8006dda:	42a3      	cmp	r3, r4
 8006ddc:	d90b      	bls.n	8006df6 <_free_r+0x4e>
 8006dde:	6821      	ldr	r1, [r4, #0]
 8006de0:	1862      	adds	r2, r4, r1
 8006de2:	4293      	cmp	r3, r2
 8006de4:	bf04      	itt	eq
 8006de6:	681a      	ldreq	r2, [r3, #0]
 8006de8:	685b      	ldreq	r3, [r3, #4]
 8006dea:	6063      	str	r3, [r4, #4]
 8006dec:	bf04      	itt	eq
 8006dee:	1852      	addeq	r2, r2, r1
 8006df0:	6022      	streq	r2, [r4, #0]
 8006df2:	602c      	str	r4, [r5, #0]
 8006df4:	e7ec      	b.n	8006dd0 <_free_r+0x28>
 8006df6:	461a      	mov	r2, r3
 8006df8:	685b      	ldr	r3, [r3, #4]
 8006dfa:	b10b      	cbz	r3, 8006e00 <_free_r+0x58>
 8006dfc:	42a3      	cmp	r3, r4
 8006dfe:	d9fa      	bls.n	8006df6 <_free_r+0x4e>
 8006e00:	6811      	ldr	r1, [r2, #0]
 8006e02:	1855      	adds	r5, r2, r1
 8006e04:	42a5      	cmp	r5, r4
 8006e06:	d10b      	bne.n	8006e20 <_free_r+0x78>
 8006e08:	6824      	ldr	r4, [r4, #0]
 8006e0a:	4421      	add	r1, r4
 8006e0c:	1854      	adds	r4, r2, r1
 8006e0e:	42a3      	cmp	r3, r4
 8006e10:	6011      	str	r1, [r2, #0]
 8006e12:	d1dd      	bne.n	8006dd0 <_free_r+0x28>
 8006e14:	681c      	ldr	r4, [r3, #0]
 8006e16:	685b      	ldr	r3, [r3, #4]
 8006e18:	6053      	str	r3, [r2, #4]
 8006e1a:	4421      	add	r1, r4
 8006e1c:	6011      	str	r1, [r2, #0]
 8006e1e:	e7d7      	b.n	8006dd0 <_free_r+0x28>
 8006e20:	d902      	bls.n	8006e28 <_free_r+0x80>
 8006e22:	230c      	movs	r3, #12
 8006e24:	6003      	str	r3, [r0, #0]
 8006e26:	e7d3      	b.n	8006dd0 <_free_r+0x28>
 8006e28:	6825      	ldr	r5, [r4, #0]
 8006e2a:	1961      	adds	r1, r4, r5
 8006e2c:	428b      	cmp	r3, r1
 8006e2e:	bf04      	itt	eq
 8006e30:	6819      	ldreq	r1, [r3, #0]
 8006e32:	685b      	ldreq	r3, [r3, #4]
 8006e34:	6063      	str	r3, [r4, #4]
 8006e36:	bf04      	itt	eq
 8006e38:	1949      	addeq	r1, r1, r5
 8006e3a:	6021      	streq	r1, [r4, #0]
 8006e3c:	6054      	str	r4, [r2, #4]
 8006e3e:	e7c7      	b.n	8006dd0 <_free_r+0x28>
 8006e40:	b003      	add	sp, #12
 8006e42:	bd30      	pop	{r4, r5, pc}
 8006e44:	2000a214 	.word	0x2000a214

08006e48 <_malloc_r>:
 8006e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e4a:	1ccd      	adds	r5, r1, #3
 8006e4c:	f025 0503 	bic.w	r5, r5, #3
 8006e50:	3508      	adds	r5, #8
 8006e52:	2d0c      	cmp	r5, #12
 8006e54:	bf38      	it	cc
 8006e56:	250c      	movcc	r5, #12
 8006e58:	2d00      	cmp	r5, #0
 8006e5a:	4606      	mov	r6, r0
 8006e5c:	db01      	blt.n	8006e62 <_malloc_r+0x1a>
 8006e5e:	42a9      	cmp	r1, r5
 8006e60:	d903      	bls.n	8006e6a <_malloc_r+0x22>
 8006e62:	230c      	movs	r3, #12
 8006e64:	6033      	str	r3, [r6, #0]
 8006e66:	2000      	movs	r0, #0
 8006e68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e6a:	f001 fc15 	bl	8008698 <__malloc_lock>
 8006e6e:	4921      	ldr	r1, [pc, #132]	; (8006ef4 <_malloc_r+0xac>)
 8006e70:	680a      	ldr	r2, [r1, #0]
 8006e72:	4614      	mov	r4, r2
 8006e74:	b99c      	cbnz	r4, 8006e9e <_malloc_r+0x56>
 8006e76:	4f20      	ldr	r7, [pc, #128]	; (8006ef8 <_malloc_r+0xb0>)
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	b923      	cbnz	r3, 8006e86 <_malloc_r+0x3e>
 8006e7c:	4621      	mov	r1, r4
 8006e7e:	4630      	mov	r0, r6
 8006e80:	f000 fca6 	bl	80077d0 <_sbrk_r>
 8006e84:	6038      	str	r0, [r7, #0]
 8006e86:	4629      	mov	r1, r5
 8006e88:	4630      	mov	r0, r6
 8006e8a:	f000 fca1 	bl	80077d0 <_sbrk_r>
 8006e8e:	1c43      	adds	r3, r0, #1
 8006e90:	d123      	bne.n	8006eda <_malloc_r+0x92>
 8006e92:	230c      	movs	r3, #12
 8006e94:	6033      	str	r3, [r6, #0]
 8006e96:	4630      	mov	r0, r6
 8006e98:	f001 fc04 	bl	80086a4 <__malloc_unlock>
 8006e9c:	e7e3      	b.n	8006e66 <_malloc_r+0x1e>
 8006e9e:	6823      	ldr	r3, [r4, #0]
 8006ea0:	1b5b      	subs	r3, r3, r5
 8006ea2:	d417      	bmi.n	8006ed4 <_malloc_r+0x8c>
 8006ea4:	2b0b      	cmp	r3, #11
 8006ea6:	d903      	bls.n	8006eb0 <_malloc_r+0x68>
 8006ea8:	6023      	str	r3, [r4, #0]
 8006eaa:	441c      	add	r4, r3
 8006eac:	6025      	str	r5, [r4, #0]
 8006eae:	e004      	b.n	8006eba <_malloc_r+0x72>
 8006eb0:	6863      	ldr	r3, [r4, #4]
 8006eb2:	42a2      	cmp	r2, r4
 8006eb4:	bf0c      	ite	eq
 8006eb6:	600b      	streq	r3, [r1, #0]
 8006eb8:	6053      	strne	r3, [r2, #4]
 8006eba:	4630      	mov	r0, r6
 8006ebc:	f001 fbf2 	bl	80086a4 <__malloc_unlock>
 8006ec0:	f104 000b 	add.w	r0, r4, #11
 8006ec4:	1d23      	adds	r3, r4, #4
 8006ec6:	f020 0007 	bic.w	r0, r0, #7
 8006eca:	1ac2      	subs	r2, r0, r3
 8006ecc:	d0cc      	beq.n	8006e68 <_malloc_r+0x20>
 8006ece:	1a1b      	subs	r3, r3, r0
 8006ed0:	50a3      	str	r3, [r4, r2]
 8006ed2:	e7c9      	b.n	8006e68 <_malloc_r+0x20>
 8006ed4:	4622      	mov	r2, r4
 8006ed6:	6864      	ldr	r4, [r4, #4]
 8006ed8:	e7cc      	b.n	8006e74 <_malloc_r+0x2c>
 8006eda:	1cc4      	adds	r4, r0, #3
 8006edc:	f024 0403 	bic.w	r4, r4, #3
 8006ee0:	42a0      	cmp	r0, r4
 8006ee2:	d0e3      	beq.n	8006eac <_malloc_r+0x64>
 8006ee4:	1a21      	subs	r1, r4, r0
 8006ee6:	4630      	mov	r0, r6
 8006ee8:	f000 fc72 	bl	80077d0 <_sbrk_r>
 8006eec:	3001      	adds	r0, #1
 8006eee:	d1dd      	bne.n	8006eac <_malloc_r+0x64>
 8006ef0:	e7cf      	b.n	8006e92 <_malloc_r+0x4a>
 8006ef2:	bf00      	nop
 8006ef4:	2000a214 	.word	0x2000a214
 8006ef8:	2000a218 	.word	0x2000a218

08006efc <__cvt>:
 8006efc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006f00:	ec55 4b10 	vmov	r4, r5, d0
 8006f04:	2d00      	cmp	r5, #0
 8006f06:	460e      	mov	r6, r1
 8006f08:	4619      	mov	r1, r3
 8006f0a:	462b      	mov	r3, r5
 8006f0c:	bfbb      	ittet	lt
 8006f0e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006f12:	461d      	movlt	r5, r3
 8006f14:	2300      	movge	r3, #0
 8006f16:	232d      	movlt	r3, #45	; 0x2d
 8006f18:	700b      	strb	r3, [r1, #0]
 8006f1a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006f1c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006f20:	4691      	mov	r9, r2
 8006f22:	f023 0820 	bic.w	r8, r3, #32
 8006f26:	bfbc      	itt	lt
 8006f28:	4622      	movlt	r2, r4
 8006f2a:	4614      	movlt	r4, r2
 8006f2c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006f30:	d005      	beq.n	8006f3e <__cvt+0x42>
 8006f32:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006f36:	d100      	bne.n	8006f3a <__cvt+0x3e>
 8006f38:	3601      	adds	r6, #1
 8006f3a:	2102      	movs	r1, #2
 8006f3c:	e000      	b.n	8006f40 <__cvt+0x44>
 8006f3e:	2103      	movs	r1, #3
 8006f40:	ab03      	add	r3, sp, #12
 8006f42:	9301      	str	r3, [sp, #4]
 8006f44:	ab02      	add	r3, sp, #8
 8006f46:	9300      	str	r3, [sp, #0]
 8006f48:	ec45 4b10 	vmov	d0, r4, r5
 8006f4c:	4653      	mov	r3, sl
 8006f4e:	4632      	mov	r2, r6
 8006f50:	f000 fd76 	bl	8007a40 <_dtoa_r>
 8006f54:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006f58:	4607      	mov	r7, r0
 8006f5a:	d102      	bne.n	8006f62 <__cvt+0x66>
 8006f5c:	f019 0f01 	tst.w	r9, #1
 8006f60:	d022      	beq.n	8006fa8 <__cvt+0xac>
 8006f62:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006f66:	eb07 0906 	add.w	r9, r7, r6
 8006f6a:	d110      	bne.n	8006f8e <__cvt+0x92>
 8006f6c:	783b      	ldrb	r3, [r7, #0]
 8006f6e:	2b30      	cmp	r3, #48	; 0x30
 8006f70:	d10a      	bne.n	8006f88 <__cvt+0x8c>
 8006f72:	2200      	movs	r2, #0
 8006f74:	2300      	movs	r3, #0
 8006f76:	4620      	mov	r0, r4
 8006f78:	4629      	mov	r1, r5
 8006f7a:	f7f9 fda5 	bl	8000ac8 <__aeabi_dcmpeq>
 8006f7e:	b918      	cbnz	r0, 8006f88 <__cvt+0x8c>
 8006f80:	f1c6 0601 	rsb	r6, r6, #1
 8006f84:	f8ca 6000 	str.w	r6, [sl]
 8006f88:	f8da 3000 	ldr.w	r3, [sl]
 8006f8c:	4499      	add	r9, r3
 8006f8e:	2200      	movs	r2, #0
 8006f90:	2300      	movs	r3, #0
 8006f92:	4620      	mov	r0, r4
 8006f94:	4629      	mov	r1, r5
 8006f96:	f7f9 fd97 	bl	8000ac8 <__aeabi_dcmpeq>
 8006f9a:	b108      	cbz	r0, 8006fa0 <__cvt+0xa4>
 8006f9c:	f8cd 900c 	str.w	r9, [sp, #12]
 8006fa0:	2230      	movs	r2, #48	; 0x30
 8006fa2:	9b03      	ldr	r3, [sp, #12]
 8006fa4:	454b      	cmp	r3, r9
 8006fa6:	d307      	bcc.n	8006fb8 <__cvt+0xbc>
 8006fa8:	9b03      	ldr	r3, [sp, #12]
 8006faa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006fac:	1bdb      	subs	r3, r3, r7
 8006fae:	4638      	mov	r0, r7
 8006fb0:	6013      	str	r3, [r2, #0]
 8006fb2:	b004      	add	sp, #16
 8006fb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006fb8:	1c59      	adds	r1, r3, #1
 8006fba:	9103      	str	r1, [sp, #12]
 8006fbc:	701a      	strb	r2, [r3, #0]
 8006fbe:	e7f0      	b.n	8006fa2 <__cvt+0xa6>

08006fc0 <__exponent>:
 8006fc0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006fc2:	4603      	mov	r3, r0
 8006fc4:	2900      	cmp	r1, #0
 8006fc6:	bfb8      	it	lt
 8006fc8:	4249      	neglt	r1, r1
 8006fca:	f803 2b02 	strb.w	r2, [r3], #2
 8006fce:	bfb4      	ite	lt
 8006fd0:	222d      	movlt	r2, #45	; 0x2d
 8006fd2:	222b      	movge	r2, #43	; 0x2b
 8006fd4:	2909      	cmp	r1, #9
 8006fd6:	7042      	strb	r2, [r0, #1]
 8006fd8:	dd2a      	ble.n	8007030 <__exponent+0x70>
 8006fda:	f10d 0407 	add.w	r4, sp, #7
 8006fde:	46a4      	mov	ip, r4
 8006fe0:	270a      	movs	r7, #10
 8006fe2:	46a6      	mov	lr, r4
 8006fe4:	460a      	mov	r2, r1
 8006fe6:	fb91 f6f7 	sdiv	r6, r1, r7
 8006fea:	fb07 1516 	mls	r5, r7, r6, r1
 8006fee:	3530      	adds	r5, #48	; 0x30
 8006ff0:	2a63      	cmp	r2, #99	; 0x63
 8006ff2:	f104 34ff 	add.w	r4, r4, #4294967295
 8006ff6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006ffa:	4631      	mov	r1, r6
 8006ffc:	dcf1      	bgt.n	8006fe2 <__exponent+0x22>
 8006ffe:	3130      	adds	r1, #48	; 0x30
 8007000:	f1ae 0502 	sub.w	r5, lr, #2
 8007004:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007008:	1c44      	adds	r4, r0, #1
 800700a:	4629      	mov	r1, r5
 800700c:	4561      	cmp	r1, ip
 800700e:	d30a      	bcc.n	8007026 <__exponent+0x66>
 8007010:	f10d 0209 	add.w	r2, sp, #9
 8007014:	eba2 020e 	sub.w	r2, r2, lr
 8007018:	4565      	cmp	r5, ip
 800701a:	bf88      	it	hi
 800701c:	2200      	movhi	r2, #0
 800701e:	4413      	add	r3, r2
 8007020:	1a18      	subs	r0, r3, r0
 8007022:	b003      	add	sp, #12
 8007024:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007026:	f811 2b01 	ldrb.w	r2, [r1], #1
 800702a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800702e:	e7ed      	b.n	800700c <__exponent+0x4c>
 8007030:	2330      	movs	r3, #48	; 0x30
 8007032:	3130      	adds	r1, #48	; 0x30
 8007034:	7083      	strb	r3, [r0, #2]
 8007036:	70c1      	strb	r1, [r0, #3]
 8007038:	1d03      	adds	r3, r0, #4
 800703a:	e7f1      	b.n	8007020 <__exponent+0x60>

0800703c <_printf_float>:
 800703c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007040:	ed2d 8b02 	vpush	{d8}
 8007044:	b08d      	sub	sp, #52	; 0x34
 8007046:	460c      	mov	r4, r1
 8007048:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800704c:	4616      	mov	r6, r2
 800704e:	461f      	mov	r7, r3
 8007050:	4605      	mov	r5, r0
 8007052:	f001 fb03 	bl	800865c <_localeconv_r>
 8007056:	f8d0 a000 	ldr.w	sl, [r0]
 800705a:	4650      	mov	r0, sl
 800705c:	f7f9 f8b8 	bl	80001d0 <strlen>
 8007060:	2300      	movs	r3, #0
 8007062:	930a      	str	r3, [sp, #40]	; 0x28
 8007064:	6823      	ldr	r3, [r4, #0]
 8007066:	9305      	str	r3, [sp, #20]
 8007068:	f8d8 3000 	ldr.w	r3, [r8]
 800706c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007070:	3307      	adds	r3, #7
 8007072:	f023 0307 	bic.w	r3, r3, #7
 8007076:	f103 0208 	add.w	r2, r3, #8
 800707a:	f8c8 2000 	str.w	r2, [r8]
 800707e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007082:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007086:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800708a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800708e:	9307      	str	r3, [sp, #28]
 8007090:	f8cd 8018 	str.w	r8, [sp, #24]
 8007094:	ee08 0a10 	vmov	s16, r0
 8007098:	4b9f      	ldr	r3, [pc, #636]	; (8007318 <_printf_float+0x2dc>)
 800709a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800709e:	f04f 32ff 	mov.w	r2, #4294967295
 80070a2:	f7f9 fd43 	bl	8000b2c <__aeabi_dcmpun>
 80070a6:	bb88      	cbnz	r0, 800710c <_printf_float+0xd0>
 80070a8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80070ac:	4b9a      	ldr	r3, [pc, #616]	; (8007318 <_printf_float+0x2dc>)
 80070ae:	f04f 32ff 	mov.w	r2, #4294967295
 80070b2:	f7f9 fd1d 	bl	8000af0 <__aeabi_dcmple>
 80070b6:	bb48      	cbnz	r0, 800710c <_printf_float+0xd0>
 80070b8:	2200      	movs	r2, #0
 80070ba:	2300      	movs	r3, #0
 80070bc:	4640      	mov	r0, r8
 80070be:	4649      	mov	r1, r9
 80070c0:	f7f9 fd0c 	bl	8000adc <__aeabi_dcmplt>
 80070c4:	b110      	cbz	r0, 80070cc <_printf_float+0x90>
 80070c6:	232d      	movs	r3, #45	; 0x2d
 80070c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80070cc:	4b93      	ldr	r3, [pc, #588]	; (800731c <_printf_float+0x2e0>)
 80070ce:	4894      	ldr	r0, [pc, #592]	; (8007320 <_printf_float+0x2e4>)
 80070d0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80070d4:	bf94      	ite	ls
 80070d6:	4698      	movls	r8, r3
 80070d8:	4680      	movhi	r8, r0
 80070da:	2303      	movs	r3, #3
 80070dc:	6123      	str	r3, [r4, #16]
 80070de:	9b05      	ldr	r3, [sp, #20]
 80070e0:	f023 0204 	bic.w	r2, r3, #4
 80070e4:	6022      	str	r2, [r4, #0]
 80070e6:	f04f 0900 	mov.w	r9, #0
 80070ea:	9700      	str	r7, [sp, #0]
 80070ec:	4633      	mov	r3, r6
 80070ee:	aa0b      	add	r2, sp, #44	; 0x2c
 80070f0:	4621      	mov	r1, r4
 80070f2:	4628      	mov	r0, r5
 80070f4:	f000 f9d8 	bl	80074a8 <_printf_common>
 80070f8:	3001      	adds	r0, #1
 80070fa:	f040 8090 	bne.w	800721e <_printf_float+0x1e2>
 80070fe:	f04f 30ff 	mov.w	r0, #4294967295
 8007102:	b00d      	add	sp, #52	; 0x34
 8007104:	ecbd 8b02 	vpop	{d8}
 8007108:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800710c:	4642      	mov	r2, r8
 800710e:	464b      	mov	r3, r9
 8007110:	4640      	mov	r0, r8
 8007112:	4649      	mov	r1, r9
 8007114:	f7f9 fd0a 	bl	8000b2c <__aeabi_dcmpun>
 8007118:	b140      	cbz	r0, 800712c <_printf_float+0xf0>
 800711a:	464b      	mov	r3, r9
 800711c:	2b00      	cmp	r3, #0
 800711e:	bfbc      	itt	lt
 8007120:	232d      	movlt	r3, #45	; 0x2d
 8007122:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007126:	487f      	ldr	r0, [pc, #508]	; (8007324 <_printf_float+0x2e8>)
 8007128:	4b7f      	ldr	r3, [pc, #508]	; (8007328 <_printf_float+0x2ec>)
 800712a:	e7d1      	b.n	80070d0 <_printf_float+0x94>
 800712c:	6863      	ldr	r3, [r4, #4]
 800712e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007132:	9206      	str	r2, [sp, #24]
 8007134:	1c5a      	adds	r2, r3, #1
 8007136:	d13f      	bne.n	80071b8 <_printf_float+0x17c>
 8007138:	2306      	movs	r3, #6
 800713a:	6063      	str	r3, [r4, #4]
 800713c:	9b05      	ldr	r3, [sp, #20]
 800713e:	6861      	ldr	r1, [r4, #4]
 8007140:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007144:	2300      	movs	r3, #0
 8007146:	9303      	str	r3, [sp, #12]
 8007148:	ab0a      	add	r3, sp, #40	; 0x28
 800714a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800714e:	ab09      	add	r3, sp, #36	; 0x24
 8007150:	ec49 8b10 	vmov	d0, r8, r9
 8007154:	9300      	str	r3, [sp, #0]
 8007156:	6022      	str	r2, [r4, #0]
 8007158:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800715c:	4628      	mov	r0, r5
 800715e:	f7ff fecd 	bl	8006efc <__cvt>
 8007162:	9b06      	ldr	r3, [sp, #24]
 8007164:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007166:	2b47      	cmp	r3, #71	; 0x47
 8007168:	4680      	mov	r8, r0
 800716a:	d108      	bne.n	800717e <_printf_float+0x142>
 800716c:	1cc8      	adds	r0, r1, #3
 800716e:	db02      	blt.n	8007176 <_printf_float+0x13a>
 8007170:	6863      	ldr	r3, [r4, #4]
 8007172:	4299      	cmp	r1, r3
 8007174:	dd41      	ble.n	80071fa <_printf_float+0x1be>
 8007176:	f1ab 0b02 	sub.w	fp, fp, #2
 800717a:	fa5f fb8b 	uxtb.w	fp, fp
 800717e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007182:	d820      	bhi.n	80071c6 <_printf_float+0x18a>
 8007184:	3901      	subs	r1, #1
 8007186:	465a      	mov	r2, fp
 8007188:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800718c:	9109      	str	r1, [sp, #36]	; 0x24
 800718e:	f7ff ff17 	bl	8006fc0 <__exponent>
 8007192:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007194:	1813      	adds	r3, r2, r0
 8007196:	2a01      	cmp	r2, #1
 8007198:	4681      	mov	r9, r0
 800719a:	6123      	str	r3, [r4, #16]
 800719c:	dc02      	bgt.n	80071a4 <_printf_float+0x168>
 800719e:	6822      	ldr	r2, [r4, #0]
 80071a0:	07d2      	lsls	r2, r2, #31
 80071a2:	d501      	bpl.n	80071a8 <_printf_float+0x16c>
 80071a4:	3301      	adds	r3, #1
 80071a6:	6123      	str	r3, [r4, #16]
 80071a8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d09c      	beq.n	80070ea <_printf_float+0xae>
 80071b0:	232d      	movs	r3, #45	; 0x2d
 80071b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80071b6:	e798      	b.n	80070ea <_printf_float+0xae>
 80071b8:	9a06      	ldr	r2, [sp, #24]
 80071ba:	2a47      	cmp	r2, #71	; 0x47
 80071bc:	d1be      	bne.n	800713c <_printf_float+0x100>
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d1bc      	bne.n	800713c <_printf_float+0x100>
 80071c2:	2301      	movs	r3, #1
 80071c4:	e7b9      	b.n	800713a <_printf_float+0xfe>
 80071c6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80071ca:	d118      	bne.n	80071fe <_printf_float+0x1c2>
 80071cc:	2900      	cmp	r1, #0
 80071ce:	6863      	ldr	r3, [r4, #4]
 80071d0:	dd0b      	ble.n	80071ea <_printf_float+0x1ae>
 80071d2:	6121      	str	r1, [r4, #16]
 80071d4:	b913      	cbnz	r3, 80071dc <_printf_float+0x1a0>
 80071d6:	6822      	ldr	r2, [r4, #0]
 80071d8:	07d0      	lsls	r0, r2, #31
 80071da:	d502      	bpl.n	80071e2 <_printf_float+0x1a6>
 80071dc:	3301      	adds	r3, #1
 80071de:	440b      	add	r3, r1
 80071e0:	6123      	str	r3, [r4, #16]
 80071e2:	65a1      	str	r1, [r4, #88]	; 0x58
 80071e4:	f04f 0900 	mov.w	r9, #0
 80071e8:	e7de      	b.n	80071a8 <_printf_float+0x16c>
 80071ea:	b913      	cbnz	r3, 80071f2 <_printf_float+0x1b6>
 80071ec:	6822      	ldr	r2, [r4, #0]
 80071ee:	07d2      	lsls	r2, r2, #31
 80071f0:	d501      	bpl.n	80071f6 <_printf_float+0x1ba>
 80071f2:	3302      	adds	r3, #2
 80071f4:	e7f4      	b.n	80071e0 <_printf_float+0x1a4>
 80071f6:	2301      	movs	r3, #1
 80071f8:	e7f2      	b.n	80071e0 <_printf_float+0x1a4>
 80071fa:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80071fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007200:	4299      	cmp	r1, r3
 8007202:	db05      	blt.n	8007210 <_printf_float+0x1d4>
 8007204:	6823      	ldr	r3, [r4, #0]
 8007206:	6121      	str	r1, [r4, #16]
 8007208:	07d8      	lsls	r0, r3, #31
 800720a:	d5ea      	bpl.n	80071e2 <_printf_float+0x1a6>
 800720c:	1c4b      	adds	r3, r1, #1
 800720e:	e7e7      	b.n	80071e0 <_printf_float+0x1a4>
 8007210:	2900      	cmp	r1, #0
 8007212:	bfd4      	ite	le
 8007214:	f1c1 0202 	rsble	r2, r1, #2
 8007218:	2201      	movgt	r2, #1
 800721a:	4413      	add	r3, r2
 800721c:	e7e0      	b.n	80071e0 <_printf_float+0x1a4>
 800721e:	6823      	ldr	r3, [r4, #0]
 8007220:	055a      	lsls	r2, r3, #21
 8007222:	d407      	bmi.n	8007234 <_printf_float+0x1f8>
 8007224:	6923      	ldr	r3, [r4, #16]
 8007226:	4642      	mov	r2, r8
 8007228:	4631      	mov	r1, r6
 800722a:	4628      	mov	r0, r5
 800722c:	47b8      	blx	r7
 800722e:	3001      	adds	r0, #1
 8007230:	d12c      	bne.n	800728c <_printf_float+0x250>
 8007232:	e764      	b.n	80070fe <_printf_float+0xc2>
 8007234:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007238:	f240 80e0 	bls.w	80073fc <_printf_float+0x3c0>
 800723c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007240:	2200      	movs	r2, #0
 8007242:	2300      	movs	r3, #0
 8007244:	f7f9 fc40 	bl	8000ac8 <__aeabi_dcmpeq>
 8007248:	2800      	cmp	r0, #0
 800724a:	d034      	beq.n	80072b6 <_printf_float+0x27a>
 800724c:	4a37      	ldr	r2, [pc, #220]	; (800732c <_printf_float+0x2f0>)
 800724e:	2301      	movs	r3, #1
 8007250:	4631      	mov	r1, r6
 8007252:	4628      	mov	r0, r5
 8007254:	47b8      	blx	r7
 8007256:	3001      	adds	r0, #1
 8007258:	f43f af51 	beq.w	80070fe <_printf_float+0xc2>
 800725c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007260:	429a      	cmp	r2, r3
 8007262:	db02      	blt.n	800726a <_printf_float+0x22e>
 8007264:	6823      	ldr	r3, [r4, #0]
 8007266:	07d8      	lsls	r0, r3, #31
 8007268:	d510      	bpl.n	800728c <_printf_float+0x250>
 800726a:	ee18 3a10 	vmov	r3, s16
 800726e:	4652      	mov	r2, sl
 8007270:	4631      	mov	r1, r6
 8007272:	4628      	mov	r0, r5
 8007274:	47b8      	blx	r7
 8007276:	3001      	adds	r0, #1
 8007278:	f43f af41 	beq.w	80070fe <_printf_float+0xc2>
 800727c:	f04f 0800 	mov.w	r8, #0
 8007280:	f104 091a 	add.w	r9, r4, #26
 8007284:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007286:	3b01      	subs	r3, #1
 8007288:	4543      	cmp	r3, r8
 800728a:	dc09      	bgt.n	80072a0 <_printf_float+0x264>
 800728c:	6823      	ldr	r3, [r4, #0]
 800728e:	079b      	lsls	r3, r3, #30
 8007290:	f100 8105 	bmi.w	800749e <_printf_float+0x462>
 8007294:	68e0      	ldr	r0, [r4, #12]
 8007296:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007298:	4298      	cmp	r0, r3
 800729a:	bfb8      	it	lt
 800729c:	4618      	movlt	r0, r3
 800729e:	e730      	b.n	8007102 <_printf_float+0xc6>
 80072a0:	2301      	movs	r3, #1
 80072a2:	464a      	mov	r2, r9
 80072a4:	4631      	mov	r1, r6
 80072a6:	4628      	mov	r0, r5
 80072a8:	47b8      	blx	r7
 80072aa:	3001      	adds	r0, #1
 80072ac:	f43f af27 	beq.w	80070fe <_printf_float+0xc2>
 80072b0:	f108 0801 	add.w	r8, r8, #1
 80072b4:	e7e6      	b.n	8007284 <_printf_float+0x248>
 80072b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	dc39      	bgt.n	8007330 <_printf_float+0x2f4>
 80072bc:	4a1b      	ldr	r2, [pc, #108]	; (800732c <_printf_float+0x2f0>)
 80072be:	2301      	movs	r3, #1
 80072c0:	4631      	mov	r1, r6
 80072c2:	4628      	mov	r0, r5
 80072c4:	47b8      	blx	r7
 80072c6:	3001      	adds	r0, #1
 80072c8:	f43f af19 	beq.w	80070fe <_printf_float+0xc2>
 80072cc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80072d0:	4313      	orrs	r3, r2
 80072d2:	d102      	bne.n	80072da <_printf_float+0x29e>
 80072d4:	6823      	ldr	r3, [r4, #0]
 80072d6:	07d9      	lsls	r1, r3, #31
 80072d8:	d5d8      	bpl.n	800728c <_printf_float+0x250>
 80072da:	ee18 3a10 	vmov	r3, s16
 80072de:	4652      	mov	r2, sl
 80072e0:	4631      	mov	r1, r6
 80072e2:	4628      	mov	r0, r5
 80072e4:	47b8      	blx	r7
 80072e6:	3001      	adds	r0, #1
 80072e8:	f43f af09 	beq.w	80070fe <_printf_float+0xc2>
 80072ec:	f04f 0900 	mov.w	r9, #0
 80072f0:	f104 0a1a 	add.w	sl, r4, #26
 80072f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072f6:	425b      	negs	r3, r3
 80072f8:	454b      	cmp	r3, r9
 80072fa:	dc01      	bgt.n	8007300 <_printf_float+0x2c4>
 80072fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80072fe:	e792      	b.n	8007226 <_printf_float+0x1ea>
 8007300:	2301      	movs	r3, #1
 8007302:	4652      	mov	r2, sl
 8007304:	4631      	mov	r1, r6
 8007306:	4628      	mov	r0, r5
 8007308:	47b8      	blx	r7
 800730a:	3001      	adds	r0, #1
 800730c:	f43f aef7 	beq.w	80070fe <_printf_float+0xc2>
 8007310:	f109 0901 	add.w	r9, r9, #1
 8007314:	e7ee      	b.n	80072f4 <_printf_float+0x2b8>
 8007316:	bf00      	nop
 8007318:	7fefffff 	.word	0x7fefffff
 800731c:	0800d270 	.word	0x0800d270
 8007320:	0800d274 	.word	0x0800d274
 8007324:	0800d27c 	.word	0x0800d27c
 8007328:	0800d278 	.word	0x0800d278
 800732c:	0800d280 	.word	0x0800d280
 8007330:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007332:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007334:	429a      	cmp	r2, r3
 8007336:	bfa8      	it	ge
 8007338:	461a      	movge	r2, r3
 800733a:	2a00      	cmp	r2, #0
 800733c:	4691      	mov	r9, r2
 800733e:	dc37      	bgt.n	80073b0 <_printf_float+0x374>
 8007340:	f04f 0b00 	mov.w	fp, #0
 8007344:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007348:	f104 021a 	add.w	r2, r4, #26
 800734c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800734e:	9305      	str	r3, [sp, #20]
 8007350:	eba3 0309 	sub.w	r3, r3, r9
 8007354:	455b      	cmp	r3, fp
 8007356:	dc33      	bgt.n	80073c0 <_printf_float+0x384>
 8007358:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800735c:	429a      	cmp	r2, r3
 800735e:	db3b      	blt.n	80073d8 <_printf_float+0x39c>
 8007360:	6823      	ldr	r3, [r4, #0]
 8007362:	07da      	lsls	r2, r3, #31
 8007364:	d438      	bmi.n	80073d8 <_printf_float+0x39c>
 8007366:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007368:	9b05      	ldr	r3, [sp, #20]
 800736a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800736c:	1ad3      	subs	r3, r2, r3
 800736e:	eba2 0901 	sub.w	r9, r2, r1
 8007372:	4599      	cmp	r9, r3
 8007374:	bfa8      	it	ge
 8007376:	4699      	movge	r9, r3
 8007378:	f1b9 0f00 	cmp.w	r9, #0
 800737c:	dc35      	bgt.n	80073ea <_printf_float+0x3ae>
 800737e:	f04f 0800 	mov.w	r8, #0
 8007382:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007386:	f104 0a1a 	add.w	sl, r4, #26
 800738a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800738e:	1a9b      	subs	r3, r3, r2
 8007390:	eba3 0309 	sub.w	r3, r3, r9
 8007394:	4543      	cmp	r3, r8
 8007396:	f77f af79 	ble.w	800728c <_printf_float+0x250>
 800739a:	2301      	movs	r3, #1
 800739c:	4652      	mov	r2, sl
 800739e:	4631      	mov	r1, r6
 80073a0:	4628      	mov	r0, r5
 80073a2:	47b8      	blx	r7
 80073a4:	3001      	adds	r0, #1
 80073a6:	f43f aeaa 	beq.w	80070fe <_printf_float+0xc2>
 80073aa:	f108 0801 	add.w	r8, r8, #1
 80073ae:	e7ec      	b.n	800738a <_printf_float+0x34e>
 80073b0:	4613      	mov	r3, r2
 80073b2:	4631      	mov	r1, r6
 80073b4:	4642      	mov	r2, r8
 80073b6:	4628      	mov	r0, r5
 80073b8:	47b8      	blx	r7
 80073ba:	3001      	adds	r0, #1
 80073bc:	d1c0      	bne.n	8007340 <_printf_float+0x304>
 80073be:	e69e      	b.n	80070fe <_printf_float+0xc2>
 80073c0:	2301      	movs	r3, #1
 80073c2:	4631      	mov	r1, r6
 80073c4:	4628      	mov	r0, r5
 80073c6:	9205      	str	r2, [sp, #20]
 80073c8:	47b8      	blx	r7
 80073ca:	3001      	adds	r0, #1
 80073cc:	f43f ae97 	beq.w	80070fe <_printf_float+0xc2>
 80073d0:	9a05      	ldr	r2, [sp, #20]
 80073d2:	f10b 0b01 	add.w	fp, fp, #1
 80073d6:	e7b9      	b.n	800734c <_printf_float+0x310>
 80073d8:	ee18 3a10 	vmov	r3, s16
 80073dc:	4652      	mov	r2, sl
 80073de:	4631      	mov	r1, r6
 80073e0:	4628      	mov	r0, r5
 80073e2:	47b8      	blx	r7
 80073e4:	3001      	adds	r0, #1
 80073e6:	d1be      	bne.n	8007366 <_printf_float+0x32a>
 80073e8:	e689      	b.n	80070fe <_printf_float+0xc2>
 80073ea:	9a05      	ldr	r2, [sp, #20]
 80073ec:	464b      	mov	r3, r9
 80073ee:	4442      	add	r2, r8
 80073f0:	4631      	mov	r1, r6
 80073f2:	4628      	mov	r0, r5
 80073f4:	47b8      	blx	r7
 80073f6:	3001      	adds	r0, #1
 80073f8:	d1c1      	bne.n	800737e <_printf_float+0x342>
 80073fa:	e680      	b.n	80070fe <_printf_float+0xc2>
 80073fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80073fe:	2a01      	cmp	r2, #1
 8007400:	dc01      	bgt.n	8007406 <_printf_float+0x3ca>
 8007402:	07db      	lsls	r3, r3, #31
 8007404:	d538      	bpl.n	8007478 <_printf_float+0x43c>
 8007406:	2301      	movs	r3, #1
 8007408:	4642      	mov	r2, r8
 800740a:	4631      	mov	r1, r6
 800740c:	4628      	mov	r0, r5
 800740e:	47b8      	blx	r7
 8007410:	3001      	adds	r0, #1
 8007412:	f43f ae74 	beq.w	80070fe <_printf_float+0xc2>
 8007416:	ee18 3a10 	vmov	r3, s16
 800741a:	4652      	mov	r2, sl
 800741c:	4631      	mov	r1, r6
 800741e:	4628      	mov	r0, r5
 8007420:	47b8      	blx	r7
 8007422:	3001      	adds	r0, #1
 8007424:	f43f ae6b 	beq.w	80070fe <_printf_float+0xc2>
 8007428:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800742c:	2200      	movs	r2, #0
 800742e:	2300      	movs	r3, #0
 8007430:	f7f9 fb4a 	bl	8000ac8 <__aeabi_dcmpeq>
 8007434:	b9d8      	cbnz	r0, 800746e <_printf_float+0x432>
 8007436:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007438:	f108 0201 	add.w	r2, r8, #1
 800743c:	3b01      	subs	r3, #1
 800743e:	4631      	mov	r1, r6
 8007440:	4628      	mov	r0, r5
 8007442:	47b8      	blx	r7
 8007444:	3001      	adds	r0, #1
 8007446:	d10e      	bne.n	8007466 <_printf_float+0x42a>
 8007448:	e659      	b.n	80070fe <_printf_float+0xc2>
 800744a:	2301      	movs	r3, #1
 800744c:	4652      	mov	r2, sl
 800744e:	4631      	mov	r1, r6
 8007450:	4628      	mov	r0, r5
 8007452:	47b8      	blx	r7
 8007454:	3001      	adds	r0, #1
 8007456:	f43f ae52 	beq.w	80070fe <_printf_float+0xc2>
 800745a:	f108 0801 	add.w	r8, r8, #1
 800745e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007460:	3b01      	subs	r3, #1
 8007462:	4543      	cmp	r3, r8
 8007464:	dcf1      	bgt.n	800744a <_printf_float+0x40e>
 8007466:	464b      	mov	r3, r9
 8007468:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800746c:	e6dc      	b.n	8007228 <_printf_float+0x1ec>
 800746e:	f04f 0800 	mov.w	r8, #0
 8007472:	f104 0a1a 	add.w	sl, r4, #26
 8007476:	e7f2      	b.n	800745e <_printf_float+0x422>
 8007478:	2301      	movs	r3, #1
 800747a:	4642      	mov	r2, r8
 800747c:	e7df      	b.n	800743e <_printf_float+0x402>
 800747e:	2301      	movs	r3, #1
 8007480:	464a      	mov	r2, r9
 8007482:	4631      	mov	r1, r6
 8007484:	4628      	mov	r0, r5
 8007486:	47b8      	blx	r7
 8007488:	3001      	adds	r0, #1
 800748a:	f43f ae38 	beq.w	80070fe <_printf_float+0xc2>
 800748e:	f108 0801 	add.w	r8, r8, #1
 8007492:	68e3      	ldr	r3, [r4, #12]
 8007494:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007496:	1a5b      	subs	r3, r3, r1
 8007498:	4543      	cmp	r3, r8
 800749a:	dcf0      	bgt.n	800747e <_printf_float+0x442>
 800749c:	e6fa      	b.n	8007294 <_printf_float+0x258>
 800749e:	f04f 0800 	mov.w	r8, #0
 80074a2:	f104 0919 	add.w	r9, r4, #25
 80074a6:	e7f4      	b.n	8007492 <_printf_float+0x456>

080074a8 <_printf_common>:
 80074a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80074ac:	4616      	mov	r6, r2
 80074ae:	4699      	mov	r9, r3
 80074b0:	688a      	ldr	r2, [r1, #8]
 80074b2:	690b      	ldr	r3, [r1, #16]
 80074b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80074b8:	4293      	cmp	r3, r2
 80074ba:	bfb8      	it	lt
 80074bc:	4613      	movlt	r3, r2
 80074be:	6033      	str	r3, [r6, #0]
 80074c0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80074c4:	4607      	mov	r7, r0
 80074c6:	460c      	mov	r4, r1
 80074c8:	b10a      	cbz	r2, 80074ce <_printf_common+0x26>
 80074ca:	3301      	adds	r3, #1
 80074cc:	6033      	str	r3, [r6, #0]
 80074ce:	6823      	ldr	r3, [r4, #0]
 80074d0:	0699      	lsls	r1, r3, #26
 80074d2:	bf42      	ittt	mi
 80074d4:	6833      	ldrmi	r3, [r6, #0]
 80074d6:	3302      	addmi	r3, #2
 80074d8:	6033      	strmi	r3, [r6, #0]
 80074da:	6825      	ldr	r5, [r4, #0]
 80074dc:	f015 0506 	ands.w	r5, r5, #6
 80074e0:	d106      	bne.n	80074f0 <_printf_common+0x48>
 80074e2:	f104 0a19 	add.w	sl, r4, #25
 80074e6:	68e3      	ldr	r3, [r4, #12]
 80074e8:	6832      	ldr	r2, [r6, #0]
 80074ea:	1a9b      	subs	r3, r3, r2
 80074ec:	42ab      	cmp	r3, r5
 80074ee:	dc26      	bgt.n	800753e <_printf_common+0x96>
 80074f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80074f4:	1e13      	subs	r3, r2, #0
 80074f6:	6822      	ldr	r2, [r4, #0]
 80074f8:	bf18      	it	ne
 80074fa:	2301      	movne	r3, #1
 80074fc:	0692      	lsls	r2, r2, #26
 80074fe:	d42b      	bmi.n	8007558 <_printf_common+0xb0>
 8007500:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007504:	4649      	mov	r1, r9
 8007506:	4638      	mov	r0, r7
 8007508:	47c0      	blx	r8
 800750a:	3001      	adds	r0, #1
 800750c:	d01e      	beq.n	800754c <_printf_common+0xa4>
 800750e:	6823      	ldr	r3, [r4, #0]
 8007510:	68e5      	ldr	r5, [r4, #12]
 8007512:	6832      	ldr	r2, [r6, #0]
 8007514:	f003 0306 	and.w	r3, r3, #6
 8007518:	2b04      	cmp	r3, #4
 800751a:	bf08      	it	eq
 800751c:	1aad      	subeq	r5, r5, r2
 800751e:	68a3      	ldr	r3, [r4, #8]
 8007520:	6922      	ldr	r2, [r4, #16]
 8007522:	bf0c      	ite	eq
 8007524:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007528:	2500      	movne	r5, #0
 800752a:	4293      	cmp	r3, r2
 800752c:	bfc4      	itt	gt
 800752e:	1a9b      	subgt	r3, r3, r2
 8007530:	18ed      	addgt	r5, r5, r3
 8007532:	2600      	movs	r6, #0
 8007534:	341a      	adds	r4, #26
 8007536:	42b5      	cmp	r5, r6
 8007538:	d11a      	bne.n	8007570 <_printf_common+0xc8>
 800753a:	2000      	movs	r0, #0
 800753c:	e008      	b.n	8007550 <_printf_common+0xa8>
 800753e:	2301      	movs	r3, #1
 8007540:	4652      	mov	r2, sl
 8007542:	4649      	mov	r1, r9
 8007544:	4638      	mov	r0, r7
 8007546:	47c0      	blx	r8
 8007548:	3001      	adds	r0, #1
 800754a:	d103      	bne.n	8007554 <_printf_common+0xac>
 800754c:	f04f 30ff 	mov.w	r0, #4294967295
 8007550:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007554:	3501      	adds	r5, #1
 8007556:	e7c6      	b.n	80074e6 <_printf_common+0x3e>
 8007558:	18e1      	adds	r1, r4, r3
 800755a:	1c5a      	adds	r2, r3, #1
 800755c:	2030      	movs	r0, #48	; 0x30
 800755e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007562:	4422      	add	r2, r4
 8007564:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007568:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800756c:	3302      	adds	r3, #2
 800756e:	e7c7      	b.n	8007500 <_printf_common+0x58>
 8007570:	2301      	movs	r3, #1
 8007572:	4622      	mov	r2, r4
 8007574:	4649      	mov	r1, r9
 8007576:	4638      	mov	r0, r7
 8007578:	47c0      	blx	r8
 800757a:	3001      	adds	r0, #1
 800757c:	d0e6      	beq.n	800754c <_printf_common+0xa4>
 800757e:	3601      	adds	r6, #1
 8007580:	e7d9      	b.n	8007536 <_printf_common+0x8e>
	...

08007584 <_printf_i>:
 8007584:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007588:	460c      	mov	r4, r1
 800758a:	4691      	mov	r9, r2
 800758c:	7e27      	ldrb	r7, [r4, #24]
 800758e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007590:	2f78      	cmp	r7, #120	; 0x78
 8007592:	4680      	mov	r8, r0
 8007594:	469a      	mov	sl, r3
 8007596:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800759a:	d807      	bhi.n	80075ac <_printf_i+0x28>
 800759c:	2f62      	cmp	r7, #98	; 0x62
 800759e:	d80a      	bhi.n	80075b6 <_printf_i+0x32>
 80075a0:	2f00      	cmp	r7, #0
 80075a2:	f000 80d8 	beq.w	8007756 <_printf_i+0x1d2>
 80075a6:	2f58      	cmp	r7, #88	; 0x58
 80075a8:	f000 80a3 	beq.w	80076f2 <_printf_i+0x16e>
 80075ac:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80075b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80075b4:	e03a      	b.n	800762c <_printf_i+0xa8>
 80075b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80075ba:	2b15      	cmp	r3, #21
 80075bc:	d8f6      	bhi.n	80075ac <_printf_i+0x28>
 80075be:	a001      	add	r0, pc, #4	; (adr r0, 80075c4 <_printf_i+0x40>)
 80075c0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80075c4:	0800761d 	.word	0x0800761d
 80075c8:	08007631 	.word	0x08007631
 80075cc:	080075ad 	.word	0x080075ad
 80075d0:	080075ad 	.word	0x080075ad
 80075d4:	080075ad 	.word	0x080075ad
 80075d8:	080075ad 	.word	0x080075ad
 80075dc:	08007631 	.word	0x08007631
 80075e0:	080075ad 	.word	0x080075ad
 80075e4:	080075ad 	.word	0x080075ad
 80075e8:	080075ad 	.word	0x080075ad
 80075ec:	080075ad 	.word	0x080075ad
 80075f0:	0800773d 	.word	0x0800773d
 80075f4:	08007661 	.word	0x08007661
 80075f8:	0800771f 	.word	0x0800771f
 80075fc:	080075ad 	.word	0x080075ad
 8007600:	080075ad 	.word	0x080075ad
 8007604:	0800775f 	.word	0x0800775f
 8007608:	080075ad 	.word	0x080075ad
 800760c:	08007661 	.word	0x08007661
 8007610:	080075ad 	.word	0x080075ad
 8007614:	080075ad 	.word	0x080075ad
 8007618:	08007727 	.word	0x08007727
 800761c:	680b      	ldr	r3, [r1, #0]
 800761e:	1d1a      	adds	r2, r3, #4
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	600a      	str	r2, [r1, #0]
 8007624:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007628:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800762c:	2301      	movs	r3, #1
 800762e:	e0a3      	b.n	8007778 <_printf_i+0x1f4>
 8007630:	6825      	ldr	r5, [r4, #0]
 8007632:	6808      	ldr	r0, [r1, #0]
 8007634:	062e      	lsls	r6, r5, #24
 8007636:	f100 0304 	add.w	r3, r0, #4
 800763a:	d50a      	bpl.n	8007652 <_printf_i+0xce>
 800763c:	6805      	ldr	r5, [r0, #0]
 800763e:	600b      	str	r3, [r1, #0]
 8007640:	2d00      	cmp	r5, #0
 8007642:	da03      	bge.n	800764c <_printf_i+0xc8>
 8007644:	232d      	movs	r3, #45	; 0x2d
 8007646:	426d      	negs	r5, r5
 8007648:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800764c:	485e      	ldr	r0, [pc, #376]	; (80077c8 <_printf_i+0x244>)
 800764e:	230a      	movs	r3, #10
 8007650:	e019      	b.n	8007686 <_printf_i+0x102>
 8007652:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007656:	6805      	ldr	r5, [r0, #0]
 8007658:	600b      	str	r3, [r1, #0]
 800765a:	bf18      	it	ne
 800765c:	b22d      	sxthne	r5, r5
 800765e:	e7ef      	b.n	8007640 <_printf_i+0xbc>
 8007660:	680b      	ldr	r3, [r1, #0]
 8007662:	6825      	ldr	r5, [r4, #0]
 8007664:	1d18      	adds	r0, r3, #4
 8007666:	6008      	str	r0, [r1, #0]
 8007668:	0628      	lsls	r0, r5, #24
 800766a:	d501      	bpl.n	8007670 <_printf_i+0xec>
 800766c:	681d      	ldr	r5, [r3, #0]
 800766e:	e002      	b.n	8007676 <_printf_i+0xf2>
 8007670:	0669      	lsls	r1, r5, #25
 8007672:	d5fb      	bpl.n	800766c <_printf_i+0xe8>
 8007674:	881d      	ldrh	r5, [r3, #0]
 8007676:	4854      	ldr	r0, [pc, #336]	; (80077c8 <_printf_i+0x244>)
 8007678:	2f6f      	cmp	r7, #111	; 0x6f
 800767a:	bf0c      	ite	eq
 800767c:	2308      	moveq	r3, #8
 800767e:	230a      	movne	r3, #10
 8007680:	2100      	movs	r1, #0
 8007682:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007686:	6866      	ldr	r6, [r4, #4]
 8007688:	60a6      	str	r6, [r4, #8]
 800768a:	2e00      	cmp	r6, #0
 800768c:	bfa2      	ittt	ge
 800768e:	6821      	ldrge	r1, [r4, #0]
 8007690:	f021 0104 	bicge.w	r1, r1, #4
 8007694:	6021      	strge	r1, [r4, #0]
 8007696:	b90d      	cbnz	r5, 800769c <_printf_i+0x118>
 8007698:	2e00      	cmp	r6, #0
 800769a:	d04d      	beq.n	8007738 <_printf_i+0x1b4>
 800769c:	4616      	mov	r6, r2
 800769e:	fbb5 f1f3 	udiv	r1, r5, r3
 80076a2:	fb03 5711 	mls	r7, r3, r1, r5
 80076a6:	5dc7      	ldrb	r7, [r0, r7]
 80076a8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80076ac:	462f      	mov	r7, r5
 80076ae:	42bb      	cmp	r3, r7
 80076b0:	460d      	mov	r5, r1
 80076b2:	d9f4      	bls.n	800769e <_printf_i+0x11a>
 80076b4:	2b08      	cmp	r3, #8
 80076b6:	d10b      	bne.n	80076d0 <_printf_i+0x14c>
 80076b8:	6823      	ldr	r3, [r4, #0]
 80076ba:	07df      	lsls	r7, r3, #31
 80076bc:	d508      	bpl.n	80076d0 <_printf_i+0x14c>
 80076be:	6923      	ldr	r3, [r4, #16]
 80076c0:	6861      	ldr	r1, [r4, #4]
 80076c2:	4299      	cmp	r1, r3
 80076c4:	bfde      	ittt	le
 80076c6:	2330      	movle	r3, #48	; 0x30
 80076c8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80076cc:	f106 36ff 	addle.w	r6, r6, #4294967295
 80076d0:	1b92      	subs	r2, r2, r6
 80076d2:	6122      	str	r2, [r4, #16]
 80076d4:	f8cd a000 	str.w	sl, [sp]
 80076d8:	464b      	mov	r3, r9
 80076da:	aa03      	add	r2, sp, #12
 80076dc:	4621      	mov	r1, r4
 80076de:	4640      	mov	r0, r8
 80076e0:	f7ff fee2 	bl	80074a8 <_printf_common>
 80076e4:	3001      	adds	r0, #1
 80076e6:	d14c      	bne.n	8007782 <_printf_i+0x1fe>
 80076e8:	f04f 30ff 	mov.w	r0, #4294967295
 80076ec:	b004      	add	sp, #16
 80076ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076f2:	4835      	ldr	r0, [pc, #212]	; (80077c8 <_printf_i+0x244>)
 80076f4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80076f8:	6823      	ldr	r3, [r4, #0]
 80076fa:	680e      	ldr	r6, [r1, #0]
 80076fc:	061f      	lsls	r7, r3, #24
 80076fe:	f856 5b04 	ldr.w	r5, [r6], #4
 8007702:	600e      	str	r6, [r1, #0]
 8007704:	d514      	bpl.n	8007730 <_printf_i+0x1ac>
 8007706:	07d9      	lsls	r1, r3, #31
 8007708:	bf44      	itt	mi
 800770a:	f043 0320 	orrmi.w	r3, r3, #32
 800770e:	6023      	strmi	r3, [r4, #0]
 8007710:	b91d      	cbnz	r5, 800771a <_printf_i+0x196>
 8007712:	6823      	ldr	r3, [r4, #0]
 8007714:	f023 0320 	bic.w	r3, r3, #32
 8007718:	6023      	str	r3, [r4, #0]
 800771a:	2310      	movs	r3, #16
 800771c:	e7b0      	b.n	8007680 <_printf_i+0xfc>
 800771e:	6823      	ldr	r3, [r4, #0]
 8007720:	f043 0320 	orr.w	r3, r3, #32
 8007724:	6023      	str	r3, [r4, #0]
 8007726:	2378      	movs	r3, #120	; 0x78
 8007728:	4828      	ldr	r0, [pc, #160]	; (80077cc <_printf_i+0x248>)
 800772a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800772e:	e7e3      	b.n	80076f8 <_printf_i+0x174>
 8007730:	065e      	lsls	r6, r3, #25
 8007732:	bf48      	it	mi
 8007734:	b2ad      	uxthmi	r5, r5
 8007736:	e7e6      	b.n	8007706 <_printf_i+0x182>
 8007738:	4616      	mov	r6, r2
 800773a:	e7bb      	b.n	80076b4 <_printf_i+0x130>
 800773c:	680b      	ldr	r3, [r1, #0]
 800773e:	6826      	ldr	r6, [r4, #0]
 8007740:	6960      	ldr	r0, [r4, #20]
 8007742:	1d1d      	adds	r5, r3, #4
 8007744:	600d      	str	r5, [r1, #0]
 8007746:	0635      	lsls	r5, r6, #24
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	d501      	bpl.n	8007750 <_printf_i+0x1cc>
 800774c:	6018      	str	r0, [r3, #0]
 800774e:	e002      	b.n	8007756 <_printf_i+0x1d2>
 8007750:	0671      	lsls	r1, r6, #25
 8007752:	d5fb      	bpl.n	800774c <_printf_i+0x1c8>
 8007754:	8018      	strh	r0, [r3, #0]
 8007756:	2300      	movs	r3, #0
 8007758:	6123      	str	r3, [r4, #16]
 800775a:	4616      	mov	r6, r2
 800775c:	e7ba      	b.n	80076d4 <_printf_i+0x150>
 800775e:	680b      	ldr	r3, [r1, #0]
 8007760:	1d1a      	adds	r2, r3, #4
 8007762:	600a      	str	r2, [r1, #0]
 8007764:	681e      	ldr	r6, [r3, #0]
 8007766:	6862      	ldr	r2, [r4, #4]
 8007768:	2100      	movs	r1, #0
 800776a:	4630      	mov	r0, r6
 800776c:	f7f8 fd38 	bl	80001e0 <memchr>
 8007770:	b108      	cbz	r0, 8007776 <_printf_i+0x1f2>
 8007772:	1b80      	subs	r0, r0, r6
 8007774:	6060      	str	r0, [r4, #4]
 8007776:	6863      	ldr	r3, [r4, #4]
 8007778:	6123      	str	r3, [r4, #16]
 800777a:	2300      	movs	r3, #0
 800777c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007780:	e7a8      	b.n	80076d4 <_printf_i+0x150>
 8007782:	6923      	ldr	r3, [r4, #16]
 8007784:	4632      	mov	r2, r6
 8007786:	4649      	mov	r1, r9
 8007788:	4640      	mov	r0, r8
 800778a:	47d0      	blx	sl
 800778c:	3001      	adds	r0, #1
 800778e:	d0ab      	beq.n	80076e8 <_printf_i+0x164>
 8007790:	6823      	ldr	r3, [r4, #0]
 8007792:	079b      	lsls	r3, r3, #30
 8007794:	d413      	bmi.n	80077be <_printf_i+0x23a>
 8007796:	68e0      	ldr	r0, [r4, #12]
 8007798:	9b03      	ldr	r3, [sp, #12]
 800779a:	4298      	cmp	r0, r3
 800779c:	bfb8      	it	lt
 800779e:	4618      	movlt	r0, r3
 80077a0:	e7a4      	b.n	80076ec <_printf_i+0x168>
 80077a2:	2301      	movs	r3, #1
 80077a4:	4632      	mov	r2, r6
 80077a6:	4649      	mov	r1, r9
 80077a8:	4640      	mov	r0, r8
 80077aa:	47d0      	blx	sl
 80077ac:	3001      	adds	r0, #1
 80077ae:	d09b      	beq.n	80076e8 <_printf_i+0x164>
 80077b0:	3501      	adds	r5, #1
 80077b2:	68e3      	ldr	r3, [r4, #12]
 80077b4:	9903      	ldr	r1, [sp, #12]
 80077b6:	1a5b      	subs	r3, r3, r1
 80077b8:	42ab      	cmp	r3, r5
 80077ba:	dcf2      	bgt.n	80077a2 <_printf_i+0x21e>
 80077bc:	e7eb      	b.n	8007796 <_printf_i+0x212>
 80077be:	2500      	movs	r5, #0
 80077c0:	f104 0619 	add.w	r6, r4, #25
 80077c4:	e7f5      	b.n	80077b2 <_printf_i+0x22e>
 80077c6:	bf00      	nop
 80077c8:	0800d282 	.word	0x0800d282
 80077cc:	0800d293 	.word	0x0800d293

080077d0 <_sbrk_r>:
 80077d0:	b538      	push	{r3, r4, r5, lr}
 80077d2:	4d06      	ldr	r5, [pc, #24]	; (80077ec <_sbrk_r+0x1c>)
 80077d4:	2300      	movs	r3, #0
 80077d6:	4604      	mov	r4, r0
 80077d8:	4608      	mov	r0, r1
 80077da:	602b      	str	r3, [r5, #0]
 80077dc:	f7fa f8b2 	bl	8001944 <_sbrk>
 80077e0:	1c43      	adds	r3, r0, #1
 80077e2:	d102      	bne.n	80077ea <_sbrk_r+0x1a>
 80077e4:	682b      	ldr	r3, [r5, #0]
 80077e6:	b103      	cbz	r3, 80077ea <_sbrk_r+0x1a>
 80077e8:	6023      	str	r3, [r4, #0]
 80077ea:	bd38      	pop	{r3, r4, r5, pc}
 80077ec:	2000a444 	.word	0x2000a444

080077f0 <__sread>:
 80077f0:	b510      	push	{r4, lr}
 80077f2:	460c      	mov	r4, r1
 80077f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077f8:	f001 fae8 	bl	8008dcc <_read_r>
 80077fc:	2800      	cmp	r0, #0
 80077fe:	bfab      	itete	ge
 8007800:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007802:	89a3      	ldrhlt	r3, [r4, #12]
 8007804:	181b      	addge	r3, r3, r0
 8007806:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800780a:	bfac      	ite	ge
 800780c:	6563      	strge	r3, [r4, #84]	; 0x54
 800780e:	81a3      	strhlt	r3, [r4, #12]
 8007810:	bd10      	pop	{r4, pc}

08007812 <__swrite>:
 8007812:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007816:	461f      	mov	r7, r3
 8007818:	898b      	ldrh	r3, [r1, #12]
 800781a:	05db      	lsls	r3, r3, #23
 800781c:	4605      	mov	r5, r0
 800781e:	460c      	mov	r4, r1
 8007820:	4616      	mov	r6, r2
 8007822:	d505      	bpl.n	8007830 <__swrite+0x1e>
 8007824:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007828:	2302      	movs	r3, #2
 800782a:	2200      	movs	r2, #0
 800782c:	f000 ff1a 	bl	8008664 <_lseek_r>
 8007830:	89a3      	ldrh	r3, [r4, #12]
 8007832:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007836:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800783a:	81a3      	strh	r3, [r4, #12]
 800783c:	4632      	mov	r2, r6
 800783e:	463b      	mov	r3, r7
 8007840:	4628      	mov	r0, r5
 8007842:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007846:	f000 b84b 	b.w	80078e0 <_write_r>

0800784a <__sseek>:
 800784a:	b510      	push	{r4, lr}
 800784c:	460c      	mov	r4, r1
 800784e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007852:	f000 ff07 	bl	8008664 <_lseek_r>
 8007856:	1c43      	adds	r3, r0, #1
 8007858:	89a3      	ldrh	r3, [r4, #12]
 800785a:	bf15      	itete	ne
 800785c:	6560      	strne	r0, [r4, #84]	; 0x54
 800785e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007862:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007866:	81a3      	strheq	r3, [r4, #12]
 8007868:	bf18      	it	ne
 800786a:	81a3      	strhne	r3, [r4, #12]
 800786c:	bd10      	pop	{r4, pc}

0800786e <__sclose>:
 800786e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007872:	f000 b847 	b.w	8007904 <_close_r>
	...

08007878 <swprintf>:
 8007878:	b40c      	push	{r2, r3}
 800787a:	b530      	push	{r4, r5, lr}
 800787c:	4b17      	ldr	r3, [pc, #92]	; (80078dc <swprintf+0x64>)
 800787e:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 8007882:	681d      	ldr	r5, [r3, #0]
 8007884:	b09d      	sub	sp, #116	; 0x74
 8007886:	460c      	mov	r4, r1
 8007888:	d308      	bcc.n	800789c <swprintf+0x24>
 800788a:	238b      	movs	r3, #139	; 0x8b
 800788c:	602b      	str	r3, [r5, #0]
 800788e:	f04f 30ff 	mov.w	r0, #4294967295
 8007892:	b01d      	add	sp, #116	; 0x74
 8007894:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007898:	b002      	add	sp, #8
 800789a:	4770      	bx	lr
 800789c:	f44f 7302 	mov.w	r3, #520	; 0x208
 80078a0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80078a4:	9002      	str	r0, [sp, #8]
 80078a6:	9006      	str	r0, [sp, #24]
 80078a8:	b1b1      	cbz	r1, 80078d8 <swprintf+0x60>
 80078aa:	1e4b      	subs	r3, r1, #1
 80078ac:	009b      	lsls	r3, r3, #2
 80078ae:	9304      	str	r3, [sp, #16]
 80078b0:	9307      	str	r3, [sp, #28]
 80078b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80078b6:	f8ad 3016 	strh.w	r3, [sp, #22]
 80078ba:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80078bc:	ab21      	add	r3, sp, #132	; 0x84
 80078be:	a902      	add	r1, sp, #8
 80078c0:	4628      	mov	r0, r5
 80078c2:	9301      	str	r3, [sp, #4]
 80078c4:	f001 fb04 	bl	8008ed0 <_svfwprintf_r>
 80078c8:	2c00      	cmp	r4, #0
 80078ca:	d0de      	beq.n	800788a <swprintf+0x12>
 80078cc:	9b02      	ldr	r3, [sp, #8]
 80078ce:	2200      	movs	r2, #0
 80078d0:	42a0      	cmp	r0, r4
 80078d2:	601a      	str	r2, [r3, #0]
 80078d4:	d3dd      	bcc.n	8007892 <swprintf+0x1a>
 80078d6:	e7d8      	b.n	800788a <swprintf+0x12>
 80078d8:	460b      	mov	r3, r1
 80078da:	e7e8      	b.n	80078ae <swprintf+0x36>
 80078dc:	2000001c 	.word	0x2000001c

080078e0 <_write_r>:
 80078e0:	b538      	push	{r3, r4, r5, lr}
 80078e2:	4d07      	ldr	r5, [pc, #28]	; (8007900 <_write_r+0x20>)
 80078e4:	4604      	mov	r4, r0
 80078e6:	4608      	mov	r0, r1
 80078e8:	4611      	mov	r1, r2
 80078ea:	2200      	movs	r2, #0
 80078ec:	602a      	str	r2, [r5, #0]
 80078ee:	461a      	mov	r2, r3
 80078f0:	f7f9 ffd7 	bl	80018a2 <_write>
 80078f4:	1c43      	adds	r3, r0, #1
 80078f6:	d102      	bne.n	80078fe <_write_r+0x1e>
 80078f8:	682b      	ldr	r3, [r5, #0]
 80078fa:	b103      	cbz	r3, 80078fe <_write_r+0x1e>
 80078fc:	6023      	str	r3, [r4, #0]
 80078fe:	bd38      	pop	{r3, r4, r5, pc}
 8007900:	2000a444 	.word	0x2000a444

08007904 <_close_r>:
 8007904:	b538      	push	{r3, r4, r5, lr}
 8007906:	4d06      	ldr	r5, [pc, #24]	; (8007920 <_close_r+0x1c>)
 8007908:	2300      	movs	r3, #0
 800790a:	4604      	mov	r4, r0
 800790c:	4608      	mov	r0, r1
 800790e:	602b      	str	r3, [r5, #0]
 8007910:	f7f9 ffe3 	bl	80018da <_close>
 8007914:	1c43      	adds	r3, r0, #1
 8007916:	d102      	bne.n	800791e <_close_r+0x1a>
 8007918:	682b      	ldr	r3, [r5, #0]
 800791a:	b103      	cbz	r3, 800791e <_close_r+0x1a>
 800791c:	6023      	str	r3, [r4, #0]
 800791e:	bd38      	pop	{r3, r4, r5, pc}
 8007920:	2000a444 	.word	0x2000a444

08007924 <quorem>:
 8007924:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007928:	6903      	ldr	r3, [r0, #16]
 800792a:	690c      	ldr	r4, [r1, #16]
 800792c:	42a3      	cmp	r3, r4
 800792e:	4607      	mov	r7, r0
 8007930:	f2c0 8081 	blt.w	8007a36 <quorem+0x112>
 8007934:	3c01      	subs	r4, #1
 8007936:	f101 0814 	add.w	r8, r1, #20
 800793a:	f100 0514 	add.w	r5, r0, #20
 800793e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007942:	9301      	str	r3, [sp, #4]
 8007944:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007948:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800794c:	3301      	adds	r3, #1
 800794e:	429a      	cmp	r2, r3
 8007950:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007954:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007958:	fbb2 f6f3 	udiv	r6, r2, r3
 800795c:	d331      	bcc.n	80079c2 <quorem+0x9e>
 800795e:	f04f 0e00 	mov.w	lr, #0
 8007962:	4640      	mov	r0, r8
 8007964:	46ac      	mov	ip, r5
 8007966:	46f2      	mov	sl, lr
 8007968:	f850 2b04 	ldr.w	r2, [r0], #4
 800796c:	b293      	uxth	r3, r2
 800796e:	fb06 e303 	mla	r3, r6, r3, lr
 8007972:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007976:	b29b      	uxth	r3, r3
 8007978:	ebaa 0303 	sub.w	r3, sl, r3
 800797c:	0c12      	lsrs	r2, r2, #16
 800797e:	f8dc a000 	ldr.w	sl, [ip]
 8007982:	fb06 e202 	mla	r2, r6, r2, lr
 8007986:	fa13 f38a 	uxtah	r3, r3, sl
 800798a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800798e:	fa1f fa82 	uxth.w	sl, r2
 8007992:	f8dc 2000 	ldr.w	r2, [ip]
 8007996:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800799a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800799e:	b29b      	uxth	r3, r3
 80079a0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80079a4:	4581      	cmp	r9, r0
 80079a6:	f84c 3b04 	str.w	r3, [ip], #4
 80079aa:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80079ae:	d2db      	bcs.n	8007968 <quorem+0x44>
 80079b0:	f855 300b 	ldr.w	r3, [r5, fp]
 80079b4:	b92b      	cbnz	r3, 80079c2 <quorem+0x9e>
 80079b6:	9b01      	ldr	r3, [sp, #4]
 80079b8:	3b04      	subs	r3, #4
 80079ba:	429d      	cmp	r5, r3
 80079bc:	461a      	mov	r2, r3
 80079be:	d32e      	bcc.n	8007a1e <quorem+0xfa>
 80079c0:	613c      	str	r4, [r7, #16]
 80079c2:	4638      	mov	r0, r7
 80079c4:	f001 f8f2 	bl	8008bac <__mcmp>
 80079c8:	2800      	cmp	r0, #0
 80079ca:	db24      	blt.n	8007a16 <quorem+0xf2>
 80079cc:	3601      	adds	r6, #1
 80079ce:	4628      	mov	r0, r5
 80079d0:	f04f 0c00 	mov.w	ip, #0
 80079d4:	f858 2b04 	ldr.w	r2, [r8], #4
 80079d8:	f8d0 e000 	ldr.w	lr, [r0]
 80079dc:	b293      	uxth	r3, r2
 80079de:	ebac 0303 	sub.w	r3, ip, r3
 80079e2:	0c12      	lsrs	r2, r2, #16
 80079e4:	fa13 f38e 	uxtah	r3, r3, lr
 80079e8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80079ec:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80079f0:	b29b      	uxth	r3, r3
 80079f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80079f6:	45c1      	cmp	r9, r8
 80079f8:	f840 3b04 	str.w	r3, [r0], #4
 80079fc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007a00:	d2e8      	bcs.n	80079d4 <quorem+0xb0>
 8007a02:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007a06:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007a0a:	b922      	cbnz	r2, 8007a16 <quorem+0xf2>
 8007a0c:	3b04      	subs	r3, #4
 8007a0e:	429d      	cmp	r5, r3
 8007a10:	461a      	mov	r2, r3
 8007a12:	d30a      	bcc.n	8007a2a <quorem+0x106>
 8007a14:	613c      	str	r4, [r7, #16]
 8007a16:	4630      	mov	r0, r6
 8007a18:	b003      	add	sp, #12
 8007a1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a1e:	6812      	ldr	r2, [r2, #0]
 8007a20:	3b04      	subs	r3, #4
 8007a22:	2a00      	cmp	r2, #0
 8007a24:	d1cc      	bne.n	80079c0 <quorem+0x9c>
 8007a26:	3c01      	subs	r4, #1
 8007a28:	e7c7      	b.n	80079ba <quorem+0x96>
 8007a2a:	6812      	ldr	r2, [r2, #0]
 8007a2c:	3b04      	subs	r3, #4
 8007a2e:	2a00      	cmp	r2, #0
 8007a30:	d1f0      	bne.n	8007a14 <quorem+0xf0>
 8007a32:	3c01      	subs	r4, #1
 8007a34:	e7eb      	b.n	8007a0e <quorem+0xea>
 8007a36:	2000      	movs	r0, #0
 8007a38:	e7ee      	b.n	8007a18 <quorem+0xf4>
 8007a3a:	0000      	movs	r0, r0
 8007a3c:	0000      	movs	r0, r0
	...

08007a40 <_dtoa_r>:
 8007a40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a44:	ed2d 8b02 	vpush	{d8}
 8007a48:	ec57 6b10 	vmov	r6, r7, d0
 8007a4c:	b095      	sub	sp, #84	; 0x54
 8007a4e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007a50:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007a54:	9105      	str	r1, [sp, #20]
 8007a56:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8007a5a:	4604      	mov	r4, r0
 8007a5c:	9209      	str	r2, [sp, #36]	; 0x24
 8007a5e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007a60:	b975      	cbnz	r5, 8007a80 <_dtoa_r+0x40>
 8007a62:	2010      	movs	r0, #16
 8007a64:	f000 fe10 	bl	8008688 <malloc>
 8007a68:	4602      	mov	r2, r0
 8007a6a:	6260      	str	r0, [r4, #36]	; 0x24
 8007a6c:	b920      	cbnz	r0, 8007a78 <_dtoa_r+0x38>
 8007a6e:	4bb2      	ldr	r3, [pc, #712]	; (8007d38 <_dtoa_r+0x2f8>)
 8007a70:	21ea      	movs	r1, #234	; 0xea
 8007a72:	48b2      	ldr	r0, [pc, #712]	; (8007d3c <_dtoa_r+0x2fc>)
 8007a74:	f001 ffbe 	bl	80099f4 <__assert_func>
 8007a78:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007a7c:	6005      	str	r5, [r0, #0]
 8007a7e:	60c5      	str	r5, [r0, #12]
 8007a80:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007a82:	6819      	ldr	r1, [r3, #0]
 8007a84:	b151      	cbz	r1, 8007a9c <_dtoa_r+0x5c>
 8007a86:	685a      	ldr	r2, [r3, #4]
 8007a88:	604a      	str	r2, [r1, #4]
 8007a8a:	2301      	movs	r3, #1
 8007a8c:	4093      	lsls	r3, r2
 8007a8e:	608b      	str	r3, [r1, #8]
 8007a90:	4620      	mov	r0, r4
 8007a92:	f000 fe4d 	bl	8008730 <_Bfree>
 8007a96:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007a98:	2200      	movs	r2, #0
 8007a9a:	601a      	str	r2, [r3, #0]
 8007a9c:	1e3b      	subs	r3, r7, #0
 8007a9e:	bfb9      	ittee	lt
 8007aa0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007aa4:	9303      	strlt	r3, [sp, #12]
 8007aa6:	2300      	movge	r3, #0
 8007aa8:	f8c8 3000 	strge.w	r3, [r8]
 8007aac:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8007ab0:	4ba3      	ldr	r3, [pc, #652]	; (8007d40 <_dtoa_r+0x300>)
 8007ab2:	bfbc      	itt	lt
 8007ab4:	2201      	movlt	r2, #1
 8007ab6:	f8c8 2000 	strlt.w	r2, [r8]
 8007aba:	ea33 0309 	bics.w	r3, r3, r9
 8007abe:	d11b      	bne.n	8007af8 <_dtoa_r+0xb8>
 8007ac0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007ac2:	f242 730f 	movw	r3, #9999	; 0x270f
 8007ac6:	6013      	str	r3, [r2, #0]
 8007ac8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007acc:	4333      	orrs	r3, r6
 8007ace:	f000 857a 	beq.w	80085c6 <_dtoa_r+0xb86>
 8007ad2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007ad4:	b963      	cbnz	r3, 8007af0 <_dtoa_r+0xb0>
 8007ad6:	4b9b      	ldr	r3, [pc, #620]	; (8007d44 <_dtoa_r+0x304>)
 8007ad8:	e024      	b.n	8007b24 <_dtoa_r+0xe4>
 8007ada:	4b9b      	ldr	r3, [pc, #620]	; (8007d48 <_dtoa_r+0x308>)
 8007adc:	9300      	str	r3, [sp, #0]
 8007ade:	3308      	adds	r3, #8
 8007ae0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007ae2:	6013      	str	r3, [r2, #0]
 8007ae4:	9800      	ldr	r0, [sp, #0]
 8007ae6:	b015      	add	sp, #84	; 0x54
 8007ae8:	ecbd 8b02 	vpop	{d8}
 8007aec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007af0:	4b94      	ldr	r3, [pc, #592]	; (8007d44 <_dtoa_r+0x304>)
 8007af2:	9300      	str	r3, [sp, #0]
 8007af4:	3303      	adds	r3, #3
 8007af6:	e7f3      	b.n	8007ae0 <_dtoa_r+0xa0>
 8007af8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007afc:	2200      	movs	r2, #0
 8007afe:	ec51 0b17 	vmov	r0, r1, d7
 8007b02:	2300      	movs	r3, #0
 8007b04:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8007b08:	f7f8 ffde 	bl	8000ac8 <__aeabi_dcmpeq>
 8007b0c:	4680      	mov	r8, r0
 8007b0e:	b158      	cbz	r0, 8007b28 <_dtoa_r+0xe8>
 8007b10:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007b12:	2301      	movs	r3, #1
 8007b14:	6013      	str	r3, [r2, #0]
 8007b16:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	f000 8551 	beq.w	80085c0 <_dtoa_r+0xb80>
 8007b1e:	488b      	ldr	r0, [pc, #556]	; (8007d4c <_dtoa_r+0x30c>)
 8007b20:	6018      	str	r0, [r3, #0]
 8007b22:	1e43      	subs	r3, r0, #1
 8007b24:	9300      	str	r3, [sp, #0]
 8007b26:	e7dd      	b.n	8007ae4 <_dtoa_r+0xa4>
 8007b28:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8007b2c:	aa12      	add	r2, sp, #72	; 0x48
 8007b2e:	a913      	add	r1, sp, #76	; 0x4c
 8007b30:	4620      	mov	r0, r4
 8007b32:	f001 f8df 	bl	8008cf4 <__d2b>
 8007b36:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007b3a:	4683      	mov	fp, r0
 8007b3c:	2d00      	cmp	r5, #0
 8007b3e:	d07c      	beq.n	8007c3a <_dtoa_r+0x1fa>
 8007b40:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007b42:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8007b46:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007b4a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8007b4e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007b52:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007b56:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007b5a:	4b7d      	ldr	r3, [pc, #500]	; (8007d50 <_dtoa_r+0x310>)
 8007b5c:	2200      	movs	r2, #0
 8007b5e:	4630      	mov	r0, r6
 8007b60:	4639      	mov	r1, r7
 8007b62:	f7f8 fb91 	bl	8000288 <__aeabi_dsub>
 8007b66:	a36e      	add	r3, pc, #440	; (adr r3, 8007d20 <_dtoa_r+0x2e0>)
 8007b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b6c:	f7f8 fd44 	bl	80005f8 <__aeabi_dmul>
 8007b70:	a36d      	add	r3, pc, #436	; (adr r3, 8007d28 <_dtoa_r+0x2e8>)
 8007b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b76:	f7f8 fb89 	bl	800028c <__adddf3>
 8007b7a:	4606      	mov	r6, r0
 8007b7c:	4628      	mov	r0, r5
 8007b7e:	460f      	mov	r7, r1
 8007b80:	f7f8 fcd0 	bl	8000524 <__aeabi_i2d>
 8007b84:	a36a      	add	r3, pc, #424	; (adr r3, 8007d30 <_dtoa_r+0x2f0>)
 8007b86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b8a:	f7f8 fd35 	bl	80005f8 <__aeabi_dmul>
 8007b8e:	4602      	mov	r2, r0
 8007b90:	460b      	mov	r3, r1
 8007b92:	4630      	mov	r0, r6
 8007b94:	4639      	mov	r1, r7
 8007b96:	f7f8 fb79 	bl	800028c <__adddf3>
 8007b9a:	4606      	mov	r6, r0
 8007b9c:	460f      	mov	r7, r1
 8007b9e:	f7f8 ffdb 	bl	8000b58 <__aeabi_d2iz>
 8007ba2:	2200      	movs	r2, #0
 8007ba4:	4682      	mov	sl, r0
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	4630      	mov	r0, r6
 8007baa:	4639      	mov	r1, r7
 8007bac:	f7f8 ff96 	bl	8000adc <__aeabi_dcmplt>
 8007bb0:	b148      	cbz	r0, 8007bc6 <_dtoa_r+0x186>
 8007bb2:	4650      	mov	r0, sl
 8007bb4:	f7f8 fcb6 	bl	8000524 <__aeabi_i2d>
 8007bb8:	4632      	mov	r2, r6
 8007bba:	463b      	mov	r3, r7
 8007bbc:	f7f8 ff84 	bl	8000ac8 <__aeabi_dcmpeq>
 8007bc0:	b908      	cbnz	r0, 8007bc6 <_dtoa_r+0x186>
 8007bc2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007bc6:	f1ba 0f16 	cmp.w	sl, #22
 8007bca:	d854      	bhi.n	8007c76 <_dtoa_r+0x236>
 8007bcc:	4b61      	ldr	r3, [pc, #388]	; (8007d54 <_dtoa_r+0x314>)
 8007bce:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bd6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007bda:	f7f8 ff7f 	bl	8000adc <__aeabi_dcmplt>
 8007bde:	2800      	cmp	r0, #0
 8007be0:	d04b      	beq.n	8007c7a <_dtoa_r+0x23a>
 8007be2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007be6:	2300      	movs	r3, #0
 8007be8:	930e      	str	r3, [sp, #56]	; 0x38
 8007bea:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007bec:	1b5d      	subs	r5, r3, r5
 8007bee:	1e6b      	subs	r3, r5, #1
 8007bf0:	9304      	str	r3, [sp, #16]
 8007bf2:	bf43      	ittte	mi
 8007bf4:	2300      	movmi	r3, #0
 8007bf6:	f1c5 0801 	rsbmi	r8, r5, #1
 8007bfa:	9304      	strmi	r3, [sp, #16]
 8007bfc:	f04f 0800 	movpl.w	r8, #0
 8007c00:	f1ba 0f00 	cmp.w	sl, #0
 8007c04:	db3b      	blt.n	8007c7e <_dtoa_r+0x23e>
 8007c06:	9b04      	ldr	r3, [sp, #16]
 8007c08:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8007c0c:	4453      	add	r3, sl
 8007c0e:	9304      	str	r3, [sp, #16]
 8007c10:	2300      	movs	r3, #0
 8007c12:	9306      	str	r3, [sp, #24]
 8007c14:	9b05      	ldr	r3, [sp, #20]
 8007c16:	2b09      	cmp	r3, #9
 8007c18:	d869      	bhi.n	8007cee <_dtoa_r+0x2ae>
 8007c1a:	2b05      	cmp	r3, #5
 8007c1c:	bfc4      	itt	gt
 8007c1e:	3b04      	subgt	r3, #4
 8007c20:	9305      	strgt	r3, [sp, #20]
 8007c22:	9b05      	ldr	r3, [sp, #20]
 8007c24:	f1a3 0302 	sub.w	r3, r3, #2
 8007c28:	bfcc      	ite	gt
 8007c2a:	2500      	movgt	r5, #0
 8007c2c:	2501      	movle	r5, #1
 8007c2e:	2b03      	cmp	r3, #3
 8007c30:	d869      	bhi.n	8007d06 <_dtoa_r+0x2c6>
 8007c32:	e8df f003 	tbb	[pc, r3]
 8007c36:	4e2c      	.short	0x4e2c
 8007c38:	5a4c      	.short	0x5a4c
 8007c3a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8007c3e:	441d      	add	r5, r3
 8007c40:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007c44:	2b20      	cmp	r3, #32
 8007c46:	bfc1      	itttt	gt
 8007c48:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007c4c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007c50:	fa09 f303 	lslgt.w	r3, r9, r3
 8007c54:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007c58:	bfda      	itte	le
 8007c5a:	f1c3 0320 	rsble	r3, r3, #32
 8007c5e:	fa06 f003 	lslle.w	r0, r6, r3
 8007c62:	4318      	orrgt	r0, r3
 8007c64:	f7f8 fc4e 	bl	8000504 <__aeabi_ui2d>
 8007c68:	2301      	movs	r3, #1
 8007c6a:	4606      	mov	r6, r0
 8007c6c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007c70:	3d01      	subs	r5, #1
 8007c72:	9310      	str	r3, [sp, #64]	; 0x40
 8007c74:	e771      	b.n	8007b5a <_dtoa_r+0x11a>
 8007c76:	2301      	movs	r3, #1
 8007c78:	e7b6      	b.n	8007be8 <_dtoa_r+0x1a8>
 8007c7a:	900e      	str	r0, [sp, #56]	; 0x38
 8007c7c:	e7b5      	b.n	8007bea <_dtoa_r+0x1aa>
 8007c7e:	f1ca 0300 	rsb	r3, sl, #0
 8007c82:	9306      	str	r3, [sp, #24]
 8007c84:	2300      	movs	r3, #0
 8007c86:	eba8 080a 	sub.w	r8, r8, sl
 8007c8a:	930d      	str	r3, [sp, #52]	; 0x34
 8007c8c:	e7c2      	b.n	8007c14 <_dtoa_r+0x1d4>
 8007c8e:	2300      	movs	r3, #0
 8007c90:	9308      	str	r3, [sp, #32]
 8007c92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	dc39      	bgt.n	8007d0c <_dtoa_r+0x2cc>
 8007c98:	f04f 0901 	mov.w	r9, #1
 8007c9c:	f8cd 9004 	str.w	r9, [sp, #4]
 8007ca0:	464b      	mov	r3, r9
 8007ca2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8007ca6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007ca8:	2200      	movs	r2, #0
 8007caa:	6042      	str	r2, [r0, #4]
 8007cac:	2204      	movs	r2, #4
 8007cae:	f102 0614 	add.w	r6, r2, #20
 8007cb2:	429e      	cmp	r6, r3
 8007cb4:	6841      	ldr	r1, [r0, #4]
 8007cb6:	d92f      	bls.n	8007d18 <_dtoa_r+0x2d8>
 8007cb8:	4620      	mov	r0, r4
 8007cba:	f000 fcf9 	bl	80086b0 <_Balloc>
 8007cbe:	9000      	str	r0, [sp, #0]
 8007cc0:	2800      	cmp	r0, #0
 8007cc2:	d14b      	bne.n	8007d5c <_dtoa_r+0x31c>
 8007cc4:	4b24      	ldr	r3, [pc, #144]	; (8007d58 <_dtoa_r+0x318>)
 8007cc6:	4602      	mov	r2, r0
 8007cc8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007ccc:	e6d1      	b.n	8007a72 <_dtoa_r+0x32>
 8007cce:	2301      	movs	r3, #1
 8007cd0:	e7de      	b.n	8007c90 <_dtoa_r+0x250>
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	9308      	str	r3, [sp, #32]
 8007cd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007cd8:	eb0a 0903 	add.w	r9, sl, r3
 8007cdc:	f109 0301 	add.w	r3, r9, #1
 8007ce0:	2b01      	cmp	r3, #1
 8007ce2:	9301      	str	r3, [sp, #4]
 8007ce4:	bfb8      	it	lt
 8007ce6:	2301      	movlt	r3, #1
 8007ce8:	e7dd      	b.n	8007ca6 <_dtoa_r+0x266>
 8007cea:	2301      	movs	r3, #1
 8007cec:	e7f2      	b.n	8007cd4 <_dtoa_r+0x294>
 8007cee:	2501      	movs	r5, #1
 8007cf0:	2300      	movs	r3, #0
 8007cf2:	9305      	str	r3, [sp, #20]
 8007cf4:	9508      	str	r5, [sp, #32]
 8007cf6:	f04f 39ff 	mov.w	r9, #4294967295
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	f8cd 9004 	str.w	r9, [sp, #4]
 8007d00:	2312      	movs	r3, #18
 8007d02:	9209      	str	r2, [sp, #36]	; 0x24
 8007d04:	e7cf      	b.n	8007ca6 <_dtoa_r+0x266>
 8007d06:	2301      	movs	r3, #1
 8007d08:	9308      	str	r3, [sp, #32]
 8007d0a:	e7f4      	b.n	8007cf6 <_dtoa_r+0x2b6>
 8007d0c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8007d10:	f8cd 9004 	str.w	r9, [sp, #4]
 8007d14:	464b      	mov	r3, r9
 8007d16:	e7c6      	b.n	8007ca6 <_dtoa_r+0x266>
 8007d18:	3101      	adds	r1, #1
 8007d1a:	6041      	str	r1, [r0, #4]
 8007d1c:	0052      	lsls	r2, r2, #1
 8007d1e:	e7c6      	b.n	8007cae <_dtoa_r+0x26e>
 8007d20:	636f4361 	.word	0x636f4361
 8007d24:	3fd287a7 	.word	0x3fd287a7
 8007d28:	8b60c8b3 	.word	0x8b60c8b3
 8007d2c:	3fc68a28 	.word	0x3fc68a28
 8007d30:	509f79fb 	.word	0x509f79fb
 8007d34:	3fd34413 	.word	0x3fd34413
 8007d38:	0800d2b1 	.word	0x0800d2b1
 8007d3c:	0800d2c8 	.word	0x0800d2c8
 8007d40:	7ff00000 	.word	0x7ff00000
 8007d44:	0800d2ad 	.word	0x0800d2ad
 8007d48:	0800d2a4 	.word	0x0800d2a4
 8007d4c:	0800d281 	.word	0x0800d281
 8007d50:	3ff80000 	.word	0x3ff80000
 8007d54:	0800d3c0 	.word	0x0800d3c0
 8007d58:	0800d327 	.word	0x0800d327
 8007d5c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007d5e:	9a00      	ldr	r2, [sp, #0]
 8007d60:	601a      	str	r2, [r3, #0]
 8007d62:	9b01      	ldr	r3, [sp, #4]
 8007d64:	2b0e      	cmp	r3, #14
 8007d66:	f200 80ad 	bhi.w	8007ec4 <_dtoa_r+0x484>
 8007d6a:	2d00      	cmp	r5, #0
 8007d6c:	f000 80aa 	beq.w	8007ec4 <_dtoa_r+0x484>
 8007d70:	f1ba 0f00 	cmp.w	sl, #0
 8007d74:	dd36      	ble.n	8007de4 <_dtoa_r+0x3a4>
 8007d76:	4ac3      	ldr	r2, [pc, #780]	; (8008084 <_dtoa_r+0x644>)
 8007d78:	f00a 030f 	and.w	r3, sl, #15
 8007d7c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007d80:	ed93 7b00 	vldr	d7, [r3]
 8007d84:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8007d88:	ea4f 172a 	mov.w	r7, sl, asr #4
 8007d8c:	eeb0 8a47 	vmov.f32	s16, s14
 8007d90:	eef0 8a67 	vmov.f32	s17, s15
 8007d94:	d016      	beq.n	8007dc4 <_dtoa_r+0x384>
 8007d96:	4bbc      	ldr	r3, [pc, #752]	; (8008088 <_dtoa_r+0x648>)
 8007d98:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007d9c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007da0:	f7f8 fd54 	bl	800084c <__aeabi_ddiv>
 8007da4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007da8:	f007 070f 	and.w	r7, r7, #15
 8007dac:	2503      	movs	r5, #3
 8007dae:	4eb6      	ldr	r6, [pc, #728]	; (8008088 <_dtoa_r+0x648>)
 8007db0:	b957      	cbnz	r7, 8007dc8 <_dtoa_r+0x388>
 8007db2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007db6:	ec53 2b18 	vmov	r2, r3, d8
 8007dba:	f7f8 fd47 	bl	800084c <__aeabi_ddiv>
 8007dbe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007dc2:	e029      	b.n	8007e18 <_dtoa_r+0x3d8>
 8007dc4:	2502      	movs	r5, #2
 8007dc6:	e7f2      	b.n	8007dae <_dtoa_r+0x36e>
 8007dc8:	07f9      	lsls	r1, r7, #31
 8007dca:	d508      	bpl.n	8007dde <_dtoa_r+0x39e>
 8007dcc:	ec51 0b18 	vmov	r0, r1, d8
 8007dd0:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007dd4:	f7f8 fc10 	bl	80005f8 <__aeabi_dmul>
 8007dd8:	ec41 0b18 	vmov	d8, r0, r1
 8007ddc:	3501      	adds	r5, #1
 8007dde:	107f      	asrs	r7, r7, #1
 8007de0:	3608      	adds	r6, #8
 8007de2:	e7e5      	b.n	8007db0 <_dtoa_r+0x370>
 8007de4:	f000 80a6 	beq.w	8007f34 <_dtoa_r+0x4f4>
 8007de8:	f1ca 0600 	rsb	r6, sl, #0
 8007dec:	4ba5      	ldr	r3, [pc, #660]	; (8008084 <_dtoa_r+0x644>)
 8007dee:	4fa6      	ldr	r7, [pc, #664]	; (8008088 <_dtoa_r+0x648>)
 8007df0:	f006 020f 	and.w	r2, r6, #15
 8007df4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dfc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007e00:	f7f8 fbfa 	bl	80005f8 <__aeabi_dmul>
 8007e04:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007e08:	1136      	asrs	r6, r6, #4
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	2502      	movs	r5, #2
 8007e0e:	2e00      	cmp	r6, #0
 8007e10:	f040 8085 	bne.w	8007f1e <_dtoa_r+0x4de>
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d1d2      	bne.n	8007dbe <_dtoa_r+0x37e>
 8007e18:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	f000 808c 	beq.w	8007f38 <_dtoa_r+0x4f8>
 8007e20:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007e24:	4b99      	ldr	r3, [pc, #612]	; (800808c <_dtoa_r+0x64c>)
 8007e26:	2200      	movs	r2, #0
 8007e28:	4630      	mov	r0, r6
 8007e2a:	4639      	mov	r1, r7
 8007e2c:	f7f8 fe56 	bl	8000adc <__aeabi_dcmplt>
 8007e30:	2800      	cmp	r0, #0
 8007e32:	f000 8081 	beq.w	8007f38 <_dtoa_r+0x4f8>
 8007e36:	9b01      	ldr	r3, [sp, #4]
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d07d      	beq.n	8007f38 <_dtoa_r+0x4f8>
 8007e3c:	f1b9 0f00 	cmp.w	r9, #0
 8007e40:	dd3c      	ble.n	8007ebc <_dtoa_r+0x47c>
 8007e42:	f10a 33ff 	add.w	r3, sl, #4294967295
 8007e46:	9307      	str	r3, [sp, #28]
 8007e48:	2200      	movs	r2, #0
 8007e4a:	4b91      	ldr	r3, [pc, #580]	; (8008090 <_dtoa_r+0x650>)
 8007e4c:	4630      	mov	r0, r6
 8007e4e:	4639      	mov	r1, r7
 8007e50:	f7f8 fbd2 	bl	80005f8 <__aeabi_dmul>
 8007e54:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007e58:	3501      	adds	r5, #1
 8007e5a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8007e5e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007e62:	4628      	mov	r0, r5
 8007e64:	f7f8 fb5e 	bl	8000524 <__aeabi_i2d>
 8007e68:	4632      	mov	r2, r6
 8007e6a:	463b      	mov	r3, r7
 8007e6c:	f7f8 fbc4 	bl	80005f8 <__aeabi_dmul>
 8007e70:	4b88      	ldr	r3, [pc, #544]	; (8008094 <_dtoa_r+0x654>)
 8007e72:	2200      	movs	r2, #0
 8007e74:	f7f8 fa0a 	bl	800028c <__adddf3>
 8007e78:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8007e7c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007e80:	9303      	str	r3, [sp, #12]
 8007e82:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d15c      	bne.n	8007f42 <_dtoa_r+0x502>
 8007e88:	4b83      	ldr	r3, [pc, #524]	; (8008098 <_dtoa_r+0x658>)
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	4630      	mov	r0, r6
 8007e8e:	4639      	mov	r1, r7
 8007e90:	f7f8 f9fa 	bl	8000288 <__aeabi_dsub>
 8007e94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007e98:	4606      	mov	r6, r0
 8007e9a:	460f      	mov	r7, r1
 8007e9c:	f7f8 fe3c 	bl	8000b18 <__aeabi_dcmpgt>
 8007ea0:	2800      	cmp	r0, #0
 8007ea2:	f040 8296 	bne.w	80083d2 <_dtoa_r+0x992>
 8007ea6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8007eaa:	4630      	mov	r0, r6
 8007eac:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007eb0:	4639      	mov	r1, r7
 8007eb2:	f7f8 fe13 	bl	8000adc <__aeabi_dcmplt>
 8007eb6:	2800      	cmp	r0, #0
 8007eb8:	f040 8288 	bne.w	80083cc <_dtoa_r+0x98c>
 8007ebc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007ec0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007ec4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	f2c0 8158 	blt.w	800817c <_dtoa_r+0x73c>
 8007ecc:	f1ba 0f0e 	cmp.w	sl, #14
 8007ed0:	f300 8154 	bgt.w	800817c <_dtoa_r+0x73c>
 8007ed4:	4b6b      	ldr	r3, [pc, #428]	; (8008084 <_dtoa_r+0x644>)
 8007ed6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007eda:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007ede:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	f280 80e3 	bge.w	80080ac <_dtoa_r+0x66c>
 8007ee6:	9b01      	ldr	r3, [sp, #4]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	f300 80df 	bgt.w	80080ac <_dtoa_r+0x66c>
 8007eee:	f040 826d 	bne.w	80083cc <_dtoa_r+0x98c>
 8007ef2:	4b69      	ldr	r3, [pc, #420]	; (8008098 <_dtoa_r+0x658>)
 8007ef4:	2200      	movs	r2, #0
 8007ef6:	4640      	mov	r0, r8
 8007ef8:	4649      	mov	r1, r9
 8007efa:	f7f8 fb7d 	bl	80005f8 <__aeabi_dmul>
 8007efe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007f02:	f7f8 fdff 	bl	8000b04 <__aeabi_dcmpge>
 8007f06:	9e01      	ldr	r6, [sp, #4]
 8007f08:	4637      	mov	r7, r6
 8007f0a:	2800      	cmp	r0, #0
 8007f0c:	f040 8243 	bne.w	8008396 <_dtoa_r+0x956>
 8007f10:	9d00      	ldr	r5, [sp, #0]
 8007f12:	2331      	movs	r3, #49	; 0x31
 8007f14:	f805 3b01 	strb.w	r3, [r5], #1
 8007f18:	f10a 0a01 	add.w	sl, sl, #1
 8007f1c:	e23f      	b.n	800839e <_dtoa_r+0x95e>
 8007f1e:	07f2      	lsls	r2, r6, #31
 8007f20:	d505      	bpl.n	8007f2e <_dtoa_r+0x4ee>
 8007f22:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f26:	f7f8 fb67 	bl	80005f8 <__aeabi_dmul>
 8007f2a:	3501      	adds	r5, #1
 8007f2c:	2301      	movs	r3, #1
 8007f2e:	1076      	asrs	r6, r6, #1
 8007f30:	3708      	adds	r7, #8
 8007f32:	e76c      	b.n	8007e0e <_dtoa_r+0x3ce>
 8007f34:	2502      	movs	r5, #2
 8007f36:	e76f      	b.n	8007e18 <_dtoa_r+0x3d8>
 8007f38:	9b01      	ldr	r3, [sp, #4]
 8007f3a:	f8cd a01c 	str.w	sl, [sp, #28]
 8007f3e:	930c      	str	r3, [sp, #48]	; 0x30
 8007f40:	e78d      	b.n	8007e5e <_dtoa_r+0x41e>
 8007f42:	9900      	ldr	r1, [sp, #0]
 8007f44:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007f46:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007f48:	4b4e      	ldr	r3, [pc, #312]	; (8008084 <_dtoa_r+0x644>)
 8007f4a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007f4e:	4401      	add	r1, r0
 8007f50:	9102      	str	r1, [sp, #8]
 8007f52:	9908      	ldr	r1, [sp, #32]
 8007f54:	eeb0 8a47 	vmov.f32	s16, s14
 8007f58:	eef0 8a67 	vmov.f32	s17, s15
 8007f5c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007f60:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007f64:	2900      	cmp	r1, #0
 8007f66:	d045      	beq.n	8007ff4 <_dtoa_r+0x5b4>
 8007f68:	494c      	ldr	r1, [pc, #304]	; (800809c <_dtoa_r+0x65c>)
 8007f6a:	2000      	movs	r0, #0
 8007f6c:	f7f8 fc6e 	bl	800084c <__aeabi_ddiv>
 8007f70:	ec53 2b18 	vmov	r2, r3, d8
 8007f74:	f7f8 f988 	bl	8000288 <__aeabi_dsub>
 8007f78:	9d00      	ldr	r5, [sp, #0]
 8007f7a:	ec41 0b18 	vmov	d8, r0, r1
 8007f7e:	4639      	mov	r1, r7
 8007f80:	4630      	mov	r0, r6
 8007f82:	f7f8 fde9 	bl	8000b58 <__aeabi_d2iz>
 8007f86:	900c      	str	r0, [sp, #48]	; 0x30
 8007f88:	f7f8 facc 	bl	8000524 <__aeabi_i2d>
 8007f8c:	4602      	mov	r2, r0
 8007f8e:	460b      	mov	r3, r1
 8007f90:	4630      	mov	r0, r6
 8007f92:	4639      	mov	r1, r7
 8007f94:	f7f8 f978 	bl	8000288 <__aeabi_dsub>
 8007f98:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007f9a:	3330      	adds	r3, #48	; 0x30
 8007f9c:	f805 3b01 	strb.w	r3, [r5], #1
 8007fa0:	ec53 2b18 	vmov	r2, r3, d8
 8007fa4:	4606      	mov	r6, r0
 8007fa6:	460f      	mov	r7, r1
 8007fa8:	f7f8 fd98 	bl	8000adc <__aeabi_dcmplt>
 8007fac:	2800      	cmp	r0, #0
 8007fae:	d165      	bne.n	800807c <_dtoa_r+0x63c>
 8007fb0:	4632      	mov	r2, r6
 8007fb2:	463b      	mov	r3, r7
 8007fb4:	4935      	ldr	r1, [pc, #212]	; (800808c <_dtoa_r+0x64c>)
 8007fb6:	2000      	movs	r0, #0
 8007fb8:	f7f8 f966 	bl	8000288 <__aeabi_dsub>
 8007fbc:	ec53 2b18 	vmov	r2, r3, d8
 8007fc0:	f7f8 fd8c 	bl	8000adc <__aeabi_dcmplt>
 8007fc4:	2800      	cmp	r0, #0
 8007fc6:	f040 80b9 	bne.w	800813c <_dtoa_r+0x6fc>
 8007fca:	9b02      	ldr	r3, [sp, #8]
 8007fcc:	429d      	cmp	r5, r3
 8007fce:	f43f af75 	beq.w	8007ebc <_dtoa_r+0x47c>
 8007fd2:	4b2f      	ldr	r3, [pc, #188]	; (8008090 <_dtoa_r+0x650>)
 8007fd4:	ec51 0b18 	vmov	r0, r1, d8
 8007fd8:	2200      	movs	r2, #0
 8007fda:	f7f8 fb0d 	bl	80005f8 <__aeabi_dmul>
 8007fde:	4b2c      	ldr	r3, [pc, #176]	; (8008090 <_dtoa_r+0x650>)
 8007fe0:	ec41 0b18 	vmov	d8, r0, r1
 8007fe4:	2200      	movs	r2, #0
 8007fe6:	4630      	mov	r0, r6
 8007fe8:	4639      	mov	r1, r7
 8007fea:	f7f8 fb05 	bl	80005f8 <__aeabi_dmul>
 8007fee:	4606      	mov	r6, r0
 8007ff0:	460f      	mov	r7, r1
 8007ff2:	e7c4      	b.n	8007f7e <_dtoa_r+0x53e>
 8007ff4:	ec51 0b17 	vmov	r0, r1, d7
 8007ff8:	f7f8 fafe 	bl	80005f8 <__aeabi_dmul>
 8007ffc:	9b02      	ldr	r3, [sp, #8]
 8007ffe:	9d00      	ldr	r5, [sp, #0]
 8008000:	930c      	str	r3, [sp, #48]	; 0x30
 8008002:	ec41 0b18 	vmov	d8, r0, r1
 8008006:	4639      	mov	r1, r7
 8008008:	4630      	mov	r0, r6
 800800a:	f7f8 fda5 	bl	8000b58 <__aeabi_d2iz>
 800800e:	9011      	str	r0, [sp, #68]	; 0x44
 8008010:	f7f8 fa88 	bl	8000524 <__aeabi_i2d>
 8008014:	4602      	mov	r2, r0
 8008016:	460b      	mov	r3, r1
 8008018:	4630      	mov	r0, r6
 800801a:	4639      	mov	r1, r7
 800801c:	f7f8 f934 	bl	8000288 <__aeabi_dsub>
 8008020:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008022:	3330      	adds	r3, #48	; 0x30
 8008024:	f805 3b01 	strb.w	r3, [r5], #1
 8008028:	9b02      	ldr	r3, [sp, #8]
 800802a:	429d      	cmp	r5, r3
 800802c:	4606      	mov	r6, r0
 800802e:	460f      	mov	r7, r1
 8008030:	f04f 0200 	mov.w	r2, #0
 8008034:	d134      	bne.n	80080a0 <_dtoa_r+0x660>
 8008036:	4b19      	ldr	r3, [pc, #100]	; (800809c <_dtoa_r+0x65c>)
 8008038:	ec51 0b18 	vmov	r0, r1, d8
 800803c:	f7f8 f926 	bl	800028c <__adddf3>
 8008040:	4602      	mov	r2, r0
 8008042:	460b      	mov	r3, r1
 8008044:	4630      	mov	r0, r6
 8008046:	4639      	mov	r1, r7
 8008048:	f7f8 fd66 	bl	8000b18 <__aeabi_dcmpgt>
 800804c:	2800      	cmp	r0, #0
 800804e:	d175      	bne.n	800813c <_dtoa_r+0x6fc>
 8008050:	ec53 2b18 	vmov	r2, r3, d8
 8008054:	4911      	ldr	r1, [pc, #68]	; (800809c <_dtoa_r+0x65c>)
 8008056:	2000      	movs	r0, #0
 8008058:	f7f8 f916 	bl	8000288 <__aeabi_dsub>
 800805c:	4602      	mov	r2, r0
 800805e:	460b      	mov	r3, r1
 8008060:	4630      	mov	r0, r6
 8008062:	4639      	mov	r1, r7
 8008064:	f7f8 fd3a 	bl	8000adc <__aeabi_dcmplt>
 8008068:	2800      	cmp	r0, #0
 800806a:	f43f af27 	beq.w	8007ebc <_dtoa_r+0x47c>
 800806e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008070:	1e6b      	subs	r3, r5, #1
 8008072:	930c      	str	r3, [sp, #48]	; 0x30
 8008074:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008078:	2b30      	cmp	r3, #48	; 0x30
 800807a:	d0f8      	beq.n	800806e <_dtoa_r+0x62e>
 800807c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8008080:	e04a      	b.n	8008118 <_dtoa_r+0x6d8>
 8008082:	bf00      	nop
 8008084:	0800d3c0 	.word	0x0800d3c0
 8008088:	0800d398 	.word	0x0800d398
 800808c:	3ff00000 	.word	0x3ff00000
 8008090:	40240000 	.word	0x40240000
 8008094:	401c0000 	.word	0x401c0000
 8008098:	40140000 	.word	0x40140000
 800809c:	3fe00000 	.word	0x3fe00000
 80080a0:	4baf      	ldr	r3, [pc, #700]	; (8008360 <_dtoa_r+0x920>)
 80080a2:	f7f8 faa9 	bl	80005f8 <__aeabi_dmul>
 80080a6:	4606      	mov	r6, r0
 80080a8:	460f      	mov	r7, r1
 80080aa:	e7ac      	b.n	8008006 <_dtoa_r+0x5c6>
 80080ac:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80080b0:	9d00      	ldr	r5, [sp, #0]
 80080b2:	4642      	mov	r2, r8
 80080b4:	464b      	mov	r3, r9
 80080b6:	4630      	mov	r0, r6
 80080b8:	4639      	mov	r1, r7
 80080ba:	f7f8 fbc7 	bl	800084c <__aeabi_ddiv>
 80080be:	f7f8 fd4b 	bl	8000b58 <__aeabi_d2iz>
 80080c2:	9002      	str	r0, [sp, #8]
 80080c4:	f7f8 fa2e 	bl	8000524 <__aeabi_i2d>
 80080c8:	4642      	mov	r2, r8
 80080ca:	464b      	mov	r3, r9
 80080cc:	f7f8 fa94 	bl	80005f8 <__aeabi_dmul>
 80080d0:	4602      	mov	r2, r0
 80080d2:	460b      	mov	r3, r1
 80080d4:	4630      	mov	r0, r6
 80080d6:	4639      	mov	r1, r7
 80080d8:	f7f8 f8d6 	bl	8000288 <__aeabi_dsub>
 80080dc:	9e02      	ldr	r6, [sp, #8]
 80080de:	9f01      	ldr	r7, [sp, #4]
 80080e0:	3630      	adds	r6, #48	; 0x30
 80080e2:	f805 6b01 	strb.w	r6, [r5], #1
 80080e6:	9e00      	ldr	r6, [sp, #0]
 80080e8:	1bae      	subs	r6, r5, r6
 80080ea:	42b7      	cmp	r7, r6
 80080ec:	4602      	mov	r2, r0
 80080ee:	460b      	mov	r3, r1
 80080f0:	d137      	bne.n	8008162 <_dtoa_r+0x722>
 80080f2:	f7f8 f8cb 	bl	800028c <__adddf3>
 80080f6:	4642      	mov	r2, r8
 80080f8:	464b      	mov	r3, r9
 80080fa:	4606      	mov	r6, r0
 80080fc:	460f      	mov	r7, r1
 80080fe:	f7f8 fd0b 	bl	8000b18 <__aeabi_dcmpgt>
 8008102:	b9c8      	cbnz	r0, 8008138 <_dtoa_r+0x6f8>
 8008104:	4642      	mov	r2, r8
 8008106:	464b      	mov	r3, r9
 8008108:	4630      	mov	r0, r6
 800810a:	4639      	mov	r1, r7
 800810c:	f7f8 fcdc 	bl	8000ac8 <__aeabi_dcmpeq>
 8008110:	b110      	cbz	r0, 8008118 <_dtoa_r+0x6d8>
 8008112:	9b02      	ldr	r3, [sp, #8]
 8008114:	07d9      	lsls	r1, r3, #31
 8008116:	d40f      	bmi.n	8008138 <_dtoa_r+0x6f8>
 8008118:	4620      	mov	r0, r4
 800811a:	4659      	mov	r1, fp
 800811c:	f000 fb08 	bl	8008730 <_Bfree>
 8008120:	2300      	movs	r3, #0
 8008122:	702b      	strb	r3, [r5, #0]
 8008124:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008126:	f10a 0001 	add.w	r0, sl, #1
 800812a:	6018      	str	r0, [r3, #0]
 800812c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800812e:	2b00      	cmp	r3, #0
 8008130:	f43f acd8 	beq.w	8007ae4 <_dtoa_r+0xa4>
 8008134:	601d      	str	r5, [r3, #0]
 8008136:	e4d5      	b.n	8007ae4 <_dtoa_r+0xa4>
 8008138:	f8cd a01c 	str.w	sl, [sp, #28]
 800813c:	462b      	mov	r3, r5
 800813e:	461d      	mov	r5, r3
 8008140:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008144:	2a39      	cmp	r2, #57	; 0x39
 8008146:	d108      	bne.n	800815a <_dtoa_r+0x71a>
 8008148:	9a00      	ldr	r2, [sp, #0]
 800814a:	429a      	cmp	r2, r3
 800814c:	d1f7      	bne.n	800813e <_dtoa_r+0x6fe>
 800814e:	9a07      	ldr	r2, [sp, #28]
 8008150:	9900      	ldr	r1, [sp, #0]
 8008152:	3201      	adds	r2, #1
 8008154:	9207      	str	r2, [sp, #28]
 8008156:	2230      	movs	r2, #48	; 0x30
 8008158:	700a      	strb	r2, [r1, #0]
 800815a:	781a      	ldrb	r2, [r3, #0]
 800815c:	3201      	adds	r2, #1
 800815e:	701a      	strb	r2, [r3, #0]
 8008160:	e78c      	b.n	800807c <_dtoa_r+0x63c>
 8008162:	4b7f      	ldr	r3, [pc, #508]	; (8008360 <_dtoa_r+0x920>)
 8008164:	2200      	movs	r2, #0
 8008166:	f7f8 fa47 	bl	80005f8 <__aeabi_dmul>
 800816a:	2200      	movs	r2, #0
 800816c:	2300      	movs	r3, #0
 800816e:	4606      	mov	r6, r0
 8008170:	460f      	mov	r7, r1
 8008172:	f7f8 fca9 	bl	8000ac8 <__aeabi_dcmpeq>
 8008176:	2800      	cmp	r0, #0
 8008178:	d09b      	beq.n	80080b2 <_dtoa_r+0x672>
 800817a:	e7cd      	b.n	8008118 <_dtoa_r+0x6d8>
 800817c:	9a08      	ldr	r2, [sp, #32]
 800817e:	2a00      	cmp	r2, #0
 8008180:	f000 80c4 	beq.w	800830c <_dtoa_r+0x8cc>
 8008184:	9a05      	ldr	r2, [sp, #20]
 8008186:	2a01      	cmp	r2, #1
 8008188:	f300 80a8 	bgt.w	80082dc <_dtoa_r+0x89c>
 800818c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800818e:	2a00      	cmp	r2, #0
 8008190:	f000 80a0 	beq.w	80082d4 <_dtoa_r+0x894>
 8008194:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008198:	9e06      	ldr	r6, [sp, #24]
 800819a:	4645      	mov	r5, r8
 800819c:	9a04      	ldr	r2, [sp, #16]
 800819e:	2101      	movs	r1, #1
 80081a0:	441a      	add	r2, r3
 80081a2:	4620      	mov	r0, r4
 80081a4:	4498      	add	r8, r3
 80081a6:	9204      	str	r2, [sp, #16]
 80081a8:	f000 fb7e 	bl	80088a8 <__i2b>
 80081ac:	4607      	mov	r7, r0
 80081ae:	2d00      	cmp	r5, #0
 80081b0:	dd0b      	ble.n	80081ca <_dtoa_r+0x78a>
 80081b2:	9b04      	ldr	r3, [sp, #16]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	dd08      	ble.n	80081ca <_dtoa_r+0x78a>
 80081b8:	42ab      	cmp	r3, r5
 80081ba:	9a04      	ldr	r2, [sp, #16]
 80081bc:	bfa8      	it	ge
 80081be:	462b      	movge	r3, r5
 80081c0:	eba8 0803 	sub.w	r8, r8, r3
 80081c4:	1aed      	subs	r5, r5, r3
 80081c6:	1ad3      	subs	r3, r2, r3
 80081c8:	9304      	str	r3, [sp, #16]
 80081ca:	9b06      	ldr	r3, [sp, #24]
 80081cc:	b1fb      	cbz	r3, 800820e <_dtoa_r+0x7ce>
 80081ce:	9b08      	ldr	r3, [sp, #32]
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	f000 809f 	beq.w	8008314 <_dtoa_r+0x8d4>
 80081d6:	2e00      	cmp	r6, #0
 80081d8:	dd11      	ble.n	80081fe <_dtoa_r+0x7be>
 80081da:	4639      	mov	r1, r7
 80081dc:	4632      	mov	r2, r6
 80081de:	4620      	mov	r0, r4
 80081e0:	f000 fc1e 	bl	8008a20 <__pow5mult>
 80081e4:	465a      	mov	r2, fp
 80081e6:	4601      	mov	r1, r0
 80081e8:	4607      	mov	r7, r0
 80081ea:	4620      	mov	r0, r4
 80081ec:	f000 fb72 	bl	80088d4 <__multiply>
 80081f0:	4659      	mov	r1, fp
 80081f2:	9007      	str	r0, [sp, #28]
 80081f4:	4620      	mov	r0, r4
 80081f6:	f000 fa9b 	bl	8008730 <_Bfree>
 80081fa:	9b07      	ldr	r3, [sp, #28]
 80081fc:	469b      	mov	fp, r3
 80081fe:	9b06      	ldr	r3, [sp, #24]
 8008200:	1b9a      	subs	r2, r3, r6
 8008202:	d004      	beq.n	800820e <_dtoa_r+0x7ce>
 8008204:	4659      	mov	r1, fp
 8008206:	4620      	mov	r0, r4
 8008208:	f000 fc0a 	bl	8008a20 <__pow5mult>
 800820c:	4683      	mov	fp, r0
 800820e:	2101      	movs	r1, #1
 8008210:	4620      	mov	r0, r4
 8008212:	f000 fb49 	bl	80088a8 <__i2b>
 8008216:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008218:	2b00      	cmp	r3, #0
 800821a:	4606      	mov	r6, r0
 800821c:	dd7c      	ble.n	8008318 <_dtoa_r+0x8d8>
 800821e:	461a      	mov	r2, r3
 8008220:	4601      	mov	r1, r0
 8008222:	4620      	mov	r0, r4
 8008224:	f000 fbfc 	bl	8008a20 <__pow5mult>
 8008228:	9b05      	ldr	r3, [sp, #20]
 800822a:	2b01      	cmp	r3, #1
 800822c:	4606      	mov	r6, r0
 800822e:	dd76      	ble.n	800831e <_dtoa_r+0x8de>
 8008230:	2300      	movs	r3, #0
 8008232:	9306      	str	r3, [sp, #24]
 8008234:	6933      	ldr	r3, [r6, #16]
 8008236:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800823a:	6918      	ldr	r0, [r3, #16]
 800823c:	f000 fae4 	bl	8008808 <__hi0bits>
 8008240:	f1c0 0020 	rsb	r0, r0, #32
 8008244:	9b04      	ldr	r3, [sp, #16]
 8008246:	4418      	add	r0, r3
 8008248:	f010 001f 	ands.w	r0, r0, #31
 800824c:	f000 8086 	beq.w	800835c <_dtoa_r+0x91c>
 8008250:	f1c0 0320 	rsb	r3, r0, #32
 8008254:	2b04      	cmp	r3, #4
 8008256:	dd7f      	ble.n	8008358 <_dtoa_r+0x918>
 8008258:	f1c0 001c 	rsb	r0, r0, #28
 800825c:	9b04      	ldr	r3, [sp, #16]
 800825e:	4403      	add	r3, r0
 8008260:	4480      	add	r8, r0
 8008262:	4405      	add	r5, r0
 8008264:	9304      	str	r3, [sp, #16]
 8008266:	f1b8 0f00 	cmp.w	r8, #0
 800826a:	dd05      	ble.n	8008278 <_dtoa_r+0x838>
 800826c:	4659      	mov	r1, fp
 800826e:	4642      	mov	r2, r8
 8008270:	4620      	mov	r0, r4
 8008272:	f000 fc2f 	bl	8008ad4 <__lshift>
 8008276:	4683      	mov	fp, r0
 8008278:	9b04      	ldr	r3, [sp, #16]
 800827a:	2b00      	cmp	r3, #0
 800827c:	dd05      	ble.n	800828a <_dtoa_r+0x84a>
 800827e:	4631      	mov	r1, r6
 8008280:	461a      	mov	r2, r3
 8008282:	4620      	mov	r0, r4
 8008284:	f000 fc26 	bl	8008ad4 <__lshift>
 8008288:	4606      	mov	r6, r0
 800828a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800828c:	2b00      	cmp	r3, #0
 800828e:	d069      	beq.n	8008364 <_dtoa_r+0x924>
 8008290:	4631      	mov	r1, r6
 8008292:	4658      	mov	r0, fp
 8008294:	f000 fc8a 	bl	8008bac <__mcmp>
 8008298:	2800      	cmp	r0, #0
 800829a:	da63      	bge.n	8008364 <_dtoa_r+0x924>
 800829c:	2300      	movs	r3, #0
 800829e:	4659      	mov	r1, fp
 80082a0:	220a      	movs	r2, #10
 80082a2:	4620      	mov	r0, r4
 80082a4:	f000 fa66 	bl	8008774 <__multadd>
 80082a8:	9b08      	ldr	r3, [sp, #32]
 80082aa:	f10a 3aff 	add.w	sl, sl, #4294967295
 80082ae:	4683      	mov	fp, r0
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	f000 818f 	beq.w	80085d4 <_dtoa_r+0xb94>
 80082b6:	4639      	mov	r1, r7
 80082b8:	2300      	movs	r3, #0
 80082ba:	220a      	movs	r2, #10
 80082bc:	4620      	mov	r0, r4
 80082be:	f000 fa59 	bl	8008774 <__multadd>
 80082c2:	f1b9 0f00 	cmp.w	r9, #0
 80082c6:	4607      	mov	r7, r0
 80082c8:	f300 808e 	bgt.w	80083e8 <_dtoa_r+0x9a8>
 80082cc:	9b05      	ldr	r3, [sp, #20]
 80082ce:	2b02      	cmp	r3, #2
 80082d0:	dc50      	bgt.n	8008374 <_dtoa_r+0x934>
 80082d2:	e089      	b.n	80083e8 <_dtoa_r+0x9a8>
 80082d4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80082d6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80082da:	e75d      	b.n	8008198 <_dtoa_r+0x758>
 80082dc:	9b01      	ldr	r3, [sp, #4]
 80082de:	1e5e      	subs	r6, r3, #1
 80082e0:	9b06      	ldr	r3, [sp, #24]
 80082e2:	42b3      	cmp	r3, r6
 80082e4:	bfbf      	itttt	lt
 80082e6:	9b06      	ldrlt	r3, [sp, #24]
 80082e8:	9606      	strlt	r6, [sp, #24]
 80082ea:	1af2      	sublt	r2, r6, r3
 80082ec:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 80082ee:	bfb6      	itet	lt
 80082f0:	189b      	addlt	r3, r3, r2
 80082f2:	1b9e      	subge	r6, r3, r6
 80082f4:	930d      	strlt	r3, [sp, #52]	; 0x34
 80082f6:	9b01      	ldr	r3, [sp, #4]
 80082f8:	bfb8      	it	lt
 80082fa:	2600      	movlt	r6, #0
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	bfb5      	itete	lt
 8008300:	eba8 0503 	sublt.w	r5, r8, r3
 8008304:	9b01      	ldrge	r3, [sp, #4]
 8008306:	2300      	movlt	r3, #0
 8008308:	4645      	movge	r5, r8
 800830a:	e747      	b.n	800819c <_dtoa_r+0x75c>
 800830c:	9e06      	ldr	r6, [sp, #24]
 800830e:	9f08      	ldr	r7, [sp, #32]
 8008310:	4645      	mov	r5, r8
 8008312:	e74c      	b.n	80081ae <_dtoa_r+0x76e>
 8008314:	9a06      	ldr	r2, [sp, #24]
 8008316:	e775      	b.n	8008204 <_dtoa_r+0x7c4>
 8008318:	9b05      	ldr	r3, [sp, #20]
 800831a:	2b01      	cmp	r3, #1
 800831c:	dc18      	bgt.n	8008350 <_dtoa_r+0x910>
 800831e:	9b02      	ldr	r3, [sp, #8]
 8008320:	b9b3      	cbnz	r3, 8008350 <_dtoa_r+0x910>
 8008322:	9b03      	ldr	r3, [sp, #12]
 8008324:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008328:	b9a3      	cbnz	r3, 8008354 <_dtoa_r+0x914>
 800832a:	9b03      	ldr	r3, [sp, #12]
 800832c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008330:	0d1b      	lsrs	r3, r3, #20
 8008332:	051b      	lsls	r3, r3, #20
 8008334:	b12b      	cbz	r3, 8008342 <_dtoa_r+0x902>
 8008336:	9b04      	ldr	r3, [sp, #16]
 8008338:	3301      	adds	r3, #1
 800833a:	9304      	str	r3, [sp, #16]
 800833c:	f108 0801 	add.w	r8, r8, #1
 8008340:	2301      	movs	r3, #1
 8008342:	9306      	str	r3, [sp, #24]
 8008344:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008346:	2b00      	cmp	r3, #0
 8008348:	f47f af74 	bne.w	8008234 <_dtoa_r+0x7f4>
 800834c:	2001      	movs	r0, #1
 800834e:	e779      	b.n	8008244 <_dtoa_r+0x804>
 8008350:	2300      	movs	r3, #0
 8008352:	e7f6      	b.n	8008342 <_dtoa_r+0x902>
 8008354:	9b02      	ldr	r3, [sp, #8]
 8008356:	e7f4      	b.n	8008342 <_dtoa_r+0x902>
 8008358:	d085      	beq.n	8008266 <_dtoa_r+0x826>
 800835a:	4618      	mov	r0, r3
 800835c:	301c      	adds	r0, #28
 800835e:	e77d      	b.n	800825c <_dtoa_r+0x81c>
 8008360:	40240000 	.word	0x40240000
 8008364:	9b01      	ldr	r3, [sp, #4]
 8008366:	2b00      	cmp	r3, #0
 8008368:	dc38      	bgt.n	80083dc <_dtoa_r+0x99c>
 800836a:	9b05      	ldr	r3, [sp, #20]
 800836c:	2b02      	cmp	r3, #2
 800836e:	dd35      	ble.n	80083dc <_dtoa_r+0x99c>
 8008370:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8008374:	f1b9 0f00 	cmp.w	r9, #0
 8008378:	d10d      	bne.n	8008396 <_dtoa_r+0x956>
 800837a:	4631      	mov	r1, r6
 800837c:	464b      	mov	r3, r9
 800837e:	2205      	movs	r2, #5
 8008380:	4620      	mov	r0, r4
 8008382:	f000 f9f7 	bl	8008774 <__multadd>
 8008386:	4601      	mov	r1, r0
 8008388:	4606      	mov	r6, r0
 800838a:	4658      	mov	r0, fp
 800838c:	f000 fc0e 	bl	8008bac <__mcmp>
 8008390:	2800      	cmp	r0, #0
 8008392:	f73f adbd 	bgt.w	8007f10 <_dtoa_r+0x4d0>
 8008396:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008398:	9d00      	ldr	r5, [sp, #0]
 800839a:	ea6f 0a03 	mvn.w	sl, r3
 800839e:	f04f 0800 	mov.w	r8, #0
 80083a2:	4631      	mov	r1, r6
 80083a4:	4620      	mov	r0, r4
 80083a6:	f000 f9c3 	bl	8008730 <_Bfree>
 80083aa:	2f00      	cmp	r7, #0
 80083ac:	f43f aeb4 	beq.w	8008118 <_dtoa_r+0x6d8>
 80083b0:	f1b8 0f00 	cmp.w	r8, #0
 80083b4:	d005      	beq.n	80083c2 <_dtoa_r+0x982>
 80083b6:	45b8      	cmp	r8, r7
 80083b8:	d003      	beq.n	80083c2 <_dtoa_r+0x982>
 80083ba:	4641      	mov	r1, r8
 80083bc:	4620      	mov	r0, r4
 80083be:	f000 f9b7 	bl	8008730 <_Bfree>
 80083c2:	4639      	mov	r1, r7
 80083c4:	4620      	mov	r0, r4
 80083c6:	f000 f9b3 	bl	8008730 <_Bfree>
 80083ca:	e6a5      	b.n	8008118 <_dtoa_r+0x6d8>
 80083cc:	2600      	movs	r6, #0
 80083ce:	4637      	mov	r7, r6
 80083d0:	e7e1      	b.n	8008396 <_dtoa_r+0x956>
 80083d2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80083d4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80083d8:	4637      	mov	r7, r6
 80083da:	e599      	b.n	8007f10 <_dtoa_r+0x4d0>
 80083dc:	9b08      	ldr	r3, [sp, #32]
 80083de:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	f000 80fd 	beq.w	80085e2 <_dtoa_r+0xba2>
 80083e8:	2d00      	cmp	r5, #0
 80083ea:	dd05      	ble.n	80083f8 <_dtoa_r+0x9b8>
 80083ec:	4639      	mov	r1, r7
 80083ee:	462a      	mov	r2, r5
 80083f0:	4620      	mov	r0, r4
 80083f2:	f000 fb6f 	bl	8008ad4 <__lshift>
 80083f6:	4607      	mov	r7, r0
 80083f8:	9b06      	ldr	r3, [sp, #24]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d05c      	beq.n	80084b8 <_dtoa_r+0xa78>
 80083fe:	6879      	ldr	r1, [r7, #4]
 8008400:	4620      	mov	r0, r4
 8008402:	f000 f955 	bl	80086b0 <_Balloc>
 8008406:	4605      	mov	r5, r0
 8008408:	b928      	cbnz	r0, 8008416 <_dtoa_r+0x9d6>
 800840a:	4b80      	ldr	r3, [pc, #512]	; (800860c <_dtoa_r+0xbcc>)
 800840c:	4602      	mov	r2, r0
 800840e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008412:	f7ff bb2e 	b.w	8007a72 <_dtoa_r+0x32>
 8008416:	693a      	ldr	r2, [r7, #16]
 8008418:	3202      	adds	r2, #2
 800841a:	0092      	lsls	r2, r2, #2
 800841c:	f107 010c 	add.w	r1, r7, #12
 8008420:	300c      	adds	r0, #12
 8008422:	f7fe fcab 	bl	8006d7c <memcpy>
 8008426:	2201      	movs	r2, #1
 8008428:	4629      	mov	r1, r5
 800842a:	4620      	mov	r0, r4
 800842c:	f000 fb52 	bl	8008ad4 <__lshift>
 8008430:	9b00      	ldr	r3, [sp, #0]
 8008432:	3301      	adds	r3, #1
 8008434:	9301      	str	r3, [sp, #4]
 8008436:	9b00      	ldr	r3, [sp, #0]
 8008438:	444b      	add	r3, r9
 800843a:	9307      	str	r3, [sp, #28]
 800843c:	9b02      	ldr	r3, [sp, #8]
 800843e:	f003 0301 	and.w	r3, r3, #1
 8008442:	46b8      	mov	r8, r7
 8008444:	9306      	str	r3, [sp, #24]
 8008446:	4607      	mov	r7, r0
 8008448:	9b01      	ldr	r3, [sp, #4]
 800844a:	4631      	mov	r1, r6
 800844c:	3b01      	subs	r3, #1
 800844e:	4658      	mov	r0, fp
 8008450:	9302      	str	r3, [sp, #8]
 8008452:	f7ff fa67 	bl	8007924 <quorem>
 8008456:	4603      	mov	r3, r0
 8008458:	3330      	adds	r3, #48	; 0x30
 800845a:	9004      	str	r0, [sp, #16]
 800845c:	4641      	mov	r1, r8
 800845e:	4658      	mov	r0, fp
 8008460:	9308      	str	r3, [sp, #32]
 8008462:	f000 fba3 	bl	8008bac <__mcmp>
 8008466:	463a      	mov	r2, r7
 8008468:	4681      	mov	r9, r0
 800846a:	4631      	mov	r1, r6
 800846c:	4620      	mov	r0, r4
 800846e:	f000 fbb9 	bl	8008be4 <__mdiff>
 8008472:	68c2      	ldr	r2, [r0, #12]
 8008474:	9b08      	ldr	r3, [sp, #32]
 8008476:	4605      	mov	r5, r0
 8008478:	bb02      	cbnz	r2, 80084bc <_dtoa_r+0xa7c>
 800847a:	4601      	mov	r1, r0
 800847c:	4658      	mov	r0, fp
 800847e:	f000 fb95 	bl	8008bac <__mcmp>
 8008482:	9b08      	ldr	r3, [sp, #32]
 8008484:	4602      	mov	r2, r0
 8008486:	4629      	mov	r1, r5
 8008488:	4620      	mov	r0, r4
 800848a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800848e:	f000 f94f 	bl	8008730 <_Bfree>
 8008492:	9b05      	ldr	r3, [sp, #20]
 8008494:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008496:	9d01      	ldr	r5, [sp, #4]
 8008498:	ea43 0102 	orr.w	r1, r3, r2
 800849c:	9b06      	ldr	r3, [sp, #24]
 800849e:	430b      	orrs	r3, r1
 80084a0:	9b08      	ldr	r3, [sp, #32]
 80084a2:	d10d      	bne.n	80084c0 <_dtoa_r+0xa80>
 80084a4:	2b39      	cmp	r3, #57	; 0x39
 80084a6:	d029      	beq.n	80084fc <_dtoa_r+0xabc>
 80084a8:	f1b9 0f00 	cmp.w	r9, #0
 80084ac:	dd01      	ble.n	80084b2 <_dtoa_r+0xa72>
 80084ae:	9b04      	ldr	r3, [sp, #16]
 80084b0:	3331      	adds	r3, #49	; 0x31
 80084b2:	9a02      	ldr	r2, [sp, #8]
 80084b4:	7013      	strb	r3, [r2, #0]
 80084b6:	e774      	b.n	80083a2 <_dtoa_r+0x962>
 80084b8:	4638      	mov	r0, r7
 80084ba:	e7b9      	b.n	8008430 <_dtoa_r+0x9f0>
 80084bc:	2201      	movs	r2, #1
 80084be:	e7e2      	b.n	8008486 <_dtoa_r+0xa46>
 80084c0:	f1b9 0f00 	cmp.w	r9, #0
 80084c4:	db06      	blt.n	80084d4 <_dtoa_r+0xa94>
 80084c6:	9905      	ldr	r1, [sp, #20]
 80084c8:	ea41 0909 	orr.w	r9, r1, r9
 80084cc:	9906      	ldr	r1, [sp, #24]
 80084ce:	ea59 0101 	orrs.w	r1, r9, r1
 80084d2:	d120      	bne.n	8008516 <_dtoa_r+0xad6>
 80084d4:	2a00      	cmp	r2, #0
 80084d6:	ddec      	ble.n	80084b2 <_dtoa_r+0xa72>
 80084d8:	4659      	mov	r1, fp
 80084da:	2201      	movs	r2, #1
 80084dc:	4620      	mov	r0, r4
 80084de:	9301      	str	r3, [sp, #4]
 80084e0:	f000 faf8 	bl	8008ad4 <__lshift>
 80084e4:	4631      	mov	r1, r6
 80084e6:	4683      	mov	fp, r0
 80084e8:	f000 fb60 	bl	8008bac <__mcmp>
 80084ec:	2800      	cmp	r0, #0
 80084ee:	9b01      	ldr	r3, [sp, #4]
 80084f0:	dc02      	bgt.n	80084f8 <_dtoa_r+0xab8>
 80084f2:	d1de      	bne.n	80084b2 <_dtoa_r+0xa72>
 80084f4:	07da      	lsls	r2, r3, #31
 80084f6:	d5dc      	bpl.n	80084b2 <_dtoa_r+0xa72>
 80084f8:	2b39      	cmp	r3, #57	; 0x39
 80084fa:	d1d8      	bne.n	80084ae <_dtoa_r+0xa6e>
 80084fc:	9a02      	ldr	r2, [sp, #8]
 80084fe:	2339      	movs	r3, #57	; 0x39
 8008500:	7013      	strb	r3, [r2, #0]
 8008502:	462b      	mov	r3, r5
 8008504:	461d      	mov	r5, r3
 8008506:	3b01      	subs	r3, #1
 8008508:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800850c:	2a39      	cmp	r2, #57	; 0x39
 800850e:	d050      	beq.n	80085b2 <_dtoa_r+0xb72>
 8008510:	3201      	adds	r2, #1
 8008512:	701a      	strb	r2, [r3, #0]
 8008514:	e745      	b.n	80083a2 <_dtoa_r+0x962>
 8008516:	2a00      	cmp	r2, #0
 8008518:	dd03      	ble.n	8008522 <_dtoa_r+0xae2>
 800851a:	2b39      	cmp	r3, #57	; 0x39
 800851c:	d0ee      	beq.n	80084fc <_dtoa_r+0xabc>
 800851e:	3301      	adds	r3, #1
 8008520:	e7c7      	b.n	80084b2 <_dtoa_r+0xa72>
 8008522:	9a01      	ldr	r2, [sp, #4]
 8008524:	9907      	ldr	r1, [sp, #28]
 8008526:	f802 3c01 	strb.w	r3, [r2, #-1]
 800852a:	428a      	cmp	r2, r1
 800852c:	d02a      	beq.n	8008584 <_dtoa_r+0xb44>
 800852e:	4659      	mov	r1, fp
 8008530:	2300      	movs	r3, #0
 8008532:	220a      	movs	r2, #10
 8008534:	4620      	mov	r0, r4
 8008536:	f000 f91d 	bl	8008774 <__multadd>
 800853a:	45b8      	cmp	r8, r7
 800853c:	4683      	mov	fp, r0
 800853e:	f04f 0300 	mov.w	r3, #0
 8008542:	f04f 020a 	mov.w	r2, #10
 8008546:	4641      	mov	r1, r8
 8008548:	4620      	mov	r0, r4
 800854a:	d107      	bne.n	800855c <_dtoa_r+0xb1c>
 800854c:	f000 f912 	bl	8008774 <__multadd>
 8008550:	4680      	mov	r8, r0
 8008552:	4607      	mov	r7, r0
 8008554:	9b01      	ldr	r3, [sp, #4]
 8008556:	3301      	adds	r3, #1
 8008558:	9301      	str	r3, [sp, #4]
 800855a:	e775      	b.n	8008448 <_dtoa_r+0xa08>
 800855c:	f000 f90a 	bl	8008774 <__multadd>
 8008560:	4639      	mov	r1, r7
 8008562:	4680      	mov	r8, r0
 8008564:	2300      	movs	r3, #0
 8008566:	220a      	movs	r2, #10
 8008568:	4620      	mov	r0, r4
 800856a:	f000 f903 	bl	8008774 <__multadd>
 800856e:	4607      	mov	r7, r0
 8008570:	e7f0      	b.n	8008554 <_dtoa_r+0xb14>
 8008572:	f1b9 0f00 	cmp.w	r9, #0
 8008576:	9a00      	ldr	r2, [sp, #0]
 8008578:	bfcc      	ite	gt
 800857a:	464d      	movgt	r5, r9
 800857c:	2501      	movle	r5, #1
 800857e:	4415      	add	r5, r2
 8008580:	f04f 0800 	mov.w	r8, #0
 8008584:	4659      	mov	r1, fp
 8008586:	2201      	movs	r2, #1
 8008588:	4620      	mov	r0, r4
 800858a:	9301      	str	r3, [sp, #4]
 800858c:	f000 faa2 	bl	8008ad4 <__lshift>
 8008590:	4631      	mov	r1, r6
 8008592:	4683      	mov	fp, r0
 8008594:	f000 fb0a 	bl	8008bac <__mcmp>
 8008598:	2800      	cmp	r0, #0
 800859a:	dcb2      	bgt.n	8008502 <_dtoa_r+0xac2>
 800859c:	d102      	bne.n	80085a4 <_dtoa_r+0xb64>
 800859e:	9b01      	ldr	r3, [sp, #4]
 80085a0:	07db      	lsls	r3, r3, #31
 80085a2:	d4ae      	bmi.n	8008502 <_dtoa_r+0xac2>
 80085a4:	462b      	mov	r3, r5
 80085a6:	461d      	mov	r5, r3
 80085a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80085ac:	2a30      	cmp	r2, #48	; 0x30
 80085ae:	d0fa      	beq.n	80085a6 <_dtoa_r+0xb66>
 80085b0:	e6f7      	b.n	80083a2 <_dtoa_r+0x962>
 80085b2:	9a00      	ldr	r2, [sp, #0]
 80085b4:	429a      	cmp	r2, r3
 80085b6:	d1a5      	bne.n	8008504 <_dtoa_r+0xac4>
 80085b8:	f10a 0a01 	add.w	sl, sl, #1
 80085bc:	2331      	movs	r3, #49	; 0x31
 80085be:	e779      	b.n	80084b4 <_dtoa_r+0xa74>
 80085c0:	4b13      	ldr	r3, [pc, #76]	; (8008610 <_dtoa_r+0xbd0>)
 80085c2:	f7ff baaf 	b.w	8007b24 <_dtoa_r+0xe4>
 80085c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	f47f aa86 	bne.w	8007ada <_dtoa_r+0x9a>
 80085ce:	4b11      	ldr	r3, [pc, #68]	; (8008614 <_dtoa_r+0xbd4>)
 80085d0:	f7ff baa8 	b.w	8007b24 <_dtoa_r+0xe4>
 80085d4:	f1b9 0f00 	cmp.w	r9, #0
 80085d8:	dc03      	bgt.n	80085e2 <_dtoa_r+0xba2>
 80085da:	9b05      	ldr	r3, [sp, #20]
 80085dc:	2b02      	cmp	r3, #2
 80085de:	f73f aec9 	bgt.w	8008374 <_dtoa_r+0x934>
 80085e2:	9d00      	ldr	r5, [sp, #0]
 80085e4:	4631      	mov	r1, r6
 80085e6:	4658      	mov	r0, fp
 80085e8:	f7ff f99c 	bl	8007924 <quorem>
 80085ec:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80085f0:	f805 3b01 	strb.w	r3, [r5], #1
 80085f4:	9a00      	ldr	r2, [sp, #0]
 80085f6:	1aaa      	subs	r2, r5, r2
 80085f8:	4591      	cmp	r9, r2
 80085fa:	ddba      	ble.n	8008572 <_dtoa_r+0xb32>
 80085fc:	4659      	mov	r1, fp
 80085fe:	2300      	movs	r3, #0
 8008600:	220a      	movs	r2, #10
 8008602:	4620      	mov	r0, r4
 8008604:	f000 f8b6 	bl	8008774 <__multadd>
 8008608:	4683      	mov	fp, r0
 800860a:	e7eb      	b.n	80085e4 <_dtoa_r+0xba4>
 800860c:	0800d327 	.word	0x0800d327
 8008610:	0800d280 	.word	0x0800d280
 8008614:	0800d2a4 	.word	0x0800d2a4

08008618 <_fstat_r>:
 8008618:	b538      	push	{r3, r4, r5, lr}
 800861a:	4d07      	ldr	r5, [pc, #28]	; (8008638 <_fstat_r+0x20>)
 800861c:	2300      	movs	r3, #0
 800861e:	4604      	mov	r4, r0
 8008620:	4608      	mov	r0, r1
 8008622:	4611      	mov	r1, r2
 8008624:	602b      	str	r3, [r5, #0]
 8008626:	f7f9 f964 	bl	80018f2 <_fstat>
 800862a:	1c43      	adds	r3, r0, #1
 800862c:	d102      	bne.n	8008634 <_fstat_r+0x1c>
 800862e:	682b      	ldr	r3, [r5, #0]
 8008630:	b103      	cbz	r3, 8008634 <_fstat_r+0x1c>
 8008632:	6023      	str	r3, [r4, #0]
 8008634:	bd38      	pop	{r3, r4, r5, pc}
 8008636:	bf00      	nop
 8008638:	2000a444 	.word	0x2000a444

0800863c <_isatty_r>:
 800863c:	b538      	push	{r3, r4, r5, lr}
 800863e:	4d06      	ldr	r5, [pc, #24]	; (8008658 <_isatty_r+0x1c>)
 8008640:	2300      	movs	r3, #0
 8008642:	4604      	mov	r4, r0
 8008644:	4608      	mov	r0, r1
 8008646:	602b      	str	r3, [r5, #0]
 8008648:	f7f9 f963 	bl	8001912 <_isatty>
 800864c:	1c43      	adds	r3, r0, #1
 800864e:	d102      	bne.n	8008656 <_isatty_r+0x1a>
 8008650:	682b      	ldr	r3, [r5, #0]
 8008652:	b103      	cbz	r3, 8008656 <_isatty_r+0x1a>
 8008654:	6023      	str	r3, [r4, #0]
 8008656:	bd38      	pop	{r3, r4, r5, pc}
 8008658:	2000a444 	.word	0x2000a444

0800865c <_localeconv_r>:
 800865c:	4800      	ldr	r0, [pc, #0]	; (8008660 <_localeconv_r+0x4>)
 800865e:	4770      	bx	lr
 8008660:	20000170 	.word	0x20000170

08008664 <_lseek_r>:
 8008664:	b538      	push	{r3, r4, r5, lr}
 8008666:	4d07      	ldr	r5, [pc, #28]	; (8008684 <_lseek_r+0x20>)
 8008668:	4604      	mov	r4, r0
 800866a:	4608      	mov	r0, r1
 800866c:	4611      	mov	r1, r2
 800866e:	2200      	movs	r2, #0
 8008670:	602a      	str	r2, [r5, #0]
 8008672:	461a      	mov	r2, r3
 8008674:	f7f9 f958 	bl	8001928 <_lseek>
 8008678:	1c43      	adds	r3, r0, #1
 800867a:	d102      	bne.n	8008682 <_lseek_r+0x1e>
 800867c:	682b      	ldr	r3, [r5, #0]
 800867e:	b103      	cbz	r3, 8008682 <_lseek_r+0x1e>
 8008680:	6023      	str	r3, [r4, #0]
 8008682:	bd38      	pop	{r3, r4, r5, pc}
 8008684:	2000a444 	.word	0x2000a444

08008688 <malloc>:
 8008688:	4b02      	ldr	r3, [pc, #8]	; (8008694 <malloc+0xc>)
 800868a:	4601      	mov	r1, r0
 800868c:	6818      	ldr	r0, [r3, #0]
 800868e:	f7fe bbdb 	b.w	8006e48 <_malloc_r>
 8008692:	bf00      	nop
 8008694:	2000001c 	.word	0x2000001c

08008698 <__malloc_lock>:
 8008698:	4801      	ldr	r0, [pc, #4]	; (80086a0 <__malloc_lock+0x8>)
 800869a:	f7fe bb08 	b.w	8006cae <__retarget_lock_acquire_recursive>
 800869e:	bf00      	nop
 80086a0:	2000a43c 	.word	0x2000a43c

080086a4 <__malloc_unlock>:
 80086a4:	4801      	ldr	r0, [pc, #4]	; (80086ac <__malloc_unlock+0x8>)
 80086a6:	f7fe bb03 	b.w	8006cb0 <__retarget_lock_release_recursive>
 80086aa:	bf00      	nop
 80086ac:	2000a43c 	.word	0x2000a43c

080086b0 <_Balloc>:
 80086b0:	b570      	push	{r4, r5, r6, lr}
 80086b2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80086b4:	4604      	mov	r4, r0
 80086b6:	460d      	mov	r5, r1
 80086b8:	b976      	cbnz	r6, 80086d8 <_Balloc+0x28>
 80086ba:	2010      	movs	r0, #16
 80086bc:	f7ff ffe4 	bl	8008688 <malloc>
 80086c0:	4602      	mov	r2, r0
 80086c2:	6260      	str	r0, [r4, #36]	; 0x24
 80086c4:	b920      	cbnz	r0, 80086d0 <_Balloc+0x20>
 80086c6:	4b18      	ldr	r3, [pc, #96]	; (8008728 <_Balloc+0x78>)
 80086c8:	4818      	ldr	r0, [pc, #96]	; (800872c <_Balloc+0x7c>)
 80086ca:	2166      	movs	r1, #102	; 0x66
 80086cc:	f001 f992 	bl	80099f4 <__assert_func>
 80086d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80086d4:	6006      	str	r6, [r0, #0]
 80086d6:	60c6      	str	r6, [r0, #12]
 80086d8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80086da:	68f3      	ldr	r3, [r6, #12]
 80086dc:	b183      	cbz	r3, 8008700 <_Balloc+0x50>
 80086de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80086e0:	68db      	ldr	r3, [r3, #12]
 80086e2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80086e6:	b9b8      	cbnz	r0, 8008718 <_Balloc+0x68>
 80086e8:	2101      	movs	r1, #1
 80086ea:	fa01 f605 	lsl.w	r6, r1, r5
 80086ee:	1d72      	adds	r2, r6, #5
 80086f0:	0092      	lsls	r2, r2, #2
 80086f2:	4620      	mov	r0, r4
 80086f4:	f000 fb5a 	bl	8008dac <_calloc_r>
 80086f8:	b160      	cbz	r0, 8008714 <_Balloc+0x64>
 80086fa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80086fe:	e00e      	b.n	800871e <_Balloc+0x6e>
 8008700:	2221      	movs	r2, #33	; 0x21
 8008702:	2104      	movs	r1, #4
 8008704:	4620      	mov	r0, r4
 8008706:	f000 fb51 	bl	8008dac <_calloc_r>
 800870a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800870c:	60f0      	str	r0, [r6, #12]
 800870e:	68db      	ldr	r3, [r3, #12]
 8008710:	2b00      	cmp	r3, #0
 8008712:	d1e4      	bne.n	80086de <_Balloc+0x2e>
 8008714:	2000      	movs	r0, #0
 8008716:	bd70      	pop	{r4, r5, r6, pc}
 8008718:	6802      	ldr	r2, [r0, #0]
 800871a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800871e:	2300      	movs	r3, #0
 8008720:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008724:	e7f7      	b.n	8008716 <_Balloc+0x66>
 8008726:	bf00      	nop
 8008728:	0800d2b1 	.word	0x0800d2b1
 800872c:	0800d338 	.word	0x0800d338

08008730 <_Bfree>:
 8008730:	b570      	push	{r4, r5, r6, lr}
 8008732:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008734:	4605      	mov	r5, r0
 8008736:	460c      	mov	r4, r1
 8008738:	b976      	cbnz	r6, 8008758 <_Bfree+0x28>
 800873a:	2010      	movs	r0, #16
 800873c:	f7ff ffa4 	bl	8008688 <malloc>
 8008740:	4602      	mov	r2, r0
 8008742:	6268      	str	r0, [r5, #36]	; 0x24
 8008744:	b920      	cbnz	r0, 8008750 <_Bfree+0x20>
 8008746:	4b09      	ldr	r3, [pc, #36]	; (800876c <_Bfree+0x3c>)
 8008748:	4809      	ldr	r0, [pc, #36]	; (8008770 <_Bfree+0x40>)
 800874a:	218a      	movs	r1, #138	; 0x8a
 800874c:	f001 f952 	bl	80099f4 <__assert_func>
 8008750:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008754:	6006      	str	r6, [r0, #0]
 8008756:	60c6      	str	r6, [r0, #12]
 8008758:	b13c      	cbz	r4, 800876a <_Bfree+0x3a>
 800875a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800875c:	6862      	ldr	r2, [r4, #4]
 800875e:	68db      	ldr	r3, [r3, #12]
 8008760:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008764:	6021      	str	r1, [r4, #0]
 8008766:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800876a:	bd70      	pop	{r4, r5, r6, pc}
 800876c:	0800d2b1 	.word	0x0800d2b1
 8008770:	0800d338 	.word	0x0800d338

08008774 <__multadd>:
 8008774:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008778:	690e      	ldr	r6, [r1, #16]
 800877a:	4607      	mov	r7, r0
 800877c:	4698      	mov	r8, r3
 800877e:	460c      	mov	r4, r1
 8008780:	f101 0014 	add.w	r0, r1, #20
 8008784:	2300      	movs	r3, #0
 8008786:	6805      	ldr	r5, [r0, #0]
 8008788:	b2a9      	uxth	r1, r5
 800878a:	fb02 8101 	mla	r1, r2, r1, r8
 800878e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8008792:	0c2d      	lsrs	r5, r5, #16
 8008794:	fb02 c505 	mla	r5, r2, r5, ip
 8008798:	b289      	uxth	r1, r1
 800879a:	3301      	adds	r3, #1
 800879c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80087a0:	429e      	cmp	r6, r3
 80087a2:	f840 1b04 	str.w	r1, [r0], #4
 80087a6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80087aa:	dcec      	bgt.n	8008786 <__multadd+0x12>
 80087ac:	f1b8 0f00 	cmp.w	r8, #0
 80087b0:	d022      	beq.n	80087f8 <__multadd+0x84>
 80087b2:	68a3      	ldr	r3, [r4, #8]
 80087b4:	42b3      	cmp	r3, r6
 80087b6:	dc19      	bgt.n	80087ec <__multadd+0x78>
 80087b8:	6861      	ldr	r1, [r4, #4]
 80087ba:	4638      	mov	r0, r7
 80087bc:	3101      	adds	r1, #1
 80087be:	f7ff ff77 	bl	80086b0 <_Balloc>
 80087c2:	4605      	mov	r5, r0
 80087c4:	b928      	cbnz	r0, 80087d2 <__multadd+0x5e>
 80087c6:	4602      	mov	r2, r0
 80087c8:	4b0d      	ldr	r3, [pc, #52]	; (8008800 <__multadd+0x8c>)
 80087ca:	480e      	ldr	r0, [pc, #56]	; (8008804 <__multadd+0x90>)
 80087cc:	21b5      	movs	r1, #181	; 0xb5
 80087ce:	f001 f911 	bl	80099f4 <__assert_func>
 80087d2:	6922      	ldr	r2, [r4, #16]
 80087d4:	3202      	adds	r2, #2
 80087d6:	f104 010c 	add.w	r1, r4, #12
 80087da:	0092      	lsls	r2, r2, #2
 80087dc:	300c      	adds	r0, #12
 80087de:	f7fe facd 	bl	8006d7c <memcpy>
 80087e2:	4621      	mov	r1, r4
 80087e4:	4638      	mov	r0, r7
 80087e6:	f7ff ffa3 	bl	8008730 <_Bfree>
 80087ea:	462c      	mov	r4, r5
 80087ec:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80087f0:	3601      	adds	r6, #1
 80087f2:	f8c3 8014 	str.w	r8, [r3, #20]
 80087f6:	6126      	str	r6, [r4, #16]
 80087f8:	4620      	mov	r0, r4
 80087fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80087fe:	bf00      	nop
 8008800:	0800d327 	.word	0x0800d327
 8008804:	0800d338 	.word	0x0800d338

08008808 <__hi0bits>:
 8008808:	0c03      	lsrs	r3, r0, #16
 800880a:	041b      	lsls	r3, r3, #16
 800880c:	b9d3      	cbnz	r3, 8008844 <__hi0bits+0x3c>
 800880e:	0400      	lsls	r0, r0, #16
 8008810:	2310      	movs	r3, #16
 8008812:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008816:	bf04      	itt	eq
 8008818:	0200      	lsleq	r0, r0, #8
 800881a:	3308      	addeq	r3, #8
 800881c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008820:	bf04      	itt	eq
 8008822:	0100      	lsleq	r0, r0, #4
 8008824:	3304      	addeq	r3, #4
 8008826:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800882a:	bf04      	itt	eq
 800882c:	0080      	lsleq	r0, r0, #2
 800882e:	3302      	addeq	r3, #2
 8008830:	2800      	cmp	r0, #0
 8008832:	db05      	blt.n	8008840 <__hi0bits+0x38>
 8008834:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008838:	f103 0301 	add.w	r3, r3, #1
 800883c:	bf08      	it	eq
 800883e:	2320      	moveq	r3, #32
 8008840:	4618      	mov	r0, r3
 8008842:	4770      	bx	lr
 8008844:	2300      	movs	r3, #0
 8008846:	e7e4      	b.n	8008812 <__hi0bits+0xa>

08008848 <__lo0bits>:
 8008848:	6803      	ldr	r3, [r0, #0]
 800884a:	f013 0207 	ands.w	r2, r3, #7
 800884e:	4601      	mov	r1, r0
 8008850:	d00b      	beq.n	800886a <__lo0bits+0x22>
 8008852:	07da      	lsls	r2, r3, #31
 8008854:	d424      	bmi.n	80088a0 <__lo0bits+0x58>
 8008856:	0798      	lsls	r0, r3, #30
 8008858:	bf49      	itett	mi
 800885a:	085b      	lsrmi	r3, r3, #1
 800885c:	089b      	lsrpl	r3, r3, #2
 800885e:	2001      	movmi	r0, #1
 8008860:	600b      	strmi	r3, [r1, #0]
 8008862:	bf5c      	itt	pl
 8008864:	600b      	strpl	r3, [r1, #0]
 8008866:	2002      	movpl	r0, #2
 8008868:	4770      	bx	lr
 800886a:	b298      	uxth	r0, r3
 800886c:	b9b0      	cbnz	r0, 800889c <__lo0bits+0x54>
 800886e:	0c1b      	lsrs	r3, r3, #16
 8008870:	2010      	movs	r0, #16
 8008872:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008876:	bf04      	itt	eq
 8008878:	0a1b      	lsreq	r3, r3, #8
 800887a:	3008      	addeq	r0, #8
 800887c:	071a      	lsls	r2, r3, #28
 800887e:	bf04      	itt	eq
 8008880:	091b      	lsreq	r3, r3, #4
 8008882:	3004      	addeq	r0, #4
 8008884:	079a      	lsls	r2, r3, #30
 8008886:	bf04      	itt	eq
 8008888:	089b      	lsreq	r3, r3, #2
 800888a:	3002      	addeq	r0, #2
 800888c:	07da      	lsls	r2, r3, #31
 800888e:	d403      	bmi.n	8008898 <__lo0bits+0x50>
 8008890:	085b      	lsrs	r3, r3, #1
 8008892:	f100 0001 	add.w	r0, r0, #1
 8008896:	d005      	beq.n	80088a4 <__lo0bits+0x5c>
 8008898:	600b      	str	r3, [r1, #0]
 800889a:	4770      	bx	lr
 800889c:	4610      	mov	r0, r2
 800889e:	e7e8      	b.n	8008872 <__lo0bits+0x2a>
 80088a0:	2000      	movs	r0, #0
 80088a2:	4770      	bx	lr
 80088a4:	2020      	movs	r0, #32
 80088a6:	4770      	bx	lr

080088a8 <__i2b>:
 80088a8:	b510      	push	{r4, lr}
 80088aa:	460c      	mov	r4, r1
 80088ac:	2101      	movs	r1, #1
 80088ae:	f7ff feff 	bl	80086b0 <_Balloc>
 80088b2:	4602      	mov	r2, r0
 80088b4:	b928      	cbnz	r0, 80088c2 <__i2b+0x1a>
 80088b6:	4b05      	ldr	r3, [pc, #20]	; (80088cc <__i2b+0x24>)
 80088b8:	4805      	ldr	r0, [pc, #20]	; (80088d0 <__i2b+0x28>)
 80088ba:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80088be:	f001 f899 	bl	80099f4 <__assert_func>
 80088c2:	2301      	movs	r3, #1
 80088c4:	6144      	str	r4, [r0, #20]
 80088c6:	6103      	str	r3, [r0, #16]
 80088c8:	bd10      	pop	{r4, pc}
 80088ca:	bf00      	nop
 80088cc:	0800d327 	.word	0x0800d327
 80088d0:	0800d338 	.word	0x0800d338

080088d4 <__multiply>:
 80088d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088d8:	4614      	mov	r4, r2
 80088da:	690a      	ldr	r2, [r1, #16]
 80088dc:	6923      	ldr	r3, [r4, #16]
 80088de:	429a      	cmp	r2, r3
 80088e0:	bfb8      	it	lt
 80088e2:	460b      	movlt	r3, r1
 80088e4:	460d      	mov	r5, r1
 80088e6:	bfbc      	itt	lt
 80088e8:	4625      	movlt	r5, r4
 80088ea:	461c      	movlt	r4, r3
 80088ec:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80088f0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80088f4:	68ab      	ldr	r3, [r5, #8]
 80088f6:	6869      	ldr	r1, [r5, #4]
 80088f8:	eb0a 0709 	add.w	r7, sl, r9
 80088fc:	42bb      	cmp	r3, r7
 80088fe:	b085      	sub	sp, #20
 8008900:	bfb8      	it	lt
 8008902:	3101      	addlt	r1, #1
 8008904:	f7ff fed4 	bl	80086b0 <_Balloc>
 8008908:	b930      	cbnz	r0, 8008918 <__multiply+0x44>
 800890a:	4602      	mov	r2, r0
 800890c:	4b42      	ldr	r3, [pc, #264]	; (8008a18 <__multiply+0x144>)
 800890e:	4843      	ldr	r0, [pc, #268]	; (8008a1c <__multiply+0x148>)
 8008910:	f240 115d 	movw	r1, #349	; 0x15d
 8008914:	f001 f86e 	bl	80099f4 <__assert_func>
 8008918:	f100 0614 	add.w	r6, r0, #20
 800891c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8008920:	4633      	mov	r3, r6
 8008922:	2200      	movs	r2, #0
 8008924:	4543      	cmp	r3, r8
 8008926:	d31e      	bcc.n	8008966 <__multiply+0x92>
 8008928:	f105 0c14 	add.w	ip, r5, #20
 800892c:	f104 0314 	add.w	r3, r4, #20
 8008930:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8008934:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8008938:	9202      	str	r2, [sp, #8]
 800893a:	ebac 0205 	sub.w	r2, ip, r5
 800893e:	3a15      	subs	r2, #21
 8008940:	f022 0203 	bic.w	r2, r2, #3
 8008944:	3204      	adds	r2, #4
 8008946:	f105 0115 	add.w	r1, r5, #21
 800894a:	458c      	cmp	ip, r1
 800894c:	bf38      	it	cc
 800894e:	2204      	movcc	r2, #4
 8008950:	9201      	str	r2, [sp, #4]
 8008952:	9a02      	ldr	r2, [sp, #8]
 8008954:	9303      	str	r3, [sp, #12]
 8008956:	429a      	cmp	r2, r3
 8008958:	d808      	bhi.n	800896c <__multiply+0x98>
 800895a:	2f00      	cmp	r7, #0
 800895c:	dc55      	bgt.n	8008a0a <__multiply+0x136>
 800895e:	6107      	str	r7, [r0, #16]
 8008960:	b005      	add	sp, #20
 8008962:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008966:	f843 2b04 	str.w	r2, [r3], #4
 800896a:	e7db      	b.n	8008924 <__multiply+0x50>
 800896c:	f8b3 a000 	ldrh.w	sl, [r3]
 8008970:	f1ba 0f00 	cmp.w	sl, #0
 8008974:	d020      	beq.n	80089b8 <__multiply+0xe4>
 8008976:	f105 0e14 	add.w	lr, r5, #20
 800897a:	46b1      	mov	r9, r6
 800897c:	2200      	movs	r2, #0
 800897e:	f85e 4b04 	ldr.w	r4, [lr], #4
 8008982:	f8d9 b000 	ldr.w	fp, [r9]
 8008986:	b2a1      	uxth	r1, r4
 8008988:	fa1f fb8b 	uxth.w	fp, fp
 800898c:	fb0a b101 	mla	r1, sl, r1, fp
 8008990:	4411      	add	r1, r2
 8008992:	f8d9 2000 	ldr.w	r2, [r9]
 8008996:	0c24      	lsrs	r4, r4, #16
 8008998:	0c12      	lsrs	r2, r2, #16
 800899a:	fb0a 2404 	mla	r4, sl, r4, r2
 800899e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80089a2:	b289      	uxth	r1, r1
 80089a4:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80089a8:	45f4      	cmp	ip, lr
 80089aa:	f849 1b04 	str.w	r1, [r9], #4
 80089ae:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80089b2:	d8e4      	bhi.n	800897e <__multiply+0xaa>
 80089b4:	9901      	ldr	r1, [sp, #4]
 80089b6:	5072      	str	r2, [r6, r1]
 80089b8:	9a03      	ldr	r2, [sp, #12]
 80089ba:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80089be:	3304      	adds	r3, #4
 80089c0:	f1b9 0f00 	cmp.w	r9, #0
 80089c4:	d01f      	beq.n	8008a06 <__multiply+0x132>
 80089c6:	6834      	ldr	r4, [r6, #0]
 80089c8:	f105 0114 	add.w	r1, r5, #20
 80089cc:	46b6      	mov	lr, r6
 80089ce:	f04f 0a00 	mov.w	sl, #0
 80089d2:	880a      	ldrh	r2, [r1, #0]
 80089d4:	f8be b002 	ldrh.w	fp, [lr, #2]
 80089d8:	fb09 b202 	mla	r2, r9, r2, fp
 80089dc:	4492      	add	sl, r2
 80089de:	b2a4      	uxth	r4, r4
 80089e0:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80089e4:	f84e 4b04 	str.w	r4, [lr], #4
 80089e8:	f851 4b04 	ldr.w	r4, [r1], #4
 80089ec:	f8be 2000 	ldrh.w	r2, [lr]
 80089f0:	0c24      	lsrs	r4, r4, #16
 80089f2:	fb09 2404 	mla	r4, r9, r4, r2
 80089f6:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80089fa:	458c      	cmp	ip, r1
 80089fc:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8008a00:	d8e7      	bhi.n	80089d2 <__multiply+0xfe>
 8008a02:	9a01      	ldr	r2, [sp, #4]
 8008a04:	50b4      	str	r4, [r6, r2]
 8008a06:	3604      	adds	r6, #4
 8008a08:	e7a3      	b.n	8008952 <__multiply+0x7e>
 8008a0a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d1a5      	bne.n	800895e <__multiply+0x8a>
 8008a12:	3f01      	subs	r7, #1
 8008a14:	e7a1      	b.n	800895a <__multiply+0x86>
 8008a16:	bf00      	nop
 8008a18:	0800d327 	.word	0x0800d327
 8008a1c:	0800d338 	.word	0x0800d338

08008a20 <__pow5mult>:
 8008a20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a24:	4615      	mov	r5, r2
 8008a26:	f012 0203 	ands.w	r2, r2, #3
 8008a2a:	4606      	mov	r6, r0
 8008a2c:	460f      	mov	r7, r1
 8008a2e:	d007      	beq.n	8008a40 <__pow5mult+0x20>
 8008a30:	4c25      	ldr	r4, [pc, #148]	; (8008ac8 <__pow5mult+0xa8>)
 8008a32:	3a01      	subs	r2, #1
 8008a34:	2300      	movs	r3, #0
 8008a36:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008a3a:	f7ff fe9b 	bl	8008774 <__multadd>
 8008a3e:	4607      	mov	r7, r0
 8008a40:	10ad      	asrs	r5, r5, #2
 8008a42:	d03d      	beq.n	8008ac0 <__pow5mult+0xa0>
 8008a44:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008a46:	b97c      	cbnz	r4, 8008a68 <__pow5mult+0x48>
 8008a48:	2010      	movs	r0, #16
 8008a4a:	f7ff fe1d 	bl	8008688 <malloc>
 8008a4e:	4602      	mov	r2, r0
 8008a50:	6270      	str	r0, [r6, #36]	; 0x24
 8008a52:	b928      	cbnz	r0, 8008a60 <__pow5mult+0x40>
 8008a54:	4b1d      	ldr	r3, [pc, #116]	; (8008acc <__pow5mult+0xac>)
 8008a56:	481e      	ldr	r0, [pc, #120]	; (8008ad0 <__pow5mult+0xb0>)
 8008a58:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008a5c:	f000 ffca 	bl	80099f4 <__assert_func>
 8008a60:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008a64:	6004      	str	r4, [r0, #0]
 8008a66:	60c4      	str	r4, [r0, #12]
 8008a68:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008a6c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008a70:	b94c      	cbnz	r4, 8008a86 <__pow5mult+0x66>
 8008a72:	f240 2171 	movw	r1, #625	; 0x271
 8008a76:	4630      	mov	r0, r6
 8008a78:	f7ff ff16 	bl	80088a8 <__i2b>
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	f8c8 0008 	str.w	r0, [r8, #8]
 8008a82:	4604      	mov	r4, r0
 8008a84:	6003      	str	r3, [r0, #0]
 8008a86:	f04f 0900 	mov.w	r9, #0
 8008a8a:	07eb      	lsls	r3, r5, #31
 8008a8c:	d50a      	bpl.n	8008aa4 <__pow5mult+0x84>
 8008a8e:	4639      	mov	r1, r7
 8008a90:	4622      	mov	r2, r4
 8008a92:	4630      	mov	r0, r6
 8008a94:	f7ff ff1e 	bl	80088d4 <__multiply>
 8008a98:	4639      	mov	r1, r7
 8008a9a:	4680      	mov	r8, r0
 8008a9c:	4630      	mov	r0, r6
 8008a9e:	f7ff fe47 	bl	8008730 <_Bfree>
 8008aa2:	4647      	mov	r7, r8
 8008aa4:	106d      	asrs	r5, r5, #1
 8008aa6:	d00b      	beq.n	8008ac0 <__pow5mult+0xa0>
 8008aa8:	6820      	ldr	r0, [r4, #0]
 8008aaa:	b938      	cbnz	r0, 8008abc <__pow5mult+0x9c>
 8008aac:	4622      	mov	r2, r4
 8008aae:	4621      	mov	r1, r4
 8008ab0:	4630      	mov	r0, r6
 8008ab2:	f7ff ff0f 	bl	80088d4 <__multiply>
 8008ab6:	6020      	str	r0, [r4, #0]
 8008ab8:	f8c0 9000 	str.w	r9, [r0]
 8008abc:	4604      	mov	r4, r0
 8008abe:	e7e4      	b.n	8008a8a <__pow5mult+0x6a>
 8008ac0:	4638      	mov	r0, r7
 8008ac2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008ac6:	bf00      	nop
 8008ac8:	0800d488 	.word	0x0800d488
 8008acc:	0800d2b1 	.word	0x0800d2b1
 8008ad0:	0800d338 	.word	0x0800d338

08008ad4 <__lshift>:
 8008ad4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ad8:	460c      	mov	r4, r1
 8008ada:	6849      	ldr	r1, [r1, #4]
 8008adc:	6923      	ldr	r3, [r4, #16]
 8008ade:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008ae2:	68a3      	ldr	r3, [r4, #8]
 8008ae4:	4607      	mov	r7, r0
 8008ae6:	4691      	mov	r9, r2
 8008ae8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008aec:	f108 0601 	add.w	r6, r8, #1
 8008af0:	42b3      	cmp	r3, r6
 8008af2:	db0b      	blt.n	8008b0c <__lshift+0x38>
 8008af4:	4638      	mov	r0, r7
 8008af6:	f7ff fddb 	bl	80086b0 <_Balloc>
 8008afa:	4605      	mov	r5, r0
 8008afc:	b948      	cbnz	r0, 8008b12 <__lshift+0x3e>
 8008afe:	4602      	mov	r2, r0
 8008b00:	4b28      	ldr	r3, [pc, #160]	; (8008ba4 <__lshift+0xd0>)
 8008b02:	4829      	ldr	r0, [pc, #164]	; (8008ba8 <__lshift+0xd4>)
 8008b04:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008b08:	f000 ff74 	bl	80099f4 <__assert_func>
 8008b0c:	3101      	adds	r1, #1
 8008b0e:	005b      	lsls	r3, r3, #1
 8008b10:	e7ee      	b.n	8008af0 <__lshift+0x1c>
 8008b12:	2300      	movs	r3, #0
 8008b14:	f100 0114 	add.w	r1, r0, #20
 8008b18:	f100 0210 	add.w	r2, r0, #16
 8008b1c:	4618      	mov	r0, r3
 8008b1e:	4553      	cmp	r3, sl
 8008b20:	db33      	blt.n	8008b8a <__lshift+0xb6>
 8008b22:	6920      	ldr	r0, [r4, #16]
 8008b24:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008b28:	f104 0314 	add.w	r3, r4, #20
 8008b2c:	f019 091f 	ands.w	r9, r9, #31
 8008b30:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008b34:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008b38:	d02b      	beq.n	8008b92 <__lshift+0xbe>
 8008b3a:	f1c9 0e20 	rsb	lr, r9, #32
 8008b3e:	468a      	mov	sl, r1
 8008b40:	2200      	movs	r2, #0
 8008b42:	6818      	ldr	r0, [r3, #0]
 8008b44:	fa00 f009 	lsl.w	r0, r0, r9
 8008b48:	4302      	orrs	r2, r0
 8008b4a:	f84a 2b04 	str.w	r2, [sl], #4
 8008b4e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008b52:	459c      	cmp	ip, r3
 8008b54:	fa22 f20e 	lsr.w	r2, r2, lr
 8008b58:	d8f3      	bhi.n	8008b42 <__lshift+0x6e>
 8008b5a:	ebac 0304 	sub.w	r3, ip, r4
 8008b5e:	3b15      	subs	r3, #21
 8008b60:	f023 0303 	bic.w	r3, r3, #3
 8008b64:	3304      	adds	r3, #4
 8008b66:	f104 0015 	add.w	r0, r4, #21
 8008b6a:	4584      	cmp	ip, r0
 8008b6c:	bf38      	it	cc
 8008b6e:	2304      	movcc	r3, #4
 8008b70:	50ca      	str	r2, [r1, r3]
 8008b72:	b10a      	cbz	r2, 8008b78 <__lshift+0xa4>
 8008b74:	f108 0602 	add.w	r6, r8, #2
 8008b78:	3e01      	subs	r6, #1
 8008b7a:	4638      	mov	r0, r7
 8008b7c:	612e      	str	r6, [r5, #16]
 8008b7e:	4621      	mov	r1, r4
 8008b80:	f7ff fdd6 	bl	8008730 <_Bfree>
 8008b84:	4628      	mov	r0, r5
 8008b86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b8a:	f842 0f04 	str.w	r0, [r2, #4]!
 8008b8e:	3301      	adds	r3, #1
 8008b90:	e7c5      	b.n	8008b1e <__lshift+0x4a>
 8008b92:	3904      	subs	r1, #4
 8008b94:	f853 2b04 	ldr.w	r2, [r3], #4
 8008b98:	f841 2f04 	str.w	r2, [r1, #4]!
 8008b9c:	459c      	cmp	ip, r3
 8008b9e:	d8f9      	bhi.n	8008b94 <__lshift+0xc0>
 8008ba0:	e7ea      	b.n	8008b78 <__lshift+0xa4>
 8008ba2:	bf00      	nop
 8008ba4:	0800d327 	.word	0x0800d327
 8008ba8:	0800d338 	.word	0x0800d338

08008bac <__mcmp>:
 8008bac:	b530      	push	{r4, r5, lr}
 8008bae:	6902      	ldr	r2, [r0, #16]
 8008bb0:	690c      	ldr	r4, [r1, #16]
 8008bb2:	1b12      	subs	r2, r2, r4
 8008bb4:	d10e      	bne.n	8008bd4 <__mcmp+0x28>
 8008bb6:	f100 0314 	add.w	r3, r0, #20
 8008bba:	3114      	adds	r1, #20
 8008bbc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008bc0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008bc4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008bc8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008bcc:	42a5      	cmp	r5, r4
 8008bce:	d003      	beq.n	8008bd8 <__mcmp+0x2c>
 8008bd0:	d305      	bcc.n	8008bde <__mcmp+0x32>
 8008bd2:	2201      	movs	r2, #1
 8008bd4:	4610      	mov	r0, r2
 8008bd6:	bd30      	pop	{r4, r5, pc}
 8008bd8:	4283      	cmp	r3, r0
 8008bda:	d3f3      	bcc.n	8008bc4 <__mcmp+0x18>
 8008bdc:	e7fa      	b.n	8008bd4 <__mcmp+0x28>
 8008bde:	f04f 32ff 	mov.w	r2, #4294967295
 8008be2:	e7f7      	b.n	8008bd4 <__mcmp+0x28>

08008be4 <__mdiff>:
 8008be4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008be8:	460c      	mov	r4, r1
 8008bea:	4606      	mov	r6, r0
 8008bec:	4611      	mov	r1, r2
 8008bee:	4620      	mov	r0, r4
 8008bf0:	4617      	mov	r7, r2
 8008bf2:	f7ff ffdb 	bl	8008bac <__mcmp>
 8008bf6:	1e05      	subs	r5, r0, #0
 8008bf8:	d110      	bne.n	8008c1c <__mdiff+0x38>
 8008bfa:	4629      	mov	r1, r5
 8008bfc:	4630      	mov	r0, r6
 8008bfe:	f7ff fd57 	bl	80086b0 <_Balloc>
 8008c02:	b930      	cbnz	r0, 8008c12 <__mdiff+0x2e>
 8008c04:	4b39      	ldr	r3, [pc, #228]	; (8008cec <__mdiff+0x108>)
 8008c06:	4602      	mov	r2, r0
 8008c08:	f240 2132 	movw	r1, #562	; 0x232
 8008c0c:	4838      	ldr	r0, [pc, #224]	; (8008cf0 <__mdiff+0x10c>)
 8008c0e:	f000 fef1 	bl	80099f4 <__assert_func>
 8008c12:	2301      	movs	r3, #1
 8008c14:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008c18:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c1c:	bfa4      	itt	ge
 8008c1e:	463b      	movge	r3, r7
 8008c20:	4627      	movge	r7, r4
 8008c22:	4630      	mov	r0, r6
 8008c24:	6879      	ldr	r1, [r7, #4]
 8008c26:	bfa6      	itte	ge
 8008c28:	461c      	movge	r4, r3
 8008c2a:	2500      	movge	r5, #0
 8008c2c:	2501      	movlt	r5, #1
 8008c2e:	f7ff fd3f 	bl	80086b0 <_Balloc>
 8008c32:	b920      	cbnz	r0, 8008c3e <__mdiff+0x5a>
 8008c34:	4b2d      	ldr	r3, [pc, #180]	; (8008cec <__mdiff+0x108>)
 8008c36:	4602      	mov	r2, r0
 8008c38:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008c3c:	e7e6      	b.n	8008c0c <__mdiff+0x28>
 8008c3e:	693e      	ldr	r6, [r7, #16]
 8008c40:	60c5      	str	r5, [r0, #12]
 8008c42:	6925      	ldr	r5, [r4, #16]
 8008c44:	f107 0114 	add.w	r1, r7, #20
 8008c48:	f104 0914 	add.w	r9, r4, #20
 8008c4c:	f100 0e14 	add.w	lr, r0, #20
 8008c50:	f107 0210 	add.w	r2, r7, #16
 8008c54:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8008c58:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8008c5c:	46f2      	mov	sl, lr
 8008c5e:	2700      	movs	r7, #0
 8008c60:	f859 3b04 	ldr.w	r3, [r9], #4
 8008c64:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008c68:	fa1f f883 	uxth.w	r8, r3
 8008c6c:	fa17 f78b 	uxtah	r7, r7, fp
 8008c70:	0c1b      	lsrs	r3, r3, #16
 8008c72:	eba7 0808 	sub.w	r8, r7, r8
 8008c76:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008c7a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008c7e:	fa1f f888 	uxth.w	r8, r8
 8008c82:	141f      	asrs	r7, r3, #16
 8008c84:	454d      	cmp	r5, r9
 8008c86:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008c8a:	f84a 3b04 	str.w	r3, [sl], #4
 8008c8e:	d8e7      	bhi.n	8008c60 <__mdiff+0x7c>
 8008c90:	1b2b      	subs	r3, r5, r4
 8008c92:	3b15      	subs	r3, #21
 8008c94:	f023 0303 	bic.w	r3, r3, #3
 8008c98:	3304      	adds	r3, #4
 8008c9a:	3415      	adds	r4, #21
 8008c9c:	42a5      	cmp	r5, r4
 8008c9e:	bf38      	it	cc
 8008ca0:	2304      	movcc	r3, #4
 8008ca2:	4419      	add	r1, r3
 8008ca4:	4473      	add	r3, lr
 8008ca6:	469e      	mov	lr, r3
 8008ca8:	460d      	mov	r5, r1
 8008caa:	4565      	cmp	r5, ip
 8008cac:	d30e      	bcc.n	8008ccc <__mdiff+0xe8>
 8008cae:	f10c 0203 	add.w	r2, ip, #3
 8008cb2:	1a52      	subs	r2, r2, r1
 8008cb4:	f022 0203 	bic.w	r2, r2, #3
 8008cb8:	3903      	subs	r1, #3
 8008cba:	458c      	cmp	ip, r1
 8008cbc:	bf38      	it	cc
 8008cbe:	2200      	movcc	r2, #0
 8008cc0:	441a      	add	r2, r3
 8008cc2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008cc6:	b17b      	cbz	r3, 8008ce8 <__mdiff+0x104>
 8008cc8:	6106      	str	r6, [r0, #16]
 8008cca:	e7a5      	b.n	8008c18 <__mdiff+0x34>
 8008ccc:	f855 8b04 	ldr.w	r8, [r5], #4
 8008cd0:	fa17 f488 	uxtah	r4, r7, r8
 8008cd4:	1422      	asrs	r2, r4, #16
 8008cd6:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8008cda:	b2a4      	uxth	r4, r4
 8008cdc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8008ce0:	f84e 4b04 	str.w	r4, [lr], #4
 8008ce4:	1417      	asrs	r7, r2, #16
 8008ce6:	e7e0      	b.n	8008caa <__mdiff+0xc6>
 8008ce8:	3e01      	subs	r6, #1
 8008cea:	e7ea      	b.n	8008cc2 <__mdiff+0xde>
 8008cec:	0800d327 	.word	0x0800d327
 8008cf0:	0800d338 	.word	0x0800d338

08008cf4 <__d2b>:
 8008cf4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008cf8:	4689      	mov	r9, r1
 8008cfa:	2101      	movs	r1, #1
 8008cfc:	ec57 6b10 	vmov	r6, r7, d0
 8008d00:	4690      	mov	r8, r2
 8008d02:	f7ff fcd5 	bl	80086b0 <_Balloc>
 8008d06:	4604      	mov	r4, r0
 8008d08:	b930      	cbnz	r0, 8008d18 <__d2b+0x24>
 8008d0a:	4602      	mov	r2, r0
 8008d0c:	4b25      	ldr	r3, [pc, #148]	; (8008da4 <__d2b+0xb0>)
 8008d0e:	4826      	ldr	r0, [pc, #152]	; (8008da8 <__d2b+0xb4>)
 8008d10:	f240 310a 	movw	r1, #778	; 0x30a
 8008d14:	f000 fe6e 	bl	80099f4 <__assert_func>
 8008d18:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008d1c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008d20:	bb35      	cbnz	r5, 8008d70 <__d2b+0x7c>
 8008d22:	2e00      	cmp	r6, #0
 8008d24:	9301      	str	r3, [sp, #4]
 8008d26:	d028      	beq.n	8008d7a <__d2b+0x86>
 8008d28:	4668      	mov	r0, sp
 8008d2a:	9600      	str	r6, [sp, #0]
 8008d2c:	f7ff fd8c 	bl	8008848 <__lo0bits>
 8008d30:	9900      	ldr	r1, [sp, #0]
 8008d32:	b300      	cbz	r0, 8008d76 <__d2b+0x82>
 8008d34:	9a01      	ldr	r2, [sp, #4]
 8008d36:	f1c0 0320 	rsb	r3, r0, #32
 8008d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8008d3e:	430b      	orrs	r3, r1
 8008d40:	40c2      	lsrs	r2, r0
 8008d42:	6163      	str	r3, [r4, #20]
 8008d44:	9201      	str	r2, [sp, #4]
 8008d46:	9b01      	ldr	r3, [sp, #4]
 8008d48:	61a3      	str	r3, [r4, #24]
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	bf14      	ite	ne
 8008d4e:	2202      	movne	r2, #2
 8008d50:	2201      	moveq	r2, #1
 8008d52:	6122      	str	r2, [r4, #16]
 8008d54:	b1d5      	cbz	r5, 8008d8c <__d2b+0x98>
 8008d56:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008d5a:	4405      	add	r5, r0
 8008d5c:	f8c9 5000 	str.w	r5, [r9]
 8008d60:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008d64:	f8c8 0000 	str.w	r0, [r8]
 8008d68:	4620      	mov	r0, r4
 8008d6a:	b003      	add	sp, #12
 8008d6c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008d70:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008d74:	e7d5      	b.n	8008d22 <__d2b+0x2e>
 8008d76:	6161      	str	r1, [r4, #20]
 8008d78:	e7e5      	b.n	8008d46 <__d2b+0x52>
 8008d7a:	a801      	add	r0, sp, #4
 8008d7c:	f7ff fd64 	bl	8008848 <__lo0bits>
 8008d80:	9b01      	ldr	r3, [sp, #4]
 8008d82:	6163      	str	r3, [r4, #20]
 8008d84:	2201      	movs	r2, #1
 8008d86:	6122      	str	r2, [r4, #16]
 8008d88:	3020      	adds	r0, #32
 8008d8a:	e7e3      	b.n	8008d54 <__d2b+0x60>
 8008d8c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008d90:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008d94:	f8c9 0000 	str.w	r0, [r9]
 8008d98:	6918      	ldr	r0, [r3, #16]
 8008d9a:	f7ff fd35 	bl	8008808 <__hi0bits>
 8008d9e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008da2:	e7df      	b.n	8008d64 <__d2b+0x70>
 8008da4:	0800d327 	.word	0x0800d327
 8008da8:	0800d338 	.word	0x0800d338

08008dac <_calloc_r>:
 8008dac:	b513      	push	{r0, r1, r4, lr}
 8008dae:	434a      	muls	r2, r1
 8008db0:	4611      	mov	r1, r2
 8008db2:	9201      	str	r2, [sp, #4]
 8008db4:	f7fe f848 	bl	8006e48 <_malloc_r>
 8008db8:	4604      	mov	r4, r0
 8008dba:	b118      	cbz	r0, 8008dc4 <_calloc_r+0x18>
 8008dbc:	9a01      	ldr	r2, [sp, #4]
 8008dbe:	2100      	movs	r1, #0
 8008dc0:	f7fd ffea 	bl	8006d98 <memset>
 8008dc4:	4620      	mov	r0, r4
 8008dc6:	b002      	add	sp, #8
 8008dc8:	bd10      	pop	{r4, pc}
	...

08008dcc <_read_r>:
 8008dcc:	b538      	push	{r3, r4, r5, lr}
 8008dce:	4d07      	ldr	r5, [pc, #28]	; (8008dec <_read_r+0x20>)
 8008dd0:	4604      	mov	r4, r0
 8008dd2:	4608      	mov	r0, r1
 8008dd4:	4611      	mov	r1, r2
 8008dd6:	2200      	movs	r2, #0
 8008dd8:	602a      	str	r2, [r5, #0]
 8008dda:	461a      	mov	r2, r3
 8008ddc:	f7f8 fd44 	bl	8001868 <_read>
 8008de0:	1c43      	adds	r3, r0, #1
 8008de2:	d102      	bne.n	8008dea <_read_r+0x1e>
 8008de4:	682b      	ldr	r3, [r5, #0]
 8008de6:	b103      	cbz	r3, 8008dea <_read_r+0x1e>
 8008de8:	6023      	str	r3, [r4, #0]
 8008dea:	bd38      	pop	{r3, r4, r5, pc}
 8008dec:	2000a444 	.word	0x2000a444

08008df0 <wcvt>:
 8008df0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008df4:	b085      	sub	sp, #20
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	461d      	mov	r5, r3
 8008dfa:	4614      	mov	r4, r2
 8008dfc:	bfbc      	itt	lt
 8008dfe:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8008e02:	4614      	movlt	r4, r2
 8008e04:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008e06:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8008e08:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
 8008e0c:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
 8008e10:	bfb6      	itet	lt
 8008e12:	461d      	movlt	r5, r3
 8008e14:	2300      	movge	r3, #0
 8008e16:	232d      	movlt	r3, #45	; 0x2d
 8008e18:	6013      	str	r3, [r2, #0]
 8008e1a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008e1c:	f023 0820 	bic.w	r8, r3, #32
 8008e20:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008e24:	d005      	beq.n	8008e32 <wcvt+0x42>
 8008e26:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008e2a:	d100      	bne.n	8008e2e <wcvt+0x3e>
 8008e2c:	3601      	adds	r6, #1
 8008e2e:	2102      	movs	r1, #2
 8008e30:	e000      	b.n	8008e34 <wcvt+0x44>
 8008e32:	2103      	movs	r1, #3
 8008e34:	ab03      	add	r3, sp, #12
 8008e36:	9301      	str	r3, [sp, #4]
 8008e38:	ab02      	add	r3, sp, #8
 8008e3a:	9300      	str	r3, [sp, #0]
 8008e3c:	ec45 4b10 	vmov	d0, r4, r5
 8008e40:	4653      	mov	r3, sl
 8008e42:	4632      	mov	r2, r6
 8008e44:	f7fe fdfc 	bl	8007a40 <_dtoa_r>
 8008e48:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008e4c:	4607      	mov	r7, r0
 8008e4e:	d112      	bne.n	8008e76 <wcvt+0x86>
 8008e50:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008e52:	07db      	lsls	r3, r3, #31
 8008e54:	d40f      	bmi.n	8008e76 <wcvt+0x86>
 8008e56:	9b03      	ldr	r3, [sp, #12]
 8008e58:	1bdb      	subs	r3, r3, r7
 8008e5a:	f8cb 3000 	str.w	r3, [fp]
 8008e5e:	2300      	movs	r3, #0
 8008e60:	f8db 2000 	ldr.w	r2, [fp]
 8008e64:	429a      	cmp	r2, r3
 8008e66:	dd02      	ble.n	8008e6e <wcvt+0x7e>
 8008e68:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008e6a:	4293      	cmp	r3, r2
 8008e6c:	db2a      	blt.n	8008ec4 <wcvt+0xd4>
 8008e6e:	9814      	ldr	r0, [sp, #80]	; 0x50
 8008e70:	b005      	add	sp, #20
 8008e72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e76:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008e7a:	eb07 0906 	add.w	r9, r7, r6
 8008e7e:	d110      	bne.n	8008ea2 <wcvt+0xb2>
 8008e80:	783b      	ldrb	r3, [r7, #0]
 8008e82:	2b30      	cmp	r3, #48	; 0x30
 8008e84:	d10a      	bne.n	8008e9c <wcvt+0xac>
 8008e86:	2200      	movs	r2, #0
 8008e88:	2300      	movs	r3, #0
 8008e8a:	4620      	mov	r0, r4
 8008e8c:	4629      	mov	r1, r5
 8008e8e:	f7f7 fe1b 	bl	8000ac8 <__aeabi_dcmpeq>
 8008e92:	b918      	cbnz	r0, 8008e9c <wcvt+0xac>
 8008e94:	f1c6 0601 	rsb	r6, r6, #1
 8008e98:	f8ca 6000 	str.w	r6, [sl]
 8008e9c:	f8da 3000 	ldr.w	r3, [sl]
 8008ea0:	4499      	add	r9, r3
 8008ea2:	2200      	movs	r2, #0
 8008ea4:	2300      	movs	r3, #0
 8008ea6:	4620      	mov	r0, r4
 8008ea8:	4629      	mov	r1, r5
 8008eaa:	f7f7 fe0d 	bl	8000ac8 <__aeabi_dcmpeq>
 8008eae:	b108      	cbz	r0, 8008eb4 <wcvt+0xc4>
 8008eb0:	f8cd 900c 	str.w	r9, [sp, #12]
 8008eb4:	2230      	movs	r2, #48	; 0x30
 8008eb6:	9b03      	ldr	r3, [sp, #12]
 8008eb8:	454b      	cmp	r3, r9
 8008eba:	d2cc      	bcs.n	8008e56 <wcvt+0x66>
 8008ebc:	1c59      	adds	r1, r3, #1
 8008ebe:	9103      	str	r1, [sp, #12]
 8008ec0:	701a      	strb	r2, [r3, #0]
 8008ec2:	e7f8      	b.n	8008eb6 <wcvt+0xc6>
 8008ec4:	9914      	ldr	r1, [sp, #80]	; 0x50
 8008ec6:	5cfa      	ldrb	r2, [r7, r3]
 8008ec8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8008ecc:	3301      	adds	r3, #1
 8008ece:	e7c7      	b.n	8008e60 <wcvt+0x70>

08008ed0 <_svfwprintf_r>:
 8008ed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ed4:	ed2d 8b04 	vpush	{d8-d9}
 8008ed8:	b0d3      	sub	sp, #332	; 0x14c
 8008eda:	461d      	mov	r5, r3
 8008edc:	2300      	movs	r3, #0
 8008ede:	4689      	mov	r9, r1
 8008ee0:	9319      	str	r3, [sp, #100]	; 0x64
 8008ee2:	4683      	mov	fp, r0
 8008ee4:	920b      	str	r2, [sp, #44]	; 0x2c
 8008ee6:	f7ff fbb9 	bl	800865c <_localeconv_r>
 8008eea:	6803      	ldr	r3, [r0, #0]
 8008eec:	781b      	ldrb	r3, [r3, #0]
 8008eee:	9316      	str	r3, [sp, #88]	; 0x58
 8008ef0:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8008ef4:	061c      	lsls	r4, r3, #24
 8008ef6:	d51a      	bpl.n	8008f2e <_svfwprintf_r+0x5e>
 8008ef8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008efc:	b9bb      	cbnz	r3, 8008f2e <_svfwprintf_r+0x5e>
 8008efe:	2140      	movs	r1, #64	; 0x40
 8008f00:	4658      	mov	r0, fp
 8008f02:	f7fd ffa1 	bl	8006e48 <_malloc_r>
 8008f06:	f8c9 0000 	str.w	r0, [r9]
 8008f0a:	f8c9 0010 	str.w	r0, [r9, #16]
 8008f0e:	b958      	cbnz	r0, 8008f28 <_svfwprintf_r+0x58>
 8008f10:	230c      	movs	r3, #12
 8008f12:	f8cb 3000 	str.w	r3, [fp]
 8008f16:	f04f 33ff 	mov.w	r3, #4294967295
 8008f1a:	930d      	str	r3, [sp, #52]	; 0x34
 8008f1c:	980d      	ldr	r0, [sp, #52]	; 0x34
 8008f1e:	b053      	add	sp, #332	; 0x14c
 8008f20:	ecbd 8b04 	vpop	{d8-d9}
 8008f24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f28:	2340      	movs	r3, #64	; 0x40
 8008f2a:	f8c9 3014 	str.w	r3, [r9, #20]
 8008f2e:	ed9f 7b8e 	vldr	d7, [pc, #568]	; 8009168 <_svfwprintf_r+0x298>
 8008f32:	2300      	movs	r3, #0
 8008f34:	930f      	str	r3, [sp, #60]	; 0x3c
 8008f36:	9311      	str	r3, [sp, #68]	; 0x44
 8008f38:	930d      	str	r3, [sp, #52]	; 0x34
 8008f3a:	eeb0 8a47 	vmov.f32	s16, s14
 8008f3e:	eef0 8a67 	vmov.f32	s17, s15
 8008f42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008f44:	461c      	mov	r4, r3
 8008f46:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f4a:	b10a      	cbz	r2, 8008f50 <_svfwprintf_r+0x80>
 8008f4c:	2a25      	cmp	r2, #37	; 0x25
 8008f4e:	d1f9      	bne.n	8008f44 <_svfwprintf_r+0x74>
 8008f50:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008f52:	42a3      	cmp	r3, r4
 8008f54:	d00d      	beq.n	8008f72 <_svfwprintf_r+0xa2>
 8008f56:	1ae6      	subs	r6, r4, r3
 8008f58:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008f5a:	4633      	mov	r3, r6
 8008f5c:	4649      	mov	r1, r9
 8008f5e:	4658      	mov	r0, fp
 8008f60:	f000 fdd4 	bl	8009b0c <__ssputs_r>
 8008f64:	3001      	adds	r0, #1
 8008f66:	f000 80e8 	beq.w	800913a <_svfwprintf_r+0x26a>
 8008f6a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008f6c:	eb03 03a6 	add.w	r3, r3, r6, asr #2
 8008f70:	930d      	str	r3, [sp, #52]	; 0x34
 8008f72:	6823      	ldr	r3, [r4, #0]
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	f000 80e0 	beq.w	800913a <_svfwprintf_r+0x26a>
 8008f7a:	2100      	movs	r1, #0
 8008f7c:	1d22      	adds	r2, r4, #4
 8008f7e:	9115      	str	r1, [sp, #84]	; 0x54
 8008f80:	460e      	mov	r6, r1
 8008f82:	f04f 34ff 	mov.w	r4, #4294967295
 8008f86:	910c      	str	r1, [sp, #48]	; 0x30
 8008f88:	460f      	mov	r7, r1
 8008f8a:	200a      	movs	r0, #10
 8008f8c:	f852 3b04 	ldr.w	r3, [r2], #4
 8008f90:	9309      	str	r3, [sp, #36]	; 0x24
 8008f92:	920b      	str	r2, [sp, #44]	; 0x2c
 8008f94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f96:	2b39      	cmp	r3, #57	; 0x39
 8008f98:	d84c      	bhi.n	8009034 <_svfwprintf_r+0x164>
 8008f9a:	2b1f      	cmp	r3, #31
 8008f9c:	d94f      	bls.n	800903e <_svfwprintf_r+0x16e>
 8008f9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008fa0:	3b20      	subs	r3, #32
 8008fa2:	2b19      	cmp	r3, #25
 8008fa4:	d84a      	bhi.n	800903c <_svfwprintf_r+0x16c>
 8008fa6:	e8df f003 	tbb	[pc, r3]
 8008faa:	496b      	.short	0x496b
 8008fac:	49497049 	.word	0x49497049
 8008fb0:	49494949 	.word	0x49494949
 8008fb4:	7a496c73 	.word	0x7a496c73
 8008fb8:	9b98497d 	.word	0x9b98497d
 8008fbc:	9b9b9b9b 	.word	0x9b9b9b9b
 8008fc0:	9b9b9b9b 	.word	0x9b9b9b9b
 8008fc4:	2b33      	cmp	r3, #51	; 0x33
 8008fc6:	d839      	bhi.n	800903c <_svfwprintf_r+0x16c>
 8008fc8:	e8df f013 	tbh	[pc, r3, lsl #1]
 8008fcc:	003800e8 	.word	0x003800e8
 8008fd0:	003800e8 	.word	0x003800e8
 8008fd4:	00380038 	.word	0x00380038
 8008fd8:	009d0038 	.word	0x009d0038
 8008fdc:	00380038 	.word	0x00380038
 8008fe0:	00380038 	.word	0x00380038
 8008fe4:	00380038 	.word	0x00380038
 8008fe8:	00380038 	.word	0x00380038
 8008fec:	00380038 	.word	0x00380038
 8008ff0:	03200038 	.word	0x03200038
 8008ff4:	00380038 	.word	0x00380038
 8008ff8:	00380038 	.word	0x00380038
 8008ffc:	00380038 	.word	0x00380038
 8009000:	00380038 	.word	0x00380038
 8009004:	00380038 	.word	0x00380038
 8009008:	00d400a6 	.word	0x00d400a6
 800900c:	00e800e8 	.word	0x00e800e8
 8009010:	00a000e8 	.word	0x00a000e8
 8009014:	003800d4 	.word	0x003800d4
 8009018:	00a30038 	.word	0x00a30038
 800901c:	02880038 	.word	0x02880038
 8009020:	02a60299 	.word	0x02a60299
 8009024:	003800a3 	.word	0x003800a3
 8009028:	003802c5 	.word	0x003802c5
 800902c:	00380315 	.word	0x00380315
 8009030:	00420038 	.word	0x00420038
 8009034:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009036:	3b45      	subs	r3, #69	; 0x45
 8009038:	2b33      	cmp	r3, #51	; 0x33
 800903a:	d9c3      	bls.n	8008fc4 <_svfwprintf_r+0xf4>
 800903c:	b111      	cbz	r1, 8009044 <_svfwprintf_r+0x174>
 800903e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009040:	2b00      	cmp	r3, #0
 8009042:	d07a      	beq.n	800913a <_svfwprintf_r+0x26a>
 8009044:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009046:	932a      	str	r3, [sp, #168]	; 0xa8
 8009048:	2000      	movs	r0, #0
 800904a:	9015      	str	r0, [sp, #84]	; 0x54
 800904c:	950a      	str	r5, [sp, #40]	; 0x28
 800904e:	e081      	b.n	8009154 <_svfwprintf_r+0x284>
 8009050:	b101      	cbz	r1, 8009054 <_svfwprintf_r+0x184>
 8009052:	9615      	str	r6, [sp, #84]	; 0x54
 8009054:	4b46      	ldr	r3, [pc, #280]	; (8009170 <_svfwprintf_r+0x2a0>)
 8009056:	930f      	str	r3, [sp, #60]	; 0x3c
 8009058:	462a      	mov	r2, r5
 800905a:	06f8      	lsls	r0, r7, #27
 800905c:	f852 3b04 	ldr.w	r3, [r2], #4
 8009060:	920a      	str	r2, [sp, #40]	; 0x28
 8009062:	d402      	bmi.n	800906a <_svfwprintf_r+0x19a>
 8009064:	0679      	lsls	r1, r7, #25
 8009066:	bf48      	it	mi
 8009068:	b29b      	uxthmi	r3, r3
 800906a:	07fa      	lsls	r2, r7, #31
 800906c:	d506      	bpl.n	800907c <_svfwprintf_r+0x1ac>
 800906e:	b12b      	cbz	r3, 800907c <_svfwprintf_r+0x1ac>
 8009070:	2230      	movs	r2, #48	; 0x30
 8009072:	921a      	str	r2, [sp, #104]	; 0x68
 8009074:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009076:	921b      	str	r2, [sp, #108]	; 0x6c
 8009078:	f047 0702 	orr.w	r7, r7, #2
 800907c:	2202      	movs	r2, #2
 800907e:	e259      	b.n	8009534 <_svfwprintf_r+0x664>
 8009080:	b90e      	cbnz	r6, 8009086 <_svfwprintf_r+0x1b6>
 8009082:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8009084:	2101      	movs	r1, #1
 8009086:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009088:	e780      	b.n	8008f8c <_svfwprintf_r+0xbc>
 800908a:	f047 0701 	orr.w	r7, r7, #1
 800908e:	e7fa      	b.n	8009086 <_svfwprintf_r+0x1b6>
 8009090:	f855 3b04 	ldr.w	r3, [r5], #4
 8009094:	930c      	str	r3, [sp, #48]	; 0x30
 8009096:	2b00      	cmp	r3, #0
 8009098:	daf5      	bge.n	8009086 <_svfwprintf_r+0x1b6>
 800909a:	425b      	negs	r3, r3
 800909c:	930c      	str	r3, [sp, #48]	; 0x30
 800909e:	f047 0704 	orr.w	r7, r7, #4
 80090a2:	e7f0      	b.n	8009086 <_svfwprintf_r+0x1b6>
 80090a4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80090a6:	f852 3b04 	ldr.w	r3, [r2], #4
 80090aa:	9309      	str	r3, [sp, #36]	; 0x24
 80090ac:	2b2a      	cmp	r3, #42	; 0x2a
 80090ae:	d112      	bne.n	80090d6 <_svfwprintf_r+0x206>
 80090b0:	f855 4b04 	ldr.w	r4, [r5], #4
 80090b4:	920b      	str	r2, [sp, #44]	; 0x2c
 80090b6:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
 80090ba:	e7e4      	b.n	8009086 <_svfwprintf_r+0x1b6>
 80090bc:	fb00 3404 	mla	r4, r0, r4, r3
 80090c0:	f852 3b04 	ldr.w	r3, [r2], #4
 80090c4:	9309      	str	r3, [sp, #36]	; 0x24
 80090c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090c8:	3b30      	subs	r3, #48	; 0x30
 80090ca:	2b09      	cmp	r3, #9
 80090cc:	d9f6      	bls.n	80090bc <_svfwprintf_r+0x1ec>
 80090ce:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
 80090d2:	920b      	str	r2, [sp, #44]	; 0x2c
 80090d4:	e75e      	b.n	8008f94 <_svfwprintf_r+0xc4>
 80090d6:	2400      	movs	r4, #0
 80090d8:	e7f5      	b.n	80090c6 <_svfwprintf_r+0x1f6>
 80090da:	f047 0780 	orr.w	r7, r7, #128	; 0x80
 80090de:	e7d2      	b.n	8009086 <_svfwprintf_r+0x1b6>
 80090e0:	2300      	movs	r3, #0
 80090e2:	930c      	str	r3, [sp, #48]	; 0x30
 80090e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80090e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80090e8:	fb00 2303 	mla	r3, r0, r3, r2
 80090ec:	3b30      	subs	r3, #48	; 0x30
 80090ee:	930c      	str	r3, [sp, #48]	; 0x30
 80090f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80090f2:	461a      	mov	r2, r3
 80090f4:	f852 3b04 	ldr.w	r3, [r2], #4
 80090f8:	9309      	str	r3, [sp, #36]	; 0x24
 80090fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090fc:	920b      	str	r2, [sp, #44]	; 0x2c
 80090fe:	3b30      	subs	r3, #48	; 0x30
 8009100:	2b09      	cmp	r3, #9
 8009102:	d9ef      	bls.n	80090e4 <_svfwprintf_r+0x214>
 8009104:	e746      	b.n	8008f94 <_svfwprintf_r+0xc4>
 8009106:	f047 0708 	orr.w	r7, r7, #8
 800910a:	e7bc      	b.n	8009086 <_svfwprintf_r+0x1b6>
 800910c:	f047 0740 	orr.w	r7, r7, #64	; 0x40
 8009110:	e7b9      	b.n	8009086 <_svfwprintf_r+0x1b6>
 8009112:	f047 0710 	orr.w	r7, r7, #16
 8009116:	e7b6      	b.n	8009086 <_svfwprintf_r+0x1b6>
 8009118:	b101      	cbz	r1, 800911c <_svfwprintf_r+0x24c>
 800911a:	9615      	str	r6, [sp, #84]	; 0x54
 800911c:	1d2b      	adds	r3, r5, #4
 800911e:	06f8      	lsls	r0, r7, #27
 8009120:	930a      	str	r3, [sp, #40]	; 0x28
 8009122:	d41e      	bmi.n	8009162 <_svfwprintf_r+0x292>
 8009124:	6828      	ldr	r0, [r5, #0]
 8009126:	f000 fc83 	bl	8009a30 <btowc>
 800912a:	1c41      	adds	r1, r0, #1
 800912c:	d10e      	bne.n	800914c <_svfwprintf_r+0x27c>
 800912e:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8009132:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009136:	f8a9 300c 	strh.w	r3, [r9, #12]
 800913a:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800913e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8009142:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009144:	bf18      	it	ne
 8009146:	f04f 33ff 	movne.w	r3, #4294967295
 800914a:	e6e6      	b.n	8008f1a <_svfwprintf_r+0x4a>
 800914c:	902a      	str	r0, [sp, #168]	; 0xa8
 800914e:	2000      	movs	r0, #0
 8009150:	902b      	str	r0, [sp, #172]	; 0xac
 8009152:	9015      	str	r0, [sp, #84]	; 0x54
 8009154:	4680      	mov	r8, r0
 8009156:	2401      	movs	r4, #1
 8009158:	4606      	mov	r6, r0
 800915a:	4605      	mov	r5, r0
 800915c:	f10d 0aa8 	add.w	sl, sp, #168	; 0xa8
 8009160:	e107      	b.n	8009372 <_svfwprintf_r+0x4a2>
 8009162:	682b      	ldr	r3, [r5, #0]
 8009164:	932a      	str	r3, [sp, #168]	; 0xa8
 8009166:	e7f2      	b.n	800914e <_svfwprintf_r+0x27e>
	...
 8009170:	0800d518 	.word	0x0800d518
 8009174:	b101      	cbz	r1, 8009178 <_svfwprintf_r+0x2a8>
 8009176:	9615      	str	r6, [sp, #84]	; 0x54
 8009178:	1d2b      	adds	r3, r5, #4
 800917a:	06fa      	lsls	r2, r7, #27
 800917c:	930a      	str	r3, [sp, #40]	; 0x28
 800917e:	d507      	bpl.n	8009190 <_svfwprintf_r+0x2c0>
 8009180:	682b      	ldr	r3, [r5, #0]
 8009182:	2b00      	cmp	r3, #0
 8009184:	da02      	bge.n	800918c <_svfwprintf_r+0x2bc>
 8009186:	222d      	movs	r2, #45	; 0x2d
 8009188:	425b      	negs	r3, r3
 800918a:	9215      	str	r2, [sp, #84]	; 0x54
 800918c:	2201      	movs	r2, #1
 800918e:	e1d3      	b.n	8009538 <_svfwprintf_r+0x668>
 8009190:	682b      	ldr	r3, [r5, #0]
 8009192:	f017 0f40 	tst.w	r7, #64	; 0x40
 8009196:	bf18      	it	ne
 8009198:	b21b      	sxthne	r3, r3
 800919a:	e7f2      	b.n	8009182 <_svfwprintf_r+0x2b2>
 800919c:	b101      	cbz	r1, 80091a0 <_svfwprintf_r+0x2d0>
 800919e:	9615      	str	r6, [sp, #84]	; 0x54
 80091a0:	3507      	adds	r5, #7
 80091a2:	f025 0307 	bic.w	r3, r5, #7
 80091a6:	ecb3 7b02 	vldmia	r3!, {d7}
 80091aa:	930a      	str	r3, [sp, #40]	; 0x28
 80091ac:	eeb0 8a47 	vmov.f32	s16, s14
 80091b0:	eef0 8a67 	vmov.f32	s17, s15
 80091b4:	ee18 3a90 	vmov	r3, s17
 80091b8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80091bc:	ee09 3a90 	vmov	s19, r3
 80091c0:	eeb0 9a47 	vmov.f32	s18, s14
 80091c4:	4bb3      	ldr	r3, [pc, #716]	; (8009494 <_svfwprintf_r+0x5c4>)
 80091c6:	ec51 0b19 	vmov	r0, r1, d9
 80091ca:	f04f 32ff 	mov.w	r2, #4294967295
 80091ce:	f7f7 fcad 	bl	8000b2c <__aeabi_dcmpun>
 80091d2:	b9f0      	cbnz	r0, 8009212 <_svfwprintf_r+0x342>
 80091d4:	4baf      	ldr	r3, [pc, #700]	; (8009494 <_svfwprintf_r+0x5c4>)
 80091d6:	ec51 0b19 	vmov	r0, r1, d9
 80091da:	f04f 32ff 	mov.w	r2, #4294967295
 80091de:	f7f7 fc87 	bl	8000af0 <__aeabi_dcmple>
 80091e2:	b9b0      	cbnz	r0, 8009212 <_svfwprintf_r+0x342>
 80091e4:	ec51 0b18 	vmov	r0, r1, d8
 80091e8:	2200      	movs	r2, #0
 80091ea:	2300      	movs	r3, #0
 80091ec:	f7f7 fc76 	bl	8000adc <__aeabi_dcmplt>
 80091f0:	b108      	cbz	r0, 80091f6 <_svfwprintf_r+0x326>
 80091f2:	232d      	movs	r3, #45	; 0x2d
 80091f4:	9315      	str	r3, [sp, #84]	; 0x54
 80091f6:	4ba8      	ldr	r3, [pc, #672]	; (8009498 <_svfwprintf_r+0x5c8>)
 80091f8:	48a8      	ldr	r0, [pc, #672]	; (800949c <_svfwprintf_r+0x5cc>)
 80091fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80091fc:	f027 0780 	bic.w	r7, r7, #128	; 0x80
 8009200:	2a47      	cmp	r2, #71	; 0x47
 8009202:	bf94      	ite	ls
 8009204:	469a      	movls	sl, r3
 8009206:	4682      	movhi	sl, r0
 8009208:	f04f 0800 	mov.w	r8, #0
 800920c:	2403      	movs	r4, #3
 800920e:	4646      	mov	r6, r8
 8009210:	e3d2      	b.n	80099b8 <_svfwprintf_r+0xae8>
 8009212:	ec53 2b18 	vmov	r2, r3, d8
 8009216:	ec51 0b18 	vmov	r0, r1, d8
 800921a:	f7f7 fc87 	bl	8000b2c <__aeabi_dcmpun>
 800921e:	b140      	cbz	r0, 8009232 <_svfwprintf_r+0x362>
 8009220:	ee18 3a90 	vmov	r3, s17
 8009224:	2b00      	cmp	r3, #0
 8009226:	bfbc      	itt	lt
 8009228:	232d      	movlt	r3, #45	; 0x2d
 800922a:	9315      	strlt	r3, [sp, #84]	; 0x54
 800922c:	489c      	ldr	r0, [pc, #624]	; (80094a0 <_svfwprintf_r+0x5d0>)
 800922e:	4b9d      	ldr	r3, [pc, #628]	; (80094a4 <_svfwprintf_r+0x5d4>)
 8009230:	e7e3      	b.n	80091fa <_svfwprintf_r+0x32a>
 8009232:	1c63      	adds	r3, r4, #1
 8009234:	f000 810f 	beq.w	8009456 <_svfwprintf_r+0x586>
 8009238:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800923a:	f023 0320 	bic.w	r3, r3, #32
 800923e:	2b47      	cmp	r3, #71	; 0x47
 8009240:	d102      	bne.n	8009248 <_svfwprintf_r+0x378>
 8009242:	2c00      	cmp	r4, #0
 8009244:	bf08      	it	eq
 8009246:	2401      	moveq	r4, #1
 8009248:	f447 7380 	orr.w	r3, r7, #256	; 0x100
 800924c:	930e      	str	r3, [sp, #56]	; 0x38
 800924e:	2328      	movs	r3, #40	; 0x28
 8009250:	9307      	str	r3, [sp, #28]
 8009252:	ab19      	add	r3, sp, #100	; 0x64
 8009254:	9305      	str	r3, [sp, #20]
 8009256:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009258:	9304      	str	r3, [sp, #16]
 800925a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800925c:	f10d 08a8 	add.w	r8, sp, #168	; 0xa8
 8009260:	ae18      	add	r6, sp, #96	; 0x60
 8009262:	ad17      	add	r5, sp, #92	; 0x5c
 8009264:	e9cd 4300 	strd	r4, r3, [sp]
 8009268:	f8cd 8018 	str.w	r8, [sp, #24]
 800926c:	ec53 2b18 	vmov	r2, r3, d8
 8009270:	9603      	str	r6, [sp, #12]
 8009272:	9502      	str	r5, [sp, #8]
 8009274:	4658      	mov	r0, fp
 8009276:	f7ff fdbb 	bl	8008df0 <wcvt>
 800927a:	4540      	cmp	r0, r8
 800927c:	4682      	mov	sl, r0
 800927e:	f040 80ec 	bne.w	800945a <_svfwprintf_r+0x58a>
 8009282:	9919      	ldr	r1, [sp, #100]	; 0x64
 8009284:	2928      	cmp	r1, #40	; 0x28
 8009286:	f340 80e8 	ble.w	800945a <_svfwprintf_r+0x58a>
 800928a:	0089      	lsls	r1, r1, #2
 800928c:	4658      	mov	r0, fp
 800928e:	f7fd fddb 	bl	8006e48 <_malloc_r>
 8009292:	4680      	mov	r8, r0
 8009294:	2800      	cmp	r0, #0
 8009296:	f43f af4a 	beq.w	800912e <_svfwprintf_r+0x25e>
 800929a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800929c:	9502      	str	r5, [sp, #8]
 800929e:	e9cd 0306 	strd	r0, r3, [sp, #24]
 80092a2:	ab19      	add	r3, sp, #100	; 0x64
 80092a4:	9305      	str	r3, [sp, #20]
 80092a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092a8:	e9cd 6303 	strd	r6, r3, [sp, #12]
 80092ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80092ae:	4658      	mov	r0, fp
 80092b0:	e9cd 4300 	strd	r4, r3, [sp]
 80092b4:	ec53 2b18 	vmov	r2, r3, d8
 80092b8:	f7ff fd9a 	bl	8008df0 <wcvt>
 80092bc:	4682      	mov	sl, r0
 80092be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092c0:	9d18      	ldr	r5, [sp, #96]	; 0x60
 80092c2:	f023 0320 	bic.w	r3, r3, #32
 80092c6:	2b47      	cmp	r3, #71	; 0x47
 80092c8:	f040 80ca 	bne.w	8009460 <_svfwprintf_r+0x590>
 80092cc:	1cee      	adds	r6, r5, #3
 80092ce:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80092d0:	db02      	blt.n	80092d8 <_svfwprintf_r+0x408>
 80092d2:	42ac      	cmp	r4, r5
 80092d4:	f280 80ed 	bge.w	80094b2 <_svfwprintf_r+0x5e2>
 80092d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092da:	3b02      	subs	r3, #2
 80092dc:	9309      	str	r3, [sp, #36]	; 0x24
 80092de:	1e6b      	subs	r3, r5, #1
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80092e4:	9318      	str	r3, [sp, #96]	; 0x60
 80092e6:	bfb8      	it	lt
 80092e8:	f1c5 0301 	rsblt	r3, r5, #1
 80092ec:	921c      	str	r2, [sp, #112]	; 0x70
 80092ee:	bfb4      	ite	lt
 80092f0:	222d      	movlt	r2, #45	; 0x2d
 80092f2:	222b      	movge	r2, #43	; 0x2b
 80092f4:	2b09      	cmp	r3, #9
 80092f6:	921d      	str	r2, [sp, #116]	; 0x74
 80092f8:	f340 80c5 	ble.w	8009486 <_svfwprintf_r+0x5b6>
 80092fc:	a82a      	add	r0, sp, #168	; 0xa8
 80092fe:	250a      	movs	r5, #10
 8009300:	4602      	mov	r2, r0
 8009302:	fb93 f4f5 	sdiv	r4, r3, r5
 8009306:	fb05 3114 	mls	r1, r5, r4, r3
 800930a:	3130      	adds	r1, #48	; 0x30
 800930c:	f842 1c04 	str.w	r1, [r2, #-4]
 8009310:	4619      	mov	r1, r3
 8009312:	2963      	cmp	r1, #99	; 0x63
 8009314:	f1a0 0004 	sub.w	r0, r0, #4
 8009318:	4623      	mov	r3, r4
 800931a:	dcf1      	bgt.n	8009300 <_svfwprintf_r+0x430>
 800931c:	3330      	adds	r3, #48	; 0x30
 800931e:	f840 3c04 	str.w	r3, [r0, #-4]
 8009322:	f1a2 0108 	sub.w	r1, r2, #8
 8009326:	a81e      	add	r0, sp, #120	; 0x78
 8009328:	ab2a      	add	r3, sp, #168	; 0xa8
 800932a:	4299      	cmp	r1, r3
 800932c:	f0c0 80a6 	bcc.w	800947c <_svfwprintf_r+0x5ac>
 8009330:	f10d 04b3 	add.w	r4, sp, #179	; 0xb3
 8009334:	1aa4      	subs	r4, r4, r2
 8009336:	f024 0403 	bic.w	r4, r4, #3
 800933a:	3a0b      	subs	r2, #11
 800933c:	429a      	cmp	r2, r3
 800933e:	bf88      	it	hi
 8009340:	2400      	movhi	r4, #0
 8009342:	ab1e      	add	r3, sp, #120	; 0x78
 8009344:	441c      	add	r4, r3
 8009346:	a81c      	add	r0, sp, #112	; 0x70
 8009348:	1a24      	subs	r4, r4, r0
 800934a:	10a3      	asrs	r3, r4, #2
 800934c:	9311      	str	r3, [sp, #68]	; 0x44
 800934e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009350:	2b01      	cmp	r3, #1
 8009352:	eb03 04a4 	add.w	r4, r3, r4, asr #2
 8009356:	dc02      	bgt.n	800935e <_svfwprintf_r+0x48e>
 8009358:	f017 0501 	ands.w	r5, r7, #1
 800935c:	d001      	beq.n	8009362 <_svfwprintf_r+0x492>
 800935e:	3401      	adds	r4, #1
 8009360:	2500      	movs	r5, #0
 8009362:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8009364:	2e00      	cmp	r6, #0
 8009366:	f000 817d 	beq.w	8009664 <_svfwprintf_r+0x794>
 800936a:	232d      	movs	r3, #45	; 0x2d
 800936c:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 800936e:	9315      	str	r3, [sp, #84]	; 0x54
 8009370:	2600      	movs	r6, #0
 8009372:	42a6      	cmp	r6, r4
 8009374:	4633      	mov	r3, r6
 8009376:	bfb8      	it	lt
 8009378:	4623      	movlt	r3, r4
 800937a:	930e      	str	r3, [sp, #56]	; 0x38
 800937c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800937e:	b113      	cbz	r3, 8009386 <_svfwprintf_r+0x4b6>
 8009380:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009382:	3301      	adds	r3, #1
 8009384:	930e      	str	r3, [sp, #56]	; 0x38
 8009386:	f017 0302 	ands.w	r3, r7, #2
 800938a:	9312      	str	r3, [sp, #72]	; 0x48
 800938c:	bf1e      	ittt	ne
 800938e:	9b0e      	ldrne	r3, [sp, #56]	; 0x38
 8009390:	3302      	addne	r3, #2
 8009392:	930e      	strne	r3, [sp, #56]	; 0x38
 8009394:	f017 0384 	ands.w	r3, r7, #132	; 0x84
 8009398:	9313      	str	r3, [sp, #76]	; 0x4c
 800939a:	f000 8165 	beq.w	8009668 <_svfwprintf_r+0x798>
 800939e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80093a0:	b143      	cbz	r3, 80093b4 <_svfwprintf_r+0x4e4>
 80093a2:	2304      	movs	r3, #4
 80093a4:	aa15      	add	r2, sp, #84	; 0x54
 80093a6:	4649      	mov	r1, r9
 80093a8:	4658      	mov	r0, fp
 80093aa:	f000 fbaf 	bl	8009b0c <__ssputs_r>
 80093ae:	3001      	adds	r0, #1
 80093b0:	f000 816d 	beq.w	800968e <_svfwprintf_r+0x7be>
 80093b4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80093b6:	b143      	cbz	r3, 80093ca <_svfwprintf_r+0x4fa>
 80093b8:	2308      	movs	r3, #8
 80093ba:	aa1a      	add	r2, sp, #104	; 0x68
 80093bc:	4649      	mov	r1, r9
 80093be:	4658      	mov	r0, fp
 80093c0:	f000 fba4 	bl	8009b0c <__ssputs_r>
 80093c4:	3001      	adds	r0, #1
 80093c6:	f000 8162 	beq.w	800968e <_svfwprintf_r+0x7be>
 80093ca:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80093cc:	2b80      	cmp	r3, #128	; 0x80
 80093ce:	d113      	bne.n	80093f8 <_svfwprintf_r+0x528>
 80093d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80093d2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80093d4:	1a9b      	subs	r3, r3, r2
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	9310      	str	r3, [sp, #64]	; 0x40
 80093da:	dd0d      	ble.n	80093f8 <_svfwprintf_r+0x528>
 80093dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80093de:	4a32      	ldr	r2, [pc, #200]	; (80094a8 <_svfwprintf_r+0x5d8>)
 80093e0:	2b10      	cmp	r3, #16
 80093e2:	f300 8169 	bgt.w	80096b8 <_svfwprintf_r+0x7e8>
 80093e6:	4a30      	ldr	r2, [pc, #192]	; (80094a8 <_svfwprintf_r+0x5d8>)
 80093e8:	009b      	lsls	r3, r3, #2
 80093ea:	4649      	mov	r1, r9
 80093ec:	4658      	mov	r0, fp
 80093ee:	f000 fb8d 	bl	8009b0c <__ssputs_r>
 80093f2:	3001      	adds	r0, #1
 80093f4:	f000 814b 	beq.w	800968e <_svfwprintf_r+0x7be>
 80093f8:	1b36      	subs	r6, r6, r4
 80093fa:	2e00      	cmp	r6, #0
 80093fc:	dd0c      	ble.n	8009418 <_svfwprintf_r+0x548>
 80093fe:	2e10      	cmp	r6, #16
 8009400:	4a29      	ldr	r2, [pc, #164]	; (80094a8 <_svfwprintf_r+0x5d8>)
 8009402:	f300 8164 	bgt.w	80096ce <_svfwprintf_r+0x7fe>
 8009406:	4a28      	ldr	r2, [pc, #160]	; (80094a8 <_svfwprintf_r+0x5d8>)
 8009408:	00b3      	lsls	r3, r6, #2
 800940a:	4649      	mov	r1, r9
 800940c:	4658      	mov	r0, fp
 800940e:	f000 fb7d 	bl	8009b0c <__ssputs_r>
 8009412:	3001      	adds	r0, #1
 8009414:	f000 813b 	beq.w	800968e <_svfwprintf_r+0x7be>
 8009418:	05f9      	lsls	r1, r7, #23
 800941a:	f100 8161 	bmi.w	80096e0 <_svfwprintf_r+0x810>
 800941e:	00a3      	lsls	r3, r4, #2
 8009420:	4652      	mov	r2, sl
 8009422:	4649      	mov	r1, r9
 8009424:	4658      	mov	r0, fp
 8009426:	f000 fb71 	bl	8009b0c <__ssputs_r>
 800942a:	3001      	adds	r0, #1
 800942c:	f000 812f 	beq.w	800968e <_svfwprintf_r+0x7be>
 8009430:	077a      	lsls	r2, r7, #29
 8009432:	f100 827f 	bmi.w	8009934 <_svfwprintf_r+0xa64>
 8009436:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800943a:	990e      	ldr	r1, [sp, #56]	; 0x38
 800943c:	428a      	cmp	r2, r1
 800943e:	bfac      	ite	ge
 8009440:	189b      	addge	r3, r3, r2
 8009442:	185b      	addlt	r3, r3, r1
 8009444:	930d      	str	r3, [sp, #52]	; 0x34
 8009446:	f1b8 0f00 	cmp.w	r8, #0
 800944a:	d056      	beq.n	80094fa <_svfwprintf_r+0x62a>
 800944c:	4641      	mov	r1, r8
 800944e:	4658      	mov	r0, fp
 8009450:	f7fd fcaa 	bl	8006da8 <_free_r>
 8009454:	e051      	b.n	80094fa <_svfwprintf_r+0x62a>
 8009456:	2406      	movs	r4, #6
 8009458:	e6f6      	b.n	8009248 <_svfwprintf_r+0x378>
 800945a:	f04f 0800 	mov.w	r8, #0
 800945e:	e72e      	b.n	80092be <_svfwprintf_r+0x3ee>
 8009460:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009462:	2b66      	cmp	r3, #102	; 0x66
 8009464:	f47f af3b 	bne.w	80092de <_svfwprintf_r+0x40e>
 8009468:	f007 0301 	and.w	r3, r7, #1
 800946c:	2d00      	cmp	r5, #0
 800946e:	ea43 0304 	orr.w	r3, r3, r4
 8009472:	dd1b      	ble.n	80094ac <_svfwprintf_r+0x5dc>
 8009474:	b363      	cbz	r3, 80094d0 <_svfwprintf_r+0x600>
 8009476:	3401      	adds	r4, #1
 8009478:	442c      	add	r4, r5
 800947a:	e772      	b.n	8009362 <_svfwprintf_r+0x492>
 800947c:	f851 4b04 	ldr.w	r4, [r1], #4
 8009480:	f840 4b04 	str.w	r4, [r0], #4
 8009484:	e751      	b.n	800932a <_svfwprintf_r+0x45a>
 8009486:	2230      	movs	r2, #48	; 0x30
 8009488:	4413      	add	r3, r2
 800948a:	921e      	str	r2, [sp, #120]	; 0x78
 800948c:	931f      	str	r3, [sp, #124]	; 0x7c
 800948e:	ac20      	add	r4, sp, #128	; 0x80
 8009490:	e759      	b.n	8009346 <_svfwprintf_r+0x476>
 8009492:	bf00      	nop
 8009494:	7fefffff 	.word	0x7fefffff
 8009498:	0800d494 	.word	0x0800d494
 800949c:	0800d4a4 	.word	0x0800d4a4
 80094a0:	0800d4c4 	.word	0x0800d4c4
 80094a4:	0800d4b4 	.word	0x0800d4b4
 80094a8:	0800d5a4 	.word	0x0800d5a4
 80094ac:	b193      	cbz	r3, 80094d4 <_svfwprintf_r+0x604>
 80094ae:	3402      	adds	r4, #2
 80094b0:	e757      	b.n	8009362 <_svfwprintf_r+0x492>
 80094b2:	429d      	cmp	r5, r3
 80094b4:	db05      	blt.n	80094c2 <_svfwprintf_r+0x5f2>
 80094b6:	07fc      	lsls	r4, r7, #31
 80094b8:	d50e      	bpl.n	80094d8 <_svfwprintf_r+0x608>
 80094ba:	1c6c      	adds	r4, r5, #1
 80094bc:	2367      	movs	r3, #103	; 0x67
 80094be:	9309      	str	r3, [sp, #36]	; 0x24
 80094c0:	e74f      	b.n	8009362 <_svfwprintf_r+0x492>
 80094c2:	2d00      	cmp	r5, #0
 80094c4:	bfd4      	ite	le
 80094c6:	f1c5 0402 	rsble	r4, r5, #2
 80094ca:	2401      	movgt	r4, #1
 80094cc:	441c      	add	r4, r3
 80094ce:	e7f5      	b.n	80094bc <_svfwprintf_r+0x5ec>
 80094d0:	462c      	mov	r4, r5
 80094d2:	e746      	b.n	8009362 <_svfwprintf_r+0x492>
 80094d4:	2401      	movs	r4, #1
 80094d6:	e744      	b.n	8009362 <_svfwprintf_r+0x492>
 80094d8:	462c      	mov	r4, r5
 80094da:	e7ef      	b.n	80094bc <_svfwprintf_r+0x5ec>
 80094dc:	b101      	cbz	r1, 80094e0 <_svfwprintf_r+0x610>
 80094de:	9615      	str	r6, [sp, #84]	; 0x54
 80094e0:	1d2b      	adds	r3, r5, #4
 80094e2:	06f8      	lsls	r0, r7, #27
 80094e4:	930a      	str	r3, [sp, #40]	; 0x28
 80094e6:	d503      	bpl.n	80094f0 <_svfwprintf_r+0x620>
 80094e8:	682b      	ldr	r3, [r5, #0]
 80094ea:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80094ec:	601a      	str	r2, [r3, #0]
 80094ee:	e004      	b.n	80094fa <_svfwprintf_r+0x62a>
 80094f0:	0679      	lsls	r1, r7, #25
 80094f2:	d5f9      	bpl.n	80094e8 <_svfwprintf_r+0x618>
 80094f4:	682b      	ldr	r3, [r5, #0]
 80094f6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80094f8:	801a      	strh	r2, [r3, #0]
 80094fa:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80094fc:	e521      	b.n	8008f42 <_svfwprintf_r+0x72>
 80094fe:	462a      	mov	r2, r5
 8009500:	f017 0110 	ands.w	r1, r7, #16
 8009504:	f852 3b04 	ldr.w	r3, [r2], #4
 8009508:	920a      	str	r2, [sp, #40]	; 0x28
 800950a:	d103      	bne.n	8009514 <_svfwprintf_r+0x644>
 800950c:	f017 0240 	ands.w	r2, r7, #64	; 0x40
 8009510:	d010      	beq.n	8009534 <_svfwprintf_r+0x664>
 8009512:	b29b      	uxth	r3, r3
 8009514:	2200      	movs	r2, #0
 8009516:	e00d      	b.n	8009534 <_svfwprintf_r+0x664>
 8009518:	462a      	mov	r2, r5
 800951a:	2178      	movs	r1, #120	; 0x78
 800951c:	f852 3b04 	ldr.w	r3, [r2], #4
 8009520:	920a      	str	r2, [sp, #40]	; 0x28
 8009522:	2230      	movs	r2, #48	; 0x30
 8009524:	e9cd 211a 	strd	r2, r1, [sp, #104]	; 0x68
 8009528:	4aa5      	ldr	r2, [pc, #660]	; (80097c0 <_svfwprintf_r+0x8f0>)
 800952a:	920f      	str	r2, [sp, #60]	; 0x3c
 800952c:	f047 0702 	orr.w	r7, r7, #2
 8009530:	2202      	movs	r2, #2
 8009532:	9109      	str	r1, [sp, #36]	; 0x24
 8009534:	2100      	movs	r1, #0
 8009536:	9115      	str	r1, [sp, #84]	; 0x54
 8009538:	1c66      	adds	r6, r4, #1
 800953a:	f000 8218 	beq.w	800996e <_svfwprintf_r+0xa9e>
 800953e:	f027 0180 	bic.w	r1, r7, #128	; 0x80
 8009542:	2b00      	cmp	r3, #0
 8009544:	f040 8217 	bne.w	8009976 <_svfwprintf_r+0xaa6>
 8009548:	2c00      	cmp	r4, #0
 800954a:	f000 8083 	beq.w	8009654 <_svfwprintf_r+0x784>
 800954e:	2a01      	cmp	r2, #1
 8009550:	f040 8214 	bne.w	800997c <_svfwprintf_r+0xaac>
 8009554:	e060      	b.n	8009618 <_svfwprintf_r+0x748>
 8009556:	462b      	mov	r3, r5
 8009558:	2600      	movs	r6, #0
 800955a:	f853 ab04 	ldr.w	sl, [r3], #4
 800955e:	930a      	str	r3, [sp, #40]	; 0x28
 8009560:	f017 0510 	ands.w	r5, r7, #16
 8009564:	9615      	str	r6, [sp, #84]	; 0x54
 8009566:	d12d      	bne.n	80095c4 <_svfwprintf_r+0x6f4>
 8009568:	1c62      	adds	r2, r4, #1
 800956a:	d014      	beq.n	8009596 <_svfwprintf_r+0x6c6>
 800956c:	4622      	mov	r2, r4
 800956e:	4629      	mov	r1, r5
 8009570:	4650      	mov	r0, sl
 8009572:	4626      	mov	r6, r4
 8009574:	f7f6 fe34 	bl	80001e0 <memchr>
 8009578:	b108      	cbz	r0, 800957e <_svfwprintf_r+0x6ae>
 800957a:	eba0 060a 	sub.w	r6, r0, sl
 800957e:	2e27      	cmp	r6, #39	; 0x27
 8009580:	d90e      	bls.n	80095a0 <_svfwprintf_r+0x6d0>
 8009582:	1c71      	adds	r1, r6, #1
 8009584:	0089      	lsls	r1, r1, #2
 8009586:	4658      	mov	r0, fp
 8009588:	f7fd fc5e 	bl	8006e48 <_malloc_r>
 800958c:	2800      	cmp	r0, #0
 800958e:	f43f adce 	beq.w	800912e <_svfwprintf_r+0x25e>
 8009592:	4680      	mov	r8, r0
 8009594:	e007      	b.n	80095a6 <_svfwprintf_r+0x6d6>
 8009596:	4650      	mov	r0, sl
 8009598:	f7f6 fe1a 	bl	80001d0 <strlen>
 800959c:	4606      	mov	r6, r0
 800959e:	e7ee      	b.n	800957e <_svfwprintf_r+0x6ae>
 80095a0:	f04f 0800 	mov.w	r8, #0
 80095a4:	a82a      	add	r0, sp, #168	; 0xa8
 80095a6:	4634      	mov	r4, r6
 80095a8:	2300      	movs	r3, #0
 80095aa:	42b3      	cmp	r3, r6
 80095ac:	d104      	bne.n	80095b8 <_svfwprintf_r+0x6e8>
 80095ae:	2600      	movs	r6, #0
 80095b0:	f840 6023 	str.w	r6, [r0, r3, lsl #2]
 80095b4:	4682      	mov	sl, r0
 80095b6:	e6dc      	b.n	8009372 <_svfwprintf_r+0x4a2>
 80095b8:	f81a 2003 	ldrb.w	r2, [sl, r3]
 80095bc:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 80095c0:	3301      	adds	r3, #1
 80095c2:	e7f2      	b.n	80095aa <_svfwprintf_r+0x6da>
 80095c4:	1c63      	adds	r3, r4, #1
 80095c6:	d011      	beq.n	80095ec <_svfwprintf_r+0x71c>
 80095c8:	4622      	mov	r2, r4
 80095ca:	4631      	mov	r1, r6
 80095cc:	4650      	mov	r0, sl
 80095ce:	f000 fa02 	bl	80099d6 <wmemchr>
 80095d2:	4680      	mov	r8, r0
 80095d4:	2800      	cmp	r0, #0
 80095d6:	f43f ae1a 	beq.w	800920e <_svfwprintf_r+0x33e>
 80095da:	eba0 080a 	sub.w	r8, r0, sl
 80095de:	ea4f 08a8 	mov.w	r8, r8, asr #2
 80095e2:	4544      	cmp	r4, r8
 80095e4:	bfa8      	it	ge
 80095e6:	4644      	movge	r4, r8
 80095e8:	46b0      	mov	r8, r6
 80095ea:	e610      	b.n	800920e <_svfwprintf_r+0x33e>
 80095ec:	4650      	mov	r0, sl
 80095ee:	f000 f9e9 	bl	80099c4 <wcslen>
 80095f2:	4604      	mov	r4, r0
 80095f4:	e7f8      	b.n	80095e8 <_svfwprintf_r+0x718>
 80095f6:	462a      	mov	r2, r5
 80095f8:	06fe      	lsls	r6, r7, #27
 80095fa:	f852 3b04 	ldr.w	r3, [r2], #4
 80095fe:	920a      	str	r2, [sp, #40]	; 0x28
 8009600:	d402      	bmi.n	8009608 <_svfwprintf_r+0x738>
 8009602:	067d      	lsls	r5, r7, #25
 8009604:	d500      	bpl.n	8009608 <_svfwprintf_r+0x738>
 8009606:	b29b      	uxth	r3, r3
 8009608:	2201      	movs	r2, #1
 800960a:	e793      	b.n	8009534 <_svfwprintf_r+0x664>
 800960c:	b101      	cbz	r1, 8009610 <_svfwprintf_r+0x740>
 800960e:	9615      	str	r6, [sp, #84]	; 0x54
 8009610:	4b6c      	ldr	r3, [pc, #432]	; (80097c4 <_svfwprintf_r+0x8f4>)
 8009612:	e520      	b.n	8009056 <_svfwprintf_r+0x186>
 8009614:	2b09      	cmp	r3, #9
 8009616:	d804      	bhi.n	8009622 <_svfwprintf_r+0x752>
 8009618:	3330      	adds	r3, #48	; 0x30
 800961a:	9351      	str	r3, [sp, #324]	; 0x144
 800961c:	f50d 7aa2 	add.w	sl, sp, #324	; 0x144
 8009620:	e1c2      	b.n	80099a8 <_svfwprintf_r+0xad8>
 8009622:	f50d 7aa4 	add.w	sl, sp, #328	; 0x148
 8009626:	250a      	movs	r5, #10
 8009628:	fbb3 f0f5 	udiv	r0, r3, r5
 800962c:	fb05 3210 	mls	r2, r5, r0, r3
 8009630:	3230      	adds	r2, #48	; 0x30
 8009632:	f84a 2d04 	str.w	r2, [sl, #-4]!
 8009636:	461a      	mov	r2, r3
 8009638:	2a09      	cmp	r2, #9
 800963a:	4603      	mov	r3, r0
 800963c:	d8f4      	bhi.n	8009628 <_svfwprintf_r+0x758>
 800963e:	e1b3      	b.n	80099a8 <_svfwprintf_r+0xad8>
 8009640:	f003 020f 	and.w	r2, r3, #15
 8009644:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8009646:	091b      	lsrs	r3, r3, #4
 8009648:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 800964c:	f84a 2d04 	str.w	r2, [sl, #-4]!
 8009650:	d1f6      	bne.n	8009640 <_svfwprintf_r+0x770>
 8009652:	e1a9      	b.n	80099a8 <_svfwprintf_r+0xad8>
 8009654:	b91a      	cbnz	r2, 800965e <_svfwprintf_r+0x78e>
 8009656:	07f8      	lsls	r0, r7, #31
 8009658:	d501      	bpl.n	800965e <_svfwprintf_r+0x78e>
 800965a:	2330      	movs	r3, #48	; 0x30
 800965c:	e7dd      	b.n	800961a <_svfwprintf_r+0x74a>
 800965e:	f50d 7aa4 	add.w	sl, sp, #328	; 0x148
 8009662:	e1a1      	b.n	80099a8 <_svfwprintf_r+0xad8>
 8009664:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8009666:	e684      	b.n	8009372 <_svfwprintf_r+0x4a2>
 8009668:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800966a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800966c:	1a9b      	subs	r3, r3, r2
 800966e:	2b00      	cmp	r3, #0
 8009670:	9310      	str	r3, [sp, #64]	; 0x40
 8009672:	f77f ae94 	ble.w	800939e <_svfwprintf_r+0x4ce>
 8009676:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009678:	2b10      	cmp	r3, #16
 800967a:	dc11      	bgt.n	80096a0 <_svfwprintf_r+0x7d0>
 800967c:	4a52      	ldr	r2, [pc, #328]	; (80097c8 <_svfwprintf_r+0x8f8>)
 800967e:	009b      	lsls	r3, r3, #2
 8009680:	4649      	mov	r1, r9
 8009682:	4658      	mov	r0, fp
 8009684:	f000 fa42 	bl	8009b0c <__ssputs_r>
 8009688:	3001      	adds	r0, #1
 800968a:	f47f ae88 	bne.w	800939e <_svfwprintf_r+0x4ce>
 800968e:	f1b8 0f00 	cmp.w	r8, #0
 8009692:	f43f ad52 	beq.w	800913a <_svfwprintf_r+0x26a>
 8009696:	4641      	mov	r1, r8
 8009698:	4658      	mov	r0, fp
 800969a:	f7fd fb85 	bl	8006da8 <_free_r>
 800969e:	e54c      	b.n	800913a <_svfwprintf_r+0x26a>
 80096a0:	4a49      	ldr	r2, [pc, #292]	; (80097c8 <_svfwprintf_r+0x8f8>)
 80096a2:	2340      	movs	r3, #64	; 0x40
 80096a4:	4649      	mov	r1, r9
 80096a6:	4658      	mov	r0, fp
 80096a8:	f000 fa30 	bl	8009b0c <__ssputs_r>
 80096ac:	3001      	adds	r0, #1
 80096ae:	d0ee      	beq.n	800968e <_svfwprintf_r+0x7be>
 80096b0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80096b2:	3b10      	subs	r3, #16
 80096b4:	9310      	str	r3, [sp, #64]	; 0x40
 80096b6:	e7de      	b.n	8009676 <_svfwprintf_r+0x7a6>
 80096b8:	2340      	movs	r3, #64	; 0x40
 80096ba:	4649      	mov	r1, r9
 80096bc:	4658      	mov	r0, fp
 80096be:	f000 fa25 	bl	8009b0c <__ssputs_r>
 80096c2:	3001      	adds	r0, #1
 80096c4:	d0e3      	beq.n	800968e <_svfwprintf_r+0x7be>
 80096c6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80096c8:	3b10      	subs	r3, #16
 80096ca:	9310      	str	r3, [sp, #64]	; 0x40
 80096cc:	e686      	b.n	80093dc <_svfwprintf_r+0x50c>
 80096ce:	2340      	movs	r3, #64	; 0x40
 80096d0:	4649      	mov	r1, r9
 80096d2:	4658      	mov	r0, fp
 80096d4:	f000 fa1a 	bl	8009b0c <__ssputs_r>
 80096d8:	3001      	adds	r0, #1
 80096da:	d0d8      	beq.n	800968e <_svfwprintf_r+0x7be>
 80096dc:	3e10      	subs	r6, #16
 80096de:	e68e      	b.n	80093fe <_svfwprintf_r+0x52e>
 80096e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80096e2:	2b65      	cmp	r3, #101	; 0x65
 80096e4:	f240 80e4 	bls.w	80098b0 <_svfwprintf_r+0x9e0>
 80096e8:	ec51 0b18 	vmov	r0, r1, d8
 80096ec:	2200      	movs	r2, #0
 80096ee:	2300      	movs	r3, #0
 80096f0:	f7f7 f9ea 	bl	8000ac8 <__aeabi_dcmpeq>
 80096f4:	b358      	cbz	r0, 800974e <_svfwprintf_r+0x87e>
 80096f6:	4a35      	ldr	r2, [pc, #212]	; (80097cc <_svfwprintf_r+0x8fc>)
 80096f8:	2304      	movs	r3, #4
 80096fa:	4649      	mov	r1, r9
 80096fc:	4658      	mov	r0, fp
 80096fe:	f000 fa05 	bl	8009b0c <__ssputs_r>
 8009702:	3001      	adds	r0, #1
 8009704:	d0c3      	beq.n	800968e <_svfwprintf_r+0x7be>
 8009706:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 800970a:	429a      	cmp	r2, r3
 800970c:	db02      	blt.n	8009714 <_svfwprintf_r+0x844>
 800970e:	07fb      	lsls	r3, r7, #31
 8009710:	f57f ae8e 	bpl.w	8009430 <_svfwprintf_r+0x560>
 8009714:	2304      	movs	r3, #4
 8009716:	aa16      	add	r2, sp, #88	; 0x58
 8009718:	4649      	mov	r1, r9
 800971a:	4658      	mov	r0, fp
 800971c:	f000 f9f6 	bl	8009b0c <__ssputs_r>
 8009720:	3001      	adds	r0, #1
 8009722:	d0b4      	beq.n	800968e <_svfwprintf_r+0x7be>
 8009724:	9c19      	ldr	r4, [sp, #100]	; 0x64
 8009726:	3c01      	subs	r4, #1
 8009728:	2c00      	cmp	r4, #0
 800972a:	f77f ae81 	ble.w	8009430 <_svfwprintf_r+0x560>
 800972e:	4d28      	ldr	r5, [pc, #160]	; (80097d0 <_svfwprintf_r+0x900>)
 8009730:	2c10      	cmp	r4, #16
 8009732:	dc02      	bgt.n	800973a <_svfwprintf_r+0x86a>
 8009734:	4a26      	ldr	r2, [pc, #152]	; (80097d0 <_svfwprintf_r+0x900>)
 8009736:	00a3      	lsls	r3, r4, #2
 8009738:	e673      	b.n	8009422 <_svfwprintf_r+0x552>
 800973a:	2340      	movs	r3, #64	; 0x40
 800973c:	462a      	mov	r2, r5
 800973e:	4649      	mov	r1, r9
 8009740:	4658      	mov	r0, fp
 8009742:	f000 f9e3 	bl	8009b0c <__ssputs_r>
 8009746:	3001      	adds	r0, #1
 8009748:	d0a1      	beq.n	800968e <_svfwprintf_r+0x7be>
 800974a:	3c10      	subs	r4, #16
 800974c:	e7f0      	b.n	8009730 <_svfwprintf_r+0x860>
 800974e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8009750:	2b00      	cmp	r3, #0
 8009752:	dc3f      	bgt.n	80097d4 <_svfwprintf_r+0x904>
 8009754:	4a1d      	ldr	r2, [pc, #116]	; (80097cc <_svfwprintf_r+0x8fc>)
 8009756:	2304      	movs	r3, #4
 8009758:	4649      	mov	r1, r9
 800975a:	4658      	mov	r0, fp
 800975c:	f000 f9d6 	bl	8009b0c <__ssputs_r>
 8009760:	3001      	adds	r0, #1
 8009762:	d094      	beq.n	800968e <_svfwprintf_r+0x7be>
 8009764:	e9dd 3218 	ldrd	r3, r2, [sp, #96]	; 0x60
 8009768:	4313      	orrs	r3, r2
 800976a:	f007 0201 	and.w	r2, r7, #1
 800976e:	4313      	orrs	r3, r2
 8009770:	f43f ae5e 	beq.w	8009430 <_svfwprintf_r+0x560>
 8009774:	2304      	movs	r3, #4
 8009776:	aa16      	add	r2, sp, #88	; 0x58
 8009778:	4649      	mov	r1, r9
 800977a:	4658      	mov	r0, fp
 800977c:	f000 f9c6 	bl	8009b0c <__ssputs_r>
 8009780:	3001      	adds	r0, #1
 8009782:	d084      	beq.n	800968e <_svfwprintf_r+0x7be>
 8009784:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8009786:	2c00      	cmp	r4, #0
 8009788:	da0c      	bge.n	80097a4 <_svfwprintf_r+0x8d4>
 800978a:	4d11      	ldr	r5, [pc, #68]	; (80097d0 <_svfwprintf_r+0x900>)
 800978c:	4264      	negs	r4, r4
 800978e:	2c10      	cmp	r4, #16
 8009790:	dc0b      	bgt.n	80097aa <_svfwprintf_r+0x8da>
 8009792:	4a0f      	ldr	r2, [pc, #60]	; (80097d0 <_svfwprintf_r+0x900>)
 8009794:	00a3      	lsls	r3, r4, #2
 8009796:	4649      	mov	r1, r9
 8009798:	4658      	mov	r0, fp
 800979a:	f000 f9b7 	bl	8009b0c <__ssputs_r>
 800979e:	3001      	adds	r0, #1
 80097a0:	f43f af75 	beq.w	800968e <_svfwprintf_r+0x7be>
 80097a4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80097a6:	009b      	lsls	r3, r3, #2
 80097a8:	e63a      	b.n	8009420 <_svfwprintf_r+0x550>
 80097aa:	2340      	movs	r3, #64	; 0x40
 80097ac:	462a      	mov	r2, r5
 80097ae:	4649      	mov	r1, r9
 80097b0:	4658      	mov	r0, fp
 80097b2:	f000 f9ab 	bl	8009b0c <__ssputs_r>
 80097b6:	3001      	adds	r0, #1
 80097b8:	f43f af69 	beq.w	800968e <_svfwprintf_r+0x7be>
 80097bc:	3c10      	subs	r4, #16
 80097be:	e7e6      	b.n	800978e <_svfwprintf_r+0x8be>
 80097c0:	0800d518 	.word	0x0800d518
 80097c4:	0800d4d4 	.word	0x0800d4d4
 80097c8:	0800d564 	.word	0x0800d564
 80097cc:	0800d55c 	.word	0x0800d55c
 80097d0:	0800d5a4 	.word	0x0800d5a4
 80097d4:	9c19      	ldr	r4, [sp, #100]	; 0x64
 80097d6:	f344 041d 	sbfx	r4, r4, #0, #30
 80097da:	42ac      	cmp	r4, r5
 80097dc:	bfa8      	it	ge
 80097de:	462c      	movge	r4, r5
 80097e0:	2c00      	cmp	r4, #0
 80097e2:	dc20      	bgt.n	8009826 <_svfwprintf_r+0x956>
 80097e4:	2c00      	cmp	r4, #0
 80097e6:	bfac      	ite	ge
 80097e8:	1b2c      	subge	r4, r5, r4
 80097ea:	462c      	movlt	r4, r5
 80097ec:	2c00      	cmp	r4, #0
 80097ee:	dd0b      	ble.n	8009808 <_svfwprintf_r+0x938>
 80097f0:	4e72      	ldr	r6, [pc, #456]	; (80099bc <_svfwprintf_r+0xaec>)
 80097f2:	2c10      	cmp	r4, #16
 80097f4:	dc20      	bgt.n	8009838 <_svfwprintf_r+0x968>
 80097f6:	4a71      	ldr	r2, [pc, #452]	; (80099bc <_svfwprintf_r+0xaec>)
 80097f8:	00a3      	lsls	r3, r4, #2
 80097fa:	4649      	mov	r1, r9
 80097fc:	4658      	mov	r0, fp
 80097fe:	f000 f985 	bl	8009b0c <__ssputs_r>
 8009802:	3001      	adds	r0, #1
 8009804:	f43f af43 	beq.w	800968e <_svfwprintf_r+0x7be>
 8009808:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 800980c:	429a      	cmp	r2, r3
 800980e:	ea4f 0585 	mov.w	r5, r5, lsl #2
 8009812:	da1c      	bge.n	800984e <_svfwprintf_r+0x97e>
 8009814:	2304      	movs	r3, #4
 8009816:	aa16      	add	r2, sp, #88	; 0x58
 8009818:	4649      	mov	r1, r9
 800981a:	4658      	mov	r0, fp
 800981c:	f000 f976 	bl	8009b0c <__ssputs_r>
 8009820:	3001      	adds	r0, #1
 8009822:	d116      	bne.n	8009852 <_svfwprintf_r+0x982>
 8009824:	e733      	b.n	800968e <_svfwprintf_r+0x7be>
 8009826:	00a3      	lsls	r3, r4, #2
 8009828:	4652      	mov	r2, sl
 800982a:	4649      	mov	r1, r9
 800982c:	4658      	mov	r0, fp
 800982e:	f000 f96d 	bl	8009b0c <__ssputs_r>
 8009832:	3001      	adds	r0, #1
 8009834:	d1d6      	bne.n	80097e4 <_svfwprintf_r+0x914>
 8009836:	e72a      	b.n	800968e <_svfwprintf_r+0x7be>
 8009838:	2340      	movs	r3, #64	; 0x40
 800983a:	4632      	mov	r2, r6
 800983c:	4649      	mov	r1, r9
 800983e:	4658      	mov	r0, fp
 8009840:	f000 f964 	bl	8009b0c <__ssputs_r>
 8009844:	3001      	adds	r0, #1
 8009846:	f43f af22 	beq.w	800968e <_svfwprintf_r+0x7be>
 800984a:	3c10      	subs	r4, #16
 800984c:	e7d1      	b.n	80097f2 <_svfwprintf_r+0x922>
 800984e:	07fe      	lsls	r6, r7, #31
 8009850:	d4e0      	bmi.n	8009814 <_svfwprintf_r+0x944>
 8009852:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009854:	ebc5 0483 	rsb	r4, r5, r3, lsl #2
 8009858:	10a2      	asrs	r2, r4, #2
 800985a:	9c18      	ldr	r4, [sp, #96]	; 0x60
 800985c:	1b1c      	subs	r4, r3, r4
 800985e:	4294      	cmp	r4, r2
 8009860:	bfa8      	it	ge
 8009862:	4614      	movge	r4, r2
 8009864:	2c00      	cmp	r4, #0
 8009866:	dd09      	ble.n	800987c <_svfwprintf_r+0x9ac>
 8009868:	00a3      	lsls	r3, r4, #2
 800986a:	eb0a 0205 	add.w	r2, sl, r5
 800986e:	4649      	mov	r1, r9
 8009870:	4658      	mov	r0, fp
 8009872:	f000 f94b 	bl	8009b0c <__ssputs_r>
 8009876:	3001      	adds	r0, #1
 8009878:	f43f af09 	beq.w	800968e <_svfwprintf_r+0x7be>
 800987c:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8009880:	2c00      	cmp	r4, #0
 8009882:	eba3 0302 	sub.w	r3, r3, r2
 8009886:	bfac      	ite	ge
 8009888:	1b1c      	subge	r4, r3, r4
 800988a:	461c      	movlt	r4, r3
 800988c:	2c00      	cmp	r4, #0
 800988e:	f77f adcf 	ble.w	8009430 <_svfwprintf_r+0x560>
 8009892:	4d4a      	ldr	r5, [pc, #296]	; (80099bc <_svfwprintf_r+0xaec>)
 8009894:	2c10      	cmp	r4, #16
 8009896:	f77f af4d 	ble.w	8009734 <_svfwprintf_r+0x864>
 800989a:	2340      	movs	r3, #64	; 0x40
 800989c:	462a      	mov	r2, r5
 800989e:	4649      	mov	r1, r9
 80098a0:	4658      	mov	r0, fp
 80098a2:	f000 f933 	bl	8009b0c <__ssputs_r>
 80098a6:	3001      	adds	r0, #1
 80098a8:	f43f aef1 	beq.w	800968e <_svfwprintf_r+0x7be>
 80098ac:	3c10      	subs	r4, #16
 80098ae:	e7f1      	b.n	8009894 <_svfwprintf_r+0x9c4>
 80098b0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80098b2:	2b01      	cmp	r3, #1
 80098b4:	4652      	mov	r2, sl
 80098b6:	f04f 0304 	mov.w	r3, #4
 80098ba:	4649      	mov	r1, r9
 80098bc:	4658      	mov	r0, fp
 80098be:	dc01      	bgt.n	80098c4 <_svfwprintf_r+0x9f4>
 80098c0:	07fc      	lsls	r4, r7, #31
 80098c2:	d51b      	bpl.n	80098fc <_svfwprintf_r+0xa2c>
 80098c4:	f000 f922 	bl	8009b0c <__ssputs_r>
 80098c8:	3001      	adds	r0, #1
 80098ca:	f43f aee0 	beq.w	800968e <_svfwprintf_r+0x7be>
 80098ce:	2304      	movs	r3, #4
 80098d0:	aa16      	add	r2, sp, #88	; 0x58
 80098d2:	4649      	mov	r1, r9
 80098d4:	4658      	mov	r0, fp
 80098d6:	f000 f919 	bl	8009b0c <__ssputs_r>
 80098da:	3001      	adds	r0, #1
 80098dc:	f43f aed7 	beq.w	800968e <_svfwprintf_r+0x7be>
 80098e0:	9c19      	ldr	r4, [sp, #100]	; 0x64
 80098e2:	ec51 0b18 	vmov	r0, r1, d8
 80098e6:	2200      	movs	r2, #0
 80098e8:	2300      	movs	r3, #0
 80098ea:	3c01      	subs	r4, #1
 80098ec:	f7f7 f8ec 	bl	8000ac8 <__aeabi_dcmpeq>
 80098f0:	b968      	cbnz	r0, 800990e <_svfwprintf_r+0xa3e>
 80098f2:	00a3      	lsls	r3, r4, #2
 80098f4:	f10a 0204 	add.w	r2, sl, #4
 80098f8:	4649      	mov	r1, r9
 80098fa:	4658      	mov	r0, fp
 80098fc:	f000 f906 	bl	8009b0c <__ssputs_r>
 8009900:	3001      	adds	r0, #1
 8009902:	f43f aec4 	beq.w	800968e <_svfwprintf_r+0x7be>
 8009906:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009908:	aa1c      	add	r2, sp, #112	; 0x70
 800990a:	009b      	lsls	r3, r3, #2
 800990c:	e589      	b.n	8009422 <_svfwprintf_r+0x552>
 800990e:	2c00      	cmp	r4, #0
 8009910:	ddf9      	ble.n	8009906 <_svfwprintf_r+0xa36>
 8009912:	4d2a      	ldr	r5, [pc, #168]	; (80099bc <_svfwprintf_r+0xaec>)
 8009914:	2c10      	cmp	r4, #16
 8009916:	dc02      	bgt.n	800991e <_svfwprintf_r+0xa4e>
 8009918:	4a28      	ldr	r2, [pc, #160]	; (80099bc <_svfwprintf_r+0xaec>)
 800991a:	00a3      	lsls	r3, r4, #2
 800991c:	e7ec      	b.n	80098f8 <_svfwprintf_r+0xa28>
 800991e:	2340      	movs	r3, #64	; 0x40
 8009920:	462a      	mov	r2, r5
 8009922:	4649      	mov	r1, r9
 8009924:	4658      	mov	r0, fp
 8009926:	f000 f8f1 	bl	8009b0c <__ssputs_r>
 800992a:	3001      	adds	r0, #1
 800992c:	f43f aeaf 	beq.w	800968e <_svfwprintf_r+0x7be>
 8009930:	3c10      	subs	r4, #16
 8009932:	e7ef      	b.n	8009914 <_svfwprintf_r+0xa44>
 8009934:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009936:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009938:	1a9c      	subs	r4, r3, r2
 800993a:	2c00      	cmp	r4, #0
 800993c:	f77f ad7b 	ble.w	8009436 <_svfwprintf_r+0x566>
 8009940:	2c10      	cmp	r4, #16
 8009942:	dc09      	bgt.n	8009958 <_svfwprintf_r+0xa88>
 8009944:	4a1e      	ldr	r2, [pc, #120]	; (80099c0 <_svfwprintf_r+0xaf0>)
 8009946:	00a3      	lsls	r3, r4, #2
 8009948:	4649      	mov	r1, r9
 800994a:	4658      	mov	r0, fp
 800994c:	f000 f8de 	bl	8009b0c <__ssputs_r>
 8009950:	3001      	adds	r0, #1
 8009952:	f47f ad70 	bne.w	8009436 <_svfwprintf_r+0x566>
 8009956:	e69a      	b.n	800968e <_svfwprintf_r+0x7be>
 8009958:	4a19      	ldr	r2, [pc, #100]	; (80099c0 <_svfwprintf_r+0xaf0>)
 800995a:	2340      	movs	r3, #64	; 0x40
 800995c:	4649      	mov	r1, r9
 800995e:	4658      	mov	r0, fp
 8009960:	f000 f8d4 	bl	8009b0c <__ssputs_r>
 8009964:	3001      	adds	r0, #1
 8009966:	f43f ae92 	beq.w	800968e <_svfwprintf_r+0x7be>
 800996a:	3c10      	subs	r4, #16
 800996c:	e7e8      	b.n	8009940 <_svfwprintf_r+0xa70>
 800996e:	4639      	mov	r1, r7
 8009970:	2b00      	cmp	r3, #0
 8009972:	f43f adec 	beq.w	800954e <_svfwprintf_r+0x67e>
 8009976:	2a01      	cmp	r2, #1
 8009978:	f43f ae4c 	beq.w	8009614 <_svfwprintf_r+0x744>
 800997c:	2a02      	cmp	r2, #2
 800997e:	f50d 7aa4 	add.w	sl, sp, #328	; 0x148
 8009982:	f43f ae5d 	beq.w	8009640 <_svfwprintf_r+0x770>
 8009986:	f003 0207 	and.w	r2, r3, #7
 800998a:	3230      	adds	r2, #48	; 0x30
 800998c:	08db      	lsrs	r3, r3, #3
 800998e:	4650      	mov	r0, sl
 8009990:	f84a 2d04 	str.w	r2, [sl, #-4]!
 8009994:	d1f7      	bne.n	8009986 <_svfwprintf_r+0xab6>
 8009996:	07cd      	lsls	r5, r1, #31
 8009998:	d506      	bpl.n	80099a8 <_svfwprintf_r+0xad8>
 800999a:	2a30      	cmp	r2, #48	; 0x30
 800999c:	d004      	beq.n	80099a8 <_svfwprintf_r+0xad8>
 800999e:	2330      	movs	r3, #48	; 0x30
 80099a0:	f84a 3c04 	str.w	r3, [sl, #-4]
 80099a4:	f1a0 0a08 	sub.w	sl, r0, #8
 80099a8:	ab52      	add	r3, sp, #328	; 0x148
 80099aa:	4626      	mov	r6, r4
 80099ac:	eba3 040a 	sub.w	r4, r3, sl
 80099b0:	10a4      	asrs	r4, r4, #2
 80099b2:	460f      	mov	r7, r1
 80099b4:	f04f 0800 	mov.w	r8, #0
 80099b8:	4645      	mov	r5, r8
 80099ba:	e4da      	b.n	8009372 <_svfwprintf_r+0x4a2>
 80099bc:	0800d5a4 	.word	0x0800d5a4
 80099c0:	0800d564 	.word	0x0800d564

080099c4 <wcslen>:
 80099c4:	4602      	mov	r2, r0
 80099c6:	4613      	mov	r3, r2
 80099c8:	3204      	adds	r2, #4
 80099ca:	6819      	ldr	r1, [r3, #0]
 80099cc:	2900      	cmp	r1, #0
 80099ce:	d1fa      	bne.n	80099c6 <wcslen+0x2>
 80099d0:	1a18      	subs	r0, r3, r0
 80099d2:	1080      	asrs	r0, r0, #2
 80099d4:	4770      	bx	lr

080099d6 <wmemchr>:
 80099d6:	b530      	push	{r4, r5, lr}
 80099d8:	2400      	movs	r4, #0
 80099da:	4294      	cmp	r4, r2
 80099dc:	4603      	mov	r3, r0
 80099de:	d102      	bne.n	80099e6 <wmemchr+0x10>
 80099e0:	2300      	movs	r3, #0
 80099e2:	4618      	mov	r0, r3
 80099e4:	bd30      	pop	{r4, r5, pc}
 80099e6:	681d      	ldr	r5, [r3, #0]
 80099e8:	428d      	cmp	r5, r1
 80099ea:	f100 0004 	add.w	r0, r0, #4
 80099ee:	d0f8      	beq.n	80099e2 <wmemchr+0xc>
 80099f0:	3401      	adds	r4, #1
 80099f2:	e7f2      	b.n	80099da <wmemchr+0x4>

080099f4 <__assert_func>:
 80099f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80099f6:	4614      	mov	r4, r2
 80099f8:	461a      	mov	r2, r3
 80099fa:	4b09      	ldr	r3, [pc, #36]	; (8009a20 <__assert_func+0x2c>)
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	4605      	mov	r5, r0
 8009a00:	68d8      	ldr	r0, [r3, #12]
 8009a02:	b14c      	cbz	r4, 8009a18 <__assert_func+0x24>
 8009a04:	4b07      	ldr	r3, [pc, #28]	; (8009a24 <__assert_func+0x30>)
 8009a06:	9100      	str	r1, [sp, #0]
 8009a08:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009a0c:	4906      	ldr	r1, [pc, #24]	; (8009a28 <__assert_func+0x34>)
 8009a0e:	462b      	mov	r3, r5
 8009a10:	f000 f858 	bl	8009ac4 <fiprintf>
 8009a14:	f000 fafc 	bl	800a010 <abort>
 8009a18:	4b04      	ldr	r3, [pc, #16]	; (8009a2c <__assert_func+0x38>)
 8009a1a:	461c      	mov	r4, r3
 8009a1c:	e7f3      	b.n	8009a06 <__assert_func+0x12>
 8009a1e:	bf00      	nop
 8009a20:	2000001c 	.word	0x2000001c
 8009a24:	0800d5e4 	.word	0x0800d5e4
 8009a28:	0800d5f1 	.word	0x0800d5f1
 8009a2c:	0800d61f 	.word	0x0800d61f

08009a30 <btowc>:
 8009a30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009a32:	1c43      	adds	r3, r0, #1
 8009a34:	b087      	sub	sp, #28
 8009a36:	d103      	bne.n	8009a40 <btowc+0x10>
 8009a38:	f04f 30ff 	mov.w	r0, #4294967295
 8009a3c:	b007      	add	sp, #28
 8009a3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009a40:	4d1c      	ldr	r5, [pc, #112]	; (8009ab4 <btowc+0x84>)
 8009a42:	f88d 000b 	strb.w	r0, [sp, #11]
 8009a46:	ae04      	add	r6, sp, #16
 8009a48:	2208      	movs	r2, #8
 8009a4a:	2100      	movs	r1, #0
 8009a4c:	4630      	mov	r0, r6
 8009a4e:	f7fd f9a3 	bl	8006d98 <memset>
 8009a52:	682f      	ldr	r7, [r5, #0]
 8009a54:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 8009a56:	b9fc      	cbnz	r4, 8009a98 <btowc+0x68>
 8009a58:	2050      	movs	r0, #80	; 0x50
 8009a5a:	f7fe fe15 	bl	8008688 <malloc>
 8009a5e:	4602      	mov	r2, r0
 8009a60:	65b8      	str	r0, [r7, #88]	; 0x58
 8009a62:	b920      	cbnz	r0, 8009a6e <btowc+0x3e>
 8009a64:	4b14      	ldr	r3, [pc, #80]	; (8009ab8 <btowc+0x88>)
 8009a66:	4815      	ldr	r0, [pc, #84]	; (8009abc <btowc+0x8c>)
 8009a68:	2118      	movs	r1, #24
 8009a6a:	f7ff ffc3 	bl	80099f4 <__assert_func>
 8009a6e:	682b      	ldr	r3, [r5, #0]
 8009a70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a72:	e9c3 4400 	strd	r4, r4, [r3]
 8009a76:	e9c3 4402 	strd	r4, r4, [r3, #8]
 8009a7a:	e9c3 4404 	strd	r4, r4, [r3, #16]
 8009a7e:	e9c3 440a 	strd	r4, r4, [r3, #40]	; 0x28
 8009a82:	e9c3 440c 	strd	r4, r4, [r3, #48]	; 0x30
 8009a86:	e9c3 440e 	strd	r4, r4, [r3, #56]	; 0x38
 8009a8a:	e9c3 4410 	strd	r4, r4, [r3, #64]	; 0x40
 8009a8e:	e9c3 4412 	strd	r4, r4, [r3, #72]	; 0x48
 8009a92:	619c      	str	r4, [r3, #24]
 8009a94:	771c      	strb	r4, [r3, #28]
 8009a96:	625c      	str	r4, [r3, #36]	; 0x24
 8009a98:	4b09      	ldr	r3, [pc, #36]	; (8009ac0 <btowc+0x90>)
 8009a9a:	9600      	str	r6, [sp, #0]
 8009a9c:	f8d3 40e4 	ldr.w	r4, [r3, #228]	; 0xe4
 8009aa0:	6828      	ldr	r0, [r5, #0]
 8009aa2:	2301      	movs	r3, #1
 8009aa4:	f10d 020b 	add.w	r2, sp, #11
 8009aa8:	a903      	add	r1, sp, #12
 8009aaa:	47a0      	blx	r4
 8009aac:	2801      	cmp	r0, #1
 8009aae:	d8c3      	bhi.n	8009a38 <btowc+0x8>
 8009ab0:	9803      	ldr	r0, [sp, #12]
 8009ab2:	e7c3      	b.n	8009a3c <btowc+0xc>
 8009ab4:	2000001c 	.word	0x2000001c
 8009ab8:	0800d2b1 	.word	0x0800d2b1
 8009abc:	0800d620 	.word	0x0800d620
 8009ac0:	20000080 	.word	0x20000080

08009ac4 <fiprintf>:
 8009ac4:	b40e      	push	{r1, r2, r3}
 8009ac6:	b503      	push	{r0, r1, lr}
 8009ac8:	4601      	mov	r1, r0
 8009aca:	ab03      	add	r3, sp, #12
 8009acc:	4805      	ldr	r0, [pc, #20]	; (8009ae4 <fiprintf+0x20>)
 8009ace:	f853 2b04 	ldr.w	r2, [r3], #4
 8009ad2:	6800      	ldr	r0, [r0, #0]
 8009ad4:	9301      	str	r3, [sp, #4]
 8009ad6:	f000 f89d 	bl	8009c14 <_vfiprintf_r>
 8009ada:	b002      	add	sp, #8
 8009adc:	f85d eb04 	ldr.w	lr, [sp], #4
 8009ae0:	b003      	add	sp, #12
 8009ae2:	4770      	bx	lr
 8009ae4:	2000001c 	.word	0x2000001c

08009ae8 <__ascii_mbtowc>:
 8009ae8:	b082      	sub	sp, #8
 8009aea:	b901      	cbnz	r1, 8009aee <__ascii_mbtowc+0x6>
 8009aec:	a901      	add	r1, sp, #4
 8009aee:	b142      	cbz	r2, 8009b02 <__ascii_mbtowc+0x1a>
 8009af0:	b14b      	cbz	r3, 8009b06 <__ascii_mbtowc+0x1e>
 8009af2:	7813      	ldrb	r3, [r2, #0]
 8009af4:	600b      	str	r3, [r1, #0]
 8009af6:	7812      	ldrb	r2, [r2, #0]
 8009af8:	1e10      	subs	r0, r2, #0
 8009afa:	bf18      	it	ne
 8009afc:	2001      	movne	r0, #1
 8009afe:	b002      	add	sp, #8
 8009b00:	4770      	bx	lr
 8009b02:	4610      	mov	r0, r2
 8009b04:	e7fb      	b.n	8009afe <__ascii_mbtowc+0x16>
 8009b06:	f06f 0001 	mvn.w	r0, #1
 8009b0a:	e7f8      	b.n	8009afe <__ascii_mbtowc+0x16>

08009b0c <__ssputs_r>:
 8009b0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b10:	688e      	ldr	r6, [r1, #8]
 8009b12:	429e      	cmp	r6, r3
 8009b14:	4682      	mov	sl, r0
 8009b16:	460c      	mov	r4, r1
 8009b18:	4690      	mov	r8, r2
 8009b1a:	461f      	mov	r7, r3
 8009b1c:	d838      	bhi.n	8009b90 <__ssputs_r+0x84>
 8009b1e:	898a      	ldrh	r2, [r1, #12]
 8009b20:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009b24:	d032      	beq.n	8009b8c <__ssputs_r+0x80>
 8009b26:	6825      	ldr	r5, [r4, #0]
 8009b28:	6909      	ldr	r1, [r1, #16]
 8009b2a:	eba5 0901 	sub.w	r9, r5, r1
 8009b2e:	6965      	ldr	r5, [r4, #20]
 8009b30:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009b34:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009b38:	3301      	adds	r3, #1
 8009b3a:	444b      	add	r3, r9
 8009b3c:	106d      	asrs	r5, r5, #1
 8009b3e:	429d      	cmp	r5, r3
 8009b40:	bf38      	it	cc
 8009b42:	461d      	movcc	r5, r3
 8009b44:	0553      	lsls	r3, r2, #21
 8009b46:	d531      	bpl.n	8009bac <__ssputs_r+0xa0>
 8009b48:	4629      	mov	r1, r5
 8009b4a:	f7fd f97d 	bl	8006e48 <_malloc_r>
 8009b4e:	4606      	mov	r6, r0
 8009b50:	b950      	cbnz	r0, 8009b68 <__ssputs_r+0x5c>
 8009b52:	230c      	movs	r3, #12
 8009b54:	f8ca 3000 	str.w	r3, [sl]
 8009b58:	89a3      	ldrh	r3, [r4, #12]
 8009b5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009b5e:	81a3      	strh	r3, [r4, #12]
 8009b60:	f04f 30ff 	mov.w	r0, #4294967295
 8009b64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b68:	6921      	ldr	r1, [r4, #16]
 8009b6a:	464a      	mov	r2, r9
 8009b6c:	f7fd f906 	bl	8006d7c <memcpy>
 8009b70:	89a3      	ldrh	r3, [r4, #12]
 8009b72:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009b76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b7a:	81a3      	strh	r3, [r4, #12]
 8009b7c:	6126      	str	r6, [r4, #16]
 8009b7e:	6165      	str	r5, [r4, #20]
 8009b80:	444e      	add	r6, r9
 8009b82:	eba5 0509 	sub.w	r5, r5, r9
 8009b86:	6026      	str	r6, [r4, #0]
 8009b88:	60a5      	str	r5, [r4, #8]
 8009b8a:	463e      	mov	r6, r7
 8009b8c:	42be      	cmp	r6, r7
 8009b8e:	d900      	bls.n	8009b92 <__ssputs_r+0x86>
 8009b90:	463e      	mov	r6, r7
 8009b92:	4632      	mov	r2, r6
 8009b94:	6820      	ldr	r0, [r4, #0]
 8009b96:	4641      	mov	r1, r8
 8009b98:	f000 fa41 	bl	800a01e <memmove>
 8009b9c:	68a3      	ldr	r3, [r4, #8]
 8009b9e:	6822      	ldr	r2, [r4, #0]
 8009ba0:	1b9b      	subs	r3, r3, r6
 8009ba2:	4432      	add	r2, r6
 8009ba4:	60a3      	str	r3, [r4, #8]
 8009ba6:	6022      	str	r2, [r4, #0]
 8009ba8:	2000      	movs	r0, #0
 8009baa:	e7db      	b.n	8009b64 <__ssputs_r+0x58>
 8009bac:	462a      	mov	r2, r5
 8009bae:	f000 fa50 	bl	800a052 <_realloc_r>
 8009bb2:	4606      	mov	r6, r0
 8009bb4:	2800      	cmp	r0, #0
 8009bb6:	d1e1      	bne.n	8009b7c <__ssputs_r+0x70>
 8009bb8:	6921      	ldr	r1, [r4, #16]
 8009bba:	4650      	mov	r0, sl
 8009bbc:	f7fd f8f4 	bl	8006da8 <_free_r>
 8009bc0:	e7c7      	b.n	8009b52 <__ssputs_r+0x46>

08009bc2 <__sfputc_r>:
 8009bc2:	6893      	ldr	r3, [r2, #8]
 8009bc4:	3b01      	subs	r3, #1
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	b410      	push	{r4}
 8009bca:	6093      	str	r3, [r2, #8]
 8009bcc:	da08      	bge.n	8009be0 <__sfputc_r+0x1e>
 8009bce:	6994      	ldr	r4, [r2, #24]
 8009bd0:	42a3      	cmp	r3, r4
 8009bd2:	db01      	blt.n	8009bd8 <__sfputc_r+0x16>
 8009bd4:	290a      	cmp	r1, #10
 8009bd6:	d103      	bne.n	8009be0 <__sfputc_r+0x1e>
 8009bd8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009bdc:	f000 b94a 	b.w	8009e74 <__swbuf_r>
 8009be0:	6813      	ldr	r3, [r2, #0]
 8009be2:	1c58      	adds	r0, r3, #1
 8009be4:	6010      	str	r0, [r2, #0]
 8009be6:	7019      	strb	r1, [r3, #0]
 8009be8:	4608      	mov	r0, r1
 8009bea:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009bee:	4770      	bx	lr

08009bf0 <__sfputs_r>:
 8009bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bf2:	4606      	mov	r6, r0
 8009bf4:	460f      	mov	r7, r1
 8009bf6:	4614      	mov	r4, r2
 8009bf8:	18d5      	adds	r5, r2, r3
 8009bfa:	42ac      	cmp	r4, r5
 8009bfc:	d101      	bne.n	8009c02 <__sfputs_r+0x12>
 8009bfe:	2000      	movs	r0, #0
 8009c00:	e007      	b.n	8009c12 <__sfputs_r+0x22>
 8009c02:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c06:	463a      	mov	r2, r7
 8009c08:	4630      	mov	r0, r6
 8009c0a:	f7ff ffda 	bl	8009bc2 <__sfputc_r>
 8009c0e:	1c43      	adds	r3, r0, #1
 8009c10:	d1f3      	bne.n	8009bfa <__sfputs_r+0xa>
 8009c12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009c14 <_vfiprintf_r>:
 8009c14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c18:	460d      	mov	r5, r1
 8009c1a:	b09d      	sub	sp, #116	; 0x74
 8009c1c:	4614      	mov	r4, r2
 8009c1e:	4698      	mov	r8, r3
 8009c20:	4606      	mov	r6, r0
 8009c22:	b118      	cbz	r0, 8009c2c <_vfiprintf_r+0x18>
 8009c24:	6983      	ldr	r3, [r0, #24]
 8009c26:	b90b      	cbnz	r3, 8009c2c <_vfiprintf_r+0x18>
 8009c28:	f7fc ff7e 	bl	8006b28 <__sinit>
 8009c2c:	4b89      	ldr	r3, [pc, #548]	; (8009e54 <_vfiprintf_r+0x240>)
 8009c2e:	429d      	cmp	r5, r3
 8009c30:	d11b      	bne.n	8009c6a <_vfiprintf_r+0x56>
 8009c32:	6875      	ldr	r5, [r6, #4]
 8009c34:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009c36:	07d9      	lsls	r1, r3, #31
 8009c38:	d405      	bmi.n	8009c46 <_vfiprintf_r+0x32>
 8009c3a:	89ab      	ldrh	r3, [r5, #12]
 8009c3c:	059a      	lsls	r2, r3, #22
 8009c3e:	d402      	bmi.n	8009c46 <_vfiprintf_r+0x32>
 8009c40:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009c42:	f7fd f834 	bl	8006cae <__retarget_lock_acquire_recursive>
 8009c46:	89ab      	ldrh	r3, [r5, #12]
 8009c48:	071b      	lsls	r3, r3, #28
 8009c4a:	d501      	bpl.n	8009c50 <_vfiprintf_r+0x3c>
 8009c4c:	692b      	ldr	r3, [r5, #16]
 8009c4e:	b9eb      	cbnz	r3, 8009c8c <_vfiprintf_r+0x78>
 8009c50:	4629      	mov	r1, r5
 8009c52:	4630      	mov	r0, r6
 8009c54:	f000 f96e 	bl	8009f34 <__swsetup_r>
 8009c58:	b1c0      	cbz	r0, 8009c8c <_vfiprintf_r+0x78>
 8009c5a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009c5c:	07dc      	lsls	r4, r3, #31
 8009c5e:	d50e      	bpl.n	8009c7e <_vfiprintf_r+0x6a>
 8009c60:	f04f 30ff 	mov.w	r0, #4294967295
 8009c64:	b01d      	add	sp, #116	; 0x74
 8009c66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c6a:	4b7b      	ldr	r3, [pc, #492]	; (8009e58 <_vfiprintf_r+0x244>)
 8009c6c:	429d      	cmp	r5, r3
 8009c6e:	d101      	bne.n	8009c74 <_vfiprintf_r+0x60>
 8009c70:	68b5      	ldr	r5, [r6, #8]
 8009c72:	e7df      	b.n	8009c34 <_vfiprintf_r+0x20>
 8009c74:	4b79      	ldr	r3, [pc, #484]	; (8009e5c <_vfiprintf_r+0x248>)
 8009c76:	429d      	cmp	r5, r3
 8009c78:	bf08      	it	eq
 8009c7a:	68f5      	ldreq	r5, [r6, #12]
 8009c7c:	e7da      	b.n	8009c34 <_vfiprintf_r+0x20>
 8009c7e:	89ab      	ldrh	r3, [r5, #12]
 8009c80:	0598      	lsls	r0, r3, #22
 8009c82:	d4ed      	bmi.n	8009c60 <_vfiprintf_r+0x4c>
 8009c84:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009c86:	f7fd f813 	bl	8006cb0 <__retarget_lock_release_recursive>
 8009c8a:	e7e9      	b.n	8009c60 <_vfiprintf_r+0x4c>
 8009c8c:	2300      	movs	r3, #0
 8009c8e:	9309      	str	r3, [sp, #36]	; 0x24
 8009c90:	2320      	movs	r3, #32
 8009c92:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009c96:	f8cd 800c 	str.w	r8, [sp, #12]
 8009c9a:	2330      	movs	r3, #48	; 0x30
 8009c9c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009e60 <_vfiprintf_r+0x24c>
 8009ca0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009ca4:	f04f 0901 	mov.w	r9, #1
 8009ca8:	4623      	mov	r3, r4
 8009caa:	469a      	mov	sl, r3
 8009cac:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009cb0:	b10a      	cbz	r2, 8009cb6 <_vfiprintf_r+0xa2>
 8009cb2:	2a25      	cmp	r2, #37	; 0x25
 8009cb4:	d1f9      	bne.n	8009caa <_vfiprintf_r+0x96>
 8009cb6:	ebba 0b04 	subs.w	fp, sl, r4
 8009cba:	d00b      	beq.n	8009cd4 <_vfiprintf_r+0xc0>
 8009cbc:	465b      	mov	r3, fp
 8009cbe:	4622      	mov	r2, r4
 8009cc0:	4629      	mov	r1, r5
 8009cc2:	4630      	mov	r0, r6
 8009cc4:	f7ff ff94 	bl	8009bf0 <__sfputs_r>
 8009cc8:	3001      	adds	r0, #1
 8009cca:	f000 80aa 	beq.w	8009e22 <_vfiprintf_r+0x20e>
 8009cce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009cd0:	445a      	add	r2, fp
 8009cd2:	9209      	str	r2, [sp, #36]	; 0x24
 8009cd4:	f89a 3000 	ldrb.w	r3, [sl]
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	f000 80a2 	beq.w	8009e22 <_vfiprintf_r+0x20e>
 8009cde:	2300      	movs	r3, #0
 8009ce0:	f04f 32ff 	mov.w	r2, #4294967295
 8009ce4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009ce8:	f10a 0a01 	add.w	sl, sl, #1
 8009cec:	9304      	str	r3, [sp, #16]
 8009cee:	9307      	str	r3, [sp, #28]
 8009cf0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009cf4:	931a      	str	r3, [sp, #104]	; 0x68
 8009cf6:	4654      	mov	r4, sl
 8009cf8:	2205      	movs	r2, #5
 8009cfa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009cfe:	4858      	ldr	r0, [pc, #352]	; (8009e60 <_vfiprintf_r+0x24c>)
 8009d00:	f7f6 fa6e 	bl	80001e0 <memchr>
 8009d04:	9a04      	ldr	r2, [sp, #16]
 8009d06:	b9d8      	cbnz	r0, 8009d40 <_vfiprintf_r+0x12c>
 8009d08:	06d1      	lsls	r1, r2, #27
 8009d0a:	bf44      	itt	mi
 8009d0c:	2320      	movmi	r3, #32
 8009d0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009d12:	0713      	lsls	r3, r2, #28
 8009d14:	bf44      	itt	mi
 8009d16:	232b      	movmi	r3, #43	; 0x2b
 8009d18:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009d1c:	f89a 3000 	ldrb.w	r3, [sl]
 8009d20:	2b2a      	cmp	r3, #42	; 0x2a
 8009d22:	d015      	beq.n	8009d50 <_vfiprintf_r+0x13c>
 8009d24:	9a07      	ldr	r2, [sp, #28]
 8009d26:	4654      	mov	r4, sl
 8009d28:	2000      	movs	r0, #0
 8009d2a:	f04f 0c0a 	mov.w	ip, #10
 8009d2e:	4621      	mov	r1, r4
 8009d30:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009d34:	3b30      	subs	r3, #48	; 0x30
 8009d36:	2b09      	cmp	r3, #9
 8009d38:	d94e      	bls.n	8009dd8 <_vfiprintf_r+0x1c4>
 8009d3a:	b1b0      	cbz	r0, 8009d6a <_vfiprintf_r+0x156>
 8009d3c:	9207      	str	r2, [sp, #28]
 8009d3e:	e014      	b.n	8009d6a <_vfiprintf_r+0x156>
 8009d40:	eba0 0308 	sub.w	r3, r0, r8
 8009d44:	fa09 f303 	lsl.w	r3, r9, r3
 8009d48:	4313      	orrs	r3, r2
 8009d4a:	9304      	str	r3, [sp, #16]
 8009d4c:	46a2      	mov	sl, r4
 8009d4e:	e7d2      	b.n	8009cf6 <_vfiprintf_r+0xe2>
 8009d50:	9b03      	ldr	r3, [sp, #12]
 8009d52:	1d19      	adds	r1, r3, #4
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	9103      	str	r1, [sp, #12]
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	bfbb      	ittet	lt
 8009d5c:	425b      	neglt	r3, r3
 8009d5e:	f042 0202 	orrlt.w	r2, r2, #2
 8009d62:	9307      	strge	r3, [sp, #28]
 8009d64:	9307      	strlt	r3, [sp, #28]
 8009d66:	bfb8      	it	lt
 8009d68:	9204      	strlt	r2, [sp, #16]
 8009d6a:	7823      	ldrb	r3, [r4, #0]
 8009d6c:	2b2e      	cmp	r3, #46	; 0x2e
 8009d6e:	d10c      	bne.n	8009d8a <_vfiprintf_r+0x176>
 8009d70:	7863      	ldrb	r3, [r4, #1]
 8009d72:	2b2a      	cmp	r3, #42	; 0x2a
 8009d74:	d135      	bne.n	8009de2 <_vfiprintf_r+0x1ce>
 8009d76:	9b03      	ldr	r3, [sp, #12]
 8009d78:	1d1a      	adds	r2, r3, #4
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	9203      	str	r2, [sp, #12]
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	bfb8      	it	lt
 8009d82:	f04f 33ff 	movlt.w	r3, #4294967295
 8009d86:	3402      	adds	r4, #2
 8009d88:	9305      	str	r3, [sp, #20]
 8009d8a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009e70 <_vfiprintf_r+0x25c>
 8009d8e:	7821      	ldrb	r1, [r4, #0]
 8009d90:	2203      	movs	r2, #3
 8009d92:	4650      	mov	r0, sl
 8009d94:	f7f6 fa24 	bl	80001e0 <memchr>
 8009d98:	b140      	cbz	r0, 8009dac <_vfiprintf_r+0x198>
 8009d9a:	2340      	movs	r3, #64	; 0x40
 8009d9c:	eba0 000a 	sub.w	r0, r0, sl
 8009da0:	fa03 f000 	lsl.w	r0, r3, r0
 8009da4:	9b04      	ldr	r3, [sp, #16]
 8009da6:	4303      	orrs	r3, r0
 8009da8:	3401      	adds	r4, #1
 8009daa:	9304      	str	r3, [sp, #16]
 8009dac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009db0:	482c      	ldr	r0, [pc, #176]	; (8009e64 <_vfiprintf_r+0x250>)
 8009db2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009db6:	2206      	movs	r2, #6
 8009db8:	f7f6 fa12 	bl	80001e0 <memchr>
 8009dbc:	2800      	cmp	r0, #0
 8009dbe:	d03f      	beq.n	8009e40 <_vfiprintf_r+0x22c>
 8009dc0:	4b29      	ldr	r3, [pc, #164]	; (8009e68 <_vfiprintf_r+0x254>)
 8009dc2:	bb1b      	cbnz	r3, 8009e0c <_vfiprintf_r+0x1f8>
 8009dc4:	9b03      	ldr	r3, [sp, #12]
 8009dc6:	3307      	adds	r3, #7
 8009dc8:	f023 0307 	bic.w	r3, r3, #7
 8009dcc:	3308      	adds	r3, #8
 8009dce:	9303      	str	r3, [sp, #12]
 8009dd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009dd2:	443b      	add	r3, r7
 8009dd4:	9309      	str	r3, [sp, #36]	; 0x24
 8009dd6:	e767      	b.n	8009ca8 <_vfiprintf_r+0x94>
 8009dd8:	fb0c 3202 	mla	r2, ip, r2, r3
 8009ddc:	460c      	mov	r4, r1
 8009dde:	2001      	movs	r0, #1
 8009de0:	e7a5      	b.n	8009d2e <_vfiprintf_r+0x11a>
 8009de2:	2300      	movs	r3, #0
 8009de4:	3401      	adds	r4, #1
 8009de6:	9305      	str	r3, [sp, #20]
 8009de8:	4619      	mov	r1, r3
 8009dea:	f04f 0c0a 	mov.w	ip, #10
 8009dee:	4620      	mov	r0, r4
 8009df0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009df4:	3a30      	subs	r2, #48	; 0x30
 8009df6:	2a09      	cmp	r2, #9
 8009df8:	d903      	bls.n	8009e02 <_vfiprintf_r+0x1ee>
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d0c5      	beq.n	8009d8a <_vfiprintf_r+0x176>
 8009dfe:	9105      	str	r1, [sp, #20]
 8009e00:	e7c3      	b.n	8009d8a <_vfiprintf_r+0x176>
 8009e02:	fb0c 2101 	mla	r1, ip, r1, r2
 8009e06:	4604      	mov	r4, r0
 8009e08:	2301      	movs	r3, #1
 8009e0a:	e7f0      	b.n	8009dee <_vfiprintf_r+0x1da>
 8009e0c:	ab03      	add	r3, sp, #12
 8009e0e:	9300      	str	r3, [sp, #0]
 8009e10:	462a      	mov	r2, r5
 8009e12:	4b16      	ldr	r3, [pc, #88]	; (8009e6c <_vfiprintf_r+0x258>)
 8009e14:	a904      	add	r1, sp, #16
 8009e16:	4630      	mov	r0, r6
 8009e18:	f7fd f910 	bl	800703c <_printf_float>
 8009e1c:	4607      	mov	r7, r0
 8009e1e:	1c78      	adds	r0, r7, #1
 8009e20:	d1d6      	bne.n	8009dd0 <_vfiprintf_r+0x1bc>
 8009e22:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009e24:	07d9      	lsls	r1, r3, #31
 8009e26:	d405      	bmi.n	8009e34 <_vfiprintf_r+0x220>
 8009e28:	89ab      	ldrh	r3, [r5, #12]
 8009e2a:	059a      	lsls	r2, r3, #22
 8009e2c:	d402      	bmi.n	8009e34 <_vfiprintf_r+0x220>
 8009e2e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009e30:	f7fc ff3e 	bl	8006cb0 <__retarget_lock_release_recursive>
 8009e34:	89ab      	ldrh	r3, [r5, #12]
 8009e36:	065b      	lsls	r3, r3, #25
 8009e38:	f53f af12 	bmi.w	8009c60 <_vfiprintf_r+0x4c>
 8009e3c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009e3e:	e711      	b.n	8009c64 <_vfiprintf_r+0x50>
 8009e40:	ab03      	add	r3, sp, #12
 8009e42:	9300      	str	r3, [sp, #0]
 8009e44:	462a      	mov	r2, r5
 8009e46:	4b09      	ldr	r3, [pc, #36]	; (8009e6c <_vfiprintf_r+0x258>)
 8009e48:	a904      	add	r1, sp, #16
 8009e4a:	4630      	mov	r0, r6
 8009e4c:	f7fd fb9a 	bl	8007584 <_printf_i>
 8009e50:	e7e4      	b.n	8009e1c <_vfiprintf_r+0x208>
 8009e52:	bf00      	nop
 8009e54:	0800d22c 	.word	0x0800d22c
 8009e58:	0800d24c 	.word	0x0800d24c
 8009e5c:	0800d20c 	.word	0x0800d20c
 8009e60:	0800d68a 	.word	0x0800d68a
 8009e64:	0800d694 	.word	0x0800d694
 8009e68:	0800703d 	.word	0x0800703d
 8009e6c:	08009bf1 	.word	0x08009bf1
 8009e70:	0800d690 	.word	0x0800d690

08009e74 <__swbuf_r>:
 8009e74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e76:	460e      	mov	r6, r1
 8009e78:	4614      	mov	r4, r2
 8009e7a:	4605      	mov	r5, r0
 8009e7c:	b118      	cbz	r0, 8009e86 <__swbuf_r+0x12>
 8009e7e:	6983      	ldr	r3, [r0, #24]
 8009e80:	b90b      	cbnz	r3, 8009e86 <__swbuf_r+0x12>
 8009e82:	f7fc fe51 	bl	8006b28 <__sinit>
 8009e86:	4b21      	ldr	r3, [pc, #132]	; (8009f0c <__swbuf_r+0x98>)
 8009e88:	429c      	cmp	r4, r3
 8009e8a:	d12b      	bne.n	8009ee4 <__swbuf_r+0x70>
 8009e8c:	686c      	ldr	r4, [r5, #4]
 8009e8e:	69a3      	ldr	r3, [r4, #24]
 8009e90:	60a3      	str	r3, [r4, #8]
 8009e92:	89a3      	ldrh	r3, [r4, #12]
 8009e94:	071a      	lsls	r2, r3, #28
 8009e96:	d52f      	bpl.n	8009ef8 <__swbuf_r+0x84>
 8009e98:	6923      	ldr	r3, [r4, #16]
 8009e9a:	b36b      	cbz	r3, 8009ef8 <__swbuf_r+0x84>
 8009e9c:	6923      	ldr	r3, [r4, #16]
 8009e9e:	6820      	ldr	r0, [r4, #0]
 8009ea0:	1ac0      	subs	r0, r0, r3
 8009ea2:	6963      	ldr	r3, [r4, #20]
 8009ea4:	b2f6      	uxtb	r6, r6
 8009ea6:	4283      	cmp	r3, r0
 8009ea8:	4637      	mov	r7, r6
 8009eaa:	dc04      	bgt.n	8009eb6 <__swbuf_r+0x42>
 8009eac:	4621      	mov	r1, r4
 8009eae:	4628      	mov	r0, r5
 8009eb0:	f7fc fda6 	bl	8006a00 <_fflush_r>
 8009eb4:	bb30      	cbnz	r0, 8009f04 <__swbuf_r+0x90>
 8009eb6:	68a3      	ldr	r3, [r4, #8]
 8009eb8:	3b01      	subs	r3, #1
 8009eba:	60a3      	str	r3, [r4, #8]
 8009ebc:	6823      	ldr	r3, [r4, #0]
 8009ebe:	1c5a      	adds	r2, r3, #1
 8009ec0:	6022      	str	r2, [r4, #0]
 8009ec2:	701e      	strb	r6, [r3, #0]
 8009ec4:	6963      	ldr	r3, [r4, #20]
 8009ec6:	3001      	adds	r0, #1
 8009ec8:	4283      	cmp	r3, r0
 8009eca:	d004      	beq.n	8009ed6 <__swbuf_r+0x62>
 8009ecc:	89a3      	ldrh	r3, [r4, #12]
 8009ece:	07db      	lsls	r3, r3, #31
 8009ed0:	d506      	bpl.n	8009ee0 <__swbuf_r+0x6c>
 8009ed2:	2e0a      	cmp	r6, #10
 8009ed4:	d104      	bne.n	8009ee0 <__swbuf_r+0x6c>
 8009ed6:	4621      	mov	r1, r4
 8009ed8:	4628      	mov	r0, r5
 8009eda:	f7fc fd91 	bl	8006a00 <_fflush_r>
 8009ede:	b988      	cbnz	r0, 8009f04 <__swbuf_r+0x90>
 8009ee0:	4638      	mov	r0, r7
 8009ee2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009ee4:	4b0a      	ldr	r3, [pc, #40]	; (8009f10 <__swbuf_r+0x9c>)
 8009ee6:	429c      	cmp	r4, r3
 8009ee8:	d101      	bne.n	8009eee <__swbuf_r+0x7a>
 8009eea:	68ac      	ldr	r4, [r5, #8]
 8009eec:	e7cf      	b.n	8009e8e <__swbuf_r+0x1a>
 8009eee:	4b09      	ldr	r3, [pc, #36]	; (8009f14 <__swbuf_r+0xa0>)
 8009ef0:	429c      	cmp	r4, r3
 8009ef2:	bf08      	it	eq
 8009ef4:	68ec      	ldreq	r4, [r5, #12]
 8009ef6:	e7ca      	b.n	8009e8e <__swbuf_r+0x1a>
 8009ef8:	4621      	mov	r1, r4
 8009efa:	4628      	mov	r0, r5
 8009efc:	f000 f81a 	bl	8009f34 <__swsetup_r>
 8009f00:	2800      	cmp	r0, #0
 8009f02:	d0cb      	beq.n	8009e9c <__swbuf_r+0x28>
 8009f04:	f04f 37ff 	mov.w	r7, #4294967295
 8009f08:	e7ea      	b.n	8009ee0 <__swbuf_r+0x6c>
 8009f0a:	bf00      	nop
 8009f0c:	0800d22c 	.word	0x0800d22c
 8009f10:	0800d24c 	.word	0x0800d24c
 8009f14:	0800d20c 	.word	0x0800d20c

08009f18 <__ascii_wctomb>:
 8009f18:	b149      	cbz	r1, 8009f2e <__ascii_wctomb+0x16>
 8009f1a:	2aff      	cmp	r2, #255	; 0xff
 8009f1c:	bf85      	ittet	hi
 8009f1e:	238a      	movhi	r3, #138	; 0x8a
 8009f20:	6003      	strhi	r3, [r0, #0]
 8009f22:	700a      	strbls	r2, [r1, #0]
 8009f24:	f04f 30ff 	movhi.w	r0, #4294967295
 8009f28:	bf98      	it	ls
 8009f2a:	2001      	movls	r0, #1
 8009f2c:	4770      	bx	lr
 8009f2e:	4608      	mov	r0, r1
 8009f30:	4770      	bx	lr
	...

08009f34 <__swsetup_r>:
 8009f34:	4b32      	ldr	r3, [pc, #200]	; (800a000 <__swsetup_r+0xcc>)
 8009f36:	b570      	push	{r4, r5, r6, lr}
 8009f38:	681d      	ldr	r5, [r3, #0]
 8009f3a:	4606      	mov	r6, r0
 8009f3c:	460c      	mov	r4, r1
 8009f3e:	b125      	cbz	r5, 8009f4a <__swsetup_r+0x16>
 8009f40:	69ab      	ldr	r3, [r5, #24]
 8009f42:	b913      	cbnz	r3, 8009f4a <__swsetup_r+0x16>
 8009f44:	4628      	mov	r0, r5
 8009f46:	f7fc fdef 	bl	8006b28 <__sinit>
 8009f4a:	4b2e      	ldr	r3, [pc, #184]	; (800a004 <__swsetup_r+0xd0>)
 8009f4c:	429c      	cmp	r4, r3
 8009f4e:	d10f      	bne.n	8009f70 <__swsetup_r+0x3c>
 8009f50:	686c      	ldr	r4, [r5, #4]
 8009f52:	89a3      	ldrh	r3, [r4, #12]
 8009f54:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009f58:	0719      	lsls	r1, r3, #28
 8009f5a:	d42c      	bmi.n	8009fb6 <__swsetup_r+0x82>
 8009f5c:	06dd      	lsls	r5, r3, #27
 8009f5e:	d411      	bmi.n	8009f84 <__swsetup_r+0x50>
 8009f60:	2309      	movs	r3, #9
 8009f62:	6033      	str	r3, [r6, #0]
 8009f64:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009f68:	81a3      	strh	r3, [r4, #12]
 8009f6a:	f04f 30ff 	mov.w	r0, #4294967295
 8009f6e:	e03e      	b.n	8009fee <__swsetup_r+0xba>
 8009f70:	4b25      	ldr	r3, [pc, #148]	; (800a008 <__swsetup_r+0xd4>)
 8009f72:	429c      	cmp	r4, r3
 8009f74:	d101      	bne.n	8009f7a <__swsetup_r+0x46>
 8009f76:	68ac      	ldr	r4, [r5, #8]
 8009f78:	e7eb      	b.n	8009f52 <__swsetup_r+0x1e>
 8009f7a:	4b24      	ldr	r3, [pc, #144]	; (800a00c <__swsetup_r+0xd8>)
 8009f7c:	429c      	cmp	r4, r3
 8009f7e:	bf08      	it	eq
 8009f80:	68ec      	ldreq	r4, [r5, #12]
 8009f82:	e7e6      	b.n	8009f52 <__swsetup_r+0x1e>
 8009f84:	0758      	lsls	r0, r3, #29
 8009f86:	d512      	bpl.n	8009fae <__swsetup_r+0x7a>
 8009f88:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009f8a:	b141      	cbz	r1, 8009f9e <__swsetup_r+0x6a>
 8009f8c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009f90:	4299      	cmp	r1, r3
 8009f92:	d002      	beq.n	8009f9a <__swsetup_r+0x66>
 8009f94:	4630      	mov	r0, r6
 8009f96:	f7fc ff07 	bl	8006da8 <_free_r>
 8009f9a:	2300      	movs	r3, #0
 8009f9c:	6363      	str	r3, [r4, #52]	; 0x34
 8009f9e:	89a3      	ldrh	r3, [r4, #12]
 8009fa0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009fa4:	81a3      	strh	r3, [r4, #12]
 8009fa6:	2300      	movs	r3, #0
 8009fa8:	6063      	str	r3, [r4, #4]
 8009faa:	6923      	ldr	r3, [r4, #16]
 8009fac:	6023      	str	r3, [r4, #0]
 8009fae:	89a3      	ldrh	r3, [r4, #12]
 8009fb0:	f043 0308 	orr.w	r3, r3, #8
 8009fb4:	81a3      	strh	r3, [r4, #12]
 8009fb6:	6923      	ldr	r3, [r4, #16]
 8009fb8:	b94b      	cbnz	r3, 8009fce <__swsetup_r+0x9a>
 8009fba:	89a3      	ldrh	r3, [r4, #12]
 8009fbc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009fc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009fc4:	d003      	beq.n	8009fce <__swsetup_r+0x9a>
 8009fc6:	4621      	mov	r1, r4
 8009fc8:	4630      	mov	r0, r6
 8009fca:	f7fc fe97 	bl	8006cfc <__smakebuf_r>
 8009fce:	89a0      	ldrh	r0, [r4, #12]
 8009fd0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009fd4:	f010 0301 	ands.w	r3, r0, #1
 8009fd8:	d00a      	beq.n	8009ff0 <__swsetup_r+0xbc>
 8009fda:	2300      	movs	r3, #0
 8009fdc:	60a3      	str	r3, [r4, #8]
 8009fde:	6963      	ldr	r3, [r4, #20]
 8009fe0:	425b      	negs	r3, r3
 8009fe2:	61a3      	str	r3, [r4, #24]
 8009fe4:	6923      	ldr	r3, [r4, #16]
 8009fe6:	b943      	cbnz	r3, 8009ffa <__swsetup_r+0xc6>
 8009fe8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009fec:	d1ba      	bne.n	8009f64 <__swsetup_r+0x30>
 8009fee:	bd70      	pop	{r4, r5, r6, pc}
 8009ff0:	0781      	lsls	r1, r0, #30
 8009ff2:	bf58      	it	pl
 8009ff4:	6963      	ldrpl	r3, [r4, #20]
 8009ff6:	60a3      	str	r3, [r4, #8]
 8009ff8:	e7f4      	b.n	8009fe4 <__swsetup_r+0xb0>
 8009ffa:	2000      	movs	r0, #0
 8009ffc:	e7f7      	b.n	8009fee <__swsetup_r+0xba>
 8009ffe:	bf00      	nop
 800a000:	2000001c 	.word	0x2000001c
 800a004:	0800d22c 	.word	0x0800d22c
 800a008:	0800d24c 	.word	0x0800d24c
 800a00c:	0800d20c 	.word	0x0800d20c

0800a010 <abort>:
 800a010:	b508      	push	{r3, lr}
 800a012:	2006      	movs	r0, #6
 800a014:	f000 f86c 	bl	800a0f0 <raise>
 800a018:	2001      	movs	r0, #1
 800a01a:	f7f7 fc1b 	bl	8001854 <_exit>

0800a01e <memmove>:
 800a01e:	4288      	cmp	r0, r1
 800a020:	b510      	push	{r4, lr}
 800a022:	eb01 0402 	add.w	r4, r1, r2
 800a026:	d902      	bls.n	800a02e <memmove+0x10>
 800a028:	4284      	cmp	r4, r0
 800a02a:	4623      	mov	r3, r4
 800a02c:	d807      	bhi.n	800a03e <memmove+0x20>
 800a02e:	1e43      	subs	r3, r0, #1
 800a030:	42a1      	cmp	r1, r4
 800a032:	d008      	beq.n	800a046 <memmove+0x28>
 800a034:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a038:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a03c:	e7f8      	b.n	800a030 <memmove+0x12>
 800a03e:	4402      	add	r2, r0
 800a040:	4601      	mov	r1, r0
 800a042:	428a      	cmp	r2, r1
 800a044:	d100      	bne.n	800a048 <memmove+0x2a>
 800a046:	bd10      	pop	{r4, pc}
 800a048:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a04c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a050:	e7f7      	b.n	800a042 <memmove+0x24>

0800a052 <_realloc_r>:
 800a052:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a054:	4607      	mov	r7, r0
 800a056:	4614      	mov	r4, r2
 800a058:	460e      	mov	r6, r1
 800a05a:	b921      	cbnz	r1, 800a066 <_realloc_r+0x14>
 800a05c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a060:	4611      	mov	r1, r2
 800a062:	f7fc bef1 	b.w	8006e48 <_malloc_r>
 800a066:	b922      	cbnz	r2, 800a072 <_realloc_r+0x20>
 800a068:	f7fc fe9e 	bl	8006da8 <_free_r>
 800a06c:	4625      	mov	r5, r4
 800a06e:	4628      	mov	r0, r5
 800a070:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a072:	f000 f859 	bl	800a128 <_malloc_usable_size_r>
 800a076:	42a0      	cmp	r0, r4
 800a078:	d20f      	bcs.n	800a09a <_realloc_r+0x48>
 800a07a:	4621      	mov	r1, r4
 800a07c:	4638      	mov	r0, r7
 800a07e:	f7fc fee3 	bl	8006e48 <_malloc_r>
 800a082:	4605      	mov	r5, r0
 800a084:	2800      	cmp	r0, #0
 800a086:	d0f2      	beq.n	800a06e <_realloc_r+0x1c>
 800a088:	4631      	mov	r1, r6
 800a08a:	4622      	mov	r2, r4
 800a08c:	f7fc fe76 	bl	8006d7c <memcpy>
 800a090:	4631      	mov	r1, r6
 800a092:	4638      	mov	r0, r7
 800a094:	f7fc fe88 	bl	8006da8 <_free_r>
 800a098:	e7e9      	b.n	800a06e <_realloc_r+0x1c>
 800a09a:	4635      	mov	r5, r6
 800a09c:	e7e7      	b.n	800a06e <_realloc_r+0x1c>

0800a09e <_raise_r>:
 800a09e:	291f      	cmp	r1, #31
 800a0a0:	b538      	push	{r3, r4, r5, lr}
 800a0a2:	4604      	mov	r4, r0
 800a0a4:	460d      	mov	r5, r1
 800a0a6:	d904      	bls.n	800a0b2 <_raise_r+0x14>
 800a0a8:	2316      	movs	r3, #22
 800a0aa:	6003      	str	r3, [r0, #0]
 800a0ac:	f04f 30ff 	mov.w	r0, #4294967295
 800a0b0:	bd38      	pop	{r3, r4, r5, pc}
 800a0b2:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a0b4:	b112      	cbz	r2, 800a0bc <_raise_r+0x1e>
 800a0b6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a0ba:	b94b      	cbnz	r3, 800a0d0 <_raise_r+0x32>
 800a0bc:	4620      	mov	r0, r4
 800a0be:	f000 f831 	bl	800a124 <_getpid_r>
 800a0c2:	462a      	mov	r2, r5
 800a0c4:	4601      	mov	r1, r0
 800a0c6:	4620      	mov	r0, r4
 800a0c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a0cc:	f000 b818 	b.w	800a100 <_kill_r>
 800a0d0:	2b01      	cmp	r3, #1
 800a0d2:	d00a      	beq.n	800a0ea <_raise_r+0x4c>
 800a0d4:	1c59      	adds	r1, r3, #1
 800a0d6:	d103      	bne.n	800a0e0 <_raise_r+0x42>
 800a0d8:	2316      	movs	r3, #22
 800a0da:	6003      	str	r3, [r0, #0]
 800a0dc:	2001      	movs	r0, #1
 800a0de:	e7e7      	b.n	800a0b0 <_raise_r+0x12>
 800a0e0:	2400      	movs	r4, #0
 800a0e2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a0e6:	4628      	mov	r0, r5
 800a0e8:	4798      	blx	r3
 800a0ea:	2000      	movs	r0, #0
 800a0ec:	e7e0      	b.n	800a0b0 <_raise_r+0x12>
	...

0800a0f0 <raise>:
 800a0f0:	4b02      	ldr	r3, [pc, #8]	; (800a0fc <raise+0xc>)
 800a0f2:	4601      	mov	r1, r0
 800a0f4:	6818      	ldr	r0, [r3, #0]
 800a0f6:	f7ff bfd2 	b.w	800a09e <_raise_r>
 800a0fa:	bf00      	nop
 800a0fc:	2000001c 	.word	0x2000001c

0800a100 <_kill_r>:
 800a100:	b538      	push	{r3, r4, r5, lr}
 800a102:	4d07      	ldr	r5, [pc, #28]	; (800a120 <_kill_r+0x20>)
 800a104:	2300      	movs	r3, #0
 800a106:	4604      	mov	r4, r0
 800a108:	4608      	mov	r0, r1
 800a10a:	4611      	mov	r1, r2
 800a10c:	602b      	str	r3, [r5, #0]
 800a10e:	f7f7 fb91 	bl	8001834 <_kill>
 800a112:	1c43      	adds	r3, r0, #1
 800a114:	d102      	bne.n	800a11c <_kill_r+0x1c>
 800a116:	682b      	ldr	r3, [r5, #0]
 800a118:	b103      	cbz	r3, 800a11c <_kill_r+0x1c>
 800a11a:	6023      	str	r3, [r4, #0]
 800a11c:	bd38      	pop	{r3, r4, r5, pc}
 800a11e:	bf00      	nop
 800a120:	2000a444 	.word	0x2000a444

0800a124 <_getpid_r>:
 800a124:	f7f7 bb7e 	b.w	8001824 <_getpid>

0800a128 <_malloc_usable_size_r>:
 800a128:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a12c:	1f18      	subs	r0, r3, #4
 800a12e:	2b00      	cmp	r3, #0
 800a130:	bfbc      	itt	lt
 800a132:	580b      	ldrlt	r3, [r1, r0]
 800a134:	18c0      	addlt	r0, r0, r3
 800a136:	4770      	bx	lr

0800a138 <_init>:
 800a138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a13a:	bf00      	nop
 800a13c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a13e:	bc08      	pop	{r3}
 800a140:	469e      	mov	lr, r3
 800a142:	4770      	bx	lr

0800a144 <_fini>:
 800a144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a146:	bf00      	nop
 800a148:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a14a:	bc08      	pop	{r3}
 800a14c:	469e      	mov	lr, r3
 800a14e:	4770      	bx	lr
