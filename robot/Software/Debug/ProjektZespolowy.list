
ProjektZespolowy.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000066e0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  08006870  08006870  00016870  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006948  08006948  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08006948  08006948  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006948  08006948  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006948  08006948  00016948  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800694c  0800694c  0001694c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006950  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000022c  20000074  080069c4  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002a0  080069c4  000202a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013573  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002624  00000000  00000000  00033617  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e90  00000000  00000000  00035c40  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d98  00000000  00000000  00036ad0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001cdd3  00000000  00000000  00037868  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000db0a  00000000  00000000  0005463b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000a62c6  00000000  00000000  00062145  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0010840b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000044ac  00000000  00000000  00108488  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006858 	.word	0x08006858

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08006858 	.word	0x08006858

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <ds18b20_init>:
#define DS18B20_CONVERT_T          0x44
#define DS18B20_READ_SCRATCHPAD    0xBE


HAL_StatusTypeDef ds18b20_init(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	af00      	add	r7, sp, #0
  return wire_init();
 8000274:	f000 feee 	bl	8001054 <wire_init>
 8000278:	4603      	mov	r3, r0
}
 800027a:	4618      	mov	r0, r3
 800027c:	bd80      	pop	{r7, pc}

0800027e <send_cmd>:
    return HAL_ERROR;
}


static HAL_StatusTypeDef send_cmd(const uint8_t* rom_code, uint8_t cmd)
{
 800027e:	b580      	push	{r7, lr}
 8000280:	b084      	sub	sp, #16
 8000282:	af00      	add	r7, sp, #0
 8000284:	6078      	str	r0, [r7, #4]
 8000286:	460b      	mov	r3, r1
 8000288:	70fb      	strb	r3, [r7, #3]
  int i;

  if (wire_reset() != HAL_OK)
 800028a:	f000 ff05 	bl	8001098 <wire_reset>
 800028e:	4603      	mov	r3, r0
 8000290:	2b00      	cmp	r3, #0
 8000292:	d001      	beq.n	8000298 <send_cmd+0x1a>
    return HAL_ERROR;
 8000294:	2301      	movs	r3, #1
 8000296:	e01e      	b.n	80002d6 <send_cmd+0x58>

  if (!rom_code) {
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	2b00      	cmp	r3, #0
 800029c:	d103      	bne.n	80002a6 <send_cmd+0x28>
    wire_write(DS18B20_SKIP_ROM);
 800029e:	20cc      	movs	r0, #204	; 0xcc
 80002a0:	f000 ff98 	bl	80011d4 <wire_write>
 80002a4:	e012      	b.n	80002cc <send_cmd+0x4e>
  } else {
    wire_write(DS18B20_MATCH_ROM);
 80002a6:	2055      	movs	r0, #85	; 0x55
 80002a8:	f000 ff94 	bl	80011d4 <wire_write>
    for (i = 0; i < DS18B20_ROM_CODE_SIZE; i++)
 80002ac:	2300      	movs	r3, #0
 80002ae:	60fb      	str	r3, [r7, #12]
 80002b0:	e009      	b.n	80002c6 <send_cmd+0x48>
      wire_write(rom_code[i]);
 80002b2:	68fb      	ldr	r3, [r7, #12]
 80002b4:	687a      	ldr	r2, [r7, #4]
 80002b6:	4413      	add	r3, r2
 80002b8:	781b      	ldrb	r3, [r3, #0]
 80002ba:	4618      	mov	r0, r3
 80002bc:	f000 ff8a 	bl	80011d4 <wire_write>
    for (i = 0; i < DS18B20_ROM_CODE_SIZE; i++)
 80002c0:	68fb      	ldr	r3, [r7, #12]
 80002c2:	3301      	adds	r3, #1
 80002c4:	60fb      	str	r3, [r7, #12]
 80002c6:	68fb      	ldr	r3, [r7, #12]
 80002c8:	2b07      	cmp	r3, #7
 80002ca:	ddf2      	ble.n	80002b2 <send_cmd+0x34>
  }
  wire_write(cmd);
 80002cc:	78fb      	ldrb	r3, [r7, #3]
 80002ce:	4618      	mov	r0, r3
 80002d0:	f000 ff80 	bl	80011d4 <wire_write>
  return HAL_OK;
 80002d4:	2300      	movs	r3, #0
}
 80002d6:	4618      	mov	r0, r3
 80002d8:	3710      	adds	r7, #16
 80002da:	46bd      	mov	sp, r7
 80002dc:	bd80      	pop	{r7, pc}

080002de <ds18b20_start_measure>:

HAL_StatusTypeDef ds18b20_start_measure(const uint8_t* rom_code)
{
 80002de:	b580      	push	{r7, lr}
 80002e0:	b082      	sub	sp, #8
 80002e2:	af00      	add	r7, sp, #0
 80002e4:	6078      	str	r0, [r7, #4]
  return send_cmd(rom_code, DS18B20_CONVERT_T);
 80002e6:	2144      	movs	r1, #68	; 0x44
 80002e8:	6878      	ldr	r0, [r7, #4]
 80002ea:	f7ff ffc8 	bl	800027e <send_cmd>
 80002ee:	4603      	mov	r3, r0
}
 80002f0:	4618      	mov	r0, r3
 80002f2:	3708      	adds	r7, #8
 80002f4:	46bd      	mov	sp, r7
 80002f6:	bd80      	pop	{r7, pc}

080002f8 <ds18b20_read_scratchpad>:

static HAL_StatusTypeDef ds18b20_read_scratchpad(const uint8_t* rom_code, uint8_t* scratchpad)
{
 80002f8:	b590      	push	{r4, r7, lr}
 80002fa:	b085      	sub	sp, #20
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	6078      	str	r0, [r7, #4]
 8000300:	6039      	str	r1, [r7, #0]
  int i;
  uint8_t crc;

  if (send_cmd(rom_code, DS18B20_READ_SCRATCHPAD) != HAL_OK)
 8000302:	21be      	movs	r1, #190	; 0xbe
 8000304:	6878      	ldr	r0, [r7, #4]
 8000306:	f7ff ffba 	bl	800027e <send_cmd>
 800030a:	4603      	mov	r3, r0
 800030c:	2b00      	cmp	r3, #0
 800030e:	d001      	beq.n	8000314 <ds18b20_read_scratchpad+0x1c>
    return HAL_ERROR;
 8000310:	2301      	movs	r3, #1
 8000312:	e01e      	b.n	8000352 <ds18b20_read_scratchpad+0x5a>

  for (i = 0; i < DS18B20_SCRATCHPAD_SIZE; i++)
 8000314:	2300      	movs	r3, #0
 8000316:	60fb      	str	r3, [r7, #12]
 8000318:	e009      	b.n	800032e <ds18b20_read_scratchpad+0x36>
    scratchpad[i] = wire_read();
 800031a:	68fb      	ldr	r3, [r7, #12]
 800031c:	683a      	ldr	r2, [r7, #0]
 800031e:	18d4      	adds	r4, r2, r3
 8000320:	f000 ff09 	bl	8001136 <wire_read>
 8000324:	4603      	mov	r3, r0
 8000326:	7023      	strb	r3, [r4, #0]
  for (i = 0; i < DS18B20_SCRATCHPAD_SIZE; i++)
 8000328:	68fb      	ldr	r3, [r7, #12]
 800032a:	3301      	adds	r3, #1
 800032c:	60fb      	str	r3, [r7, #12]
 800032e:	68fb      	ldr	r3, [r7, #12]
 8000330:	2b08      	cmp	r3, #8
 8000332:	ddf2      	ble.n	800031a <ds18b20_read_scratchpad+0x22>

  crc = wire_crc(scratchpad, DS18B20_SCRATCHPAD_SIZE - 1);
 8000334:	2108      	movs	r1, #8
 8000336:	6838      	ldr	r0, [r7, #0]
 8000338:	f000 ff93 	bl	8001262 <wire_crc>
 800033c:	4603      	mov	r3, r0
 800033e:	72fb      	strb	r3, [r7, #11]
  if (scratchpad[DS18B20_SCRATCHPAD_SIZE - 1] == crc)
 8000340:	683b      	ldr	r3, [r7, #0]
 8000342:	3308      	adds	r3, #8
 8000344:	781b      	ldrb	r3, [r3, #0]
 8000346:	7afa      	ldrb	r2, [r7, #11]
 8000348:	429a      	cmp	r2, r3
 800034a:	d101      	bne.n	8000350 <ds18b20_read_scratchpad+0x58>
    return HAL_OK;
 800034c:	2300      	movs	r3, #0
 800034e:	e000      	b.n	8000352 <ds18b20_read_scratchpad+0x5a>
  else
    return HAL_ERROR;
 8000350:	2301      	movs	r3, #1
}
 8000352:	4618      	mov	r0, r3
 8000354:	3714      	adds	r7, #20
 8000356:	46bd      	mov	sp, r7
 8000358:	bd90      	pop	{r4, r7, pc}
	...

0800035c <ds18b20_get_temp>:


float ds18b20_get_temp(const uint8_t* rom_code)
{
 800035c:	b580      	push	{r7, lr}
 800035e:	b086      	sub	sp, #24
 8000360:	af00      	add	r7, sp, #0
 8000362:	6078      	str	r0, [r7, #4]
  uint8_t scratchpad[DS18B20_SCRATCHPAD_SIZE];
  int16_t temp;

  if (ds18b20_read_scratchpad(rom_code, scratchpad) != HAL_OK)
 8000364:	f107 030c 	add.w	r3, r7, #12
 8000368:	4619      	mov	r1, r3
 800036a:	6878      	ldr	r0, [r7, #4]
 800036c:	f7ff ffc4 	bl	80002f8 <ds18b20_read_scratchpad>
 8000370:	4603      	mov	r3, r0
 8000372:	2b00      	cmp	r3, #0
 8000374:	d002      	beq.n	800037c <ds18b20_get_temp+0x20>
    return 85.0f;
 8000376:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 80003a4 <ds18b20_get_temp+0x48>
 800037a:	e00b      	b.n	8000394 <ds18b20_get_temp+0x38>

  memcpy(&temp, &scratchpad[0], sizeof(temp));
 800037c:	89bb      	ldrh	r3, [r7, #12]
 800037e:	817b      	strh	r3, [r7, #10]

  return temp / 16.0f;
 8000380:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000384:	ee07 3a90 	vmov	s15, r3
 8000388:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800038c:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8000390:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000394:	eef0 7a47 	vmov.f32	s15, s14
}
 8000398:	eeb0 0a67 	vmov.f32	s0, s15
 800039c:	3718      	adds	r7, #24
 800039e:	46bd      	mov	sp, r7
 80003a0:	bd80      	pop	{r7, pc}
 80003a2:	bf00      	nop
 80003a4:	42aa0000 	.word	0x42aa0000

080003a8 <_write>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len) {
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b084      	sub	sp, #16
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	60f8      	str	r0, [r7, #12]
 80003b0:	60b9      	str	r1, [r7, #8]
 80003b2:	607a      	str	r2, [r7, #4]

	HAL_UART_Transmit(&huart2, (uint8_t*) ptr, len, 50);
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	b29a      	uxth	r2, r3
 80003b8:	2332      	movs	r3, #50	; 0x32
 80003ba:	68b9      	ldr	r1, [r7, #8]
 80003bc:	4803      	ldr	r0, [pc, #12]	; (80003cc <_write+0x24>)
 80003be:	f004 f83f 	bl	8004440 <HAL_UART_Transmit>
	return len;
 80003c2:	687b      	ldr	r3, [r7, #4]
}
 80003c4:	4618      	mov	r0, r3
 80003c6:	3710      	adds	r7, #16
 80003c8:	46bd      	mov	sp, r7
 80003ca:	bd80      	pop	{r7, pc}
 80003cc:	20000214 	.word	0x20000214

080003d0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80003d0:	b480      	push	{r7}
 80003d2:	b083      	sub	sp, #12
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	4603      	mov	r3, r0
 80003d8:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == LeftSensor_Pin || GPIO_Pin == CenterSensor_Pin
 80003da:	88fb      	ldrh	r3, [r7, #6]
 80003dc:	2b01      	cmp	r3, #1
 80003de:	d005      	beq.n	80003ec <HAL_GPIO_EXTI_Callback+0x1c>
 80003e0:	88fb      	ldrh	r3, [r7, #6]
 80003e2:	2b20      	cmp	r3, #32
 80003e4:	d002      	beq.n	80003ec <HAL_GPIO_EXTI_Callback+0x1c>
			|| GPIO_Pin == RightSensor_Pin) {
 80003e6:	88fb      	ldrh	r3, [r7, #6]
 80003e8:	2b10      	cmp	r3, #16
 80003ea:	d102      	bne.n	80003f2 <HAL_GPIO_EXTI_Callback+0x22>
		interruptFlag = 1;
 80003ec:	4b04      	ldr	r3, [pc, #16]	; (8000400 <HAL_GPIO_EXTI_Callback+0x30>)
 80003ee:	2201      	movs	r2, #1
 80003f0:	601a      	str	r2, [r3, #0]
	}
}
 80003f2:	bf00      	nop
 80003f4:	370c      	adds	r7, #12
 80003f6:	46bd      	mov	sp, r7
 80003f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003fc:	4770      	bx	lr
 80003fe:	bf00      	nop
 8000400:	20000090 	.word	0x20000090

08000404 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000404:	b580      	push	{r7, lr}
 8000406:	b082      	sub	sp, #8
 8000408:	af00      	add	r7, sp, #0
 800040a:	6078      	str	r0, [r7, #4]
	if (huart->Instance == huart1.Instance) {
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	681a      	ldr	r2, [r3, #0]
 8000410:	4b0b      	ldr	r3, [pc, #44]	; (8000440 <HAL_UART_RxCpltCallback+0x3c>)
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	429a      	cmp	r2, r3
 8000416:	d10e      	bne.n	8000436 <HAL_UART_RxCpltCallback+0x32>
		interruptFlagUART = 1;
 8000418:	4b0a      	ldr	r3, [pc, #40]	; (8000444 <HAL_UART_RxCpltCallback+0x40>)
 800041a:	2201      	movs	r2, #1
 800041c:	601a      	str	r2, [r3, #0]
		direct = RX_BUFFER[0];
 800041e:	4b0a      	ldr	r3, [pc, #40]	; (8000448 <HAL_UART_RxCpltCallback+0x44>)
 8000420:	781a      	ldrb	r2, [r3, #0]
 8000422:	4b0a      	ldr	r3, [pc, #40]	; (800044c <HAL_UART_RxCpltCallback+0x48>)
 8000424:	701a      	strb	r2, [r3, #0]
//		speed = atoi((char*)&RX_BUFFER[2]);
		speed = 200;
 8000426:	4b0a      	ldr	r3, [pc, #40]	; (8000450 <HAL_UART_RxCpltCallback+0x4c>)
 8000428:	22c8      	movs	r2, #200	; 0xc8
 800042a:	601a      	str	r2, [r3, #0]

		HAL_UART_Receive_DMA(&huart1, RX_BUFFER, BUFFER_LEN);
 800042c:	2201      	movs	r2, #1
 800042e:	4906      	ldr	r1, [pc, #24]	; (8000448 <HAL_UART_RxCpltCallback+0x44>)
 8000430:	4803      	ldr	r0, [pc, #12]	; (8000440 <HAL_UART_RxCpltCallback+0x3c>)
 8000432:	f004 f899 	bl	8004568 <HAL_UART_Receive_DMA>
	}
}
 8000436:	bf00      	nop
 8000438:	3708      	adds	r7, #8
 800043a:	46bd      	mov	sp, r7
 800043c:	bd80      	pop	{r7, pc}
 800043e:	bf00      	nop
 8000440:	20000144 	.word	0x20000144
 8000444:	20000094 	.word	0x20000094
 8000448:	200000a0 	.word	0x200000a0
 800044c:	2000009c 	.word	0x2000009c
 8000450:	20000000 	.word	0x20000000

08000454 <MotorControler>:

void MotorControler(uint Motor_AIN1, uint Motor_AIN2, uint Motor_BIN1,
		uint Motor_BIN2, int PWMA, int PWMB) {
 8000454:	b580      	push	{r7, lr}
 8000456:	b084      	sub	sp, #16
 8000458:	af00      	add	r7, sp, #0
 800045a:	60f8      	str	r0, [r7, #12]
 800045c:	60b9      	str	r1, [r7, #8]
 800045e:	607a      	str	r2, [r7, #4]
 8000460:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(MotorSTBY_GPIO_Port, MotorSTBY_Pin, GPIO_PIN_SET);
 8000462:	2201      	movs	r2, #1
 8000464:	2102      	movs	r1, #2
 8000466:	4816      	ldr	r0, [pc, #88]	; (80004c0 <MotorControler+0x6c>)
 8000468:	f001 fc78 	bl	8001d5c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MotorAIN2_GPIO_Port, MotorAIN2_Pin, Motor_AIN2);
 800046c:	68bb      	ldr	r3, [r7, #8]
 800046e:	b2db      	uxtb	r3, r3
 8000470:	461a      	mov	r2, r3
 8000472:	2101      	movs	r1, #1
 8000474:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000478:	f001 fc70 	bl	8001d5c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MotorAIN1_GPIO_Port, MotorAIN1_Pin, Motor_AIN1);
 800047c:	68fb      	ldr	r3, [r7, #12]
 800047e:	b2db      	uxtb	r3, r3
 8000480:	461a      	mov	r2, r3
 8000482:	2102      	movs	r1, #2
 8000484:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000488:	f001 fc68 	bl	8001d5c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MotorBN2_GPIO_Port, MotorBN2_Pin, Motor_BIN2);
 800048c:	683b      	ldr	r3, [r7, #0]
 800048e:	b2db      	uxtb	r3, r3
 8000490:	461a      	mov	r2, r3
 8000492:	2140      	movs	r1, #64	; 0x40
 8000494:	480a      	ldr	r0, [pc, #40]	; (80004c0 <MotorControler+0x6c>)
 8000496:	f001 fc61 	bl	8001d5c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MotorBN1_GPIO_Port, MotorBN1_Pin, Motor_BIN1);
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	b2db      	uxtb	r3, r3
 800049e:	461a      	mov	r2, r3
 80004a0:	2180      	movs	r1, #128	; 0x80
 80004a2:	4807      	ldr	r0, [pc, #28]	; (80004c0 <MotorControler+0x6c>)
 80004a4:	f001 fc5a 	bl	8001d5c <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, PWMA);
 80004a8:	4b06      	ldr	r3, [pc, #24]	; (80004c4 <MotorControler+0x70>)
 80004aa:	681b      	ldr	r3, [r3, #0]
 80004ac:	69ba      	ldr	r2, [r7, #24]
 80004ae:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, PWMB);
 80004b0:	4b04      	ldr	r3, [pc, #16]	; (80004c4 <MotorControler+0x70>)
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	69fa      	ldr	r2, [r7, #28]
 80004b6:	641a      	str	r2, [r3, #64]	; 0x40
}
 80004b8:	bf00      	nop
 80004ba:	3710      	adds	r7, #16
 80004bc:	46bd      	mov	sp, r7
 80004be:	bd80      	pop	{r7, pc}
 80004c0:	48000400 	.word	0x48000400
 80004c4:	200001c8 	.word	0x200001c8

080004c8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b088      	sub	sp, #32
 80004cc:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80004ce:	f000 ff13 	bl	80012f8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80004d2:	f000 f903 	bl	80006dc <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80004d6:	f000 fac3 	bl	8000a60 <MX_GPIO_Init>
	MX_DMA_Init();
 80004da:	f000 faa3 	bl	8000a24 <MX_DMA_Init>
	MX_USART2_UART_Init();
 80004de:	f000 fa71 	bl	80009c4 <MX_USART2_UART_Init>
	MX_TIM1_Init();
 80004e2:	f000 f951 	bl	8000788 <MX_TIM1_Init>
	MX_USART1_UART_Init();
 80004e6:	f000 fa3d 	bl	8000964 <MX_USART1_UART_Init>
	MX_TIM6_Init();
 80004ea:	f000 fa05 	bl	80008f8 <MX_TIM6_Init>
	/* USER CODE BEGIN 2 */
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pwm_duty);
 80004ee:	4b6e      	ldr	r3, [pc, #440]	; (80006a8 <main+0x1e0>)
 80004f0:	681a      	ldr	r2, [r3, #0]
 80004f2:	4b6e      	ldr	r3, [pc, #440]	; (80006ac <main+0x1e4>)
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, pwm_duty);
 80004f8:	4b6b      	ldr	r3, [pc, #428]	; (80006a8 <main+0x1e0>)
 80004fa:	681a      	ldr	r2, [r3, #0]
 80004fc:	4b6b      	ldr	r3, [pc, #428]	; (80006ac <main+0x1e4>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000502:	2100      	movs	r1, #0
 8000504:	4869      	ldr	r0, [pc, #420]	; (80006ac <main+0x1e4>)
 8000506:	f002 ffcb 	bl	80034a0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 800050a:	210c      	movs	r1, #12
 800050c:	4867      	ldr	r0, [pc, #412]	; (80006ac <main+0x1e4>)
 800050e:	f002 ffc7 	bl	80034a0 <HAL_TIM_PWM_Start>
	HAL_GPIO_WritePin(BT_Enable_GPIO_Port, BT_Enable_Pin, GPIO_PIN_RESET);
 8000512:	2200      	movs	r2, #0
 8000514:	2180      	movs	r1, #128	; 0x80
 8000516:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800051a:	f001 fc1f 	bl	8001d5c <HAL_GPIO_WritePin>
	HAL_UART_Receive_DMA(&huart1, RX_BUFFER, BUFFER_LEN);
 800051e:	2201      	movs	r2, #1
 8000520:	4963      	ldr	r1, [pc, #396]	; (80006b0 <main+0x1e8>)
 8000522:	4864      	ldr	r0, [pc, #400]	; (80006b4 <main+0x1ec>)
 8000524:	f004 f820 	bl	8004568 <HAL_UART_Receive_DMA>
//  HAL_UART_Receive_IT(&huart1, RX_BUFFER, BUFFER_LEN);

	uint8_t TX_BUFFER = 0;
 8000528:	2300      	movs	r3, #0
 800052a:	75fb      	strb	r3, [r7, #23]

	HAL_TIM_Base_Start(&htim6);
 800052c:	4862      	ldr	r0, [pc, #392]	; (80006b8 <main+0x1f0>)
 800052e:	f002 ff01 	bl	8003334 <HAL_TIM_Base_Start>
	if (ds18b20_init() != HAL_OK) {
 8000532:	f7ff fe9d 	bl	8000270 <ds18b20_init>
 8000536:	4603      	mov	r3, r0
 8000538:	2b00      	cmp	r3, #0
 800053a:	d001      	beq.n	8000540 <main+0x78>
		Error_Handler();
 800053c:	f000 fb46 	bl	8000bcc <Error_Handler>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		ds18b20_start_measure(NULL);
 8000540:	2000      	movs	r0, #0
 8000542:	f7ff fecc 	bl	80002de <ds18b20_start_measure>
		HAL_Delay(10);
 8000546:	200a      	movs	r0, #10
 8000548:	f000 ff3c 	bl	80013c4 <HAL_Delay>
		temp = ds18b20_get_temp(NULL);
 800054c:	2000      	movs	r0, #0
 800054e:	f7ff ff05 	bl	800035c <ds18b20_get_temp>
 8000552:	eef0 7a40 	vmov.f32	s15, s0
 8000556:	4b59      	ldr	r3, [pc, #356]	; (80006bc <main+0x1f4>)
 8000558:	edc3 7a00 	vstr	s15, [r3]

		if (interruptFlag == 1) {
 800055c:	4b58      	ldr	r3, [pc, #352]	; (80006c0 <main+0x1f8>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	2b01      	cmp	r3, #1
 8000562:	d111      	bne.n	8000588 <main+0xc0>
			HAL_Delay(10);
 8000564:	200a      	movs	r0, #10
 8000566:	f000 ff2d 	bl	80013c4 <HAL_Delay>
			HAL_GPIO_ReadPin(LeftSensor_GPIO_Port, LeftSensor_Pin);
 800056a:	2101      	movs	r1, #1
 800056c:	4855      	ldr	r0, [pc, #340]	; (80006c4 <main+0x1fc>)
 800056e:	f001 fbdd 	bl	8001d2c <HAL_GPIO_ReadPin>
			HAL_GPIO_ReadPin(CenterSensor_GPIO_Port, CenterSensor_Pin);
 8000572:	2120      	movs	r1, #32
 8000574:	4853      	ldr	r0, [pc, #332]	; (80006c4 <main+0x1fc>)
 8000576:	f001 fbd9 	bl	8001d2c <HAL_GPIO_ReadPin>
			HAL_GPIO_ReadPin(RightSensor_GPIO_Port, RightSensor_Pin);
 800057a:	2110      	movs	r1, #16
 800057c:	4851      	ldr	r0, [pc, #324]	; (80006c4 <main+0x1fc>)
 800057e:	f001 fbd5 	bl	8001d2c <HAL_GPIO_ReadPin>
			interruptFlag = 0;
 8000582:	4b4f      	ldr	r3, [pc, #316]	; (80006c0 <main+0x1f8>)
 8000584:	2200      	movs	r2, #0
 8000586:	601a      	str	r2, [r3, #0]

		}

		if (interruptFlagUART == 1) {
 8000588:	4b4f      	ldr	r3, [pc, #316]	; (80006c8 <main+0x200>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	2b01      	cmp	r3, #1
 800058e:	d173      	bne.n	8000678 <main+0x1b0>
			interruptFlagUART = 0;
 8000590:	4b4d      	ldr	r3, [pc, #308]	; (80006c8 <main+0x200>)
 8000592:	2200      	movs	r2, #0
 8000594:	601a      	str	r2, [r3, #0]

			HAL_UART_Transmit(&huart2, (uint8_t*) &direct, 1, 100);
 8000596:	2364      	movs	r3, #100	; 0x64
 8000598:	2201      	movs	r2, #1
 800059a:	494c      	ldr	r1, [pc, #304]	; (80006cc <main+0x204>)
 800059c:	484c      	ldr	r0, [pc, #304]	; (80006d0 <main+0x208>)
 800059e:	f003 ff4f 	bl	8004440 <HAL_UART_Transmit>
			char str[10];
			sprintf(str, " %d\r\n", speed);
 80005a2:	4b4c      	ldr	r3, [pc, #304]	; (80006d4 <main+0x20c>)
 80005a4:	681a      	ldr	r2, [r3, #0]
 80005a6:	463b      	mov	r3, r7
 80005a8:	494b      	ldr	r1, [pc, #300]	; (80006d8 <main+0x210>)
 80005aa:	4618      	mov	r0, r3
 80005ac:	f005 f8c4 	bl	8005738 <siprintf>
			printf(str);
 80005b0:	463b      	mov	r3, r7
 80005b2:	4618      	mov	r0, r3
 80005b4:	f005 f8a8 	bl	8005708 <iprintf>

			if (speed < 999 && speed >= 0) {
 80005b8:	4b46      	ldr	r3, [pc, #280]	; (80006d4 <main+0x20c>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	f240 32e6 	movw	r2, #998	; 0x3e6
 80005c0:	4293      	cmp	r3, r2
 80005c2:	d856      	bhi.n	8000672 <main+0x1aa>
 80005c4:	4b43      	ldr	r3, [pc, #268]	; (80006d4 <main+0x20c>)
 80005c6:	681b      	ldr	r3, [r3, #0]
				switch (direct) {
 80005c8:	4b40      	ldr	r3, [pc, #256]	; (80006cc <main+0x204>)
 80005ca:	781b      	ldrb	r3, [r3, #0]
 80005cc:	b2db      	uxtb	r3, r3
 80005ce:	3b30      	subs	r3, #48	; 0x30
 80005d0:	2b04      	cmp	r3, #4
 80005d2:	d850      	bhi.n	8000676 <main+0x1ae>
 80005d4:	a201      	add	r2, pc, #4	; (adr r2, 80005dc <main+0x114>)
 80005d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005da:	bf00      	nop
 80005dc:	080005f1 	.word	0x080005f1
 80005e0:	08000607 	.word	0x08000607
 80005e4:	0800061f 	.word	0x0800061f
 80005e8:	0800063b 	.word	0x0800063b
 80005ec:	08000655 	.word	0x08000655
				case '0':
					MotorControler(0, 0, 0, 0, 0, 0);
 80005f0:	2300      	movs	r3, #0
 80005f2:	9301      	str	r3, [sp, #4]
 80005f4:	2300      	movs	r3, #0
 80005f6:	9300      	str	r3, [sp, #0]
 80005f8:	2300      	movs	r3, #0
 80005fa:	2200      	movs	r2, #0
 80005fc:	2100      	movs	r1, #0
 80005fe:	2000      	movs	r0, #0
 8000600:	f7ff ff28 	bl	8000454 <MotorControler>
					break;
 8000604:	e038      	b.n	8000678 <main+0x1b0>
				case '1':
					MotorControler(0, 0, 1, 0, 0, speed);
 8000606:	4b33      	ldr	r3, [pc, #204]	; (80006d4 <main+0x20c>)
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	9301      	str	r3, [sp, #4]
 800060c:	2300      	movs	r3, #0
 800060e:	9300      	str	r3, [sp, #0]
 8000610:	2300      	movs	r3, #0
 8000612:	2201      	movs	r2, #1
 8000614:	2100      	movs	r1, #0
 8000616:	2000      	movs	r0, #0
 8000618:	f7ff ff1c 	bl	8000454 <MotorControler>
					break;
 800061c:	e02c      	b.n	8000678 <main+0x1b0>
				case '2':
					MotorControler(0, 1, 0, 1, speed, speed);
 800061e:	4b2d      	ldr	r3, [pc, #180]	; (80006d4 <main+0x20c>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	461a      	mov	r2, r3
 8000624:	4b2b      	ldr	r3, [pc, #172]	; (80006d4 <main+0x20c>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	9301      	str	r3, [sp, #4]
 800062a:	9200      	str	r2, [sp, #0]
 800062c:	2301      	movs	r3, #1
 800062e:	2200      	movs	r2, #0
 8000630:	2101      	movs	r1, #1
 8000632:	2000      	movs	r0, #0
 8000634:	f7ff ff0e 	bl	8000454 <MotorControler>
					break;
 8000638:	e01e      	b.n	8000678 <main+0x1b0>
				case '3':
					MotorControler(1, 0, 0, 0, speed, 0);
 800063a:	4b26      	ldr	r3, [pc, #152]	; (80006d4 <main+0x20c>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	461a      	mov	r2, r3
 8000640:	2300      	movs	r3, #0
 8000642:	9301      	str	r3, [sp, #4]
 8000644:	9200      	str	r2, [sp, #0]
 8000646:	2300      	movs	r3, #0
 8000648:	2200      	movs	r2, #0
 800064a:	2100      	movs	r1, #0
 800064c:	2001      	movs	r0, #1
 800064e:	f7ff ff01 	bl	8000454 <MotorControler>
					break;
 8000652:	e011      	b.n	8000678 <main+0x1b0>
				case '4':
					MotorControler(1, 0, 1, 0, speed, speed);
 8000654:	4b1f      	ldr	r3, [pc, #124]	; (80006d4 <main+0x20c>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	461a      	mov	r2, r3
 800065a:	4b1e      	ldr	r3, [pc, #120]	; (80006d4 <main+0x20c>)
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	9301      	str	r3, [sp, #4]
 8000660:	9200      	str	r2, [sp, #0]
 8000662:	2300      	movs	r3, #0
 8000664:	2201      	movs	r2, #1
 8000666:	2100      	movs	r1, #0
 8000668:	2001      	movs	r0, #1
 800066a:	f7ff fef3 	bl	8000454 <MotorControler>
				default:
					break;
 800066e:	bf00      	nop
 8000670:	e001      	b.n	8000676 <main+0x1ae>
				}
			}
 8000672:	bf00      	nop
 8000674:	e000      	b.n	8000678 <main+0x1b0>
					break;
 8000676:	bf00      	nop
		}

		if (HAL_GPIO_ReadPin(GAS_IN_GPIO_Port, GAS_IN_Pin) == GPIO_PIN_RESET) {
 8000678:	2140      	movs	r1, #64	; 0x40
 800067a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800067e:	f001 fb55 	bl	8001d2c <HAL_GPIO_ReadPin>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d102      	bne.n	800068e <main+0x1c6>
			TX_BUFFER = 0;
 8000688:	2300      	movs	r3, #0
 800068a:	75fb      	strb	r3, [r7, #23]
 800068c:	e001      	b.n	8000692 <main+0x1ca>
		} else {
			TX_BUFFER = 1;
 800068e:	2301      	movs	r3, #1
 8000690:	75fb      	strb	r3, [r7, #23]
		}
		HAL_UART_Transmit(&huart1, &TX_BUFFER, 1, 100);
 8000692:	f107 0117 	add.w	r1, r7, #23
 8000696:	2364      	movs	r3, #100	; 0x64
 8000698:	2201      	movs	r2, #1
 800069a:	4806      	ldr	r0, [pc, #24]	; (80006b4 <main+0x1ec>)
 800069c:	f003 fed0 	bl	8004440 <HAL_UART_Transmit>

		HAL_Delay(10);
 80006a0:	200a      	movs	r0, #10
 80006a2:	f000 fe8f 	bl	80013c4 <HAL_Delay>
		ds18b20_start_measure(NULL);
 80006a6:	e74b      	b.n	8000540 <main+0x78>
 80006a8:	20000098 	.word	0x20000098
 80006ac:	200001c8 	.word	0x200001c8
 80006b0:	200000a0 	.word	0x200000a0
 80006b4:	20000144 	.word	0x20000144
 80006b8:	200000b0 	.word	0x200000b0
 80006bc:	200000fc 	.word	0x200000fc
 80006c0:	20000090 	.word	0x20000090
 80006c4:	48000400 	.word	0x48000400
 80006c8:	20000094 	.word	0x20000094
 80006cc:	2000009c 	.word	0x2000009c
 80006d0:	20000214 	.word	0x20000214
 80006d4:	20000000 	.word	0x20000000
 80006d8:	08006870 	.word	0x08006870

080006dc <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80006dc:	b580      	push	{r7, lr}
 80006de:	b096      	sub	sp, #88	; 0x58
 80006e0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80006e2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80006e6:	2228      	movs	r2, #40	; 0x28
 80006e8:	2100      	movs	r1, #0
 80006ea:	4618      	mov	r0, r3
 80006ec:	f005 f804 	bl	80056f8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80006f0:	f107 031c 	add.w	r3, r7, #28
 80006f4:	2200      	movs	r2, #0
 80006f6:	601a      	str	r2, [r3, #0]
 80006f8:	605a      	str	r2, [r3, #4]
 80006fa:	609a      	str	r2, [r3, #8]
 80006fc:	60da      	str	r2, [r3, #12]
 80006fe:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8000700:	1d3b      	adds	r3, r7, #4
 8000702:	2200      	movs	r2, #0
 8000704:	601a      	str	r2, [r3, #0]
 8000706:	605a      	str	r2, [r3, #4]
 8000708:	609a      	str	r2, [r3, #8]
 800070a:	60da      	str	r2, [r3, #12]
 800070c:	611a      	str	r2, [r3, #16]
 800070e:	615a      	str	r2, [r3, #20]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000710:	2302      	movs	r3, #2
 8000712:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000714:	2301      	movs	r3, #1
 8000716:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000718:	2310      	movs	r3, #16
 800071a:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800071c:	2300      	movs	r3, #0
 800071e:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000720:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000724:	4618      	mov	r0, r3
 8000726:	f001 fb49 	bl	8001dbc <HAL_RCC_OscConfig>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <SystemClock_Config+0x58>
		Error_Handler();
 8000730:	f000 fa4c 	bl	8000bcc <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000734:	230f      	movs	r3, #15
 8000736:	61fb      	str	r3, [r7, #28]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000738:	2300      	movs	r3, #0
 800073a:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800073c:	2300      	movs	r3, #0
 800073e:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000740:	2300      	movs	r3, #0
 8000742:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000744:	2300      	movs	r3, #0
 8000746:	62fb      	str	r3, [r7, #44]	; 0x2c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8000748:	f107 031c 	add.w	r3, r7, #28
 800074c:	2100      	movs	r1, #0
 800074e:	4618      	mov	r0, r3
 8000750:	f002 fa3c 	bl	8002bcc <HAL_RCC_ClockConfig>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <SystemClock_Config+0x82>
		Error_Handler();
 800075a:	f000 fa37 	bl	8000bcc <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1
 800075e:	f241 0301 	movw	r3, #4097	; 0x1001
 8000762:	607b      	str	r3, [r7, #4]
			| RCC_PERIPHCLK_TIM1;
	PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000764:	2300      	movs	r3, #0
 8000766:	60fb      	str	r3, [r7, #12]
	PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000768:	2300      	movs	r3, #0
 800076a:	61bb      	str	r3, [r7, #24]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 800076c:	1d3b      	adds	r3, r7, #4
 800076e:	4618      	mov	r0, r3
 8000770:	f002 fc62 	bl	8003038 <HAL_RCCEx_PeriphCLKConfig>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <SystemClock_Config+0xa2>
		Error_Handler();
 800077a:	f000 fa27 	bl	8000bcc <Error_Handler>
	}
}
 800077e:	bf00      	nop
 8000780:	3758      	adds	r7, #88	; 0x58
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
	...

08000788 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8000788:	b580      	push	{r7, lr}
 800078a:	b09a      	sub	sp, #104	; 0x68
 800078c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800078e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000792:	2200      	movs	r2, #0
 8000794:	601a      	str	r2, [r3, #0]
 8000796:	605a      	str	r2, [r3, #4]
 8000798:	609a      	str	r2, [r3, #8]
 800079a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800079c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80007a0:	2200      	movs	r2, #0
 80007a2:	601a      	str	r2, [r3, #0]
 80007a4:	605a      	str	r2, [r3, #4]
 80007a6:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80007a8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80007ac:	2200      	movs	r2, #0
 80007ae:	601a      	str	r2, [r3, #0]
 80007b0:	605a      	str	r2, [r3, #4]
 80007b2:	609a      	str	r2, [r3, #8]
 80007b4:	60da      	str	r2, [r3, #12]
 80007b6:	611a      	str	r2, [r3, #16]
 80007b8:	615a      	str	r2, [r3, #20]
 80007ba:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 80007bc:	1d3b      	adds	r3, r7, #4
 80007be:	222c      	movs	r2, #44	; 0x2c
 80007c0:	2100      	movs	r1, #0
 80007c2:	4618      	mov	r0, r3
 80007c4:	f004 ff98 	bl	80056f8 <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 80007c8:	4b49      	ldr	r3, [pc, #292]	; (80008f0 <MX_TIM1_Init+0x168>)
 80007ca:	4a4a      	ldr	r2, [pc, #296]	; (80008f4 <MX_TIM1_Init+0x16c>)
 80007cc:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 79;
 80007ce:	4b48      	ldr	r3, [pc, #288]	; (80008f0 <MX_TIM1_Init+0x168>)
 80007d0:	224f      	movs	r2, #79	; 0x4f
 80007d2:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007d4:	4b46      	ldr	r3, [pc, #280]	; (80008f0 <MX_TIM1_Init+0x168>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 999;
 80007da:	4b45      	ldr	r3, [pc, #276]	; (80008f0 <MX_TIM1_Init+0x168>)
 80007dc:	f240 32e7 	movw	r2, #999	; 0x3e7
 80007e0:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007e2:	4b43      	ldr	r3, [pc, #268]	; (80008f0 <MX_TIM1_Init+0x168>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 80007e8:	4b41      	ldr	r3, [pc, #260]	; (80008f0 <MX_TIM1_Init+0x168>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007ee:	4b40      	ldr	r3, [pc, #256]	; (80008f0 <MX_TIM1_Init+0x168>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 80007f4:	483e      	ldr	r0, [pc, #248]	; (80008f0 <MX_TIM1_Init+0x168>)
 80007f6:	f002 fd45 	bl	8003284 <HAL_TIM_Base_Init>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <MX_TIM1_Init+0x7c>
		Error_Handler();
 8000800:	f000 f9e4 	bl	8000bcc <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000804:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000808:	65bb      	str	r3, [r7, #88]	; 0x58
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 800080a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800080e:	4619      	mov	r1, r3
 8000810:	4837      	ldr	r0, [pc, #220]	; (80008f0 <MX_TIM1_Init+0x168>)
 8000812:	f003 f845 	bl	80038a0 <HAL_TIM_ConfigClockSource>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <MX_TIM1_Init+0x98>
		Error_Handler();
 800081c:	f000 f9d6 	bl	8000bcc <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 8000820:	4833      	ldr	r0, [pc, #204]	; (80008f0 <MX_TIM1_Init+0x168>)
 8000822:	f002 fddb 	bl	80033dc <HAL_TIM_PWM_Init>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <MX_TIM1_Init+0xa8>
		Error_Handler();
 800082c:	f000 f9ce 	bl	8000bcc <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000830:	2300      	movs	r3, #0
 8000832:	64fb      	str	r3, [r7, #76]	; 0x4c
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000834:	2300      	movs	r3, #0
 8000836:	653b      	str	r3, [r7, #80]	; 0x50
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000838:	2300      	movs	r3, #0
 800083a:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 800083c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000840:	4619      	mov	r1, r3
 8000842:	482b      	ldr	r0, [pc, #172]	; (80008f0 <MX_TIM1_Init+0x168>)
 8000844:	f003 fcc8 	bl	80041d8 <HAL_TIMEx_MasterConfigSynchronization>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <MX_TIM1_Init+0xca>
			!= HAL_OK) {
		Error_Handler();
 800084e:	f000 f9bd 	bl	8000bcc <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000852:	2360      	movs	r3, #96	; 0x60
 8000854:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.Pulse = 0;
 8000856:	2300      	movs	r3, #0
 8000858:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800085a:	2300      	movs	r3, #0
 800085c:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800085e:	2300      	movs	r3, #0
 8000860:	63fb      	str	r3, [r7, #60]	; 0x3c
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000862:	2300      	movs	r3, #0
 8000864:	643b      	str	r3, [r7, #64]	; 0x40
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000866:	2300      	movs	r3, #0
 8000868:	647b      	str	r3, [r7, #68]	; 0x44
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800086a:	2300      	movs	r3, #0
 800086c:	64bb      	str	r3, [r7, #72]	; 0x48
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1)
 800086e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000872:	2200      	movs	r2, #0
 8000874:	4619      	mov	r1, r3
 8000876:	481e      	ldr	r0, [pc, #120]	; (80008f0 <MX_TIM1_Init+0x168>)
 8000878:	f002 fefe 	bl	8003678 <HAL_TIM_PWM_ConfigChannel>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d001      	beq.n	8000886 <MX_TIM1_Init+0xfe>
			!= HAL_OK) {
		Error_Handler();
 8000882:	f000 f9a3 	bl	8000bcc <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4)
 8000886:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800088a:	220c      	movs	r2, #12
 800088c:	4619      	mov	r1, r3
 800088e:	4818      	ldr	r0, [pc, #96]	; (80008f0 <MX_TIM1_Init+0x168>)
 8000890:	f002 fef2 	bl	8003678 <HAL_TIM_PWM_ConfigChannel>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <MX_TIM1_Init+0x116>
			!= HAL_OK) {
		Error_Handler();
 800089a:	f000 f997 	bl	8000bcc <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800089e:	2300      	movs	r3, #0
 80008a0:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80008a2:	2300      	movs	r3, #0
 80008a4:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80008a6:	2300      	movs	r3, #0
 80008a8:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 80008aa:	2300      	movs	r3, #0
 80008ac:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80008ae:	2300      	movs	r3, #0
 80008b0:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80008b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008b6:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.BreakFilter = 0;
 80008b8:	2300      	movs	r3, #0
 80008ba:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80008bc:	2300      	movs	r3, #0
 80008be:	623b      	str	r3, [r7, #32]
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80008c0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80008c4:	627b      	str	r3, [r7, #36]	; 0x24
	sBreakDeadTimeConfig.Break2Filter = 0;
 80008c6:	2300      	movs	r3, #0
 80008c8:	62bb      	str	r3, [r7, #40]	; 0x28
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80008ca:	2300      	movs	r3, #0
 80008cc:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 80008ce:	1d3b      	adds	r3, r7, #4
 80008d0:	4619      	mov	r1, r3
 80008d2:	4807      	ldr	r0, [pc, #28]	; (80008f0 <MX_TIM1_Init+0x168>)
 80008d4:	f003 fcee 	bl	80042b4 <HAL_TIMEx_ConfigBreakDeadTime>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <MX_TIM1_Init+0x15a>
			!= HAL_OK) {
		Error_Handler();
 80008de:	f000 f975 	bl	8000bcc <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 80008e2:	4803      	ldr	r0, [pc, #12]	; (80008f0 <MX_TIM1_Init+0x168>)
 80008e4:	f000 f9d2 	bl	8000c8c <HAL_TIM_MspPostInit>

}
 80008e8:	bf00      	nop
 80008ea:	3768      	adds	r7, #104	; 0x68
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	200001c8 	.word	0x200001c8
 80008f4:	40012c00 	.word	0x40012c00

080008f8 <MX_TIM6_Init>:
/**
 * @brief TIM6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM6_Init(void) {
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b084      	sub	sp, #16
 80008fc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM6_Init 0 */

	/* USER CODE END TIM6_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80008fe:	1d3b      	adds	r3, r7, #4
 8000900:	2200      	movs	r2, #0
 8000902:	601a      	str	r2, [r3, #0]
 8000904:	605a      	str	r2, [r3, #4]
 8000906:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM6_Init 1 */

	/* USER CODE END TIM6_Init 1 */
	htim6.Instance = TIM6;
 8000908:	4b14      	ldr	r3, [pc, #80]	; (800095c <MX_TIM6_Init+0x64>)
 800090a:	4a15      	ldr	r2, [pc, #84]	; (8000960 <MX_TIM6_Init+0x68>)
 800090c:	601a      	str	r2, [r3, #0]
	htim6.Init.Prescaler = 7;
 800090e:	4b13      	ldr	r3, [pc, #76]	; (800095c <MX_TIM6_Init+0x64>)
 8000910:	2207      	movs	r2, #7
 8000912:	605a      	str	r2, [r3, #4]
	htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000914:	4b11      	ldr	r3, [pc, #68]	; (800095c <MX_TIM6_Init+0x64>)
 8000916:	2200      	movs	r2, #0
 8000918:	609a      	str	r2, [r3, #8]
	htim6.Init.Period = 0;
 800091a:	4b10      	ldr	r3, [pc, #64]	; (800095c <MX_TIM6_Init+0x64>)
 800091c:	2200      	movs	r2, #0
 800091e:	60da      	str	r2, [r3, #12]
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000920:	4b0e      	ldr	r3, [pc, #56]	; (800095c <MX_TIM6_Init+0x64>)
 8000922:	2200      	movs	r2, #0
 8000924:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK) {
 8000926:	480d      	ldr	r0, [pc, #52]	; (800095c <MX_TIM6_Init+0x64>)
 8000928:	f002 fcac 	bl	8003284 <HAL_TIM_Base_Init>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <MX_TIM6_Init+0x3e>
		Error_Handler();
 8000932:	f000 f94b 	bl	8000bcc <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000936:	2300      	movs	r3, #0
 8000938:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800093a:	2300      	movs	r3, #0
 800093c:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig)
 800093e:	1d3b      	adds	r3, r7, #4
 8000940:	4619      	mov	r1, r3
 8000942:	4806      	ldr	r0, [pc, #24]	; (800095c <MX_TIM6_Init+0x64>)
 8000944:	f003 fc48 	bl	80041d8 <HAL_TIMEx_MasterConfigSynchronization>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d001      	beq.n	8000952 <MX_TIM6_Init+0x5a>
			!= HAL_OK) {
		Error_Handler();
 800094e:	f000 f93d 	bl	8000bcc <Error_Handler>
	}
	/* USER CODE BEGIN TIM6_Init 2 */

	/* USER CODE END TIM6_Init 2 */

}
 8000952:	bf00      	nop
 8000954:	3710      	adds	r7, #16
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	200000b0 	.word	0x200000b0
 8000960:	40001000 	.word	0x40001000

08000964 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8000968:	4b14      	ldr	r3, [pc, #80]	; (80009bc <MX_USART1_UART_Init+0x58>)
 800096a:	4a15      	ldr	r2, [pc, #84]	; (80009c0 <MX_USART1_UART_Init+0x5c>)
 800096c:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 9600;
 800096e:	4b13      	ldr	r3, [pc, #76]	; (80009bc <MX_USART1_UART_Init+0x58>)
 8000970:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000974:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000976:	4b11      	ldr	r3, [pc, #68]	; (80009bc <MX_USART1_UART_Init+0x58>)
 8000978:	2200      	movs	r2, #0
 800097a:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 800097c:	4b0f      	ldr	r3, [pc, #60]	; (80009bc <MX_USART1_UART_Init+0x58>)
 800097e:	2200      	movs	r2, #0
 8000980:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8000982:	4b0e      	ldr	r3, [pc, #56]	; (80009bc <MX_USART1_UART_Init+0x58>)
 8000984:	2200      	movs	r2, #0
 8000986:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8000988:	4b0c      	ldr	r3, [pc, #48]	; (80009bc <MX_USART1_UART_Init+0x58>)
 800098a:	220c      	movs	r2, #12
 800098c:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800098e:	4b0b      	ldr	r3, [pc, #44]	; (80009bc <MX_USART1_UART_Init+0x58>)
 8000990:	2200      	movs	r2, #0
 8000992:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000994:	4b09      	ldr	r3, [pc, #36]	; (80009bc <MX_USART1_UART_Init+0x58>)
 8000996:	2200      	movs	r2, #0
 8000998:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800099a:	4b08      	ldr	r3, [pc, #32]	; (80009bc <MX_USART1_UART_Init+0x58>)
 800099c:	2200      	movs	r2, #0
 800099e:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009a0:	4b06      	ldr	r3, [pc, #24]	; (80009bc <MX_USART1_UART_Init+0x58>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 80009a6:	4805      	ldr	r0, [pc, #20]	; (80009bc <MX_USART1_UART_Init+0x58>)
 80009a8:	f003 fcfc 	bl	80043a4 <HAL_UART_Init>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d001      	beq.n	80009b6 <MX_USART1_UART_Init+0x52>
		Error_Handler();
 80009b2:	f000 f90b 	bl	8000bcc <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 80009b6:	bf00      	nop
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	20000144 	.word	0x20000144
 80009c0:	40013800 	.word	0x40013800

080009c4 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80009c8:	4b14      	ldr	r3, [pc, #80]	; (8000a1c <MX_USART2_UART_Init+0x58>)
 80009ca:	4a15      	ldr	r2, [pc, #84]	; (8000a20 <MX_USART2_UART_Init+0x5c>)
 80009cc:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 38400;
 80009ce:	4b13      	ldr	r3, [pc, #76]	; (8000a1c <MX_USART2_UART_Init+0x58>)
 80009d0:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80009d4:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009d6:	4b11      	ldr	r3, [pc, #68]	; (8000a1c <MX_USART2_UART_Init+0x58>)
 80009d8:	2200      	movs	r2, #0
 80009da:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80009dc:	4b0f      	ldr	r3, [pc, #60]	; (8000a1c <MX_USART2_UART_Init+0x58>)
 80009de:	2200      	movs	r2, #0
 80009e0:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80009e2:	4b0e      	ldr	r3, [pc, #56]	; (8000a1c <MX_USART2_UART_Init+0x58>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80009e8:	4b0c      	ldr	r3, [pc, #48]	; (8000a1c <MX_USART2_UART_Init+0x58>)
 80009ea:	220c      	movs	r2, #12
 80009ec:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009ee:	4b0b      	ldr	r3, [pc, #44]	; (8000a1c <MX_USART2_UART_Init+0x58>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009f4:	4b09      	ldr	r3, [pc, #36]	; (8000a1c <MX_USART2_UART_Init+0x58>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009fa:	4b08      	ldr	r3, [pc, #32]	; (8000a1c <MX_USART2_UART_Init+0x58>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a00:	4b06      	ldr	r3, [pc, #24]	; (8000a1c <MX_USART2_UART_Init+0x58>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8000a06:	4805      	ldr	r0, [pc, #20]	; (8000a1c <MX_USART2_UART_Init+0x58>)
 8000a08:	f003 fccc 	bl	80043a4 <HAL_UART_Init>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d001      	beq.n	8000a16 <MX_USART2_UART_Init+0x52>
		Error_Handler();
 8000a12:	f000 f8db 	bl	8000bcc <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8000a16:	bf00      	nop
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	20000214 	.word	0x20000214
 8000a20:	40004400 	.word	0x40004400

08000a24 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b082      	sub	sp, #8
 8000a28:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8000a2a:	4b0c      	ldr	r3, [pc, #48]	; (8000a5c <MX_DMA_Init+0x38>)
 8000a2c:	695b      	ldr	r3, [r3, #20]
 8000a2e:	4a0b      	ldr	r2, [pc, #44]	; (8000a5c <MX_DMA_Init+0x38>)
 8000a30:	f043 0301 	orr.w	r3, r3, #1
 8000a34:	6153      	str	r3, [r2, #20]
 8000a36:	4b09      	ldr	r3, [pc, #36]	; (8000a5c <MX_DMA_Init+0x38>)
 8000a38:	695b      	ldr	r3, [r3, #20]
 8000a3a:	f003 0301 	and.w	r3, r3, #1
 8000a3e:	607b      	str	r3, [r7, #4]
 8000a40:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Channel5_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000a42:	2200      	movs	r2, #0
 8000a44:	2100      	movs	r1, #0
 8000a46:	200f      	movs	r0, #15
 8000a48:	f000 fdb9 	bl	80015be <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000a4c:	200f      	movs	r0, #15
 8000a4e:	f000 fdd2 	bl	80015f6 <HAL_NVIC_EnableIRQ>

}
 8000a52:	bf00      	nop
 8000a54:	3708      	adds	r7, #8
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	40021000 	.word	0x40021000

08000a60 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b088      	sub	sp, #32
 8000a64:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000a66:	f107 030c 	add.w	r3, r7, #12
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	601a      	str	r2, [r3, #0]
 8000a6e:	605a      	str	r2, [r3, #4]
 8000a70:	609a      	str	r2, [r3, #8]
 8000a72:	60da      	str	r2, [r3, #12]
 8000a74:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8000a76:	4b53      	ldr	r3, [pc, #332]	; (8000bc4 <MX_GPIO_Init+0x164>)
 8000a78:	695b      	ldr	r3, [r3, #20]
 8000a7a:	4a52      	ldr	r2, [pc, #328]	; (8000bc4 <MX_GPIO_Init+0x164>)
 8000a7c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000a80:	6153      	str	r3, [r2, #20]
 8000a82:	4b50      	ldr	r3, [pc, #320]	; (8000bc4 <MX_GPIO_Init+0x164>)
 8000a84:	695b      	ldr	r3, [r3, #20]
 8000a86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000a8a:	60bb      	str	r3, [r7, #8]
 8000a8c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000a8e:	4b4d      	ldr	r3, [pc, #308]	; (8000bc4 <MX_GPIO_Init+0x164>)
 8000a90:	695b      	ldr	r3, [r3, #20]
 8000a92:	4a4c      	ldr	r2, [pc, #304]	; (8000bc4 <MX_GPIO_Init+0x164>)
 8000a94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a98:	6153      	str	r3, [r2, #20]
 8000a9a:	4b4a      	ldr	r3, [pc, #296]	; (8000bc4 <MX_GPIO_Init+0x164>)
 8000a9c:	695b      	ldr	r3, [r3, #20]
 8000a9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000aa2:	607b      	str	r3, [r7, #4]
 8000aa4:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000aa6:	4b47      	ldr	r3, [pc, #284]	; (8000bc4 <MX_GPIO_Init+0x164>)
 8000aa8:	695b      	ldr	r3, [r3, #20]
 8000aaa:	4a46      	ldr	r2, [pc, #280]	; (8000bc4 <MX_GPIO_Init+0x164>)
 8000aac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ab0:	6153      	str	r3, [r2, #20]
 8000ab2:	4b44      	ldr	r3, [pc, #272]	; (8000bc4 <MX_GPIO_Init+0x164>)
 8000ab4:	695b      	ldr	r3, [r3, #20]
 8000ab6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000aba:	603b      	str	r3, [r7, #0]
 8000abc:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, MotorAIN2_Pin | MotorAIN1_Pin | BT_Enable_Pin,
 8000abe:	2200      	movs	r2, #0
 8000ac0:	2183      	movs	r1, #131	; 0x83
 8000ac2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ac6:	f001 f949 	bl	8001d5c <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(DS_GPIO_Port, DS_Pin, GPIO_PIN_SET);
 8000aca:	2201      	movs	r2, #1
 8000acc:	2108      	movs	r1, #8
 8000ace:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ad2:	f001 f943 	bl	8001d5c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB,
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	21ca      	movs	r1, #202	; 0xca
 8000ada:	483b      	ldr	r0, [pc, #236]	; (8000bc8 <MX_GPIO_Init+0x168>)
 8000adc:	f001 f93e 	bl	8001d5c <HAL_GPIO_WritePin>
			MotorSTBY_Pin | LED3_Pin | MotorBN2_Pin | MotorBN1_Pin,
			GPIO_PIN_RESET);

	/*Configure GPIO pins : MotorAIN2_Pin MotorAIN1_Pin */
	GPIO_InitStruct.Pin = MotorAIN2_Pin | MotorAIN1_Pin;
 8000ae0:	2303      	movs	r3, #3
 8000ae2:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ae4:	2301      	movs	r3, #1
 8000ae6:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aec:	2300      	movs	r3, #0
 8000aee:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000af0:	f107 030c 	add.w	r3, r7, #12
 8000af4:	4619      	mov	r1, r3
 8000af6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000afa:	f000 ffa5 	bl	8001a48 <HAL_GPIO_Init>

	/*Configure GPIO pin : DS_Pin */
	GPIO_InitStruct.Pin = DS_Pin;
 8000afe:	2308      	movs	r3, #8
 8000b00:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000b02:	2311      	movs	r3, #17
 8000b04:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b06:	2300      	movs	r3, #0
 8000b08:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(DS_GPIO_Port, &GPIO_InitStruct);
 8000b0e:	f107 030c 	add.w	r3, r7, #12
 8000b12:	4619      	mov	r1, r3
 8000b14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b18:	f000 ff96 	bl	8001a48 <HAL_GPIO_Init>

	/*Configure GPIO pin : GAS_IN_Pin */
	GPIO_InitStruct.Pin = GAS_IN_Pin;
 8000b1c:	2340      	movs	r3, #64	; 0x40
 8000b1e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b20:	2300      	movs	r3, #0
 8000b22:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b24:	2300      	movs	r3, #0
 8000b26:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GAS_IN_GPIO_Port, &GPIO_InitStruct);
 8000b28:	f107 030c 	add.w	r3, r7, #12
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b32:	f000 ff89 	bl	8001a48 <HAL_GPIO_Init>

	/*Configure GPIO pin : BT_Enable_Pin */
	GPIO_InitStruct.Pin = BT_Enable_Pin;
 8000b36:	2380      	movs	r3, #128	; 0x80
 8000b38:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b3e:	2301      	movs	r3, #1
 8000b40:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b42:	2300      	movs	r3, #0
 8000b44:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(BT_Enable_GPIO_Port, &GPIO_InitStruct);
 8000b46:	f107 030c 	add.w	r3, r7, #12
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b50:	f000 ff7a 	bl	8001a48 <HAL_GPIO_Init>

	/*Configure GPIO pins : LeftSensor_Pin RightSensor_Pin CenterSensor_Pin */
	GPIO_InitStruct.Pin = LeftSensor_Pin | RightSensor_Pin | CenterSensor_Pin;
 8000b54:	2331      	movs	r3, #49	; 0x31
 8000b56:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b58:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000b5c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b62:	f107 030c 	add.w	r3, r7, #12
 8000b66:	4619      	mov	r1, r3
 8000b68:	4817      	ldr	r0, [pc, #92]	; (8000bc8 <MX_GPIO_Init+0x168>)
 8000b6a:	f000 ff6d 	bl	8001a48 <HAL_GPIO_Init>

	/*Configure GPIO pins : MotorSTBY_Pin LED3_Pin MotorBN2_Pin MotorBN1_Pin */
	GPIO_InitStruct.Pin =
 8000b6e:	23ca      	movs	r3, #202	; 0xca
 8000b70:	60fb      	str	r3, [r7, #12]
			MotorSTBY_Pin | LED3_Pin | MotorBN2_Pin | MotorBN1_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b72:	2301      	movs	r3, #1
 8000b74:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b76:	2300      	movs	r3, #0
 8000b78:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b7e:	f107 030c 	add.w	r3, r7, #12
 8000b82:	4619      	mov	r1, r3
 8000b84:	4810      	ldr	r0, [pc, #64]	; (8000bc8 <MX_GPIO_Init+0x168>)
 8000b86:	f000 ff5f 	bl	8001a48 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	2100      	movs	r1, #0
 8000b8e:	2006      	movs	r0, #6
 8000b90:	f000 fd15 	bl	80015be <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000b94:	2006      	movs	r0, #6
 8000b96:	f000 fd2e 	bl	80015f6 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	2100      	movs	r1, #0
 8000b9e:	200a      	movs	r0, #10
 8000ba0:	f000 fd0d 	bl	80015be <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000ba4:	200a      	movs	r0, #10
 8000ba6:	f000 fd26 	bl	80015f6 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000baa:	2200      	movs	r2, #0
 8000bac:	2100      	movs	r1, #0
 8000bae:	2017      	movs	r0, #23
 8000bb0:	f000 fd05 	bl	80015be <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000bb4:	2017      	movs	r0, #23
 8000bb6:	f000 fd1e 	bl	80015f6 <HAL_NVIC_EnableIRQ>

}
 8000bba:	bf00      	nop
 8000bbc:	3720      	adds	r7, #32
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	40021000 	.word	0x40021000
 8000bc8:	48000400 	.word	0x48000400

08000bcc <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8000bd0:	bf00      	nop
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr
	...

08000bdc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b083      	sub	sp, #12
 8000be0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000be2:	4b0f      	ldr	r3, [pc, #60]	; (8000c20 <HAL_MspInit+0x44>)
 8000be4:	699b      	ldr	r3, [r3, #24]
 8000be6:	4a0e      	ldr	r2, [pc, #56]	; (8000c20 <HAL_MspInit+0x44>)
 8000be8:	f043 0301 	orr.w	r3, r3, #1
 8000bec:	6193      	str	r3, [r2, #24]
 8000bee:	4b0c      	ldr	r3, [pc, #48]	; (8000c20 <HAL_MspInit+0x44>)
 8000bf0:	699b      	ldr	r3, [r3, #24]
 8000bf2:	f003 0301 	and.w	r3, r3, #1
 8000bf6:	607b      	str	r3, [r7, #4]
 8000bf8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bfa:	4b09      	ldr	r3, [pc, #36]	; (8000c20 <HAL_MspInit+0x44>)
 8000bfc:	69db      	ldr	r3, [r3, #28]
 8000bfe:	4a08      	ldr	r2, [pc, #32]	; (8000c20 <HAL_MspInit+0x44>)
 8000c00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c04:	61d3      	str	r3, [r2, #28]
 8000c06:	4b06      	ldr	r3, [pc, #24]	; (8000c20 <HAL_MspInit+0x44>)
 8000c08:	69db      	ldr	r3, [r3, #28]
 8000c0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c0e:	603b      	str	r3, [r7, #0]
 8000c10:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c12:	bf00      	nop
 8000c14:	370c      	adds	r7, #12
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop
 8000c20:	40021000 	.word	0x40021000

08000c24 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c24:	b480      	push	{r7}
 8000c26:	b085      	sub	sp, #20
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4a13      	ldr	r2, [pc, #76]	; (8000c80 <HAL_TIM_Base_MspInit+0x5c>)
 8000c32:	4293      	cmp	r3, r2
 8000c34:	d10c      	bne.n	8000c50 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000c36:	4b13      	ldr	r3, [pc, #76]	; (8000c84 <HAL_TIM_Base_MspInit+0x60>)
 8000c38:	699b      	ldr	r3, [r3, #24]
 8000c3a:	4a12      	ldr	r2, [pc, #72]	; (8000c84 <HAL_TIM_Base_MspInit+0x60>)
 8000c3c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000c40:	6193      	str	r3, [r2, #24]
 8000c42:	4b10      	ldr	r3, [pc, #64]	; (8000c84 <HAL_TIM_Base_MspInit+0x60>)
 8000c44:	699b      	ldr	r3, [r3, #24]
 8000c46:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000c4a:	60fb      	str	r3, [r7, #12]
 8000c4c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8000c4e:	e010      	b.n	8000c72 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM6)
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	4a0c      	ldr	r2, [pc, #48]	; (8000c88 <HAL_TIM_Base_MspInit+0x64>)
 8000c56:	4293      	cmp	r3, r2
 8000c58:	d10b      	bne.n	8000c72 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000c5a:	4b0a      	ldr	r3, [pc, #40]	; (8000c84 <HAL_TIM_Base_MspInit+0x60>)
 8000c5c:	69db      	ldr	r3, [r3, #28]
 8000c5e:	4a09      	ldr	r2, [pc, #36]	; (8000c84 <HAL_TIM_Base_MspInit+0x60>)
 8000c60:	f043 0310 	orr.w	r3, r3, #16
 8000c64:	61d3      	str	r3, [r2, #28]
 8000c66:	4b07      	ldr	r3, [pc, #28]	; (8000c84 <HAL_TIM_Base_MspInit+0x60>)
 8000c68:	69db      	ldr	r3, [r3, #28]
 8000c6a:	f003 0310 	and.w	r3, r3, #16
 8000c6e:	60bb      	str	r3, [r7, #8]
 8000c70:	68bb      	ldr	r3, [r7, #8]
}
 8000c72:	bf00      	nop
 8000c74:	3714      	adds	r7, #20
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr
 8000c7e:	bf00      	nop
 8000c80:	40012c00 	.word	0x40012c00
 8000c84:	40021000 	.word	0x40021000
 8000c88:	40001000 	.word	0x40001000

08000c8c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b088      	sub	sp, #32
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c94:	f107 030c 	add.w	r3, r7, #12
 8000c98:	2200      	movs	r2, #0
 8000c9a:	601a      	str	r2, [r3, #0]
 8000c9c:	605a      	str	r2, [r3, #4]
 8000c9e:	609a      	str	r2, [r3, #8]
 8000ca0:	60da      	str	r2, [r3, #12]
 8000ca2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	4a1b      	ldr	r2, [pc, #108]	; (8000d18 <HAL_TIM_MspPostInit+0x8c>)
 8000caa:	4293      	cmp	r3, r2
 8000cac:	d12f      	bne.n	8000d0e <HAL_TIM_MspPostInit+0x82>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cae:	4b1b      	ldr	r3, [pc, #108]	; (8000d1c <HAL_TIM_MspPostInit+0x90>)
 8000cb0:	695b      	ldr	r3, [r3, #20]
 8000cb2:	4a1a      	ldr	r2, [pc, #104]	; (8000d1c <HAL_TIM_MspPostInit+0x90>)
 8000cb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cb8:	6153      	str	r3, [r2, #20]
 8000cba:	4b18      	ldr	r3, [pc, #96]	; (8000d1c <HAL_TIM_MspPostInit+0x90>)
 8000cbc:	695b      	ldr	r3, [r3, #20]
 8000cbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cc2:	60bb      	str	r3, [r7, #8]
 8000cc4:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = MotorPWMA_Pin;
 8000cc6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cca:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ccc:	2302      	movs	r3, #2
 8000cce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000cd8:	2306      	movs	r3, #6
 8000cda:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(MotorPWMA_GPIO_Port, &GPIO_InitStruct);
 8000cdc:	f107 030c 	add.w	r3, r7, #12
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ce6:	f000 feaf 	bl	8001a48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MotorPWMB_Pin;
 8000cea:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000cee:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf0:	2302      	movs	r3, #2
 8000cf2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF11_TIM1;
 8000cfc:	230b      	movs	r3, #11
 8000cfe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(MotorPWMB_GPIO_Port, &GPIO_InitStruct);
 8000d00:	f107 030c 	add.w	r3, r7, #12
 8000d04:	4619      	mov	r1, r3
 8000d06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d0a:	f000 fe9d 	bl	8001a48 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000d0e:	bf00      	nop
 8000d10:	3720      	adds	r7, #32
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	40012c00 	.word	0x40012c00
 8000d1c:	40021000 	.word	0x40021000

08000d20 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b08c      	sub	sp, #48	; 0x30
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d28:	f107 031c 	add.w	r3, r7, #28
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	601a      	str	r2, [r3, #0]
 8000d30:	605a      	str	r2, [r3, #4]
 8000d32:	609a      	str	r2, [r3, #8]
 8000d34:	60da      	str	r2, [r3, #12]
 8000d36:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	4a47      	ldr	r2, [pc, #284]	; (8000e5c <HAL_UART_MspInit+0x13c>)
 8000d3e:	4293      	cmp	r3, r2
 8000d40:	d158      	bne.n	8000df4 <HAL_UART_MspInit+0xd4>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d42:	4b47      	ldr	r3, [pc, #284]	; (8000e60 <HAL_UART_MspInit+0x140>)
 8000d44:	699b      	ldr	r3, [r3, #24]
 8000d46:	4a46      	ldr	r2, [pc, #280]	; (8000e60 <HAL_UART_MspInit+0x140>)
 8000d48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d4c:	6193      	str	r3, [r2, #24]
 8000d4e:	4b44      	ldr	r3, [pc, #272]	; (8000e60 <HAL_UART_MspInit+0x140>)
 8000d50:	699b      	ldr	r3, [r3, #24]
 8000d52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d56:	61bb      	str	r3, [r7, #24]
 8000d58:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d5a:	4b41      	ldr	r3, [pc, #260]	; (8000e60 <HAL_UART_MspInit+0x140>)
 8000d5c:	695b      	ldr	r3, [r3, #20]
 8000d5e:	4a40      	ldr	r2, [pc, #256]	; (8000e60 <HAL_UART_MspInit+0x140>)
 8000d60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d64:	6153      	str	r3, [r2, #20]
 8000d66:	4b3e      	ldr	r3, [pc, #248]	; (8000e60 <HAL_UART_MspInit+0x140>)
 8000d68:	695b      	ldr	r3, [r3, #20]
 8000d6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d6e:	617b      	str	r3, [r7, #20]
 8000d70:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000d72:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000d76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d78:	2302      	movs	r3, #2
 8000d7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d80:	2303      	movs	r3, #3
 8000d82:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000d84:	2307      	movs	r3, #7
 8000d86:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d88:	f107 031c 	add.w	r3, r7, #28
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d92:	f000 fe59 	bl	8001a48 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8000d96:	4b33      	ldr	r3, [pc, #204]	; (8000e64 <HAL_UART_MspInit+0x144>)
 8000d98:	4a33      	ldr	r2, [pc, #204]	; (8000e68 <HAL_UART_MspInit+0x148>)
 8000d9a:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d9c:	4b31      	ldr	r3, [pc, #196]	; (8000e64 <HAL_UART_MspInit+0x144>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000da2:	4b30      	ldr	r3, [pc, #192]	; (8000e64 <HAL_UART_MspInit+0x144>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000da8:	4b2e      	ldr	r3, [pc, #184]	; (8000e64 <HAL_UART_MspInit+0x144>)
 8000daa:	2280      	movs	r2, #128	; 0x80
 8000dac:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000dae:	4b2d      	ldr	r3, [pc, #180]	; (8000e64 <HAL_UART_MspInit+0x144>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000db4:	4b2b      	ldr	r3, [pc, #172]	; (8000e64 <HAL_UART_MspInit+0x144>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8000dba:	4b2a      	ldr	r3, [pc, #168]	; (8000e64 <HAL_UART_MspInit+0x144>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000dc0:	4b28      	ldr	r3, [pc, #160]	; (8000e64 <HAL_UART_MspInit+0x144>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000dc6:	4827      	ldr	r0, [pc, #156]	; (8000e64 <HAL_UART_MspInit+0x144>)
 8000dc8:	f000 fc2f 	bl	800162a <HAL_DMA_Init>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d001      	beq.n	8000dd6 <HAL_UART_MspInit+0xb6>
    {
      Error_Handler();
 8000dd2:	f7ff fefb 	bl	8000bcc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	4a22      	ldr	r2, [pc, #136]	; (8000e64 <HAL_UART_MspInit+0x144>)
 8000dda:	671a      	str	r2, [r3, #112]	; 0x70
 8000ddc:	4a21      	ldr	r2, [pc, #132]	; (8000e64 <HAL_UART_MspInit+0x144>)
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000de2:	2200      	movs	r2, #0
 8000de4:	2100      	movs	r1, #0
 8000de6:	2025      	movs	r0, #37	; 0x25
 8000de8:	f000 fbe9 	bl	80015be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000dec:	2025      	movs	r0, #37	; 0x25
 8000dee:	f000 fc02 	bl	80015f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000df2:	e02e      	b.n	8000e52 <HAL_UART_MspInit+0x132>
  else if(huart->Instance==USART2)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4a1c      	ldr	r2, [pc, #112]	; (8000e6c <HAL_UART_MspInit+0x14c>)
 8000dfa:	4293      	cmp	r3, r2
 8000dfc:	d129      	bne.n	8000e52 <HAL_UART_MspInit+0x132>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000dfe:	4b18      	ldr	r3, [pc, #96]	; (8000e60 <HAL_UART_MspInit+0x140>)
 8000e00:	69db      	ldr	r3, [r3, #28]
 8000e02:	4a17      	ldr	r2, [pc, #92]	; (8000e60 <HAL_UART_MspInit+0x140>)
 8000e04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e08:	61d3      	str	r3, [r2, #28]
 8000e0a:	4b15      	ldr	r3, [pc, #84]	; (8000e60 <HAL_UART_MspInit+0x140>)
 8000e0c:	69db      	ldr	r3, [r3, #28]
 8000e0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e12:	613b      	str	r3, [r7, #16]
 8000e14:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e16:	4b12      	ldr	r3, [pc, #72]	; (8000e60 <HAL_UART_MspInit+0x140>)
 8000e18:	695b      	ldr	r3, [r3, #20]
 8000e1a:	4a11      	ldr	r2, [pc, #68]	; (8000e60 <HAL_UART_MspInit+0x140>)
 8000e1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e20:	6153      	str	r3, [r2, #20]
 8000e22:	4b0f      	ldr	r3, [pc, #60]	; (8000e60 <HAL_UART_MspInit+0x140>)
 8000e24:	695b      	ldr	r3, [r3, #20]
 8000e26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e2a:	60fb      	str	r3, [r7, #12]
 8000e2c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8000e2e:	f248 0304 	movw	r3, #32772	; 0x8004
 8000e32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e34:	2302      	movs	r3, #2
 8000e36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e3c:	2303      	movs	r3, #3
 8000e3e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e40:	2307      	movs	r3, #7
 8000e42:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e44:	f107 031c 	add.w	r3, r7, #28
 8000e48:	4619      	mov	r1, r3
 8000e4a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e4e:	f000 fdfb 	bl	8001a48 <HAL_GPIO_Init>
}
 8000e52:	bf00      	nop
 8000e54:	3730      	adds	r7, #48	; 0x30
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	40013800 	.word	0x40013800
 8000e60:	40021000 	.word	0x40021000
 8000e64:	20000100 	.word	0x20000100
 8000e68:	40020058 	.word	0x40020058
 8000e6c:	40004400 	.word	0x40004400

08000e70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000e74:	bf00      	nop
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr

08000e7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e7e:	b480      	push	{r7}
 8000e80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e82:	e7fe      	b.n	8000e82 <HardFault_Handler+0x4>

08000e84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e88:	e7fe      	b.n	8000e88 <MemManage_Handler+0x4>

08000e8a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e8a:	b480      	push	{r7}
 8000e8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e8e:	e7fe      	b.n	8000e8e <BusFault_Handler+0x4>

08000e90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e94:	e7fe      	b.n	8000e94 <UsageFault_Handler+0x4>

08000e96 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e96:	b480      	push	{r7}
 8000e98:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e9a:	bf00      	nop
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea2:	4770      	bx	lr

08000ea4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ea8:	bf00      	nop
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr

08000eb2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000eb2:	b480      	push	{r7}
 8000eb4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000eb6:	bf00      	nop
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebe:	4770      	bx	lr

08000ec0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ec4:	f000 fa5e 	bl	8001384 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ec8:	bf00      	nop
 8000eca:	bd80      	pop	{r7, pc}

08000ecc <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000ed0:	2001      	movs	r0, #1
 8000ed2:	f000 ff5b 	bl	8001d8c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000ed6:	bf00      	nop
 8000ed8:	bd80      	pop	{r7, pc}

08000eda <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8000eda:	b580      	push	{r7, lr}
 8000edc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8000ede:	2010      	movs	r0, #16
 8000ee0:	f000 ff54 	bl	8001d8c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8000ee4:	bf00      	nop
 8000ee6:	bd80      	pop	{r7, pc}

08000ee8 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000eec:	4802      	ldr	r0, [pc, #8]	; (8000ef8 <DMA1_Channel5_IRQHandler+0x10>)
 8000eee:	f000 fcb9 	bl	8001864 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8000ef2:	bf00      	nop
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	20000100 	.word	0x20000100

08000efc <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8000f00:	2020      	movs	r0, #32
 8000f02:	f000 ff43 	bl	8001d8c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000f06:	bf00      	nop
 8000f08:	bd80      	pop	{r7, pc}
	...

08000f0c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXT line 25.
  */
void USART1_IRQHandler(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000f10:	4802      	ldr	r0, [pc, #8]	; (8000f1c <USART1_IRQHandler+0x10>)
 8000f12:	f003 fb77 	bl	8004604 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000f16:	bf00      	nop
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	20000144 	.word	0x20000144

08000f20 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b086      	sub	sp, #24
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	60f8      	str	r0, [r7, #12]
 8000f28:	60b9      	str	r1, [r7, #8]
 8000f2a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	617b      	str	r3, [r7, #20]
 8000f30:	e00a      	b.n	8000f48 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000f32:	f3af 8000 	nop.w
 8000f36:	4601      	mov	r1, r0
 8000f38:	68bb      	ldr	r3, [r7, #8]
 8000f3a:	1c5a      	adds	r2, r3, #1
 8000f3c:	60ba      	str	r2, [r7, #8]
 8000f3e:	b2ca      	uxtb	r2, r1
 8000f40:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f42:	697b      	ldr	r3, [r7, #20]
 8000f44:	3301      	adds	r3, #1
 8000f46:	617b      	str	r3, [r7, #20]
 8000f48:	697a      	ldr	r2, [r7, #20]
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	429a      	cmp	r2, r3
 8000f4e:	dbf0      	blt.n	8000f32 <_read+0x12>
	}

return len;
 8000f50:	687b      	ldr	r3, [r7, #4]
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	3718      	adds	r7, #24
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}

08000f5a <_close>:
	}
	return len;
}

int _close(int file)
{
 8000f5a:	b480      	push	{r7}
 8000f5c:	b083      	sub	sp, #12
 8000f5e:	af00      	add	r7, sp, #0
 8000f60:	6078      	str	r0, [r7, #4]
	return -1;
 8000f62:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	370c      	adds	r7, #12
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr

08000f72 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f72:	b480      	push	{r7}
 8000f74:	b083      	sub	sp, #12
 8000f76:	af00      	add	r7, sp, #0
 8000f78:	6078      	str	r0, [r7, #4]
 8000f7a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f82:	605a      	str	r2, [r3, #4]
	return 0;
 8000f84:	2300      	movs	r3, #0
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	370c      	adds	r7, #12
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr

08000f92 <_isatty>:

int _isatty(int file)
{
 8000f92:	b480      	push	{r7}
 8000f94:	b083      	sub	sp, #12
 8000f96:	af00      	add	r7, sp, #0
 8000f98:	6078      	str	r0, [r7, #4]
	return 1;
 8000f9a:	2301      	movs	r3, #1
}
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	370c      	adds	r7, #12
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr

08000fa8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b085      	sub	sp, #20
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	60f8      	str	r0, [r7, #12]
 8000fb0:	60b9      	str	r1, [r7, #8]
 8000fb2:	607a      	str	r2, [r7, #4]
	return 0;
 8000fb4:	2300      	movs	r3, #0
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	3714      	adds	r7, #20
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr
	...

08000fc4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b086      	sub	sp, #24
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fcc:	4a14      	ldr	r2, [pc, #80]	; (8001020 <_sbrk+0x5c>)
 8000fce:	4b15      	ldr	r3, [pc, #84]	; (8001024 <_sbrk+0x60>)
 8000fd0:	1ad3      	subs	r3, r2, r3
 8000fd2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fd8:	4b13      	ldr	r3, [pc, #76]	; (8001028 <_sbrk+0x64>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d102      	bne.n	8000fe6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fe0:	4b11      	ldr	r3, [pc, #68]	; (8001028 <_sbrk+0x64>)
 8000fe2:	4a12      	ldr	r2, [pc, #72]	; (800102c <_sbrk+0x68>)
 8000fe4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fe6:	4b10      	ldr	r3, [pc, #64]	; (8001028 <_sbrk+0x64>)
 8000fe8:	681a      	ldr	r2, [r3, #0]
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	4413      	add	r3, r2
 8000fee:	693a      	ldr	r2, [r7, #16]
 8000ff0:	429a      	cmp	r2, r3
 8000ff2:	d207      	bcs.n	8001004 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ff4:	f004 fb56 	bl	80056a4 <__errno>
 8000ff8:	4602      	mov	r2, r0
 8000ffa:	230c      	movs	r3, #12
 8000ffc:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000ffe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001002:	e009      	b.n	8001018 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001004:	4b08      	ldr	r3, [pc, #32]	; (8001028 <_sbrk+0x64>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800100a:	4b07      	ldr	r3, [pc, #28]	; (8001028 <_sbrk+0x64>)
 800100c:	681a      	ldr	r2, [r3, #0]
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	4413      	add	r3, r2
 8001012:	4a05      	ldr	r2, [pc, #20]	; (8001028 <_sbrk+0x64>)
 8001014:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001016:	68fb      	ldr	r3, [r7, #12]
}
 8001018:	4618      	mov	r0, r3
 800101a:	3718      	adds	r7, #24
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	20003000 	.word	0x20003000
 8001024:	00000400 	.word	0x00000400
 8001028:	200000a4 	.word	0x200000a4
 800102c:	200002a0 	.word	0x200002a0

08001030 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001034:	4b06      	ldr	r3, [pc, #24]	; (8001050 <SystemInit+0x20>)
 8001036:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800103a:	4a05      	ldr	r2, [pc, #20]	; (8001050 <SystemInit+0x20>)
 800103c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001040:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001044:	bf00      	nop
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr
 800104e:	bf00      	nop
 8001050:	e000ed00 	.word	0xe000ed00

08001054 <wire_init>:
 */

#include "wire.h"

HAL_StatusTypeDef wire_init(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
  return HAL_TIM_Base_Start(&htim6);
 8001058:	4802      	ldr	r0, [pc, #8]	; (8001064 <wire_init+0x10>)
 800105a:	f002 f96b 	bl	8003334 <HAL_TIM_Base_Start>
 800105e:	4603      	mov	r3, r0
}
 8001060:	4618      	mov	r0, r3
 8001062:	bd80      	pop	{r7, pc}
 8001064:	200000b0 	.word	0x200000b0

08001068 <delay_us>:

static void delay_us(uint32_t us)
{
 8001068:	b480      	push	{r7}
 800106a:	b083      	sub	sp, #12
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  __HAL_TIM_SET_COUNTER(&htim6, 0);
 8001070:	4b08      	ldr	r3, [pc, #32]	; (8001094 <delay_us+0x2c>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	2200      	movs	r2, #0
 8001076:	625a      	str	r2, [r3, #36]	; 0x24

  while (__HAL_TIM_GET_COUNTER(&htim6) < us) {}
 8001078:	bf00      	nop
 800107a:	4b06      	ldr	r3, [pc, #24]	; (8001094 <delay_us+0x2c>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001080:	687a      	ldr	r2, [r7, #4]
 8001082:	429a      	cmp	r2, r3
 8001084:	d8f9      	bhi.n	800107a <delay_us+0x12>
}
 8001086:	bf00      	nop
 8001088:	370c      	adds	r7, #12
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop
 8001094:	200000b0 	.word	0x200000b0

08001098 <wire_reset>:

HAL_StatusTypeDef wire_reset(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
  int rc;

  HAL_GPIO_WritePin(DS_GPIO_Port, DS_Pin, GPIO_PIN_RESET);
 800109e:	2200      	movs	r2, #0
 80010a0:	2108      	movs	r1, #8
 80010a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010a6:	f000 fe59 	bl	8001d5c <HAL_GPIO_WritePin>
  delay_us(480);
 80010aa:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 80010ae:	f7ff ffdb 	bl	8001068 <delay_us>
  HAL_GPIO_WritePin(DS_GPIO_Port, DS_Pin, GPIO_PIN_SET);
 80010b2:	2201      	movs	r2, #1
 80010b4:	2108      	movs	r1, #8
 80010b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010ba:	f000 fe4f 	bl	8001d5c <HAL_GPIO_WritePin>
  delay_us(70);
 80010be:	2046      	movs	r0, #70	; 0x46
 80010c0:	f7ff ffd2 	bl	8001068 <delay_us>
  rc = HAL_GPIO_ReadPin(DS_GPIO_Port, DS_Pin);
 80010c4:	2108      	movs	r1, #8
 80010c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010ca:	f000 fe2f 	bl	8001d2c <HAL_GPIO_ReadPin>
 80010ce:	4603      	mov	r3, r0
 80010d0:	607b      	str	r3, [r7, #4]
  delay_us(410);
 80010d2:	f44f 70cd 	mov.w	r0, #410	; 0x19a
 80010d6:	f7ff ffc7 	bl	8001068 <delay_us>

  if (rc == 0)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d101      	bne.n	80010e4 <wire_reset+0x4c>
    return HAL_OK;
 80010e0:	2300      	movs	r3, #0
 80010e2:	e000      	b.n	80010e6 <wire_reset+0x4e>
  else
    return HAL_ERROR;
 80010e4:	2301      	movs	r3, #1
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	3708      	adds	r7, #8
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}

080010ee <read_bit>:

static int read_bit(void)
{
 80010ee:	b580      	push	{r7, lr}
 80010f0:	b082      	sub	sp, #8
 80010f2:	af00      	add	r7, sp, #0
  int rc;
  HAL_GPIO_WritePin(DS_GPIO_Port, DS_Pin, GPIO_PIN_RESET);
 80010f4:	2200      	movs	r2, #0
 80010f6:	2108      	movs	r1, #8
 80010f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010fc:	f000 fe2e 	bl	8001d5c <HAL_GPIO_WritePin>
  delay_us(6);
 8001100:	2006      	movs	r0, #6
 8001102:	f7ff ffb1 	bl	8001068 <delay_us>
  HAL_GPIO_WritePin(DS_GPIO_Port, DS_Pin, GPIO_PIN_SET);
 8001106:	2201      	movs	r2, #1
 8001108:	2108      	movs	r1, #8
 800110a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800110e:	f000 fe25 	bl	8001d5c <HAL_GPIO_WritePin>
  delay_us(9);
 8001112:	2009      	movs	r0, #9
 8001114:	f7ff ffa8 	bl	8001068 <delay_us>
  rc = HAL_GPIO_ReadPin(DS_GPIO_Port, DS_Pin);
 8001118:	2108      	movs	r1, #8
 800111a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800111e:	f000 fe05 	bl	8001d2c <HAL_GPIO_ReadPin>
 8001122:	4603      	mov	r3, r0
 8001124:	607b      	str	r3, [r7, #4]
  delay_us(55);
 8001126:	2037      	movs	r0, #55	; 0x37
 8001128:	f7ff ff9e 	bl	8001068 <delay_us>
  return rc;
 800112c:	687b      	ldr	r3, [r7, #4]
}
 800112e:	4618      	mov	r0, r3
 8001130:	3708      	adds	r7, #8
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}

08001136 <wire_read>:

uint8_t wire_read(void)
{
 8001136:	b580      	push	{r7, lr}
 8001138:	b082      	sub	sp, #8
 800113a:	af00      	add	r7, sp, #0
  uint8_t value = 0;
 800113c:	2300      	movs	r3, #0
 800113e:	71fb      	strb	r3, [r7, #7]
  int i;
  for (i = 0; i < 8; i++) {
 8001140:	2300      	movs	r3, #0
 8001142:	603b      	str	r3, [r7, #0]
 8001144:	e00e      	b.n	8001164 <wire_read+0x2e>
    value >>= 1;
 8001146:	79fb      	ldrb	r3, [r7, #7]
 8001148:	085b      	lsrs	r3, r3, #1
 800114a:	71fb      	strb	r3, [r7, #7]
    if (read_bit())
 800114c:	f7ff ffcf 	bl	80010ee <read_bit>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d003      	beq.n	800115e <wire_read+0x28>
      value |= 0x80;
 8001156:	79fb      	ldrb	r3, [r7, #7]
 8001158:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800115c:	71fb      	strb	r3, [r7, #7]
  for (i = 0; i < 8; i++) {
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	3301      	adds	r3, #1
 8001162:	603b      	str	r3, [r7, #0]
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	2b07      	cmp	r3, #7
 8001168:	dded      	ble.n	8001146 <wire_read+0x10>
  }
  return value;
 800116a:	79fb      	ldrb	r3, [r7, #7]
}
 800116c:	4618      	mov	r0, r3
 800116e:	3708      	adds	r7, #8
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}

08001174 <write_bit>:

static void write_bit(int value)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  if (value) {
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d012      	beq.n	80011a8 <write_bit+0x34>
    HAL_GPIO_WritePin(DS_GPIO_Port, DS_Pin, GPIO_PIN_RESET);
 8001182:	2200      	movs	r2, #0
 8001184:	2108      	movs	r1, #8
 8001186:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800118a:	f000 fde7 	bl	8001d5c <HAL_GPIO_WritePin>
    delay_us(6);
 800118e:	2006      	movs	r0, #6
 8001190:	f7ff ff6a 	bl	8001068 <delay_us>
    HAL_GPIO_WritePin(DS_GPIO_Port, DS_Pin, GPIO_PIN_SET);
 8001194:	2201      	movs	r2, #1
 8001196:	2108      	movs	r1, #8
 8001198:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800119c:	f000 fdde 	bl	8001d5c <HAL_GPIO_WritePin>
    delay_us(64);
 80011a0:	2040      	movs	r0, #64	; 0x40
 80011a2:	f7ff ff61 	bl	8001068 <delay_us>
    HAL_GPIO_WritePin(DS_GPIO_Port, DS_Pin, GPIO_PIN_RESET);
    delay_us(60);
    HAL_GPIO_WritePin(DS_GPIO_Port, DS_Pin, GPIO_PIN_SET);
    delay_us(10);
  }
}
 80011a6:	e011      	b.n	80011cc <write_bit+0x58>
    HAL_GPIO_WritePin(DS_GPIO_Port, DS_Pin, GPIO_PIN_RESET);
 80011a8:	2200      	movs	r2, #0
 80011aa:	2108      	movs	r1, #8
 80011ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011b0:	f000 fdd4 	bl	8001d5c <HAL_GPIO_WritePin>
    delay_us(60);
 80011b4:	203c      	movs	r0, #60	; 0x3c
 80011b6:	f7ff ff57 	bl	8001068 <delay_us>
    HAL_GPIO_WritePin(DS_GPIO_Port, DS_Pin, GPIO_PIN_SET);
 80011ba:	2201      	movs	r2, #1
 80011bc:	2108      	movs	r1, #8
 80011be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011c2:	f000 fdcb 	bl	8001d5c <HAL_GPIO_WritePin>
    delay_us(10);
 80011c6:	200a      	movs	r0, #10
 80011c8:	f7ff ff4e 	bl	8001068 <delay_us>
}
 80011cc:	bf00      	nop
 80011ce:	3708      	adds	r7, #8
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}

080011d4 <wire_write>:

void wire_write(uint8_t byte)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b084      	sub	sp, #16
 80011d8:	af00      	add	r7, sp, #0
 80011da:	4603      	mov	r3, r0
 80011dc:	71fb      	strb	r3, [r7, #7]
  int i;
  for (i = 0; i < 8; i++) {
 80011de:	2300      	movs	r3, #0
 80011e0:	60fb      	str	r3, [r7, #12]
 80011e2:	e00b      	b.n	80011fc <wire_write+0x28>
    write_bit(byte & 0x01);
 80011e4:	79fb      	ldrb	r3, [r7, #7]
 80011e6:	f003 0301 	and.w	r3, r3, #1
 80011ea:	4618      	mov	r0, r3
 80011ec:	f7ff ffc2 	bl	8001174 <write_bit>
    byte >>= 1;
 80011f0:	79fb      	ldrb	r3, [r7, #7]
 80011f2:	085b      	lsrs	r3, r3, #1
 80011f4:	71fb      	strb	r3, [r7, #7]
  for (i = 0; i < 8; i++) {
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	3301      	adds	r3, #1
 80011fa:	60fb      	str	r3, [r7, #12]
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	2b07      	cmp	r3, #7
 8001200:	ddf0      	ble.n	80011e4 <wire_write+0x10>
  }
}
 8001202:	bf00      	nop
 8001204:	3710      	adds	r7, #16
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}

0800120a <byte_crc>:

static uint8_t byte_crc(uint8_t crc, uint8_t byte)
{
 800120a:	b480      	push	{r7}
 800120c:	b085      	sub	sp, #20
 800120e:	af00      	add	r7, sp, #0
 8001210:	4603      	mov	r3, r0
 8001212:	460a      	mov	r2, r1
 8001214:	71fb      	strb	r3, [r7, #7]
 8001216:	4613      	mov	r3, r2
 8001218:	71bb      	strb	r3, [r7, #6]
  int i;
  for (i = 0; i < 8; i++) {
 800121a:	2300      	movs	r3, #0
 800121c:	60fb      	str	r3, [r7, #12]
 800121e:	e016      	b.n	800124e <byte_crc+0x44>
    uint8_t b = crc ^ byte;
 8001220:	79fa      	ldrb	r2, [r7, #7]
 8001222:	79bb      	ldrb	r3, [r7, #6]
 8001224:	4053      	eors	r3, r2
 8001226:	72fb      	strb	r3, [r7, #11]
    crc >>= 1;
 8001228:	79fb      	ldrb	r3, [r7, #7]
 800122a:	085b      	lsrs	r3, r3, #1
 800122c:	71fb      	strb	r3, [r7, #7]
    if (b & 0x01)
 800122e:	7afb      	ldrb	r3, [r7, #11]
 8001230:	f003 0301 	and.w	r3, r3, #1
 8001234:	2b00      	cmp	r3, #0
 8001236:	d004      	beq.n	8001242 <byte_crc+0x38>
      crc ^= 0x8c;
 8001238:	79fb      	ldrb	r3, [r7, #7]
 800123a:	f083 0373 	eor.w	r3, r3, #115	; 0x73
 800123e:	43db      	mvns	r3, r3
 8001240:	71fb      	strb	r3, [r7, #7]
    byte >>= 1;
 8001242:	79bb      	ldrb	r3, [r7, #6]
 8001244:	085b      	lsrs	r3, r3, #1
 8001246:	71bb      	strb	r3, [r7, #6]
  for (i = 0; i < 8; i++) {
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	3301      	adds	r3, #1
 800124c:	60fb      	str	r3, [r7, #12]
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	2b07      	cmp	r3, #7
 8001252:	dde5      	ble.n	8001220 <byte_crc+0x16>
  }
  return crc;
 8001254:	79fb      	ldrb	r3, [r7, #7]
}
 8001256:	4618      	mov	r0, r3
 8001258:	3714      	adds	r7, #20
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr

08001262 <wire_crc>:

uint8_t wire_crc(const uint8_t* data, int len)
{
 8001262:	b580      	push	{r7, lr}
 8001264:	b084      	sub	sp, #16
 8001266:	af00      	add	r7, sp, #0
 8001268:	6078      	str	r0, [r7, #4]
 800126a:	6039      	str	r1, [r7, #0]
  int i;
    uint8_t crc = 0;
 800126c:	2300      	movs	r3, #0
 800126e:	72fb      	strb	r3, [r7, #11]

    for (i = 0; i < len; i++)
 8001270:	2300      	movs	r3, #0
 8001272:	60fb      	str	r3, [r7, #12]
 8001274:	e00d      	b.n	8001292 <wire_crc+0x30>
      crc = byte_crc(crc, data[i]);
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	687a      	ldr	r2, [r7, #4]
 800127a:	4413      	add	r3, r2
 800127c:	781a      	ldrb	r2, [r3, #0]
 800127e:	7afb      	ldrb	r3, [r7, #11]
 8001280:	4611      	mov	r1, r2
 8001282:	4618      	mov	r0, r3
 8001284:	f7ff ffc1 	bl	800120a <byte_crc>
 8001288:	4603      	mov	r3, r0
 800128a:	72fb      	strb	r3, [r7, #11]
    for (i = 0; i < len; i++)
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	3301      	adds	r3, #1
 8001290:	60fb      	str	r3, [r7, #12]
 8001292:	68fa      	ldr	r2, [r7, #12]
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	429a      	cmp	r2, r3
 8001298:	dbed      	blt.n	8001276 <wire_crc+0x14>

    return crc;
 800129a:	7afb      	ldrb	r3, [r7, #11]
}
 800129c:	4618      	mov	r0, r3
 800129e:	3710      	adds	r7, #16
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}

080012a4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80012a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012dc <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012a8:	480d      	ldr	r0, [pc, #52]	; (80012e0 <LoopForever+0x6>)
  ldr r1, =_edata
 80012aa:	490e      	ldr	r1, [pc, #56]	; (80012e4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80012ac:	4a0e      	ldr	r2, [pc, #56]	; (80012e8 <LoopForever+0xe>)
  movs r3, #0
 80012ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012b0:	e002      	b.n	80012b8 <LoopCopyDataInit>

080012b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012b6:	3304      	adds	r3, #4

080012b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012bc:	d3f9      	bcc.n	80012b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012be:	4a0b      	ldr	r2, [pc, #44]	; (80012ec <LoopForever+0x12>)
  ldr r4, =_ebss
 80012c0:	4c0b      	ldr	r4, [pc, #44]	; (80012f0 <LoopForever+0x16>)
  movs r3, #0
 80012c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012c4:	e001      	b.n	80012ca <LoopFillZerobss>

080012c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012c8:	3204      	adds	r2, #4

080012ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012cc:	d3fb      	bcc.n	80012c6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80012ce:	f7ff feaf 	bl	8001030 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012d2:	f004 f9ed 	bl	80056b0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80012d6:	f7ff f8f7 	bl	80004c8 <main>

080012da <LoopForever>:

LoopForever:
    b LoopForever
 80012da:	e7fe      	b.n	80012da <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80012dc:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 80012e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012e4:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80012e8:	08006950 	.word	0x08006950
  ldr r2, =_sbss
 80012ec:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80012f0:	200002a0 	.word	0x200002a0

080012f4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80012f4:	e7fe      	b.n	80012f4 <ADC1_2_IRQHandler>
	...

080012f8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012fc:	4b08      	ldr	r3, [pc, #32]	; (8001320 <HAL_Init+0x28>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4a07      	ldr	r2, [pc, #28]	; (8001320 <HAL_Init+0x28>)
 8001302:	f043 0310 	orr.w	r3, r3, #16
 8001306:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001308:	2003      	movs	r0, #3
 800130a:	f000 f94d 	bl	80015a8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800130e:	2000      	movs	r0, #0
 8001310:	f000 f808 	bl	8001324 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001314:	f7ff fc62 	bl	8000bdc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001318:	2300      	movs	r3, #0
}
 800131a:	4618      	mov	r0, r3
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	40022000 	.word	0x40022000

08001324 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b082      	sub	sp, #8
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800132c:	4b12      	ldr	r3, [pc, #72]	; (8001378 <HAL_InitTick+0x54>)
 800132e:	681a      	ldr	r2, [r3, #0]
 8001330:	4b12      	ldr	r3, [pc, #72]	; (800137c <HAL_InitTick+0x58>)
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	4619      	mov	r1, r3
 8001336:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800133a:	fbb3 f3f1 	udiv	r3, r3, r1
 800133e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001342:	4618      	mov	r0, r3
 8001344:	f000 f965 	bl	8001612 <HAL_SYSTICK_Config>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d001      	beq.n	8001352 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800134e:	2301      	movs	r3, #1
 8001350:	e00e      	b.n	8001370 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	2b0f      	cmp	r3, #15
 8001356:	d80a      	bhi.n	800136e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001358:	2200      	movs	r2, #0
 800135a:	6879      	ldr	r1, [r7, #4]
 800135c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001360:	f000 f92d 	bl	80015be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001364:	4a06      	ldr	r2, [pc, #24]	; (8001380 <HAL_InitTick+0x5c>)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800136a:	2300      	movs	r3, #0
 800136c:	e000      	b.n	8001370 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800136e:	2301      	movs	r3, #1
}
 8001370:	4618      	mov	r0, r3
 8001372:	3708      	adds	r7, #8
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	20000004 	.word	0x20000004
 800137c:	2000000c 	.word	0x2000000c
 8001380:	20000008 	.word	0x20000008

08001384 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001388:	4b06      	ldr	r3, [pc, #24]	; (80013a4 <HAL_IncTick+0x20>)
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	461a      	mov	r2, r3
 800138e:	4b06      	ldr	r3, [pc, #24]	; (80013a8 <HAL_IncTick+0x24>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4413      	add	r3, r2
 8001394:	4a04      	ldr	r2, [pc, #16]	; (80013a8 <HAL_IncTick+0x24>)
 8001396:	6013      	str	r3, [r2, #0]
}
 8001398:	bf00      	nop
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr
 80013a2:	bf00      	nop
 80013a4:	2000000c 	.word	0x2000000c
 80013a8:	20000298 	.word	0x20000298

080013ac <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	af00      	add	r7, sp, #0
  return uwTick;  
 80013b0:	4b03      	ldr	r3, [pc, #12]	; (80013c0 <HAL_GetTick+0x14>)
 80013b2:	681b      	ldr	r3, [r3, #0]
}
 80013b4:	4618      	mov	r0, r3
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr
 80013be:	bf00      	nop
 80013c0:	20000298 	.word	0x20000298

080013c4 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b084      	sub	sp, #16
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013cc:	f7ff ffee 	bl	80013ac <HAL_GetTick>
 80013d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80013dc:	d005      	beq.n	80013ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013de:	4b09      	ldr	r3, [pc, #36]	; (8001404 <HAL_Delay+0x40>)
 80013e0:	781b      	ldrb	r3, [r3, #0]
 80013e2:	461a      	mov	r2, r3
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	4413      	add	r3, r2
 80013e8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80013ea:	bf00      	nop
 80013ec:	f7ff ffde 	bl	80013ac <HAL_GetTick>
 80013f0:	4602      	mov	r2, r0
 80013f2:	68bb      	ldr	r3, [r7, #8]
 80013f4:	1ad3      	subs	r3, r2, r3
 80013f6:	68fa      	ldr	r2, [r7, #12]
 80013f8:	429a      	cmp	r2, r3
 80013fa:	d8f7      	bhi.n	80013ec <HAL_Delay+0x28>
  {
  }
}
 80013fc:	bf00      	nop
 80013fe:	3710      	adds	r7, #16
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}
 8001404:	2000000c 	.word	0x2000000c

08001408 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001408:	b480      	push	{r7}
 800140a:	b085      	sub	sp, #20
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	f003 0307 	and.w	r3, r3, #7
 8001416:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001418:	4b0c      	ldr	r3, [pc, #48]	; (800144c <__NVIC_SetPriorityGrouping+0x44>)
 800141a:	68db      	ldr	r3, [r3, #12]
 800141c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800141e:	68ba      	ldr	r2, [r7, #8]
 8001420:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001424:	4013      	ands	r3, r2
 8001426:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800142c:	68bb      	ldr	r3, [r7, #8]
 800142e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001430:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001434:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001438:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800143a:	4a04      	ldr	r2, [pc, #16]	; (800144c <__NVIC_SetPriorityGrouping+0x44>)
 800143c:	68bb      	ldr	r3, [r7, #8]
 800143e:	60d3      	str	r3, [r2, #12]
}
 8001440:	bf00      	nop
 8001442:	3714      	adds	r7, #20
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr
 800144c:	e000ed00 	.word	0xe000ed00

08001450 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001454:	4b04      	ldr	r3, [pc, #16]	; (8001468 <__NVIC_GetPriorityGrouping+0x18>)
 8001456:	68db      	ldr	r3, [r3, #12]
 8001458:	0a1b      	lsrs	r3, r3, #8
 800145a:	f003 0307 	and.w	r3, r3, #7
}
 800145e:	4618      	mov	r0, r3
 8001460:	46bd      	mov	sp, r7
 8001462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001466:	4770      	bx	lr
 8001468:	e000ed00 	.word	0xe000ed00

0800146c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800146c:	b480      	push	{r7}
 800146e:	b083      	sub	sp, #12
 8001470:	af00      	add	r7, sp, #0
 8001472:	4603      	mov	r3, r0
 8001474:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001476:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800147a:	2b00      	cmp	r3, #0
 800147c:	db0b      	blt.n	8001496 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800147e:	79fb      	ldrb	r3, [r7, #7]
 8001480:	f003 021f 	and.w	r2, r3, #31
 8001484:	4907      	ldr	r1, [pc, #28]	; (80014a4 <__NVIC_EnableIRQ+0x38>)
 8001486:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800148a:	095b      	lsrs	r3, r3, #5
 800148c:	2001      	movs	r0, #1
 800148e:	fa00 f202 	lsl.w	r2, r0, r2
 8001492:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001496:	bf00      	nop
 8001498:	370c      	adds	r7, #12
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr
 80014a2:	bf00      	nop
 80014a4:	e000e100 	.word	0xe000e100

080014a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b083      	sub	sp, #12
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	4603      	mov	r3, r0
 80014b0:	6039      	str	r1, [r7, #0]
 80014b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	db0a      	blt.n	80014d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	b2da      	uxtb	r2, r3
 80014c0:	490c      	ldr	r1, [pc, #48]	; (80014f4 <__NVIC_SetPriority+0x4c>)
 80014c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014c6:	0112      	lsls	r2, r2, #4
 80014c8:	b2d2      	uxtb	r2, r2
 80014ca:	440b      	add	r3, r1
 80014cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014d0:	e00a      	b.n	80014e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	b2da      	uxtb	r2, r3
 80014d6:	4908      	ldr	r1, [pc, #32]	; (80014f8 <__NVIC_SetPriority+0x50>)
 80014d8:	79fb      	ldrb	r3, [r7, #7]
 80014da:	f003 030f 	and.w	r3, r3, #15
 80014de:	3b04      	subs	r3, #4
 80014e0:	0112      	lsls	r2, r2, #4
 80014e2:	b2d2      	uxtb	r2, r2
 80014e4:	440b      	add	r3, r1
 80014e6:	761a      	strb	r2, [r3, #24]
}
 80014e8:	bf00      	nop
 80014ea:	370c      	adds	r7, #12
 80014ec:	46bd      	mov	sp, r7
 80014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f2:	4770      	bx	lr
 80014f4:	e000e100 	.word	0xe000e100
 80014f8:	e000ed00 	.word	0xe000ed00

080014fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b089      	sub	sp, #36	; 0x24
 8001500:	af00      	add	r7, sp, #0
 8001502:	60f8      	str	r0, [r7, #12]
 8001504:	60b9      	str	r1, [r7, #8]
 8001506:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	f003 0307 	and.w	r3, r3, #7
 800150e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001510:	69fb      	ldr	r3, [r7, #28]
 8001512:	f1c3 0307 	rsb	r3, r3, #7
 8001516:	2b04      	cmp	r3, #4
 8001518:	bf28      	it	cs
 800151a:	2304      	movcs	r3, #4
 800151c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800151e:	69fb      	ldr	r3, [r7, #28]
 8001520:	3304      	adds	r3, #4
 8001522:	2b06      	cmp	r3, #6
 8001524:	d902      	bls.n	800152c <NVIC_EncodePriority+0x30>
 8001526:	69fb      	ldr	r3, [r7, #28]
 8001528:	3b03      	subs	r3, #3
 800152a:	e000      	b.n	800152e <NVIC_EncodePriority+0x32>
 800152c:	2300      	movs	r3, #0
 800152e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001530:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001534:	69bb      	ldr	r3, [r7, #24]
 8001536:	fa02 f303 	lsl.w	r3, r2, r3
 800153a:	43da      	mvns	r2, r3
 800153c:	68bb      	ldr	r3, [r7, #8]
 800153e:	401a      	ands	r2, r3
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001544:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	fa01 f303 	lsl.w	r3, r1, r3
 800154e:	43d9      	mvns	r1, r3
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001554:	4313      	orrs	r3, r2
         );
}
 8001556:	4618      	mov	r0, r3
 8001558:	3724      	adds	r7, #36	; 0x24
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr
	...

08001564 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	3b01      	subs	r3, #1
 8001570:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001574:	d301      	bcc.n	800157a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001576:	2301      	movs	r3, #1
 8001578:	e00f      	b.n	800159a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800157a:	4a0a      	ldr	r2, [pc, #40]	; (80015a4 <SysTick_Config+0x40>)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	3b01      	subs	r3, #1
 8001580:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001582:	210f      	movs	r1, #15
 8001584:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001588:	f7ff ff8e 	bl	80014a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800158c:	4b05      	ldr	r3, [pc, #20]	; (80015a4 <SysTick_Config+0x40>)
 800158e:	2200      	movs	r2, #0
 8001590:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001592:	4b04      	ldr	r3, [pc, #16]	; (80015a4 <SysTick_Config+0x40>)
 8001594:	2207      	movs	r2, #7
 8001596:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001598:	2300      	movs	r3, #0
}
 800159a:	4618      	mov	r0, r3
 800159c:	3708      	adds	r7, #8
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	e000e010 	.word	0xe000e010

080015a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b082      	sub	sp, #8
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015b0:	6878      	ldr	r0, [r7, #4]
 80015b2:	f7ff ff29 	bl	8001408 <__NVIC_SetPriorityGrouping>
}
 80015b6:	bf00      	nop
 80015b8:	3708      	adds	r7, #8
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}

080015be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015be:	b580      	push	{r7, lr}
 80015c0:	b086      	sub	sp, #24
 80015c2:	af00      	add	r7, sp, #0
 80015c4:	4603      	mov	r3, r0
 80015c6:	60b9      	str	r1, [r7, #8]
 80015c8:	607a      	str	r2, [r7, #4]
 80015ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015cc:	2300      	movs	r3, #0
 80015ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015d0:	f7ff ff3e 	bl	8001450 <__NVIC_GetPriorityGrouping>
 80015d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015d6:	687a      	ldr	r2, [r7, #4]
 80015d8:	68b9      	ldr	r1, [r7, #8]
 80015da:	6978      	ldr	r0, [r7, #20]
 80015dc:	f7ff ff8e 	bl	80014fc <NVIC_EncodePriority>
 80015e0:	4602      	mov	r2, r0
 80015e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015e6:	4611      	mov	r1, r2
 80015e8:	4618      	mov	r0, r3
 80015ea:	f7ff ff5d 	bl	80014a8 <__NVIC_SetPriority>
}
 80015ee:	bf00      	nop
 80015f0:	3718      	adds	r7, #24
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}

080015f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015f6:	b580      	push	{r7, lr}
 80015f8:	b082      	sub	sp, #8
 80015fa:	af00      	add	r7, sp, #0
 80015fc:	4603      	mov	r3, r0
 80015fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001600:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001604:	4618      	mov	r0, r3
 8001606:	f7ff ff31 	bl	800146c <__NVIC_EnableIRQ>
}
 800160a:	bf00      	nop
 800160c:	3708      	adds	r7, #8
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}

08001612 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001612:	b580      	push	{r7, lr}
 8001614:	b082      	sub	sp, #8
 8001616:	af00      	add	r7, sp, #0
 8001618:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800161a:	6878      	ldr	r0, [r7, #4]
 800161c:	f7ff ffa2 	bl	8001564 <SysTick_Config>
 8001620:	4603      	mov	r3, r0
}
 8001622:	4618      	mov	r0, r3
 8001624:	3708      	adds	r7, #8
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}

0800162a <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 800162a:	b580      	push	{r7, lr}
 800162c:	b084      	sub	sp, #16
 800162e:	af00      	add	r7, sp, #0
 8001630:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001632:	2300      	movs	r3, #0
 8001634:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d101      	bne.n	8001640 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800163c:	2301      	movs	r3, #1
 800163e:	e037      	b.n	80016b0 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2202      	movs	r2, #2
 8001644:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001656:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800165a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001664:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	68db      	ldr	r3, [r3, #12]
 800166a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001670:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	695b      	ldr	r3, [r3, #20]
 8001676:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800167c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	69db      	ldr	r3, [r3, #28]
 8001682:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001684:	68fa      	ldr	r2, [r7, #12]
 8001686:	4313      	orrs	r3, r2
 8001688:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	68fa      	ldr	r2, [r7, #12]
 8001690:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8001692:	6878      	ldr	r0, [r7, #4]
 8001694:	f000 f9b8 	bl	8001a08 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2200      	movs	r2, #0
 800169c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	2201      	movs	r2, #1
 80016a2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2200      	movs	r2, #0
 80016aa:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80016ae:	2300      	movs	r3, #0
}  
 80016b0:	4618      	mov	r0, r3
 80016b2:	3710      	adds	r7, #16
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}

080016b8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b086      	sub	sp, #24
 80016bc:	af00      	add	r7, sp, #0
 80016be:	60f8      	str	r0, [r7, #12]
 80016c0:	60b9      	str	r1, [r7, #8]
 80016c2:	607a      	str	r2, [r7, #4]
 80016c4:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 80016c6:	2300      	movs	r3, #0
 80016c8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016d0:	2b01      	cmp	r3, #1
 80016d2:	d101      	bne.n	80016d8 <HAL_DMA_Start_IT+0x20>
 80016d4:	2302      	movs	r3, #2
 80016d6:	e04a      	b.n	800176e <HAL_DMA_Start_IT+0xb6>
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	2201      	movs	r2, #1
 80016dc:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80016e6:	2b01      	cmp	r3, #1
 80016e8:	d13a      	bne.n	8001760 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	2202      	movs	r2, #2
 80016ee:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	2200      	movs	r2, #0
 80016f6:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	681a      	ldr	r2, [r3, #0]
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f022 0201 	bic.w	r2, r2, #1
 8001706:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	687a      	ldr	r2, [r7, #4]
 800170c:	68b9      	ldr	r1, [r7, #8]
 800170e:	68f8      	ldr	r0, [r7, #12]
 8001710:	f000 f94b 	bl	80019aa <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001718:	2b00      	cmp	r3, #0
 800171a:	d008      	beq.n	800172e <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	681a      	ldr	r2, [r3, #0]
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f042 020e 	orr.w	r2, r2, #14
 800172a:	601a      	str	r2, [r3, #0]
 800172c:	e00f      	b.n	800174e <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	681a      	ldr	r2, [r3, #0]
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f042 020a 	orr.w	r2, r2, #10
 800173c:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	681a      	ldr	r2, [r3, #0]
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f022 0204 	bic.w	r2, r2, #4
 800174c:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	681a      	ldr	r2, [r3, #0]
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f042 0201 	orr.w	r2, r2, #1
 800175c:	601a      	str	r2, [r3, #0]
 800175e:	e005      	b.n	800176c <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	2200      	movs	r2, #0
 8001764:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8001768:	2302      	movs	r3, #2
 800176a:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 800176c:	7dfb      	ldrb	r3, [r7, #23]
} 
 800176e:	4618      	mov	r0, r3
 8001770:	3718      	adds	r7, #24
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}

08001776 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001776:	b480      	push	{r7}
 8001778:	b083      	sub	sp, #12
 800177a:	af00      	add	r7, sp, #0
 800177c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001784:	2b02      	cmp	r3, #2
 8001786:	d008      	beq.n	800179a <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2204      	movs	r2, #4
 800178c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	2200      	movs	r2, #0
 8001792:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001796:	2301      	movs	r3, #1
 8001798:	e020      	b.n	80017dc <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	681a      	ldr	r2, [r3, #0]
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f022 020e 	bic.w	r2, r2, #14
 80017a8:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	681a      	ldr	r2, [r3, #0]
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f022 0201 	bic.w	r2, r2, #1
 80017b8:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017c2:	2101      	movs	r1, #1
 80017c4:	fa01 f202 	lsl.w	r2, r1, r2
 80017c8:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	2201      	movs	r2, #1
 80017ce:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	2200      	movs	r2, #0
 80017d6:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80017da:	2300      	movs	r3, #0
}
 80017dc:	4618      	mov	r0, r3
 80017de:	370c      	adds	r7, #12
 80017e0:	46bd      	mov	sp, r7
 80017e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e6:	4770      	bx	lr

080017e8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b084      	sub	sp, #16
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80017f0:	2300      	movs	r3, #0
 80017f2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80017fa:	2b02      	cmp	r3, #2
 80017fc:	d005      	beq.n	800180a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2204      	movs	r2, #4
 8001802:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001804:	2301      	movs	r3, #1
 8001806:	73fb      	strb	r3, [r7, #15]
 8001808:	e027      	b.n	800185a <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	681a      	ldr	r2, [r3, #0]
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f022 020e 	bic.w	r2, r2, #14
 8001818:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	681a      	ldr	r2, [r3, #0]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f022 0201 	bic.w	r2, r2, #1
 8001828:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001832:	2101      	movs	r1, #1
 8001834:	fa01 f202 	lsl.w	r2, r1, r2
 8001838:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	2201      	movs	r2, #1
 800183e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2200      	movs	r2, #0
 8001846:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800184e:	2b00      	cmp	r3, #0
 8001850:	d003      	beq.n	800185a <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001856:	6878      	ldr	r0, [r7, #4]
 8001858:	4798      	blx	r3
    } 
  }
  return status;
 800185a:	7bfb      	ldrb	r3, [r7, #15]
}
 800185c:	4618      	mov	r0, r3
 800185e:	3710      	adds	r7, #16
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}

08001864 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b084      	sub	sp, #16
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001880:	2204      	movs	r2, #4
 8001882:	409a      	lsls	r2, r3
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	4013      	ands	r3, r2
 8001888:	2b00      	cmp	r3, #0
 800188a:	d024      	beq.n	80018d6 <HAL_DMA_IRQHandler+0x72>
 800188c:	68bb      	ldr	r3, [r7, #8]
 800188e:	f003 0304 	and.w	r3, r3, #4
 8001892:	2b00      	cmp	r3, #0
 8001894:	d01f      	beq.n	80018d6 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f003 0320 	and.w	r3, r3, #32
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d107      	bne.n	80018b4 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	681a      	ldr	r2, [r3, #0]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f022 0204 	bic.w	r2, r2, #4
 80018b2:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018bc:	2104      	movs	r1, #4
 80018be:	fa01 f202 	lsl.w	r2, r1, r2
 80018c2:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d06a      	beq.n	80019a2 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018d0:	6878      	ldr	r0, [r7, #4]
 80018d2:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 80018d4:	e065      	b.n	80019a2 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018da:	2202      	movs	r2, #2
 80018dc:	409a      	lsls	r2, r3
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	4013      	ands	r3, r2
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d02c      	beq.n	8001940 <HAL_DMA_IRQHandler+0xdc>
 80018e6:	68bb      	ldr	r3, [r7, #8]
 80018e8:	f003 0302 	and.w	r3, r3, #2
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d027      	beq.n	8001940 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f003 0320 	and.w	r3, r3, #32
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d10b      	bne.n	8001916 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	681a      	ldr	r2, [r3, #0]
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f022 020a 	bic.w	r2, r2, #10
 800190c:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2201      	movs	r2, #1
 8001912:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800191e:	2102      	movs	r1, #2
 8001920:	fa01 f202 	lsl.w	r2, r1, r2
 8001924:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2200      	movs	r2, #0
 800192a:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001932:	2b00      	cmp	r3, #0
 8001934:	d035      	beq.n	80019a2 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800193a:	6878      	ldr	r0, [r7, #4]
 800193c:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 800193e:	e030      	b.n	80019a2 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001944:	2208      	movs	r2, #8
 8001946:	409a      	lsls	r2, r3
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	4013      	ands	r3, r2
 800194c:	2b00      	cmp	r3, #0
 800194e:	d028      	beq.n	80019a2 <HAL_DMA_IRQHandler+0x13e>
 8001950:	68bb      	ldr	r3, [r7, #8]
 8001952:	f003 0308 	and.w	r3, r3, #8
 8001956:	2b00      	cmp	r3, #0
 8001958:	d023      	beq.n	80019a2 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	681a      	ldr	r2, [r3, #0]
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f022 020e 	bic.w	r2, r2, #14
 8001968:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001972:	2101      	movs	r1, #1
 8001974:	fa01 f202 	lsl.w	r2, r1, r2
 8001978:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2201      	movs	r2, #1
 800197e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2201      	movs	r2, #1
 8001984:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2200      	movs	r2, #0
 800198c:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001994:	2b00      	cmp	r3, #0
 8001996:	d004      	beq.n	80019a2 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199c:	6878      	ldr	r0, [r7, #4]
 800199e:	4798      	blx	r3
    }
  }
}  
 80019a0:	e7ff      	b.n	80019a2 <HAL_DMA_IRQHandler+0x13e>
 80019a2:	bf00      	nop
 80019a4:	3710      	adds	r7, #16
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}

080019aa <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80019aa:	b480      	push	{r7}
 80019ac:	b085      	sub	sp, #20
 80019ae:	af00      	add	r7, sp, #0
 80019b0:	60f8      	str	r0, [r7, #12]
 80019b2:	60b9      	str	r1, [r7, #8]
 80019b4:	607a      	str	r2, [r7, #4]
 80019b6:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019c0:	2101      	movs	r1, #1
 80019c2:	fa01 f202 	lsl.w	r2, r1, r2
 80019c6:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	683a      	ldr	r2, [r7, #0]
 80019ce:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	2b10      	cmp	r3, #16
 80019d6:	d108      	bne.n	80019ea <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	687a      	ldr	r2, [r7, #4]
 80019de:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	68ba      	ldr	r2, [r7, #8]
 80019e6:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80019e8:	e007      	b.n	80019fa <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	68ba      	ldr	r2, [r7, #8]
 80019f0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	687a      	ldr	r2, [r7, #4]
 80019f8:	60da      	str	r2, [r3, #12]
}
 80019fa:	bf00      	nop
 80019fc:	3714      	adds	r7, #20
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr
	...

08001a08 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b083      	sub	sp, #12
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	461a      	mov	r2, r3
 8001a16:	4b09      	ldr	r3, [pc, #36]	; (8001a3c <DMA_CalcBaseAndBitshift+0x34>)
 8001a18:	4413      	add	r3, r2
 8001a1a:	4a09      	ldr	r2, [pc, #36]	; (8001a40 <DMA_CalcBaseAndBitshift+0x38>)
 8001a1c:	fba2 2303 	umull	r2, r3, r2, r3
 8001a20:	091b      	lsrs	r3, r3, #4
 8001a22:	009a      	lsls	r2, r3, #2
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	4a06      	ldr	r2, [pc, #24]	; (8001a44 <DMA_CalcBaseAndBitshift+0x3c>)
 8001a2c:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8001a2e:	bf00      	nop
 8001a30:	370c      	adds	r7, #12
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr
 8001a3a:	bf00      	nop
 8001a3c:	bffdfff8 	.word	0xbffdfff8
 8001a40:	cccccccd 	.word	0xcccccccd
 8001a44:	40020000 	.word	0x40020000

08001a48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b087      	sub	sp, #28
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
 8001a50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a52:	2300      	movs	r3, #0
 8001a54:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a56:	e14e      	b.n	8001cf6 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	681a      	ldr	r2, [r3, #0]
 8001a5c:	2101      	movs	r1, #1
 8001a5e:	697b      	ldr	r3, [r7, #20]
 8001a60:	fa01 f303 	lsl.w	r3, r1, r3
 8001a64:	4013      	ands	r3, r2
 8001a66:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	f000 8140 	beq.w	8001cf0 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	f003 0303 	and.w	r3, r3, #3
 8001a78:	2b01      	cmp	r3, #1
 8001a7a:	d005      	beq.n	8001a88 <HAL_GPIO_Init+0x40>
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	f003 0303 	and.w	r3, r3, #3
 8001a84:	2b02      	cmp	r3, #2
 8001a86:	d130      	bne.n	8001aea <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	689b      	ldr	r3, [r3, #8]
 8001a8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001a8e:	697b      	ldr	r3, [r7, #20]
 8001a90:	005b      	lsls	r3, r3, #1
 8001a92:	2203      	movs	r2, #3
 8001a94:	fa02 f303 	lsl.w	r3, r2, r3
 8001a98:	43db      	mvns	r3, r3
 8001a9a:	693a      	ldr	r2, [r7, #16]
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	68da      	ldr	r2, [r3, #12]
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	005b      	lsls	r3, r3, #1
 8001aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8001aac:	693a      	ldr	r2, [r7, #16]
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	693a      	ldr	r2, [r7, #16]
 8001ab6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001abe:	2201      	movs	r2, #1
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac6:	43db      	mvns	r3, r3
 8001ac8:	693a      	ldr	r2, [r7, #16]
 8001aca:	4013      	ands	r3, r2
 8001acc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	091b      	lsrs	r3, r3, #4
 8001ad4:	f003 0201 	and.w	r2, r3, #1
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	fa02 f303 	lsl.w	r3, r2, r3
 8001ade:	693a      	ldr	r2, [r7, #16]
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	693a      	ldr	r2, [r7, #16]
 8001ae8:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	f003 0303 	and.w	r3, r3, #3
 8001af2:	2b03      	cmp	r3, #3
 8001af4:	d017      	beq.n	8001b26 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	68db      	ldr	r3, [r3, #12]
 8001afa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	005b      	lsls	r3, r3, #1
 8001b00:	2203      	movs	r2, #3
 8001b02:	fa02 f303 	lsl.w	r3, r2, r3
 8001b06:	43db      	mvns	r3, r3
 8001b08:	693a      	ldr	r2, [r7, #16]
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	689a      	ldr	r2, [r3, #8]
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	005b      	lsls	r3, r3, #1
 8001b16:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1a:	693a      	ldr	r2, [r7, #16]
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	693a      	ldr	r2, [r7, #16]
 8001b24:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	f003 0303 	and.w	r3, r3, #3
 8001b2e:	2b02      	cmp	r3, #2
 8001b30:	d123      	bne.n	8001b7a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	08da      	lsrs	r2, r3, #3
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	3208      	adds	r2, #8
 8001b3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b3e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	f003 0307 	and.w	r3, r3, #7
 8001b46:	009b      	lsls	r3, r3, #2
 8001b48:	220f      	movs	r2, #15
 8001b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4e:	43db      	mvns	r3, r3
 8001b50:	693a      	ldr	r2, [r7, #16]
 8001b52:	4013      	ands	r3, r2
 8001b54:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	691a      	ldr	r2, [r3, #16]
 8001b5a:	697b      	ldr	r3, [r7, #20]
 8001b5c:	f003 0307 	and.w	r3, r3, #7
 8001b60:	009b      	lsls	r3, r3, #2
 8001b62:	fa02 f303 	lsl.w	r3, r2, r3
 8001b66:	693a      	ldr	r2, [r7, #16]
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	08da      	lsrs	r2, r3, #3
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	3208      	adds	r2, #8
 8001b74:	6939      	ldr	r1, [r7, #16]
 8001b76:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	005b      	lsls	r3, r3, #1
 8001b84:	2203      	movs	r2, #3
 8001b86:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8a:	43db      	mvns	r3, r3
 8001b8c:	693a      	ldr	r2, [r7, #16]
 8001b8e:	4013      	ands	r3, r2
 8001b90:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	f003 0203 	and.w	r2, r3, #3
 8001b9a:	697b      	ldr	r3, [r7, #20]
 8001b9c:	005b      	lsls	r3, r3, #1
 8001b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba2:	693a      	ldr	r2, [r7, #16]
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	693a      	ldr	r2, [r7, #16]
 8001bac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	f000 809a 	beq.w	8001cf0 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bbc:	4b55      	ldr	r3, [pc, #340]	; (8001d14 <HAL_GPIO_Init+0x2cc>)
 8001bbe:	699b      	ldr	r3, [r3, #24]
 8001bc0:	4a54      	ldr	r2, [pc, #336]	; (8001d14 <HAL_GPIO_Init+0x2cc>)
 8001bc2:	f043 0301 	orr.w	r3, r3, #1
 8001bc6:	6193      	str	r3, [r2, #24]
 8001bc8:	4b52      	ldr	r3, [pc, #328]	; (8001d14 <HAL_GPIO_Init+0x2cc>)
 8001bca:	699b      	ldr	r3, [r3, #24]
 8001bcc:	f003 0301 	and.w	r3, r3, #1
 8001bd0:	60bb      	str	r3, [r7, #8]
 8001bd2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001bd4:	4a50      	ldr	r2, [pc, #320]	; (8001d18 <HAL_GPIO_Init+0x2d0>)
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	089b      	lsrs	r3, r3, #2
 8001bda:	3302      	adds	r3, #2
 8001bdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001be0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001be2:	697b      	ldr	r3, [r7, #20]
 8001be4:	f003 0303 	and.w	r3, r3, #3
 8001be8:	009b      	lsls	r3, r3, #2
 8001bea:	220f      	movs	r2, #15
 8001bec:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf0:	43db      	mvns	r3, r3
 8001bf2:	693a      	ldr	r2, [r7, #16]
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001bfe:	d013      	beq.n	8001c28 <HAL_GPIO_Init+0x1e0>
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	4a46      	ldr	r2, [pc, #280]	; (8001d1c <HAL_GPIO_Init+0x2d4>)
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d00d      	beq.n	8001c24 <HAL_GPIO_Init+0x1dc>
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	4a45      	ldr	r2, [pc, #276]	; (8001d20 <HAL_GPIO_Init+0x2d8>)
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d007      	beq.n	8001c20 <HAL_GPIO_Init+0x1d8>
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	4a44      	ldr	r2, [pc, #272]	; (8001d24 <HAL_GPIO_Init+0x2dc>)
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d101      	bne.n	8001c1c <HAL_GPIO_Init+0x1d4>
 8001c18:	2303      	movs	r3, #3
 8001c1a:	e006      	b.n	8001c2a <HAL_GPIO_Init+0x1e2>
 8001c1c:	2305      	movs	r3, #5
 8001c1e:	e004      	b.n	8001c2a <HAL_GPIO_Init+0x1e2>
 8001c20:	2302      	movs	r3, #2
 8001c22:	e002      	b.n	8001c2a <HAL_GPIO_Init+0x1e2>
 8001c24:	2301      	movs	r3, #1
 8001c26:	e000      	b.n	8001c2a <HAL_GPIO_Init+0x1e2>
 8001c28:	2300      	movs	r3, #0
 8001c2a:	697a      	ldr	r2, [r7, #20]
 8001c2c:	f002 0203 	and.w	r2, r2, #3
 8001c30:	0092      	lsls	r2, r2, #2
 8001c32:	4093      	lsls	r3, r2
 8001c34:	693a      	ldr	r2, [r7, #16]
 8001c36:	4313      	orrs	r3, r2
 8001c38:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001c3a:	4937      	ldr	r1, [pc, #220]	; (8001d18 <HAL_GPIO_Init+0x2d0>)
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	089b      	lsrs	r3, r3, #2
 8001c40:	3302      	adds	r3, #2
 8001c42:	693a      	ldr	r2, [r7, #16]
 8001c44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c48:	4b37      	ldr	r3, [pc, #220]	; (8001d28 <HAL_GPIO_Init+0x2e0>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	43db      	mvns	r3, r3
 8001c52:	693a      	ldr	r2, [r7, #16]
 8001c54:	4013      	ands	r3, r2
 8001c56:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d003      	beq.n	8001c6c <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001c64:	693a      	ldr	r2, [r7, #16]
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001c6c:	4a2e      	ldr	r2, [pc, #184]	; (8001d28 <HAL_GPIO_Init+0x2e0>)
 8001c6e:	693b      	ldr	r3, [r7, #16]
 8001c70:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001c72:	4b2d      	ldr	r3, [pc, #180]	; (8001d28 <HAL_GPIO_Init+0x2e0>)
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	43db      	mvns	r3, r3
 8001c7c:	693a      	ldr	r2, [r7, #16]
 8001c7e:	4013      	ands	r3, r2
 8001c80:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d003      	beq.n	8001c96 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001c8e:	693a      	ldr	r2, [r7, #16]
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	4313      	orrs	r3, r2
 8001c94:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001c96:	4a24      	ldr	r2, [pc, #144]	; (8001d28 <HAL_GPIO_Init+0x2e0>)
 8001c98:	693b      	ldr	r3, [r7, #16]
 8001c9a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c9c:	4b22      	ldr	r3, [pc, #136]	; (8001d28 <HAL_GPIO_Init+0x2e0>)
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	43db      	mvns	r3, r3
 8001ca6:	693a      	ldr	r2, [r7, #16]
 8001ca8:	4013      	ands	r3, r2
 8001caa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d003      	beq.n	8001cc0 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001cb8:	693a      	ldr	r2, [r7, #16]
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001cc0:	4a19      	ldr	r2, [pc, #100]	; (8001d28 <HAL_GPIO_Init+0x2e0>)
 8001cc2:	693b      	ldr	r3, [r7, #16]
 8001cc4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001cc6:	4b18      	ldr	r3, [pc, #96]	; (8001d28 <HAL_GPIO_Init+0x2e0>)
 8001cc8:	68db      	ldr	r3, [r3, #12]
 8001cca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	43db      	mvns	r3, r3
 8001cd0:	693a      	ldr	r2, [r7, #16]
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d003      	beq.n	8001cea <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001ce2:	693a      	ldr	r2, [r7, #16]
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001cea:	4a0f      	ldr	r2, [pc, #60]	; (8001d28 <HAL_GPIO_Init+0x2e0>)
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	3301      	adds	r3, #1
 8001cf4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	697b      	ldr	r3, [r7, #20]
 8001cfc:	fa22 f303 	lsr.w	r3, r2, r3
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	f47f aea9 	bne.w	8001a58 <HAL_GPIO_Init+0x10>
  }
}
 8001d06:	bf00      	nop
 8001d08:	371c      	adds	r7, #28
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr
 8001d12:	bf00      	nop
 8001d14:	40021000 	.word	0x40021000
 8001d18:	40010000 	.word	0x40010000
 8001d1c:	48000400 	.word	0x48000400
 8001d20:	48000800 	.word	0x48000800
 8001d24:	48000c00 	.word	0x48000c00
 8001d28:	40010400 	.word	0x40010400

08001d2c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b085      	sub	sp, #20
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
 8001d34:	460b      	mov	r3, r1
 8001d36:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	691a      	ldr	r2, [r3, #16]
 8001d3c:	887b      	ldrh	r3, [r7, #2]
 8001d3e:	4013      	ands	r3, r2
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d002      	beq.n	8001d4a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001d44:	2301      	movs	r3, #1
 8001d46:	73fb      	strb	r3, [r7, #15]
 8001d48:	e001      	b.n	8001d4e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001d4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	3714      	adds	r7, #20
 8001d54:	46bd      	mov	sp, r7
 8001d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5a:	4770      	bx	lr

08001d5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b083      	sub	sp, #12
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
 8001d64:	460b      	mov	r3, r1
 8001d66:	807b      	strh	r3, [r7, #2]
 8001d68:	4613      	mov	r3, r2
 8001d6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d6c:	787b      	ldrb	r3, [r7, #1]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d003      	beq.n	8001d7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001d72:	887a      	ldrh	r2, [r7, #2]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001d78:	e002      	b.n	8001d80 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001d7a:	887a      	ldrh	r2, [r7, #2]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001d80:	bf00      	nop
 8001d82:	370c      	adds	r7, #12
 8001d84:	46bd      	mov	sp, r7
 8001d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8a:	4770      	bx	lr

08001d8c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b082      	sub	sp, #8
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	4603      	mov	r3, r0
 8001d94:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001d96:	4b08      	ldr	r3, [pc, #32]	; (8001db8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d98:	695a      	ldr	r2, [r3, #20]
 8001d9a:	88fb      	ldrh	r3, [r7, #6]
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d006      	beq.n	8001db0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001da2:	4a05      	ldr	r2, [pc, #20]	; (8001db8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001da4:	88fb      	ldrh	r3, [r7, #6]
 8001da6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001da8:	88fb      	ldrh	r3, [r7, #6]
 8001daa:	4618      	mov	r0, r3
 8001dac:	f7fe fb10 	bl	80003d0 <HAL_GPIO_EXTI_Callback>
  }
}
 8001db0:	bf00      	nop
 8001db2:	3708      	adds	r7, #8
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	40010400 	.word	0x40010400

08001dbc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001dc2:	af00      	add	r7, sp, #0
 8001dc4:	1d3b      	adds	r3, r7, #4
 8001dc6:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001dc8:	1d3b      	adds	r3, r7, #4
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d102      	bne.n	8001dd6 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	f000 bef4 	b.w	8002bbe <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001dd6:	1d3b      	adds	r3, r7, #4
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f003 0301 	and.w	r3, r3, #1
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	f000 816a 	beq.w	80020ba <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001de6:	4bb3      	ldr	r3, [pc, #716]	; (80020b4 <HAL_RCC_OscConfig+0x2f8>)
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	f003 030c 	and.w	r3, r3, #12
 8001dee:	2b04      	cmp	r3, #4
 8001df0:	d00c      	beq.n	8001e0c <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001df2:	4bb0      	ldr	r3, [pc, #704]	; (80020b4 <HAL_RCC_OscConfig+0x2f8>)
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	f003 030c 	and.w	r3, r3, #12
 8001dfa:	2b08      	cmp	r3, #8
 8001dfc:	d159      	bne.n	8001eb2 <HAL_RCC_OscConfig+0xf6>
 8001dfe:	4bad      	ldr	r3, [pc, #692]	; (80020b4 <HAL_RCC_OscConfig+0x2f8>)
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e0a:	d152      	bne.n	8001eb2 <HAL_RCC_OscConfig+0xf6>
 8001e0c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e10:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e14:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001e18:	fa93 f3a3 	rbit	r3, r3
 8001e1c:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001e20:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e24:	fab3 f383 	clz	r3, r3
 8001e28:	b2db      	uxtb	r3, r3
 8001e2a:	095b      	lsrs	r3, r3, #5
 8001e2c:	b2db      	uxtb	r3, r3
 8001e2e:	f043 0301 	orr.w	r3, r3, #1
 8001e32:	b2db      	uxtb	r3, r3
 8001e34:	2b01      	cmp	r3, #1
 8001e36:	d102      	bne.n	8001e3e <HAL_RCC_OscConfig+0x82>
 8001e38:	4b9e      	ldr	r3, [pc, #632]	; (80020b4 <HAL_RCC_OscConfig+0x2f8>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	e015      	b.n	8001e6a <HAL_RCC_OscConfig+0xae>
 8001e3e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e42:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e46:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001e4a:	fa93 f3a3 	rbit	r3, r3
 8001e4e:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001e52:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e56:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001e5a:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001e5e:	fa93 f3a3 	rbit	r3, r3
 8001e62:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001e66:	4b93      	ldr	r3, [pc, #588]	; (80020b4 <HAL_RCC_OscConfig+0x2f8>)
 8001e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e6a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001e6e:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001e72:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001e76:	fa92 f2a2 	rbit	r2, r2
 8001e7a:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001e7e:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001e82:	fab2 f282 	clz	r2, r2
 8001e86:	b2d2      	uxtb	r2, r2
 8001e88:	f042 0220 	orr.w	r2, r2, #32
 8001e8c:	b2d2      	uxtb	r2, r2
 8001e8e:	f002 021f 	and.w	r2, r2, #31
 8001e92:	2101      	movs	r1, #1
 8001e94:	fa01 f202 	lsl.w	r2, r1, r2
 8001e98:	4013      	ands	r3, r2
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	f000 810c 	beq.w	80020b8 <HAL_RCC_OscConfig+0x2fc>
 8001ea0:	1d3b      	adds	r3, r7, #4
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	f040 8106 	bne.w	80020b8 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8001eac:	2301      	movs	r3, #1
 8001eae:	f000 be86 	b.w	8002bbe <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001eb2:	1d3b      	adds	r3, r7, #4
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ebc:	d106      	bne.n	8001ecc <HAL_RCC_OscConfig+0x110>
 8001ebe:	4b7d      	ldr	r3, [pc, #500]	; (80020b4 <HAL_RCC_OscConfig+0x2f8>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4a7c      	ldr	r2, [pc, #496]	; (80020b4 <HAL_RCC_OscConfig+0x2f8>)
 8001ec4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ec8:	6013      	str	r3, [r2, #0]
 8001eca:	e030      	b.n	8001f2e <HAL_RCC_OscConfig+0x172>
 8001ecc:	1d3b      	adds	r3, r7, #4
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d10c      	bne.n	8001ef0 <HAL_RCC_OscConfig+0x134>
 8001ed6:	4b77      	ldr	r3, [pc, #476]	; (80020b4 <HAL_RCC_OscConfig+0x2f8>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4a76      	ldr	r2, [pc, #472]	; (80020b4 <HAL_RCC_OscConfig+0x2f8>)
 8001edc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ee0:	6013      	str	r3, [r2, #0]
 8001ee2:	4b74      	ldr	r3, [pc, #464]	; (80020b4 <HAL_RCC_OscConfig+0x2f8>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4a73      	ldr	r2, [pc, #460]	; (80020b4 <HAL_RCC_OscConfig+0x2f8>)
 8001ee8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001eec:	6013      	str	r3, [r2, #0]
 8001eee:	e01e      	b.n	8001f2e <HAL_RCC_OscConfig+0x172>
 8001ef0:	1d3b      	adds	r3, r7, #4
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001efa:	d10c      	bne.n	8001f16 <HAL_RCC_OscConfig+0x15a>
 8001efc:	4b6d      	ldr	r3, [pc, #436]	; (80020b4 <HAL_RCC_OscConfig+0x2f8>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a6c      	ldr	r2, [pc, #432]	; (80020b4 <HAL_RCC_OscConfig+0x2f8>)
 8001f02:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f06:	6013      	str	r3, [r2, #0]
 8001f08:	4b6a      	ldr	r3, [pc, #424]	; (80020b4 <HAL_RCC_OscConfig+0x2f8>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a69      	ldr	r2, [pc, #420]	; (80020b4 <HAL_RCC_OscConfig+0x2f8>)
 8001f0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f12:	6013      	str	r3, [r2, #0]
 8001f14:	e00b      	b.n	8001f2e <HAL_RCC_OscConfig+0x172>
 8001f16:	4b67      	ldr	r3, [pc, #412]	; (80020b4 <HAL_RCC_OscConfig+0x2f8>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4a66      	ldr	r2, [pc, #408]	; (80020b4 <HAL_RCC_OscConfig+0x2f8>)
 8001f1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f20:	6013      	str	r3, [r2, #0]
 8001f22:	4b64      	ldr	r3, [pc, #400]	; (80020b4 <HAL_RCC_OscConfig+0x2f8>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4a63      	ldr	r2, [pc, #396]	; (80020b4 <HAL_RCC_OscConfig+0x2f8>)
 8001f28:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f2c:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001f2e:	4b61      	ldr	r3, [pc, #388]	; (80020b4 <HAL_RCC_OscConfig+0x2f8>)
 8001f30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f32:	f023 020f 	bic.w	r2, r3, #15
 8001f36:	1d3b      	adds	r3, r7, #4
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	689b      	ldr	r3, [r3, #8]
 8001f3c:	495d      	ldr	r1, [pc, #372]	; (80020b4 <HAL_RCC_OscConfig+0x2f8>)
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f42:	1d3b      	adds	r3, r7, #4
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d059      	beq.n	8002000 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f4c:	f7ff fa2e 	bl	80013ac <HAL_GetTick>
 8001f50:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f54:	e00a      	b.n	8001f6c <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f56:	f7ff fa29 	bl	80013ac <HAL_GetTick>
 8001f5a:	4602      	mov	r2, r0
 8001f5c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f60:	1ad3      	subs	r3, r2, r3
 8001f62:	2b64      	cmp	r3, #100	; 0x64
 8001f64:	d902      	bls.n	8001f6c <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8001f66:	2303      	movs	r3, #3
 8001f68:	f000 be29 	b.w	8002bbe <HAL_RCC_OscConfig+0xe02>
 8001f6c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f70:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f74:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001f78:	fa93 f3a3 	rbit	r3, r3
 8001f7c:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001f80:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f84:	fab3 f383 	clz	r3, r3
 8001f88:	b2db      	uxtb	r3, r3
 8001f8a:	095b      	lsrs	r3, r3, #5
 8001f8c:	b2db      	uxtb	r3, r3
 8001f8e:	f043 0301 	orr.w	r3, r3, #1
 8001f92:	b2db      	uxtb	r3, r3
 8001f94:	2b01      	cmp	r3, #1
 8001f96:	d102      	bne.n	8001f9e <HAL_RCC_OscConfig+0x1e2>
 8001f98:	4b46      	ldr	r3, [pc, #280]	; (80020b4 <HAL_RCC_OscConfig+0x2f8>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	e015      	b.n	8001fca <HAL_RCC_OscConfig+0x20e>
 8001f9e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001fa2:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fa6:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001faa:	fa93 f3a3 	rbit	r3, r3
 8001fae:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001fb2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001fb6:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001fba:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001fbe:	fa93 f3a3 	rbit	r3, r3
 8001fc2:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001fc6:	4b3b      	ldr	r3, [pc, #236]	; (80020b4 <HAL_RCC_OscConfig+0x2f8>)
 8001fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fca:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001fce:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001fd2:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001fd6:	fa92 f2a2 	rbit	r2, r2
 8001fda:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001fde:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001fe2:	fab2 f282 	clz	r2, r2
 8001fe6:	b2d2      	uxtb	r2, r2
 8001fe8:	f042 0220 	orr.w	r2, r2, #32
 8001fec:	b2d2      	uxtb	r2, r2
 8001fee:	f002 021f 	and.w	r2, r2, #31
 8001ff2:	2101      	movs	r1, #1
 8001ff4:	fa01 f202 	lsl.w	r2, r1, r2
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d0ab      	beq.n	8001f56 <HAL_RCC_OscConfig+0x19a>
 8001ffe:	e05c      	b.n	80020ba <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002000:	f7ff f9d4 	bl	80013ac <HAL_GetTick>
 8002004:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002008:	e00a      	b.n	8002020 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800200a:	f7ff f9cf 	bl	80013ac <HAL_GetTick>
 800200e:	4602      	mov	r2, r0
 8002010:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002014:	1ad3      	subs	r3, r2, r3
 8002016:	2b64      	cmp	r3, #100	; 0x64
 8002018:	d902      	bls.n	8002020 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 800201a:	2303      	movs	r3, #3
 800201c:	f000 bdcf 	b.w	8002bbe <HAL_RCC_OscConfig+0xe02>
 8002020:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002024:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002028:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800202c:	fa93 f3a3 	rbit	r3, r3
 8002030:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002034:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002038:	fab3 f383 	clz	r3, r3
 800203c:	b2db      	uxtb	r3, r3
 800203e:	095b      	lsrs	r3, r3, #5
 8002040:	b2db      	uxtb	r3, r3
 8002042:	f043 0301 	orr.w	r3, r3, #1
 8002046:	b2db      	uxtb	r3, r3
 8002048:	2b01      	cmp	r3, #1
 800204a:	d102      	bne.n	8002052 <HAL_RCC_OscConfig+0x296>
 800204c:	4b19      	ldr	r3, [pc, #100]	; (80020b4 <HAL_RCC_OscConfig+0x2f8>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	e015      	b.n	800207e <HAL_RCC_OscConfig+0x2c2>
 8002052:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002056:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800205a:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800205e:	fa93 f3a3 	rbit	r3, r3
 8002062:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002066:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800206a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800206e:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002072:	fa93 f3a3 	rbit	r3, r3
 8002076:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800207a:	4b0e      	ldr	r3, [pc, #56]	; (80020b4 <HAL_RCC_OscConfig+0x2f8>)
 800207c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800207e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002082:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002086:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800208a:	fa92 f2a2 	rbit	r2, r2
 800208e:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002092:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002096:	fab2 f282 	clz	r2, r2
 800209a:	b2d2      	uxtb	r2, r2
 800209c:	f042 0220 	orr.w	r2, r2, #32
 80020a0:	b2d2      	uxtb	r2, r2
 80020a2:	f002 021f 	and.w	r2, r2, #31
 80020a6:	2101      	movs	r1, #1
 80020a8:	fa01 f202 	lsl.w	r2, r1, r2
 80020ac:	4013      	ands	r3, r2
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d1ab      	bne.n	800200a <HAL_RCC_OscConfig+0x24e>
 80020b2:	e002      	b.n	80020ba <HAL_RCC_OscConfig+0x2fe>
 80020b4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020ba:	1d3b      	adds	r3, r7, #4
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f003 0302 	and.w	r3, r3, #2
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	f000 816f 	beq.w	80023a8 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80020ca:	4bd0      	ldr	r3, [pc, #832]	; (800240c <HAL_RCC_OscConfig+0x650>)
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	f003 030c 	and.w	r3, r3, #12
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d00b      	beq.n	80020ee <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80020d6:	4bcd      	ldr	r3, [pc, #820]	; (800240c <HAL_RCC_OscConfig+0x650>)
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	f003 030c 	and.w	r3, r3, #12
 80020de:	2b08      	cmp	r3, #8
 80020e0:	d16c      	bne.n	80021bc <HAL_RCC_OscConfig+0x400>
 80020e2:	4bca      	ldr	r3, [pc, #808]	; (800240c <HAL_RCC_OscConfig+0x650>)
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d166      	bne.n	80021bc <HAL_RCC_OscConfig+0x400>
 80020ee:	2302      	movs	r3, #2
 80020f0:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020f4:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80020f8:	fa93 f3a3 	rbit	r3, r3
 80020fc:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002100:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002104:	fab3 f383 	clz	r3, r3
 8002108:	b2db      	uxtb	r3, r3
 800210a:	095b      	lsrs	r3, r3, #5
 800210c:	b2db      	uxtb	r3, r3
 800210e:	f043 0301 	orr.w	r3, r3, #1
 8002112:	b2db      	uxtb	r3, r3
 8002114:	2b01      	cmp	r3, #1
 8002116:	d102      	bne.n	800211e <HAL_RCC_OscConfig+0x362>
 8002118:	4bbc      	ldr	r3, [pc, #752]	; (800240c <HAL_RCC_OscConfig+0x650>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	e013      	b.n	8002146 <HAL_RCC_OscConfig+0x38a>
 800211e:	2302      	movs	r3, #2
 8002120:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002124:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002128:	fa93 f3a3 	rbit	r3, r3
 800212c:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002130:	2302      	movs	r3, #2
 8002132:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002136:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800213a:	fa93 f3a3 	rbit	r3, r3
 800213e:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002142:	4bb2      	ldr	r3, [pc, #712]	; (800240c <HAL_RCC_OscConfig+0x650>)
 8002144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002146:	2202      	movs	r2, #2
 8002148:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800214c:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002150:	fa92 f2a2 	rbit	r2, r2
 8002154:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002158:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800215c:	fab2 f282 	clz	r2, r2
 8002160:	b2d2      	uxtb	r2, r2
 8002162:	f042 0220 	orr.w	r2, r2, #32
 8002166:	b2d2      	uxtb	r2, r2
 8002168:	f002 021f 	and.w	r2, r2, #31
 800216c:	2101      	movs	r1, #1
 800216e:	fa01 f202 	lsl.w	r2, r1, r2
 8002172:	4013      	ands	r3, r2
 8002174:	2b00      	cmp	r3, #0
 8002176:	d007      	beq.n	8002188 <HAL_RCC_OscConfig+0x3cc>
 8002178:	1d3b      	adds	r3, r7, #4
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	691b      	ldr	r3, [r3, #16]
 800217e:	2b01      	cmp	r3, #1
 8002180:	d002      	beq.n	8002188 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8002182:	2301      	movs	r3, #1
 8002184:	f000 bd1b 	b.w	8002bbe <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002188:	4ba0      	ldr	r3, [pc, #640]	; (800240c <HAL_RCC_OscConfig+0x650>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002190:	1d3b      	adds	r3, r7, #4
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	695b      	ldr	r3, [r3, #20]
 8002196:	21f8      	movs	r1, #248	; 0xf8
 8002198:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800219c:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80021a0:	fa91 f1a1 	rbit	r1, r1
 80021a4:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80021a8:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80021ac:	fab1 f181 	clz	r1, r1
 80021b0:	b2c9      	uxtb	r1, r1
 80021b2:	408b      	lsls	r3, r1
 80021b4:	4995      	ldr	r1, [pc, #596]	; (800240c <HAL_RCC_OscConfig+0x650>)
 80021b6:	4313      	orrs	r3, r2
 80021b8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021ba:	e0f5      	b.n	80023a8 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80021bc:	1d3b      	adds	r3, r7, #4
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	691b      	ldr	r3, [r3, #16]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	f000 8085 	beq.w	80022d2 <HAL_RCC_OscConfig+0x516>
 80021c8:	2301      	movs	r3, #1
 80021ca:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ce:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80021d2:	fa93 f3a3 	rbit	r3, r3
 80021d6:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80021da:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021de:	fab3 f383 	clz	r3, r3
 80021e2:	b2db      	uxtb	r3, r3
 80021e4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80021e8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80021ec:	009b      	lsls	r3, r3, #2
 80021ee:	461a      	mov	r2, r3
 80021f0:	2301      	movs	r3, #1
 80021f2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021f4:	f7ff f8da 	bl	80013ac <HAL_GetTick>
 80021f8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021fc:	e00a      	b.n	8002214 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021fe:	f7ff f8d5 	bl	80013ac <HAL_GetTick>
 8002202:	4602      	mov	r2, r0
 8002204:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002208:	1ad3      	subs	r3, r2, r3
 800220a:	2b02      	cmp	r3, #2
 800220c:	d902      	bls.n	8002214 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 800220e:	2303      	movs	r3, #3
 8002210:	f000 bcd5 	b.w	8002bbe <HAL_RCC_OscConfig+0xe02>
 8002214:	2302      	movs	r3, #2
 8002216:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800221a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800221e:	fa93 f3a3 	rbit	r3, r3
 8002222:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002226:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800222a:	fab3 f383 	clz	r3, r3
 800222e:	b2db      	uxtb	r3, r3
 8002230:	095b      	lsrs	r3, r3, #5
 8002232:	b2db      	uxtb	r3, r3
 8002234:	f043 0301 	orr.w	r3, r3, #1
 8002238:	b2db      	uxtb	r3, r3
 800223a:	2b01      	cmp	r3, #1
 800223c:	d102      	bne.n	8002244 <HAL_RCC_OscConfig+0x488>
 800223e:	4b73      	ldr	r3, [pc, #460]	; (800240c <HAL_RCC_OscConfig+0x650>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	e013      	b.n	800226c <HAL_RCC_OscConfig+0x4b0>
 8002244:	2302      	movs	r3, #2
 8002246:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800224a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800224e:	fa93 f3a3 	rbit	r3, r3
 8002252:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002256:	2302      	movs	r3, #2
 8002258:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800225c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002260:	fa93 f3a3 	rbit	r3, r3
 8002264:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002268:	4b68      	ldr	r3, [pc, #416]	; (800240c <HAL_RCC_OscConfig+0x650>)
 800226a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800226c:	2202      	movs	r2, #2
 800226e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002272:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002276:	fa92 f2a2 	rbit	r2, r2
 800227a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800227e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002282:	fab2 f282 	clz	r2, r2
 8002286:	b2d2      	uxtb	r2, r2
 8002288:	f042 0220 	orr.w	r2, r2, #32
 800228c:	b2d2      	uxtb	r2, r2
 800228e:	f002 021f 	and.w	r2, r2, #31
 8002292:	2101      	movs	r1, #1
 8002294:	fa01 f202 	lsl.w	r2, r1, r2
 8002298:	4013      	ands	r3, r2
 800229a:	2b00      	cmp	r3, #0
 800229c:	d0af      	beq.n	80021fe <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800229e:	4b5b      	ldr	r3, [pc, #364]	; (800240c <HAL_RCC_OscConfig+0x650>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022a6:	1d3b      	adds	r3, r7, #4
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	695b      	ldr	r3, [r3, #20]
 80022ac:	21f8      	movs	r1, #248	; 0xf8
 80022ae:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022b2:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80022b6:	fa91 f1a1 	rbit	r1, r1
 80022ba:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80022be:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80022c2:	fab1 f181 	clz	r1, r1
 80022c6:	b2c9      	uxtb	r1, r1
 80022c8:	408b      	lsls	r3, r1
 80022ca:	4950      	ldr	r1, [pc, #320]	; (800240c <HAL_RCC_OscConfig+0x650>)
 80022cc:	4313      	orrs	r3, r2
 80022ce:	600b      	str	r3, [r1, #0]
 80022d0:	e06a      	b.n	80023a8 <HAL_RCC_OscConfig+0x5ec>
 80022d2:	2301      	movs	r3, #1
 80022d4:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022d8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80022dc:	fa93 f3a3 	rbit	r3, r3
 80022e0:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80022e4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022e8:	fab3 f383 	clz	r3, r3
 80022ec:	b2db      	uxtb	r3, r3
 80022ee:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80022f2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80022f6:	009b      	lsls	r3, r3, #2
 80022f8:	461a      	mov	r2, r3
 80022fa:	2300      	movs	r3, #0
 80022fc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022fe:	f7ff f855 	bl	80013ac <HAL_GetTick>
 8002302:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002306:	e00a      	b.n	800231e <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002308:	f7ff f850 	bl	80013ac <HAL_GetTick>
 800230c:	4602      	mov	r2, r0
 800230e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002312:	1ad3      	subs	r3, r2, r3
 8002314:	2b02      	cmp	r3, #2
 8002316:	d902      	bls.n	800231e <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8002318:	2303      	movs	r3, #3
 800231a:	f000 bc50 	b.w	8002bbe <HAL_RCC_OscConfig+0xe02>
 800231e:	2302      	movs	r3, #2
 8002320:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002324:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002328:	fa93 f3a3 	rbit	r3, r3
 800232c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002330:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002334:	fab3 f383 	clz	r3, r3
 8002338:	b2db      	uxtb	r3, r3
 800233a:	095b      	lsrs	r3, r3, #5
 800233c:	b2db      	uxtb	r3, r3
 800233e:	f043 0301 	orr.w	r3, r3, #1
 8002342:	b2db      	uxtb	r3, r3
 8002344:	2b01      	cmp	r3, #1
 8002346:	d102      	bne.n	800234e <HAL_RCC_OscConfig+0x592>
 8002348:	4b30      	ldr	r3, [pc, #192]	; (800240c <HAL_RCC_OscConfig+0x650>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	e013      	b.n	8002376 <HAL_RCC_OscConfig+0x5ba>
 800234e:	2302      	movs	r3, #2
 8002350:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002354:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002358:	fa93 f3a3 	rbit	r3, r3
 800235c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002360:	2302      	movs	r3, #2
 8002362:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002366:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800236a:	fa93 f3a3 	rbit	r3, r3
 800236e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002372:	4b26      	ldr	r3, [pc, #152]	; (800240c <HAL_RCC_OscConfig+0x650>)
 8002374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002376:	2202      	movs	r2, #2
 8002378:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800237c:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002380:	fa92 f2a2 	rbit	r2, r2
 8002384:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002388:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800238c:	fab2 f282 	clz	r2, r2
 8002390:	b2d2      	uxtb	r2, r2
 8002392:	f042 0220 	orr.w	r2, r2, #32
 8002396:	b2d2      	uxtb	r2, r2
 8002398:	f002 021f 	and.w	r2, r2, #31
 800239c:	2101      	movs	r1, #1
 800239e:	fa01 f202 	lsl.w	r2, r1, r2
 80023a2:	4013      	ands	r3, r2
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d1af      	bne.n	8002308 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023a8:	1d3b      	adds	r3, r7, #4
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f003 0308 	and.w	r3, r3, #8
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	f000 80da 	beq.w	800256c <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80023b8:	1d3b      	adds	r3, r7, #4
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	699b      	ldr	r3, [r3, #24]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d069      	beq.n	8002496 <HAL_RCC_OscConfig+0x6da>
 80023c2:	2301      	movs	r3, #1
 80023c4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023c8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80023cc:	fa93 f3a3 	rbit	r3, r3
 80023d0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80023d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023d8:	fab3 f383 	clz	r3, r3
 80023dc:	b2db      	uxtb	r3, r3
 80023de:	461a      	mov	r2, r3
 80023e0:	4b0b      	ldr	r3, [pc, #44]	; (8002410 <HAL_RCC_OscConfig+0x654>)
 80023e2:	4413      	add	r3, r2
 80023e4:	009b      	lsls	r3, r3, #2
 80023e6:	461a      	mov	r2, r3
 80023e8:	2301      	movs	r3, #1
 80023ea:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023ec:	f7fe ffde 	bl	80013ac <HAL_GetTick>
 80023f0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023f4:	e00e      	b.n	8002414 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023f6:	f7fe ffd9 	bl	80013ac <HAL_GetTick>
 80023fa:	4602      	mov	r2, r0
 80023fc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002400:	1ad3      	subs	r3, r2, r3
 8002402:	2b02      	cmp	r3, #2
 8002404:	d906      	bls.n	8002414 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8002406:	2303      	movs	r3, #3
 8002408:	e3d9      	b.n	8002bbe <HAL_RCC_OscConfig+0xe02>
 800240a:	bf00      	nop
 800240c:	40021000 	.word	0x40021000
 8002410:	10908120 	.word	0x10908120
 8002414:	2302      	movs	r3, #2
 8002416:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800241a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800241e:	fa93 f3a3 	rbit	r3, r3
 8002422:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002426:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800242a:	2202      	movs	r2, #2
 800242c:	601a      	str	r2, [r3, #0]
 800242e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	fa93 f2a3 	rbit	r2, r3
 8002438:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800243c:	601a      	str	r2, [r3, #0]
 800243e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002442:	2202      	movs	r2, #2
 8002444:	601a      	str	r2, [r3, #0]
 8002446:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	fa93 f2a3 	rbit	r2, r3
 8002450:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002454:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002456:	4ba5      	ldr	r3, [pc, #660]	; (80026ec <HAL_RCC_OscConfig+0x930>)
 8002458:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800245a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800245e:	2102      	movs	r1, #2
 8002460:	6019      	str	r1, [r3, #0]
 8002462:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	fa93 f1a3 	rbit	r1, r3
 800246c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002470:	6019      	str	r1, [r3, #0]
  return result;
 8002472:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	fab3 f383 	clz	r3, r3
 800247c:	b2db      	uxtb	r3, r3
 800247e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002482:	b2db      	uxtb	r3, r3
 8002484:	f003 031f 	and.w	r3, r3, #31
 8002488:	2101      	movs	r1, #1
 800248a:	fa01 f303 	lsl.w	r3, r1, r3
 800248e:	4013      	ands	r3, r2
 8002490:	2b00      	cmp	r3, #0
 8002492:	d0b0      	beq.n	80023f6 <HAL_RCC_OscConfig+0x63a>
 8002494:	e06a      	b.n	800256c <HAL_RCC_OscConfig+0x7b0>
 8002496:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800249a:	2201      	movs	r2, #1
 800249c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800249e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	fa93 f2a3 	rbit	r2, r3
 80024a8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80024ac:	601a      	str	r2, [r3, #0]
  return result;
 80024ae:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80024b2:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024b4:	fab3 f383 	clz	r3, r3
 80024b8:	b2db      	uxtb	r3, r3
 80024ba:	461a      	mov	r2, r3
 80024bc:	4b8c      	ldr	r3, [pc, #560]	; (80026f0 <HAL_RCC_OscConfig+0x934>)
 80024be:	4413      	add	r3, r2
 80024c0:	009b      	lsls	r3, r3, #2
 80024c2:	461a      	mov	r2, r3
 80024c4:	2300      	movs	r3, #0
 80024c6:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024c8:	f7fe ff70 	bl	80013ac <HAL_GetTick>
 80024cc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024d0:	e009      	b.n	80024e6 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024d2:	f7fe ff6b 	bl	80013ac <HAL_GetTick>
 80024d6:	4602      	mov	r2, r0
 80024d8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80024dc:	1ad3      	subs	r3, r2, r3
 80024de:	2b02      	cmp	r3, #2
 80024e0:	d901      	bls.n	80024e6 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 80024e2:	2303      	movs	r3, #3
 80024e4:	e36b      	b.n	8002bbe <HAL_RCC_OscConfig+0xe02>
 80024e6:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80024ea:	2202      	movs	r2, #2
 80024ec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ee:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	fa93 f2a3 	rbit	r2, r3
 80024f8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80024fc:	601a      	str	r2, [r3, #0]
 80024fe:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002502:	2202      	movs	r2, #2
 8002504:	601a      	str	r2, [r3, #0]
 8002506:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	fa93 f2a3 	rbit	r2, r3
 8002510:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002514:	601a      	str	r2, [r3, #0]
 8002516:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800251a:	2202      	movs	r2, #2
 800251c:	601a      	str	r2, [r3, #0]
 800251e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	fa93 f2a3 	rbit	r2, r3
 8002528:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800252c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800252e:	4b6f      	ldr	r3, [pc, #444]	; (80026ec <HAL_RCC_OscConfig+0x930>)
 8002530:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002532:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002536:	2102      	movs	r1, #2
 8002538:	6019      	str	r1, [r3, #0]
 800253a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	fa93 f1a3 	rbit	r1, r3
 8002544:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002548:	6019      	str	r1, [r3, #0]
  return result;
 800254a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	fab3 f383 	clz	r3, r3
 8002554:	b2db      	uxtb	r3, r3
 8002556:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800255a:	b2db      	uxtb	r3, r3
 800255c:	f003 031f 	and.w	r3, r3, #31
 8002560:	2101      	movs	r1, #1
 8002562:	fa01 f303 	lsl.w	r3, r1, r3
 8002566:	4013      	ands	r3, r2
 8002568:	2b00      	cmp	r3, #0
 800256a:	d1b2      	bne.n	80024d2 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800256c:	1d3b      	adds	r3, r7, #4
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f003 0304 	and.w	r3, r3, #4
 8002576:	2b00      	cmp	r3, #0
 8002578:	f000 8158 	beq.w	800282c <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 800257c:	2300      	movs	r3, #0
 800257e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002582:	4b5a      	ldr	r3, [pc, #360]	; (80026ec <HAL_RCC_OscConfig+0x930>)
 8002584:	69db      	ldr	r3, [r3, #28]
 8002586:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800258a:	2b00      	cmp	r3, #0
 800258c:	d112      	bne.n	80025b4 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800258e:	4b57      	ldr	r3, [pc, #348]	; (80026ec <HAL_RCC_OscConfig+0x930>)
 8002590:	69db      	ldr	r3, [r3, #28]
 8002592:	4a56      	ldr	r2, [pc, #344]	; (80026ec <HAL_RCC_OscConfig+0x930>)
 8002594:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002598:	61d3      	str	r3, [r2, #28]
 800259a:	4b54      	ldr	r3, [pc, #336]	; (80026ec <HAL_RCC_OscConfig+0x930>)
 800259c:	69db      	ldr	r3, [r3, #28]
 800259e:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80025a2:	f107 0308 	add.w	r3, r7, #8
 80025a6:	601a      	str	r2, [r3, #0]
 80025a8:	f107 0308 	add.w	r3, r7, #8
 80025ac:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80025ae:	2301      	movs	r3, #1
 80025b0:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025b4:	4b4f      	ldr	r3, [pc, #316]	; (80026f4 <HAL_RCC_OscConfig+0x938>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d11a      	bne.n	80025f6 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025c0:	4b4c      	ldr	r3, [pc, #304]	; (80026f4 <HAL_RCC_OscConfig+0x938>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a4b      	ldr	r2, [pc, #300]	; (80026f4 <HAL_RCC_OscConfig+0x938>)
 80025c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025ca:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025cc:	f7fe feee 	bl	80013ac <HAL_GetTick>
 80025d0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025d4:	e009      	b.n	80025ea <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025d6:	f7fe fee9 	bl	80013ac <HAL_GetTick>
 80025da:	4602      	mov	r2, r0
 80025dc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80025e0:	1ad3      	subs	r3, r2, r3
 80025e2:	2b64      	cmp	r3, #100	; 0x64
 80025e4:	d901      	bls.n	80025ea <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 80025e6:	2303      	movs	r3, #3
 80025e8:	e2e9      	b.n	8002bbe <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025ea:	4b42      	ldr	r3, [pc, #264]	; (80026f4 <HAL_RCC_OscConfig+0x938>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d0ef      	beq.n	80025d6 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025f6:	1d3b      	adds	r3, r7, #4
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	68db      	ldr	r3, [r3, #12]
 80025fc:	2b01      	cmp	r3, #1
 80025fe:	d106      	bne.n	800260e <HAL_RCC_OscConfig+0x852>
 8002600:	4b3a      	ldr	r3, [pc, #232]	; (80026ec <HAL_RCC_OscConfig+0x930>)
 8002602:	6a1b      	ldr	r3, [r3, #32]
 8002604:	4a39      	ldr	r2, [pc, #228]	; (80026ec <HAL_RCC_OscConfig+0x930>)
 8002606:	f043 0301 	orr.w	r3, r3, #1
 800260a:	6213      	str	r3, [r2, #32]
 800260c:	e02f      	b.n	800266e <HAL_RCC_OscConfig+0x8b2>
 800260e:	1d3b      	adds	r3, r7, #4
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	68db      	ldr	r3, [r3, #12]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d10c      	bne.n	8002632 <HAL_RCC_OscConfig+0x876>
 8002618:	4b34      	ldr	r3, [pc, #208]	; (80026ec <HAL_RCC_OscConfig+0x930>)
 800261a:	6a1b      	ldr	r3, [r3, #32]
 800261c:	4a33      	ldr	r2, [pc, #204]	; (80026ec <HAL_RCC_OscConfig+0x930>)
 800261e:	f023 0301 	bic.w	r3, r3, #1
 8002622:	6213      	str	r3, [r2, #32]
 8002624:	4b31      	ldr	r3, [pc, #196]	; (80026ec <HAL_RCC_OscConfig+0x930>)
 8002626:	6a1b      	ldr	r3, [r3, #32]
 8002628:	4a30      	ldr	r2, [pc, #192]	; (80026ec <HAL_RCC_OscConfig+0x930>)
 800262a:	f023 0304 	bic.w	r3, r3, #4
 800262e:	6213      	str	r3, [r2, #32]
 8002630:	e01d      	b.n	800266e <HAL_RCC_OscConfig+0x8b2>
 8002632:	1d3b      	adds	r3, r7, #4
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	68db      	ldr	r3, [r3, #12]
 8002638:	2b05      	cmp	r3, #5
 800263a:	d10c      	bne.n	8002656 <HAL_RCC_OscConfig+0x89a>
 800263c:	4b2b      	ldr	r3, [pc, #172]	; (80026ec <HAL_RCC_OscConfig+0x930>)
 800263e:	6a1b      	ldr	r3, [r3, #32]
 8002640:	4a2a      	ldr	r2, [pc, #168]	; (80026ec <HAL_RCC_OscConfig+0x930>)
 8002642:	f043 0304 	orr.w	r3, r3, #4
 8002646:	6213      	str	r3, [r2, #32]
 8002648:	4b28      	ldr	r3, [pc, #160]	; (80026ec <HAL_RCC_OscConfig+0x930>)
 800264a:	6a1b      	ldr	r3, [r3, #32]
 800264c:	4a27      	ldr	r2, [pc, #156]	; (80026ec <HAL_RCC_OscConfig+0x930>)
 800264e:	f043 0301 	orr.w	r3, r3, #1
 8002652:	6213      	str	r3, [r2, #32]
 8002654:	e00b      	b.n	800266e <HAL_RCC_OscConfig+0x8b2>
 8002656:	4b25      	ldr	r3, [pc, #148]	; (80026ec <HAL_RCC_OscConfig+0x930>)
 8002658:	6a1b      	ldr	r3, [r3, #32]
 800265a:	4a24      	ldr	r2, [pc, #144]	; (80026ec <HAL_RCC_OscConfig+0x930>)
 800265c:	f023 0301 	bic.w	r3, r3, #1
 8002660:	6213      	str	r3, [r2, #32]
 8002662:	4b22      	ldr	r3, [pc, #136]	; (80026ec <HAL_RCC_OscConfig+0x930>)
 8002664:	6a1b      	ldr	r3, [r3, #32]
 8002666:	4a21      	ldr	r2, [pc, #132]	; (80026ec <HAL_RCC_OscConfig+0x930>)
 8002668:	f023 0304 	bic.w	r3, r3, #4
 800266c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800266e:	1d3b      	adds	r3, r7, #4
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	68db      	ldr	r3, [r3, #12]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d06b      	beq.n	8002750 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002678:	f7fe fe98 	bl	80013ac <HAL_GetTick>
 800267c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002680:	e00b      	b.n	800269a <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002682:	f7fe fe93 	bl	80013ac <HAL_GetTick>
 8002686:	4602      	mov	r2, r0
 8002688:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800268c:	1ad3      	subs	r3, r2, r3
 800268e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002692:	4293      	cmp	r3, r2
 8002694:	d901      	bls.n	800269a <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8002696:	2303      	movs	r3, #3
 8002698:	e291      	b.n	8002bbe <HAL_RCC_OscConfig+0xe02>
 800269a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800269e:	2202      	movs	r2, #2
 80026a0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026a2:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	fa93 f2a3 	rbit	r2, r3
 80026ac:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80026b0:	601a      	str	r2, [r3, #0]
 80026b2:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80026b6:	2202      	movs	r2, #2
 80026b8:	601a      	str	r2, [r3, #0]
 80026ba:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	fa93 f2a3 	rbit	r2, r3
 80026c4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80026c8:	601a      	str	r2, [r3, #0]
  return result;
 80026ca:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80026ce:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026d0:	fab3 f383 	clz	r3, r3
 80026d4:	b2db      	uxtb	r3, r3
 80026d6:	095b      	lsrs	r3, r3, #5
 80026d8:	b2db      	uxtb	r3, r3
 80026da:	f043 0302 	orr.w	r3, r3, #2
 80026de:	b2db      	uxtb	r3, r3
 80026e0:	2b02      	cmp	r3, #2
 80026e2:	d109      	bne.n	80026f8 <HAL_RCC_OscConfig+0x93c>
 80026e4:	4b01      	ldr	r3, [pc, #4]	; (80026ec <HAL_RCC_OscConfig+0x930>)
 80026e6:	6a1b      	ldr	r3, [r3, #32]
 80026e8:	e014      	b.n	8002714 <HAL_RCC_OscConfig+0x958>
 80026ea:	bf00      	nop
 80026ec:	40021000 	.word	0x40021000
 80026f0:	10908120 	.word	0x10908120
 80026f4:	40007000 	.word	0x40007000
 80026f8:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80026fc:	2202      	movs	r2, #2
 80026fe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002700:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	fa93 f2a3 	rbit	r2, r3
 800270a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800270e:	601a      	str	r2, [r3, #0]
 8002710:	4bbb      	ldr	r3, [pc, #748]	; (8002a00 <HAL_RCC_OscConfig+0xc44>)
 8002712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002714:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002718:	2102      	movs	r1, #2
 800271a:	6011      	str	r1, [r2, #0]
 800271c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002720:	6812      	ldr	r2, [r2, #0]
 8002722:	fa92 f1a2 	rbit	r1, r2
 8002726:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800272a:	6011      	str	r1, [r2, #0]
  return result;
 800272c:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8002730:	6812      	ldr	r2, [r2, #0]
 8002732:	fab2 f282 	clz	r2, r2
 8002736:	b2d2      	uxtb	r2, r2
 8002738:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800273c:	b2d2      	uxtb	r2, r2
 800273e:	f002 021f 	and.w	r2, r2, #31
 8002742:	2101      	movs	r1, #1
 8002744:	fa01 f202 	lsl.w	r2, r1, r2
 8002748:	4013      	ands	r3, r2
 800274a:	2b00      	cmp	r3, #0
 800274c:	d099      	beq.n	8002682 <HAL_RCC_OscConfig+0x8c6>
 800274e:	e063      	b.n	8002818 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002750:	f7fe fe2c 	bl	80013ac <HAL_GetTick>
 8002754:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002758:	e00b      	b.n	8002772 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800275a:	f7fe fe27 	bl	80013ac <HAL_GetTick>
 800275e:	4602      	mov	r2, r0
 8002760:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002764:	1ad3      	subs	r3, r2, r3
 8002766:	f241 3288 	movw	r2, #5000	; 0x1388
 800276a:	4293      	cmp	r3, r2
 800276c:	d901      	bls.n	8002772 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 800276e:	2303      	movs	r3, #3
 8002770:	e225      	b.n	8002bbe <HAL_RCC_OscConfig+0xe02>
 8002772:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002776:	2202      	movs	r2, #2
 8002778:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800277a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	fa93 f2a3 	rbit	r2, r3
 8002784:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002788:	601a      	str	r2, [r3, #0]
 800278a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800278e:	2202      	movs	r2, #2
 8002790:	601a      	str	r2, [r3, #0]
 8002792:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	fa93 f2a3 	rbit	r2, r3
 800279c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80027a0:	601a      	str	r2, [r3, #0]
  return result;
 80027a2:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80027a6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027a8:	fab3 f383 	clz	r3, r3
 80027ac:	b2db      	uxtb	r3, r3
 80027ae:	095b      	lsrs	r3, r3, #5
 80027b0:	b2db      	uxtb	r3, r3
 80027b2:	f043 0302 	orr.w	r3, r3, #2
 80027b6:	b2db      	uxtb	r3, r3
 80027b8:	2b02      	cmp	r3, #2
 80027ba:	d102      	bne.n	80027c2 <HAL_RCC_OscConfig+0xa06>
 80027bc:	4b90      	ldr	r3, [pc, #576]	; (8002a00 <HAL_RCC_OscConfig+0xc44>)
 80027be:	6a1b      	ldr	r3, [r3, #32]
 80027c0:	e00d      	b.n	80027de <HAL_RCC_OscConfig+0xa22>
 80027c2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80027c6:	2202      	movs	r2, #2
 80027c8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ca:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	fa93 f2a3 	rbit	r2, r3
 80027d4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80027d8:	601a      	str	r2, [r3, #0]
 80027da:	4b89      	ldr	r3, [pc, #548]	; (8002a00 <HAL_RCC_OscConfig+0xc44>)
 80027dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027de:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80027e2:	2102      	movs	r1, #2
 80027e4:	6011      	str	r1, [r2, #0]
 80027e6:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80027ea:	6812      	ldr	r2, [r2, #0]
 80027ec:	fa92 f1a2 	rbit	r1, r2
 80027f0:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80027f4:	6011      	str	r1, [r2, #0]
  return result;
 80027f6:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80027fa:	6812      	ldr	r2, [r2, #0]
 80027fc:	fab2 f282 	clz	r2, r2
 8002800:	b2d2      	uxtb	r2, r2
 8002802:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002806:	b2d2      	uxtb	r2, r2
 8002808:	f002 021f 	and.w	r2, r2, #31
 800280c:	2101      	movs	r1, #1
 800280e:	fa01 f202 	lsl.w	r2, r1, r2
 8002812:	4013      	ands	r3, r2
 8002814:	2b00      	cmp	r3, #0
 8002816:	d1a0      	bne.n	800275a <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002818:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 800281c:	2b01      	cmp	r3, #1
 800281e:	d105      	bne.n	800282c <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002820:	4b77      	ldr	r3, [pc, #476]	; (8002a00 <HAL_RCC_OscConfig+0xc44>)
 8002822:	69db      	ldr	r3, [r3, #28]
 8002824:	4a76      	ldr	r2, [pc, #472]	; (8002a00 <HAL_RCC_OscConfig+0xc44>)
 8002826:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800282a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800282c:	1d3b      	adds	r3, r7, #4
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	69db      	ldr	r3, [r3, #28]
 8002832:	2b00      	cmp	r3, #0
 8002834:	f000 81c2 	beq.w	8002bbc <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002838:	4b71      	ldr	r3, [pc, #452]	; (8002a00 <HAL_RCC_OscConfig+0xc44>)
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	f003 030c 	and.w	r3, r3, #12
 8002840:	2b08      	cmp	r3, #8
 8002842:	f000 819c 	beq.w	8002b7e <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002846:	1d3b      	adds	r3, r7, #4
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	69db      	ldr	r3, [r3, #28]
 800284c:	2b02      	cmp	r3, #2
 800284e:	f040 8114 	bne.w	8002a7a <HAL_RCC_OscConfig+0xcbe>
 8002852:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002856:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800285a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800285c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	fa93 f2a3 	rbit	r2, r3
 8002866:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800286a:	601a      	str	r2, [r3, #0]
  return result;
 800286c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002870:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002872:	fab3 f383 	clz	r3, r3
 8002876:	b2db      	uxtb	r3, r3
 8002878:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800287c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002880:	009b      	lsls	r3, r3, #2
 8002882:	461a      	mov	r2, r3
 8002884:	2300      	movs	r3, #0
 8002886:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002888:	f7fe fd90 	bl	80013ac <HAL_GetTick>
 800288c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002890:	e009      	b.n	80028a6 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002892:	f7fe fd8b 	bl	80013ac <HAL_GetTick>
 8002896:	4602      	mov	r2, r0
 8002898:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800289c:	1ad3      	subs	r3, r2, r3
 800289e:	2b02      	cmp	r3, #2
 80028a0:	d901      	bls.n	80028a6 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 80028a2:	2303      	movs	r3, #3
 80028a4:	e18b      	b.n	8002bbe <HAL_RCC_OscConfig+0xe02>
 80028a6:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80028aa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80028ae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028b0:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	fa93 f2a3 	rbit	r2, r3
 80028ba:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80028be:	601a      	str	r2, [r3, #0]
  return result;
 80028c0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80028c4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028c6:	fab3 f383 	clz	r3, r3
 80028ca:	b2db      	uxtb	r3, r3
 80028cc:	095b      	lsrs	r3, r3, #5
 80028ce:	b2db      	uxtb	r3, r3
 80028d0:	f043 0301 	orr.w	r3, r3, #1
 80028d4:	b2db      	uxtb	r3, r3
 80028d6:	2b01      	cmp	r3, #1
 80028d8:	d102      	bne.n	80028e0 <HAL_RCC_OscConfig+0xb24>
 80028da:	4b49      	ldr	r3, [pc, #292]	; (8002a00 <HAL_RCC_OscConfig+0xc44>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	e01b      	b.n	8002918 <HAL_RCC_OscConfig+0xb5c>
 80028e0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80028e4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80028e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ea:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	fa93 f2a3 	rbit	r2, r3
 80028f4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80028f8:	601a      	str	r2, [r3, #0]
 80028fa:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80028fe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002902:	601a      	str	r2, [r3, #0]
 8002904:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	fa93 f2a3 	rbit	r2, r3
 800290e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002912:	601a      	str	r2, [r3, #0]
 8002914:	4b3a      	ldr	r3, [pc, #232]	; (8002a00 <HAL_RCC_OscConfig+0xc44>)
 8002916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002918:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800291c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002920:	6011      	str	r1, [r2, #0]
 8002922:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002926:	6812      	ldr	r2, [r2, #0]
 8002928:	fa92 f1a2 	rbit	r1, r2
 800292c:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8002930:	6011      	str	r1, [r2, #0]
  return result;
 8002932:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8002936:	6812      	ldr	r2, [r2, #0]
 8002938:	fab2 f282 	clz	r2, r2
 800293c:	b2d2      	uxtb	r2, r2
 800293e:	f042 0220 	orr.w	r2, r2, #32
 8002942:	b2d2      	uxtb	r2, r2
 8002944:	f002 021f 	and.w	r2, r2, #31
 8002948:	2101      	movs	r1, #1
 800294a:	fa01 f202 	lsl.w	r2, r1, r2
 800294e:	4013      	ands	r3, r2
 8002950:	2b00      	cmp	r3, #0
 8002952:	d19e      	bne.n	8002892 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002954:	4b2a      	ldr	r3, [pc, #168]	; (8002a00 <HAL_RCC_OscConfig+0xc44>)
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800295c:	1d3b      	adds	r3, r7, #4
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002962:	1d3b      	adds	r3, r7, #4
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	6a1b      	ldr	r3, [r3, #32]
 8002968:	430b      	orrs	r3, r1
 800296a:	4925      	ldr	r1, [pc, #148]	; (8002a00 <HAL_RCC_OscConfig+0xc44>)
 800296c:	4313      	orrs	r3, r2
 800296e:	604b      	str	r3, [r1, #4]
 8002970:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002974:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002978:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800297a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	fa93 f2a3 	rbit	r2, r3
 8002984:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002988:	601a      	str	r2, [r3, #0]
  return result;
 800298a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800298e:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002990:	fab3 f383 	clz	r3, r3
 8002994:	b2db      	uxtb	r3, r3
 8002996:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800299a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800299e:	009b      	lsls	r3, r3, #2
 80029a0:	461a      	mov	r2, r3
 80029a2:	2301      	movs	r3, #1
 80029a4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029a6:	f7fe fd01 	bl	80013ac <HAL_GetTick>
 80029aa:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80029ae:	e009      	b.n	80029c4 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029b0:	f7fe fcfc 	bl	80013ac <HAL_GetTick>
 80029b4:	4602      	mov	r2, r0
 80029b6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80029ba:	1ad3      	subs	r3, r2, r3
 80029bc:	2b02      	cmp	r3, #2
 80029be:	d901      	bls.n	80029c4 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 80029c0:	2303      	movs	r3, #3
 80029c2:	e0fc      	b.n	8002bbe <HAL_RCC_OscConfig+0xe02>
 80029c4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80029c8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80029cc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ce:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	fa93 f2a3 	rbit	r2, r3
 80029d8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80029dc:	601a      	str	r2, [r3, #0]
  return result;
 80029de:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80029e2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80029e4:	fab3 f383 	clz	r3, r3
 80029e8:	b2db      	uxtb	r3, r3
 80029ea:	095b      	lsrs	r3, r3, #5
 80029ec:	b2db      	uxtb	r3, r3
 80029ee:	f043 0301 	orr.w	r3, r3, #1
 80029f2:	b2db      	uxtb	r3, r3
 80029f4:	2b01      	cmp	r3, #1
 80029f6:	d105      	bne.n	8002a04 <HAL_RCC_OscConfig+0xc48>
 80029f8:	4b01      	ldr	r3, [pc, #4]	; (8002a00 <HAL_RCC_OscConfig+0xc44>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	e01e      	b.n	8002a3c <HAL_RCC_OscConfig+0xc80>
 80029fe:	bf00      	nop
 8002a00:	40021000 	.word	0x40021000
 8002a04:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002a08:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a0c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a0e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	fa93 f2a3 	rbit	r2, r3
 8002a18:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002a1c:	601a      	str	r2, [r3, #0]
 8002a1e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002a22:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a26:	601a      	str	r2, [r3, #0]
 8002a28:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	fa93 f2a3 	rbit	r2, r3
 8002a32:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002a36:	601a      	str	r2, [r3, #0]
 8002a38:	4b63      	ldr	r3, [pc, #396]	; (8002bc8 <HAL_RCC_OscConfig+0xe0c>)
 8002a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a3c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002a40:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002a44:	6011      	str	r1, [r2, #0]
 8002a46:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002a4a:	6812      	ldr	r2, [r2, #0]
 8002a4c:	fa92 f1a2 	rbit	r1, r2
 8002a50:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002a54:	6011      	str	r1, [r2, #0]
  return result;
 8002a56:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002a5a:	6812      	ldr	r2, [r2, #0]
 8002a5c:	fab2 f282 	clz	r2, r2
 8002a60:	b2d2      	uxtb	r2, r2
 8002a62:	f042 0220 	orr.w	r2, r2, #32
 8002a66:	b2d2      	uxtb	r2, r2
 8002a68:	f002 021f 	and.w	r2, r2, #31
 8002a6c:	2101      	movs	r1, #1
 8002a6e:	fa01 f202 	lsl.w	r2, r1, r2
 8002a72:	4013      	ands	r3, r2
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d09b      	beq.n	80029b0 <HAL_RCC_OscConfig+0xbf4>
 8002a78:	e0a0      	b.n	8002bbc <HAL_RCC_OscConfig+0xe00>
 8002a7a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002a7e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002a82:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a84:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	fa93 f2a3 	rbit	r2, r3
 8002a8e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a92:	601a      	str	r2, [r3, #0]
  return result;
 8002a94:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a98:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a9a:	fab3 f383 	clz	r3, r3
 8002a9e:	b2db      	uxtb	r3, r3
 8002aa0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002aa4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002aa8:	009b      	lsls	r3, r3, #2
 8002aaa:	461a      	mov	r2, r3
 8002aac:	2300      	movs	r3, #0
 8002aae:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ab0:	f7fe fc7c 	bl	80013ac <HAL_GetTick>
 8002ab4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ab8:	e009      	b.n	8002ace <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002aba:	f7fe fc77 	bl	80013ac <HAL_GetTick>
 8002abe:	4602      	mov	r2, r0
 8002ac0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002ac4:	1ad3      	subs	r3, r2, r3
 8002ac6:	2b02      	cmp	r3, #2
 8002ac8:	d901      	bls.n	8002ace <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8002aca:	2303      	movs	r3, #3
 8002acc:	e077      	b.n	8002bbe <HAL_RCC_OscConfig+0xe02>
 8002ace:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002ad2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ad6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ad8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	fa93 f2a3 	rbit	r2, r3
 8002ae2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ae6:	601a      	str	r2, [r3, #0]
  return result;
 8002ae8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002aec:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002aee:	fab3 f383 	clz	r3, r3
 8002af2:	b2db      	uxtb	r3, r3
 8002af4:	095b      	lsrs	r3, r3, #5
 8002af6:	b2db      	uxtb	r3, r3
 8002af8:	f043 0301 	orr.w	r3, r3, #1
 8002afc:	b2db      	uxtb	r3, r3
 8002afe:	2b01      	cmp	r3, #1
 8002b00:	d102      	bne.n	8002b08 <HAL_RCC_OscConfig+0xd4c>
 8002b02:	4b31      	ldr	r3, [pc, #196]	; (8002bc8 <HAL_RCC_OscConfig+0xe0c>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	e01b      	b.n	8002b40 <HAL_RCC_OscConfig+0xd84>
 8002b08:	f107 0320 	add.w	r3, r7, #32
 8002b0c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b10:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b12:	f107 0320 	add.w	r3, r7, #32
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	fa93 f2a3 	rbit	r2, r3
 8002b1c:	f107 031c 	add.w	r3, r7, #28
 8002b20:	601a      	str	r2, [r3, #0]
 8002b22:	f107 0318 	add.w	r3, r7, #24
 8002b26:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b2a:	601a      	str	r2, [r3, #0]
 8002b2c:	f107 0318 	add.w	r3, r7, #24
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	fa93 f2a3 	rbit	r2, r3
 8002b36:	f107 0314 	add.w	r3, r7, #20
 8002b3a:	601a      	str	r2, [r3, #0]
 8002b3c:	4b22      	ldr	r3, [pc, #136]	; (8002bc8 <HAL_RCC_OscConfig+0xe0c>)
 8002b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b40:	f107 0210 	add.w	r2, r7, #16
 8002b44:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002b48:	6011      	str	r1, [r2, #0]
 8002b4a:	f107 0210 	add.w	r2, r7, #16
 8002b4e:	6812      	ldr	r2, [r2, #0]
 8002b50:	fa92 f1a2 	rbit	r1, r2
 8002b54:	f107 020c 	add.w	r2, r7, #12
 8002b58:	6011      	str	r1, [r2, #0]
  return result;
 8002b5a:	f107 020c 	add.w	r2, r7, #12
 8002b5e:	6812      	ldr	r2, [r2, #0]
 8002b60:	fab2 f282 	clz	r2, r2
 8002b64:	b2d2      	uxtb	r2, r2
 8002b66:	f042 0220 	orr.w	r2, r2, #32
 8002b6a:	b2d2      	uxtb	r2, r2
 8002b6c:	f002 021f 	and.w	r2, r2, #31
 8002b70:	2101      	movs	r1, #1
 8002b72:	fa01 f202 	lsl.w	r2, r1, r2
 8002b76:	4013      	ands	r3, r2
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d19e      	bne.n	8002aba <HAL_RCC_OscConfig+0xcfe>
 8002b7c:	e01e      	b.n	8002bbc <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b7e:	1d3b      	adds	r3, r7, #4
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	69db      	ldr	r3, [r3, #28]
 8002b84:	2b01      	cmp	r3, #1
 8002b86:	d101      	bne.n	8002b8c <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	e018      	b.n	8002bbe <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002b8c:	4b0e      	ldr	r3, [pc, #56]	; (8002bc8 <HAL_RCC_OscConfig+0xe0c>)
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002b94:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002b98:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002b9c:	1d3b      	adds	r3, r7, #4
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	6a1b      	ldr	r3, [r3, #32]
 8002ba2:	429a      	cmp	r2, r3
 8002ba4:	d108      	bne.n	8002bb8 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002ba6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002baa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002bae:	1d3b      	adds	r3, r7, #4
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002bb4:	429a      	cmp	r2, r3
 8002bb6:	d001      	beq.n	8002bbc <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	e000      	b.n	8002bbe <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8002bbc:	2300      	movs	r3, #0
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bd80      	pop	{r7, pc}
 8002bc8:	40021000 	.word	0x40021000

08002bcc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b09e      	sub	sp, #120	; 0x78
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
 8002bd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d101      	bne.n	8002be4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002be0:	2301      	movs	r3, #1
 8002be2:	e162      	b.n	8002eaa <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002be4:	4b90      	ldr	r3, [pc, #576]	; (8002e28 <HAL_RCC_ClockConfig+0x25c>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f003 0307 	and.w	r3, r3, #7
 8002bec:	683a      	ldr	r2, [r7, #0]
 8002bee:	429a      	cmp	r2, r3
 8002bf0:	d910      	bls.n	8002c14 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bf2:	4b8d      	ldr	r3, [pc, #564]	; (8002e28 <HAL_RCC_ClockConfig+0x25c>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f023 0207 	bic.w	r2, r3, #7
 8002bfa:	498b      	ldr	r1, [pc, #556]	; (8002e28 <HAL_RCC_ClockConfig+0x25c>)
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c02:	4b89      	ldr	r3, [pc, #548]	; (8002e28 <HAL_RCC_ClockConfig+0x25c>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f003 0307 	and.w	r3, r3, #7
 8002c0a:	683a      	ldr	r2, [r7, #0]
 8002c0c:	429a      	cmp	r2, r3
 8002c0e:	d001      	beq.n	8002c14 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002c10:	2301      	movs	r3, #1
 8002c12:	e14a      	b.n	8002eaa <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f003 0302 	and.w	r3, r3, #2
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d008      	beq.n	8002c32 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c20:	4b82      	ldr	r3, [pc, #520]	; (8002e2c <HAL_RCC_ClockConfig+0x260>)
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	497f      	ldr	r1, [pc, #508]	; (8002e2c <HAL_RCC_ClockConfig+0x260>)
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f003 0301 	and.w	r3, r3, #1
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	f000 80dc 	beq.w	8002df8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	2b01      	cmp	r3, #1
 8002c46:	d13c      	bne.n	8002cc2 <HAL_RCC_ClockConfig+0xf6>
 8002c48:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c4c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c4e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002c50:	fa93 f3a3 	rbit	r3, r3
 8002c54:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002c56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c58:	fab3 f383 	clz	r3, r3
 8002c5c:	b2db      	uxtb	r3, r3
 8002c5e:	095b      	lsrs	r3, r3, #5
 8002c60:	b2db      	uxtb	r3, r3
 8002c62:	f043 0301 	orr.w	r3, r3, #1
 8002c66:	b2db      	uxtb	r3, r3
 8002c68:	2b01      	cmp	r3, #1
 8002c6a:	d102      	bne.n	8002c72 <HAL_RCC_ClockConfig+0xa6>
 8002c6c:	4b6f      	ldr	r3, [pc, #444]	; (8002e2c <HAL_RCC_ClockConfig+0x260>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	e00f      	b.n	8002c92 <HAL_RCC_ClockConfig+0xc6>
 8002c72:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c76:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c78:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002c7a:	fa93 f3a3 	rbit	r3, r3
 8002c7e:	667b      	str	r3, [r7, #100]	; 0x64
 8002c80:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c84:	663b      	str	r3, [r7, #96]	; 0x60
 8002c86:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002c88:	fa93 f3a3 	rbit	r3, r3
 8002c8c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002c8e:	4b67      	ldr	r3, [pc, #412]	; (8002e2c <HAL_RCC_ClockConfig+0x260>)
 8002c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c92:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002c96:	65ba      	str	r2, [r7, #88]	; 0x58
 8002c98:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002c9a:	fa92 f2a2 	rbit	r2, r2
 8002c9e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002ca0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002ca2:	fab2 f282 	clz	r2, r2
 8002ca6:	b2d2      	uxtb	r2, r2
 8002ca8:	f042 0220 	orr.w	r2, r2, #32
 8002cac:	b2d2      	uxtb	r2, r2
 8002cae:	f002 021f 	and.w	r2, r2, #31
 8002cb2:	2101      	movs	r1, #1
 8002cb4:	fa01 f202 	lsl.w	r2, r1, r2
 8002cb8:	4013      	ands	r3, r2
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d17b      	bne.n	8002db6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e0f3      	b.n	8002eaa <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	2b02      	cmp	r3, #2
 8002cc8:	d13c      	bne.n	8002d44 <HAL_RCC_ClockConfig+0x178>
 8002cca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002cce:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cd0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002cd2:	fa93 f3a3 	rbit	r3, r3
 8002cd6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002cd8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cda:	fab3 f383 	clz	r3, r3
 8002cde:	b2db      	uxtb	r3, r3
 8002ce0:	095b      	lsrs	r3, r3, #5
 8002ce2:	b2db      	uxtb	r3, r3
 8002ce4:	f043 0301 	orr.w	r3, r3, #1
 8002ce8:	b2db      	uxtb	r3, r3
 8002cea:	2b01      	cmp	r3, #1
 8002cec:	d102      	bne.n	8002cf4 <HAL_RCC_ClockConfig+0x128>
 8002cee:	4b4f      	ldr	r3, [pc, #316]	; (8002e2c <HAL_RCC_ClockConfig+0x260>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	e00f      	b.n	8002d14 <HAL_RCC_ClockConfig+0x148>
 8002cf4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002cf8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cfa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002cfc:	fa93 f3a3 	rbit	r3, r3
 8002d00:	647b      	str	r3, [r7, #68]	; 0x44
 8002d02:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d06:	643b      	str	r3, [r7, #64]	; 0x40
 8002d08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d0a:	fa93 f3a3 	rbit	r3, r3
 8002d0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d10:	4b46      	ldr	r3, [pc, #280]	; (8002e2c <HAL_RCC_ClockConfig+0x260>)
 8002d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d14:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d18:	63ba      	str	r2, [r7, #56]	; 0x38
 8002d1a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002d1c:	fa92 f2a2 	rbit	r2, r2
 8002d20:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002d22:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002d24:	fab2 f282 	clz	r2, r2
 8002d28:	b2d2      	uxtb	r2, r2
 8002d2a:	f042 0220 	orr.w	r2, r2, #32
 8002d2e:	b2d2      	uxtb	r2, r2
 8002d30:	f002 021f 	and.w	r2, r2, #31
 8002d34:	2101      	movs	r1, #1
 8002d36:	fa01 f202 	lsl.w	r2, r1, r2
 8002d3a:	4013      	ands	r3, r2
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d13a      	bne.n	8002db6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002d40:	2301      	movs	r3, #1
 8002d42:	e0b2      	b.n	8002eaa <HAL_RCC_ClockConfig+0x2de>
 8002d44:	2302      	movs	r3, #2
 8002d46:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d4a:	fa93 f3a3 	rbit	r3, r3
 8002d4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002d50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d52:	fab3 f383 	clz	r3, r3
 8002d56:	b2db      	uxtb	r3, r3
 8002d58:	095b      	lsrs	r3, r3, #5
 8002d5a:	b2db      	uxtb	r3, r3
 8002d5c:	f043 0301 	orr.w	r3, r3, #1
 8002d60:	b2db      	uxtb	r3, r3
 8002d62:	2b01      	cmp	r3, #1
 8002d64:	d102      	bne.n	8002d6c <HAL_RCC_ClockConfig+0x1a0>
 8002d66:	4b31      	ldr	r3, [pc, #196]	; (8002e2c <HAL_RCC_ClockConfig+0x260>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	e00d      	b.n	8002d88 <HAL_RCC_ClockConfig+0x1bc>
 8002d6c:	2302      	movs	r3, #2
 8002d6e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d72:	fa93 f3a3 	rbit	r3, r3
 8002d76:	627b      	str	r3, [r7, #36]	; 0x24
 8002d78:	2302      	movs	r3, #2
 8002d7a:	623b      	str	r3, [r7, #32]
 8002d7c:	6a3b      	ldr	r3, [r7, #32]
 8002d7e:	fa93 f3a3 	rbit	r3, r3
 8002d82:	61fb      	str	r3, [r7, #28]
 8002d84:	4b29      	ldr	r3, [pc, #164]	; (8002e2c <HAL_RCC_ClockConfig+0x260>)
 8002d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d88:	2202      	movs	r2, #2
 8002d8a:	61ba      	str	r2, [r7, #24]
 8002d8c:	69ba      	ldr	r2, [r7, #24]
 8002d8e:	fa92 f2a2 	rbit	r2, r2
 8002d92:	617a      	str	r2, [r7, #20]
  return result;
 8002d94:	697a      	ldr	r2, [r7, #20]
 8002d96:	fab2 f282 	clz	r2, r2
 8002d9a:	b2d2      	uxtb	r2, r2
 8002d9c:	f042 0220 	orr.w	r2, r2, #32
 8002da0:	b2d2      	uxtb	r2, r2
 8002da2:	f002 021f 	and.w	r2, r2, #31
 8002da6:	2101      	movs	r1, #1
 8002da8:	fa01 f202 	lsl.w	r2, r1, r2
 8002dac:	4013      	ands	r3, r2
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d101      	bne.n	8002db6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	e079      	b.n	8002eaa <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002db6:	4b1d      	ldr	r3, [pc, #116]	; (8002e2c <HAL_RCC_ClockConfig+0x260>)
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	f023 0203 	bic.w	r2, r3, #3
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	491a      	ldr	r1, [pc, #104]	; (8002e2c <HAL_RCC_ClockConfig+0x260>)
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002dc8:	f7fe faf0 	bl	80013ac <HAL_GetTick>
 8002dcc:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dce:	e00a      	b.n	8002de6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002dd0:	f7fe faec 	bl	80013ac <HAL_GetTick>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002dd8:	1ad3      	subs	r3, r2, r3
 8002dda:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d901      	bls.n	8002de6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002de2:	2303      	movs	r3, #3
 8002de4:	e061      	b.n	8002eaa <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002de6:	4b11      	ldr	r3, [pc, #68]	; (8002e2c <HAL_RCC_ClockConfig+0x260>)
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	f003 020c 	and.w	r2, r3, #12
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	009b      	lsls	r3, r3, #2
 8002df4:	429a      	cmp	r2, r3
 8002df6:	d1eb      	bne.n	8002dd0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002df8:	4b0b      	ldr	r3, [pc, #44]	; (8002e28 <HAL_RCC_ClockConfig+0x25c>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f003 0307 	and.w	r3, r3, #7
 8002e00:	683a      	ldr	r2, [r7, #0]
 8002e02:	429a      	cmp	r2, r3
 8002e04:	d214      	bcs.n	8002e30 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e06:	4b08      	ldr	r3, [pc, #32]	; (8002e28 <HAL_RCC_ClockConfig+0x25c>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f023 0207 	bic.w	r2, r3, #7
 8002e0e:	4906      	ldr	r1, [pc, #24]	; (8002e28 <HAL_RCC_ClockConfig+0x25c>)
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	4313      	orrs	r3, r2
 8002e14:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e16:	4b04      	ldr	r3, [pc, #16]	; (8002e28 <HAL_RCC_ClockConfig+0x25c>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f003 0307 	and.w	r3, r3, #7
 8002e1e:	683a      	ldr	r2, [r7, #0]
 8002e20:	429a      	cmp	r2, r3
 8002e22:	d005      	beq.n	8002e30 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002e24:	2301      	movs	r3, #1
 8002e26:	e040      	b.n	8002eaa <HAL_RCC_ClockConfig+0x2de>
 8002e28:	40022000 	.word	0x40022000
 8002e2c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f003 0304 	and.w	r3, r3, #4
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d008      	beq.n	8002e4e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e3c:	4b1d      	ldr	r3, [pc, #116]	; (8002eb4 <HAL_RCC_ClockConfig+0x2e8>)
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	68db      	ldr	r3, [r3, #12]
 8002e48:	491a      	ldr	r1, [pc, #104]	; (8002eb4 <HAL_RCC_ClockConfig+0x2e8>)
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f003 0308 	and.w	r3, r3, #8
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d009      	beq.n	8002e6e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e5a:	4b16      	ldr	r3, [pc, #88]	; (8002eb4 <HAL_RCC_ClockConfig+0x2e8>)
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	691b      	ldr	r3, [r3, #16]
 8002e66:	00db      	lsls	r3, r3, #3
 8002e68:	4912      	ldr	r1, [pc, #72]	; (8002eb4 <HAL_RCC_ClockConfig+0x2e8>)
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002e6e:	f000 f829 	bl	8002ec4 <HAL_RCC_GetSysClockFreq>
 8002e72:	4601      	mov	r1, r0
 8002e74:	4b0f      	ldr	r3, [pc, #60]	; (8002eb4 <HAL_RCC_ClockConfig+0x2e8>)
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e7c:	22f0      	movs	r2, #240	; 0xf0
 8002e7e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e80:	693a      	ldr	r2, [r7, #16]
 8002e82:	fa92 f2a2 	rbit	r2, r2
 8002e86:	60fa      	str	r2, [r7, #12]
  return result;
 8002e88:	68fa      	ldr	r2, [r7, #12]
 8002e8a:	fab2 f282 	clz	r2, r2
 8002e8e:	b2d2      	uxtb	r2, r2
 8002e90:	40d3      	lsrs	r3, r2
 8002e92:	4a09      	ldr	r2, [pc, #36]	; (8002eb8 <HAL_RCC_ClockConfig+0x2ec>)
 8002e94:	5cd3      	ldrb	r3, [r2, r3]
 8002e96:	fa21 f303 	lsr.w	r3, r1, r3
 8002e9a:	4a08      	ldr	r2, [pc, #32]	; (8002ebc <HAL_RCC_ClockConfig+0x2f0>)
 8002e9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002e9e:	4b08      	ldr	r3, [pc, #32]	; (8002ec0 <HAL_RCC_ClockConfig+0x2f4>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f7fe fa3e 	bl	8001324 <HAL_InitTick>
  
  return HAL_OK;
 8002ea8:	2300      	movs	r3, #0
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	3778      	adds	r7, #120	; 0x78
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}
 8002eb2:	bf00      	nop
 8002eb4:	40021000 	.word	0x40021000
 8002eb8:	08006878 	.word	0x08006878
 8002ebc:	20000004 	.word	0x20000004
 8002ec0:	20000008 	.word	0x20000008

08002ec4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b08b      	sub	sp, #44	; 0x2c
 8002ec8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	61fb      	str	r3, [r7, #28]
 8002ece:	2300      	movs	r3, #0
 8002ed0:	61bb      	str	r3, [r7, #24]
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	627b      	str	r3, [r7, #36]	; 0x24
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002eda:	2300      	movs	r3, #0
 8002edc:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002ede:	4b29      	ldr	r3, [pc, #164]	; (8002f84 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002ee4:	69fb      	ldr	r3, [r7, #28]
 8002ee6:	f003 030c 	and.w	r3, r3, #12
 8002eea:	2b04      	cmp	r3, #4
 8002eec:	d002      	beq.n	8002ef4 <HAL_RCC_GetSysClockFreq+0x30>
 8002eee:	2b08      	cmp	r3, #8
 8002ef0:	d003      	beq.n	8002efa <HAL_RCC_GetSysClockFreq+0x36>
 8002ef2:	e03c      	b.n	8002f6e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002ef4:	4b24      	ldr	r3, [pc, #144]	; (8002f88 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002ef6:	623b      	str	r3, [r7, #32]
      break;
 8002ef8:	e03c      	b.n	8002f74 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002efa:	69fb      	ldr	r3, [r7, #28]
 8002efc:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002f00:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002f04:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f06:	68ba      	ldr	r2, [r7, #8]
 8002f08:	fa92 f2a2 	rbit	r2, r2
 8002f0c:	607a      	str	r2, [r7, #4]
  return result;
 8002f0e:	687a      	ldr	r2, [r7, #4]
 8002f10:	fab2 f282 	clz	r2, r2
 8002f14:	b2d2      	uxtb	r2, r2
 8002f16:	40d3      	lsrs	r3, r2
 8002f18:	4a1c      	ldr	r2, [pc, #112]	; (8002f8c <HAL_RCC_GetSysClockFreq+0xc8>)
 8002f1a:	5cd3      	ldrb	r3, [r2, r3]
 8002f1c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002f1e:	4b19      	ldr	r3, [pc, #100]	; (8002f84 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002f20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f22:	f003 030f 	and.w	r3, r3, #15
 8002f26:	220f      	movs	r2, #15
 8002f28:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f2a:	693a      	ldr	r2, [r7, #16]
 8002f2c:	fa92 f2a2 	rbit	r2, r2
 8002f30:	60fa      	str	r2, [r7, #12]
  return result;
 8002f32:	68fa      	ldr	r2, [r7, #12]
 8002f34:	fab2 f282 	clz	r2, r2
 8002f38:	b2d2      	uxtb	r2, r2
 8002f3a:	40d3      	lsrs	r3, r2
 8002f3c:	4a14      	ldr	r2, [pc, #80]	; (8002f90 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002f3e:	5cd3      	ldrb	r3, [r2, r3]
 8002f40:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002f42:	69fb      	ldr	r3, [r7, #28]
 8002f44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d008      	beq.n	8002f5e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002f4c:	4a0e      	ldr	r2, [pc, #56]	; (8002f88 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002f4e:	69bb      	ldr	r3, [r7, #24]
 8002f50:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	fb02 f303 	mul.w	r3, r2, r3
 8002f5a:	627b      	str	r3, [r7, #36]	; 0x24
 8002f5c:	e004      	b.n	8002f68 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	4a0c      	ldr	r2, [pc, #48]	; (8002f94 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002f62:	fb02 f303 	mul.w	r3, r2, r3
 8002f66:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f6a:	623b      	str	r3, [r7, #32]
      break;
 8002f6c:	e002      	b.n	8002f74 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002f6e:	4b06      	ldr	r3, [pc, #24]	; (8002f88 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002f70:	623b      	str	r3, [r7, #32]
      break;
 8002f72:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f74:	6a3b      	ldr	r3, [r7, #32]
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	372c      	adds	r7, #44	; 0x2c
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f80:	4770      	bx	lr
 8002f82:	bf00      	nop
 8002f84:	40021000 	.word	0x40021000
 8002f88:	007a1200 	.word	0x007a1200
 8002f8c:	08006890 	.word	0x08006890
 8002f90:	080068a0 	.word	0x080068a0
 8002f94:	003d0900 	.word	0x003d0900

08002f98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f9c:	4b03      	ldr	r3, [pc, #12]	; (8002fac <HAL_RCC_GetHCLKFreq+0x14>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa8:	4770      	bx	lr
 8002faa:	bf00      	nop
 8002fac:	20000004 	.word	0x20000004

08002fb0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b082      	sub	sp, #8
 8002fb4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002fb6:	f7ff ffef 	bl	8002f98 <HAL_RCC_GetHCLKFreq>
 8002fba:	4601      	mov	r1, r0
 8002fbc:	4b0b      	ldr	r3, [pc, #44]	; (8002fec <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002fc4:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002fc8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fca:	687a      	ldr	r2, [r7, #4]
 8002fcc:	fa92 f2a2 	rbit	r2, r2
 8002fd0:	603a      	str	r2, [r7, #0]
  return result;
 8002fd2:	683a      	ldr	r2, [r7, #0]
 8002fd4:	fab2 f282 	clz	r2, r2
 8002fd8:	b2d2      	uxtb	r2, r2
 8002fda:	40d3      	lsrs	r3, r2
 8002fdc:	4a04      	ldr	r2, [pc, #16]	; (8002ff0 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002fde:	5cd3      	ldrb	r3, [r2, r3]
 8002fe0:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	3708      	adds	r7, #8
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd80      	pop	{r7, pc}
 8002fec:	40021000 	.word	0x40021000
 8002ff0:	08006888 	.word	0x08006888

08002ff4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b082      	sub	sp, #8
 8002ff8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002ffa:	f7ff ffcd 	bl	8002f98 <HAL_RCC_GetHCLKFreq>
 8002ffe:	4601      	mov	r1, r0
 8003000:	4b0b      	ldr	r3, [pc, #44]	; (8003030 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003008:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800300c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800300e:	687a      	ldr	r2, [r7, #4]
 8003010:	fa92 f2a2 	rbit	r2, r2
 8003014:	603a      	str	r2, [r7, #0]
  return result;
 8003016:	683a      	ldr	r2, [r7, #0]
 8003018:	fab2 f282 	clz	r2, r2
 800301c:	b2d2      	uxtb	r2, r2
 800301e:	40d3      	lsrs	r3, r2
 8003020:	4a04      	ldr	r2, [pc, #16]	; (8003034 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003022:	5cd3      	ldrb	r3, [r2, r3]
 8003024:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003028:	4618      	mov	r0, r3
 800302a:	3708      	adds	r7, #8
 800302c:	46bd      	mov	sp, r7
 800302e:	bd80      	pop	{r7, pc}
 8003030:	40021000 	.word	0x40021000
 8003034:	08006888 	.word	0x08006888

08003038 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b092      	sub	sp, #72	; 0x48
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003040:	2300      	movs	r3, #0
 8003042:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003044:	2300      	movs	r3, #0
 8003046:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003048:	2300      	movs	r3, #0
 800304a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003056:	2b00      	cmp	r3, #0
 8003058:	f000 80cd 	beq.w	80031f6 <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800305c:	4b86      	ldr	r3, [pc, #536]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800305e:	69db      	ldr	r3, [r3, #28]
 8003060:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003064:	2b00      	cmp	r3, #0
 8003066:	d10e      	bne.n	8003086 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003068:	4b83      	ldr	r3, [pc, #524]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800306a:	69db      	ldr	r3, [r3, #28]
 800306c:	4a82      	ldr	r2, [pc, #520]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800306e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003072:	61d3      	str	r3, [r2, #28]
 8003074:	4b80      	ldr	r3, [pc, #512]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003076:	69db      	ldr	r3, [r3, #28]
 8003078:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800307c:	60bb      	str	r3, [r7, #8]
 800307e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003080:	2301      	movs	r3, #1
 8003082:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003086:	4b7d      	ldr	r3, [pc, #500]	; (800327c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800308e:	2b00      	cmp	r3, #0
 8003090:	d118      	bne.n	80030c4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003092:	4b7a      	ldr	r3, [pc, #488]	; (800327c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a79      	ldr	r2, [pc, #484]	; (800327c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003098:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800309c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800309e:	f7fe f985 	bl	80013ac <HAL_GetTick>
 80030a2:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030a4:	e008      	b.n	80030b8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030a6:	f7fe f981 	bl	80013ac <HAL_GetTick>
 80030aa:	4602      	mov	r2, r0
 80030ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030ae:	1ad3      	subs	r3, r2, r3
 80030b0:	2b64      	cmp	r3, #100	; 0x64
 80030b2:	d901      	bls.n	80030b8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80030b4:	2303      	movs	r3, #3
 80030b6:	e0db      	b.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030b8:	4b70      	ldr	r3, [pc, #448]	; (800327c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d0f0      	beq.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80030c4:	4b6c      	ldr	r3, [pc, #432]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80030c6:	6a1b      	ldr	r3, [r3, #32]
 80030c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030cc:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80030ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d07d      	beq.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030dc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80030de:	429a      	cmp	r2, r3
 80030e0:	d076      	beq.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80030e2:	4b65      	ldr	r3, [pc, #404]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80030e4:	6a1b      	ldr	r3, [r3, #32]
 80030e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80030ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80030f0:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030f4:	fa93 f3a3 	rbit	r3, r3
 80030f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80030fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80030fc:	fab3 f383 	clz	r3, r3
 8003100:	b2db      	uxtb	r3, r3
 8003102:	461a      	mov	r2, r3
 8003104:	4b5e      	ldr	r3, [pc, #376]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003106:	4413      	add	r3, r2
 8003108:	009b      	lsls	r3, r3, #2
 800310a:	461a      	mov	r2, r3
 800310c:	2301      	movs	r3, #1
 800310e:	6013      	str	r3, [r2, #0]
 8003110:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003114:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003116:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003118:	fa93 f3a3 	rbit	r3, r3
 800311c:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800311e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003120:	fab3 f383 	clz	r3, r3
 8003124:	b2db      	uxtb	r3, r3
 8003126:	461a      	mov	r2, r3
 8003128:	4b55      	ldr	r3, [pc, #340]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800312a:	4413      	add	r3, r2
 800312c:	009b      	lsls	r3, r3, #2
 800312e:	461a      	mov	r2, r3
 8003130:	2300      	movs	r3, #0
 8003132:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003134:	4a50      	ldr	r2, [pc, #320]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003136:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003138:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800313a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800313c:	f003 0301 	and.w	r3, r3, #1
 8003140:	2b00      	cmp	r3, #0
 8003142:	d045      	beq.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003144:	f7fe f932 	bl	80013ac <HAL_GetTick>
 8003148:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800314a:	e00a      	b.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800314c:	f7fe f92e 	bl	80013ac <HAL_GetTick>
 8003150:	4602      	mov	r2, r0
 8003152:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003154:	1ad3      	subs	r3, r2, r3
 8003156:	f241 3288 	movw	r2, #5000	; 0x1388
 800315a:	4293      	cmp	r3, r2
 800315c:	d901      	bls.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800315e:	2303      	movs	r3, #3
 8003160:	e086      	b.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0x238>
 8003162:	2302      	movs	r3, #2
 8003164:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003168:	fa93 f3a3 	rbit	r3, r3
 800316c:	627b      	str	r3, [r7, #36]	; 0x24
 800316e:	2302      	movs	r3, #2
 8003170:	623b      	str	r3, [r7, #32]
 8003172:	6a3b      	ldr	r3, [r7, #32]
 8003174:	fa93 f3a3 	rbit	r3, r3
 8003178:	61fb      	str	r3, [r7, #28]
  return result;
 800317a:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800317c:	fab3 f383 	clz	r3, r3
 8003180:	b2db      	uxtb	r3, r3
 8003182:	095b      	lsrs	r3, r3, #5
 8003184:	b2db      	uxtb	r3, r3
 8003186:	f043 0302 	orr.w	r3, r3, #2
 800318a:	b2db      	uxtb	r3, r3
 800318c:	2b02      	cmp	r3, #2
 800318e:	d102      	bne.n	8003196 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003190:	4b39      	ldr	r3, [pc, #228]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003192:	6a1b      	ldr	r3, [r3, #32]
 8003194:	e007      	b.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8003196:	2302      	movs	r3, #2
 8003198:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800319a:	69bb      	ldr	r3, [r7, #24]
 800319c:	fa93 f3a3 	rbit	r3, r3
 80031a0:	617b      	str	r3, [r7, #20]
 80031a2:	4b35      	ldr	r3, [pc, #212]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80031a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a6:	2202      	movs	r2, #2
 80031a8:	613a      	str	r2, [r7, #16]
 80031aa:	693a      	ldr	r2, [r7, #16]
 80031ac:	fa92 f2a2 	rbit	r2, r2
 80031b0:	60fa      	str	r2, [r7, #12]
  return result;
 80031b2:	68fa      	ldr	r2, [r7, #12]
 80031b4:	fab2 f282 	clz	r2, r2
 80031b8:	b2d2      	uxtb	r2, r2
 80031ba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80031be:	b2d2      	uxtb	r2, r2
 80031c0:	f002 021f 	and.w	r2, r2, #31
 80031c4:	2101      	movs	r1, #1
 80031c6:	fa01 f202 	lsl.w	r2, r1, r2
 80031ca:	4013      	ands	r3, r2
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d0bd      	beq.n	800314c <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80031d0:	4b29      	ldr	r3, [pc, #164]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80031d2:	6a1b      	ldr	r3, [r3, #32]
 80031d4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	4926      	ldr	r1, [pc, #152]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80031de:	4313      	orrs	r3, r2
 80031e0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80031e2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80031e6:	2b01      	cmp	r3, #1
 80031e8:	d105      	bne.n	80031f6 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031ea:	4b23      	ldr	r3, [pc, #140]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80031ec:	69db      	ldr	r3, [r3, #28]
 80031ee:	4a22      	ldr	r2, [pc, #136]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80031f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031f4:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f003 0301 	and.w	r3, r3, #1
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d008      	beq.n	8003214 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003202:	4b1d      	ldr	r3, [pc, #116]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003206:	f023 0203 	bic.w	r2, r3, #3
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	689b      	ldr	r3, [r3, #8]
 800320e:	491a      	ldr	r1, [pc, #104]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003210:	4313      	orrs	r3, r2
 8003212:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f003 0320 	and.w	r3, r3, #32
 800321c:	2b00      	cmp	r3, #0
 800321e:	d008      	beq.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003220:	4b15      	ldr	r3, [pc, #84]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003224:	f023 0210 	bic.w	r2, r3, #16
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	68db      	ldr	r3, [r3, #12]
 800322c:	4912      	ldr	r1, [pc, #72]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800322e:	4313      	orrs	r3, r2
 8003230:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800323a:	2b00      	cmp	r3, #0
 800323c:	d008      	beq.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800323e:	4b0e      	ldr	r3, [pc, #56]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003242:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	691b      	ldr	r3, [r3, #16]
 800324a:	490b      	ldr	r1, [pc, #44]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800324c:	4313      	orrs	r3, r2
 800324e:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003258:	2b00      	cmp	r3, #0
 800325a:	d008      	beq.n	800326e <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800325c:	4b06      	ldr	r3, [pc, #24]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800325e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003260:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	695b      	ldr	r3, [r3, #20]
 8003268:	4903      	ldr	r1, [pc, #12]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800326a:	4313      	orrs	r3, r2
 800326c:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800326e:	2300      	movs	r3, #0
}
 8003270:	4618      	mov	r0, r3
 8003272:	3748      	adds	r7, #72	; 0x48
 8003274:	46bd      	mov	sp, r7
 8003276:	bd80      	pop	{r7, pc}
 8003278:	40021000 	.word	0x40021000
 800327c:	40007000 	.word	0x40007000
 8003280:	10908100 	.word	0x10908100

08003284 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b082      	sub	sp, #8
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d101      	bne.n	8003296 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	e049      	b.n	800332a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800329c:	b2db      	uxtb	r3, r3
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d106      	bne.n	80032b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2200      	movs	r2, #0
 80032a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80032aa:	6878      	ldr	r0, [r7, #4]
 80032ac:	f7fd fcba 	bl	8000c24 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2202      	movs	r2, #2
 80032b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681a      	ldr	r2, [r3, #0]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	3304      	adds	r3, #4
 80032c0:	4619      	mov	r1, r3
 80032c2:	4610      	mov	r0, r2
 80032c4:	f000 fbaa 	bl	8003a1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2201      	movs	r2, #1
 80032cc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2201      	movs	r2, #1
 80032d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2201      	movs	r2, #1
 80032dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2201      	movs	r2, #1
 80032e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2201      	movs	r2, #1
 80032ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2201      	movs	r2, #1
 80032f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2201      	movs	r2, #1
 80032fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2201      	movs	r2, #1
 8003304:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2201      	movs	r2, #1
 800330c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2201      	movs	r2, #1
 8003314:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2201      	movs	r2, #1
 800331c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2201      	movs	r2, #1
 8003324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003328:	2300      	movs	r3, #0
}
 800332a:	4618      	mov	r0, r3
 800332c:	3708      	adds	r7, #8
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}
	...

08003334 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003334:	b480      	push	{r7}
 8003336:	b085      	sub	sp, #20
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003342:	b2db      	uxtb	r3, r3
 8003344:	2b01      	cmp	r3, #1
 8003346:	d001      	beq.n	800334c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003348:	2301      	movs	r3, #1
 800334a:	e038      	b.n	80033be <HAL_TIM_Base_Start+0x8a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2202      	movs	r2, #2
 8003350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a1c      	ldr	r2, [pc, #112]	; (80033cc <HAL_TIM_Base_Start+0x98>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d00e      	beq.n	800337c <HAL_TIM_Base_Start+0x48>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003366:	d009      	beq.n	800337c <HAL_TIM_Base_Start+0x48>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a18      	ldr	r2, [pc, #96]	; (80033d0 <HAL_TIM_Base_Start+0x9c>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d004      	beq.n	800337c <HAL_TIM_Base_Start+0x48>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a17      	ldr	r2, [pc, #92]	; (80033d4 <HAL_TIM_Base_Start+0xa0>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d115      	bne.n	80033a8 <HAL_TIM_Base_Start+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	689a      	ldr	r2, [r3, #8]
 8003382:	4b15      	ldr	r3, [pc, #84]	; (80033d8 <HAL_TIM_Base_Start+0xa4>)
 8003384:	4013      	ands	r3, r2
 8003386:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	2b06      	cmp	r3, #6
 800338c:	d015      	beq.n	80033ba <HAL_TIM_Base_Start+0x86>
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003394:	d011      	beq.n	80033ba <HAL_TIM_Base_Start+0x86>
    {
      __HAL_TIM_ENABLE(htim);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	681a      	ldr	r2, [r3, #0]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f042 0201 	orr.w	r2, r2, #1
 80033a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033a6:	e008      	b.n	80033ba <HAL_TIM_Base_Start+0x86>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	681a      	ldr	r2, [r3, #0]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f042 0201 	orr.w	r2, r2, #1
 80033b6:	601a      	str	r2, [r3, #0]
 80033b8:	e000      	b.n	80033bc <HAL_TIM_Base_Start+0x88>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033ba:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80033bc:	2300      	movs	r3, #0
}
 80033be:	4618      	mov	r0, r3
 80033c0:	3714      	adds	r7, #20
 80033c2:	46bd      	mov	sp, r7
 80033c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c8:	4770      	bx	lr
 80033ca:	bf00      	nop
 80033cc:	40012c00 	.word	0x40012c00
 80033d0:	40000400 	.word	0x40000400
 80033d4:	40014000 	.word	0x40014000
 80033d8:	00010007 	.word	0x00010007

080033dc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b082      	sub	sp, #8
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d101      	bne.n	80033ee <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	e049      	b.n	8003482 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033f4:	b2db      	uxtb	r3, r3
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d106      	bne.n	8003408 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2200      	movs	r2, #0
 80033fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003402:	6878      	ldr	r0, [r7, #4]
 8003404:	f000 f841 	bl	800348a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2202      	movs	r2, #2
 800340c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681a      	ldr	r2, [r3, #0]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	3304      	adds	r3, #4
 8003418:	4619      	mov	r1, r3
 800341a:	4610      	mov	r0, r2
 800341c:	f000 fafe 	bl	8003a1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2201      	movs	r2, #1
 8003424:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2201      	movs	r2, #1
 800342c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2201      	movs	r2, #1
 8003434:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2201      	movs	r2, #1
 800343c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2201      	movs	r2, #1
 8003444:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2201      	movs	r2, #1
 800344c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2201      	movs	r2, #1
 8003454:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2201      	movs	r2, #1
 800345c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2201      	movs	r2, #1
 8003464:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2201      	movs	r2, #1
 800346c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2201      	movs	r2, #1
 8003474:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2201      	movs	r2, #1
 800347c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003480:	2300      	movs	r3, #0
}
 8003482:	4618      	mov	r0, r3
 8003484:	3708      	adds	r7, #8
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}

0800348a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800348a:	b480      	push	{r7}
 800348c:	b083      	sub	sp, #12
 800348e:	af00      	add	r7, sp, #0
 8003490:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003492:	bf00      	nop
 8003494:	370c      	adds	r7, #12
 8003496:	46bd      	mov	sp, r7
 8003498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349c:	4770      	bx	lr
	...

080034a0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b084      	sub	sp, #16
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
 80034a8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d109      	bne.n	80034c4 <HAL_TIM_PWM_Start+0x24>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80034b6:	b2db      	uxtb	r3, r3
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	bf14      	ite	ne
 80034bc:	2301      	movne	r3, #1
 80034be:	2300      	moveq	r3, #0
 80034c0:	b2db      	uxtb	r3, r3
 80034c2:	e03c      	b.n	800353e <HAL_TIM_PWM_Start+0x9e>
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	2b04      	cmp	r3, #4
 80034c8:	d109      	bne.n	80034de <HAL_TIM_PWM_Start+0x3e>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80034d0:	b2db      	uxtb	r3, r3
 80034d2:	2b01      	cmp	r3, #1
 80034d4:	bf14      	ite	ne
 80034d6:	2301      	movne	r3, #1
 80034d8:	2300      	moveq	r3, #0
 80034da:	b2db      	uxtb	r3, r3
 80034dc:	e02f      	b.n	800353e <HAL_TIM_PWM_Start+0x9e>
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	2b08      	cmp	r3, #8
 80034e2:	d109      	bne.n	80034f8 <HAL_TIM_PWM_Start+0x58>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80034ea:	b2db      	uxtb	r3, r3
 80034ec:	2b01      	cmp	r3, #1
 80034ee:	bf14      	ite	ne
 80034f0:	2301      	movne	r3, #1
 80034f2:	2300      	moveq	r3, #0
 80034f4:	b2db      	uxtb	r3, r3
 80034f6:	e022      	b.n	800353e <HAL_TIM_PWM_Start+0x9e>
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	2b0c      	cmp	r3, #12
 80034fc:	d109      	bne.n	8003512 <HAL_TIM_PWM_Start+0x72>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003504:	b2db      	uxtb	r3, r3
 8003506:	2b01      	cmp	r3, #1
 8003508:	bf14      	ite	ne
 800350a:	2301      	movne	r3, #1
 800350c:	2300      	moveq	r3, #0
 800350e:	b2db      	uxtb	r3, r3
 8003510:	e015      	b.n	800353e <HAL_TIM_PWM_Start+0x9e>
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	2b10      	cmp	r3, #16
 8003516:	d109      	bne.n	800352c <HAL_TIM_PWM_Start+0x8c>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800351e:	b2db      	uxtb	r3, r3
 8003520:	2b01      	cmp	r3, #1
 8003522:	bf14      	ite	ne
 8003524:	2301      	movne	r3, #1
 8003526:	2300      	moveq	r3, #0
 8003528:	b2db      	uxtb	r3, r3
 800352a:	e008      	b.n	800353e <HAL_TIM_PWM_Start+0x9e>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003532:	b2db      	uxtb	r3, r3
 8003534:	2b01      	cmp	r3, #1
 8003536:	bf14      	ite	ne
 8003538:	2301      	movne	r3, #1
 800353a:	2300      	moveq	r3, #0
 800353c:	b2db      	uxtb	r3, r3
 800353e:	2b00      	cmp	r3, #0
 8003540:	d001      	beq.n	8003546 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003542:	2301      	movs	r3, #1
 8003544:	e088      	b.n	8003658 <HAL_TIM_PWM_Start+0x1b8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d104      	bne.n	8003556 <HAL_TIM_PWM_Start+0xb6>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2202      	movs	r2, #2
 8003550:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003554:	e023      	b.n	800359e <HAL_TIM_PWM_Start+0xfe>
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	2b04      	cmp	r3, #4
 800355a:	d104      	bne.n	8003566 <HAL_TIM_PWM_Start+0xc6>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2202      	movs	r2, #2
 8003560:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003564:	e01b      	b.n	800359e <HAL_TIM_PWM_Start+0xfe>
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	2b08      	cmp	r3, #8
 800356a:	d104      	bne.n	8003576 <HAL_TIM_PWM_Start+0xd6>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2202      	movs	r2, #2
 8003570:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003574:	e013      	b.n	800359e <HAL_TIM_PWM_Start+0xfe>
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	2b0c      	cmp	r3, #12
 800357a:	d104      	bne.n	8003586 <HAL_TIM_PWM_Start+0xe6>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2202      	movs	r2, #2
 8003580:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003584:	e00b      	b.n	800359e <HAL_TIM_PWM_Start+0xfe>
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	2b10      	cmp	r3, #16
 800358a:	d104      	bne.n	8003596 <HAL_TIM_PWM_Start+0xf6>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2202      	movs	r2, #2
 8003590:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003594:	e003      	b.n	800359e <HAL_TIM_PWM_Start+0xfe>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2202      	movs	r2, #2
 800359a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	2201      	movs	r2, #1
 80035a4:	6839      	ldr	r1, [r7, #0]
 80035a6:	4618      	mov	r0, r3
 80035a8:	f000 fdf0 	bl	800418c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a2b      	ldr	r2, [pc, #172]	; (8003660 <HAL_TIM_PWM_Start+0x1c0>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d00e      	beq.n	80035d4 <HAL_TIM_PWM_Start+0x134>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a2a      	ldr	r2, [pc, #168]	; (8003664 <HAL_TIM_PWM_Start+0x1c4>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d009      	beq.n	80035d4 <HAL_TIM_PWM_Start+0x134>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a28      	ldr	r2, [pc, #160]	; (8003668 <HAL_TIM_PWM_Start+0x1c8>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d004      	beq.n	80035d4 <HAL_TIM_PWM_Start+0x134>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a27      	ldr	r2, [pc, #156]	; (800366c <HAL_TIM_PWM_Start+0x1cc>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d101      	bne.n	80035d8 <HAL_TIM_PWM_Start+0x138>
 80035d4:	2301      	movs	r3, #1
 80035d6:	e000      	b.n	80035da <HAL_TIM_PWM_Start+0x13a>
 80035d8:	2300      	movs	r3, #0
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d007      	beq.n	80035ee <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80035ec:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a1b      	ldr	r2, [pc, #108]	; (8003660 <HAL_TIM_PWM_Start+0x1c0>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d00e      	beq.n	8003616 <HAL_TIM_PWM_Start+0x176>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003600:	d009      	beq.n	8003616 <HAL_TIM_PWM_Start+0x176>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a1a      	ldr	r2, [pc, #104]	; (8003670 <HAL_TIM_PWM_Start+0x1d0>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d004      	beq.n	8003616 <HAL_TIM_PWM_Start+0x176>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a14      	ldr	r2, [pc, #80]	; (8003664 <HAL_TIM_PWM_Start+0x1c4>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d115      	bne.n	8003642 <HAL_TIM_PWM_Start+0x1a2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	689a      	ldr	r2, [r3, #8]
 800361c:	4b15      	ldr	r3, [pc, #84]	; (8003674 <HAL_TIM_PWM_Start+0x1d4>)
 800361e:	4013      	ands	r3, r2
 8003620:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	2b06      	cmp	r3, #6
 8003626:	d015      	beq.n	8003654 <HAL_TIM_PWM_Start+0x1b4>
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800362e:	d011      	beq.n	8003654 <HAL_TIM_PWM_Start+0x1b4>
    {
      __HAL_TIM_ENABLE(htim);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	681a      	ldr	r2, [r3, #0]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f042 0201 	orr.w	r2, r2, #1
 800363e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003640:	e008      	b.n	8003654 <HAL_TIM_PWM_Start+0x1b4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	681a      	ldr	r2, [r3, #0]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f042 0201 	orr.w	r2, r2, #1
 8003650:	601a      	str	r2, [r3, #0]
 8003652:	e000      	b.n	8003656 <HAL_TIM_PWM_Start+0x1b6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003654:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003656:	2300      	movs	r3, #0
}
 8003658:	4618      	mov	r0, r3
 800365a:	3710      	adds	r7, #16
 800365c:	46bd      	mov	sp, r7
 800365e:	bd80      	pop	{r7, pc}
 8003660:	40012c00 	.word	0x40012c00
 8003664:	40014000 	.word	0x40014000
 8003668:	40014400 	.word	0x40014400
 800366c:	40014800 	.word	0x40014800
 8003670:	40000400 	.word	0x40000400
 8003674:	00010007 	.word	0x00010007

08003678 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b086      	sub	sp, #24
 800367c:	af00      	add	r7, sp, #0
 800367e:	60f8      	str	r0, [r7, #12]
 8003680:	60b9      	str	r1, [r7, #8]
 8003682:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003684:	2300      	movs	r3, #0
 8003686:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800368e:	2b01      	cmp	r3, #1
 8003690:	d101      	bne.n	8003696 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003692:	2302      	movs	r3, #2
 8003694:	e0ff      	b.n	8003896 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	2201      	movs	r2, #1
 800369a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2b14      	cmp	r3, #20
 80036a2:	f200 80f0 	bhi.w	8003886 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80036a6:	a201      	add	r2, pc, #4	; (adr r2, 80036ac <HAL_TIM_PWM_ConfigChannel+0x34>)
 80036a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036ac:	08003701 	.word	0x08003701
 80036b0:	08003887 	.word	0x08003887
 80036b4:	08003887 	.word	0x08003887
 80036b8:	08003887 	.word	0x08003887
 80036bc:	08003741 	.word	0x08003741
 80036c0:	08003887 	.word	0x08003887
 80036c4:	08003887 	.word	0x08003887
 80036c8:	08003887 	.word	0x08003887
 80036cc:	08003783 	.word	0x08003783
 80036d0:	08003887 	.word	0x08003887
 80036d4:	08003887 	.word	0x08003887
 80036d8:	08003887 	.word	0x08003887
 80036dc:	080037c3 	.word	0x080037c3
 80036e0:	08003887 	.word	0x08003887
 80036e4:	08003887 	.word	0x08003887
 80036e8:	08003887 	.word	0x08003887
 80036ec:	08003805 	.word	0x08003805
 80036f0:	08003887 	.word	0x08003887
 80036f4:	08003887 	.word	0x08003887
 80036f8:	08003887 	.word	0x08003887
 80036fc:	08003845 	.word	0x08003845
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	68b9      	ldr	r1, [r7, #8]
 8003706:	4618      	mov	r0, r3
 8003708:	f000 fa00 	bl	8003b0c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	699a      	ldr	r2, [r3, #24]
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f042 0208 	orr.w	r2, r2, #8
 800371a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	699a      	ldr	r2, [r3, #24]
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f022 0204 	bic.w	r2, r2, #4
 800372a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	6999      	ldr	r1, [r3, #24]
 8003732:	68bb      	ldr	r3, [r7, #8]
 8003734:	691a      	ldr	r2, [r3, #16]
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	430a      	orrs	r2, r1
 800373c:	619a      	str	r2, [r3, #24]
      break;
 800373e:	e0a5      	b.n	800388c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	68b9      	ldr	r1, [r7, #8]
 8003746:	4618      	mov	r0, r3
 8003748:	f000 fa66 	bl	8003c18 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	699a      	ldr	r2, [r3, #24]
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800375a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	699a      	ldr	r2, [r3, #24]
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800376a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	6999      	ldr	r1, [r3, #24]
 8003772:	68bb      	ldr	r3, [r7, #8]
 8003774:	691b      	ldr	r3, [r3, #16]
 8003776:	021a      	lsls	r2, r3, #8
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	430a      	orrs	r2, r1
 800377e:	619a      	str	r2, [r3, #24]
      break;
 8003780:	e084      	b.n	800388c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	68b9      	ldr	r1, [r7, #8]
 8003788:	4618      	mov	r0, r3
 800378a:	f000 fac5 	bl	8003d18 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	69da      	ldr	r2, [r3, #28]
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f042 0208 	orr.w	r2, r2, #8
 800379c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	69da      	ldr	r2, [r3, #28]
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f022 0204 	bic.w	r2, r2, #4
 80037ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	69d9      	ldr	r1, [r3, #28]
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	691a      	ldr	r2, [r3, #16]
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	430a      	orrs	r2, r1
 80037be:	61da      	str	r2, [r3, #28]
      break;
 80037c0:	e064      	b.n	800388c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	68b9      	ldr	r1, [r7, #8]
 80037c8:	4618      	mov	r0, r3
 80037ca:	f000 fb23 	bl	8003e14 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	69da      	ldr	r2, [r3, #28]
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80037dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	69da      	ldr	r2, [r3, #28]
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	69d9      	ldr	r1, [r3, #28]
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	691b      	ldr	r3, [r3, #16]
 80037f8:	021a      	lsls	r2, r3, #8
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	430a      	orrs	r2, r1
 8003800:	61da      	str	r2, [r3, #28]
      break;
 8003802:	e043      	b.n	800388c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	68b9      	ldr	r1, [r7, #8]
 800380a:	4618      	mov	r0, r3
 800380c:	f000 fb66 	bl	8003edc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f042 0208 	orr.w	r2, r2, #8
 800381e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f022 0204 	bic.w	r2, r2, #4
 800382e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	691a      	ldr	r2, [r3, #16]
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	430a      	orrs	r2, r1
 8003840:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003842:	e023      	b.n	800388c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	68b9      	ldr	r1, [r7, #8]
 800384a:	4618      	mov	r0, r3
 800384c:	f000 fba4 	bl	8003f98 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800385e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800386e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003876:	68bb      	ldr	r3, [r7, #8]
 8003878:	691b      	ldr	r3, [r3, #16]
 800387a:	021a      	lsls	r2, r3, #8
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	430a      	orrs	r2, r1
 8003882:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003884:	e002      	b.n	800388c <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8003886:	2301      	movs	r3, #1
 8003888:	75fb      	strb	r3, [r7, #23]
      break;
 800388a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	2200      	movs	r2, #0
 8003890:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003894:	7dfb      	ldrb	r3, [r7, #23]
}
 8003896:	4618      	mov	r0, r3
 8003898:	3718      	adds	r7, #24
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}
 800389e:	bf00      	nop

080038a0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b084      	sub	sp, #16
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
 80038a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80038aa:	2300      	movs	r3, #0
 80038ac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038b4:	2b01      	cmp	r3, #1
 80038b6:	d101      	bne.n	80038bc <HAL_TIM_ConfigClockSource+0x1c>
 80038b8:	2302      	movs	r3, #2
 80038ba:	e0ab      	b.n	8003a14 <HAL_TIM_ConfigClockSource+0x174>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2201      	movs	r2, #1
 80038c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2202      	movs	r2, #2
 80038c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	689b      	ldr	r3, [r3, #8]
 80038d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80038d4:	68bb      	ldr	r3, [r7, #8]
 80038d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038da:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80038de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80038e6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	68ba      	ldr	r2, [r7, #8]
 80038ee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	2b40      	cmp	r3, #64	; 0x40
 80038f6:	d067      	beq.n	80039c8 <HAL_TIM_ConfigClockSource+0x128>
 80038f8:	2b40      	cmp	r3, #64	; 0x40
 80038fa:	d80b      	bhi.n	8003914 <HAL_TIM_ConfigClockSource+0x74>
 80038fc:	2b10      	cmp	r3, #16
 80038fe:	d073      	beq.n	80039e8 <HAL_TIM_ConfigClockSource+0x148>
 8003900:	2b10      	cmp	r3, #16
 8003902:	d802      	bhi.n	800390a <HAL_TIM_ConfigClockSource+0x6a>
 8003904:	2b00      	cmp	r3, #0
 8003906:	d06f      	beq.n	80039e8 <HAL_TIM_ConfigClockSource+0x148>
 8003908:	e077      	b.n	80039fa <HAL_TIM_ConfigClockSource+0x15a>
 800390a:	2b20      	cmp	r3, #32
 800390c:	d06c      	beq.n	80039e8 <HAL_TIM_ConfigClockSource+0x148>
 800390e:	2b30      	cmp	r3, #48	; 0x30
 8003910:	d06a      	beq.n	80039e8 <HAL_TIM_ConfigClockSource+0x148>
 8003912:	e072      	b.n	80039fa <HAL_TIM_ConfigClockSource+0x15a>
 8003914:	2b70      	cmp	r3, #112	; 0x70
 8003916:	d00d      	beq.n	8003934 <HAL_TIM_ConfigClockSource+0x94>
 8003918:	2b70      	cmp	r3, #112	; 0x70
 800391a:	d804      	bhi.n	8003926 <HAL_TIM_ConfigClockSource+0x86>
 800391c:	2b50      	cmp	r3, #80	; 0x50
 800391e:	d033      	beq.n	8003988 <HAL_TIM_ConfigClockSource+0xe8>
 8003920:	2b60      	cmp	r3, #96	; 0x60
 8003922:	d041      	beq.n	80039a8 <HAL_TIM_ConfigClockSource+0x108>
 8003924:	e069      	b.n	80039fa <HAL_TIM_ConfigClockSource+0x15a>
 8003926:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800392a:	d069      	beq.n	8003a00 <HAL_TIM_ConfigClockSource+0x160>
 800392c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003930:	d017      	beq.n	8003962 <HAL_TIM_ConfigClockSource+0xc2>
 8003932:	e062      	b.n	80039fa <HAL_TIM_ConfigClockSource+0x15a>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6818      	ldr	r0, [r3, #0]
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	6899      	ldr	r1, [r3, #8]
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	685a      	ldr	r2, [r3, #4]
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	68db      	ldr	r3, [r3, #12]
 8003944:	f000 fc02 	bl	800414c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	689b      	ldr	r3, [r3, #8]
 800394e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003950:	68bb      	ldr	r3, [r7, #8]
 8003952:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003956:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	68ba      	ldr	r2, [r7, #8]
 800395e:	609a      	str	r2, [r3, #8]
      break;
 8003960:	e04f      	b.n	8003a02 <HAL_TIM_ConfigClockSource+0x162>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6818      	ldr	r0, [r3, #0]
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	6899      	ldr	r1, [r3, #8]
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	685a      	ldr	r2, [r3, #4]
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	68db      	ldr	r3, [r3, #12]
 8003972:	f000 fbeb 	bl	800414c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	689a      	ldr	r2, [r3, #8]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003984:	609a      	str	r2, [r3, #8]
      break;
 8003986:	e03c      	b.n	8003a02 <HAL_TIM_ConfigClockSource+0x162>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6818      	ldr	r0, [r3, #0]
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	6859      	ldr	r1, [r3, #4]
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	68db      	ldr	r3, [r3, #12]
 8003994:	461a      	mov	r2, r3
 8003996:	f000 fb5f 	bl	8004058 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	2150      	movs	r1, #80	; 0x50
 80039a0:	4618      	mov	r0, r3
 80039a2:	f000 fbb8 	bl	8004116 <TIM_ITRx_SetConfig>
      break;
 80039a6:	e02c      	b.n	8003a02 <HAL_TIM_ConfigClockSource+0x162>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6818      	ldr	r0, [r3, #0]
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	6859      	ldr	r1, [r3, #4]
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	68db      	ldr	r3, [r3, #12]
 80039b4:	461a      	mov	r2, r3
 80039b6:	f000 fb7e 	bl	80040b6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	2160      	movs	r1, #96	; 0x60
 80039c0:	4618      	mov	r0, r3
 80039c2:	f000 fba8 	bl	8004116 <TIM_ITRx_SetConfig>
      break;
 80039c6:	e01c      	b.n	8003a02 <HAL_TIM_ConfigClockSource+0x162>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6818      	ldr	r0, [r3, #0]
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	6859      	ldr	r1, [r3, #4]
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	68db      	ldr	r3, [r3, #12]
 80039d4:	461a      	mov	r2, r3
 80039d6:	f000 fb3f 	bl	8004058 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	2140      	movs	r1, #64	; 0x40
 80039e0:	4618      	mov	r0, r3
 80039e2:	f000 fb98 	bl	8004116 <TIM_ITRx_SetConfig>
      break;
 80039e6:	e00c      	b.n	8003a02 <HAL_TIM_ConfigClockSource+0x162>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681a      	ldr	r2, [r3, #0]
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4619      	mov	r1, r3
 80039f2:	4610      	mov	r0, r2
 80039f4:	f000 fb8f 	bl	8004116 <TIM_ITRx_SetConfig>
      break;
 80039f8:	e003      	b.n	8003a02 <HAL_TIM_ConfigClockSource+0x162>
    }

    default:
      status = HAL_ERROR;
 80039fa:	2301      	movs	r3, #1
 80039fc:	73fb      	strb	r3, [r7, #15]
      break;
 80039fe:	e000      	b.n	8003a02 <HAL_TIM_ConfigClockSource+0x162>
      break;
 8003a00:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2201      	movs	r2, #1
 8003a06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003a12:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a14:	4618      	mov	r0, r3
 8003a16:	3710      	adds	r7, #16
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bd80      	pop	{r7, pc}

08003a1c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b085      	sub	sp, #20
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
 8003a24:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	4a32      	ldr	r2, [pc, #200]	; (8003af8 <TIM_Base_SetConfig+0xdc>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d007      	beq.n	8003a44 <TIM_Base_SetConfig+0x28>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a3a:	d003      	beq.n	8003a44 <TIM_Base_SetConfig+0x28>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	4a2f      	ldr	r2, [pc, #188]	; (8003afc <TIM_Base_SetConfig+0xe0>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d108      	bne.n	8003a56 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a4a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	68fa      	ldr	r2, [r7, #12]
 8003a52:	4313      	orrs	r3, r2
 8003a54:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	4a27      	ldr	r2, [pc, #156]	; (8003af8 <TIM_Base_SetConfig+0xdc>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d013      	beq.n	8003a86 <TIM_Base_SetConfig+0x6a>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a64:	d00f      	beq.n	8003a86 <TIM_Base_SetConfig+0x6a>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	4a24      	ldr	r2, [pc, #144]	; (8003afc <TIM_Base_SetConfig+0xe0>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d00b      	beq.n	8003a86 <TIM_Base_SetConfig+0x6a>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	4a23      	ldr	r2, [pc, #140]	; (8003b00 <TIM_Base_SetConfig+0xe4>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d007      	beq.n	8003a86 <TIM_Base_SetConfig+0x6a>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	4a22      	ldr	r2, [pc, #136]	; (8003b04 <TIM_Base_SetConfig+0xe8>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d003      	beq.n	8003a86 <TIM_Base_SetConfig+0x6a>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	4a21      	ldr	r2, [pc, #132]	; (8003b08 <TIM_Base_SetConfig+0xec>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d108      	bne.n	8003a98 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	68db      	ldr	r3, [r3, #12]
 8003a92:	68fa      	ldr	r2, [r7, #12]
 8003a94:	4313      	orrs	r3, r2
 8003a96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	695b      	ldr	r3, [r3, #20]
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	68fa      	ldr	r2, [r7, #12]
 8003aaa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	689a      	ldr	r2, [r3, #8]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	681a      	ldr	r2, [r3, #0]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	4a0e      	ldr	r2, [pc, #56]	; (8003af8 <TIM_Base_SetConfig+0xdc>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d00b      	beq.n	8003adc <TIM_Base_SetConfig+0xc0>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	4a0e      	ldr	r2, [pc, #56]	; (8003b00 <TIM_Base_SetConfig+0xe4>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d007      	beq.n	8003adc <TIM_Base_SetConfig+0xc0>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	4a0d      	ldr	r2, [pc, #52]	; (8003b04 <TIM_Base_SetConfig+0xe8>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d003      	beq.n	8003adc <TIM_Base_SetConfig+0xc0>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	4a0c      	ldr	r2, [pc, #48]	; (8003b08 <TIM_Base_SetConfig+0xec>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d103      	bne.n	8003ae4 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	691a      	ldr	r2, [r3, #16]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2201      	movs	r2, #1
 8003ae8:	615a      	str	r2, [r3, #20]
}
 8003aea:	bf00      	nop
 8003aec:	3714      	adds	r7, #20
 8003aee:	46bd      	mov	sp, r7
 8003af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af4:	4770      	bx	lr
 8003af6:	bf00      	nop
 8003af8:	40012c00 	.word	0x40012c00
 8003afc:	40000400 	.word	0x40000400
 8003b00:	40014000 	.word	0x40014000
 8003b04:	40014400 	.word	0x40014400
 8003b08:	40014800 	.word	0x40014800

08003b0c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b087      	sub	sp, #28
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
 8003b14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6a1b      	ldr	r3, [r3, #32]
 8003b1a:	f023 0201 	bic.w	r2, r3, #1
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6a1b      	ldr	r3, [r3, #32]
 8003b26:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	699b      	ldr	r3, [r3, #24]
 8003b32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	f023 0303 	bic.w	r3, r3, #3
 8003b46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	68fa      	ldr	r2, [r7, #12]
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003b52:	697b      	ldr	r3, [r7, #20]
 8003b54:	f023 0302 	bic.w	r3, r3, #2
 8003b58:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	689b      	ldr	r3, [r3, #8]
 8003b5e:	697a      	ldr	r2, [r7, #20]
 8003b60:	4313      	orrs	r3, r2
 8003b62:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	4a28      	ldr	r2, [pc, #160]	; (8003c08 <TIM_OC1_SetConfig+0xfc>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d00b      	beq.n	8003b84 <TIM_OC1_SetConfig+0x78>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	4a27      	ldr	r2, [pc, #156]	; (8003c0c <TIM_OC1_SetConfig+0x100>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d007      	beq.n	8003b84 <TIM_OC1_SetConfig+0x78>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	4a26      	ldr	r2, [pc, #152]	; (8003c10 <TIM_OC1_SetConfig+0x104>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d003      	beq.n	8003b84 <TIM_OC1_SetConfig+0x78>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	4a25      	ldr	r2, [pc, #148]	; (8003c14 <TIM_OC1_SetConfig+0x108>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d10c      	bne.n	8003b9e <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003b84:	697b      	ldr	r3, [r7, #20]
 8003b86:	f023 0308 	bic.w	r3, r3, #8
 8003b8a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	68db      	ldr	r3, [r3, #12]
 8003b90:	697a      	ldr	r2, [r7, #20]
 8003b92:	4313      	orrs	r3, r2
 8003b94:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003b96:	697b      	ldr	r3, [r7, #20]
 8003b98:	f023 0304 	bic.w	r3, r3, #4
 8003b9c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	4a19      	ldr	r2, [pc, #100]	; (8003c08 <TIM_OC1_SetConfig+0xfc>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d00b      	beq.n	8003bbe <TIM_OC1_SetConfig+0xb2>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	4a18      	ldr	r2, [pc, #96]	; (8003c0c <TIM_OC1_SetConfig+0x100>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d007      	beq.n	8003bbe <TIM_OC1_SetConfig+0xb2>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	4a17      	ldr	r2, [pc, #92]	; (8003c10 <TIM_OC1_SetConfig+0x104>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d003      	beq.n	8003bbe <TIM_OC1_SetConfig+0xb2>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	4a16      	ldr	r2, [pc, #88]	; (8003c14 <TIM_OC1_SetConfig+0x108>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d111      	bne.n	8003be2 <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003bc4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003bc6:	693b      	ldr	r3, [r7, #16]
 8003bc8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003bcc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	695b      	ldr	r3, [r3, #20]
 8003bd2:	693a      	ldr	r2, [r7, #16]
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	699b      	ldr	r3, [r3, #24]
 8003bdc:	693a      	ldr	r2, [r7, #16]
 8003bde:	4313      	orrs	r3, r2
 8003be0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	693a      	ldr	r2, [r7, #16]
 8003be6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	68fa      	ldr	r2, [r7, #12]
 8003bec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	685a      	ldr	r2, [r3, #4]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	697a      	ldr	r2, [r7, #20]
 8003bfa:	621a      	str	r2, [r3, #32]
}
 8003bfc:	bf00      	nop
 8003bfe:	371c      	adds	r7, #28
 8003c00:	46bd      	mov	sp, r7
 8003c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c06:	4770      	bx	lr
 8003c08:	40012c00 	.word	0x40012c00
 8003c0c:	40014000 	.word	0x40014000
 8003c10:	40014400 	.word	0x40014400
 8003c14:	40014800 	.word	0x40014800

08003c18 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	b087      	sub	sp, #28
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
 8003c20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6a1b      	ldr	r3, [r3, #32]
 8003c26:	f023 0210 	bic.w	r2, r3, #16
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6a1b      	ldr	r3, [r3, #32]
 8003c32:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	699b      	ldr	r3, [r3, #24]
 8003c3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c52:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	021b      	lsls	r3, r3, #8
 8003c5a:	68fa      	ldr	r2, [r7, #12]
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003c60:	697b      	ldr	r3, [r7, #20]
 8003c62:	f023 0320 	bic.w	r3, r3, #32
 8003c66:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	689b      	ldr	r3, [r3, #8]
 8003c6c:	011b      	lsls	r3, r3, #4
 8003c6e:	697a      	ldr	r2, [r7, #20]
 8003c70:	4313      	orrs	r3, r2
 8003c72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	4a24      	ldr	r2, [pc, #144]	; (8003d08 <TIM_OC2_SetConfig+0xf0>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d10d      	bne.n	8003c98 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003c7c:	697b      	ldr	r3, [r7, #20]
 8003c7e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c82:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	68db      	ldr	r3, [r3, #12]
 8003c88:	011b      	lsls	r3, r3, #4
 8003c8a:	697a      	ldr	r2, [r7, #20]
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003c90:	697b      	ldr	r3, [r7, #20]
 8003c92:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c96:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	4a1b      	ldr	r2, [pc, #108]	; (8003d08 <TIM_OC2_SetConfig+0xf0>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d00b      	beq.n	8003cb8 <TIM_OC2_SetConfig+0xa0>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	4a1a      	ldr	r2, [pc, #104]	; (8003d0c <TIM_OC2_SetConfig+0xf4>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d007      	beq.n	8003cb8 <TIM_OC2_SetConfig+0xa0>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	4a19      	ldr	r2, [pc, #100]	; (8003d10 <TIM_OC2_SetConfig+0xf8>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d003      	beq.n	8003cb8 <TIM_OC2_SetConfig+0xa0>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	4a18      	ldr	r2, [pc, #96]	; (8003d14 <TIM_OC2_SetConfig+0xfc>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d113      	bne.n	8003ce0 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003cb8:	693b      	ldr	r3, [r7, #16]
 8003cba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003cbe:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003cc0:	693b      	ldr	r3, [r7, #16]
 8003cc2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003cc6:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	695b      	ldr	r3, [r3, #20]
 8003ccc:	009b      	lsls	r3, r3, #2
 8003cce:	693a      	ldr	r2, [r7, #16]
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	699b      	ldr	r3, [r3, #24]
 8003cd8:	009b      	lsls	r3, r3, #2
 8003cda:	693a      	ldr	r2, [r7, #16]
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	693a      	ldr	r2, [r7, #16]
 8003ce4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	68fa      	ldr	r2, [r7, #12]
 8003cea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	685a      	ldr	r2, [r3, #4]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	697a      	ldr	r2, [r7, #20]
 8003cf8:	621a      	str	r2, [r3, #32]
}
 8003cfa:	bf00      	nop
 8003cfc:	371c      	adds	r7, #28
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d04:	4770      	bx	lr
 8003d06:	bf00      	nop
 8003d08:	40012c00 	.word	0x40012c00
 8003d0c:	40014000 	.word	0x40014000
 8003d10:	40014400 	.word	0x40014400
 8003d14:	40014800 	.word	0x40014800

08003d18 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b087      	sub	sp, #28
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
 8003d20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6a1b      	ldr	r3, [r3, #32]
 8003d26:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6a1b      	ldr	r3, [r3, #32]
 8003d32:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	69db      	ldr	r3, [r3, #28]
 8003d3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	f023 0303 	bic.w	r3, r3, #3
 8003d52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	68fa      	ldr	r2, [r7, #12]
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003d64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	689b      	ldr	r3, [r3, #8]
 8003d6a:	021b      	lsls	r3, r3, #8
 8003d6c:	697a      	ldr	r2, [r7, #20]
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	4a23      	ldr	r2, [pc, #140]	; (8003e04 <TIM_OC3_SetConfig+0xec>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d10d      	bne.n	8003d96 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003d7a:	697b      	ldr	r3, [r7, #20]
 8003d7c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003d80:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	68db      	ldr	r3, [r3, #12]
 8003d86:	021b      	lsls	r3, r3, #8
 8003d88:	697a      	ldr	r2, [r7, #20]
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003d8e:	697b      	ldr	r3, [r7, #20]
 8003d90:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003d94:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	4a1a      	ldr	r2, [pc, #104]	; (8003e04 <TIM_OC3_SetConfig+0xec>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d00b      	beq.n	8003db6 <TIM_OC3_SetConfig+0x9e>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	4a19      	ldr	r2, [pc, #100]	; (8003e08 <TIM_OC3_SetConfig+0xf0>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d007      	beq.n	8003db6 <TIM_OC3_SetConfig+0x9e>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	4a18      	ldr	r2, [pc, #96]	; (8003e0c <TIM_OC3_SetConfig+0xf4>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d003      	beq.n	8003db6 <TIM_OC3_SetConfig+0x9e>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	4a17      	ldr	r2, [pc, #92]	; (8003e10 <TIM_OC3_SetConfig+0xf8>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d113      	bne.n	8003dde <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003db6:	693b      	ldr	r3, [r7, #16]
 8003db8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003dbc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003dc4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	695b      	ldr	r3, [r3, #20]
 8003dca:	011b      	lsls	r3, r3, #4
 8003dcc:	693a      	ldr	r2, [r7, #16]
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	699b      	ldr	r3, [r3, #24]
 8003dd6:	011b      	lsls	r3, r3, #4
 8003dd8:	693a      	ldr	r2, [r7, #16]
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	693a      	ldr	r2, [r7, #16]
 8003de2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	68fa      	ldr	r2, [r7, #12]
 8003de8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	685a      	ldr	r2, [r3, #4]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	697a      	ldr	r2, [r7, #20]
 8003df6:	621a      	str	r2, [r3, #32]
}
 8003df8:	bf00      	nop
 8003dfa:	371c      	adds	r7, #28
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e02:	4770      	bx	lr
 8003e04:	40012c00 	.word	0x40012c00
 8003e08:	40014000 	.word	0x40014000
 8003e0c:	40014400 	.word	0x40014400
 8003e10:	40014800 	.word	0x40014800

08003e14 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003e14:	b480      	push	{r7}
 8003e16:	b087      	sub	sp, #28
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
 8003e1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6a1b      	ldr	r3, [r3, #32]
 8003e22:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6a1b      	ldr	r3, [r3, #32]
 8003e2e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	69db      	ldr	r3, [r3, #28]
 8003e3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e4e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	021b      	lsls	r3, r3, #8
 8003e56:	68fa      	ldr	r2, [r7, #12]
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003e5c:	693b      	ldr	r3, [r7, #16]
 8003e5e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003e62:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	689b      	ldr	r3, [r3, #8]
 8003e68:	031b      	lsls	r3, r3, #12
 8003e6a:	693a      	ldr	r2, [r7, #16]
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	4a16      	ldr	r2, [pc, #88]	; (8003ecc <TIM_OC4_SetConfig+0xb8>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d00b      	beq.n	8003e90 <TIM_OC4_SetConfig+0x7c>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	4a15      	ldr	r2, [pc, #84]	; (8003ed0 <TIM_OC4_SetConfig+0xbc>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d007      	beq.n	8003e90 <TIM_OC4_SetConfig+0x7c>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	4a14      	ldr	r2, [pc, #80]	; (8003ed4 <TIM_OC4_SetConfig+0xc0>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d003      	beq.n	8003e90 <TIM_OC4_SetConfig+0x7c>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	4a13      	ldr	r2, [pc, #76]	; (8003ed8 <TIM_OC4_SetConfig+0xc4>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d109      	bne.n	8003ea4 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003e96:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	695b      	ldr	r3, [r3, #20]
 8003e9c:	019b      	lsls	r3, r3, #6
 8003e9e:	697a      	ldr	r2, [r7, #20]
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	697a      	ldr	r2, [r7, #20]
 8003ea8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	68fa      	ldr	r2, [r7, #12]
 8003eae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	685a      	ldr	r2, [r3, #4]
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	693a      	ldr	r2, [r7, #16]
 8003ebc:	621a      	str	r2, [r3, #32]
}
 8003ebe:	bf00      	nop
 8003ec0:	371c      	adds	r7, #28
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec8:	4770      	bx	lr
 8003eca:	bf00      	nop
 8003ecc:	40012c00 	.word	0x40012c00
 8003ed0:	40014000 	.word	0x40014000
 8003ed4:	40014400 	.word	0x40014400
 8003ed8:	40014800 	.word	0x40014800

08003edc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003edc:	b480      	push	{r7}
 8003ede:	b087      	sub	sp, #28
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
 8003ee4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6a1b      	ldr	r3, [r3, #32]
 8003eea:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6a1b      	ldr	r3, [r3, #32]
 8003ef6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	68fa      	ldr	r2, [r7, #12]
 8003f16:	4313      	orrs	r3, r2
 8003f18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003f20:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	689b      	ldr	r3, [r3, #8]
 8003f26:	041b      	lsls	r3, r3, #16
 8003f28:	693a      	ldr	r2, [r7, #16]
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	4a15      	ldr	r2, [pc, #84]	; (8003f88 <TIM_OC5_SetConfig+0xac>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d00b      	beq.n	8003f4e <TIM_OC5_SetConfig+0x72>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	4a14      	ldr	r2, [pc, #80]	; (8003f8c <TIM_OC5_SetConfig+0xb0>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d007      	beq.n	8003f4e <TIM_OC5_SetConfig+0x72>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	4a13      	ldr	r2, [pc, #76]	; (8003f90 <TIM_OC5_SetConfig+0xb4>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d003      	beq.n	8003f4e <TIM_OC5_SetConfig+0x72>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	4a12      	ldr	r2, [pc, #72]	; (8003f94 <TIM_OC5_SetConfig+0xb8>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d109      	bne.n	8003f62 <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003f4e:	697b      	ldr	r3, [r7, #20]
 8003f50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f54:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	695b      	ldr	r3, [r3, #20]
 8003f5a:	021b      	lsls	r3, r3, #8
 8003f5c:	697a      	ldr	r2, [r7, #20]
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	697a      	ldr	r2, [r7, #20]
 8003f66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	68fa      	ldr	r2, [r7, #12]
 8003f6c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	685a      	ldr	r2, [r3, #4]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	693a      	ldr	r2, [r7, #16]
 8003f7a:	621a      	str	r2, [r3, #32]
}
 8003f7c:	bf00      	nop
 8003f7e:	371c      	adds	r7, #28
 8003f80:	46bd      	mov	sp, r7
 8003f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f86:	4770      	bx	lr
 8003f88:	40012c00 	.word	0x40012c00
 8003f8c:	40014000 	.word	0x40014000
 8003f90:	40014400 	.word	0x40014400
 8003f94:	40014800 	.word	0x40014800

08003f98 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b087      	sub	sp, #28
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
 8003fa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6a1b      	ldr	r3, [r3, #32]
 8003fa6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6a1b      	ldr	r3, [r3, #32]
 8003fb2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003fc6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003fca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	021b      	lsls	r3, r3, #8
 8003fd2:	68fa      	ldr	r2, [r7, #12]
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003fd8:	693b      	ldr	r3, [r7, #16]
 8003fda:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003fde:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	689b      	ldr	r3, [r3, #8]
 8003fe4:	051b      	lsls	r3, r3, #20
 8003fe6:	693a      	ldr	r2, [r7, #16]
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	4a16      	ldr	r2, [pc, #88]	; (8004048 <TIM_OC6_SetConfig+0xb0>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d00b      	beq.n	800400c <TIM_OC6_SetConfig+0x74>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	4a15      	ldr	r2, [pc, #84]	; (800404c <TIM_OC6_SetConfig+0xb4>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d007      	beq.n	800400c <TIM_OC6_SetConfig+0x74>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	4a14      	ldr	r2, [pc, #80]	; (8004050 <TIM_OC6_SetConfig+0xb8>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d003      	beq.n	800400c <TIM_OC6_SetConfig+0x74>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	4a13      	ldr	r2, [pc, #76]	; (8004054 <TIM_OC6_SetConfig+0xbc>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d109      	bne.n	8004020 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800400c:	697b      	ldr	r3, [r7, #20]
 800400e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004012:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	695b      	ldr	r3, [r3, #20]
 8004018:	029b      	lsls	r3, r3, #10
 800401a:	697a      	ldr	r2, [r7, #20]
 800401c:	4313      	orrs	r3, r2
 800401e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	697a      	ldr	r2, [r7, #20]
 8004024:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	68fa      	ldr	r2, [r7, #12]
 800402a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	685a      	ldr	r2, [r3, #4]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	693a      	ldr	r2, [r7, #16]
 8004038:	621a      	str	r2, [r3, #32]
}
 800403a:	bf00      	nop
 800403c:	371c      	adds	r7, #28
 800403e:	46bd      	mov	sp, r7
 8004040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004044:	4770      	bx	lr
 8004046:	bf00      	nop
 8004048:	40012c00 	.word	0x40012c00
 800404c:	40014000 	.word	0x40014000
 8004050:	40014400 	.word	0x40014400
 8004054:	40014800 	.word	0x40014800

08004058 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004058:	b480      	push	{r7}
 800405a:	b087      	sub	sp, #28
 800405c:	af00      	add	r7, sp, #0
 800405e:	60f8      	str	r0, [r7, #12]
 8004060:	60b9      	str	r1, [r7, #8]
 8004062:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	6a1b      	ldr	r3, [r3, #32]
 8004068:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	6a1b      	ldr	r3, [r3, #32]
 800406e:	f023 0201 	bic.w	r2, r3, #1
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	699b      	ldr	r3, [r3, #24]
 800407a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800407c:	693b      	ldr	r3, [r7, #16]
 800407e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004082:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	011b      	lsls	r3, r3, #4
 8004088:	693a      	ldr	r2, [r7, #16]
 800408a:	4313      	orrs	r3, r2
 800408c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800408e:	697b      	ldr	r3, [r7, #20]
 8004090:	f023 030a 	bic.w	r3, r3, #10
 8004094:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004096:	697a      	ldr	r2, [r7, #20]
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	4313      	orrs	r3, r2
 800409c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	693a      	ldr	r2, [r7, #16]
 80040a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	697a      	ldr	r2, [r7, #20]
 80040a8:	621a      	str	r2, [r3, #32]
}
 80040aa:	bf00      	nop
 80040ac:	371c      	adds	r7, #28
 80040ae:	46bd      	mov	sp, r7
 80040b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b4:	4770      	bx	lr

080040b6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80040b6:	b480      	push	{r7}
 80040b8:	b087      	sub	sp, #28
 80040ba:	af00      	add	r7, sp, #0
 80040bc:	60f8      	str	r0, [r7, #12]
 80040be:	60b9      	str	r1, [r7, #8]
 80040c0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	6a1b      	ldr	r3, [r3, #32]
 80040c6:	f023 0210 	bic.w	r2, r3, #16
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	699b      	ldr	r3, [r3, #24]
 80040d2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	6a1b      	ldr	r3, [r3, #32]
 80040d8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80040e0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	031b      	lsls	r3, r3, #12
 80040e6:	697a      	ldr	r2, [r7, #20]
 80040e8:	4313      	orrs	r3, r2
 80040ea:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80040ec:	693b      	ldr	r3, [r7, #16]
 80040ee:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80040f2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	011b      	lsls	r3, r3, #4
 80040f8:	693a      	ldr	r2, [r7, #16]
 80040fa:	4313      	orrs	r3, r2
 80040fc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	697a      	ldr	r2, [r7, #20]
 8004102:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	693a      	ldr	r2, [r7, #16]
 8004108:	621a      	str	r2, [r3, #32]
}
 800410a:	bf00      	nop
 800410c:	371c      	adds	r7, #28
 800410e:	46bd      	mov	sp, r7
 8004110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004114:	4770      	bx	lr

08004116 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004116:	b480      	push	{r7}
 8004118:	b085      	sub	sp, #20
 800411a:	af00      	add	r7, sp, #0
 800411c:	6078      	str	r0, [r7, #4]
 800411e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800412c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800412e:	683a      	ldr	r2, [r7, #0]
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	4313      	orrs	r3, r2
 8004134:	f043 0307 	orr.w	r3, r3, #7
 8004138:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	68fa      	ldr	r2, [r7, #12]
 800413e:	609a      	str	r2, [r3, #8]
}
 8004140:	bf00      	nop
 8004142:	3714      	adds	r7, #20
 8004144:	46bd      	mov	sp, r7
 8004146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414a:	4770      	bx	lr

0800414c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800414c:	b480      	push	{r7}
 800414e:	b087      	sub	sp, #28
 8004150:	af00      	add	r7, sp, #0
 8004152:	60f8      	str	r0, [r7, #12]
 8004154:	60b9      	str	r1, [r7, #8]
 8004156:	607a      	str	r2, [r7, #4]
 8004158:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	689b      	ldr	r3, [r3, #8]
 800415e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004160:	697b      	ldr	r3, [r7, #20]
 8004162:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004166:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	021a      	lsls	r2, r3, #8
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	431a      	orrs	r2, r3
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	4313      	orrs	r3, r2
 8004174:	697a      	ldr	r2, [r7, #20]
 8004176:	4313      	orrs	r3, r2
 8004178:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	697a      	ldr	r2, [r7, #20]
 800417e:	609a      	str	r2, [r3, #8]
}
 8004180:	bf00      	nop
 8004182:	371c      	adds	r7, #28
 8004184:	46bd      	mov	sp, r7
 8004186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418a:	4770      	bx	lr

0800418c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800418c:	b480      	push	{r7}
 800418e:	b087      	sub	sp, #28
 8004190:	af00      	add	r7, sp, #0
 8004192:	60f8      	str	r0, [r7, #12]
 8004194:	60b9      	str	r1, [r7, #8]
 8004196:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	f003 031f 	and.w	r3, r3, #31
 800419e:	2201      	movs	r2, #1
 80041a0:	fa02 f303 	lsl.w	r3, r2, r3
 80041a4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	6a1a      	ldr	r2, [r3, #32]
 80041aa:	697b      	ldr	r3, [r7, #20]
 80041ac:	43db      	mvns	r3, r3
 80041ae:	401a      	ands	r2, r3
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	6a1a      	ldr	r2, [r3, #32]
 80041b8:	68bb      	ldr	r3, [r7, #8]
 80041ba:	f003 031f 	and.w	r3, r3, #31
 80041be:	6879      	ldr	r1, [r7, #4]
 80041c0:	fa01 f303 	lsl.w	r3, r1, r3
 80041c4:	431a      	orrs	r2, r3
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	621a      	str	r2, [r3, #32]
}
 80041ca:	bf00      	nop
 80041cc:	371c      	adds	r7, #28
 80041ce:	46bd      	mov	sp, r7
 80041d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d4:	4770      	bx	lr
	...

080041d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80041d8:	b480      	push	{r7}
 80041da:	b085      	sub	sp, #20
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
 80041e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041e8:	2b01      	cmp	r3, #1
 80041ea:	d101      	bne.n	80041f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80041ec:	2302      	movs	r3, #2
 80041ee:	e054      	b.n	800429a <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2201      	movs	r2, #1
 80041f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2202      	movs	r2, #2
 80041fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	689b      	ldr	r3, [r3, #8]
 800420e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a24      	ldr	r2, [pc, #144]	; (80042a8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d108      	bne.n	800422c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004220:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	68fa      	ldr	r2, [r7, #12]
 8004228:	4313      	orrs	r3, r2
 800422a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004232:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	68fa      	ldr	r2, [r7, #12]
 800423a:	4313      	orrs	r3, r2
 800423c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	68fa      	ldr	r2, [r7, #12]
 8004244:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a17      	ldr	r2, [pc, #92]	; (80042a8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d00e      	beq.n	800426e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004258:	d009      	beq.n	800426e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a13      	ldr	r2, [pc, #76]	; (80042ac <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d004      	beq.n	800426e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a11      	ldr	r2, [pc, #68]	; (80042b0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d10c      	bne.n	8004288 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004274:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	689b      	ldr	r3, [r3, #8]
 800427a:	68ba      	ldr	r2, [r7, #8]
 800427c:	4313      	orrs	r3, r2
 800427e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	68ba      	ldr	r2, [r7, #8]
 8004286:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2201      	movs	r2, #1
 800428c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2200      	movs	r2, #0
 8004294:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004298:	2300      	movs	r3, #0
}
 800429a:	4618      	mov	r0, r3
 800429c:	3714      	adds	r7, #20
 800429e:	46bd      	mov	sp, r7
 80042a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a4:	4770      	bx	lr
 80042a6:	bf00      	nop
 80042a8:	40012c00 	.word	0x40012c00
 80042ac:	40000400 	.word	0x40000400
 80042b0:	40014000 	.word	0x40014000

080042b4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80042b4:	b480      	push	{r7}
 80042b6:	b085      	sub	sp, #20
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
 80042bc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80042be:	2300      	movs	r3, #0
 80042c0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042c8:	2b01      	cmp	r3, #1
 80042ca:	d101      	bne.n	80042d0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80042cc:	2302      	movs	r3, #2
 80042ce:	e060      	b.n	8004392 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2201      	movs	r2, #1
 80042d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	68db      	ldr	r3, [r3, #12]
 80042e2:	4313      	orrs	r3, r2
 80042e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	689b      	ldr	r3, [r3, #8]
 80042f0:	4313      	orrs	r3, r2
 80042f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	4313      	orrs	r3, r2
 8004300:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4313      	orrs	r3, r2
 800430e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	691b      	ldr	r3, [r3, #16]
 800431a:	4313      	orrs	r3, r2
 800431c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	695b      	ldr	r3, [r3, #20]
 8004328:	4313      	orrs	r3, r2
 800432a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004336:	4313      	orrs	r3, r2
 8004338:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	699b      	ldr	r3, [r3, #24]
 8004344:	041b      	lsls	r3, r3, #16
 8004346:	4313      	orrs	r3, r2
 8004348:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4a14      	ldr	r2, [pc, #80]	; (80043a0 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d115      	bne.n	8004380 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800435e:	051b      	lsls	r3, r3, #20
 8004360:	4313      	orrs	r3, r2
 8004362:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	69db      	ldr	r3, [r3, #28]
 800436e:	4313      	orrs	r3, r2
 8004370:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	6a1b      	ldr	r3, [r3, #32]
 800437c:	4313      	orrs	r3, r2
 800437e:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	68fa      	ldr	r2, [r7, #12]
 8004386:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2200      	movs	r2, #0
 800438c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004390:	2300      	movs	r3, #0
}
 8004392:	4618      	mov	r0, r3
 8004394:	3714      	adds	r7, #20
 8004396:	46bd      	mov	sp, r7
 8004398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439c:	4770      	bx	lr
 800439e:	bf00      	nop
 80043a0:	40012c00 	.word	0x40012c00

080043a4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b082      	sub	sp, #8
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d101      	bne.n	80043b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80043b2:	2301      	movs	r3, #1
 80043b4:	e040      	b.n	8004438 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d106      	bne.n	80043cc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2200      	movs	r2, #0
 80043c2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80043c6:	6878      	ldr	r0, [r7, #4]
 80043c8:	f7fc fcaa 	bl	8000d20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2224      	movs	r2, #36	; 0x24
 80043d0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	681a      	ldr	r2, [r3, #0]
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f022 0201 	bic.w	r2, r2, #1
 80043e0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80043e2:	6878      	ldr	r0, [r7, #4]
 80043e4:	f000 fc18 	bl	8004c18 <UART_SetConfig>
 80043e8:	4603      	mov	r3, r0
 80043ea:	2b01      	cmp	r3, #1
 80043ec:	d101      	bne.n	80043f2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80043ee:	2301      	movs	r3, #1
 80043f0:	e022      	b.n	8004438 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d002      	beq.n	8004400 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80043fa:	6878      	ldr	r0, [r7, #4]
 80043fc:	f000 fd44 	bl	8004e88 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	685a      	ldr	r2, [r3, #4]
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800440e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	689a      	ldr	r2, [r3, #8]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800441e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	681a      	ldr	r2, [r3, #0]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f042 0201 	orr.w	r2, r2, #1
 800442e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004430:	6878      	ldr	r0, [r7, #4]
 8004432:	f000 fdcb 	bl	8004fcc <UART_CheckIdleState>
 8004436:	4603      	mov	r3, r0
}
 8004438:	4618      	mov	r0, r3
 800443a:	3708      	adds	r7, #8
 800443c:	46bd      	mov	sp, r7
 800443e:	bd80      	pop	{r7, pc}

08004440 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b08a      	sub	sp, #40	; 0x28
 8004444:	af02      	add	r7, sp, #8
 8004446:	60f8      	str	r0, [r7, #12]
 8004448:	60b9      	str	r1, [r7, #8]
 800444a:	603b      	str	r3, [r7, #0]
 800444c:	4613      	mov	r3, r2
 800444e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004454:	2b20      	cmp	r3, #32
 8004456:	f040 8082 	bne.w	800455e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800445a:	68bb      	ldr	r3, [r7, #8]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d002      	beq.n	8004466 <HAL_UART_Transmit+0x26>
 8004460:	88fb      	ldrh	r3, [r7, #6]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d101      	bne.n	800446a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004466:	2301      	movs	r3, #1
 8004468:	e07a      	b.n	8004560 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004470:	2b01      	cmp	r3, #1
 8004472:	d101      	bne.n	8004478 <HAL_UART_Transmit+0x38>
 8004474:	2302      	movs	r3, #2
 8004476:	e073      	b.n	8004560 <HAL_UART_Transmit+0x120>
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	2201      	movs	r2, #1
 800447c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	2200      	movs	r2, #0
 8004484:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	2221      	movs	r2, #33	; 0x21
 800448c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800448e:	f7fc ff8d 	bl	80013ac <HAL_GetTick>
 8004492:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	88fa      	ldrh	r2, [r7, #6]
 8004498:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	88fa      	ldrh	r2, [r7, #6]
 80044a0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	689b      	ldr	r3, [r3, #8]
 80044a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044ac:	d108      	bne.n	80044c0 <HAL_UART_Transmit+0x80>
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	691b      	ldr	r3, [r3, #16]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d104      	bne.n	80044c0 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80044b6:	2300      	movs	r3, #0
 80044b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	61bb      	str	r3, [r7, #24]
 80044be:	e003      	b.n	80044c8 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80044c0:	68bb      	ldr	r3, [r7, #8]
 80044c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80044c4:	2300      	movs	r3, #0
 80044c6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	2200      	movs	r2, #0
 80044cc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80044d0:	e02d      	b.n	800452e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	9300      	str	r3, [sp, #0]
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	2200      	movs	r2, #0
 80044da:	2180      	movs	r1, #128	; 0x80
 80044dc:	68f8      	ldr	r0, [r7, #12]
 80044de:	f000 fdbe 	bl	800505e <UART_WaitOnFlagUntilTimeout>
 80044e2:	4603      	mov	r3, r0
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d001      	beq.n	80044ec <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80044e8:	2303      	movs	r3, #3
 80044ea:	e039      	b.n	8004560 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80044ec:	69fb      	ldr	r3, [r7, #28]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d10b      	bne.n	800450a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80044f2:	69bb      	ldr	r3, [r7, #24]
 80044f4:	881a      	ldrh	r2, [r3, #0]
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80044fe:	b292      	uxth	r2, r2
 8004500:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004502:	69bb      	ldr	r3, [r7, #24]
 8004504:	3302      	adds	r3, #2
 8004506:	61bb      	str	r3, [r7, #24]
 8004508:	e008      	b.n	800451c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800450a:	69fb      	ldr	r3, [r7, #28]
 800450c:	781a      	ldrb	r2, [r3, #0]
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	b292      	uxth	r2, r2
 8004514:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004516:	69fb      	ldr	r3, [r7, #28]
 8004518:	3301      	adds	r3, #1
 800451a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004522:	b29b      	uxth	r3, r3
 8004524:	3b01      	subs	r3, #1
 8004526:	b29a      	uxth	r2, r3
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004534:	b29b      	uxth	r3, r3
 8004536:	2b00      	cmp	r3, #0
 8004538:	d1cb      	bne.n	80044d2 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	9300      	str	r3, [sp, #0]
 800453e:	697b      	ldr	r3, [r7, #20]
 8004540:	2200      	movs	r2, #0
 8004542:	2140      	movs	r1, #64	; 0x40
 8004544:	68f8      	ldr	r0, [r7, #12]
 8004546:	f000 fd8a 	bl	800505e <UART_WaitOnFlagUntilTimeout>
 800454a:	4603      	mov	r3, r0
 800454c:	2b00      	cmp	r3, #0
 800454e:	d001      	beq.n	8004554 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004550:	2303      	movs	r3, #3
 8004552:	e005      	b.n	8004560 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	2220      	movs	r2, #32
 8004558:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800455a:	2300      	movs	r3, #0
 800455c:	e000      	b.n	8004560 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800455e:	2302      	movs	r3, #2
  }
}
 8004560:	4618      	mov	r0, r3
 8004562:	3720      	adds	r7, #32
 8004564:	46bd      	mov	sp, r7
 8004566:	bd80      	pop	{r7, pc}

08004568 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b08a      	sub	sp, #40	; 0x28
 800456c:	af00      	add	r7, sp, #0
 800456e:	60f8      	str	r0, [r7, #12]
 8004570:	60b9      	str	r1, [r7, #8]
 8004572:	4613      	mov	r3, r2
 8004574:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800457a:	2b20      	cmp	r3, #32
 800457c:	d13d      	bne.n	80045fa <HAL_UART_Receive_DMA+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 800457e:	68bb      	ldr	r3, [r7, #8]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d002      	beq.n	800458a <HAL_UART_Receive_DMA+0x22>
 8004584:	88fb      	ldrh	r3, [r7, #6]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d101      	bne.n	800458e <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 800458a:	2301      	movs	r3, #1
 800458c:	e036      	b.n	80045fc <HAL_UART_Receive_DMA+0x94>
    }

    __HAL_LOCK(huart);
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004594:	2b01      	cmp	r3, #1
 8004596:	d101      	bne.n	800459c <HAL_UART_Receive_DMA+0x34>
 8004598:	2302      	movs	r3, #2
 800459a:	e02f      	b.n	80045fc <HAL_UART_Receive_DMA+0x94>
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	2201      	movs	r2, #1
 80045a0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	2200      	movs	r2, #0
 80045a8:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d018      	beq.n	80045ea <HAL_UART_Receive_DMA+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045be:	697b      	ldr	r3, [r7, #20]
 80045c0:	e853 3f00 	ldrex	r3, [r3]
 80045c4:	613b      	str	r3, [r7, #16]
   return(result);
 80045c6:	693b      	ldr	r3, [r7, #16]
 80045c8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80045cc:	627b      	str	r3, [r7, #36]	; 0x24
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	461a      	mov	r2, r3
 80045d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045d6:	623b      	str	r3, [r7, #32]
 80045d8:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045da:	69f9      	ldr	r1, [r7, #28]
 80045dc:	6a3a      	ldr	r2, [r7, #32]
 80045de:	e841 2300 	strex	r3, r2, [r1]
 80045e2:	61bb      	str	r3, [r7, #24]
   return(result);
 80045e4:	69bb      	ldr	r3, [r7, #24]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d1e6      	bne.n	80045b8 <HAL_UART_Receive_DMA+0x50>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80045ea:	88fb      	ldrh	r3, [r7, #6]
 80045ec:	461a      	mov	r2, r3
 80045ee:	68b9      	ldr	r1, [r7, #8]
 80045f0:	68f8      	ldr	r0, [r7, #12]
 80045f2:	f000 fdf9 	bl	80051e8 <UART_Start_Receive_DMA>
 80045f6:	4603      	mov	r3, r0
 80045f8:	e000      	b.n	80045fc <HAL_UART_Receive_DMA+0x94>
  }
  else
  {
    return HAL_BUSY;
 80045fa:	2302      	movs	r3, #2
  }
}
 80045fc:	4618      	mov	r0, r3
 80045fe:	3728      	adds	r7, #40	; 0x28
 8004600:	46bd      	mov	sp, r7
 8004602:	bd80      	pop	{r7, pc}

08004604 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b0ba      	sub	sp, #232	; 0xe8
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	69db      	ldr	r3, [r3, #28]
 8004612:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	689b      	ldr	r3, [r3, #8]
 8004626:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800462a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800462e:	f640 030f 	movw	r3, #2063	; 0x80f
 8004632:	4013      	ands	r3, r2
 8004634:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004638:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800463c:	2b00      	cmp	r3, #0
 800463e:	d115      	bne.n	800466c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004640:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004644:	f003 0320 	and.w	r3, r3, #32
 8004648:	2b00      	cmp	r3, #0
 800464a:	d00f      	beq.n	800466c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800464c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004650:	f003 0320 	and.w	r3, r3, #32
 8004654:	2b00      	cmp	r3, #0
 8004656:	d009      	beq.n	800466c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800465c:	2b00      	cmp	r3, #0
 800465e:	f000 82a4 	beq.w	8004baa <HAL_UART_IRQHandler+0x5a6>
      {
        huart->RxISR(huart);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004666:	6878      	ldr	r0, [r7, #4]
 8004668:	4798      	blx	r3
      }
      return;
 800466a:	e29e      	b.n	8004baa <HAL_UART_IRQHandler+0x5a6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800466c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004670:	2b00      	cmp	r3, #0
 8004672:	f000 8117 	beq.w	80048a4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004676:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800467a:	f003 0301 	and.w	r3, r3, #1
 800467e:	2b00      	cmp	r3, #0
 8004680:	d106      	bne.n	8004690 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004682:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004686:	4b85      	ldr	r3, [pc, #532]	; (800489c <HAL_UART_IRQHandler+0x298>)
 8004688:	4013      	ands	r3, r2
 800468a:	2b00      	cmp	r3, #0
 800468c:	f000 810a 	beq.w	80048a4 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004690:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004694:	f003 0301 	and.w	r3, r3, #1
 8004698:	2b00      	cmp	r3, #0
 800469a:	d011      	beq.n	80046c0 <HAL_UART_IRQHandler+0xbc>
 800469c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d00b      	beq.n	80046c0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	2201      	movs	r2, #1
 80046ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80046b6:	f043 0201 	orr.w	r2, r3, #1
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80046c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046c4:	f003 0302 	and.w	r3, r3, #2
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d011      	beq.n	80046f0 <HAL_UART_IRQHandler+0xec>
 80046cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80046d0:	f003 0301 	and.w	r3, r3, #1
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d00b      	beq.n	80046f0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	2202      	movs	r2, #2
 80046de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80046e6:	f043 0204 	orr.w	r2, r3, #4
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80046f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046f4:	f003 0304 	and.w	r3, r3, #4
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d011      	beq.n	8004720 <HAL_UART_IRQHandler+0x11c>
 80046fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004700:	f003 0301 	and.w	r3, r3, #1
 8004704:	2b00      	cmp	r3, #0
 8004706:	d00b      	beq.n	8004720 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	2204      	movs	r2, #4
 800470e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004716:	f043 0202 	orr.w	r2, r3, #2
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004720:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004724:	f003 0308 	and.w	r3, r3, #8
 8004728:	2b00      	cmp	r3, #0
 800472a:	d017      	beq.n	800475c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800472c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004730:	f003 0320 	and.w	r3, r3, #32
 8004734:	2b00      	cmp	r3, #0
 8004736:	d105      	bne.n	8004744 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004738:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800473c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004740:	2b00      	cmp	r3, #0
 8004742:	d00b      	beq.n	800475c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	2208      	movs	r2, #8
 800474a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004752:	f043 0208 	orr.w	r2, r3, #8
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800475c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004760:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004764:	2b00      	cmp	r3, #0
 8004766:	d012      	beq.n	800478e <HAL_UART_IRQHandler+0x18a>
 8004768:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800476c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004770:	2b00      	cmp	r3, #0
 8004772:	d00c      	beq.n	800478e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800477c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004784:	f043 0220 	orr.w	r2, r3, #32
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004794:	2b00      	cmp	r3, #0
 8004796:	f000 820a 	beq.w	8004bae <HAL_UART_IRQHandler+0x5aa>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800479a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800479e:	f003 0320 	and.w	r3, r3, #32
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d00d      	beq.n	80047c2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80047a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047aa:	f003 0320 	and.w	r3, r3, #32
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d007      	beq.n	80047c2 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d003      	beq.n	80047c2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80047be:	6878      	ldr	r0, [r7, #4]
 80047c0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80047c8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	689b      	ldr	r3, [r3, #8]
 80047d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047d6:	2b40      	cmp	r3, #64	; 0x40
 80047d8:	d005      	beq.n	80047e6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80047da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80047de:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d04f      	beq.n	8004886 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80047e6:	6878      	ldr	r0, [r7, #4]
 80047e8:	f000 fdc6 	bl	8005378 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	689b      	ldr	r3, [r3, #8]
 80047f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047f6:	2b40      	cmp	r3, #64	; 0x40
 80047f8:	d141      	bne.n	800487e <HAL_UART_IRQHandler+0x27a>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	3308      	adds	r3, #8
 8004800:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004804:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004808:	e853 3f00 	ldrex	r3, [r3]
 800480c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004810:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004814:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004818:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	3308      	adds	r3, #8
 8004822:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004826:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800482a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800482e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004832:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004836:	e841 2300 	strex	r3, r2, [r1]
 800483a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800483e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004842:	2b00      	cmp	r3, #0
 8004844:	d1d9      	bne.n	80047fa <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800484a:	2b00      	cmp	r3, #0
 800484c:	d013      	beq.n	8004876 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004852:	4a13      	ldr	r2, [pc, #76]	; (80048a0 <HAL_UART_IRQHandler+0x29c>)
 8004854:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800485a:	4618      	mov	r0, r3
 800485c:	f7fc ffc4 	bl	80017e8 <HAL_DMA_Abort_IT>
 8004860:	4603      	mov	r3, r0
 8004862:	2b00      	cmp	r3, #0
 8004864:	d017      	beq.n	8004896 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800486a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800486c:	687a      	ldr	r2, [r7, #4]
 800486e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8004870:	4610      	mov	r0, r2
 8004872:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004874:	e00f      	b.n	8004896 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004876:	6878      	ldr	r0, [r7, #4]
 8004878:	f000 f9b8 	bl	8004bec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800487c:	e00b      	b.n	8004896 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800487e:	6878      	ldr	r0, [r7, #4]
 8004880:	f000 f9b4 	bl	8004bec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004884:	e007      	b.n	8004896 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004886:	6878      	ldr	r0, [r7, #4]
 8004888:	f000 f9b0 	bl	8004bec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2200      	movs	r2, #0
 8004890:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8004894:	e18b      	b.n	8004bae <HAL_UART_IRQHandler+0x5aa>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004896:	bf00      	nop
    return;
 8004898:	e189      	b.n	8004bae <HAL_UART_IRQHandler+0x5aa>
 800489a:	bf00      	nop
 800489c:	04000120 	.word	0x04000120
 80048a0:	08005611 	.word	0x08005611

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048a8:	2b01      	cmp	r3, #1
 80048aa:	f040 8143 	bne.w	8004b34 <HAL_UART_IRQHandler+0x530>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80048ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048b2:	f003 0310 	and.w	r3, r3, #16
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	f000 813c 	beq.w	8004b34 <HAL_UART_IRQHandler+0x530>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80048bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048c0:	f003 0310 	and.w	r3, r3, #16
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	f000 8135 	beq.w	8004b34 <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	2210      	movs	r2, #16
 80048d0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	689b      	ldr	r3, [r3, #8]
 80048d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048dc:	2b40      	cmp	r3, #64	; 0x40
 80048de:	f040 80b1 	bne.w	8004a44 <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80048ee:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	f000 815d 	beq.w	8004bb2 <HAL_UART_IRQHandler+0x5ae>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80048fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004902:	429a      	cmp	r2, r3
 8004904:	f080 8155 	bcs.w	8004bb2 <HAL_UART_IRQHandler+0x5ae>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800490e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004916:	699b      	ldr	r3, [r3, #24]
 8004918:	2b20      	cmp	r3, #32
 800491a:	f000 8085 	beq.w	8004a28 <HAL_UART_IRQHandler+0x424>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004926:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800492a:	e853 3f00 	ldrex	r3, [r3]
 800492e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004932:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004936:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800493a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	461a      	mov	r2, r3
 8004944:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004948:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800494c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004950:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004954:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004958:	e841 2300 	strex	r3, r2, [r1]
 800495c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004960:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004964:	2b00      	cmp	r3, #0
 8004966:	d1da      	bne.n	800491e <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	3308      	adds	r3, #8
 800496e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004970:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004972:	e853 3f00 	ldrex	r3, [r3]
 8004976:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004978:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800497a:	f023 0301 	bic.w	r3, r3, #1
 800497e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	3308      	adds	r3, #8
 8004988:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800498c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004990:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004992:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004994:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004998:	e841 2300 	strex	r3, r2, [r1]
 800499c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800499e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d1e1      	bne.n	8004968 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	3308      	adds	r3, #8
 80049aa:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049ac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80049ae:	e853 3f00 	ldrex	r3, [r3]
 80049b2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80049b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049ba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	3308      	adds	r3, #8
 80049c4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80049c8:	66fa      	str	r2, [r7, #108]	; 0x6c
 80049ca:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049cc:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80049ce:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80049d0:	e841 2300 	strex	r3, r2, [r1]
 80049d4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80049d6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d1e3      	bne.n	80049a4 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2220      	movs	r2, #32
 80049e0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2200      	movs	r2, #0
 80049e6:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049f0:	e853 3f00 	ldrex	r3, [r3]
 80049f4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80049f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049f8:	f023 0310 	bic.w	r3, r3, #16
 80049fc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	461a      	mov	r2, r3
 8004a06:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004a0a:	65bb      	str	r3, [r7, #88]	; 0x58
 8004a0c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a0e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004a10:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004a12:	e841 2300 	strex	r3, r2, [r1]
 8004a16:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004a18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d1e4      	bne.n	80049e8 <HAL_UART_IRQHandler+0x3e4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a22:	4618      	mov	r0, r3
 8004a24:	f7fc fea7 	bl	8001776 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004a34:	b29b      	uxth	r3, r3
 8004a36:	1ad3      	subs	r3, r2, r3
 8004a38:	b29b      	uxth	r3, r3
 8004a3a:	4619      	mov	r1, r3
 8004a3c:	6878      	ldr	r0, [r7, #4]
 8004a3e:	f000 f8df 	bl	8004c00 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004a42:	e0b6      	b.n	8004bb2 <HAL_UART_IRQHandler+0x5ae>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004a50:	b29b      	uxth	r3, r3
 8004a52:	1ad3      	subs	r3, r2, r3
 8004a54:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004a5e:	b29b      	uxth	r3, r3
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	f000 80a8 	beq.w	8004bb6 <HAL_UART_IRQHandler+0x5b2>
          && (nb_rx_data > 0U))
 8004a66:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	f000 80a3 	beq.w	8004bb6 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a78:	e853 3f00 	ldrex	r3, [r3]
 8004a7c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004a7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a80:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004a84:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	461a      	mov	r2, r3
 8004a8e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004a92:	647b      	str	r3, [r7, #68]	; 0x44
 8004a94:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a96:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004a98:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004a9a:	e841 2300 	strex	r3, r2, [r1]
 8004a9e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004aa0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d1e4      	bne.n	8004a70 <HAL_UART_IRQHandler+0x46c>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	3308      	adds	r3, #8
 8004aac:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab0:	e853 3f00 	ldrex	r3, [r3]
 8004ab4:	623b      	str	r3, [r7, #32]
   return(result);
 8004ab6:	6a3b      	ldr	r3, [r7, #32]
 8004ab8:	f023 0301 	bic.w	r3, r3, #1
 8004abc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	3308      	adds	r3, #8
 8004ac6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004aca:	633a      	str	r2, [r7, #48]	; 0x30
 8004acc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ace:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004ad0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ad2:	e841 2300 	strex	r3, r2, [r1]
 8004ad6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004ad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d1e3      	bne.n	8004aa6 <HAL_UART_IRQHandler+0x4a2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2220      	movs	r2, #32
 8004ae2:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2200      	movs	r2, #0
 8004aee:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004af6:	693b      	ldr	r3, [r7, #16]
 8004af8:	e853 3f00 	ldrex	r3, [r3]
 8004afc:	60fb      	str	r3, [r7, #12]
   return(result);
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	f023 0310 	bic.w	r3, r3, #16
 8004b04:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	461a      	mov	r2, r3
 8004b0e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004b12:	61fb      	str	r3, [r7, #28]
 8004b14:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b16:	69b9      	ldr	r1, [r7, #24]
 8004b18:	69fa      	ldr	r2, [r7, #28]
 8004b1a:	e841 2300 	strex	r3, r2, [r1]
 8004b1e:	617b      	str	r3, [r7, #20]
   return(result);
 8004b20:	697b      	ldr	r3, [r7, #20]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d1e4      	bne.n	8004af0 <HAL_UART_IRQHandler+0x4ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004b26:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004b2a:	4619      	mov	r1, r3
 8004b2c:	6878      	ldr	r0, [r7, #4]
 8004b2e:	f000 f867 	bl	8004c00 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004b32:	e040      	b.n	8004bb6 <HAL_UART_IRQHandler+0x5b2>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004b34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b38:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d00e      	beq.n	8004b5e <HAL_UART_IRQHandler+0x55a>
 8004b40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004b44:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d008      	beq.n	8004b5e <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004b54:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004b56:	6878      	ldr	r0, [r7, #4]
 8004b58:	f000 fd9a 	bl	8005690 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004b5c:	e02e      	b.n	8004bbc <HAL_UART_IRQHandler+0x5b8>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004b5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d00e      	beq.n	8004b88 <HAL_UART_IRQHandler+0x584>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004b6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d008      	beq.n	8004b88 <HAL_UART_IRQHandler+0x584>
  {
    if (huart->TxISR != NULL)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d01d      	beq.n	8004bba <HAL_UART_IRQHandler+0x5b6>
    {
      huart->TxISR(huart);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004b82:	6878      	ldr	r0, [r7, #4]
 8004b84:	4798      	blx	r3
    }
    return;
 8004b86:	e018      	b.n	8004bba <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004b88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d013      	beq.n	8004bbc <HAL_UART_IRQHandler+0x5b8>
 8004b94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d00d      	beq.n	8004bbc <HAL_UART_IRQHandler+0x5b8>
  {
    UART_EndTransmit_IT(huart);
 8004ba0:	6878      	ldr	r0, [r7, #4]
 8004ba2:	f000 fd4b 	bl	800563c <UART_EndTransmit_IT>
    return;
 8004ba6:	bf00      	nop
 8004ba8:	e008      	b.n	8004bbc <HAL_UART_IRQHandler+0x5b8>
      return;
 8004baa:	bf00      	nop
 8004bac:	e006      	b.n	8004bbc <HAL_UART_IRQHandler+0x5b8>
    return;
 8004bae:	bf00      	nop
 8004bb0:	e004      	b.n	8004bbc <HAL_UART_IRQHandler+0x5b8>
      return;
 8004bb2:	bf00      	nop
 8004bb4:	e002      	b.n	8004bbc <HAL_UART_IRQHandler+0x5b8>
      return;
 8004bb6:	bf00      	nop
 8004bb8:	e000      	b.n	8004bbc <HAL_UART_IRQHandler+0x5b8>
    return;
 8004bba:	bf00      	nop
  }

}
 8004bbc:	37e8      	adds	r7, #232	; 0xe8
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bd80      	pop	{r7, pc}
 8004bc2:	bf00      	nop

08004bc4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	b083      	sub	sp, #12
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004bcc:	bf00      	nop
 8004bce:	370c      	adds	r7, #12
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd6:	4770      	bx	lr

08004bd8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004bd8:	b480      	push	{r7}
 8004bda:	b083      	sub	sp, #12
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8004be0:	bf00      	nop
 8004be2:	370c      	adds	r7, #12
 8004be4:	46bd      	mov	sp, r7
 8004be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bea:	4770      	bx	lr

08004bec <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004bec:	b480      	push	{r7}
 8004bee:	b083      	sub	sp, #12
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004bf4:	bf00      	nop
 8004bf6:	370c      	adds	r7, #12
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfe:	4770      	bx	lr

08004c00 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004c00:	b480      	push	{r7}
 8004c02:	b083      	sub	sp, #12
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
 8004c08:	460b      	mov	r3, r1
 8004c0a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004c0c:	bf00      	nop
 8004c0e:	370c      	adds	r7, #12
 8004c10:	46bd      	mov	sp, r7
 8004c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c16:	4770      	bx	lr

08004c18 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b088      	sub	sp, #32
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004c20:	2300      	movs	r3, #0
 8004c22:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	689a      	ldr	r2, [r3, #8]
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	691b      	ldr	r3, [r3, #16]
 8004c2c:	431a      	orrs	r2, r3
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	695b      	ldr	r3, [r3, #20]
 8004c32:	431a      	orrs	r2, r3
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	69db      	ldr	r3, [r3, #28]
 8004c38:	4313      	orrs	r3, r2
 8004c3a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	681a      	ldr	r2, [r3, #0]
 8004c42:	4b8b      	ldr	r3, [pc, #556]	; (8004e70 <UART_SetConfig+0x258>)
 8004c44:	4013      	ands	r3, r2
 8004c46:	687a      	ldr	r2, [r7, #4]
 8004c48:	6812      	ldr	r2, [r2, #0]
 8004c4a:	6979      	ldr	r1, [r7, #20]
 8004c4c:	430b      	orrs	r3, r1
 8004c4e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	685b      	ldr	r3, [r3, #4]
 8004c56:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	68da      	ldr	r2, [r3, #12]
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	430a      	orrs	r2, r1
 8004c64:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	699b      	ldr	r3, [r3, #24]
 8004c6a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6a1b      	ldr	r3, [r3, #32]
 8004c70:	697a      	ldr	r2, [r7, #20]
 8004c72:	4313      	orrs	r3, r2
 8004c74:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	689b      	ldr	r3, [r3, #8]
 8004c7c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	697a      	ldr	r2, [r7, #20]
 8004c86:	430a      	orrs	r2, r1
 8004c88:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4a79      	ldr	r2, [pc, #484]	; (8004e74 <UART_SetConfig+0x25c>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d121      	bne.n	8004cd8 <UART_SetConfig+0xc0>
 8004c94:	4b78      	ldr	r3, [pc, #480]	; (8004e78 <UART_SetConfig+0x260>)
 8004c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c98:	f003 0303 	and.w	r3, r3, #3
 8004c9c:	2b03      	cmp	r3, #3
 8004c9e:	d817      	bhi.n	8004cd0 <UART_SetConfig+0xb8>
 8004ca0:	a201      	add	r2, pc, #4	; (adr r2, 8004ca8 <UART_SetConfig+0x90>)
 8004ca2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ca6:	bf00      	nop
 8004ca8:	08004cb9 	.word	0x08004cb9
 8004cac:	08004cc5 	.word	0x08004cc5
 8004cb0:	08004ccb 	.word	0x08004ccb
 8004cb4:	08004cbf 	.word	0x08004cbf
 8004cb8:	2300      	movs	r3, #0
 8004cba:	77fb      	strb	r3, [r7, #31]
 8004cbc:	e01e      	b.n	8004cfc <UART_SetConfig+0xe4>
 8004cbe:	2302      	movs	r3, #2
 8004cc0:	77fb      	strb	r3, [r7, #31]
 8004cc2:	e01b      	b.n	8004cfc <UART_SetConfig+0xe4>
 8004cc4:	2304      	movs	r3, #4
 8004cc6:	77fb      	strb	r3, [r7, #31]
 8004cc8:	e018      	b.n	8004cfc <UART_SetConfig+0xe4>
 8004cca:	2308      	movs	r3, #8
 8004ccc:	77fb      	strb	r3, [r7, #31]
 8004cce:	e015      	b.n	8004cfc <UART_SetConfig+0xe4>
 8004cd0:	2310      	movs	r3, #16
 8004cd2:	77fb      	strb	r3, [r7, #31]
 8004cd4:	bf00      	nop
 8004cd6:	e011      	b.n	8004cfc <UART_SetConfig+0xe4>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a67      	ldr	r2, [pc, #412]	; (8004e7c <UART_SetConfig+0x264>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d102      	bne.n	8004ce8 <UART_SetConfig+0xd0>
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	77fb      	strb	r3, [r7, #31]
 8004ce6:	e009      	b.n	8004cfc <UART_SetConfig+0xe4>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4a64      	ldr	r2, [pc, #400]	; (8004e80 <UART_SetConfig+0x268>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d102      	bne.n	8004cf8 <UART_SetConfig+0xe0>
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	77fb      	strb	r3, [r7, #31]
 8004cf6:	e001      	b.n	8004cfc <UART_SetConfig+0xe4>
 8004cf8:	2310      	movs	r3, #16
 8004cfa:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	69db      	ldr	r3, [r3, #28]
 8004d00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d04:	d15c      	bne.n	8004dc0 <UART_SetConfig+0x1a8>
  {
    switch (clocksource)
 8004d06:	7ffb      	ldrb	r3, [r7, #31]
 8004d08:	2b08      	cmp	r3, #8
 8004d0a:	d828      	bhi.n	8004d5e <UART_SetConfig+0x146>
 8004d0c:	a201      	add	r2, pc, #4	; (adr r2, 8004d14 <UART_SetConfig+0xfc>)
 8004d0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d12:	bf00      	nop
 8004d14:	08004d39 	.word	0x08004d39
 8004d18:	08004d41 	.word	0x08004d41
 8004d1c:	08004d49 	.word	0x08004d49
 8004d20:	08004d5f 	.word	0x08004d5f
 8004d24:	08004d4f 	.word	0x08004d4f
 8004d28:	08004d5f 	.word	0x08004d5f
 8004d2c:	08004d5f 	.word	0x08004d5f
 8004d30:	08004d5f 	.word	0x08004d5f
 8004d34:	08004d57 	.word	0x08004d57
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d38:	f7fe f93a 	bl	8002fb0 <HAL_RCC_GetPCLK1Freq>
 8004d3c:	61b8      	str	r0, [r7, #24]
        break;
 8004d3e:	e013      	b.n	8004d68 <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004d40:	f7fe f958 	bl	8002ff4 <HAL_RCC_GetPCLK2Freq>
 8004d44:	61b8      	str	r0, [r7, #24]
        break;
 8004d46:	e00f      	b.n	8004d68 <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d48:	4b4e      	ldr	r3, [pc, #312]	; (8004e84 <UART_SetConfig+0x26c>)
 8004d4a:	61bb      	str	r3, [r7, #24]
        break;
 8004d4c:	e00c      	b.n	8004d68 <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d4e:	f7fe f8b9 	bl	8002ec4 <HAL_RCC_GetSysClockFreq>
 8004d52:	61b8      	str	r0, [r7, #24]
        break;
 8004d54:	e008      	b.n	8004d68 <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d5a:	61bb      	str	r3, [r7, #24]
        break;
 8004d5c:	e004      	b.n	8004d68 <UART_SetConfig+0x150>
      default:
        pclk = 0U;
 8004d5e:	2300      	movs	r3, #0
 8004d60:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004d62:	2301      	movs	r3, #1
 8004d64:	77bb      	strb	r3, [r7, #30]
        break;
 8004d66:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004d68:	69bb      	ldr	r3, [r7, #24]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d074      	beq.n	8004e58 <UART_SetConfig+0x240>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004d6e:	69bb      	ldr	r3, [r7, #24]
 8004d70:	005a      	lsls	r2, r3, #1
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	685b      	ldr	r3, [r3, #4]
 8004d76:	085b      	lsrs	r3, r3, #1
 8004d78:	441a      	add	r2, r3
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	685b      	ldr	r3, [r3, #4]
 8004d7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d82:	b29b      	uxth	r3, r3
 8004d84:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d86:	693b      	ldr	r3, [r7, #16]
 8004d88:	2b0f      	cmp	r3, #15
 8004d8a:	d916      	bls.n	8004dba <UART_SetConfig+0x1a2>
 8004d8c:	693b      	ldr	r3, [r7, #16]
 8004d8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d92:	d212      	bcs.n	8004dba <UART_SetConfig+0x1a2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004d94:	693b      	ldr	r3, [r7, #16]
 8004d96:	b29b      	uxth	r3, r3
 8004d98:	f023 030f 	bic.w	r3, r3, #15
 8004d9c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004d9e:	693b      	ldr	r3, [r7, #16]
 8004da0:	085b      	lsrs	r3, r3, #1
 8004da2:	b29b      	uxth	r3, r3
 8004da4:	f003 0307 	and.w	r3, r3, #7
 8004da8:	b29a      	uxth	r2, r3
 8004daa:	89fb      	ldrh	r3, [r7, #14]
 8004dac:	4313      	orrs	r3, r2
 8004dae:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	89fa      	ldrh	r2, [r7, #14]
 8004db6:	60da      	str	r2, [r3, #12]
 8004db8:	e04e      	b.n	8004e58 <UART_SetConfig+0x240>
      }
      else
      {
        ret = HAL_ERROR;
 8004dba:	2301      	movs	r3, #1
 8004dbc:	77bb      	strb	r3, [r7, #30]
 8004dbe:	e04b      	b.n	8004e58 <UART_SetConfig+0x240>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004dc0:	7ffb      	ldrb	r3, [r7, #31]
 8004dc2:	2b08      	cmp	r3, #8
 8004dc4:	d827      	bhi.n	8004e16 <UART_SetConfig+0x1fe>
 8004dc6:	a201      	add	r2, pc, #4	; (adr r2, 8004dcc <UART_SetConfig+0x1b4>)
 8004dc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dcc:	08004df1 	.word	0x08004df1
 8004dd0:	08004df9 	.word	0x08004df9
 8004dd4:	08004e01 	.word	0x08004e01
 8004dd8:	08004e17 	.word	0x08004e17
 8004ddc:	08004e07 	.word	0x08004e07
 8004de0:	08004e17 	.word	0x08004e17
 8004de4:	08004e17 	.word	0x08004e17
 8004de8:	08004e17 	.word	0x08004e17
 8004dec:	08004e0f 	.word	0x08004e0f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004df0:	f7fe f8de 	bl	8002fb0 <HAL_RCC_GetPCLK1Freq>
 8004df4:	61b8      	str	r0, [r7, #24]
        break;
 8004df6:	e013      	b.n	8004e20 <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004df8:	f7fe f8fc 	bl	8002ff4 <HAL_RCC_GetPCLK2Freq>
 8004dfc:	61b8      	str	r0, [r7, #24]
        break;
 8004dfe:	e00f      	b.n	8004e20 <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e00:	4b20      	ldr	r3, [pc, #128]	; (8004e84 <UART_SetConfig+0x26c>)
 8004e02:	61bb      	str	r3, [r7, #24]
        break;
 8004e04:	e00c      	b.n	8004e20 <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e06:	f7fe f85d 	bl	8002ec4 <HAL_RCC_GetSysClockFreq>
 8004e0a:	61b8      	str	r0, [r7, #24]
        break;
 8004e0c:	e008      	b.n	8004e20 <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e12:	61bb      	str	r3, [r7, #24]
        break;
 8004e14:	e004      	b.n	8004e20 <UART_SetConfig+0x208>
      default:
        pclk = 0U;
 8004e16:	2300      	movs	r3, #0
 8004e18:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	77bb      	strb	r3, [r7, #30]
        break;
 8004e1e:	bf00      	nop
    }

    if (pclk != 0U)
 8004e20:	69bb      	ldr	r3, [r7, #24]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d018      	beq.n	8004e58 <UART_SetConfig+0x240>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	685b      	ldr	r3, [r3, #4]
 8004e2a:	085a      	lsrs	r2, r3, #1
 8004e2c:	69bb      	ldr	r3, [r7, #24]
 8004e2e:	441a      	add	r2, r3
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	685b      	ldr	r3, [r3, #4]
 8004e34:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e38:	b29b      	uxth	r3, r3
 8004e3a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e3c:	693b      	ldr	r3, [r7, #16]
 8004e3e:	2b0f      	cmp	r3, #15
 8004e40:	d908      	bls.n	8004e54 <UART_SetConfig+0x23c>
 8004e42:	693b      	ldr	r3, [r7, #16]
 8004e44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e48:	d204      	bcs.n	8004e54 <UART_SetConfig+0x23c>
      {
        huart->Instance->BRR = usartdiv;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	693a      	ldr	r2, [r7, #16]
 8004e50:	60da      	str	r2, [r3, #12]
 8004e52:	e001      	b.n	8004e58 <UART_SetConfig+0x240>
      }
      else
      {
        ret = HAL_ERROR;
 8004e54:	2301      	movs	r3, #1
 8004e56:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2200      	movs	r2, #0
 8004e62:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004e64:	7fbb      	ldrb	r3, [r7, #30]
}
 8004e66:	4618      	mov	r0, r3
 8004e68:	3720      	adds	r7, #32
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	bd80      	pop	{r7, pc}
 8004e6e:	bf00      	nop
 8004e70:	efff69f3 	.word	0xefff69f3
 8004e74:	40013800 	.word	0x40013800
 8004e78:	40021000 	.word	0x40021000
 8004e7c:	40004400 	.word	0x40004400
 8004e80:	40004800 	.word	0x40004800
 8004e84:	007a1200 	.word	0x007a1200

08004e88 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004e88:	b480      	push	{r7}
 8004e8a:	b083      	sub	sp, #12
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e94:	f003 0301 	and.w	r3, r3, #1
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d00a      	beq.n	8004eb2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	685b      	ldr	r3, [r3, #4]
 8004ea2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	430a      	orrs	r2, r1
 8004eb0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb6:	f003 0302 	and.w	r3, r3, #2
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d00a      	beq.n	8004ed4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	685b      	ldr	r3, [r3, #4]
 8004ec4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	430a      	orrs	r2, r1
 8004ed2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ed8:	f003 0304 	and.w	r3, r3, #4
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d00a      	beq.n	8004ef6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	685b      	ldr	r3, [r3, #4]
 8004ee6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	430a      	orrs	r2, r1
 8004ef4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004efa:	f003 0308 	and.w	r3, r3, #8
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d00a      	beq.n	8004f18 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	685b      	ldr	r3, [r3, #4]
 8004f08:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	430a      	orrs	r2, r1
 8004f16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f1c:	f003 0310 	and.w	r3, r3, #16
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d00a      	beq.n	8004f3a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	689b      	ldr	r3, [r3, #8]
 8004f2a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	430a      	orrs	r2, r1
 8004f38:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f3e:	f003 0320 	and.w	r3, r3, #32
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d00a      	beq.n	8004f5c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	689b      	ldr	r3, [r3, #8]
 8004f4c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	430a      	orrs	r2, r1
 8004f5a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d01a      	beq.n	8004f9e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	685b      	ldr	r3, [r3, #4]
 8004f6e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	430a      	orrs	r2, r1
 8004f7c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f82:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f86:	d10a      	bne.n	8004f9e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	685b      	ldr	r3, [r3, #4]
 8004f8e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	430a      	orrs	r2, r1
 8004f9c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d00a      	beq.n	8004fc0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	685b      	ldr	r3, [r3, #4]
 8004fb0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	430a      	orrs	r2, r1
 8004fbe:	605a      	str	r2, [r3, #4]
  }
}
 8004fc0:	bf00      	nop
 8004fc2:	370c      	adds	r7, #12
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fca:	4770      	bx	lr

08004fcc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b086      	sub	sp, #24
 8004fd0:	af02      	add	r7, sp, #8
 8004fd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004fdc:	f7fc f9e6 	bl	80013ac <HAL_GetTick>
 8004fe0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f003 0308 	and.w	r3, r3, #8
 8004fec:	2b08      	cmp	r3, #8
 8004fee:	d10e      	bne.n	800500e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ff0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004ff4:	9300      	str	r3, [sp, #0]
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004ffe:	6878      	ldr	r0, [r7, #4]
 8005000:	f000 f82d 	bl	800505e <UART_WaitOnFlagUntilTimeout>
 8005004:	4603      	mov	r3, r0
 8005006:	2b00      	cmp	r3, #0
 8005008:	d001      	beq.n	800500e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800500a:	2303      	movs	r3, #3
 800500c:	e023      	b.n	8005056 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f003 0304 	and.w	r3, r3, #4
 8005018:	2b04      	cmp	r3, #4
 800501a:	d10e      	bne.n	800503a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800501c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005020:	9300      	str	r3, [sp, #0]
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	2200      	movs	r2, #0
 8005026:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800502a:	6878      	ldr	r0, [r7, #4]
 800502c:	f000 f817 	bl	800505e <UART_WaitOnFlagUntilTimeout>
 8005030:	4603      	mov	r3, r0
 8005032:	2b00      	cmp	r3, #0
 8005034:	d001      	beq.n	800503a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005036:	2303      	movs	r3, #3
 8005038:	e00d      	b.n	8005056 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2220      	movs	r2, #32
 800503e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2220      	movs	r2, #32
 8005044:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2200      	movs	r2, #0
 800504a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2200      	movs	r2, #0
 8005050:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005054:	2300      	movs	r3, #0
}
 8005056:	4618      	mov	r0, r3
 8005058:	3710      	adds	r7, #16
 800505a:	46bd      	mov	sp, r7
 800505c:	bd80      	pop	{r7, pc}

0800505e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800505e:	b580      	push	{r7, lr}
 8005060:	b09c      	sub	sp, #112	; 0x70
 8005062:	af00      	add	r7, sp, #0
 8005064:	60f8      	str	r0, [r7, #12]
 8005066:	60b9      	str	r1, [r7, #8]
 8005068:	603b      	str	r3, [r7, #0]
 800506a:	4613      	mov	r3, r2
 800506c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800506e:	e0a5      	b.n	80051bc <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005070:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005072:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005076:	f000 80a1 	beq.w	80051bc <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800507a:	f7fc f997 	bl	80013ac <HAL_GetTick>
 800507e:	4602      	mov	r2, r0
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	1ad3      	subs	r3, r2, r3
 8005084:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005086:	429a      	cmp	r2, r3
 8005088:	d302      	bcc.n	8005090 <UART_WaitOnFlagUntilTimeout+0x32>
 800508a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800508c:	2b00      	cmp	r3, #0
 800508e:	d13e      	bne.n	800510e <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005096:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005098:	e853 3f00 	ldrex	r3, [r3]
 800509c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800509e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050a0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80050a4:	667b      	str	r3, [r7, #100]	; 0x64
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	461a      	mov	r2, r3
 80050ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80050ae:	65fb      	str	r3, [r7, #92]	; 0x5c
 80050b0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050b2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80050b4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80050b6:	e841 2300 	strex	r3, r2, [r1]
 80050ba:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80050bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d1e6      	bne.n	8005090 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	3308      	adds	r3, #8
 80050c8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050cc:	e853 3f00 	ldrex	r3, [r3]
 80050d0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80050d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050d4:	f023 0301 	bic.w	r3, r3, #1
 80050d8:	663b      	str	r3, [r7, #96]	; 0x60
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	3308      	adds	r3, #8
 80050e0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80050e2:	64ba      	str	r2, [r7, #72]	; 0x48
 80050e4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050e6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80050e8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80050ea:	e841 2300 	strex	r3, r2, [r1]
 80050ee:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80050f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d1e5      	bne.n	80050c2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	2220      	movs	r2, #32
 80050fa:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	2220      	movs	r2, #32
 8005100:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	2200      	movs	r2, #0
 8005106:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800510a:	2303      	movs	r3, #3
 800510c:	e067      	b.n	80051de <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f003 0304 	and.w	r3, r3, #4
 8005118:	2b00      	cmp	r3, #0
 800511a:	d04f      	beq.n	80051bc <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	69db      	ldr	r3, [r3, #28]
 8005122:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005126:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800512a:	d147      	bne.n	80051bc <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005134:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800513c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800513e:	e853 3f00 	ldrex	r3, [r3]
 8005142:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005146:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800514a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	461a      	mov	r2, r3
 8005152:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005154:	637b      	str	r3, [r7, #52]	; 0x34
 8005156:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005158:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800515a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800515c:	e841 2300 	strex	r3, r2, [r1]
 8005160:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005162:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005164:	2b00      	cmp	r3, #0
 8005166:	d1e6      	bne.n	8005136 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	3308      	adds	r3, #8
 800516e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005170:	697b      	ldr	r3, [r7, #20]
 8005172:	e853 3f00 	ldrex	r3, [r3]
 8005176:	613b      	str	r3, [r7, #16]
   return(result);
 8005178:	693b      	ldr	r3, [r7, #16]
 800517a:	f023 0301 	bic.w	r3, r3, #1
 800517e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	3308      	adds	r3, #8
 8005186:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005188:	623a      	str	r2, [r7, #32]
 800518a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800518c:	69f9      	ldr	r1, [r7, #28]
 800518e:	6a3a      	ldr	r2, [r7, #32]
 8005190:	e841 2300 	strex	r3, r2, [r1]
 8005194:	61bb      	str	r3, [r7, #24]
   return(result);
 8005196:	69bb      	ldr	r3, [r7, #24]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d1e5      	bne.n	8005168 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	2220      	movs	r2, #32
 80051a0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	2220      	movs	r2, #32
 80051a6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	2220      	movs	r2, #32
 80051ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	2200      	movs	r2, #0
 80051b4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80051b8:	2303      	movs	r3, #3
 80051ba:	e010      	b.n	80051de <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	69da      	ldr	r2, [r3, #28]
 80051c2:	68bb      	ldr	r3, [r7, #8]
 80051c4:	4013      	ands	r3, r2
 80051c6:	68ba      	ldr	r2, [r7, #8]
 80051c8:	429a      	cmp	r2, r3
 80051ca:	bf0c      	ite	eq
 80051cc:	2301      	moveq	r3, #1
 80051ce:	2300      	movne	r3, #0
 80051d0:	b2db      	uxtb	r3, r3
 80051d2:	461a      	mov	r2, r3
 80051d4:	79fb      	ldrb	r3, [r7, #7]
 80051d6:	429a      	cmp	r2, r3
 80051d8:	f43f af4a 	beq.w	8005070 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80051dc:	2300      	movs	r3, #0
}
 80051de:	4618      	mov	r0, r3
 80051e0:	3770      	adds	r7, #112	; 0x70
 80051e2:	46bd      	mov	sp, r7
 80051e4:	bd80      	pop	{r7, pc}
	...

080051e8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b096      	sub	sp, #88	; 0x58
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	60f8      	str	r0, [r7, #12]
 80051f0:	60b9      	str	r1, [r7, #8]
 80051f2:	4613      	mov	r3, r2
 80051f4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	68ba      	ldr	r2, [r7, #8]
 80051fa:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	88fa      	ldrh	r2, [r7, #6]
 8005200:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	2200      	movs	r2, #0
 8005208:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	2222      	movs	r2, #34	; 0x22
 8005210:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005216:	2b00      	cmp	r3, #0
 8005218:	d02b      	beq.n	8005272 <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800521e:	4a40      	ldr	r2, [pc, #256]	; (8005320 <UART_Start_Receive_DMA+0x138>)
 8005220:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005226:	4a3f      	ldr	r2, [pc, #252]	; (8005324 <UART_Start_Receive_DMA+0x13c>)
 8005228:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800522e:	4a3e      	ldr	r2, [pc, #248]	; (8005328 <UART_Start_Receive_DMA+0x140>)
 8005230:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005236:	2200      	movs	r2, #0
 8005238:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	3324      	adds	r3, #36	; 0x24
 8005244:	4619      	mov	r1, r3
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800524a:	461a      	mov	r2, r3
 800524c:	88fb      	ldrh	r3, [r7, #6]
 800524e:	f7fc fa33 	bl	80016b8 <HAL_DMA_Start_IT>
 8005252:	4603      	mov	r3, r0
 8005254:	2b00      	cmp	r3, #0
 8005256:	d00c      	beq.n	8005272 <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	2210      	movs	r2, #16
 800525c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	2200      	movs	r2, #0
 8005264:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	2220      	movs	r2, #32
 800526c:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_ERROR;
 800526e:	2301      	movs	r3, #1
 8005270:	e051      	b.n	8005316 <UART_Start_Receive_DMA+0x12e>
    }
  }
  __HAL_UNLOCK(huart);
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	2200      	movs	r2, #0
 8005276:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005280:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005282:	e853 3f00 	ldrex	r3, [r3]
 8005286:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005288:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800528a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800528e:	657b      	str	r3, [r7, #84]	; 0x54
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	461a      	mov	r2, r3
 8005296:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005298:	64bb      	str	r3, [r7, #72]	; 0x48
 800529a:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800529c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800529e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80052a0:	e841 2300 	strex	r3, r2, [r1]
 80052a4:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80052a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d1e6      	bne.n	800527a <UART_Start_Receive_DMA+0x92>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	3308      	adds	r3, #8
 80052b2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052b6:	e853 3f00 	ldrex	r3, [r3]
 80052ba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80052bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052be:	f043 0301 	orr.w	r3, r3, #1
 80052c2:	653b      	str	r3, [r7, #80]	; 0x50
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	3308      	adds	r3, #8
 80052ca:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80052cc:	637a      	str	r2, [r7, #52]	; 0x34
 80052ce:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052d0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80052d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80052d4:	e841 2300 	strex	r3, r2, [r1]
 80052d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80052da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d1e5      	bne.n	80052ac <UART_Start_Receive_DMA+0xc4>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	3308      	adds	r3, #8
 80052e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052e8:	697b      	ldr	r3, [r7, #20]
 80052ea:	e853 3f00 	ldrex	r3, [r3]
 80052ee:	613b      	str	r3, [r7, #16]
   return(result);
 80052f0:	693b      	ldr	r3, [r7, #16]
 80052f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80052f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	3308      	adds	r3, #8
 80052fe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005300:	623a      	str	r2, [r7, #32]
 8005302:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005304:	69f9      	ldr	r1, [r7, #28]
 8005306:	6a3a      	ldr	r2, [r7, #32]
 8005308:	e841 2300 	strex	r3, r2, [r1]
 800530c:	61bb      	str	r3, [r7, #24]
   return(result);
 800530e:	69bb      	ldr	r3, [r7, #24]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d1e5      	bne.n	80052e0 <UART_Start_Receive_DMA+0xf8>

  return HAL_OK;
 8005314:	2300      	movs	r3, #0
}
 8005316:	4618      	mov	r0, r3
 8005318:	3758      	adds	r7, #88	; 0x58
 800531a:	46bd      	mov	sp, r7
 800531c:	bd80      	pop	{r7, pc}
 800531e:	bf00      	nop
 8005320:	0800543f 	.word	0x0800543f
 8005324:	0800555d 	.word	0x0800555d
 8005328:	08005595 	.word	0x08005595

0800532c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800532c:	b480      	push	{r7}
 800532e:	b089      	sub	sp, #36	; 0x24
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	e853 3f00 	ldrex	r3, [r3]
 8005340:	60bb      	str	r3, [r7, #8]
   return(result);
 8005342:	68bb      	ldr	r3, [r7, #8]
 8005344:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005348:	61fb      	str	r3, [r7, #28]
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	461a      	mov	r2, r3
 8005350:	69fb      	ldr	r3, [r7, #28]
 8005352:	61bb      	str	r3, [r7, #24]
 8005354:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005356:	6979      	ldr	r1, [r7, #20]
 8005358:	69ba      	ldr	r2, [r7, #24]
 800535a:	e841 2300 	strex	r3, r2, [r1]
 800535e:	613b      	str	r3, [r7, #16]
   return(result);
 8005360:	693b      	ldr	r3, [r7, #16]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d1e6      	bne.n	8005334 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2220      	movs	r2, #32
 800536a:	679a      	str	r2, [r3, #120]	; 0x78
}
 800536c:	bf00      	nop
 800536e:	3724      	adds	r7, #36	; 0x24
 8005370:	46bd      	mov	sp, r7
 8005372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005376:	4770      	bx	lr

08005378 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005378:	b480      	push	{r7}
 800537a:	b095      	sub	sp, #84	; 0x54
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005386:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005388:	e853 3f00 	ldrex	r3, [r3]
 800538c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800538e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005390:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005394:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	461a      	mov	r2, r3
 800539c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800539e:	643b      	str	r3, [r7, #64]	; 0x40
 80053a0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053a2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80053a4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80053a6:	e841 2300 	strex	r3, r2, [r1]
 80053aa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80053ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d1e6      	bne.n	8005380 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	3308      	adds	r3, #8
 80053b8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053ba:	6a3b      	ldr	r3, [r7, #32]
 80053bc:	e853 3f00 	ldrex	r3, [r3]
 80053c0:	61fb      	str	r3, [r7, #28]
   return(result);
 80053c2:	69fb      	ldr	r3, [r7, #28]
 80053c4:	f023 0301 	bic.w	r3, r3, #1
 80053c8:	64bb      	str	r3, [r7, #72]	; 0x48
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	3308      	adds	r3, #8
 80053d0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80053d2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80053d4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053d6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80053d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80053da:	e841 2300 	strex	r3, r2, [r1]
 80053de:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80053e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d1e5      	bne.n	80053b2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053ea:	2b01      	cmp	r3, #1
 80053ec:	d118      	bne.n	8005420 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	e853 3f00 	ldrex	r3, [r3]
 80053fa:	60bb      	str	r3, [r7, #8]
   return(result);
 80053fc:	68bb      	ldr	r3, [r7, #8]
 80053fe:	f023 0310 	bic.w	r3, r3, #16
 8005402:	647b      	str	r3, [r7, #68]	; 0x44
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	461a      	mov	r2, r3
 800540a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800540c:	61bb      	str	r3, [r7, #24]
 800540e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005410:	6979      	ldr	r1, [r7, #20]
 8005412:	69ba      	ldr	r2, [r7, #24]
 8005414:	e841 2300 	strex	r3, r2, [r1]
 8005418:	613b      	str	r3, [r7, #16]
   return(result);
 800541a:	693b      	ldr	r3, [r7, #16]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d1e6      	bne.n	80053ee <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2220      	movs	r2, #32
 8005424:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2200      	movs	r2, #0
 800542a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2200      	movs	r2, #0
 8005430:	665a      	str	r2, [r3, #100]	; 0x64
}
 8005432:	bf00      	nop
 8005434:	3754      	adds	r7, #84	; 0x54
 8005436:	46bd      	mov	sp, r7
 8005438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543c:	4770      	bx	lr

0800543e <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800543e:	b580      	push	{r7, lr}
 8005440:	b09c      	sub	sp, #112	; 0x70
 8005442:	af00      	add	r7, sp, #0
 8005444:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800544a:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	699b      	ldr	r3, [r3, #24]
 8005450:	2b20      	cmp	r3, #32
 8005452:	d070      	beq.n	8005536 <UART_DMAReceiveCplt+0xf8>
  {
    huart->RxXferCount = 0U;
 8005454:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005456:	2200      	movs	r2, #0
 8005458:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800545c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005462:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005464:	e853 3f00 	ldrex	r3, [r3]
 8005468:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800546a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800546c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005470:	66bb      	str	r3, [r7, #104]	; 0x68
 8005472:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	461a      	mov	r2, r3
 8005478:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800547a:	65bb      	str	r3, [r7, #88]	; 0x58
 800547c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800547e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005480:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005482:	e841 2300 	strex	r3, r2, [r1]
 8005486:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005488:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800548a:	2b00      	cmp	r3, #0
 800548c:	d1e6      	bne.n	800545c <UART_DMAReceiveCplt+0x1e>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800548e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	3308      	adds	r3, #8
 8005494:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005496:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005498:	e853 3f00 	ldrex	r3, [r3]
 800549c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800549e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054a0:	f023 0301 	bic.w	r3, r3, #1
 80054a4:	667b      	str	r3, [r7, #100]	; 0x64
 80054a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	3308      	adds	r3, #8
 80054ac:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80054ae:	647a      	str	r2, [r7, #68]	; 0x44
 80054b0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054b2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80054b4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80054b6:	e841 2300 	strex	r3, r2, [r1]
 80054ba:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80054bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d1e5      	bne.n	800548e <UART_DMAReceiveCplt+0x50>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80054c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	3308      	adds	r3, #8
 80054c8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054cc:	e853 3f00 	ldrex	r3, [r3]
 80054d0:	623b      	str	r3, [r7, #32]
   return(result);
 80054d2:	6a3b      	ldr	r3, [r7, #32]
 80054d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054d8:	663b      	str	r3, [r7, #96]	; 0x60
 80054da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	3308      	adds	r3, #8
 80054e0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80054e2:	633a      	str	r2, [r7, #48]	; 0x30
 80054e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80054e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054ea:	e841 2300 	strex	r3, r2, [r1]
 80054ee:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80054f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d1e5      	bne.n	80054c2 <UART_DMAReceiveCplt+0x84>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80054f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054f8:	2220      	movs	r2, #32
 80054fa:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005500:	2b01      	cmp	r3, #1
 8005502:	d118      	bne.n	8005536 <UART_DMAReceiveCplt+0xf8>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005504:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800550a:	693b      	ldr	r3, [r7, #16]
 800550c:	e853 3f00 	ldrex	r3, [r3]
 8005510:	60fb      	str	r3, [r7, #12]
   return(result);
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	f023 0310 	bic.w	r3, r3, #16
 8005518:	65fb      	str	r3, [r7, #92]	; 0x5c
 800551a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	461a      	mov	r2, r3
 8005520:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005522:	61fb      	str	r3, [r7, #28]
 8005524:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005526:	69b9      	ldr	r1, [r7, #24]
 8005528:	69fa      	ldr	r2, [r7, #28]
 800552a:	e841 2300 	strex	r3, r2, [r1]
 800552e:	617b      	str	r3, [r7, #20]
   return(result);
 8005530:	697b      	ldr	r3, [r7, #20]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d1e6      	bne.n	8005504 <UART_DMAReceiveCplt+0xc6>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005536:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005538:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800553a:	2b01      	cmp	r3, #1
 800553c:	d107      	bne.n	800554e <UART_DMAReceiveCplt+0x110>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800553e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005540:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005544:	4619      	mov	r1, r3
 8005546:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005548:	f7ff fb5a 	bl	8004c00 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800554c:	e002      	b.n	8005554 <UART_DMAReceiveCplt+0x116>
    HAL_UART_RxCpltCallback(huart);
 800554e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005550:	f7fa ff58 	bl	8000404 <HAL_UART_RxCpltCallback>
}
 8005554:	bf00      	nop
 8005556:	3770      	adds	r7, #112	; 0x70
 8005558:	46bd      	mov	sp, r7
 800555a:	bd80      	pop	{r7, pc}

0800555c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800555c:	b580      	push	{r7, lr}
 800555e:	b084      	sub	sp, #16
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005568:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800556e:	2b01      	cmp	r3, #1
 8005570:	d109      	bne.n	8005586 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005578:	085b      	lsrs	r3, r3, #1
 800557a:	b29b      	uxth	r3, r3
 800557c:	4619      	mov	r1, r3
 800557e:	68f8      	ldr	r0, [r7, #12]
 8005580:	f7ff fb3e 	bl	8004c00 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005584:	e002      	b.n	800558c <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 8005586:	68f8      	ldr	r0, [r7, #12]
 8005588:	f7ff fb26 	bl	8004bd8 <HAL_UART_RxHalfCpltCallback>
}
 800558c:	bf00      	nop
 800558e:	3710      	adds	r7, #16
 8005590:	46bd      	mov	sp, r7
 8005592:	bd80      	pop	{r7, pc}

08005594 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005594:	b580      	push	{r7, lr}
 8005596:	b086      	sub	sp, #24
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055a0:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80055a2:	697b      	ldr	r3, [r7, #20]
 80055a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80055a6:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80055a8:	697b      	ldr	r3, [r7, #20]
 80055aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80055ac:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80055ae:	697b      	ldr	r3, [r7, #20]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	689b      	ldr	r3, [r3, #8]
 80055b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055b8:	2b80      	cmp	r3, #128	; 0x80
 80055ba:	d109      	bne.n	80055d0 <UART_DMAError+0x3c>
 80055bc:	693b      	ldr	r3, [r7, #16]
 80055be:	2b21      	cmp	r3, #33	; 0x21
 80055c0:	d106      	bne.n	80055d0 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80055c2:	697b      	ldr	r3, [r7, #20]
 80055c4:	2200      	movs	r2, #0
 80055c6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 80055ca:	6978      	ldr	r0, [r7, #20]
 80055cc:	f7ff feae 	bl	800532c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80055d0:	697b      	ldr	r3, [r7, #20]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	689b      	ldr	r3, [r3, #8]
 80055d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055da:	2b40      	cmp	r3, #64	; 0x40
 80055dc:	d109      	bne.n	80055f2 <UART_DMAError+0x5e>
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	2b22      	cmp	r3, #34	; 0x22
 80055e2:	d106      	bne.n	80055f2 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80055e4:	697b      	ldr	r3, [r7, #20]
 80055e6:	2200      	movs	r2, #0
 80055e8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 80055ec:	6978      	ldr	r0, [r7, #20]
 80055ee:	f7ff fec3 	bl	8005378 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80055f2:	697b      	ldr	r3, [r7, #20]
 80055f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80055f8:	f043 0210 	orr.w	r2, r3, #16
 80055fc:	697b      	ldr	r3, [r7, #20]
 80055fe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005602:	6978      	ldr	r0, [r7, #20]
 8005604:	f7ff faf2 	bl	8004bec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005608:	bf00      	nop
 800560a:	3718      	adds	r7, #24
 800560c:	46bd      	mov	sp, r7
 800560e:	bd80      	pop	{r7, pc}

08005610 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b084      	sub	sp, #16
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800561c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	2200      	movs	r2, #0
 8005622:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	2200      	movs	r2, #0
 800562a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800562e:	68f8      	ldr	r0, [r7, #12]
 8005630:	f7ff fadc 	bl	8004bec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005634:	bf00      	nop
 8005636:	3710      	adds	r7, #16
 8005638:	46bd      	mov	sp, r7
 800563a:	bd80      	pop	{r7, pc}

0800563c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b088      	sub	sp, #32
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	e853 3f00 	ldrex	r3, [r3]
 8005650:	60bb      	str	r3, [r7, #8]
   return(result);
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005658:	61fb      	str	r3, [r7, #28]
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	461a      	mov	r2, r3
 8005660:	69fb      	ldr	r3, [r7, #28]
 8005662:	61bb      	str	r3, [r7, #24]
 8005664:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005666:	6979      	ldr	r1, [r7, #20]
 8005668:	69ba      	ldr	r2, [r7, #24]
 800566a:	e841 2300 	strex	r3, r2, [r1]
 800566e:	613b      	str	r3, [r7, #16]
   return(result);
 8005670:	693b      	ldr	r3, [r7, #16]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d1e6      	bne.n	8005644 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2220      	movs	r2, #32
 800567a:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2200      	movs	r2, #0
 8005680:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005682:	6878      	ldr	r0, [r7, #4]
 8005684:	f7ff fa9e 	bl	8004bc4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005688:	bf00      	nop
 800568a:	3720      	adds	r7, #32
 800568c:	46bd      	mov	sp, r7
 800568e:	bd80      	pop	{r7, pc}

08005690 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005690:	b480      	push	{r7}
 8005692:	b083      	sub	sp, #12
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005698:	bf00      	nop
 800569a:	370c      	adds	r7, #12
 800569c:	46bd      	mov	sp, r7
 800569e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a2:	4770      	bx	lr

080056a4 <__errno>:
 80056a4:	4b01      	ldr	r3, [pc, #4]	; (80056ac <__errno+0x8>)
 80056a6:	6818      	ldr	r0, [r3, #0]
 80056a8:	4770      	bx	lr
 80056aa:	bf00      	nop
 80056ac:	20000010 	.word	0x20000010

080056b0 <__libc_init_array>:
 80056b0:	b570      	push	{r4, r5, r6, lr}
 80056b2:	4e0d      	ldr	r6, [pc, #52]	; (80056e8 <__libc_init_array+0x38>)
 80056b4:	4c0d      	ldr	r4, [pc, #52]	; (80056ec <__libc_init_array+0x3c>)
 80056b6:	1ba4      	subs	r4, r4, r6
 80056b8:	10a4      	asrs	r4, r4, #2
 80056ba:	2500      	movs	r5, #0
 80056bc:	42a5      	cmp	r5, r4
 80056be:	d109      	bne.n	80056d4 <__libc_init_array+0x24>
 80056c0:	4e0b      	ldr	r6, [pc, #44]	; (80056f0 <__libc_init_array+0x40>)
 80056c2:	4c0c      	ldr	r4, [pc, #48]	; (80056f4 <__libc_init_array+0x44>)
 80056c4:	f001 f8c8 	bl	8006858 <_init>
 80056c8:	1ba4      	subs	r4, r4, r6
 80056ca:	10a4      	asrs	r4, r4, #2
 80056cc:	2500      	movs	r5, #0
 80056ce:	42a5      	cmp	r5, r4
 80056d0:	d105      	bne.n	80056de <__libc_init_array+0x2e>
 80056d2:	bd70      	pop	{r4, r5, r6, pc}
 80056d4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80056d8:	4798      	blx	r3
 80056da:	3501      	adds	r5, #1
 80056dc:	e7ee      	b.n	80056bc <__libc_init_array+0xc>
 80056de:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80056e2:	4798      	blx	r3
 80056e4:	3501      	adds	r5, #1
 80056e6:	e7f2      	b.n	80056ce <__libc_init_array+0x1e>
 80056e8:	08006948 	.word	0x08006948
 80056ec:	08006948 	.word	0x08006948
 80056f0:	08006948 	.word	0x08006948
 80056f4:	0800694c 	.word	0x0800694c

080056f8 <memset>:
 80056f8:	4402      	add	r2, r0
 80056fa:	4603      	mov	r3, r0
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d100      	bne.n	8005702 <memset+0xa>
 8005700:	4770      	bx	lr
 8005702:	f803 1b01 	strb.w	r1, [r3], #1
 8005706:	e7f9      	b.n	80056fc <memset+0x4>

08005708 <iprintf>:
 8005708:	b40f      	push	{r0, r1, r2, r3}
 800570a:	4b0a      	ldr	r3, [pc, #40]	; (8005734 <iprintf+0x2c>)
 800570c:	b513      	push	{r0, r1, r4, lr}
 800570e:	681c      	ldr	r4, [r3, #0]
 8005710:	b124      	cbz	r4, 800571c <iprintf+0x14>
 8005712:	69a3      	ldr	r3, [r4, #24]
 8005714:	b913      	cbnz	r3, 800571c <iprintf+0x14>
 8005716:	4620      	mov	r0, r4
 8005718:	f000 f86e 	bl	80057f8 <__sinit>
 800571c:	ab05      	add	r3, sp, #20
 800571e:	9a04      	ldr	r2, [sp, #16]
 8005720:	68a1      	ldr	r1, [r4, #8]
 8005722:	9301      	str	r3, [sp, #4]
 8005724:	4620      	mov	r0, r4
 8005726:	f000 fac7 	bl	8005cb8 <_vfiprintf_r>
 800572a:	b002      	add	sp, #8
 800572c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005730:	b004      	add	sp, #16
 8005732:	4770      	bx	lr
 8005734:	20000010 	.word	0x20000010

08005738 <siprintf>:
 8005738:	b40e      	push	{r1, r2, r3}
 800573a:	b500      	push	{lr}
 800573c:	b09c      	sub	sp, #112	; 0x70
 800573e:	ab1d      	add	r3, sp, #116	; 0x74
 8005740:	9002      	str	r0, [sp, #8]
 8005742:	9006      	str	r0, [sp, #24]
 8005744:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005748:	4809      	ldr	r0, [pc, #36]	; (8005770 <siprintf+0x38>)
 800574a:	9107      	str	r1, [sp, #28]
 800574c:	9104      	str	r1, [sp, #16]
 800574e:	4909      	ldr	r1, [pc, #36]	; (8005774 <siprintf+0x3c>)
 8005750:	f853 2b04 	ldr.w	r2, [r3], #4
 8005754:	9105      	str	r1, [sp, #20]
 8005756:	6800      	ldr	r0, [r0, #0]
 8005758:	9301      	str	r3, [sp, #4]
 800575a:	a902      	add	r1, sp, #8
 800575c:	f000 f98a 	bl	8005a74 <_svfiprintf_r>
 8005760:	9b02      	ldr	r3, [sp, #8]
 8005762:	2200      	movs	r2, #0
 8005764:	701a      	strb	r2, [r3, #0]
 8005766:	b01c      	add	sp, #112	; 0x70
 8005768:	f85d eb04 	ldr.w	lr, [sp], #4
 800576c:	b003      	add	sp, #12
 800576e:	4770      	bx	lr
 8005770:	20000010 	.word	0x20000010
 8005774:	ffff0208 	.word	0xffff0208

08005778 <std>:
 8005778:	2300      	movs	r3, #0
 800577a:	b510      	push	{r4, lr}
 800577c:	4604      	mov	r4, r0
 800577e:	e9c0 3300 	strd	r3, r3, [r0]
 8005782:	6083      	str	r3, [r0, #8]
 8005784:	8181      	strh	r1, [r0, #12]
 8005786:	6643      	str	r3, [r0, #100]	; 0x64
 8005788:	81c2      	strh	r2, [r0, #14]
 800578a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800578e:	6183      	str	r3, [r0, #24]
 8005790:	4619      	mov	r1, r3
 8005792:	2208      	movs	r2, #8
 8005794:	305c      	adds	r0, #92	; 0x5c
 8005796:	f7ff ffaf 	bl	80056f8 <memset>
 800579a:	4b05      	ldr	r3, [pc, #20]	; (80057b0 <std+0x38>)
 800579c:	6263      	str	r3, [r4, #36]	; 0x24
 800579e:	4b05      	ldr	r3, [pc, #20]	; (80057b4 <std+0x3c>)
 80057a0:	62a3      	str	r3, [r4, #40]	; 0x28
 80057a2:	4b05      	ldr	r3, [pc, #20]	; (80057b8 <std+0x40>)
 80057a4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80057a6:	4b05      	ldr	r3, [pc, #20]	; (80057bc <std+0x44>)
 80057a8:	6224      	str	r4, [r4, #32]
 80057aa:	6323      	str	r3, [r4, #48]	; 0x30
 80057ac:	bd10      	pop	{r4, pc}
 80057ae:	bf00      	nop
 80057b0:	08006215 	.word	0x08006215
 80057b4:	08006237 	.word	0x08006237
 80057b8:	0800626f 	.word	0x0800626f
 80057bc:	08006293 	.word	0x08006293

080057c0 <_cleanup_r>:
 80057c0:	4901      	ldr	r1, [pc, #4]	; (80057c8 <_cleanup_r+0x8>)
 80057c2:	f000 b885 	b.w	80058d0 <_fwalk_reent>
 80057c6:	bf00      	nop
 80057c8:	0800656d 	.word	0x0800656d

080057cc <__sfmoreglue>:
 80057cc:	b570      	push	{r4, r5, r6, lr}
 80057ce:	1e4a      	subs	r2, r1, #1
 80057d0:	2568      	movs	r5, #104	; 0x68
 80057d2:	4355      	muls	r5, r2
 80057d4:	460e      	mov	r6, r1
 80057d6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80057da:	f000 f897 	bl	800590c <_malloc_r>
 80057de:	4604      	mov	r4, r0
 80057e0:	b140      	cbz	r0, 80057f4 <__sfmoreglue+0x28>
 80057e2:	2100      	movs	r1, #0
 80057e4:	e9c0 1600 	strd	r1, r6, [r0]
 80057e8:	300c      	adds	r0, #12
 80057ea:	60a0      	str	r0, [r4, #8]
 80057ec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80057f0:	f7ff ff82 	bl	80056f8 <memset>
 80057f4:	4620      	mov	r0, r4
 80057f6:	bd70      	pop	{r4, r5, r6, pc}

080057f8 <__sinit>:
 80057f8:	6983      	ldr	r3, [r0, #24]
 80057fa:	b510      	push	{r4, lr}
 80057fc:	4604      	mov	r4, r0
 80057fe:	bb33      	cbnz	r3, 800584e <__sinit+0x56>
 8005800:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8005804:	6503      	str	r3, [r0, #80]	; 0x50
 8005806:	4b12      	ldr	r3, [pc, #72]	; (8005850 <__sinit+0x58>)
 8005808:	4a12      	ldr	r2, [pc, #72]	; (8005854 <__sinit+0x5c>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	6282      	str	r2, [r0, #40]	; 0x28
 800580e:	4298      	cmp	r0, r3
 8005810:	bf04      	itt	eq
 8005812:	2301      	moveq	r3, #1
 8005814:	6183      	streq	r3, [r0, #24]
 8005816:	f000 f81f 	bl	8005858 <__sfp>
 800581a:	6060      	str	r0, [r4, #4]
 800581c:	4620      	mov	r0, r4
 800581e:	f000 f81b 	bl	8005858 <__sfp>
 8005822:	60a0      	str	r0, [r4, #8]
 8005824:	4620      	mov	r0, r4
 8005826:	f000 f817 	bl	8005858 <__sfp>
 800582a:	2200      	movs	r2, #0
 800582c:	60e0      	str	r0, [r4, #12]
 800582e:	2104      	movs	r1, #4
 8005830:	6860      	ldr	r0, [r4, #4]
 8005832:	f7ff ffa1 	bl	8005778 <std>
 8005836:	2201      	movs	r2, #1
 8005838:	2109      	movs	r1, #9
 800583a:	68a0      	ldr	r0, [r4, #8]
 800583c:	f7ff ff9c 	bl	8005778 <std>
 8005840:	2202      	movs	r2, #2
 8005842:	2112      	movs	r1, #18
 8005844:	68e0      	ldr	r0, [r4, #12]
 8005846:	f7ff ff97 	bl	8005778 <std>
 800584a:	2301      	movs	r3, #1
 800584c:	61a3      	str	r3, [r4, #24]
 800584e:	bd10      	pop	{r4, pc}
 8005850:	080068b0 	.word	0x080068b0
 8005854:	080057c1 	.word	0x080057c1

08005858 <__sfp>:
 8005858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800585a:	4b1b      	ldr	r3, [pc, #108]	; (80058c8 <__sfp+0x70>)
 800585c:	681e      	ldr	r6, [r3, #0]
 800585e:	69b3      	ldr	r3, [r6, #24]
 8005860:	4607      	mov	r7, r0
 8005862:	b913      	cbnz	r3, 800586a <__sfp+0x12>
 8005864:	4630      	mov	r0, r6
 8005866:	f7ff ffc7 	bl	80057f8 <__sinit>
 800586a:	3648      	adds	r6, #72	; 0x48
 800586c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005870:	3b01      	subs	r3, #1
 8005872:	d503      	bpl.n	800587c <__sfp+0x24>
 8005874:	6833      	ldr	r3, [r6, #0]
 8005876:	b133      	cbz	r3, 8005886 <__sfp+0x2e>
 8005878:	6836      	ldr	r6, [r6, #0]
 800587a:	e7f7      	b.n	800586c <__sfp+0x14>
 800587c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005880:	b16d      	cbz	r5, 800589e <__sfp+0x46>
 8005882:	3468      	adds	r4, #104	; 0x68
 8005884:	e7f4      	b.n	8005870 <__sfp+0x18>
 8005886:	2104      	movs	r1, #4
 8005888:	4638      	mov	r0, r7
 800588a:	f7ff ff9f 	bl	80057cc <__sfmoreglue>
 800588e:	6030      	str	r0, [r6, #0]
 8005890:	2800      	cmp	r0, #0
 8005892:	d1f1      	bne.n	8005878 <__sfp+0x20>
 8005894:	230c      	movs	r3, #12
 8005896:	603b      	str	r3, [r7, #0]
 8005898:	4604      	mov	r4, r0
 800589a:	4620      	mov	r0, r4
 800589c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800589e:	4b0b      	ldr	r3, [pc, #44]	; (80058cc <__sfp+0x74>)
 80058a0:	6665      	str	r5, [r4, #100]	; 0x64
 80058a2:	e9c4 5500 	strd	r5, r5, [r4]
 80058a6:	60a5      	str	r5, [r4, #8]
 80058a8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80058ac:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80058b0:	2208      	movs	r2, #8
 80058b2:	4629      	mov	r1, r5
 80058b4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80058b8:	f7ff ff1e 	bl	80056f8 <memset>
 80058bc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80058c0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80058c4:	e7e9      	b.n	800589a <__sfp+0x42>
 80058c6:	bf00      	nop
 80058c8:	080068b0 	.word	0x080068b0
 80058cc:	ffff0001 	.word	0xffff0001

080058d0 <_fwalk_reent>:
 80058d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80058d4:	4680      	mov	r8, r0
 80058d6:	4689      	mov	r9, r1
 80058d8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80058dc:	2600      	movs	r6, #0
 80058de:	b914      	cbnz	r4, 80058e6 <_fwalk_reent+0x16>
 80058e0:	4630      	mov	r0, r6
 80058e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80058e6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80058ea:	3f01      	subs	r7, #1
 80058ec:	d501      	bpl.n	80058f2 <_fwalk_reent+0x22>
 80058ee:	6824      	ldr	r4, [r4, #0]
 80058f0:	e7f5      	b.n	80058de <_fwalk_reent+0xe>
 80058f2:	89ab      	ldrh	r3, [r5, #12]
 80058f4:	2b01      	cmp	r3, #1
 80058f6:	d907      	bls.n	8005908 <_fwalk_reent+0x38>
 80058f8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80058fc:	3301      	adds	r3, #1
 80058fe:	d003      	beq.n	8005908 <_fwalk_reent+0x38>
 8005900:	4629      	mov	r1, r5
 8005902:	4640      	mov	r0, r8
 8005904:	47c8      	blx	r9
 8005906:	4306      	orrs	r6, r0
 8005908:	3568      	adds	r5, #104	; 0x68
 800590a:	e7ee      	b.n	80058ea <_fwalk_reent+0x1a>

0800590c <_malloc_r>:
 800590c:	b570      	push	{r4, r5, r6, lr}
 800590e:	1ccd      	adds	r5, r1, #3
 8005910:	f025 0503 	bic.w	r5, r5, #3
 8005914:	3508      	adds	r5, #8
 8005916:	2d0c      	cmp	r5, #12
 8005918:	bf38      	it	cc
 800591a:	250c      	movcc	r5, #12
 800591c:	2d00      	cmp	r5, #0
 800591e:	4606      	mov	r6, r0
 8005920:	db01      	blt.n	8005926 <_malloc_r+0x1a>
 8005922:	42a9      	cmp	r1, r5
 8005924:	d903      	bls.n	800592e <_malloc_r+0x22>
 8005926:	230c      	movs	r3, #12
 8005928:	6033      	str	r3, [r6, #0]
 800592a:	2000      	movs	r0, #0
 800592c:	bd70      	pop	{r4, r5, r6, pc}
 800592e:	f000 fee1 	bl	80066f4 <__malloc_lock>
 8005932:	4a21      	ldr	r2, [pc, #132]	; (80059b8 <_malloc_r+0xac>)
 8005934:	6814      	ldr	r4, [r2, #0]
 8005936:	4621      	mov	r1, r4
 8005938:	b991      	cbnz	r1, 8005960 <_malloc_r+0x54>
 800593a:	4c20      	ldr	r4, [pc, #128]	; (80059bc <_malloc_r+0xb0>)
 800593c:	6823      	ldr	r3, [r4, #0]
 800593e:	b91b      	cbnz	r3, 8005948 <_malloc_r+0x3c>
 8005940:	4630      	mov	r0, r6
 8005942:	f000 fc57 	bl	80061f4 <_sbrk_r>
 8005946:	6020      	str	r0, [r4, #0]
 8005948:	4629      	mov	r1, r5
 800594a:	4630      	mov	r0, r6
 800594c:	f000 fc52 	bl	80061f4 <_sbrk_r>
 8005950:	1c43      	adds	r3, r0, #1
 8005952:	d124      	bne.n	800599e <_malloc_r+0x92>
 8005954:	230c      	movs	r3, #12
 8005956:	6033      	str	r3, [r6, #0]
 8005958:	4630      	mov	r0, r6
 800595a:	f000 fecc 	bl	80066f6 <__malloc_unlock>
 800595e:	e7e4      	b.n	800592a <_malloc_r+0x1e>
 8005960:	680b      	ldr	r3, [r1, #0]
 8005962:	1b5b      	subs	r3, r3, r5
 8005964:	d418      	bmi.n	8005998 <_malloc_r+0x8c>
 8005966:	2b0b      	cmp	r3, #11
 8005968:	d90f      	bls.n	800598a <_malloc_r+0x7e>
 800596a:	600b      	str	r3, [r1, #0]
 800596c:	50cd      	str	r5, [r1, r3]
 800596e:	18cc      	adds	r4, r1, r3
 8005970:	4630      	mov	r0, r6
 8005972:	f000 fec0 	bl	80066f6 <__malloc_unlock>
 8005976:	f104 000b 	add.w	r0, r4, #11
 800597a:	1d23      	adds	r3, r4, #4
 800597c:	f020 0007 	bic.w	r0, r0, #7
 8005980:	1ac3      	subs	r3, r0, r3
 8005982:	d0d3      	beq.n	800592c <_malloc_r+0x20>
 8005984:	425a      	negs	r2, r3
 8005986:	50e2      	str	r2, [r4, r3]
 8005988:	e7d0      	b.n	800592c <_malloc_r+0x20>
 800598a:	428c      	cmp	r4, r1
 800598c:	684b      	ldr	r3, [r1, #4]
 800598e:	bf16      	itet	ne
 8005990:	6063      	strne	r3, [r4, #4]
 8005992:	6013      	streq	r3, [r2, #0]
 8005994:	460c      	movne	r4, r1
 8005996:	e7eb      	b.n	8005970 <_malloc_r+0x64>
 8005998:	460c      	mov	r4, r1
 800599a:	6849      	ldr	r1, [r1, #4]
 800599c:	e7cc      	b.n	8005938 <_malloc_r+0x2c>
 800599e:	1cc4      	adds	r4, r0, #3
 80059a0:	f024 0403 	bic.w	r4, r4, #3
 80059a4:	42a0      	cmp	r0, r4
 80059a6:	d005      	beq.n	80059b4 <_malloc_r+0xa8>
 80059a8:	1a21      	subs	r1, r4, r0
 80059aa:	4630      	mov	r0, r6
 80059ac:	f000 fc22 	bl	80061f4 <_sbrk_r>
 80059b0:	3001      	adds	r0, #1
 80059b2:	d0cf      	beq.n	8005954 <_malloc_r+0x48>
 80059b4:	6025      	str	r5, [r4, #0]
 80059b6:	e7db      	b.n	8005970 <_malloc_r+0x64>
 80059b8:	200000a8 	.word	0x200000a8
 80059bc:	200000ac 	.word	0x200000ac

080059c0 <__ssputs_r>:
 80059c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80059c4:	688e      	ldr	r6, [r1, #8]
 80059c6:	429e      	cmp	r6, r3
 80059c8:	4682      	mov	sl, r0
 80059ca:	460c      	mov	r4, r1
 80059cc:	4690      	mov	r8, r2
 80059ce:	4699      	mov	r9, r3
 80059d0:	d837      	bhi.n	8005a42 <__ssputs_r+0x82>
 80059d2:	898a      	ldrh	r2, [r1, #12]
 80059d4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80059d8:	d031      	beq.n	8005a3e <__ssputs_r+0x7e>
 80059da:	6825      	ldr	r5, [r4, #0]
 80059dc:	6909      	ldr	r1, [r1, #16]
 80059de:	1a6f      	subs	r7, r5, r1
 80059e0:	6965      	ldr	r5, [r4, #20]
 80059e2:	2302      	movs	r3, #2
 80059e4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80059e8:	fb95 f5f3 	sdiv	r5, r5, r3
 80059ec:	f109 0301 	add.w	r3, r9, #1
 80059f0:	443b      	add	r3, r7
 80059f2:	429d      	cmp	r5, r3
 80059f4:	bf38      	it	cc
 80059f6:	461d      	movcc	r5, r3
 80059f8:	0553      	lsls	r3, r2, #21
 80059fa:	d530      	bpl.n	8005a5e <__ssputs_r+0x9e>
 80059fc:	4629      	mov	r1, r5
 80059fe:	f7ff ff85 	bl	800590c <_malloc_r>
 8005a02:	4606      	mov	r6, r0
 8005a04:	b950      	cbnz	r0, 8005a1c <__ssputs_r+0x5c>
 8005a06:	230c      	movs	r3, #12
 8005a08:	f8ca 3000 	str.w	r3, [sl]
 8005a0c:	89a3      	ldrh	r3, [r4, #12]
 8005a0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005a12:	81a3      	strh	r3, [r4, #12]
 8005a14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005a18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a1c:	463a      	mov	r2, r7
 8005a1e:	6921      	ldr	r1, [r4, #16]
 8005a20:	f000 fe44 	bl	80066ac <memcpy>
 8005a24:	89a3      	ldrh	r3, [r4, #12]
 8005a26:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005a2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a2e:	81a3      	strh	r3, [r4, #12]
 8005a30:	6126      	str	r6, [r4, #16]
 8005a32:	6165      	str	r5, [r4, #20]
 8005a34:	443e      	add	r6, r7
 8005a36:	1bed      	subs	r5, r5, r7
 8005a38:	6026      	str	r6, [r4, #0]
 8005a3a:	60a5      	str	r5, [r4, #8]
 8005a3c:	464e      	mov	r6, r9
 8005a3e:	454e      	cmp	r6, r9
 8005a40:	d900      	bls.n	8005a44 <__ssputs_r+0x84>
 8005a42:	464e      	mov	r6, r9
 8005a44:	4632      	mov	r2, r6
 8005a46:	4641      	mov	r1, r8
 8005a48:	6820      	ldr	r0, [r4, #0]
 8005a4a:	f000 fe3a 	bl	80066c2 <memmove>
 8005a4e:	68a3      	ldr	r3, [r4, #8]
 8005a50:	1b9b      	subs	r3, r3, r6
 8005a52:	60a3      	str	r3, [r4, #8]
 8005a54:	6823      	ldr	r3, [r4, #0]
 8005a56:	441e      	add	r6, r3
 8005a58:	6026      	str	r6, [r4, #0]
 8005a5a:	2000      	movs	r0, #0
 8005a5c:	e7dc      	b.n	8005a18 <__ssputs_r+0x58>
 8005a5e:	462a      	mov	r2, r5
 8005a60:	f000 fe98 	bl	8006794 <_realloc_r>
 8005a64:	4606      	mov	r6, r0
 8005a66:	2800      	cmp	r0, #0
 8005a68:	d1e2      	bne.n	8005a30 <__ssputs_r+0x70>
 8005a6a:	6921      	ldr	r1, [r4, #16]
 8005a6c:	4650      	mov	r0, sl
 8005a6e:	f000 fe43 	bl	80066f8 <_free_r>
 8005a72:	e7c8      	b.n	8005a06 <__ssputs_r+0x46>

08005a74 <_svfiprintf_r>:
 8005a74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a78:	461d      	mov	r5, r3
 8005a7a:	898b      	ldrh	r3, [r1, #12]
 8005a7c:	061f      	lsls	r7, r3, #24
 8005a7e:	b09d      	sub	sp, #116	; 0x74
 8005a80:	4680      	mov	r8, r0
 8005a82:	460c      	mov	r4, r1
 8005a84:	4616      	mov	r6, r2
 8005a86:	d50f      	bpl.n	8005aa8 <_svfiprintf_r+0x34>
 8005a88:	690b      	ldr	r3, [r1, #16]
 8005a8a:	b96b      	cbnz	r3, 8005aa8 <_svfiprintf_r+0x34>
 8005a8c:	2140      	movs	r1, #64	; 0x40
 8005a8e:	f7ff ff3d 	bl	800590c <_malloc_r>
 8005a92:	6020      	str	r0, [r4, #0]
 8005a94:	6120      	str	r0, [r4, #16]
 8005a96:	b928      	cbnz	r0, 8005aa4 <_svfiprintf_r+0x30>
 8005a98:	230c      	movs	r3, #12
 8005a9a:	f8c8 3000 	str.w	r3, [r8]
 8005a9e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005aa2:	e0c8      	b.n	8005c36 <_svfiprintf_r+0x1c2>
 8005aa4:	2340      	movs	r3, #64	; 0x40
 8005aa6:	6163      	str	r3, [r4, #20]
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	9309      	str	r3, [sp, #36]	; 0x24
 8005aac:	2320      	movs	r3, #32
 8005aae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005ab2:	2330      	movs	r3, #48	; 0x30
 8005ab4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005ab8:	9503      	str	r5, [sp, #12]
 8005aba:	f04f 0b01 	mov.w	fp, #1
 8005abe:	4637      	mov	r7, r6
 8005ac0:	463d      	mov	r5, r7
 8005ac2:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005ac6:	b10b      	cbz	r3, 8005acc <_svfiprintf_r+0x58>
 8005ac8:	2b25      	cmp	r3, #37	; 0x25
 8005aca:	d13e      	bne.n	8005b4a <_svfiprintf_r+0xd6>
 8005acc:	ebb7 0a06 	subs.w	sl, r7, r6
 8005ad0:	d00b      	beq.n	8005aea <_svfiprintf_r+0x76>
 8005ad2:	4653      	mov	r3, sl
 8005ad4:	4632      	mov	r2, r6
 8005ad6:	4621      	mov	r1, r4
 8005ad8:	4640      	mov	r0, r8
 8005ada:	f7ff ff71 	bl	80059c0 <__ssputs_r>
 8005ade:	3001      	adds	r0, #1
 8005ae0:	f000 80a4 	beq.w	8005c2c <_svfiprintf_r+0x1b8>
 8005ae4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ae6:	4453      	add	r3, sl
 8005ae8:	9309      	str	r3, [sp, #36]	; 0x24
 8005aea:	783b      	ldrb	r3, [r7, #0]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	f000 809d 	beq.w	8005c2c <_svfiprintf_r+0x1b8>
 8005af2:	2300      	movs	r3, #0
 8005af4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005af8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005afc:	9304      	str	r3, [sp, #16]
 8005afe:	9307      	str	r3, [sp, #28]
 8005b00:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005b04:	931a      	str	r3, [sp, #104]	; 0x68
 8005b06:	462f      	mov	r7, r5
 8005b08:	2205      	movs	r2, #5
 8005b0a:	f817 1b01 	ldrb.w	r1, [r7], #1
 8005b0e:	4850      	ldr	r0, [pc, #320]	; (8005c50 <_svfiprintf_r+0x1dc>)
 8005b10:	f7fa fb5e 	bl	80001d0 <memchr>
 8005b14:	9b04      	ldr	r3, [sp, #16]
 8005b16:	b9d0      	cbnz	r0, 8005b4e <_svfiprintf_r+0xda>
 8005b18:	06d9      	lsls	r1, r3, #27
 8005b1a:	bf44      	itt	mi
 8005b1c:	2220      	movmi	r2, #32
 8005b1e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005b22:	071a      	lsls	r2, r3, #28
 8005b24:	bf44      	itt	mi
 8005b26:	222b      	movmi	r2, #43	; 0x2b
 8005b28:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005b2c:	782a      	ldrb	r2, [r5, #0]
 8005b2e:	2a2a      	cmp	r2, #42	; 0x2a
 8005b30:	d015      	beq.n	8005b5e <_svfiprintf_r+0xea>
 8005b32:	9a07      	ldr	r2, [sp, #28]
 8005b34:	462f      	mov	r7, r5
 8005b36:	2000      	movs	r0, #0
 8005b38:	250a      	movs	r5, #10
 8005b3a:	4639      	mov	r1, r7
 8005b3c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005b40:	3b30      	subs	r3, #48	; 0x30
 8005b42:	2b09      	cmp	r3, #9
 8005b44:	d94d      	bls.n	8005be2 <_svfiprintf_r+0x16e>
 8005b46:	b1b8      	cbz	r0, 8005b78 <_svfiprintf_r+0x104>
 8005b48:	e00f      	b.n	8005b6a <_svfiprintf_r+0xf6>
 8005b4a:	462f      	mov	r7, r5
 8005b4c:	e7b8      	b.n	8005ac0 <_svfiprintf_r+0x4c>
 8005b4e:	4a40      	ldr	r2, [pc, #256]	; (8005c50 <_svfiprintf_r+0x1dc>)
 8005b50:	1a80      	subs	r0, r0, r2
 8005b52:	fa0b f000 	lsl.w	r0, fp, r0
 8005b56:	4318      	orrs	r0, r3
 8005b58:	9004      	str	r0, [sp, #16]
 8005b5a:	463d      	mov	r5, r7
 8005b5c:	e7d3      	b.n	8005b06 <_svfiprintf_r+0x92>
 8005b5e:	9a03      	ldr	r2, [sp, #12]
 8005b60:	1d11      	adds	r1, r2, #4
 8005b62:	6812      	ldr	r2, [r2, #0]
 8005b64:	9103      	str	r1, [sp, #12]
 8005b66:	2a00      	cmp	r2, #0
 8005b68:	db01      	blt.n	8005b6e <_svfiprintf_r+0xfa>
 8005b6a:	9207      	str	r2, [sp, #28]
 8005b6c:	e004      	b.n	8005b78 <_svfiprintf_r+0x104>
 8005b6e:	4252      	negs	r2, r2
 8005b70:	f043 0302 	orr.w	r3, r3, #2
 8005b74:	9207      	str	r2, [sp, #28]
 8005b76:	9304      	str	r3, [sp, #16]
 8005b78:	783b      	ldrb	r3, [r7, #0]
 8005b7a:	2b2e      	cmp	r3, #46	; 0x2e
 8005b7c:	d10c      	bne.n	8005b98 <_svfiprintf_r+0x124>
 8005b7e:	787b      	ldrb	r3, [r7, #1]
 8005b80:	2b2a      	cmp	r3, #42	; 0x2a
 8005b82:	d133      	bne.n	8005bec <_svfiprintf_r+0x178>
 8005b84:	9b03      	ldr	r3, [sp, #12]
 8005b86:	1d1a      	adds	r2, r3, #4
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	9203      	str	r2, [sp, #12]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	bfb8      	it	lt
 8005b90:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005b94:	3702      	adds	r7, #2
 8005b96:	9305      	str	r3, [sp, #20]
 8005b98:	4d2e      	ldr	r5, [pc, #184]	; (8005c54 <_svfiprintf_r+0x1e0>)
 8005b9a:	7839      	ldrb	r1, [r7, #0]
 8005b9c:	2203      	movs	r2, #3
 8005b9e:	4628      	mov	r0, r5
 8005ba0:	f7fa fb16 	bl	80001d0 <memchr>
 8005ba4:	b138      	cbz	r0, 8005bb6 <_svfiprintf_r+0x142>
 8005ba6:	2340      	movs	r3, #64	; 0x40
 8005ba8:	1b40      	subs	r0, r0, r5
 8005baa:	fa03 f000 	lsl.w	r0, r3, r0
 8005bae:	9b04      	ldr	r3, [sp, #16]
 8005bb0:	4303      	orrs	r3, r0
 8005bb2:	3701      	adds	r7, #1
 8005bb4:	9304      	str	r3, [sp, #16]
 8005bb6:	7839      	ldrb	r1, [r7, #0]
 8005bb8:	4827      	ldr	r0, [pc, #156]	; (8005c58 <_svfiprintf_r+0x1e4>)
 8005bba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005bbe:	2206      	movs	r2, #6
 8005bc0:	1c7e      	adds	r6, r7, #1
 8005bc2:	f7fa fb05 	bl	80001d0 <memchr>
 8005bc6:	2800      	cmp	r0, #0
 8005bc8:	d038      	beq.n	8005c3c <_svfiprintf_r+0x1c8>
 8005bca:	4b24      	ldr	r3, [pc, #144]	; (8005c5c <_svfiprintf_r+0x1e8>)
 8005bcc:	bb13      	cbnz	r3, 8005c14 <_svfiprintf_r+0x1a0>
 8005bce:	9b03      	ldr	r3, [sp, #12]
 8005bd0:	3307      	adds	r3, #7
 8005bd2:	f023 0307 	bic.w	r3, r3, #7
 8005bd6:	3308      	adds	r3, #8
 8005bd8:	9303      	str	r3, [sp, #12]
 8005bda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005bdc:	444b      	add	r3, r9
 8005bde:	9309      	str	r3, [sp, #36]	; 0x24
 8005be0:	e76d      	b.n	8005abe <_svfiprintf_r+0x4a>
 8005be2:	fb05 3202 	mla	r2, r5, r2, r3
 8005be6:	2001      	movs	r0, #1
 8005be8:	460f      	mov	r7, r1
 8005bea:	e7a6      	b.n	8005b3a <_svfiprintf_r+0xc6>
 8005bec:	2300      	movs	r3, #0
 8005bee:	3701      	adds	r7, #1
 8005bf0:	9305      	str	r3, [sp, #20]
 8005bf2:	4619      	mov	r1, r3
 8005bf4:	250a      	movs	r5, #10
 8005bf6:	4638      	mov	r0, r7
 8005bf8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005bfc:	3a30      	subs	r2, #48	; 0x30
 8005bfe:	2a09      	cmp	r2, #9
 8005c00:	d903      	bls.n	8005c0a <_svfiprintf_r+0x196>
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d0c8      	beq.n	8005b98 <_svfiprintf_r+0x124>
 8005c06:	9105      	str	r1, [sp, #20]
 8005c08:	e7c6      	b.n	8005b98 <_svfiprintf_r+0x124>
 8005c0a:	fb05 2101 	mla	r1, r5, r1, r2
 8005c0e:	2301      	movs	r3, #1
 8005c10:	4607      	mov	r7, r0
 8005c12:	e7f0      	b.n	8005bf6 <_svfiprintf_r+0x182>
 8005c14:	ab03      	add	r3, sp, #12
 8005c16:	9300      	str	r3, [sp, #0]
 8005c18:	4622      	mov	r2, r4
 8005c1a:	4b11      	ldr	r3, [pc, #68]	; (8005c60 <_svfiprintf_r+0x1ec>)
 8005c1c:	a904      	add	r1, sp, #16
 8005c1e:	4640      	mov	r0, r8
 8005c20:	f3af 8000 	nop.w
 8005c24:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8005c28:	4681      	mov	r9, r0
 8005c2a:	d1d6      	bne.n	8005bda <_svfiprintf_r+0x166>
 8005c2c:	89a3      	ldrh	r3, [r4, #12]
 8005c2e:	065b      	lsls	r3, r3, #25
 8005c30:	f53f af35 	bmi.w	8005a9e <_svfiprintf_r+0x2a>
 8005c34:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005c36:	b01d      	add	sp, #116	; 0x74
 8005c38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c3c:	ab03      	add	r3, sp, #12
 8005c3e:	9300      	str	r3, [sp, #0]
 8005c40:	4622      	mov	r2, r4
 8005c42:	4b07      	ldr	r3, [pc, #28]	; (8005c60 <_svfiprintf_r+0x1ec>)
 8005c44:	a904      	add	r1, sp, #16
 8005c46:	4640      	mov	r0, r8
 8005c48:	f000 f9c2 	bl	8005fd0 <_printf_i>
 8005c4c:	e7ea      	b.n	8005c24 <_svfiprintf_r+0x1b0>
 8005c4e:	bf00      	nop
 8005c50:	08006914 	.word	0x08006914
 8005c54:	0800691a 	.word	0x0800691a
 8005c58:	0800691e 	.word	0x0800691e
 8005c5c:	00000000 	.word	0x00000000
 8005c60:	080059c1 	.word	0x080059c1

08005c64 <__sfputc_r>:
 8005c64:	6893      	ldr	r3, [r2, #8]
 8005c66:	3b01      	subs	r3, #1
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	b410      	push	{r4}
 8005c6c:	6093      	str	r3, [r2, #8]
 8005c6e:	da08      	bge.n	8005c82 <__sfputc_r+0x1e>
 8005c70:	6994      	ldr	r4, [r2, #24]
 8005c72:	42a3      	cmp	r3, r4
 8005c74:	db01      	blt.n	8005c7a <__sfputc_r+0x16>
 8005c76:	290a      	cmp	r1, #10
 8005c78:	d103      	bne.n	8005c82 <__sfputc_r+0x1e>
 8005c7a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005c7e:	f000 bb0d 	b.w	800629c <__swbuf_r>
 8005c82:	6813      	ldr	r3, [r2, #0]
 8005c84:	1c58      	adds	r0, r3, #1
 8005c86:	6010      	str	r0, [r2, #0]
 8005c88:	7019      	strb	r1, [r3, #0]
 8005c8a:	4608      	mov	r0, r1
 8005c8c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005c90:	4770      	bx	lr

08005c92 <__sfputs_r>:
 8005c92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c94:	4606      	mov	r6, r0
 8005c96:	460f      	mov	r7, r1
 8005c98:	4614      	mov	r4, r2
 8005c9a:	18d5      	adds	r5, r2, r3
 8005c9c:	42ac      	cmp	r4, r5
 8005c9e:	d101      	bne.n	8005ca4 <__sfputs_r+0x12>
 8005ca0:	2000      	movs	r0, #0
 8005ca2:	e007      	b.n	8005cb4 <__sfputs_r+0x22>
 8005ca4:	463a      	mov	r2, r7
 8005ca6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005caa:	4630      	mov	r0, r6
 8005cac:	f7ff ffda 	bl	8005c64 <__sfputc_r>
 8005cb0:	1c43      	adds	r3, r0, #1
 8005cb2:	d1f3      	bne.n	8005c9c <__sfputs_r+0xa>
 8005cb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005cb8 <_vfiprintf_r>:
 8005cb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cbc:	460c      	mov	r4, r1
 8005cbe:	b09d      	sub	sp, #116	; 0x74
 8005cc0:	4617      	mov	r7, r2
 8005cc2:	461d      	mov	r5, r3
 8005cc4:	4606      	mov	r6, r0
 8005cc6:	b118      	cbz	r0, 8005cd0 <_vfiprintf_r+0x18>
 8005cc8:	6983      	ldr	r3, [r0, #24]
 8005cca:	b90b      	cbnz	r3, 8005cd0 <_vfiprintf_r+0x18>
 8005ccc:	f7ff fd94 	bl	80057f8 <__sinit>
 8005cd0:	4b7c      	ldr	r3, [pc, #496]	; (8005ec4 <_vfiprintf_r+0x20c>)
 8005cd2:	429c      	cmp	r4, r3
 8005cd4:	d158      	bne.n	8005d88 <_vfiprintf_r+0xd0>
 8005cd6:	6874      	ldr	r4, [r6, #4]
 8005cd8:	89a3      	ldrh	r3, [r4, #12]
 8005cda:	0718      	lsls	r0, r3, #28
 8005cdc:	d55e      	bpl.n	8005d9c <_vfiprintf_r+0xe4>
 8005cde:	6923      	ldr	r3, [r4, #16]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d05b      	beq.n	8005d9c <_vfiprintf_r+0xe4>
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	9309      	str	r3, [sp, #36]	; 0x24
 8005ce8:	2320      	movs	r3, #32
 8005cea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005cee:	2330      	movs	r3, #48	; 0x30
 8005cf0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005cf4:	9503      	str	r5, [sp, #12]
 8005cf6:	f04f 0b01 	mov.w	fp, #1
 8005cfa:	46b8      	mov	r8, r7
 8005cfc:	4645      	mov	r5, r8
 8005cfe:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005d02:	b10b      	cbz	r3, 8005d08 <_vfiprintf_r+0x50>
 8005d04:	2b25      	cmp	r3, #37	; 0x25
 8005d06:	d154      	bne.n	8005db2 <_vfiprintf_r+0xfa>
 8005d08:	ebb8 0a07 	subs.w	sl, r8, r7
 8005d0c:	d00b      	beq.n	8005d26 <_vfiprintf_r+0x6e>
 8005d0e:	4653      	mov	r3, sl
 8005d10:	463a      	mov	r2, r7
 8005d12:	4621      	mov	r1, r4
 8005d14:	4630      	mov	r0, r6
 8005d16:	f7ff ffbc 	bl	8005c92 <__sfputs_r>
 8005d1a:	3001      	adds	r0, #1
 8005d1c:	f000 80c2 	beq.w	8005ea4 <_vfiprintf_r+0x1ec>
 8005d20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d22:	4453      	add	r3, sl
 8005d24:	9309      	str	r3, [sp, #36]	; 0x24
 8005d26:	f898 3000 	ldrb.w	r3, [r8]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	f000 80ba 	beq.w	8005ea4 <_vfiprintf_r+0x1ec>
 8005d30:	2300      	movs	r3, #0
 8005d32:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005d36:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005d3a:	9304      	str	r3, [sp, #16]
 8005d3c:	9307      	str	r3, [sp, #28]
 8005d3e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005d42:	931a      	str	r3, [sp, #104]	; 0x68
 8005d44:	46a8      	mov	r8, r5
 8005d46:	2205      	movs	r2, #5
 8005d48:	f818 1b01 	ldrb.w	r1, [r8], #1
 8005d4c:	485e      	ldr	r0, [pc, #376]	; (8005ec8 <_vfiprintf_r+0x210>)
 8005d4e:	f7fa fa3f 	bl	80001d0 <memchr>
 8005d52:	9b04      	ldr	r3, [sp, #16]
 8005d54:	bb78      	cbnz	r0, 8005db6 <_vfiprintf_r+0xfe>
 8005d56:	06d9      	lsls	r1, r3, #27
 8005d58:	bf44      	itt	mi
 8005d5a:	2220      	movmi	r2, #32
 8005d5c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005d60:	071a      	lsls	r2, r3, #28
 8005d62:	bf44      	itt	mi
 8005d64:	222b      	movmi	r2, #43	; 0x2b
 8005d66:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005d6a:	782a      	ldrb	r2, [r5, #0]
 8005d6c:	2a2a      	cmp	r2, #42	; 0x2a
 8005d6e:	d02a      	beq.n	8005dc6 <_vfiprintf_r+0x10e>
 8005d70:	9a07      	ldr	r2, [sp, #28]
 8005d72:	46a8      	mov	r8, r5
 8005d74:	2000      	movs	r0, #0
 8005d76:	250a      	movs	r5, #10
 8005d78:	4641      	mov	r1, r8
 8005d7a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005d7e:	3b30      	subs	r3, #48	; 0x30
 8005d80:	2b09      	cmp	r3, #9
 8005d82:	d969      	bls.n	8005e58 <_vfiprintf_r+0x1a0>
 8005d84:	b360      	cbz	r0, 8005de0 <_vfiprintf_r+0x128>
 8005d86:	e024      	b.n	8005dd2 <_vfiprintf_r+0x11a>
 8005d88:	4b50      	ldr	r3, [pc, #320]	; (8005ecc <_vfiprintf_r+0x214>)
 8005d8a:	429c      	cmp	r4, r3
 8005d8c:	d101      	bne.n	8005d92 <_vfiprintf_r+0xda>
 8005d8e:	68b4      	ldr	r4, [r6, #8]
 8005d90:	e7a2      	b.n	8005cd8 <_vfiprintf_r+0x20>
 8005d92:	4b4f      	ldr	r3, [pc, #316]	; (8005ed0 <_vfiprintf_r+0x218>)
 8005d94:	429c      	cmp	r4, r3
 8005d96:	bf08      	it	eq
 8005d98:	68f4      	ldreq	r4, [r6, #12]
 8005d9a:	e79d      	b.n	8005cd8 <_vfiprintf_r+0x20>
 8005d9c:	4621      	mov	r1, r4
 8005d9e:	4630      	mov	r0, r6
 8005da0:	f000 fae0 	bl	8006364 <__swsetup_r>
 8005da4:	2800      	cmp	r0, #0
 8005da6:	d09d      	beq.n	8005ce4 <_vfiprintf_r+0x2c>
 8005da8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005dac:	b01d      	add	sp, #116	; 0x74
 8005dae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005db2:	46a8      	mov	r8, r5
 8005db4:	e7a2      	b.n	8005cfc <_vfiprintf_r+0x44>
 8005db6:	4a44      	ldr	r2, [pc, #272]	; (8005ec8 <_vfiprintf_r+0x210>)
 8005db8:	1a80      	subs	r0, r0, r2
 8005dba:	fa0b f000 	lsl.w	r0, fp, r0
 8005dbe:	4318      	orrs	r0, r3
 8005dc0:	9004      	str	r0, [sp, #16]
 8005dc2:	4645      	mov	r5, r8
 8005dc4:	e7be      	b.n	8005d44 <_vfiprintf_r+0x8c>
 8005dc6:	9a03      	ldr	r2, [sp, #12]
 8005dc8:	1d11      	adds	r1, r2, #4
 8005dca:	6812      	ldr	r2, [r2, #0]
 8005dcc:	9103      	str	r1, [sp, #12]
 8005dce:	2a00      	cmp	r2, #0
 8005dd0:	db01      	blt.n	8005dd6 <_vfiprintf_r+0x11e>
 8005dd2:	9207      	str	r2, [sp, #28]
 8005dd4:	e004      	b.n	8005de0 <_vfiprintf_r+0x128>
 8005dd6:	4252      	negs	r2, r2
 8005dd8:	f043 0302 	orr.w	r3, r3, #2
 8005ddc:	9207      	str	r2, [sp, #28]
 8005dde:	9304      	str	r3, [sp, #16]
 8005de0:	f898 3000 	ldrb.w	r3, [r8]
 8005de4:	2b2e      	cmp	r3, #46	; 0x2e
 8005de6:	d10e      	bne.n	8005e06 <_vfiprintf_r+0x14e>
 8005de8:	f898 3001 	ldrb.w	r3, [r8, #1]
 8005dec:	2b2a      	cmp	r3, #42	; 0x2a
 8005dee:	d138      	bne.n	8005e62 <_vfiprintf_r+0x1aa>
 8005df0:	9b03      	ldr	r3, [sp, #12]
 8005df2:	1d1a      	adds	r2, r3, #4
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	9203      	str	r2, [sp, #12]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	bfb8      	it	lt
 8005dfc:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005e00:	f108 0802 	add.w	r8, r8, #2
 8005e04:	9305      	str	r3, [sp, #20]
 8005e06:	4d33      	ldr	r5, [pc, #204]	; (8005ed4 <_vfiprintf_r+0x21c>)
 8005e08:	f898 1000 	ldrb.w	r1, [r8]
 8005e0c:	2203      	movs	r2, #3
 8005e0e:	4628      	mov	r0, r5
 8005e10:	f7fa f9de 	bl	80001d0 <memchr>
 8005e14:	b140      	cbz	r0, 8005e28 <_vfiprintf_r+0x170>
 8005e16:	2340      	movs	r3, #64	; 0x40
 8005e18:	1b40      	subs	r0, r0, r5
 8005e1a:	fa03 f000 	lsl.w	r0, r3, r0
 8005e1e:	9b04      	ldr	r3, [sp, #16]
 8005e20:	4303      	orrs	r3, r0
 8005e22:	f108 0801 	add.w	r8, r8, #1
 8005e26:	9304      	str	r3, [sp, #16]
 8005e28:	f898 1000 	ldrb.w	r1, [r8]
 8005e2c:	482a      	ldr	r0, [pc, #168]	; (8005ed8 <_vfiprintf_r+0x220>)
 8005e2e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005e32:	2206      	movs	r2, #6
 8005e34:	f108 0701 	add.w	r7, r8, #1
 8005e38:	f7fa f9ca 	bl	80001d0 <memchr>
 8005e3c:	2800      	cmp	r0, #0
 8005e3e:	d037      	beq.n	8005eb0 <_vfiprintf_r+0x1f8>
 8005e40:	4b26      	ldr	r3, [pc, #152]	; (8005edc <_vfiprintf_r+0x224>)
 8005e42:	bb1b      	cbnz	r3, 8005e8c <_vfiprintf_r+0x1d4>
 8005e44:	9b03      	ldr	r3, [sp, #12]
 8005e46:	3307      	adds	r3, #7
 8005e48:	f023 0307 	bic.w	r3, r3, #7
 8005e4c:	3308      	adds	r3, #8
 8005e4e:	9303      	str	r3, [sp, #12]
 8005e50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e52:	444b      	add	r3, r9
 8005e54:	9309      	str	r3, [sp, #36]	; 0x24
 8005e56:	e750      	b.n	8005cfa <_vfiprintf_r+0x42>
 8005e58:	fb05 3202 	mla	r2, r5, r2, r3
 8005e5c:	2001      	movs	r0, #1
 8005e5e:	4688      	mov	r8, r1
 8005e60:	e78a      	b.n	8005d78 <_vfiprintf_r+0xc0>
 8005e62:	2300      	movs	r3, #0
 8005e64:	f108 0801 	add.w	r8, r8, #1
 8005e68:	9305      	str	r3, [sp, #20]
 8005e6a:	4619      	mov	r1, r3
 8005e6c:	250a      	movs	r5, #10
 8005e6e:	4640      	mov	r0, r8
 8005e70:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005e74:	3a30      	subs	r2, #48	; 0x30
 8005e76:	2a09      	cmp	r2, #9
 8005e78:	d903      	bls.n	8005e82 <_vfiprintf_r+0x1ca>
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d0c3      	beq.n	8005e06 <_vfiprintf_r+0x14e>
 8005e7e:	9105      	str	r1, [sp, #20]
 8005e80:	e7c1      	b.n	8005e06 <_vfiprintf_r+0x14e>
 8005e82:	fb05 2101 	mla	r1, r5, r1, r2
 8005e86:	2301      	movs	r3, #1
 8005e88:	4680      	mov	r8, r0
 8005e8a:	e7f0      	b.n	8005e6e <_vfiprintf_r+0x1b6>
 8005e8c:	ab03      	add	r3, sp, #12
 8005e8e:	9300      	str	r3, [sp, #0]
 8005e90:	4622      	mov	r2, r4
 8005e92:	4b13      	ldr	r3, [pc, #76]	; (8005ee0 <_vfiprintf_r+0x228>)
 8005e94:	a904      	add	r1, sp, #16
 8005e96:	4630      	mov	r0, r6
 8005e98:	f3af 8000 	nop.w
 8005e9c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8005ea0:	4681      	mov	r9, r0
 8005ea2:	d1d5      	bne.n	8005e50 <_vfiprintf_r+0x198>
 8005ea4:	89a3      	ldrh	r3, [r4, #12]
 8005ea6:	065b      	lsls	r3, r3, #25
 8005ea8:	f53f af7e 	bmi.w	8005da8 <_vfiprintf_r+0xf0>
 8005eac:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005eae:	e77d      	b.n	8005dac <_vfiprintf_r+0xf4>
 8005eb0:	ab03      	add	r3, sp, #12
 8005eb2:	9300      	str	r3, [sp, #0]
 8005eb4:	4622      	mov	r2, r4
 8005eb6:	4b0a      	ldr	r3, [pc, #40]	; (8005ee0 <_vfiprintf_r+0x228>)
 8005eb8:	a904      	add	r1, sp, #16
 8005eba:	4630      	mov	r0, r6
 8005ebc:	f000 f888 	bl	8005fd0 <_printf_i>
 8005ec0:	e7ec      	b.n	8005e9c <_vfiprintf_r+0x1e4>
 8005ec2:	bf00      	nop
 8005ec4:	080068d4 	.word	0x080068d4
 8005ec8:	08006914 	.word	0x08006914
 8005ecc:	080068f4 	.word	0x080068f4
 8005ed0:	080068b4 	.word	0x080068b4
 8005ed4:	0800691a 	.word	0x0800691a
 8005ed8:	0800691e 	.word	0x0800691e
 8005edc:	00000000 	.word	0x00000000
 8005ee0:	08005c93 	.word	0x08005c93

08005ee4 <_printf_common>:
 8005ee4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ee8:	4691      	mov	r9, r2
 8005eea:	461f      	mov	r7, r3
 8005eec:	688a      	ldr	r2, [r1, #8]
 8005eee:	690b      	ldr	r3, [r1, #16]
 8005ef0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	bfb8      	it	lt
 8005ef8:	4613      	movlt	r3, r2
 8005efa:	f8c9 3000 	str.w	r3, [r9]
 8005efe:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005f02:	4606      	mov	r6, r0
 8005f04:	460c      	mov	r4, r1
 8005f06:	b112      	cbz	r2, 8005f0e <_printf_common+0x2a>
 8005f08:	3301      	adds	r3, #1
 8005f0a:	f8c9 3000 	str.w	r3, [r9]
 8005f0e:	6823      	ldr	r3, [r4, #0]
 8005f10:	0699      	lsls	r1, r3, #26
 8005f12:	bf42      	ittt	mi
 8005f14:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005f18:	3302      	addmi	r3, #2
 8005f1a:	f8c9 3000 	strmi.w	r3, [r9]
 8005f1e:	6825      	ldr	r5, [r4, #0]
 8005f20:	f015 0506 	ands.w	r5, r5, #6
 8005f24:	d107      	bne.n	8005f36 <_printf_common+0x52>
 8005f26:	f104 0a19 	add.w	sl, r4, #25
 8005f2a:	68e3      	ldr	r3, [r4, #12]
 8005f2c:	f8d9 2000 	ldr.w	r2, [r9]
 8005f30:	1a9b      	subs	r3, r3, r2
 8005f32:	42ab      	cmp	r3, r5
 8005f34:	dc28      	bgt.n	8005f88 <_printf_common+0xa4>
 8005f36:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005f3a:	6822      	ldr	r2, [r4, #0]
 8005f3c:	3300      	adds	r3, #0
 8005f3e:	bf18      	it	ne
 8005f40:	2301      	movne	r3, #1
 8005f42:	0692      	lsls	r2, r2, #26
 8005f44:	d42d      	bmi.n	8005fa2 <_printf_common+0xbe>
 8005f46:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005f4a:	4639      	mov	r1, r7
 8005f4c:	4630      	mov	r0, r6
 8005f4e:	47c0      	blx	r8
 8005f50:	3001      	adds	r0, #1
 8005f52:	d020      	beq.n	8005f96 <_printf_common+0xb2>
 8005f54:	6823      	ldr	r3, [r4, #0]
 8005f56:	68e5      	ldr	r5, [r4, #12]
 8005f58:	f8d9 2000 	ldr.w	r2, [r9]
 8005f5c:	f003 0306 	and.w	r3, r3, #6
 8005f60:	2b04      	cmp	r3, #4
 8005f62:	bf08      	it	eq
 8005f64:	1aad      	subeq	r5, r5, r2
 8005f66:	68a3      	ldr	r3, [r4, #8]
 8005f68:	6922      	ldr	r2, [r4, #16]
 8005f6a:	bf0c      	ite	eq
 8005f6c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005f70:	2500      	movne	r5, #0
 8005f72:	4293      	cmp	r3, r2
 8005f74:	bfc4      	itt	gt
 8005f76:	1a9b      	subgt	r3, r3, r2
 8005f78:	18ed      	addgt	r5, r5, r3
 8005f7a:	f04f 0900 	mov.w	r9, #0
 8005f7e:	341a      	adds	r4, #26
 8005f80:	454d      	cmp	r5, r9
 8005f82:	d11a      	bne.n	8005fba <_printf_common+0xd6>
 8005f84:	2000      	movs	r0, #0
 8005f86:	e008      	b.n	8005f9a <_printf_common+0xb6>
 8005f88:	2301      	movs	r3, #1
 8005f8a:	4652      	mov	r2, sl
 8005f8c:	4639      	mov	r1, r7
 8005f8e:	4630      	mov	r0, r6
 8005f90:	47c0      	blx	r8
 8005f92:	3001      	adds	r0, #1
 8005f94:	d103      	bne.n	8005f9e <_printf_common+0xba>
 8005f96:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005f9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f9e:	3501      	adds	r5, #1
 8005fa0:	e7c3      	b.n	8005f2a <_printf_common+0x46>
 8005fa2:	18e1      	adds	r1, r4, r3
 8005fa4:	1c5a      	adds	r2, r3, #1
 8005fa6:	2030      	movs	r0, #48	; 0x30
 8005fa8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005fac:	4422      	add	r2, r4
 8005fae:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005fb2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005fb6:	3302      	adds	r3, #2
 8005fb8:	e7c5      	b.n	8005f46 <_printf_common+0x62>
 8005fba:	2301      	movs	r3, #1
 8005fbc:	4622      	mov	r2, r4
 8005fbe:	4639      	mov	r1, r7
 8005fc0:	4630      	mov	r0, r6
 8005fc2:	47c0      	blx	r8
 8005fc4:	3001      	adds	r0, #1
 8005fc6:	d0e6      	beq.n	8005f96 <_printf_common+0xb2>
 8005fc8:	f109 0901 	add.w	r9, r9, #1
 8005fcc:	e7d8      	b.n	8005f80 <_printf_common+0x9c>
	...

08005fd0 <_printf_i>:
 8005fd0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005fd4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005fd8:	460c      	mov	r4, r1
 8005fda:	7e09      	ldrb	r1, [r1, #24]
 8005fdc:	b085      	sub	sp, #20
 8005fde:	296e      	cmp	r1, #110	; 0x6e
 8005fe0:	4617      	mov	r7, r2
 8005fe2:	4606      	mov	r6, r0
 8005fe4:	4698      	mov	r8, r3
 8005fe6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005fe8:	f000 80b3 	beq.w	8006152 <_printf_i+0x182>
 8005fec:	d822      	bhi.n	8006034 <_printf_i+0x64>
 8005fee:	2963      	cmp	r1, #99	; 0x63
 8005ff0:	d036      	beq.n	8006060 <_printf_i+0x90>
 8005ff2:	d80a      	bhi.n	800600a <_printf_i+0x3a>
 8005ff4:	2900      	cmp	r1, #0
 8005ff6:	f000 80b9 	beq.w	800616c <_printf_i+0x19c>
 8005ffa:	2958      	cmp	r1, #88	; 0x58
 8005ffc:	f000 8083 	beq.w	8006106 <_printf_i+0x136>
 8006000:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006004:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006008:	e032      	b.n	8006070 <_printf_i+0xa0>
 800600a:	2964      	cmp	r1, #100	; 0x64
 800600c:	d001      	beq.n	8006012 <_printf_i+0x42>
 800600e:	2969      	cmp	r1, #105	; 0x69
 8006010:	d1f6      	bne.n	8006000 <_printf_i+0x30>
 8006012:	6820      	ldr	r0, [r4, #0]
 8006014:	6813      	ldr	r3, [r2, #0]
 8006016:	0605      	lsls	r5, r0, #24
 8006018:	f103 0104 	add.w	r1, r3, #4
 800601c:	d52a      	bpl.n	8006074 <_printf_i+0xa4>
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	6011      	str	r1, [r2, #0]
 8006022:	2b00      	cmp	r3, #0
 8006024:	da03      	bge.n	800602e <_printf_i+0x5e>
 8006026:	222d      	movs	r2, #45	; 0x2d
 8006028:	425b      	negs	r3, r3
 800602a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800602e:	486f      	ldr	r0, [pc, #444]	; (80061ec <_printf_i+0x21c>)
 8006030:	220a      	movs	r2, #10
 8006032:	e039      	b.n	80060a8 <_printf_i+0xd8>
 8006034:	2973      	cmp	r1, #115	; 0x73
 8006036:	f000 809d 	beq.w	8006174 <_printf_i+0x1a4>
 800603a:	d808      	bhi.n	800604e <_printf_i+0x7e>
 800603c:	296f      	cmp	r1, #111	; 0x6f
 800603e:	d020      	beq.n	8006082 <_printf_i+0xb2>
 8006040:	2970      	cmp	r1, #112	; 0x70
 8006042:	d1dd      	bne.n	8006000 <_printf_i+0x30>
 8006044:	6823      	ldr	r3, [r4, #0]
 8006046:	f043 0320 	orr.w	r3, r3, #32
 800604a:	6023      	str	r3, [r4, #0]
 800604c:	e003      	b.n	8006056 <_printf_i+0x86>
 800604e:	2975      	cmp	r1, #117	; 0x75
 8006050:	d017      	beq.n	8006082 <_printf_i+0xb2>
 8006052:	2978      	cmp	r1, #120	; 0x78
 8006054:	d1d4      	bne.n	8006000 <_printf_i+0x30>
 8006056:	2378      	movs	r3, #120	; 0x78
 8006058:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800605c:	4864      	ldr	r0, [pc, #400]	; (80061f0 <_printf_i+0x220>)
 800605e:	e055      	b.n	800610c <_printf_i+0x13c>
 8006060:	6813      	ldr	r3, [r2, #0]
 8006062:	1d19      	adds	r1, r3, #4
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	6011      	str	r1, [r2, #0]
 8006068:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800606c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006070:	2301      	movs	r3, #1
 8006072:	e08c      	b.n	800618e <_printf_i+0x1be>
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	6011      	str	r1, [r2, #0]
 8006078:	f010 0f40 	tst.w	r0, #64	; 0x40
 800607c:	bf18      	it	ne
 800607e:	b21b      	sxthne	r3, r3
 8006080:	e7cf      	b.n	8006022 <_printf_i+0x52>
 8006082:	6813      	ldr	r3, [r2, #0]
 8006084:	6825      	ldr	r5, [r4, #0]
 8006086:	1d18      	adds	r0, r3, #4
 8006088:	6010      	str	r0, [r2, #0]
 800608a:	0628      	lsls	r0, r5, #24
 800608c:	d501      	bpl.n	8006092 <_printf_i+0xc2>
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	e002      	b.n	8006098 <_printf_i+0xc8>
 8006092:	0668      	lsls	r0, r5, #25
 8006094:	d5fb      	bpl.n	800608e <_printf_i+0xbe>
 8006096:	881b      	ldrh	r3, [r3, #0]
 8006098:	4854      	ldr	r0, [pc, #336]	; (80061ec <_printf_i+0x21c>)
 800609a:	296f      	cmp	r1, #111	; 0x6f
 800609c:	bf14      	ite	ne
 800609e:	220a      	movne	r2, #10
 80060a0:	2208      	moveq	r2, #8
 80060a2:	2100      	movs	r1, #0
 80060a4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80060a8:	6865      	ldr	r5, [r4, #4]
 80060aa:	60a5      	str	r5, [r4, #8]
 80060ac:	2d00      	cmp	r5, #0
 80060ae:	f2c0 8095 	blt.w	80061dc <_printf_i+0x20c>
 80060b2:	6821      	ldr	r1, [r4, #0]
 80060b4:	f021 0104 	bic.w	r1, r1, #4
 80060b8:	6021      	str	r1, [r4, #0]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d13d      	bne.n	800613a <_printf_i+0x16a>
 80060be:	2d00      	cmp	r5, #0
 80060c0:	f040 808e 	bne.w	80061e0 <_printf_i+0x210>
 80060c4:	4665      	mov	r5, ip
 80060c6:	2a08      	cmp	r2, #8
 80060c8:	d10b      	bne.n	80060e2 <_printf_i+0x112>
 80060ca:	6823      	ldr	r3, [r4, #0]
 80060cc:	07db      	lsls	r3, r3, #31
 80060ce:	d508      	bpl.n	80060e2 <_printf_i+0x112>
 80060d0:	6923      	ldr	r3, [r4, #16]
 80060d2:	6862      	ldr	r2, [r4, #4]
 80060d4:	429a      	cmp	r2, r3
 80060d6:	bfde      	ittt	le
 80060d8:	2330      	movle	r3, #48	; 0x30
 80060da:	f805 3c01 	strble.w	r3, [r5, #-1]
 80060de:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80060e2:	ebac 0305 	sub.w	r3, ip, r5
 80060e6:	6123      	str	r3, [r4, #16]
 80060e8:	f8cd 8000 	str.w	r8, [sp]
 80060ec:	463b      	mov	r3, r7
 80060ee:	aa03      	add	r2, sp, #12
 80060f0:	4621      	mov	r1, r4
 80060f2:	4630      	mov	r0, r6
 80060f4:	f7ff fef6 	bl	8005ee4 <_printf_common>
 80060f8:	3001      	adds	r0, #1
 80060fa:	d14d      	bne.n	8006198 <_printf_i+0x1c8>
 80060fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006100:	b005      	add	sp, #20
 8006102:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006106:	4839      	ldr	r0, [pc, #228]	; (80061ec <_printf_i+0x21c>)
 8006108:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800610c:	6813      	ldr	r3, [r2, #0]
 800610e:	6821      	ldr	r1, [r4, #0]
 8006110:	1d1d      	adds	r5, r3, #4
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	6015      	str	r5, [r2, #0]
 8006116:	060a      	lsls	r2, r1, #24
 8006118:	d50b      	bpl.n	8006132 <_printf_i+0x162>
 800611a:	07ca      	lsls	r2, r1, #31
 800611c:	bf44      	itt	mi
 800611e:	f041 0120 	orrmi.w	r1, r1, #32
 8006122:	6021      	strmi	r1, [r4, #0]
 8006124:	b91b      	cbnz	r3, 800612e <_printf_i+0x15e>
 8006126:	6822      	ldr	r2, [r4, #0]
 8006128:	f022 0220 	bic.w	r2, r2, #32
 800612c:	6022      	str	r2, [r4, #0]
 800612e:	2210      	movs	r2, #16
 8006130:	e7b7      	b.n	80060a2 <_printf_i+0xd2>
 8006132:	064d      	lsls	r5, r1, #25
 8006134:	bf48      	it	mi
 8006136:	b29b      	uxthmi	r3, r3
 8006138:	e7ef      	b.n	800611a <_printf_i+0x14a>
 800613a:	4665      	mov	r5, ip
 800613c:	fbb3 f1f2 	udiv	r1, r3, r2
 8006140:	fb02 3311 	mls	r3, r2, r1, r3
 8006144:	5cc3      	ldrb	r3, [r0, r3]
 8006146:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800614a:	460b      	mov	r3, r1
 800614c:	2900      	cmp	r1, #0
 800614e:	d1f5      	bne.n	800613c <_printf_i+0x16c>
 8006150:	e7b9      	b.n	80060c6 <_printf_i+0xf6>
 8006152:	6813      	ldr	r3, [r2, #0]
 8006154:	6825      	ldr	r5, [r4, #0]
 8006156:	6961      	ldr	r1, [r4, #20]
 8006158:	1d18      	adds	r0, r3, #4
 800615a:	6010      	str	r0, [r2, #0]
 800615c:	0628      	lsls	r0, r5, #24
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	d501      	bpl.n	8006166 <_printf_i+0x196>
 8006162:	6019      	str	r1, [r3, #0]
 8006164:	e002      	b.n	800616c <_printf_i+0x19c>
 8006166:	066a      	lsls	r2, r5, #25
 8006168:	d5fb      	bpl.n	8006162 <_printf_i+0x192>
 800616a:	8019      	strh	r1, [r3, #0]
 800616c:	2300      	movs	r3, #0
 800616e:	6123      	str	r3, [r4, #16]
 8006170:	4665      	mov	r5, ip
 8006172:	e7b9      	b.n	80060e8 <_printf_i+0x118>
 8006174:	6813      	ldr	r3, [r2, #0]
 8006176:	1d19      	adds	r1, r3, #4
 8006178:	6011      	str	r1, [r2, #0]
 800617a:	681d      	ldr	r5, [r3, #0]
 800617c:	6862      	ldr	r2, [r4, #4]
 800617e:	2100      	movs	r1, #0
 8006180:	4628      	mov	r0, r5
 8006182:	f7fa f825 	bl	80001d0 <memchr>
 8006186:	b108      	cbz	r0, 800618c <_printf_i+0x1bc>
 8006188:	1b40      	subs	r0, r0, r5
 800618a:	6060      	str	r0, [r4, #4]
 800618c:	6863      	ldr	r3, [r4, #4]
 800618e:	6123      	str	r3, [r4, #16]
 8006190:	2300      	movs	r3, #0
 8006192:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006196:	e7a7      	b.n	80060e8 <_printf_i+0x118>
 8006198:	6923      	ldr	r3, [r4, #16]
 800619a:	462a      	mov	r2, r5
 800619c:	4639      	mov	r1, r7
 800619e:	4630      	mov	r0, r6
 80061a0:	47c0      	blx	r8
 80061a2:	3001      	adds	r0, #1
 80061a4:	d0aa      	beq.n	80060fc <_printf_i+0x12c>
 80061a6:	6823      	ldr	r3, [r4, #0]
 80061a8:	079b      	lsls	r3, r3, #30
 80061aa:	d413      	bmi.n	80061d4 <_printf_i+0x204>
 80061ac:	68e0      	ldr	r0, [r4, #12]
 80061ae:	9b03      	ldr	r3, [sp, #12]
 80061b0:	4298      	cmp	r0, r3
 80061b2:	bfb8      	it	lt
 80061b4:	4618      	movlt	r0, r3
 80061b6:	e7a3      	b.n	8006100 <_printf_i+0x130>
 80061b8:	2301      	movs	r3, #1
 80061ba:	464a      	mov	r2, r9
 80061bc:	4639      	mov	r1, r7
 80061be:	4630      	mov	r0, r6
 80061c0:	47c0      	blx	r8
 80061c2:	3001      	adds	r0, #1
 80061c4:	d09a      	beq.n	80060fc <_printf_i+0x12c>
 80061c6:	3501      	adds	r5, #1
 80061c8:	68e3      	ldr	r3, [r4, #12]
 80061ca:	9a03      	ldr	r2, [sp, #12]
 80061cc:	1a9b      	subs	r3, r3, r2
 80061ce:	42ab      	cmp	r3, r5
 80061d0:	dcf2      	bgt.n	80061b8 <_printf_i+0x1e8>
 80061d2:	e7eb      	b.n	80061ac <_printf_i+0x1dc>
 80061d4:	2500      	movs	r5, #0
 80061d6:	f104 0919 	add.w	r9, r4, #25
 80061da:	e7f5      	b.n	80061c8 <_printf_i+0x1f8>
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d1ac      	bne.n	800613a <_printf_i+0x16a>
 80061e0:	7803      	ldrb	r3, [r0, #0]
 80061e2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80061e6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80061ea:	e76c      	b.n	80060c6 <_printf_i+0xf6>
 80061ec:	08006925 	.word	0x08006925
 80061f0:	08006936 	.word	0x08006936

080061f4 <_sbrk_r>:
 80061f4:	b538      	push	{r3, r4, r5, lr}
 80061f6:	4c06      	ldr	r4, [pc, #24]	; (8006210 <_sbrk_r+0x1c>)
 80061f8:	2300      	movs	r3, #0
 80061fa:	4605      	mov	r5, r0
 80061fc:	4608      	mov	r0, r1
 80061fe:	6023      	str	r3, [r4, #0]
 8006200:	f7fa fee0 	bl	8000fc4 <_sbrk>
 8006204:	1c43      	adds	r3, r0, #1
 8006206:	d102      	bne.n	800620e <_sbrk_r+0x1a>
 8006208:	6823      	ldr	r3, [r4, #0]
 800620a:	b103      	cbz	r3, 800620e <_sbrk_r+0x1a>
 800620c:	602b      	str	r3, [r5, #0]
 800620e:	bd38      	pop	{r3, r4, r5, pc}
 8006210:	2000029c 	.word	0x2000029c

08006214 <__sread>:
 8006214:	b510      	push	{r4, lr}
 8006216:	460c      	mov	r4, r1
 8006218:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800621c:	f000 fae0 	bl	80067e0 <_read_r>
 8006220:	2800      	cmp	r0, #0
 8006222:	bfab      	itete	ge
 8006224:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006226:	89a3      	ldrhlt	r3, [r4, #12]
 8006228:	181b      	addge	r3, r3, r0
 800622a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800622e:	bfac      	ite	ge
 8006230:	6563      	strge	r3, [r4, #84]	; 0x54
 8006232:	81a3      	strhlt	r3, [r4, #12]
 8006234:	bd10      	pop	{r4, pc}

08006236 <__swrite>:
 8006236:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800623a:	461f      	mov	r7, r3
 800623c:	898b      	ldrh	r3, [r1, #12]
 800623e:	05db      	lsls	r3, r3, #23
 8006240:	4605      	mov	r5, r0
 8006242:	460c      	mov	r4, r1
 8006244:	4616      	mov	r6, r2
 8006246:	d505      	bpl.n	8006254 <__swrite+0x1e>
 8006248:	2302      	movs	r3, #2
 800624a:	2200      	movs	r2, #0
 800624c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006250:	f000 f9b6 	bl	80065c0 <_lseek_r>
 8006254:	89a3      	ldrh	r3, [r4, #12]
 8006256:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800625a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800625e:	81a3      	strh	r3, [r4, #12]
 8006260:	4632      	mov	r2, r6
 8006262:	463b      	mov	r3, r7
 8006264:	4628      	mov	r0, r5
 8006266:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800626a:	f000 b869 	b.w	8006340 <_write_r>

0800626e <__sseek>:
 800626e:	b510      	push	{r4, lr}
 8006270:	460c      	mov	r4, r1
 8006272:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006276:	f000 f9a3 	bl	80065c0 <_lseek_r>
 800627a:	1c43      	adds	r3, r0, #1
 800627c:	89a3      	ldrh	r3, [r4, #12]
 800627e:	bf15      	itete	ne
 8006280:	6560      	strne	r0, [r4, #84]	; 0x54
 8006282:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006286:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800628a:	81a3      	strheq	r3, [r4, #12]
 800628c:	bf18      	it	ne
 800628e:	81a3      	strhne	r3, [r4, #12]
 8006290:	bd10      	pop	{r4, pc}

08006292 <__sclose>:
 8006292:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006296:	f000 b8d3 	b.w	8006440 <_close_r>
	...

0800629c <__swbuf_r>:
 800629c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800629e:	460e      	mov	r6, r1
 80062a0:	4614      	mov	r4, r2
 80062a2:	4605      	mov	r5, r0
 80062a4:	b118      	cbz	r0, 80062ae <__swbuf_r+0x12>
 80062a6:	6983      	ldr	r3, [r0, #24]
 80062a8:	b90b      	cbnz	r3, 80062ae <__swbuf_r+0x12>
 80062aa:	f7ff faa5 	bl	80057f8 <__sinit>
 80062ae:	4b21      	ldr	r3, [pc, #132]	; (8006334 <__swbuf_r+0x98>)
 80062b0:	429c      	cmp	r4, r3
 80062b2:	d12a      	bne.n	800630a <__swbuf_r+0x6e>
 80062b4:	686c      	ldr	r4, [r5, #4]
 80062b6:	69a3      	ldr	r3, [r4, #24]
 80062b8:	60a3      	str	r3, [r4, #8]
 80062ba:	89a3      	ldrh	r3, [r4, #12]
 80062bc:	071a      	lsls	r2, r3, #28
 80062be:	d52e      	bpl.n	800631e <__swbuf_r+0x82>
 80062c0:	6923      	ldr	r3, [r4, #16]
 80062c2:	b363      	cbz	r3, 800631e <__swbuf_r+0x82>
 80062c4:	6923      	ldr	r3, [r4, #16]
 80062c6:	6820      	ldr	r0, [r4, #0]
 80062c8:	1ac0      	subs	r0, r0, r3
 80062ca:	6963      	ldr	r3, [r4, #20]
 80062cc:	b2f6      	uxtb	r6, r6
 80062ce:	4283      	cmp	r3, r0
 80062d0:	4637      	mov	r7, r6
 80062d2:	dc04      	bgt.n	80062de <__swbuf_r+0x42>
 80062d4:	4621      	mov	r1, r4
 80062d6:	4628      	mov	r0, r5
 80062d8:	f000 f948 	bl	800656c <_fflush_r>
 80062dc:	bb28      	cbnz	r0, 800632a <__swbuf_r+0x8e>
 80062de:	68a3      	ldr	r3, [r4, #8]
 80062e0:	3b01      	subs	r3, #1
 80062e2:	60a3      	str	r3, [r4, #8]
 80062e4:	6823      	ldr	r3, [r4, #0]
 80062e6:	1c5a      	adds	r2, r3, #1
 80062e8:	6022      	str	r2, [r4, #0]
 80062ea:	701e      	strb	r6, [r3, #0]
 80062ec:	6963      	ldr	r3, [r4, #20]
 80062ee:	3001      	adds	r0, #1
 80062f0:	4283      	cmp	r3, r0
 80062f2:	d004      	beq.n	80062fe <__swbuf_r+0x62>
 80062f4:	89a3      	ldrh	r3, [r4, #12]
 80062f6:	07db      	lsls	r3, r3, #31
 80062f8:	d519      	bpl.n	800632e <__swbuf_r+0x92>
 80062fa:	2e0a      	cmp	r6, #10
 80062fc:	d117      	bne.n	800632e <__swbuf_r+0x92>
 80062fe:	4621      	mov	r1, r4
 8006300:	4628      	mov	r0, r5
 8006302:	f000 f933 	bl	800656c <_fflush_r>
 8006306:	b190      	cbz	r0, 800632e <__swbuf_r+0x92>
 8006308:	e00f      	b.n	800632a <__swbuf_r+0x8e>
 800630a:	4b0b      	ldr	r3, [pc, #44]	; (8006338 <__swbuf_r+0x9c>)
 800630c:	429c      	cmp	r4, r3
 800630e:	d101      	bne.n	8006314 <__swbuf_r+0x78>
 8006310:	68ac      	ldr	r4, [r5, #8]
 8006312:	e7d0      	b.n	80062b6 <__swbuf_r+0x1a>
 8006314:	4b09      	ldr	r3, [pc, #36]	; (800633c <__swbuf_r+0xa0>)
 8006316:	429c      	cmp	r4, r3
 8006318:	bf08      	it	eq
 800631a:	68ec      	ldreq	r4, [r5, #12]
 800631c:	e7cb      	b.n	80062b6 <__swbuf_r+0x1a>
 800631e:	4621      	mov	r1, r4
 8006320:	4628      	mov	r0, r5
 8006322:	f000 f81f 	bl	8006364 <__swsetup_r>
 8006326:	2800      	cmp	r0, #0
 8006328:	d0cc      	beq.n	80062c4 <__swbuf_r+0x28>
 800632a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800632e:	4638      	mov	r0, r7
 8006330:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006332:	bf00      	nop
 8006334:	080068d4 	.word	0x080068d4
 8006338:	080068f4 	.word	0x080068f4
 800633c:	080068b4 	.word	0x080068b4

08006340 <_write_r>:
 8006340:	b538      	push	{r3, r4, r5, lr}
 8006342:	4c07      	ldr	r4, [pc, #28]	; (8006360 <_write_r+0x20>)
 8006344:	4605      	mov	r5, r0
 8006346:	4608      	mov	r0, r1
 8006348:	4611      	mov	r1, r2
 800634a:	2200      	movs	r2, #0
 800634c:	6022      	str	r2, [r4, #0]
 800634e:	461a      	mov	r2, r3
 8006350:	f7fa f82a 	bl	80003a8 <_write>
 8006354:	1c43      	adds	r3, r0, #1
 8006356:	d102      	bne.n	800635e <_write_r+0x1e>
 8006358:	6823      	ldr	r3, [r4, #0]
 800635a:	b103      	cbz	r3, 800635e <_write_r+0x1e>
 800635c:	602b      	str	r3, [r5, #0]
 800635e:	bd38      	pop	{r3, r4, r5, pc}
 8006360:	2000029c 	.word	0x2000029c

08006364 <__swsetup_r>:
 8006364:	4b32      	ldr	r3, [pc, #200]	; (8006430 <__swsetup_r+0xcc>)
 8006366:	b570      	push	{r4, r5, r6, lr}
 8006368:	681d      	ldr	r5, [r3, #0]
 800636a:	4606      	mov	r6, r0
 800636c:	460c      	mov	r4, r1
 800636e:	b125      	cbz	r5, 800637a <__swsetup_r+0x16>
 8006370:	69ab      	ldr	r3, [r5, #24]
 8006372:	b913      	cbnz	r3, 800637a <__swsetup_r+0x16>
 8006374:	4628      	mov	r0, r5
 8006376:	f7ff fa3f 	bl	80057f8 <__sinit>
 800637a:	4b2e      	ldr	r3, [pc, #184]	; (8006434 <__swsetup_r+0xd0>)
 800637c:	429c      	cmp	r4, r3
 800637e:	d10f      	bne.n	80063a0 <__swsetup_r+0x3c>
 8006380:	686c      	ldr	r4, [r5, #4]
 8006382:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006386:	b29a      	uxth	r2, r3
 8006388:	0715      	lsls	r5, r2, #28
 800638a:	d42c      	bmi.n	80063e6 <__swsetup_r+0x82>
 800638c:	06d0      	lsls	r0, r2, #27
 800638e:	d411      	bmi.n	80063b4 <__swsetup_r+0x50>
 8006390:	2209      	movs	r2, #9
 8006392:	6032      	str	r2, [r6, #0]
 8006394:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006398:	81a3      	strh	r3, [r4, #12]
 800639a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800639e:	e03e      	b.n	800641e <__swsetup_r+0xba>
 80063a0:	4b25      	ldr	r3, [pc, #148]	; (8006438 <__swsetup_r+0xd4>)
 80063a2:	429c      	cmp	r4, r3
 80063a4:	d101      	bne.n	80063aa <__swsetup_r+0x46>
 80063a6:	68ac      	ldr	r4, [r5, #8]
 80063a8:	e7eb      	b.n	8006382 <__swsetup_r+0x1e>
 80063aa:	4b24      	ldr	r3, [pc, #144]	; (800643c <__swsetup_r+0xd8>)
 80063ac:	429c      	cmp	r4, r3
 80063ae:	bf08      	it	eq
 80063b0:	68ec      	ldreq	r4, [r5, #12]
 80063b2:	e7e6      	b.n	8006382 <__swsetup_r+0x1e>
 80063b4:	0751      	lsls	r1, r2, #29
 80063b6:	d512      	bpl.n	80063de <__swsetup_r+0x7a>
 80063b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80063ba:	b141      	cbz	r1, 80063ce <__swsetup_r+0x6a>
 80063bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80063c0:	4299      	cmp	r1, r3
 80063c2:	d002      	beq.n	80063ca <__swsetup_r+0x66>
 80063c4:	4630      	mov	r0, r6
 80063c6:	f000 f997 	bl	80066f8 <_free_r>
 80063ca:	2300      	movs	r3, #0
 80063cc:	6363      	str	r3, [r4, #52]	; 0x34
 80063ce:	89a3      	ldrh	r3, [r4, #12]
 80063d0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80063d4:	81a3      	strh	r3, [r4, #12]
 80063d6:	2300      	movs	r3, #0
 80063d8:	6063      	str	r3, [r4, #4]
 80063da:	6923      	ldr	r3, [r4, #16]
 80063dc:	6023      	str	r3, [r4, #0]
 80063de:	89a3      	ldrh	r3, [r4, #12]
 80063e0:	f043 0308 	orr.w	r3, r3, #8
 80063e4:	81a3      	strh	r3, [r4, #12]
 80063e6:	6923      	ldr	r3, [r4, #16]
 80063e8:	b94b      	cbnz	r3, 80063fe <__swsetup_r+0x9a>
 80063ea:	89a3      	ldrh	r3, [r4, #12]
 80063ec:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80063f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80063f4:	d003      	beq.n	80063fe <__swsetup_r+0x9a>
 80063f6:	4621      	mov	r1, r4
 80063f8:	4630      	mov	r0, r6
 80063fa:	f000 f917 	bl	800662c <__smakebuf_r>
 80063fe:	89a2      	ldrh	r2, [r4, #12]
 8006400:	f012 0301 	ands.w	r3, r2, #1
 8006404:	d00c      	beq.n	8006420 <__swsetup_r+0xbc>
 8006406:	2300      	movs	r3, #0
 8006408:	60a3      	str	r3, [r4, #8]
 800640a:	6963      	ldr	r3, [r4, #20]
 800640c:	425b      	negs	r3, r3
 800640e:	61a3      	str	r3, [r4, #24]
 8006410:	6923      	ldr	r3, [r4, #16]
 8006412:	b953      	cbnz	r3, 800642a <__swsetup_r+0xc6>
 8006414:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006418:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800641c:	d1ba      	bne.n	8006394 <__swsetup_r+0x30>
 800641e:	bd70      	pop	{r4, r5, r6, pc}
 8006420:	0792      	lsls	r2, r2, #30
 8006422:	bf58      	it	pl
 8006424:	6963      	ldrpl	r3, [r4, #20]
 8006426:	60a3      	str	r3, [r4, #8]
 8006428:	e7f2      	b.n	8006410 <__swsetup_r+0xac>
 800642a:	2000      	movs	r0, #0
 800642c:	e7f7      	b.n	800641e <__swsetup_r+0xba>
 800642e:	bf00      	nop
 8006430:	20000010 	.word	0x20000010
 8006434:	080068d4 	.word	0x080068d4
 8006438:	080068f4 	.word	0x080068f4
 800643c:	080068b4 	.word	0x080068b4

08006440 <_close_r>:
 8006440:	b538      	push	{r3, r4, r5, lr}
 8006442:	4c06      	ldr	r4, [pc, #24]	; (800645c <_close_r+0x1c>)
 8006444:	2300      	movs	r3, #0
 8006446:	4605      	mov	r5, r0
 8006448:	4608      	mov	r0, r1
 800644a:	6023      	str	r3, [r4, #0]
 800644c:	f7fa fd85 	bl	8000f5a <_close>
 8006450:	1c43      	adds	r3, r0, #1
 8006452:	d102      	bne.n	800645a <_close_r+0x1a>
 8006454:	6823      	ldr	r3, [r4, #0]
 8006456:	b103      	cbz	r3, 800645a <_close_r+0x1a>
 8006458:	602b      	str	r3, [r5, #0]
 800645a:	bd38      	pop	{r3, r4, r5, pc}
 800645c:	2000029c 	.word	0x2000029c

08006460 <__sflush_r>:
 8006460:	898a      	ldrh	r2, [r1, #12]
 8006462:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006466:	4605      	mov	r5, r0
 8006468:	0710      	lsls	r0, r2, #28
 800646a:	460c      	mov	r4, r1
 800646c:	d458      	bmi.n	8006520 <__sflush_r+0xc0>
 800646e:	684b      	ldr	r3, [r1, #4]
 8006470:	2b00      	cmp	r3, #0
 8006472:	dc05      	bgt.n	8006480 <__sflush_r+0x20>
 8006474:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006476:	2b00      	cmp	r3, #0
 8006478:	dc02      	bgt.n	8006480 <__sflush_r+0x20>
 800647a:	2000      	movs	r0, #0
 800647c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006480:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006482:	2e00      	cmp	r6, #0
 8006484:	d0f9      	beq.n	800647a <__sflush_r+0x1a>
 8006486:	2300      	movs	r3, #0
 8006488:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800648c:	682f      	ldr	r7, [r5, #0]
 800648e:	6a21      	ldr	r1, [r4, #32]
 8006490:	602b      	str	r3, [r5, #0]
 8006492:	d032      	beq.n	80064fa <__sflush_r+0x9a>
 8006494:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006496:	89a3      	ldrh	r3, [r4, #12]
 8006498:	075a      	lsls	r2, r3, #29
 800649a:	d505      	bpl.n	80064a8 <__sflush_r+0x48>
 800649c:	6863      	ldr	r3, [r4, #4]
 800649e:	1ac0      	subs	r0, r0, r3
 80064a0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80064a2:	b10b      	cbz	r3, 80064a8 <__sflush_r+0x48>
 80064a4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80064a6:	1ac0      	subs	r0, r0, r3
 80064a8:	2300      	movs	r3, #0
 80064aa:	4602      	mov	r2, r0
 80064ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80064ae:	6a21      	ldr	r1, [r4, #32]
 80064b0:	4628      	mov	r0, r5
 80064b2:	47b0      	blx	r6
 80064b4:	1c43      	adds	r3, r0, #1
 80064b6:	89a3      	ldrh	r3, [r4, #12]
 80064b8:	d106      	bne.n	80064c8 <__sflush_r+0x68>
 80064ba:	6829      	ldr	r1, [r5, #0]
 80064bc:	291d      	cmp	r1, #29
 80064be:	d848      	bhi.n	8006552 <__sflush_r+0xf2>
 80064c0:	4a29      	ldr	r2, [pc, #164]	; (8006568 <__sflush_r+0x108>)
 80064c2:	40ca      	lsrs	r2, r1
 80064c4:	07d6      	lsls	r6, r2, #31
 80064c6:	d544      	bpl.n	8006552 <__sflush_r+0xf2>
 80064c8:	2200      	movs	r2, #0
 80064ca:	6062      	str	r2, [r4, #4]
 80064cc:	04d9      	lsls	r1, r3, #19
 80064ce:	6922      	ldr	r2, [r4, #16]
 80064d0:	6022      	str	r2, [r4, #0]
 80064d2:	d504      	bpl.n	80064de <__sflush_r+0x7e>
 80064d4:	1c42      	adds	r2, r0, #1
 80064d6:	d101      	bne.n	80064dc <__sflush_r+0x7c>
 80064d8:	682b      	ldr	r3, [r5, #0]
 80064da:	b903      	cbnz	r3, 80064de <__sflush_r+0x7e>
 80064dc:	6560      	str	r0, [r4, #84]	; 0x54
 80064de:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80064e0:	602f      	str	r7, [r5, #0]
 80064e2:	2900      	cmp	r1, #0
 80064e4:	d0c9      	beq.n	800647a <__sflush_r+0x1a>
 80064e6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80064ea:	4299      	cmp	r1, r3
 80064ec:	d002      	beq.n	80064f4 <__sflush_r+0x94>
 80064ee:	4628      	mov	r0, r5
 80064f0:	f000 f902 	bl	80066f8 <_free_r>
 80064f4:	2000      	movs	r0, #0
 80064f6:	6360      	str	r0, [r4, #52]	; 0x34
 80064f8:	e7c0      	b.n	800647c <__sflush_r+0x1c>
 80064fa:	2301      	movs	r3, #1
 80064fc:	4628      	mov	r0, r5
 80064fe:	47b0      	blx	r6
 8006500:	1c41      	adds	r1, r0, #1
 8006502:	d1c8      	bne.n	8006496 <__sflush_r+0x36>
 8006504:	682b      	ldr	r3, [r5, #0]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d0c5      	beq.n	8006496 <__sflush_r+0x36>
 800650a:	2b1d      	cmp	r3, #29
 800650c:	d001      	beq.n	8006512 <__sflush_r+0xb2>
 800650e:	2b16      	cmp	r3, #22
 8006510:	d101      	bne.n	8006516 <__sflush_r+0xb6>
 8006512:	602f      	str	r7, [r5, #0]
 8006514:	e7b1      	b.n	800647a <__sflush_r+0x1a>
 8006516:	89a3      	ldrh	r3, [r4, #12]
 8006518:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800651c:	81a3      	strh	r3, [r4, #12]
 800651e:	e7ad      	b.n	800647c <__sflush_r+0x1c>
 8006520:	690f      	ldr	r7, [r1, #16]
 8006522:	2f00      	cmp	r7, #0
 8006524:	d0a9      	beq.n	800647a <__sflush_r+0x1a>
 8006526:	0793      	lsls	r3, r2, #30
 8006528:	680e      	ldr	r6, [r1, #0]
 800652a:	bf08      	it	eq
 800652c:	694b      	ldreq	r3, [r1, #20]
 800652e:	600f      	str	r7, [r1, #0]
 8006530:	bf18      	it	ne
 8006532:	2300      	movne	r3, #0
 8006534:	eba6 0807 	sub.w	r8, r6, r7
 8006538:	608b      	str	r3, [r1, #8]
 800653a:	f1b8 0f00 	cmp.w	r8, #0
 800653e:	dd9c      	ble.n	800647a <__sflush_r+0x1a>
 8006540:	4643      	mov	r3, r8
 8006542:	463a      	mov	r2, r7
 8006544:	6a21      	ldr	r1, [r4, #32]
 8006546:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006548:	4628      	mov	r0, r5
 800654a:	47b0      	blx	r6
 800654c:	2800      	cmp	r0, #0
 800654e:	dc06      	bgt.n	800655e <__sflush_r+0xfe>
 8006550:	89a3      	ldrh	r3, [r4, #12]
 8006552:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006556:	81a3      	strh	r3, [r4, #12]
 8006558:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800655c:	e78e      	b.n	800647c <__sflush_r+0x1c>
 800655e:	4407      	add	r7, r0
 8006560:	eba8 0800 	sub.w	r8, r8, r0
 8006564:	e7e9      	b.n	800653a <__sflush_r+0xda>
 8006566:	bf00      	nop
 8006568:	20400001 	.word	0x20400001

0800656c <_fflush_r>:
 800656c:	b538      	push	{r3, r4, r5, lr}
 800656e:	690b      	ldr	r3, [r1, #16]
 8006570:	4605      	mov	r5, r0
 8006572:	460c      	mov	r4, r1
 8006574:	b1db      	cbz	r3, 80065ae <_fflush_r+0x42>
 8006576:	b118      	cbz	r0, 8006580 <_fflush_r+0x14>
 8006578:	6983      	ldr	r3, [r0, #24]
 800657a:	b90b      	cbnz	r3, 8006580 <_fflush_r+0x14>
 800657c:	f7ff f93c 	bl	80057f8 <__sinit>
 8006580:	4b0c      	ldr	r3, [pc, #48]	; (80065b4 <_fflush_r+0x48>)
 8006582:	429c      	cmp	r4, r3
 8006584:	d109      	bne.n	800659a <_fflush_r+0x2e>
 8006586:	686c      	ldr	r4, [r5, #4]
 8006588:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800658c:	b17b      	cbz	r3, 80065ae <_fflush_r+0x42>
 800658e:	4621      	mov	r1, r4
 8006590:	4628      	mov	r0, r5
 8006592:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006596:	f7ff bf63 	b.w	8006460 <__sflush_r>
 800659a:	4b07      	ldr	r3, [pc, #28]	; (80065b8 <_fflush_r+0x4c>)
 800659c:	429c      	cmp	r4, r3
 800659e:	d101      	bne.n	80065a4 <_fflush_r+0x38>
 80065a0:	68ac      	ldr	r4, [r5, #8]
 80065a2:	e7f1      	b.n	8006588 <_fflush_r+0x1c>
 80065a4:	4b05      	ldr	r3, [pc, #20]	; (80065bc <_fflush_r+0x50>)
 80065a6:	429c      	cmp	r4, r3
 80065a8:	bf08      	it	eq
 80065aa:	68ec      	ldreq	r4, [r5, #12]
 80065ac:	e7ec      	b.n	8006588 <_fflush_r+0x1c>
 80065ae:	2000      	movs	r0, #0
 80065b0:	bd38      	pop	{r3, r4, r5, pc}
 80065b2:	bf00      	nop
 80065b4:	080068d4 	.word	0x080068d4
 80065b8:	080068f4 	.word	0x080068f4
 80065bc:	080068b4 	.word	0x080068b4

080065c0 <_lseek_r>:
 80065c0:	b538      	push	{r3, r4, r5, lr}
 80065c2:	4c07      	ldr	r4, [pc, #28]	; (80065e0 <_lseek_r+0x20>)
 80065c4:	4605      	mov	r5, r0
 80065c6:	4608      	mov	r0, r1
 80065c8:	4611      	mov	r1, r2
 80065ca:	2200      	movs	r2, #0
 80065cc:	6022      	str	r2, [r4, #0]
 80065ce:	461a      	mov	r2, r3
 80065d0:	f7fa fcea 	bl	8000fa8 <_lseek>
 80065d4:	1c43      	adds	r3, r0, #1
 80065d6:	d102      	bne.n	80065de <_lseek_r+0x1e>
 80065d8:	6823      	ldr	r3, [r4, #0]
 80065da:	b103      	cbz	r3, 80065de <_lseek_r+0x1e>
 80065dc:	602b      	str	r3, [r5, #0]
 80065de:	bd38      	pop	{r3, r4, r5, pc}
 80065e0:	2000029c 	.word	0x2000029c

080065e4 <__swhatbuf_r>:
 80065e4:	b570      	push	{r4, r5, r6, lr}
 80065e6:	460e      	mov	r6, r1
 80065e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80065ec:	2900      	cmp	r1, #0
 80065ee:	b096      	sub	sp, #88	; 0x58
 80065f0:	4614      	mov	r4, r2
 80065f2:	461d      	mov	r5, r3
 80065f4:	da07      	bge.n	8006606 <__swhatbuf_r+0x22>
 80065f6:	2300      	movs	r3, #0
 80065f8:	602b      	str	r3, [r5, #0]
 80065fa:	89b3      	ldrh	r3, [r6, #12]
 80065fc:	061a      	lsls	r2, r3, #24
 80065fe:	d410      	bmi.n	8006622 <__swhatbuf_r+0x3e>
 8006600:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006604:	e00e      	b.n	8006624 <__swhatbuf_r+0x40>
 8006606:	466a      	mov	r2, sp
 8006608:	f000 f8fc 	bl	8006804 <_fstat_r>
 800660c:	2800      	cmp	r0, #0
 800660e:	dbf2      	blt.n	80065f6 <__swhatbuf_r+0x12>
 8006610:	9a01      	ldr	r2, [sp, #4]
 8006612:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006616:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800661a:	425a      	negs	r2, r3
 800661c:	415a      	adcs	r2, r3
 800661e:	602a      	str	r2, [r5, #0]
 8006620:	e7ee      	b.n	8006600 <__swhatbuf_r+0x1c>
 8006622:	2340      	movs	r3, #64	; 0x40
 8006624:	2000      	movs	r0, #0
 8006626:	6023      	str	r3, [r4, #0]
 8006628:	b016      	add	sp, #88	; 0x58
 800662a:	bd70      	pop	{r4, r5, r6, pc}

0800662c <__smakebuf_r>:
 800662c:	898b      	ldrh	r3, [r1, #12]
 800662e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006630:	079d      	lsls	r5, r3, #30
 8006632:	4606      	mov	r6, r0
 8006634:	460c      	mov	r4, r1
 8006636:	d507      	bpl.n	8006648 <__smakebuf_r+0x1c>
 8006638:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800663c:	6023      	str	r3, [r4, #0]
 800663e:	6123      	str	r3, [r4, #16]
 8006640:	2301      	movs	r3, #1
 8006642:	6163      	str	r3, [r4, #20]
 8006644:	b002      	add	sp, #8
 8006646:	bd70      	pop	{r4, r5, r6, pc}
 8006648:	ab01      	add	r3, sp, #4
 800664a:	466a      	mov	r2, sp
 800664c:	f7ff ffca 	bl	80065e4 <__swhatbuf_r>
 8006650:	9900      	ldr	r1, [sp, #0]
 8006652:	4605      	mov	r5, r0
 8006654:	4630      	mov	r0, r6
 8006656:	f7ff f959 	bl	800590c <_malloc_r>
 800665a:	b948      	cbnz	r0, 8006670 <__smakebuf_r+0x44>
 800665c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006660:	059a      	lsls	r2, r3, #22
 8006662:	d4ef      	bmi.n	8006644 <__smakebuf_r+0x18>
 8006664:	f023 0303 	bic.w	r3, r3, #3
 8006668:	f043 0302 	orr.w	r3, r3, #2
 800666c:	81a3      	strh	r3, [r4, #12]
 800666e:	e7e3      	b.n	8006638 <__smakebuf_r+0xc>
 8006670:	4b0d      	ldr	r3, [pc, #52]	; (80066a8 <__smakebuf_r+0x7c>)
 8006672:	62b3      	str	r3, [r6, #40]	; 0x28
 8006674:	89a3      	ldrh	r3, [r4, #12]
 8006676:	6020      	str	r0, [r4, #0]
 8006678:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800667c:	81a3      	strh	r3, [r4, #12]
 800667e:	9b00      	ldr	r3, [sp, #0]
 8006680:	6163      	str	r3, [r4, #20]
 8006682:	9b01      	ldr	r3, [sp, #4]
 8006684:	6120      	str	r0, [r4, #16]
 8006686:	b15b      	cbz	r3, 80066a0 <__smakebuf_r+0x74>
 8006688:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800668c:	4630      	mov	r0, r6
 800668e:	f000 f8cb 	bl	8006828 <_isatty_r>
 8006692:	b128      	cbz	r0, 80066a0 <__smakebuf_r+0x74>
 8006694:	89a3      	ldrh	r3, [r4, #12]
 8006696:	f023 0303 	bic.w	r3, r3, #3
 800669a:	f043 0301 	orr.w	r3, r3, #1
 800669e:	81a3      	strh	r3, [r4, #12]
 80066a0:	89a3      	ldrh	r3, [r4, #12]
 80066a2:	431d      	orrs	r5, r3
 80066a4:	81a5      	strh	r5, [r4, #12]
 80066a6:	e7cd      	b.n	8006644 <__smakebuf_r+0x18>
 80066a8:	080057c1 	.word	0x080057c1

080066ac <memcpy>:
 80066ac:	b510      	push	{r4, lr}
 80066ae:	1e43      	subs	r3, r0, #1
 80066b0:	440a      	add	r2, r1
 80066b2:	4291      	cmp	r1, r2
 80066b4:	d100      	bne.n	80066b8 <memcpy+0xc>
 80066b6:	bd10      	pop	{r4, pc}
 80066b8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80066bc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80066c0:	e7f7      	b.n	80066b2 <memcpy+0x6>

080066c2 <memmove>:
 80066c2:	4288      	cmp	r0, r1
 80066c4:	b510      	push	{r4, lr}
 80066c6:	eb01 0302 	add.w	r3, r1, r2
 80066ca:	d807      	bhi.n	80066dc <memmove+0x1a>
 80066cc:	1e42      	subs	r2, r0, #1
 80066ce:	4299      	cmp	r1, r3
 80066d0:	d00a      	beq.n	80066e8 <memmove+0x26>
 80066d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80066d6:	f802 4f01 	strb.w	r4, [r2, #1]!
 80066da:	e7f8      	b.n	80066ce <memmove+0xc>
 80066dc:	4283      	cmp	r3, r0
 80066de:	d9f5      	bls.n	80066cc <memmove+0xa>
 80066e0:	1881      	adds	r1, r0, r2
 80066e2:	1ad2      	subs	r2, r2, r3
 80066e4:	42d3      	cmn	r3, r2
 80066e6:	d100      	bne.n	80066ea <memmove+0x28>
 80066e8:	bd10      	pop	{r4, pc}
 80066ea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80066ee:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80066f2:	e7f7      	b.n	80066e4 <memmove+0x22>

080066f4 <__malloc_lock>:
 80066f4:	4770      	bx	lr

080066f6 <__malloc_unlock>:
 80066f6:	4770      	bx	lr

080066f8 <_free_r>:
 80066f8:	b538      	push	{r3, r4, r5, lr}
 80066fa:	4605      	mov	r5, r0
 80066fc:	2900      	cmp	r1, #0
 80066fe:	d045      	beq.n	800678c <_free_r+0x94>
 8006700:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006704:	1f0c      	subs	r4, r1, #4
 8006706:	2b00      	cmp	r3, #0
 8006708:	bfb8      	it	lt
 800670a:	18e4      	addlt	r4, r4, r3
 800670c:	f7ff fff2 	bl	80066f4 <__malloc_lock>
 8006710:	4a1f      	ldr	r2, [pc, #124]	; (8006790 <_free_r+0x98>)
 8006712:	6813      	ldr	r3, [r2, #0]
 8006714:	4610      	mov	r0, r2
 8006716:	b933      	cbnz	r3, 8006726 <_free_r+0x2e>
 8006718:	6063      	str	r3, [r4, #4]
 800671a:	6014      	str	r4, [r2, #0]
 800671c:	4628      	mov	r0, r5
 800671e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006722:	f7ff bfe8 	b.w	80066f6 <__malloc_unlock>
 8006726:	42a3      	cmp	r3, r4
 8006728:	d90c      	bls.n	8006744 <_free_r+0x4c>
 800672a:	6821      	ldr	r1, [r4, #0]
 800672c:	1862      	adds	r2, r4, r1
 800672e:	4293      	cmp	r3, r2
 8006730:	bf04      	itt	eq
 8006732:	681a      	ldreq	r2, [r3, #0]
 8006734:	685b      	ldreq	r3, [r3, #4]
 8006736:	6063      	str	r3, [r4, #4]
 8006738:	bf04      	itt	eq
 800673a:	1852      	addeq	r2, r2, r1
 800673c:	6022      	streq	r2, [r4, #0]
 800673e:	6004      	str	r4, [r0, #0]
 8006740:	e7ec      	b.n	800671c <_free_r+0x24>
 8006742:	4613      	mov	r3, r2
 8006744:	685a      	ldr	r2, [r3, #4]
 8006746:	b10a      	cbz	r2, 800674c <_free_r+0x54>
 8006748:	42a2      	cmp	r2, r4
 800674a:	d9fa      	bls.n	8006742 <_free_r+0x4a>
 800674c:	6819      	ldr	r1, [r3, #0]
 800674e:	1858      	adds	r0, r3, r1
 8006750:	42a0      	cmp	r0, r4
 8006752:	d10b      	bne.n	800676c <_free_r+0x74>
 8006754:	6820      	ldr	r0, [r4, #0]
 8006756:	4401      	add	r1, r0
 8006758:	1858      	adds	r0, r3, r1
 800675a:	4282      	cmp	r2, r0
 800675c:	6019      	str	r1, [r3, #0]
 800675e:	d1dd      	bne.n	800671c <_free_r+0x24>
 8006760:	6810      	ldr	r0, [r2, #0]
 8006762:	6852      	ldr	r2, [r2, #4]
 8006764:	605a      	str	r2, [r3, #4]
 8006766:	4401      	add	r1, r0
 8006768:	6019      	str	r1, [r3, #0]
 800676a:	e7d7      	b.n	800671c <_free_r+0x24>
 800676c:	d902      	bls.n	8006774 <_free_r+0x7c>
 800676e:	230c      	movs	r3, #12
 8006770:	602b      	str	r3, [r5, #0]
 8006772:	e7d3      	b.n	800671c <_free_r+0x24>
 8006774:	6820      	ldr	r0, [r4, #0]
 8006776:	1821      	adds	r1, r4, r0
 8006778:	428a      	cmp	r2, r1
 800677a:	bf04      	itt	eq
 800677c:	6811      	ldreq	r1, [r2, #0]
 800677e:	6852      	ldreq	r2, [r2, #4]
 8006780:	6062      	str	r2, [r4, #4]
 8006782:	bf04      	itt	eq
 8006784:	1809      	addeq	r1, r1, r0
 8006786:	6021      	streq	r1, [r4, #0]
 8006788:	605c      	str	r4, [r3, #4]
 800678a:	e7c7      	b.n	800671c <_free_r+0x24>
 800678c:	bd38      	pop	{r3, r4, r5, pc}
 800678e:	bf00      	nop
 8006790:	200000a8 	.word	0x200000a8

08006794 <_realloc_r>:
 8006794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006796:	4607      	mov	r7, r0
 8006798:	4614      	mov	r4, r2
 800679a:	460e      	mov	r6, r1
 800679c:	b921      	cbnz	r1, 80067a8 <_realloc_r+0x14>
 800679e:	4611      	mov	r1, r2
 80067a0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80067a4:	f7ff b8b2 	b.w	800590c <_malloc_r>
 80067a8:	b922      	cbnz	r2, 80067b4 <_realloc_r+0x20>
 80067aa:	f7ff ffa5 	bl	80066f8 <_free_r>
 80067ae:	4625      	mov	r5, r4
 80067b0:	4628      	mov	r0, r5
 80067b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80067b4:	f000 f848 	bl	8006848 <_malloc_usable_size_r>
 80067b8:	42a0      	cmp	r0, r4
 80067ba:	d20f      	bcs.n	80067dc <_realloc_r+0x48>
 80067bc:	4621      	mov	r1, r4
 80067be:	4638      	mov	r0, r7
 80067c0:	f7ff f8a4 	bl	800590c <_malloc_r>
 80067c4:	4605      	mov	r5, r0
 80067c6:	2800      	cmp	r0, #0
 80067c8:	d0f2      	beq.n	80067b0 <_realloc_r+0x1c>
 80067ca:	4631      	mov	r1, r6
 80067cc:	4622      	mov	r2, r4
 80067ce:	f7ff ff6d 	bl	80066ac <memcpy>
 80067d2:	4631      	mov	r1, r6
 80067d4:	4638      	mov	r0, r7
 80067d6:	f7ff ff8f 	bl	80066f8 <_free_r>
 80067da:	e7e9      	b.n	80067b0 <_realloc_r+0x1c>
 80067dc:	4635      	mov	r5, r6
 80067de:	e7e7      	b.n	80067b0 <_realloc_r+0x1c>

080067e0 <_read_r>:
 80067e0:	b538      	push	{r3, r4, r5, lr}
 80067e2:	4c07      	ldr	r4, [pc, #28]	; (8006800 <_read_r+0x20>)
 80067e4:	4605      	mov	r5, r0
 80067e6:	4608      	mov	r0, r1
 80067e8:	4611      	mov	r1, r2
 80067ea:	2200      	movs	r2, #0
 80067ec:	6022      	str	r2, [r4, #0]
 80067ee:	461a      	mov	r2, r3
 80067f0:	f7fa fb96 	bl	8000f20 <_read>
 80067f4:	1c43      	adds	r3, r0, #1
 80067f6:	d102      	bne.n	80067fe <_read_r+0x1e>
 80067f8:	6823      	ldr	r3, [r4, #0]
 80067fa:	b103      	cbz	r3, 80067fe <_read_r+0x1e>
 80067fc:	602b      	str	r3, [r5, #0]
 80067fe:	bd38      	pop	{r3, r4, r5, pc}
 8006800:	2000029c 	.word	0x2000029c

08006804 <_fstat_r>:
 8006804:	b538      	push	{r3, r4, r5, lr}
 8006806:	4c07      	ldr	r4, [pc, #28]	; (8006824 <_fstat_r+0x20>)
 8006808:	2300      	movs	r3, #0
 800680a:	4605      	mov	r5, r0
 800680c:	4608      	mov	r0, r1
 800680e:	4611      	mov	r1, r2
 8006810:	6023      	str	r3, [r4, #0]
 8006812:	f7fa fbae 	bl	8000f72 <_fstat>
 8006816:	1c43      	adds	r3, r0, #1
 8006818:	d102      	bne.n	8006820 <_fstat_r+0x1c>
 800681a:	6823      	ldr	r3, [r4, #0]
 800681c:	b103      	cbz	r3, 8006820 <_fstat_r+0x1c>
 800681e:	602b      	str	r3, [r5, #0]
 8006820:	bd38      	pop	{r3, r4, r5, pc}
 8006822:	bf00      	nop
 8006824:	2000029c 	.word	0x2000029c

08006828 <_isatty_r>:
 8006828:	b538      	push	{r3, r4, r5, lr}
 800682a:	4c06      	ldr	r4, [pc, #24]	; (8006844 <_isatty_r+0x1c>)
 800682c:	2300      	movs	r3, #0
 800682e:	4605      	mov	r5, r0
 8006830:	4608      	mov	r0, r1
 8006832:	6023      	str	r3, [r4, #0]
 8006834:	f7fa fbad 	bl	8000f92 <_isatty>
 8006838:	1c43      	adds	r3, r0, #1
 800683a:	d102      	bne.n	8006842 <_isatty_r+0x1a>
 800683c:	6823      	ldr	r3, [r4, #0]
 800683e:	b103      	cbz	r3, 8006842 <_isatty_r+0x1a>
 8006840:	602b      	str	r3, [r5, #0]
 8006842:	bd38      	pop	{r3, r4, r5, pc}
 8006844:	2000029c 	.word	0x2000029c

08006848 <_malloc_usable_size_r>:
 8006848:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800684c:	1f18      	subs	r0, r3, #4
 800684e:	2b00      	cmp	r3, #0
 8006850:	bfbc      	itt	lt
 8006852:	580b      	ldrlt	r3, [r1, r0]
 8006854:	18c0      	addlt	r0, r0, r3
 8006856:	4770      	bx	lr

08006858 <_init>:
 8006858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800685a:	bf00      	nop
 800685c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800685e:	bc08      	pop	{r3}
 8006860:	469e      	mov	lr, r3
 8006862:	4770      	bx	lr

08006864 <_fini>:
 8006864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006866:	bf00      	nop
 8006868:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800686a:	bc08      	pop	{r3}
 800686c:	469e      	mov	lr, r3
 800686e:	4770      	bx	lr
