
ProjektZespolowy.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006180  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  08006310  08006310  00016310  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080063e8  080063e8  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  080063e8  080063e8  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  080063e8  080063e8  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080063e8  080063e8  000163e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080063ec  080063ec  000163ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080063f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001dc  20000074  08006464  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000250  08006464  00020250  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011a6d  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002180  00000000  00000000  00031b11  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000de0  00000000  00000000  00033c98  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d08  00000000  00000000  00034a78  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001c7ce  00000000  00000000  00035780  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ccbf  00000000  00000000  00051f4e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000a6131  00000000  00000000  0005ec0d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00104d3e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000424c  00000000  00000000  00104dbc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080062f8 	.word	0x080062f8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	080062f8 	.word	0x080062f8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <_write>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write ( int file , char *ptr , int len ) {
 8000270:	b580      	push	{r7, lr}
 8000272:	b084      	sub	sp, #16
 8000274:	af00      	add	r7, sp, #0
 8000276:	60f8      	str	r0, [r7, #12]
 8000278:	60b9      	str	r1, [r7, #8]
 800027a:	607a      	str	r2, [r7, #4]

	HAL_UART_Transmit(&huart2 , (uint8_t*)ptr , len , 50) ;
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	b29a      	uxth	r2, r3
 8000280:	2332      	movs	r3, #50	; 0x32
 8000282:	68b9      	ldr	r1, [r7, #8]
 8000284:	4803      	ldr	r0, [pc, #12]	; (8000294 <_write+0x24>)
 8000286:	f003 fe2b 	bl	8003ee0 <HAL_UART_Transmit>
	return len;
 800028a:	687b      	ldr	r3, [r7, #4]
}
 800028c:	4618      	mov	r0, r3
 800028e:	3710      	adds	r7, #16
 8000290:	46bd      	mov	sp, r7
 8000292:	bd80      	pop	{r7, pc}
 8000294:	200001c4 	.word	0x200001c4

08000298 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000298:	b480      	push	{r7}
 800029a:	b083      	sub	sp, #12
 800029c:	af00      	add	r7, sp, #0
 800029e:	4603      	mov	r3, r0
 80002a0:	80fb      	strh	r3, [r7, #6]
    if(GPIO_Pin == LeftSensor_Pin || GPIO_Pin == CenterSensor_Pin || GPIO_Pin == RightSensor_Pin)
 80002a2:	88fb      	ldrh	r3, [r7, #6]
 80002a4:	2b01      	cmp	r3, #1
 80002a6:	d005      	beq.n	80002b4 <HAL_GPIO_EXTI_Callback+0x1c>
 80002a8:	88fb      	ldrh	r3, [r7, #6]
 80002aa:	2b20      	cmp	r3, #32
 80002ac:	d002      	beq.n	80002b4 <HAL_GPIO_EXTI_Callback+0x1c>
 80002ae:	88fb      	ldrh	r3, [r7, #6]
 80002b0:	2b10      	cmp	r3, #16
 80002b2:	d102      	bne.n	80002ba <HAL_GPIO_EXTI_Callback+0x22>
    {
    	interruptFlag = 1;
 80002b4:	4b04      	ldr	r3, [pc, #16]	; (80002c8 <HAL_GPIO_EXTI_Callback+0x30>)
 80002b6:	2201      	movs	r2, #1
 80002b8:	601a      	str	r2, [r3, #0]
    }
}
 80002ba:	bf00      	nop
 80002bc:	370c      	adds	r7, #12
 80002be:	46bd      	mov	sp, r7
 80002c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c4:	4770      	bx	lr
 80002c6:	bf00      	nop
 80002c8:	20000090 	.word	0x20000090

080002cc <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	b082      	sub	sp, #8
 80002d0:	af00      	add	r7, sp, #0
 80002d2:	6078      	str	r0, [r7, #4]
	if(huart->Instance == huart1.Instance)
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	681a      	ldr	r2, [r3, #0]
 80002d8:	4b0b      	ldr	r3, [pc, #44]	; (8000308 <HAL_UART_RxCpltCallback+0x3c>)
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	429a      	cmp	r2, r3
 80002de:	d10e      	bne.n	80002fe <HAL_UART_RxCpltCallback+0x32>
	{
		interruptFlagUART = 1;
 80002e0:	4b0a      	ldr	r3, [pc, #40]	; (800030c <HAL_UART_RxCpltCallback+0x40>)
 80002e2:	2201      	movs	r2, #1
 80002e4:	601a      	str	r2, [r3, #0]
		direct = RX_BUFFER[0];
 80002e6:	4b0a      	ldr	r3, [pc, #40]	; (8000310 <HAL_UART_RxCpltCallback+0x44>)
 80002e8:	781a      	ldrb	r2, [r3, #0]
 80002ea:	4b0a      	ldr	r3, [pc, #40]	; (8000314 <HAL_UART_RxCpltCallback+0x48>)
 80002ec:	701a      	strb	r2, [r3, #0]
//		speed = atoi((char*)&RX_BUFFER[2]);
		speed = 200;
 80002ee:	4b0a      	ldr	r3, [pc, #40]	; (8000318 <HAL_UART_RxCpltCallback+0x4c>)
 80002f0:	22c8      	movs	r2, #200	; 0xc8
 80002f2:	601a      	str	r2, [r3, #0]

		HAL_UART_Receive_DMA(&huart1, RX_BUFFER, BUFFER_LEN);
 80002f4:	2201      	movs	r2, #1
 80002f6:	4906      	ldr	r1, [pc, #24]	; (8000310 <HAL_UART_RxCpltCallback+0x44>)
 80002f8:	4803      	ldr	r0, [pc, #12]	; (8000308 <HAL_UART_RxCpltCallback+0x3c>)
 80002fa:	f003 fe85 	bl	8004008 <HAL_UART_Receive_DMA>
	}
}
 80002fe:	bf00      	nop
 8000300:	3708      	adds	r7, #8
 8000302:	46bd      	mov	sp, r7
 8000304:	bd80      	pop	{r7, pc}
 8000306:	bf00      	nop
 8000308:	200000f4 	.word	0x200000f4
 800030c:	20000094 	.word	0x20000094
 8000310:	200000a0 	.word	0x200000a0
 8000314:	2000009c 	.word	0x2000009c
 8000318:	20000000 	.word	0x20000000

0800031c <MotorControler>:


void MotorControler(uint Motor_AIN1, uint Motor_AIN2, uint Motor_BIN1, uint Motor_BIN2, int PWMA, int PWMB){
 800031c:	b580      	push	{r7, lr}
 800031e:	b084      	sub	sp, #16
 8000320:	af00      	add	r7, sp, #0
 8000322:	60f8      	str	r0, [r7, #12]
 8000324:	60b9      	str	r1, [r7, #8]
 8000326:	607a      	str	r2, [r7, #4]
 8000328:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(MotorSTBY_GPIO_Port, MotorSTBY_Pin, GPIO_PIN_SET);
 800032a:	2201      	movs	r2, #1
 800032c:	2102      	movs	r1, #2
 800032e:	4816      	ldr	r0, [pc, #88]	; (8000388 <MotorControler+0x6c>)
 8000330:	f001 faba 	bl	80018a8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MotorAIN2_GPIO_Port, MotorAIN2_Pin, Motor_AIN2);
 8000334:	68bb      	ldr	r3, [r7, #8]
 8000336:	b2db      	uxtb	r3, r3
 8000338:	461a      	mov	r2, r3
 800033a:	2101      	movs	r1, #1
 800033c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000340:	f001 fab2 	bl	80018a8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MotorAIN1_GPIO_Port, MotorAIN1_Pin, Motor_AIN1);
 8000344:	68fb      	ldr	r3, [r7, #12]
 8000346:	b2db      	uxtb	r3, r3
 8000348:	461a      	mov	r2, r3
 800034a:	2102      	movs	r1, #2
 800034c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000350:	f001 faaa 	bl	80018a8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MotorBN2_GPIO_Port, MotorBN2_Pin, Motor_BIN2);
 8000354:	683b      	ldr	r3, [r7, #0]
 8000356:	b2db      	uxtb	r3, r3
 8000358:	461a      	mov	r2, r3
 800035a:	2140      	movs	r1, #64	; 0x40
 800035c:	480a      	ldr	r0, [pc, #40]	; (8000388 <MotorControler+0x6c>)
 800035e:	f001 faa3 	bl	80018a8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MotorBN1_GPIO_Port, MotorBN1_Pin, Motor_BIN1);
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	b2db      	uxtb	r3, r3
 8000366:	461a      	mov	r2, r3
 8000368:	2180      	movs	r1, #128	; 0x80
 800036a:	4807      	ldr	r0, [pc, #28]	; (8000388 <MotorControler+0x6c>)
 800036c:	f001 fa9c 	bl	80018a8 <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, PWMA);
 8000370:	4b06      	ldr	r3, [pc, #24]	; (800038c <MotorControler+0x70>)
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	69ba      	ldr	r2, [r7, #24]
 8000376:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, PWMB);
 8000378:	4b04      	ldr	r3, [pc, #16]	; (800038c <MotorControler+0x70>)
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	69fa      	ldr	r2, [r7, #28]
 800037e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000380:	bf00      	nop
 8000382:	3710      	adds	r7, #16
 8000384:	46bd      	mov	sp, r7
 8000386:	bd80      	pop	{r7, pc}
 8000388:	48000400 	.word	0x48000400
 800038c:	20000178 	.word	0x20000178

08000390 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	b086      	sub	sp, #24
 8000394:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000396:	f000 fd55 	bl	8000e44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800039a:	f000 f8cd 	bl	8000538 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800039e:	f000 fa57 	bl	8000850 <MX_GPIO_Init>
  MX_DMA_Init();
 80003a2:	f000 fa37 	bl	8000814 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80003a6:	f000 fa05 	bl	80007b4 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80003aa:	f000 f91b 	bl	80005e4 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80003ae:	f000 f9d1 	bl	8000754 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pwm_duty);
 80003b2:	4b56      	ldr	r3, [pc, #344]	; (800050c <main+0x17c>)
 80003b4:	681a      	ldr	r2, [r3, #0]
 80003b6:	4b56      	ldr	r3, [pc, #344]	; (8000510 <main+0x180>)
 80003b8:	681b      	ldr	r3, [r3, #0]
 80003ba:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, pwm_duty);
 80003bc:	4b53      	ldr	r3, [pc, #332]	; (800050c <main+0x17c>)
 80003be:	681a      	ldr	r2, [r3, #0]
 80003c0:	4b53      	ldr	r3, [pc, #332]	; (8000510 <main+0x180>)
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	641a      	str	r2, [r3, #64]	; 0x40
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80003c6:	2100      	movs	r1, #0
 80003c8:	4851      	ldr	r0, [pc, #324]	; (8000510 <main+0x180>)
 80003ca:	f002 fdb9 	bl	8002f40 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80003ce:	210c      	movs	r1, #12
 80003d0:	484f      	ldr	r0, [pc, #316]	; (8000510 <main+0x180>)
 80003d2:	f002 fdb5 	bl	8002f40 <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(BT_Enable_GPIO_Port, BT_Enable_Pin, GPIO_PIN_RESET);
 80003d6:	2200      	movs	r2, #0
 80003d8:	2180      	movs	r1, #128	; 0x80
 80003da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003de:	f001 fa63 	bl	80018a8 <HAL_GPIO_WritePin>
  HAL_UART_Receive_DMA(&huart1, RX_BUFFER, BUFFER_LEN);
 80003e2:	2201      	movs	r2, #1
 80003e4:	494b      	ldr	r1, [pc, #300]	; (8000514 <main+0x184>)
 80003e6:	484c      	ldr	r0, [pc, #304]	; (8000518 <main+0x188>)
 80003e8:	f003 fe0e 	bl	8004008 <HAL_UART_Receive_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(interruptFlag == 1){
 80003ec:	4b4b      	ldr	r3, [pc, #300]	; (800051c <main+0x18c>)
 80003ee:	681b      	ldr	r3, [r3, #0]
 80003f0:	2b01      	cmp	r3, #1
 80003f2:	d111      	bne.n	8000418 <main+0x88>
		  HAL_Delay(10);
 80003f4:	200a      	movs	r0, #10
 80003f6:	f000 fd8b 	bl	8000f10 <HAL_Delay>
		  HAL_GPIO_ReadPin(LeftSensor_GPIO_Port, LeftSensor_Pin);
 80003fa:	2101      	movs	r1, #1
 80003fc:	4848      	ldr	r0, [pc, #288]	; (8000520 <main+0x190>)
 80003fe:	f001 fa3b 	bl	8001878 <HAL_GPIO_ReadPin>
		  HAL_GPIO_ReadPin(CenterSensor_GPIO_Port, CenterSensor_Pin);
 8000402:	2120      	movs	r1, #32
 8000404:	4846      	ldr	r0, [pc, #280]	; (8000520 <main+0x190>)
 8000406:	f001 fa37 	bl	8001878 <HAL_GPIO_ReadPin>
		  HAL_GPIO_ReadPin(RightSensor_GPIO_Port, RightSensor_Pin);
 800040a:	2110      	movs	r1, #16
 800040c:	4844      	ldr	r0, [pc, #272]	; (8000520 <main+0x190>)
 800040e:	f001 fa33 	bl	8001878 <HAL_GPIO_ReadPin>
		  interruptFlag = 0;
 8000412:	4b42      	ldr	r3, [pc, #264]	; (800051c <main+0x18c>)
 8000414:	2200      	movs	r2, #0
 8000416:	601a      	str	r2, [r3, #0]

	  }

	  if (interruptFlagUART == 1) {
 8000418:	4b42      	ldr	r3, [pc, #264]	; (8000524 <main+0x194>)
 800041a:	681b      	ldr	r3, [r3, #0]
 800041c:	2b01      	cmp	r3, #1
 800041e:	d1e5      	bne.n	80003ec <main+0x5c>
		  interruptFlagUART = 0;
 8000420:	4b40      	ldr	r3, [pc, #256]	; (8000524 <main+0x194>)
 8000422:	2200      	movs	r2, #0
 8000424:	601a      	str	r2, [r3, #0]

		  HAL_UART_Transmit(&huart2, (uint8_t*)&direct, 1, 100);
 8000426:	2364      	movs	r3, #100	; 0x64
 8000428:	2201      	movs	r2, #1
 800042a:	493f      	ldr	r1, [pc, #252]	; (8000528 <main+0x198>)
 800042c:	483f      	ldr	r0, [pc, #252]	; (800052c <main+0x19c>)
 800042e:	f003 fd57 	bl	8003ee0 <HAL_UART_Transmit>
		  char str[10];
		  sprintf(str, " %d\r\n", speed);
 8000432:	4b3f      	ldr	r3, [pc, #252]	; (8000530 <main+0x1a0>)
 8000434:	681a      	ldr	r2, [r3, #0]
 8000436:	1d3b      	adds	r3, r7, #4
 8000438:	493e      	ldr	r1, [pc, #248]	; (8000534 <main+0x1a4>)
 800043a:	4618      	mov	r0, r3
 800043c:	f004 fecc 	bl	80051d8 <siprintf>
		  printf(str);
 8000440:	1d3b      	adds	r3, r7, #4
 8000442:	4618      	mov	r0, r3
 8000444:	f004 feb0 	bl	80051a8 <iprintf>

		  if(speed < 999 && speed >= 0){
 8000448:	4b39      	ldr	r3, [pc, #228]	; (8000530 <main+0x1a0>)
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	f240 32e6 	movw	r2, #998	; 0x3e6
 8000450:	4293      	cmp	r3, r2
 8000452:	d856      	bhi.n	8000502 <main+0x172>
 8000454:	4b36      	ldr	r3, [pc, #216]	; (8000530 <main+0x1a0>)
 8000456:	681b      	ldr	r3, [r3, #0]
			  switch (direct) {
 8000458:	4b33      	ldr	r3, [pc, #204]	; (8000528 <main+0x198>)
 800045a:	781b      	ldrb	r3, [r3, #0]
 800045c:	b2db      	uxtb	r3, r3
 800045e:	3b30      	subs	r3, #48	; 0x30
 8000460:	2b04      	cmp	r3, #4
 8000462:	d850      	bhi.n	8000506 <main+0x176>
 8000464:	a201      	add	r2, pc, #4	; (adr r2, 800046c <main+0xdc>)
 8000466:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800046a:	bf00      	nop
 800046c:	08000481 	.word	0x08000481
 8000470:	08000497 	.word	0x08000497
 8000474:	080004af 	.word	0x080004af
 8000478:	080004cb 	.word	0x080004cb
 800047c:	080004e5 	.word	0x080004e5
			  	  case '0':
			  		  MotorControler(0, 0, 0, 0, 0, 0);
 8000480:	2300      	movs	r3, #0
 8000482:	9301      	str	r3, [sp, #4]
 8000484:	2300      	movs	r3, #0
 8000486:	9300      	str	r3, [sp, #0]
 8000488:	2300      	movs	r3, #0
 800048a:	2200      	movs	r2, #0
 800048c:	2100      	movs	r1, #0
 800048e:	2000      	movs	r0, #0
 8000490:	f7ff ff44 	bl	800031c <MotorControler>
			  		  break;
 8000494:	e038      	b.n	8000508 <main+0x178>
			  	  case '1':
			  		  MotorControler(0, 0, 1, 0, 0, speed);
 8000496:	4b26      	ldr	r3, [pc, #152]	; (8000530 <main+0x1a0>)
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	9301      	str	r3, [sp, #4]
 800049c:	2300      	movs	r3, #0
 800049e:	9300      	str	r3, [sp, #0]
 80004a0:	2300      	movs	r3, #0
 80004a2:	2201      	movs	r2, #1
 80004a4:	2100      	movs	r1, #0
 80004a6:	2000      	movs	r0, #0
 80004a8:	f7ff ff38 	bl	800031c <MotorControler>
			  		  break;
 80004ac:	e02c      	b.n	8000508 <main+0x178>
			  	  case '2':
			  		  MotorControler(0, 1, 0, 1, speed, speed);
 80004ae:	4b20      	ldr	r3, [pc, #128]	; (8000530 <main+0x1a0>)
 80004b0:	681b      	ldr	r3, [r3, #0]
 80004b2:	461a      	mov	r2, r3
 80004b4:	4b1e      	ldr	r3, [pc, #120]	; (8000530 <main+0x1a0>)
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	9301      	str	r3, [sp, #4]
 80004ba:	9200      	str	r2, [sp, #0]
 80004bc:	2301      	movs	r3, #1
 80004be:	2200      	movs	r2, #0
 80004c0:	2101      	movs	r1, #1
 80004c2:	2000      	movs	r0, #0
 80004c4:	f7ff ff2a 	bl	800031c <MotorControler>
			  		  break;
 80004c8:	e01e      	b.n	8000508 <main+0x178>
			  	  case '3':
			  		  MotorControler(1, 0, 0, 0, speed, 0);
 80004ca:	4b19      	ldr	r3, [pc, #100]	; (8000530 <main+0x1a0>)
 80004cc:	681b      	ldr	r3, [r3, #0]
 80004ce:	461a      	mov	r2, r3
 80004d0:	2300      	movs	r3, #0
 80004d2:	9301      	str	r3, [sp, #4]
 80004d4:	9200      	str	r2, [sp, #0]
 80004d6:	2300      	movs	r3, #0
 80004d8:	2200      	movs	r2, #0
 80004da:	2100      	movs	r1, #0
 80004dc:	2001      	movs	r0, #1
 80004de:	f7ff ff1d 	bl	800031c <MotorControler>
			  		  break;
 80004e2:	e011      	b.n	8000508 <main+0x178>
			  	  case '4':
			  		  MotorControler(1, 0, 1, 0, speed, speed);
 80004e4:	4b12      	ldr	r3, [pc, #72]	; (8000530 <main+0x1a0>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	461a      	mov	r2, r3
 80004ea:	4b11      	ldr	r3, [pc, #68]	; (8000530 <main+0x1a0>)
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	9301      	str	r3, [sp, #4]
 80004f0:	9200      	str	r2, [sp, #0]
 80004f2:	2300      	movs	r3, #0
 80004f4:	2201      	movs	r2, #1
 80004f6:	2100      	movs	r1, #0
 80004f8:	2001      	movs	r0, #1
 80004fa:	f7ff ff0f 	bl	800031c <MotorControler>
			  	  default:
			  		  break;
 80004fe:	bf00      	nop
 8000500:	e001      	b.n	8000506 <main+0x176>
			  }
		  }
 8000502:	bf00      	nop
 8000504:	e772      	b.n	80003ec <main+0x5c>
			  		  break;
 8000506:	bf00      	nop
	  if(interruptFlag == 1){
 8000508:	e770      	b.n	80003ec <main+0x5c>
 800050a:	bf00      	nop
 800050c:	20000098 	.word	0x20000098
 8000510:	20000178 	.word	0x20000178
 8000514:	200000a0 	.word	0x200000a0
 8000518:	200000f4 	.word	0x200000f4
 800051c:	20000090 	.word	0x20000090
 8000520:	48000400 	.word	0x48000400
 8000524:	20000094 	.word	0x20000094
 8000528:	2000009c 	.word	0x2000009c
 800052c:	200001c4 	.word	0x200001c4
 8000530:	20000000 	.word	0x20000000
 8000534:	08006310 	.word	0x08006310

08000538 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b096      	sub	sp, #88	; 0x58
 800053c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800053e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000542:	2228      	movs	r2, #40	; 0x28
 8000544:	2100      	movs	r1, #0
 8000546:	4618      	mov	r0, r3
 8000548:	f004 fe26 	bl	8005198 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800054c:	f107 031c 	add.w	r3, r7, #28
 8000550:	2200      	movs	r2, #0
 8000552:	601a      	str	r2, [r3, #0]
 8000554:	605a      	str	r2, [r3, #4]
 8000556:	609a      	str	r2, [r3, #8]
 8000558:	60da      	str	r2, [r3, #12]
 800055a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800055c:	1d3b      	adds	r3, r7, #4
 800055e:	2200      	movs	r2, #0
 8000560:	601a      	str	r2, [r3, #0]
 8000562:	605a      	str	r2, [r3, #4]
 8000564:	609a      	str	r2, [r3, #8]
 8000566:	60da      	str	r2, [r3, #12]
 8000568:	611a      	str	r2, [r3, #16]
 800056a:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800056c:	2302      	movs	r3, #2
 800056e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000570:	2301      	movs	r3, #1
 8000572:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000574:	2310      	movs	r3, #16
 8000576:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000578:	2300      	movs	r3, #0
 800057a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800057c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000580:	4618      	mov	r0, r3
 8000582:	f001 f9c1 	bl	8001908 <HAL_RCC_OscConfig>
 8000586:	4603      	mov	r3, r0
 8000588:	2b00      	cmp	r3, #0
 800058a:	d001      	beq.n	8000590 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800058c:	f000 fa00 	bl	8000990 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000590:	230f      	movs	r3, #15
 8000592:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000594:	2300      	movs	r3, #0
 8000596:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000598:	2300      	movs	r3, #0
 800059a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800059c:	2300      	movs	r3, #0
 800059e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005a0:	2300      	movs	r3, #0
 80005a2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005a4:	f107 031c 	add.w	r3, r7, #28
 80005a8:	2100      	movs	r1, #0
 80005aa:	4618      	mov	r0, r3
 80005ac:	f002 f8b4 	bl	8002718 <HAL_RCC_ClockConfig>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d001      	beq.n	80005ba <SystemClock_Config+0x82>
  {
    Error_Handler();
 80005b6:	f000 f9eb 	bl	8000990 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_TIM1;
 80005ba:	f241 0301 	movw	r3, #4097	; 0x1001
 80005be:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80005c0:	2300      	movs	r3, #0
 80005c2:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 80005c4:	2300      	movs	r3, #0
 80005c6:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005c8:	1d3b      	adds	r3, r7, #4
 80005ca:	4618      	mov	r0, r3
 80005cc:	f002 fada 	bl	8002b84 <HAL_RCCEx_PeriphCLKConfig>
 80005d0:	4603      	mov	r3, r0
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d001      	beq.n	80005da <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80005d6:	f000 f9db 	bl	8000990 <Error_Handler>
  }
}
 80005da:	bf00      	nop
 80005dc:	3758      	adds	r7, #88	; 0x58
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
	...

080005e4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b09a      	sub	sp, #104	; 0x68
 80005e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80005ea:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80005ee:	2200      	movs	r2, #0
 80005f0:	601a      	str	r2, [r3, #0]
 80005f2:	605a      	str	r2, [r3, #4]
 80005f4:	609a      	str	r2, [r3, #8]
 80005f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005f8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80005fc:	2200      	movs	r2, #0
 80005fe:	601a      	str	r2, [r3, #0]
 8000600:	605a      	str	r2, [r3, #4]
 8000602:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000604:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000608:	2200      	movs	r2, #0
 800060a:	601a      	str	r2, [r3, #0]
 800060c:	605a      	str	r2, [r3, #4]
 800060e:	609a      	str	r2, [r3, #8]
 8000610:	60da      	str	r2, [r3, #12]
 8000612:	611a      	str	r2, [r3, #16]
 8000614:	615a      	str	r2, [r3, #20]
 8000616:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000618:	1d3b      	adds	r3, r7, #4
 800061a:	222c      	movs	r2, #44	; 0x2c
 800061c:	2100      	movs	r1, #0
 800061e:	4618      	mov	r0, r3
 8000620:	f004 fdba 	bl	8005198 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000624:	4b49      	ldr	r3, [pc, #292]	; (800074c <MX_TIM1_Init+0x168>)
 8000626:	4a4a      	ldr	r2, [pc, #296]	; (8000750 <MX_TIM1_Init+0x16c>)
 8000628:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 79;
 800062a:	4b48      	ldr	r3, [pc, #288]	; (800074c <MX_TIM1_Init+0x168>)
 800062c:	224f      	movs	r2, #79	; 0x4f
 800062e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000630:	4b46      	ldr	r3, [pc, #280]	; (800074c <MX_TIM1_Init+0x168>)
 8000632:	2200      	movs	r2, #0
 8000634:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8000636:	4b45      	ldr	r3, [pc, #276]	; (800074c <MX_TIM1_Init+0x168>)
 8000638:	f240 32e7 	movw	r2, #999	; 0x3e7
 800063c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800063e:	4b43      	ldr	r3, [pc, #268]	; (800074c <MX_TIM1_Init+0x168>)
 8000640:	2200      	movs	r2, #0
 8000642:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000644:	4b41      	ldr	r3, [pc, #260]	; (800074c <MX_TIM1_Init+0x168>)
 8000646:	2200      	movs	r2, #0
 8000648:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800064a:	4b40      	ldr	r3, [pc, #256]	; (800074c <MX_TIM1_Init+0x168>)
 800064c:	2200      	movs	r2, #0
 800064e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000650:	483e      	ldr	r0, [pc, #248]	; (800074c <MX_TIM1_Init+0x168>)
 8000652:	f002 fbbd 	bl	8002dd0 <HAL_TIM_Base_Init>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d001      	beq.n	8000660 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 800065c:	f000 f998 	bl	8000990 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000660:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000664:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000666:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800066a:	4619      	mov	r1, r3
 800066c:	4837      	ldr	r0, [pc, #220]	; (800074c <MX_TIM1_Init+0x168>)
 800066e:	f002 fe67 	bl	8003340 <HAL_TIM_ConfigClockSource>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000678:	f000 f98a 	bl	8000990 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800067c:	4833      	ldr	r0, [pc, #204]	; (800074c <MX_TIM1_Init+0x168>)
 800067e:	f002 fbfe 	bl	8002e7e <HAL_TIM_PWM_Init>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d001      	beq.n	800068c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000688:	f000 f982 	bl	8000990 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800068c:	2300      	movs	r3, #0
 800068e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000690:	2300      	movs	r3, #0
 8000692:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000694:	2300      	movs	r3, #0
 8000696:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000698:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800069c:	4619      	mov	r1, r3
 800069e:	482b      	ldr	r0, [pc, #172]	; (800074c <MX_TIM1_Init+0x168>)
 80006a0:	f003 faea 	bl	8003c78 <HAL_TIMEx_MasterConfigSynchronization>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80006aa:	f000 f971 	bl	8000990 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80006ae:	2360      	movs	r3, #96	; 0x60
 80006b0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80006b2:	2300      	movs	r3, #0
 80006b4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80006b6:	2300      	movs	r3, #0
 80006b8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80006ba:	2300      	movs	r3, #0
 80006bc:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80006be:	2300      	movs	r3, #0
 80006c0:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80006c2:	2300      	movs	r3, #0
 80006c4:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80006c6:	2300      	movs	r3, #0
 80006c8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80006ca:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80006ce:	2200      	movs	r2, #0
 80006d0:	4619      	mov	r1, r3
 80006d2:	481e      	ldr	r0, [pc, #120]	; (800074c <MX_TIM1_Init+0x168>)
 80006d4:	f002 fd20 	bl	8003118 <HAL_TIM_PWM_ConfigChannel>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80006de:	f000 f957 	bl	8000990 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80006e2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80006e6:	220c      	movs	r2, #12
 80006e8:	4619      	mov	r1, r3
 80006ea:	4818      	ldr	r0, [pc, #96]	; (800074c <MX_TIM1_Init+0x168>)
 80006ec:	f002 fd14 	bl	8003118 <HAL_TIM_PWM_ConfigChannel>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 80006f6:	f000 f94b 	bl	8000990 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80006fa:	2300      	movs	r3, #0
 80006fc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80006fe:	2300      	movs	r3, #0
 8000700:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000702:	2300      	movs	r3, #0
 8000704:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000706:	2300      	movs	r3, #0
 8000708:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800070a:	2300      	movs	r3, #0
 800070c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800070e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000712:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000714:	2300      	movs	r3, #0
 8000716:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000718:	2300      	movs	r3, #0
 800071a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800071c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000720:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000722:	2300      	movs	r3, #0
 8000724:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000726:	2300      	movs	r3, #0
 8000728:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800072a:	1d3b      	adds	r3, r7, #4
 800072c:	4619      	mov	r1, r3
 800072e:	4807      	ldr	r0, [pc, #28]	; (800074c <MX_TIM1_Init+0x168>)
 8000730:	f003 fb10 	bl	8003d54 <HAL_TIMEx_ConfigBreakDeadTime>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 800073a:	f000 f929 	bl	8000990 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800073e:	4803      	ldr	r0, [pc, #12]	; (800074c <MX_TIM1_Init+0x168>)
 8000740:	f000 f972 	bl	8000a28 <HAL_TIM_MspPostInit>

}
 8000744:	bf00      	nop
 8000746:	3768      	adds	r7, #104	; 0x68
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}
 800074c:	20000178 	.word	0x20000178
 8000750:	40012c00 	.word	0x40012c00

08000754 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000758:	4b14      	ldr	r3, [pc, #80]	; (80007ac <MX_USART1_UART_Init+0x58>)
 800075a:	4a15      	ldr	r2, [pc, #84]	; (80007b0 <MX_USART1_UART_Init+0x5c>)
 800075c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800075e:	4b13      	ldr	r3, [pc, #76]	; (80007ac <MX_USART1_UART_Init+0x58>)
 8000760:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000764:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000766:	4b11      	ldr	r3, [pc, #68]	; (80007ac <MX_USART1_UART_Init+0x58>)
 8000768:	2200      	movs	r2, #0
 800076a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800076c:	4b0f      	ldr	r3, [pc, #60]	; (80007ac <MX_USART1_UART_Init+0x58>)
 800076e:	2200      	movs	r2, #0
 8000770:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000772:	4b0e      	ldr	r3, [pc, #56]	; (80007ac <MX_USART1_UART_Init+0x58>)
 8000774:	2200      	movs	r2, #0
 8000776:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000778:	4b0c      	ldr	r3, [pc, #48]	; (80007ac <MX_USART1_UART_Init+0x58>)
 800077a:	220c      	movs	r2, #12
 800077c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800077e:	4b0b      	ldr	r3, [pc, #44]	; (80007ac <MX_USART1_UART_Init+0x58>)
 8000780:	2200      	movs	r2, #0
 8000782:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000784:	4b09      	ldr	r3, [pc, #36]	; (80007ac <MX_USART1_UART_Init+0x58>)
 8000786:	2200      	movs	r2, #0
 8000788:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800078a:	4b08      	ldr	r3, [pc, #32]	; (80007ac <MX_USART1_UART_Init+0x58>)
 800078c:	2200      	movs	r2, #0
 800078e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000790:	4b06      	ldr	r3, [pc, #24]	; (80007ac <MX_USART1_UART_Init+0x58>)
 8000792:	2200      	movs	r2, #0
 8000794:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000796:	4805      	ldr	r0, [pc, #20]	; (80007ac <MX_USART1_UART_Init+0x58>)
 8000798:	f003 fb54 	bl	8003e44 <HAL_UART_Init>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80007a2:	f000 f8f5 	bl	8000990 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80007a6:	bf00      	nop
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	200000f4 	.word	0x200000f4
 80007b0:	40013800 	.word	0x40013800

080007b4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007b8:	4b14      	ldr	r3, [pc, #80]	; (800080c <MX_USART2_UART_Init+0x58>)
 80007ba:	4a15      	ldr	r2, [pc, #84]	; (8000810 <MX_USART2_UART_Init+0x5c>)
 80007bc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80007be:	4b13      	ldr	r3, [pc, #76]	; (800080c <MX_USART2_UART_Init+0x58>)
 80007c0:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80007c4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007c6:	4b11      	ldr	r3, [pc, #68]	; (800080c <MX_USART2_UART_Init+0x58>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007cc:	4b0f      	ldr	r3, [pc, #60]	; (800080c <MX_USART2_UART_Init+0x58>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007d2:	4b0e      	ldr	r3, [pc, #56]	; (800080c <MX_USART2_UART_Init+0x58>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007d8:	4b0c      	ldr	r3, [pc, #48]	; (800080c <MX_USART2_UART_Init+0x58>)
 80007da:	220c      	movs	r2, #12
 80007dc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007de:	4b0b      	ldr	r3, [pc, #44]	; (800080c <MX_USART2_UART_Init+0x58>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007e4:	4b09      	ldr	r3, [pc, #36]	; (800080c <MX_USART2_UART_Init+0x58>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007ea:	4b08      	ldr	r3, [pc, #32]	; (800080c <MX_USART2_UART_Init+0x58>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007f0:	4b06      	ldr	r3, [pc, #24]	; (800080c <MX_USART2_UART_Init+0x58>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007f6:	4805      	ldr	r0, [pc, #20]	; (800080c <MX_USART2_UART_Init+0x58>)
 80007f8:	f003 fb24 	bl	8003e44 <HAL_UART_Init>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000802:	f000 f8c5 	bl	8000990 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000806:	bf00      	nop
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	200001c4 	.word	0x200001c4
 8000810:	40004400 	.word	0x40004400

08000814 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800081a:	4b0c      	ldr	r3, [pc, #48]	; (800084c <MX_DMA_Init+0x38>)
 800081c:	695b      	ldr	r3, [r3, #20]
 800081e:	4a0b      	ldr	r2, [pc, #44]	; (800084c <MX_DMA_Init+0x38>)
 8000820:	f043 0301 	orr.w	r3, r3, #1
 8000824:	6153      	str	r3, [r2, #20]
 8000826:	4b09      	ldr	r3, [pc, #36]	; (800084c <MX_DMA_Init+0x38>)
 8000828:	695b      	ldr	r3, [r3, #20]
 800082a:	f003 0301 	and.w	r3, r3, #1
 800082e:	607b      	str	r3, [r7, #4]
 8000830:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000832:	2200      	movs	r2, #0
 8000834:	2100      	movs	r1, #0
 8000836:	200f      	movs	r0, #15
 8000838:	f000 fc67 	bl	800110a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 800083c:	200f      	movs	r0, #15
 800083e:	f000 fc80 	bl	8001142 <HAL_NVIC_EnableIRQ>

}
 8000842:	bf00      	nop
 8000844:	3708      	adds	r7, #8
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	40021000 	.word	0x40021000

08000850 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b088      	sub	sp, #32
 8000854:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000856:	f107 030c 	add.w	r3, r7, #12
 800085a:	2200      	movs	r2, #0
 800085c:	601a      	str	r2, [r3, #0]
 800085e:	605a      	str	r2, [r3, #4]
 8000860:	609a      	str	r2, [r3, #8]
 8000862:	60da      	str	r2, [r3, #12]
 8000864:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000866:	4b48      	ldr	r3, [pc, #288]	; (8000988 <MX_GPIO_Init+0x138>)
 8000868:	695b      	ldr	r3, [r3, #20]
 800086a:	4a47      	ldr	r2, [pc, #284]	; (8000988 <MX_GPIO_Init+0x138>)
 800086c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000870:	6153      	str	r3, [r2, #20]
 8000872:	4b45      	ldr	r3, [pc, #276]	; (8000988 <MX_GPIO_Init+0x138>)
 8000874:	695b      	ldr	r3, [r3, #20]
 8000876:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800087a:	60bb      	str	r3, [r7, #8]
 800087c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800087e:	4b42      	ldr	r3, [pc, #264]	; (8000988 <MX_GPIO_Init+0x138>)
 8000880:	695b      	ldr	r3, [r3, #20]
 8000882:	4a41      	ldr	r2, [pc, #260]	; (8000988 <MX_GPIO_Init+0x138>)
 8000884:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000888:	6153      	str	r3, [r2, #20]
 800088a:	4b3f      	ldr	r3, [pc, #252]	; (8000988 <MX_GPIO_Init+0x138>)
 800088c:	695b      	ldr	r3, [r3, #20]
 800088e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000892:	607b      	str	r3, [r7, #4]
 8000894:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000896:	4b3c      	ldr	r3, [pc, #240]	; (8000988 <MX_GPIO_Init+0x138>)
 8000898:	695b      	ldr	r3, [r3, #20]
 800089a:	4a3b      	ldr	r2, [pc, #236]	; (8000988 <MX_GPIO_Init+0x138>)
 800089c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80008a0:	6153      	str	r3, [r2, #20]
 80008a2:	4b39      	ldr	r3, [pc, #228]	; (8000988 <MX_GPIO_Init+0x138>)
 80008a4:	695b      	ldr	r3, [r3, #20]
 80008a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80008aa:	603b      	str	r3, [r7, #0]
 80008ac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MotorAIN2_Pin|MotorAIN1_Pin|BT_Enable_Pin, GPIO_PIN_RESET);
 80008ae:	2200      	movs	r2, #0
 80008b0:	2183      	movs	r1, #131	; 0x83
 80008b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008b6:	f000 fff7 	bl	80018a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MotorSTBY_Pin|LED3_Pin|MotorBN2_Pin|MotorBN1_Pin, GPIO_PIN_RESET);
 80008ba:	2200      	movs	r2, #0
 80008bc:	21ca      	movs	r1, #202	; 0xca
 80008be:	4833      	ldr	r0, [pc, #204]	; (800098c <MX_GPIO_Init+0x13c>)
 80008c0:	f000 fff2 	bl	80018a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : MotorAIN2_Pin MotorAIN1_Pin */
  GPIO_InitStruct.Pin = MotorAIN2_Pin|MotorAIN1_Pin;
 80008c4:	2303      	movs	r3, #3
 80008c6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c8:	2301      	movs	r3, #1
 80008ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008cc:	2300      	movs	r3, #0
 80008ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d0:	2300      	movs	r3, #0
 80008d2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008d4:	f107 030c 	add.w	r3, r7, #12
 80008d8:	4619      	mov	r1, r3
 80008da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008de:	f000 fe59 	bl	8001594 <HAL_GPIO_Init>

  /*Configure GPIO pin : GAS_IN_Pin */
  GPIO_InitStruct.Pin = GAS_IN_Pin;
 80008e2:	2340      	movs	r3, #64	; 0x40
 80008e4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008e6:	2300      	movs	r3, #0
 80008e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ea:	2300      	movs	r3, #0
 80008ec:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GAS_IN_GPIO_Port, &GPIO_InitStruct);
 80008ee:	f107 030c 	add.w	r3, r7, #12
 80008f2:	4619      	mov	r1, r3
 80008f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008f8:	f000 fe4c 	bl	8001594 <HAL_GPIO_Init>

  /*Configure GPIO pin : BT_Enable_Pin */
  GPIO_InitStruct.Pin = BT_Enable_Pin;
 80008fc:	2380      	movs	r3, #128	; 0x80
 80008fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000900:	2301      	movs	r3, #1
 8000902:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000904:	2301      	movs	r3, #1
 8000906:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000908:	2300      	movs	r3, #0
 800090a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BT_Enable_GPIO_Port, &GPIO_InitStruct);
 800090c:	f107 030c 	add.w	r3, r7, #12
 8000910:	4619      	mov	r1, r3
 8000912:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000916:	f000 fe3d 	bl	8001594 <HAL_GPIO_Init>

  /*Configure GPIO pins : LeftSensor_Pin RightSensor_Pin CenterSensor_Pin */
  GPIO_InitStruct.Pin = LeftSensor_Pin|RightSensor_Pin|CenterSensor_Pin;
 800091a:	2331      	movs	r3, #49	; 0x31
 800091c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800091e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000922:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000924:	2300      	movs	r3, #0
 8000926:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000928:	f107 030c 	add.w	r3, r7, #12
 800092c:	4619      	mov	r1, r3
 800092e:	4817      	ldr	r0, [pc, #92]	; (800098c <MX_GPIO_Init+0x13c>)
 8000930:	f000 fe30 	bl	8001594 <HAL_GPIO_Init>

  /*Configure GPIO pins : MotorSTBY_Pin LED3_Pin MotorBN2_Pin MotorBN1_Pin */
  GPIO_InitStruct.Pin = MotorSTBY_Pin|LED3_Pin|MotorBN2_Pin|MotorBN1_Pin;
 8000934:	23ca      	movs	r3, #202	; 0xca
 8000936:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000938:	2301      	movs	r3, #1
 800093a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093c:	2300      	movs	r3, #0
 800093e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000940:	2300      	movs	r3, #0
 8000942:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000944:	f107 030c 	add.w	r3, r7, #12
 8000948:	4619      	mov	r1, r3
 800094a:	4810      	ldr	r0, [pc, #64]	; (800098c <MX_GPIO_Init+0x13c>)
 800094c:	f000 fe22 	bl	8001594 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000950:	2200      	movs	r2, #0
 8000952:	2100      	movs	r1, #0
 8000954:	2006      	movs	r0, #6
 8000956:	f000 fbd8 	bl	800110a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800095a:	2006      	movs	r0, #6
 800095c:	f000 fbf1 	bl	8001142 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8000960:	2200      	movs	r2, #0
 8000962:	2100      	movs	r1, #0
 8000964:	200a      	movs	r0, #10
 8000966:	f000 fbd0 	bl	800110a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800096a:	200a      	movs	r0, #10
 800096c:	f000 fbe9 	bl	8001142 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000970:	2200      	movs	r2, #0
 8000972:	2100      	movs	r1, #0
 8000974:	2017      	movs	r0, #23
 8000976:	f000 fbc8 	bl	800110a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800097a:	2017      	movs	r0, #23
 800097c:	f000 fbe1 	bl	8001142 <HAL_NVIC_EnableIRQ>

}
 8000980:	bf00      	nop
 8000982:	3720      	adds	r7, #32
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}
 8000988:	40021000 	.word	0x40021000
 800098c:	48000400 	.word	0x48000400

08000990 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000994:	bf00      	nop
 8000996:	46bd      	mov	sp, r7
 8000998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099c:	4770      	bx	lr
	...

080009a0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	b083      	sub	sp, #12
 80009a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009a6:	4b0f      	ldr	r3, [pc, #60]	; (80009e4 <HAL_MspInit+0x44>)
 80009a8:	699b      	ldr	r3, [r3, #24]
 80009aa:	4a0e      	ldr	r2, [pc, #56]	; (80009e4 <HAL_MspInit+0x44>)
 80009ac:	f043 0301 	orr.w	r3, r3, #1
 80009b0:	6193      	str	r3, [r2, #24]
 80009b2:	4b0c      	ldr	r3, [pc, #48]	; (80009e4 <HAL_MspInit+0x44>)
 80009b4:	699b      	ldr	r3, [r3, #24]
 80009b6:	f003 0301 	and.w	r3, r3, #1
 80009ba:	607b      	str	r3, [r7, #4]
 80009bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009be:	4b09      	ldr	r3, [pc, #36]	; (80009e4 <HAL_MspInit+0x44>)
 80009c0:	69db      	ldr	r3, [r3, #28]
 80009c2:	4a08      	ldr	r2, [pc, #32]	; (80009e4 <HAL_MspInit+0x44>)
 80009c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009c8:	61d3      	str	r3, [r2, #28]
 80009ca:	4b06      	ldr	r3, [pc, #24]	; (80009e4 <HAL_MspInit+0x44>)
 80009cc:	69db      	ldr	r3, [r3, #28]
 80009ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009d2:	603b      	str	r3, [r7, #0]
 80009d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009d6:	bf00      	nop
 80009d8:	370c      	adds	r7, #12
 80009da:	46bd      	mov	sp, r7
 80009dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e0:	4770      	bx	lr
 80009e2:	bf00      	nop
 80009e4:	40021000 	.word	0x40021000

080009e8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80009e8:	b480      	push	{r7}
 80009ea:	b085      	sub	sp, #20
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	4a0a      	ldr	r2, [pc, #40]	; (8000a20 <HAL_TIM_Base_MspInit+0x38>)
 80009f6:	4293      	cmp	r3, r2
 80009f8:	d10b      	bne.n	8000a12 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80009fa:	4b0a      	ldr	r3, [pc, #40]	; (8000a24 <HAL_TIM_Base_MspInit+0x3c>)
 80009fc:	699b      	ldr	r3, [r3, #24]
 80009fe:	4a09      	ldr	r2, [pc, #36]	; (8000a24 <HAL_TIM_Base_MspInit+0x3c>)
 8000a00:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000a04:	6193      	str	r3, [r2, #24]
 8000a06:	4b07      	ldr	r3, [pc, #28]	; (8000a24 <HAL_TIM_Base_MspInit+0x3c>)
 8000a08:	699b      	ldr	r3, [r3, #24]
 8000a0a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000a0e:	60fb      	str	r3, [r7, #12]
 8000a10:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000a12:	bf00      	nop
 8000a14:	3714      	adds	r7, #20
 8000a16:	46bd      	mov	sp, r7
 8000a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1c:	4770      	bx	lr
 8000a1e:	bf00      	nop
 8000a20:	40012c00 	.word	0x40012c00
 8000a24:	40021000 	.word	0x40021000

08000a28 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b088      	sub	sp, #32
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a30:	f107 030c 	add.w	r3, r7, #12
 8000a34:	2200      	movs	r2, #0
 8000a36:	601a      	str	r2, [r3, #0]
 8000a38:	605a      	str	r2, [r3, #4]
 8000a3a:	609a      	str	r2, [r3, #8]
 8000a3c:	60da      	str	r2, [r3, #12]
 8000a3e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	4a1b      	ldr	r2, [pc, #108]	; (8000ab4 <HAL_TIM_MspPostInit+0x8c>)
 8000a46:	4293      	cmp	r3, r2
 8000a48:	d12f      	bne.n	8000aaa <HAL_TIM_MspPostInit+0x82>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a4a:	4b1b      	ldr	r3, [pc, #108]	; (8000ab8 <HAL_TIM_MspPostInit+0x90>)
 8000a4c:	695b      	ldr	r3, [r3, #20]
 8000a4e:	4a1a      	ldr	r2, [pc, #104]	; (8000ab8 <HAL_TIM_MspPostInit+0x90>)
 8000a50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a54:	6153      	str	r3, [r2, #20]
 8000a56:	4b18      	ldr	r3, [pc, #96]	; (8000ab8 <HAL_TIM_MspPostInit+0x90>)
 8000a58:	695b      	ldr	r3, [r3, #20]
 8000a5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a5e:	60bb      	str	r3, [r7, #8]
 8000a60:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = MotorPWMA_Pin;
 8000a62:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a66:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a68:	2302      	movs	r3, #2
 8000a6a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a70:	2300      	movs	r3, #0
 8000a72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000a74:	2306      	movs	r3, #6
 8000a76:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(MotorPWMA_GPIO_Port, &GPIO_InitStruct);
 8000a78:	f107 030c 	add.w	r3, r7, #12
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a82:	f000 fd87 	bl	8001594 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MotorPWMB_Pin;
 8000a86:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000a8a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a8c:	2302      	movs	r3, #2
 8000a8e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a90:	2300      	movs	r3, #0
 8000a92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a94:	2300      	movs	r3, #0
 8000a96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF11_TIM1;
 8000a98:	230b      	movs	r3, #11
 8000a9a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(MotorPWMB_GPIO_Port, &GPIO_InitStruct);
 8000a9c:	f107 030c 	add.w	r3, r7, #12
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aa6:	f000 fd75 	bl	8001594 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000aaa:	bf00      	nop
 8000aac:	3720      	adds	r7, #32
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	40012c00 	.word	0x40012c00
 8000ab8:	40021000 	.word	0x40021000

08000abc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b08c      	sub	sp, #48	; 0x30
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac4:	f107 031c 	add.w	r3, r7, #28
 8000ac8:	2200      	movs	r2, #0
 8000aca:	601a      	str	r2, [r3, #0]
 8000acc:	605a      	str	r2, [r3, #4]
 8000ace:	609a      	str	r2, [r3, #8]
 8000ad0:	60da      	str	r2, [r3, #12]
 8000ad2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	4a47      	ldr	r2, [pc, #284]	; (8000bf8 <HAL_UART_MspInit+0x13c>)
 8000ada:	4293      	cmp	r3, r2
 8000adc:	d158      	bne.n	8000b90 <HAL_UART_MspInit+0xd4>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ade:	4b47      	ldr	r3, [pc, #284]	; (8000bfc <HAL_UART_MspInit+0x140>)
 8000ae0:	699b      	ldr	r3, [r3, #24]
 8000ae2:	4a46      	ldr	r2, [pc, #280]	; (8000bfc <HAL_UART_MspInit+0x140>)
 8000ae4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ae8:	6193      	str	r3, [r2, #24]
 8000aea:	4b44      	ldr	r3, [pc, #272]	; (8000bfc <HAL_UART_MspInit+0x140>)
 8000aec:	699b      	ldr	r3, [r3, #24]
 8000aee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000af2:	61bb      	str	r3, [r7, #24]
 8000af4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000af6:	4b41      	ldr	r3, [pc, #260]	; (8000bfc <HAL_UART_MspInit+0x140>)
 8000af8:	695b      	ldr	r3, [r3, #20]
 8000afa:	4a40      	ldr	r2, [pc, #256]	; (8000bfc <HAL_UART_MspInit+0x140>)
 8000afc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b00:	6153      	str	r3, [r2, #20]
 8000b02:	4b3e      	ldr	r3, [pc, #248]	; (8000bfc <HAL_UART_MspInit+0x140>)
 8000b04:	695b      	ldr	r3, [r3, #20]
 8000b06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b0a:	617b      	str	r3, [r7, #20]
 8000b0c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000b0e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000b12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b14:	2302      	movs	r3, #2
 8000b16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b1c:	2303      	movs	r3, #3
 8000b1e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000b20:	2307      	movs	r3, #7
 8000b22:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b24:	f107 031c 	add.w	r3, r7, #28
 8000b28:	4619      	mov	r1, r3
 8000b2a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b2e:	f000 fd31 	bl	8001594 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8000b32:	4b33      	ldr	r3, [pc, #204]	; (8000c00 <HAL_UART_MspInit+0x144>)
 8000b34:	4a33      	ldr	r2, [pc, #204]	; (8000c04 <HAL_UART_MspInit+0x148>)
 8000b36:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b38:	4b31      	ldr	r3, [pc, #196]	; (8000c00 <HAL_UART_MspInit+0x144>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b3e:	4b30      	ldr	r3, [pc, #192]	; (8000c00 <HAL_UART_MspInit+0x144>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000b44:	4b2e      	ldr	r3, [pc, #184]	; (8000c00 <HAL_UART_MspInit+0x144>)
 8000b46:	2280      	movs	r2, #128	; 0x80
 8000b48:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000b4a:	4b2d      	ldr	r3, [pc, #180]	; (8000c00 <HAL_UART_MspInit+0x144>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000b50:	4b2b      	ldr	r3, [pc, #172]	; (8000c00 <HAL_UART_MspInit+0x144>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8000b56:	4b2a      	ldr	r3, [pc, #168]	; (8000c00 <HAL_UART_MspInit+0x144>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000b5c:	4b28      	ldr	r3, [pc, #160]	; (8000c00 <HAL_UART_MspInit+0x144>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000b62:	4827      	ldr	r0, [pc, #156]	; (8000c00 <HAL_UART_MspInit+0x144>)
 8000b64:	f000 fb07 	bl	8001176 <HAL_DMA_Init>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d001      	beq.n	8000b72 <HAL_UART_MspInit+0xb6>
    {
      Error_Handler();
 8000b6e:	f7ff ff0f 	bl	8000990 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	4a22      	ldr	r2, [pc, #136]	; (8000c00 <HAL_UART_MspInit+0x144>)
 8000b76:	671a      	str	r2, [r3, #112]	; 0x70
 8000b78:	4a21      	ldr	r2, [pc, #132]	; (8000c00 <HAL_UART_MspInit+0x144>)
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000b7e:	2200      	movs	r2, #0
 8000b80:	2100      	movs	r1, #0
 8000b82:	2025      	movs	r0, #37	; 0x25
 8000b84:	f000 fac1 	bl	800110a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000b88:	2025      	movs	r0, #37	; 0x25
 8000b8a:	f000 fada 	bl	8001142 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b8e:	e02e      	b.n	8000bee <HAL_UART_MspInit+0x132>
  else if(huart->Instance==USART2)
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	4a1c      	ldr	r2, [pc, #112]	; (8000c08 <HAL_UART_MspInit+0x14c>)
 8000b96:	4293      	cmp	r3, r2
 8000b98:	d129      	bne.n	8000bee <HAL_UART_MspInit+0x132>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b9a:	4b18      	ldr	r3, [pc, #96]	; (8000bfc <HAL_UART_MspInit+0x140>)
 8000b9c:	69db      	ldr	r3, [r3, #28]
 8000b9e:	4a17      	ldr	r2, [pc, #92]	; (8000bfc <HAL_UART_MspInit+0x140>)
 8000ba0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ba4:	61d3      	str	r3, [r2, #28]
 8000ba6:	4b15      	ldr	r3, [pc, #84]	; (8000bfc <HAL_UART_MspInit+0x140>)
 8000ba8:	69db      	ldr	r3, [r3, #28]
 8000baa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bae:	613b      	str	r3, [r7, #16]
 8000bb0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bb2:	4b12      	ldr	r3, [pc, #72]	; (8000bfc <HAL_UART_MspInit+0x140>)
 8000bb4:	695b      	ldr	r3, [r3, #20]
 8000bb6:	4a11      	ldr	r2, [pc, #68]	; (8000bfc <HAL_UART_MspInit+0x140>)
 8000bb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bbc:	6153      	str	r3, [r2, #20]
 8000bbe:	4b0f      	ldr	r3, [pc, #60]	; (8000bfc <HAL_UART_MspInit+0x140>)
 8000bc0:	695b      	ldr	r3, [r3, #20]
 8000bc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bc6:	60fb      	str	r3, [r7, #12]
 8000bc8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8000bca:	f248 0304 	movw	r3, #32772	; 0x8004
 8000bce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd0:	2302      	movs	r3, #2
 8000bd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bd8:	2303      	movs	r3, #3
 8000bda:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000bdc:	2307      	movs	r3, #7
 8000bde:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000be0:	f107 031c 	add.w	r3, r7, #28
 8000be4:	4619      	mov	r1, r3
 8000be6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bea:	f000 fcd3 	bl	8001594 <HAL_GPIO_Init>
}
 8000bee:	bf00      	nop
 8000bf0:	3730      	adds	r7, #48	; 0x30
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	40013800 	.word	0x40013800
 8000bfc:	40021000 	.word	0x40021000
 8000c00:	200000b0 	.word	0x200000b0
 8000c04:	40020058 	.word	0x40020058
 8000c08:	40004400 	.word	0x40004400

08000c0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000c10:	bf00      	nop
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr

08000c1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c1a:	b480      	push	{r7}
 8000c1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c1e:	e7fe      	b.n	8000c1e <HardFault_Handler+0x4>

08000c20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c24:	e7fe      	b.n	8000c24 <MemManage_Handler+0x4>

08000c26 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c26:	b480      	push	{r7}
 8000c28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c2a:	e7fe      	b.n	8000c2a <BusFault_Handler+0x4>

08000c2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c30:	e7fe      	b.n	8000c30 <UsageFault_Handler+0x4>

08000c32 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c32:	b480      	push	{r7}
 8000c34:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c36:	bf00      	nop
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3e:	4770      	bx	lr

08000c40 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c44:	bf00      	nop
 8000c46:	46bd      	mov	sp, r7
 8000c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4c:	4770      	bx	lr

08000c4e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c4e:	b480      	push	{r7}
 8000c50:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c52:	bf00      	nop
 8000c54:	46bd      	mov	sp, r7
 8000c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5a:	4770      	bx	lr

08000c5c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c60:	f000 f936 	bl	8000ed0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c64:	bf00      	nop
 8000c66:	bd80      	pop	{r7, pc}

08000c68 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000c6c:	2001      	movs	r0, #1
 8000c6e:	f000 fe33 	bl	80018d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000c72:	bf00      	nop
 8000c74:	bd80      	pop	{r7, pc}

08000c76 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8000c76:	b580      	push	{r7, lr}
 8000c78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8000c7a:	2010      	movs	r0, #16
 8000c7c:	f000 fe2c 	bl	80018d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8000c80:	bf00      	nop
 8000c82:	bd80      	pop	{r7, pc}

08000c84 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000c88:	4802      	ldr	r0, [pc, #8]	; (8000c94 <DMA1_Channel5_IRQHandler+0x10>)
 8000c8a:	f000 fb91 	bl	80013b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8000c8e:	bf00      	nop
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	200000b0 	.word	0x200000b0

08000c98 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8000c9c:	2020      	movs	r0, #32
 8000c9e:	f000 fe1b 	bl	80018d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000ca2:	bf00      	nop
 8000ca4:	bd80      	pop	{r7, pc}
	...

08000ca8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXT line 25.
  */
void USART1_IRQHandler(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000cac:	4802      	ldr	r0, [pc, #8]	; (8000cb8 <USART1_IRQHandler+0x10>)
 8000cae:	f003 f9f9 	bl	80040a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000cb2:	bf00      	nop
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	200000f4 	.word	0x200000f4

08000cbc <_read>:
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b086      	sub	sp, #24
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	60f8      	str	r0, [r7, #12]
 8000cc4:	60b9      	str	r1, [r7, #8]
 8000cc6:	607a      	str	r2, [r7, #4]
 8000cc8:	2300      	movs	r3, #0
 8000cca:	617b      	str	r3, [r7, #20]
 8000ccc:	e00a      	b.n	8000ce4 <_read+0x28>
 8000cce:	f3af 8000 	nop.w
 8000cd2:	4601      	mov	r1, r0
 8000cd4:	68bb      	ldr	r3, [r7, #8]
 8000cd6:	1c5a      	adds	r2, r3, #1
 8000cd8:	60ba      	str	r2, [r7, #8]
 8000cda:	b2ca      	uxtb	r2, r1
 8000cdc:	701a      	strb	r2, [r3, #0]
 8000cde:	697b      	ldr	r3, [r7, #20]
 8000ce0:	3301      	adds	r3, #1
 8000ce2:	617b      	str	r3, [r7, #20]
 8000ce4:	697a      	ldr	r2, [r7, #20]
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	429a      	cmp	r2, r3
 8000cea:	dbf0      	blt.n	8000cce <_read+0x12>
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	4618      	mov	r0, r3
 8000cf0:	3718      	adds	r7, #24
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}

08000cf6 <_close>:
 8000cf6:	b480      	push	{r7}
 8000cf8:	b083      	sub	sp, #12
 8000cfa:	af00      	add	r7, sp, #0
 8000cfc:	6078      	str	r0, [r7, #4]
 8000cfe:	f04f 33ff 	mov.w	r3, #4294967295
 8000d02:	4618      	mov	r0, r3
 8000d04:	370c      	adds	r7, #12
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr

08000d0e <_fstat>:
 8000d0e:	b480      	push	{r7}
 8000d10:	b083      	sub	sp, #12
 8000d12:	af00      	add	r7, sp, #0
 8000d14:	6078      	str	r0, [r7, #4]
 8000d16:	6039      	str	r1, [r7, #0]
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d1e:	605a      	str	r2, [r3, #4]
 8000d20:	2300      	movs	r3, #0
 8000d22:	4618      	mov	r0, r3
 8000d24:	370c      	adds	r7, #12
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr

08000d2e <_isatty>:
 8000d2e:	b480      	push	{r7}
 8000d30:	b083      	sub	sp, #12
 8000d32:	af00      	add	r7, sp, #0
 8000d34:	6078      	str	r0, [r7, #4]
 8000d36:	2301      	movs	r3, #1
 8000d38:	4618      	mov	r0, r3
 8000d3a:	370c      	adds	r7, #12
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d42:	4770      	bx	lr

08000d44 <_lseek>:
 8000d44:	b480      	push	{r7}
 8000d46:	b085      	sub	sp, #20
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	60f8      	str	r0, [r7, #12]
 8000d4c:	60b9      	str	r1, [r7, #8]
 8000d4e:	607a      	str	r2, [r7, #4]
 8000d50:	2300      	movs	r3, #0
 8000d52:	4618      	mov	r0, r3
 8000d54:	3714      	adds	r7, #20
 8000d56:	46bd      	mov	sp, r7
 8000d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5c:	4770      	bx	lr
	...

08000d60 <_sbrk>:
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b086      	sub	sp, #24
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
 8000d68:	4a14      	ldr	r2, [pc, #80]	; (8000dbc <_sbrk+0x5c>)
 8000d6a:	4b15      	ldr	r3, [pc, #84]	; (8000dc0 <_sbrk+0x60>)
 8000d6c:	1ad3      	subs	r3, r2, r3
 8000d6e:	617b      	str	r3, [r7, #20]
 8000d70:	697b      	ldr	r3, [r7, #20]
 8000d72:	613b      	str	r3, [r7, #16]
 8000d74:	4b13      	ldr	r3, [pc, #76]	; (8000dc4 <_sbrk+0x64>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d102      	bne.n	8000d82 <_sbrk+0x22>
 8000d7c:	4b11      	ldr	r3, [pc, #68]	; (8000dc4 <_sbrk+0x64>)
 8000d7e:	4a12      	ldr	r2, [pc, #72]	; (8000dc8 <_sbrk+0x68>)
 8000d80:	601a      	str	r2, [r3, #0]
 8000d82:	4b10      	ldr	r3, [pc, #64]	; (8000dc4 <_sbrk+0x64>)
 8000d84:	681a      	ldr	r2, [r3, #0]
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	4413      	add	r3, r2
 8000d8a:	693a      	ldr	r2, [r7, #16]
 8000d8c:	429a      	cmp	r2, r3
 8000d8e:	d207      	bcs.n	8000da0 <_sbrk+0x40>
 8000d90:	f004 f9d8 	bl	8005144 <__errno>
 8000d94:	4602      	mov	r2, r0
 8000d96:	230c      	movs	r3, #12
 8000d98:	6013      	str	r3, [r2, #0]
 8000d9a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d9e:	e009      	b.n	8000db4 <_sbrk+0x54>
 8000da0:	4b08      	ldr	r3, [pc, #32]	; (8000dc4 <_sbrk+0x64>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	60fb      	str	r3, [r7, #12]
 8000da6:	4b07      	ldr	r3, [pc, #28]	; (8000dc4 <_sbrk+0x64>)
 8000da8:	681a      	ldr	r2, [r3, #0]
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	4413      	add	r3, r2
 8000dae:	4a05      	ldr	r2, [pc, #20]	; (8000dc4 <_sbrk+0x64>)
 8000db0:	6013      	str	r3, [r2, #0]
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	4618      	mov	r0, r3
 8000db6:	3718      	adds	r7, #24
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	20003000 	.word	0x20003000
 8000dc0:	00000400 	.word	0x00000400
 8000dc4:	200000a4 	.word	0x200000a4
 8000dc8:	20000250 	.word	0x20000250

08000dcc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000dd0:	4b06      	ldr	r3, [pc, #24]	; (8000dec <SystemInit+0x20>)
 8000dd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dd6:	4a05      	ldr	r2, [pc, #20]	; (8000dec <SystemInit+0x20>)
 8000dd8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ddc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000de0:	bf00      	nop
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop
 8000dec:	e000ed00 	.word	0xe000ed00

08000df0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000df0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e28 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000df4:	480d      	ldr	r0, [pc, #52]	; (8000e2c <LoopForever+0x6>)
  ldr r1, =_edata
 8000df6:	490e      	ldr	r1, [pc, #56]	; (8000e30 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000df8:	4a0e      	ldr	r2, [pc, #56]	; (8000e34 <LoopForever+0xe>)
  movs r3, #0
 8000dfa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dfc:	e002      	b.n	8000e04 <LoopCopyDataInit>

08000dfe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dfe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e02:	3304      	adds	r3, #4

08000e04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e08:	d3f9      	bcc.n	8000dfe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e0a:	4a0b      	ldr	r2, [pc, #44]	; (8000e38 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e0c:	4c0b      	ldr	r4, [pc, #44]	; (8000e3c <LoopForever+0x16>)
  movs r3, #0
 8000e0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e10:	e001      	b.n	8000e16 <LoopFillZerobss>

08000e12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e14:	3204      	adds	r2, #4

08000e16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e18:	d3fb      	bcc.n	8000e12 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000e1a:	f7ff ffd7 	bl	8000dcc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e1e:	f004 f997 	bl	8005150 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e22:	f7ff fab5 	bl	8000390 <main>

08000e26 <LoopForever>:

LoopForever:
    b LoopForever
 8000e26:	e7fe      	b.n	8000e26 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000e28:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000e2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e30:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000e34:	080063f0 	.word	0x080063f0
  ldr r2, =_sbss
 8000e38:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000e3c:	20000250 	.word	0x20000250

08000e40 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e40:	e7fe      	b.n	8000e40 <ADC1_2_IRQHandler>
	...

08000e44 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e48:	4b08      	ldr	r3, [pc, #32]	; (8000e6c <HAL_Init+0x28>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4a07      	ldr	r2, [pc, #28]	; (8000e6c <HAL_Init+0x28>)
 8000e4e:	f043 0310 	orr.w	r3, r3, #16
 8000e52:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e54:	2003      	movs	r0, #3
 8000e56:	f000 f94d 	bl	80010f4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e5a:	2000      	movs	r0, #0
 8000e5c:	f000 f808 	bl	8000e70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e60:	f7ff fd9e 	bl	80009a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e64:	2300      	movs	r3, #0
}
 8000e66:	4618      	mov	r0, r3
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	40022000 	.word	0x40022000

08000e70 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e78:	4b12      	ldr	r3, [pc, #72]	; (8000ec4 <HAL_InitTick+0x54>)
 8000e7a:	681a      	ldr	r2, [r3, #0]
 8000e7c:	4b12      	ldr	r3, [pc, #72]	; (8000ec8 <HAL_InitTick+0x58>)
 8000e7e:	781b      	ldrb	r3, [r3, #0]
 8000e80:	4619      	mov	r1, r3
 8000e82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e86:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f000 f965 	bl	800115e <HAL_SYSTICK_Config>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d001      	beq.n	8000e9e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	e00e      	b.n	8000ebc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	2b0f      	cmp	r3, #15
 8000ea2:	d80a      	bhi.n	8000eba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	6879      	ldr	r1, [r7, #4]
 8000ea8:	f04f 30ff 	mov.w	r0, #4294967295
 8000eac:	f000 f92d 	bl	800110a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000eb0:	4a06      	ldr	r2, [pc, #24]	; (8000ecc <HAL_InitTick+0x5c>)
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	e000      	b.n	8000ebc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000eba:	2301      	movs	r3, #1
}
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	3708      	adds	r7, #8
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	20000004 	.word	0x20000004
 8000ec8:	2000000c 	.word	0x2000000c
 8000ecc:	20000008 	.word	0x20000008

08000ed0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ed4:	4b06      	ldr	r3, [pc, #24]	; (8000ef0 <HAL_IncTick+0x20>)
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	461a      	mov	r2, r3
 8000eda:	4b06      	ldr	r3, [pc, #24]	; (8000ef4 <HAL_IncTick+0x24>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	4413      	add	r3, r2
 8000ee0:	4a04      	ldr	r2, [pc, #16]	; (8000ef4 <HAL_IncTick+0x24>)
 8000ee2:	6013      	str	r3, [r2, #0]
}
 8000ee4:	bf00      	nop
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop
 8000ef0:	2000000c 	.word	0x2000000c
 8000ef4:	20000248 	.word	0x20000248

08000ef8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  return uwTick;  
 8000efc:	4b03      	ldr	r3, [pc, #12]	; (8000f0c <HAL_GetTick+0x14>)
 8000efe:	681b      	ldr	r3, [r3, #0]
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop
 8000f0c:	20000248 	.word	0x20000248

08000f10 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b084      	sub	sp, #16
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f18:	f7ff ffee 	bl	8000ef8 <HAL_GetTick>
 8000f1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f28:	d005      	beq.n	8000f36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f2a:	4b09      	ldr	r3, [pc, #36]	; (8000f50 <HAL_Delay+0x40>)
 8000f2c:	781b      	ldrb	r3, [r3, #0]
 8000f2e:	461a      	mov	r2, r3
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	4413      	add	r3, r2
 8000f34:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000f36:	bf00      	nop
 8000f38:	f7ff ffde 	bl	8000ef8 <HAL_GetTick>
 8000f3c:	4602      	mov	r2, r0
 8000f3e:	68bb      	ldr	r3, [r7, #8]
 8000f40:	1ad3      	subs	r3, r2, r3
 8000f42:	68fa      	ldr	r2, [r7, #12]
 8000f44:	429a      	cmp	r2, r3
 8000f46:	d8f7      	bhi.n	8000f38 <HAL_Delay+0x28>
  {
  }
}
 8000f48:	bf00      	nop
 8000f4a:	3710      	adds	r7, #16
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	2000000c 	.word	0x2000000c

08000f54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b085      	sub	sp, #20
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	f003 0307 	and.w	r3, r3, #7
 8000f62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f64:	4b0c      	ldr	r3, [pc, #48]	; (8000f98 <__NVIC_SetPriorityGrouping+0x44>)
 8000f66:	68db      	ldr	r3, [r3, #12]
 8000f68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f6a:	68ba      	ldr	r2, [r7, #8]
 8000f6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f70:	4013      	ands	r3, r2
 8000f72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f78:	68bb      	ldr	r3, [r7, #8]
 8000f7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f7c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f86:	4a04      	ldr	r2, [pc, #16]	; (8000f98 <__NVIC_SetPriorityGrouping+0x44>)
 8000f88:	68bb      	ldr	r3, [r7, #8]
 8000f8a:	60d3      	str	r3, [r2, #12]
}
 8000f8c:	bf00      	nop
 8000f8e:	3714      	adds	r7, #20
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr
 8000f98:	e000ed00 	.word	0xe000ed00

08000f9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fa0:	4b04      	ldr	r3, [pc, #16]	; (8000fb4 <__NVIC_GetPriorityGrouping+0x18>)
 8000fa2:	68db      	ldr	r3, [r3, #12]
 8000fa4:	0a1b      	lsrs	r3, r3, #8
 8000fa6:	f003 0307 	and.w	r3, r3, #7
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	46bd      	mov	sp, r7
 8000fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb2:	4770      	bx	lr
 8000fb4:	e000ed00 	.word	0xe000ed00

08000fb8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b083      	sub	sp, #12
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	db0b      	blt.n	8000fe2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fca:	79fb      	ldrb	r3, [r7, #7]
 8000fcc:	f003 021f 	and.w	r2, r3, #31
 8000fd0:	4907      	ldr	r1, [pc, #28]	; (8000ff0 <__NVIC_EnableIRQ+0x38>)
 8000fd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd6:	095b      	lsrs	r3, r3, #5
 8000fd8:	2001      	movs	r0, #1
 8000fda:	fa00 f202 	lsl.w	r2, r0, r2
 8000fde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000fe2:	bf00      	nop
 8000fe4:	370c      	adds	r7, #12
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop
 8000ff0:	e000e100 	.word	0xe000e100

08000ff4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b083      	sub	sp, #12
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	6039      	str	r1, [r7, #0]
 8000ffe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001000:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001004:	2b00      	cmp	r3, #0
 8001006:	db0a      	blt.n	800101e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	b2da      	uxtb	r2, r3
 800100c:	490c      	ldr	r1, [pc, #48]	; (8001040 <__NVIC_SetPriority+0x4c>)
 800100e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001012:	0112      	lsls	r2, r2, #4
 8001014:	b2d2      	uxtb	r2, r2
 8001016:	440b      	add	r3, r1
 8001018:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800101c:	e00a      	b.n	8001034 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	b2da      	uxtb	r2, r3
 8001022:	4908      	ldr	r1, [pc, #32]	; (8001044 <__NVIC_SetPriority+0x50>)
 8001024:	79fb      	ldrb	r3, [r7, #7]
 8001026:	f003 030f 	and.w	r3, r3, #15
 800102a:	3b04      	subs	r3, #4
 800102c:	0112      	lsls	r2, r2, #4
 800102e:	b2d2      	uxtb	r2, r2
 8001030:	440b      	add	r3, r1
 8001032:	761a      	strb	r2, [r3, #24]
}
 8001034:	bf00      	nop
 8001036:	370c      	adds	r7, #12
 8001038:	46bd      	mov	sp, r7
 800103a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103e:	4770      	bx	lr
 8001040:	e000e100 	.word	0xe000e100
 8001044:	e000ed00 	.word	0xe000ed00

08001048 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001048:	b480      	push	{r7}
 800104a:	b089      	sub	sp, #36	; 0x24
 800104c:	af00      	add	r7, sp, #0
 800104e:	60f8      	str	r0, [r7, #12]
 8001050:	60b9      	str	r1, [r7, #8]
 8001052:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	f003 0307 	and.w	r3, r3, #7
 800105a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800105c:	69fb      	ldr	r3, [r7, #28]
 800105e:	f1c3 0307 	rsb	r3, r3, #7
 8001062:	2b04      	cmp	r3, #4
 8001064:	bf28      	it	cs
 8001066:	2304      	movcs	r3, #4
 8001068:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800106a:	69fb      	ldr	r3, [r7, #28]
 800106c:	3304      	adds	r3, #4
 800106e:	2b06      	cmp	r3, #6
 8001070:	d902      	bls.n	8001078 <NVIC_EncodePriority+0x30>
 8001072:	69fb      	ldr	r3, [r7, #28]
 8001074:	3b03      	subs	r3, #3
 8001076:	e000      	b.n	800107a <NVIC_EncodePriority+0x32>
 8001078:	2300      	movs	r3, #0
 800107a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800107c:	f04f 32ff 	mov.w	r2, #4294967295
 8001080:	69bb      	ldr	r3, [r7, #24]
 8001082:	fa02 f303 	lsl.w	r3, r2, r3
 8001086:	43da      	mvns	r2, r3
 8001088:	68bb      	ldr	r3, [r7, #8]
 800108a:	401a      	ands	r2, r3
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001090:	f04f 31ff 	mov.w	r1, #4294967295
 8001094:	697b      	ldr	r3, [r7, #20]
 8001096:	fa01 f303 	lsl.w	r3, r1, r3
 800109a:	43d9      	mvns	r1, r3
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010a0:	4313      	orrs	r3, r2
         );
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	3724      	adds	r7, #36	; 0x24
 80010a6:	46bd      	mov	sp, r7
 80010a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ac:	4770      	bx	lr
	...

080010b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	3b01      	subs	r3, #1
 80010bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010c0:	d301      	bcc.n	80010c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010c2:	2301      	movs	r3, #1
 80010c4:	e00f      	b.n	80010e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010c6:	4a0a      	ldr	r2, [pc, #40]	; (80010f0 <SysTick_Config+0x40>)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	3b01      	subs	r3, #1
 80010cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010ce:	210f      	movs	r1, #15
 80010d0:	f04f 30ff 	mov.w	r0, #4294967295
 80010d4:	f7ff ff8e 	bl	8000ff4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010d8:	4b05      	ldr	r3, [pc, #20]	; (80010f0 <SysTick_Config+0x40>)
 80010da:	2200      	movs	r2, #0
 80010dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010de:	4b04      	ldr	r3, [pc, #16]	; (80010f0 <SysTick_Config+0x40>)
 80010e0:	2207      	movs	r2, #7
 80010e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010e4:	2300      	movs	r3, #0
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	3708      	adds	r7, #8
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	e000e010 	.word	0xe000e010

080010f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b082      	sub	sp, #8
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010fc:	6878      	ldr	r0, [r7, #4]
 80010fe:	f7ff ff29 	bl	8000f54 <__NVIC_SetPriorityGrouping>
}
 8001102:	bf00      	nop
 8001104:	3708      	adds	r7, #8
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}

0800110a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800110a:	b580      	push	{r7, lr}
 800110c:	b086      	sub	sp, #24
 800110e:	af00      	add	r7, sp, #0
 8001110:	4603      	mov	r3, r0
 8001112:	60b9      	str	r1, [r7, #8]
 8001114:	607a      	str	r2, [r7, #4]
 8001116:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001118:	2300      	movs	r3, #0
 800111a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800111c:	f7ff ff3e 	bl	8000f9c <__NVIC_GetPriorityGrouping>
 8001120:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001122:	687a      	ldr	r2, [r7, #4]
 8001124:	68b9      	ldr	r1, [r7, #8]
 8001126:	6978      	ldr	r0, [r7, #20]
 8001128:	f7ff ff8e 	bl	8001048 <NVIC_EncodePriority>
 800112c:	4602      	mov	r2, r0
 800112e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001132:	4611      	mov	r1, r2
 8001134:	4618      	mov	r0, r3
 8001136:	f7ff ff5d 	bl	8000ff4 <__NVIC_SetPriority>
}
 800113a:	bf00      	nop
 800113c:	3718      	adds	r7, #24
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}

08001142 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001142:	b580      	push	{r7, lr}
 8001144:	b082      	sub	sp, #8
 8001146:	af00      	add	r7, sp, #0
 8001148:	4603      	mov	r3, r0
 800114a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800114c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001150:	4618      	mov	r0, r3
 8001152:	f7ff ff31 	bl	8000fb8 <__NVIC_EnableIRQ>
}
 8001156:	bf00      	nop
 8001158:	3708      	adds	r7, #8
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}

0800115e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800115e:	b580      	push	{r7, lr}
 8001160:	b082      	sub	sp, #8
 8001162:	af00      	add	r7, sp, #0
 8001164:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001166:	6878      	ldr	r0, [r7, #4]
 8001168:	f7ff ffa2 	bl	80010b0 <SysTick_Config>
 800116c:	4603      	mov	r3, r0
}
 800116e:	4618      	mov	r0, r3
 8001170:	3708      	adds	r7, #8
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}

08001176 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8001176:	b580      	push	{r7, lr}
 8001178:	b084      	sub	sp, #16
 800117a:	af00      	add	r7, sp, #0
 800117c:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800117e:	2300      	movs	r3, #0
 8001180:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d101      	bne.n	800118c <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001188:	2301      	movs	r3, #1
 800118a:	e037      	b.n	80011fc <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	2202      	movs	r2, #2
 8001190:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80011a2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80011a6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80011b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	68db      	ldr	r3, [r3, #12]
 80011b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	695b      	ldr	r3, [r3, #20]
 80011c2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011c8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	69db      	ldr	r3, [r3, #28]
 80011ce:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80011d0:	68fa      	ldr	r2, [r7, #12]
 80011d2:	4313      	orrs	r3, r2
 80011d4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	68fa      	ldr	r2, [r7, #12]
 80011dc:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80011de:	6878      	ldr	r0, [r7, #4]
 80011e0:	f000 f9b8 	bl	8001554 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	2200      	movs	r2, #0
 80011e8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	2201      	movs	r2, #1
 80011ee:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	2200      	movs	r2, #0
 80011f6:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80011fa:	2300      	movs	r3, #0
}  
 80011fc:	4618      	mov	r0, r3
 80011fe:	3710      	adds	r7, #16
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}

08001204 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b086      	sub	sp, #24
 8001208:	af00      	add	r7, sp, #0
 800120a:	60f8      	str	r0, [r7, #12]
 800120c:	60b9      	str	r1, [r7, #8]
 800120e:	607a      	str	r2, [r7, #4]
 8001210:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8001212:	2300      	movs	r3, #0
 8001214:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	f893 3020 	ldrb.w	r3, [r3, #32]
 800121c:	2b01      	cmp	r3, #1
 800121e:	d101      	bne.n	8001224 <HAL_DMA_Start_IT+0x20>
 8001220:	2302      	movs	r3, #2
 8001222:	e04a      	b.n	80012ba <HAL_DMA_Start_IT+0xb6>
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	2201      	movs	r2, #1
 8001228:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001232:	2b01      	cmp	r3, #1
 8001234:	d13a      	bne.n	80012ac <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	2202      	movs	r2, #2
 800123a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	2200      	movs	r2, #0
 8001242:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	681a      	ldr	r2, [r3, #0]
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f022 0201 	bic.w	r2, r2, #1
 8001252:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	687a      	ldr	r2, [r7, #4]
 8001258:	68b9      	ldr	r1, [r7, #8]
 800125a:	68f8      	ldr	r0, [r7, #12]
 800125c:	f000 f94b 	bl	80014f6 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001264:	2b00      	cmp	r3, #0
 8001266:	d008      	beq.n	800127a <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	681a      	ldr	r2, [r3, #0]
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f042 020e 	orr.w	r2, r2, #14
 8001276:	601a      	str	r2, [r3, #0]
 8001278:	e00f      	b.n	800129a <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	681a      	ldr	r2, [r3, #0]
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f042 020a 	orr.w	r2, r2, #10
 8001288:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	681a      	ldr	r2, [r3, #0]
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f022 0204 	bic.w	r2, r2, #4
 8001298:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	681a      	ldr	r2, [r3, #0]
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f042 0201 	orr.w	r2, r2, #1
 80012a8:	601a      	str	r2, [r3, #0]
 80012aa:	e005      	b.n	80012b8 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	2200      	movs	r2, #0
 80012b0:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 80012b4:	2302      	movs	r3, #2
 80012b6:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 80012b8:	7dfb      	ldrb	r3, [r7, #23]
} 
 80012ba:	4618      	mov	r0, r3
 80012bc:	3718      	adds	r7, #24
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}

080012c2 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80012c2:	b480      	push	{r7}
 80012c4:	b083      	sub	sp, #12
 80012c6:	af00      	add	r7, sp, #0
 80012c8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80012d0:	2b02      	cmp	r3, #2
 80012d2:	d008      	beq.n	80012e6 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	2204      	movs	r2, #4
 80012d8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	2200      	movs	r2, #0
 80012de:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80012e2:	2301      	movs	r3, #1
 80012e4:	e020      	b.n	8001328 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	681a      	ldr	r2, [r3, #0]
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f022 020e 	bic.w	r2, r2, #14
 80012f4:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	681a      	ldr	r2, [r3, #0]
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f022 0201 	bic.w	r2, r2, #1
 8001304:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800130e:	2101      	movs	r1, #1
 8001310:	fa01 f202 	lsl.w	r2, r1, r2
 8001314:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	2201      	movs	r2, #1
 800131a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	2200      	movs	r2, #0
 8001322:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8001326:	2300      	movs	r3, #0
}
 8001328:	4618      	mov	r0, r3
 800132a:	370c      	adds	r7, #12
 800132c:	46bd      	mov	sp, r7
 800132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001332:	4770      	bx	lr

08001334 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001334:	b580      	push	{r7, lr}
 8001336:	b084      	sub	sp, #16
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800133c:	2300      	movs	r3, #0
 800133e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001346:	2b02      	cmp	r3, #2
 8001348:	d005      	beq.n	8001356 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	2204      	movs	r2, #4
 800134e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001350:	2301      	movs	r3, #1
 8001352:	73fb      	strb	r3, [r7, #15]
 8001354:	e027      	b.n	80013a6 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	681a      	ldr	r2, [r3, #0]
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f022 020e 	bic.w	r2, r2, #14
 8001364:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	681a      	ldr	r2, [r3, #0]
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f022 0201 	bic.w	r2, r2, #1
 8001374:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800137e:	2101      	movs	r1, #1
 8001380:	fa01 f202 	lsl.w	r2, r1, r2
 8001384:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	2201      	movs	r2, #1
 800138a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	2200      	movs	r2, #0
 8001392:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800139a:	2b00      	cmp	r3, #0
 800139c:	d003      	beq.n	80013a6 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013a2:	6878      	ldr	r0, [r7, #4]
 80013a4:	4798      	blx	r3
    } 
  }
  return status;
 80013a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80013a8:	4618      	mov	r0, r3
 80013aa:	3710      	adds	r7, #16
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}

080013b0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b084      	sub	sp, #16
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013cc:	2204      	movs	r2, #4
 80013ce:	409a      	lsls	r2, r3
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	4013      	ands	r3, r2
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d024      	beq.n	8001422 <HAL_DMA_IRQHandler+0x72>
 80013d8:	68bb      	ldr	r3, [r7, #8]
 80013da:	f003 0304 	and.w	r3, r3, #4
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d01f      	beq.n	8001422 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f003 0320 	and.w	r3, r3, #32
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d107      	bne.n	8001400 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	681a      	ldr	r2, [r3, #0]
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f022 0204 	bic.w	r2, r2, #4
 80013fe:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001408:	2104      	movs	r1, #4
 800140a:	fa01 f202 	lsl.w	r2, r1, r2
 800140e:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001414:	2b00      	cmp	r3, #0
 8001416:	d06a      	beq.n	80014ee <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800141c:	6878      	ldr	r0, [r7, #4]
 800141e:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8001420:	e065      	b.n	80014ee <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001426:	2202      	movs	r2, #2
 8001428:	409a      	lsls	r2, r3
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	4013      	ands	r3, r2
 800142e:	2b00      	cmp	r3, #0
 8001430:	d02c      	beq.n	800148c <HAL_DMA_IRQHandler+0xdc>
 8001432:	68bb      	ldr	r3, [r7, #8]
 8001434:	f003 0302 	and.w	r3, r3, #2
 8001438:	2b00      	cmp	r3, #0
 800143a:	d027      	beq.n	800148c <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f003 0320 	and.w	r3, r3, #32
 8001446:	2b00      	cmp	r3, #0
 8001448:	d10b      	bne.n	8001462 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	681a      	ldr	r2, [r3, #0]
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f022 020a 	bic.w	r2, r2, #10
 8001458:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	2201      	movs	r2, #1
 800145e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800146a:	2102      	movs	r1, #2
 800146c:	fa01 f202 	lsl.w	r2, r1, r2
 8001470:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	2200      	movs	r2, #0
 8001476:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800147e:	2b00      	cmp	r3, #0
 8001480:	d035      	beq.n	80014ee <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001486:	6878      	ldr	r0, [r7, #4]
 8001488:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 800148a:	e030      	b.n	80014ee <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001490:	2208      	movs	r2, #8
 8001492:	409a      	lsls	r2, r3
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	4013      	ands	r3, r2
 8001498:	2b00      	cmp	r3, #0
 800149a:	d028      	beq.n	80014ee <HAL_DMA_IRQHandler+0x13e>
 800149c:	68bb      	ldr	r3, [r7, #8]
 800149e:	f003 0308 	and.w	r3, r3, #8
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d023      	beq.n	80014ee <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	681a      	ldr	r2, [r3, #0]
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f022 020e 	bic.w	r2, r2, #14
 80014b4:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014be:	2101      	movs	r1, #1
 80014c0:	fa01 f202 	lsl.w	r2, r1, r2
 80014c4:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	2201      	movs	r2, #1
 80014ca:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2201      	movs	r2, #1
 80014d0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2200      	movs	r2, #0
 80014d8:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d004      	beq.n	80014ee <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e8:	6878      	ldr	r0, [r7, #4]
 80014ea:	4798      	blx	r3
    }
  }
}  
 80014ec:	e7ff      	b.n	80014ee <HAL_DMA_IRQHandler+0x13e>
 80014ee:	bf00      	nop
 80014f0:	3710      	adds	r7, #16
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}

080014f6 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80014f6:	b480      	push	{r7}
 80014f8:	b085      	sub	sp, #20
 80014fa:	af00      	add	r7, sp, #0
 80014fc:	60f8      	str	r0, [r7, #12]
 80014fe:	60b9      	str	r1, [r7, #8]
 8001500:	607a      	str	r2, [r7, #4]
 8001502:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800150c:	2101      	movs	r1, #1
 800150e:	fa01 f202 	lsl.w	r2, r1, r2
 8001512:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	683a      	ldr	r2, [r7, #0]
 800151a:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	2b10      	cmp	r3, #16
 8001522:	d108      	bne.n	8001536 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	687a      	ldr	r2, [r7, #4]
 800152a:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	68ba      	ldr	r2, [r7, #8]
 8001532:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001534:	e007      	b.n	8001546 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	68ba      	ldr	r2, [r7, #8]
 800153c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	687a      	ldr	r2, [r7, #4]
 8001544:	60da      	str	r2, [r3, #12]
}
 8001546:	bf00      	nop
 8001548:	3714      	adds	r7, #20
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr
	...

08001554 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001554:	b480      	push	{r7}
 8001556:	b083      	sub	sp, #12
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	461a      	mov	r2, r3
 8001562:	4b09      	ldr	r3, [pc, #36]	; (8001588 <DMA_CalcBaseAndBitshift+0x34>)
 8001564:	4413      	add	r3, r2
 8001566:	4a09      	ldr	r2, [pc, #36]	; (800158c <DMA_CalcBaseAndBitshift+0x38>)
 8001568:	fba2 2303 	umull	r2, r3, r2, r3
 800156c:	091b      	lsrs	r3, r3, #4
 800156e:	009a      	lsls	r2, r3, #2
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	4a06      	ldr	r2, [pc, #24]	; (8001590 <DMA_CalcBaseAndBitshift+0x3c>)
 8001578:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 800157a:	bf00      	nop
 800157c:	370c      	adds	r7, #12
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr
 8001586:	bf00      	nop
 8001588:	bffdfff8 	.word	0xbffdfff8
 800158c:	cccccccd 	.word	0xcccccccd
 8001590:	40020000 	.word	0x40020000

08001594 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001594:	b480      	push	{r7}
 8001596:	b087      	sub	sp, #28
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
 800159c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800159e:	2300      	movs	r3, #0
 80015a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015a2:	e14e      	b.n	8001842 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	681a      	ldr	r2, [r3, #0]
 80015a8:	2101      	movs	r1, #1
 80015aa:	697b      	ldr	r3, [r7, #20]
 80015ac:	fa01 f303 	lsl.w	r3, r1, r3
 80015b0:	4013      	ands	r3, r2
 80015b2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	f000 8140 	beq.w	800183c <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	f003 0303 	and.w	r3, r3, #3
 80015c4:	2b01      	cmp	r3, #1
 80015c6:	d005      	beq.n	80015d4 <HAL_GPIO_Init+0x40>
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	f003 0303 	and.w	r3, r3, #3
 80015d0:	2b02      	cmp	r3, #2
 80015d2:	d130      	bne.n	8001636 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	689b      	ldr	r3, [r3, #8]
 80015d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80015da:	697b      	ldr	r3, [r7, #20]
 80015dc:	005b      	lsls	r3, r3, #1
 80015de:	2203      	movs	r2, #3
 80015e0:	fa02 f303 	lsl.w	r3, r2, r3
 80015e4:	43db      	mvns	r3, r3
 80015e6:	693a      	ldr	r2, [r7, #16]
 80015e8:	4013      	ands	r3, r2
 80015ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	68da      	ldr	r2, [r3, #12]
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	005b      	lsls	r3, r3, #1
 80015f4:	fa02 f303 	lsl.w	r3, r2, r3
 80015f8:	693a      	ldr	r2, [r7, #16]
 80015fa:	4313      	orrs	r3, r2
 80015fc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	693a      	ldr	r2, [r7, #16]
 8001602:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800160a:	2201      	movs	r2, #1
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	fa02 f303 	lsl.w	r3, r2, r3
 8001612:	43db      	mvns	r3, r3
 8001614:	693a      	ldr	r2, [r7, #16]
 8001616:	4013      	ands	r3, r2
 8001618:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	091b      	lsrs	r3, r3, #4
 8001620:	f003 0201 	and.w	r2, r3, #1
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	fa02 f303 	lsl.w	r3, r2, r3
 800162a:	693a      	ldr	r2, [r7, #16]
 800162c:	4313      	orrs	r3, r2
 800162e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	693a      	ldr	r2, [r7, #16]
 8001634:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	f003 0303 	and.w	r3, r3, #3
 800163e:	2b03      	cmp	r3, #3
 8001640:	d017      	beq.n	8001672 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	68db      	ldr	r3, [r3, #12]
 8001646:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	005b      	lsls	r3, r3, #1
 800164c:	2203      	movs	r2, #3
 800164e:	fa02 f303 	lsl.w	r3, r2, r3
 8001652:	43db      	mvns	r3, r3
 8001654:	693a      	ldr	r2, [r7, #16]
 8001656:	4013      	ands	r3, r2
 8001658:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	689a      	ldr	r2, [r3, #8]
 800165e:	697b      	ldr	r3, [r7, #20]
 8001660:	005b      	lsls	r3, r3, #1
 8001662:	fa02 f303 	lsl.w	r3, r2, r3
 8001666:	693a      	ldr	r2, [r7, #16]
 8001668:	4313      	orrs	r3, r2
 800166a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	693a      	ldr	r2, [r7, #16]
 8001670:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	f003 0303 	and.w	r3, r3, #3
 800167a:	2b02      	cmp	r3, #2
 800167c:	d123      	bne.n	80016c6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800167e:	697b      	ldr	r3, [r7, #20]
 8001680:	08da      	lsrs	r2, r3, #3
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	3208      	adds	r2, #8
 8001686:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800168a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	f003 0307 	and.w	r3, r3, #7
 8001692:	009b      	lsls	r3, r3, #2
 8001694:	220f      	movs	r2, #15
 8001696:	fa02 f303 	lsl.w	r3, r2, r3
 800169a:	43db      	mvns	r3, r3
 800169c:	693a      	ldr	r2, [r7, #16]
 800169e:	4013      	ands	r3, r2
 80016a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	691a      	ldr	r2, [r3, #16]
 80016a6:	697b      	ldr	r3, [r7, #20]
 80016a8:	f003 0307 	and.w	r3, r3, #7
 80016ac:	009b      	lsls	r3, r3, #2
 80016ae:	fa02 f303 	lsl.w	r3, r2, r3
 80016b2:	693a      	ldr	r2, [r7, #16]
 80016b4:	4313      	orrs	r3, r2
 80016b6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80016b8:	697b      	ldr	r3, [r7, #20]
 80016ba:	08da      	lsrs	r2, r3, #3
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	3208      	adds	r2, #8
 80016c0:	6939      	ldr	r1, [r7, #16]
 80016c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	005b      	lsls	r3, r3, #1
 80016d0:	2203      	movs	r2, #3
 80016d2:	fa02 f303 	lsl.w	r3, r2, r3
 80016d6:	43db      	mvns	r3, r3
 80016d8:	693a      	ldr	r2, [r7, #16]
 80016da:	4013      	ands	r3, r2
 80016dc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	f003 0203 	and.w	r2, r3, #3
 80016e6:	697b      	ldr	r3, [r7, #20]
 80016e8:	005b      	lsls	r3, r3, #1
 80016ea:	fa02 f303 	lsl.w	r3, r2, r3
 80016ee:	693a      	ldr	r2, [r7, #16]
 80016f0:	4313      	orrs	r3, r2
 80016f2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	693a      	ldr	r2, [r7, #16]
 80016f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001702:	2b00      	cmp	r3, #0
 8001704:	f000 809a 	beq.w	800183c <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001708:	4b55      	ldr	r3, [pc, #340]	; (8001860 <HAL_GPIO_Init+0x2cc>)
 800170a:	699b      	ldr	r3, [r3, #24]
 800170c:	4a54      	ldr	r2, [pc, #336]	; (8001860 <HAL_GPIO_Init+0x2cc>)
 800170e:	f043 0301 	orr.w	r3, r3, #1
 8001712:	6193      	str	r3, [r2, #24]
 8001714:	4b52      	ldr	r3, [pc, #328]	; (8001860 <HAL_GPIO_Init+0x2cc>)
 8001716:	699b      	ldr	r3, [r3, #24]
 8001718:	f003 0301 	and.w	r3, r3, #1
 800171c:	60bb      	str	r3, [r7, #8]
 800171e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001720:	4a50      	ldr	r2, [pc, #320]	; (8001864 <HAL_GPIO_Init+0x2d0>)
 8001722:	697b      	ldr	r3, [r7, #20]
 8001724:	089b      	lsrs	r3, r3, #2
 8001726:	3302      	adds	r3, #2
 8001728:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800172c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	f003 0303 	and.w	r3, r3, #3
 8001734:	009b      	lsls	r3, r3, #2
 8001736:	220f      	movs	r2, #15
 8001738:	fa02 f303 	lsl.w	r3, r2, r3
 800173c:	43db      	mvns	r3, r3
 800173e:	693a      	ldr	r2, [r7, #16]
 8001740:	4013      	ands	r3, r2
 8001742:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800174a:	d013      	beq.n	8001774 <HAL_GPIO_Init+0x1e0>
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	4a46      	ldr	r2, [pc, #280]	; (8001868 <HAL_GPIO_Init+0x2d4>)
 8001750:	4293      	cmp	r3, r2
 8001752:	d00d      	beq.n	8001770 <HAL_GPIO_Init+0x1dc>
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	4a45      	ldr	r2, [pc, #276]	; (800186c <HAL_GPIO_Init+0x2d8>)
 8001758:	4293      	cmp	r3, r2
 800175a:	d007      	beq.n	800176c <HAL_GPIO_Init+0x1d8>
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	4a44      	ldr	r2, [pc, #272]	; (8001870 <HAL_GPIO_Init+0x2dc>)
 8001760:	4293      	cmp	r3, r2
 8001762:	d101      	bne.n	8001768 <HAL_GPIO_Init+0x1d4>
 8001764:	2303      	movs	r3, #3
 8001766:	e006      	b.n	8001776 <HAL_GPIO_Init+0x1e2>
 8001768:	2305      	movs	r3, #5
 800176a:	e004      	b.n	8001776 <HAL_GPIO_Init+0x1e2>
 800176c:	2302      	movs	r3, #2
 800176e:	e002      	b.n	8001776 <HAL_GPIO_Init+0x1e2>
 8001770:	2301      	movs	r3, #1
 8001772:	e000      	b.n	8001776 <HAL_GPIO_Init+0x1e2>
 8001774:	2300      	movs	r3, #0
 8001776:	697a      	ldr	r2, [r7, #20]
 8001778:	f002 0203 	and.w	r2, r2, #3
 800177c:	0092      	lsls	r2, r2, #2
 800177e:	4093      	lsls	r3, r2
 8001780:	693a      	ldr	r2, [r7, #16]
 8001782:	4313      	orrs	r3, r2
 8001784:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001786:	4937      	ldr	r1, [pc, #220]	; (8001864 <HAL_GPIO_Init+0x2d0>)
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	089b      	lsrs	r3, r3, #2
 800178c:	3302      	adds	r3, #2
 800178e:	693a      	ldr	r2, [r7, #16]
 8001790:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001794:	4b37      	ldr	r3, [pc, #220]	; (8001874 <HAL_GPIO_Init+0x2e0>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	43db      	mvns	r3, r3
 800179e:	693a      	ldr	r2, [r7, #16]
 80017a0:	4013      	ands	r3, r2
 80017a2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d003      	beq.n	80017b8 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80017b0:	693a      	ldr	r2, [r7, #16]
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	4313      	orrs	r3, r2
 80017b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80017b8:	4a2e      	ldr	r2, [pc, #184]	; (8001874 <HAL_GPIO_Init+0x2e0>)
 80017ba:	693b      	ldr	r3, [r7, #16]
 80017bc:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80017be:	4b2d      	ldr	r3, [pc, #180]	; (8001874 <HAL_GPIO_Init+0x2e0>)
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	43db      	mvns	r3, r3
 80017c8:	693a      	ldr	r2, [r7, #16]
 80017ca:	4013      	ands	r3, r2
 80017cc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d003      	beq.n	80017e2 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80017da:	693a      	ldr	r2, [r7, #16]
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	4313      	orrs	r3, r2
 80017e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80017e2:	4a24      	ldr	r2, [pc, #144]	; (8001874 <HAL_GPIO_Init+0x2e0>)
 80017e4:	693b      	ldr	r3, [r7, #16]
 80017e6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80017e8:	4b22      	ldr	r3, [pc, #136]	; (8001874 <HAL_GPIO_Init+0x2e0>)
 80017ea:	689b      	ldr	r3, [r3, #8]
 80017ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	43db      	mvns	r3, r3
 80017f2:	693a      	ldr	r2, [r7, #16]
 80017f4:	4013      	ands	r3, r2
 80017f6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001800:	2b00      	cmp	r3, #0
 8001802:	d003      	beq.n	800180c <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001804:	693a      	ldr	r2, [r7, #16]
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	4313      	orrs	r3, r2
 800180a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800180c:	4a19      	ldr	r2, [pc, #100]	; (8001874 <HAL_GPIO_Init+0x2e0>)
 800180e:	693b      	ldr	r3, [r7, #16]
 8001810:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001812:	4b18      	ldr	r3, [pc, #96]	; (8001874 <HAL_GPIO_Init+0x2e0>)
 8001814:	68db      	ldr	r3, [r3, #12]
 8001816:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	43db      	mvns	r3, r3
 800181c:	693a      	ldr	r2, [r7, #16]
 800181e:	4013      	ands	r3, r2
 8001820:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800182a:	2b00      	cmp	r3, #0
 800182c:	d003      	beq.n	8001836 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 800182e:	693a      	ldr	r2, [r7, #16]
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	4313      	orrs	r3, r2
 8001834:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001836:	4a0f      	ldr	r2, [pc, #60]	; (8001874 <HAL_GPIO_Init+0x2e0>)
 8001838:	693b      	ldr	r3, [r7, #16]
 800183a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	3301      	adds	r3, #1
 8001840:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	681a      	ldr	r2, [r3, #0]
 8001846:	697b      	ldr	r3, [r7, #20]
 8001848:	fa22 f303 	lsr.w	r3, r2, r3
 800184c:	2b00      	cmp	r3, #0
 800184e:	f47f aea9 	bne.w	80015a4 <HAL_GPIO_Init+0x10>
  }
}
 8001852:	bf00      	nop
 8001854:	371c      	adds	r7, #28
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr
 800185e:	bf00      	nop
 8001860:	40021000 	.word	0x40021000
 8001864:	40010000 	.word	0x40010000
 8001868:	48000400 	.word	0x48000400
 800186c:	48000800 	.word	0x48000800
 8001870:	48000c00 	.word	0x48000c00
 8001874:	40010400 	.word	0x40010400

08001878 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001878:	b480      	push	{r7}
 800187a:	b085      	sub	sp, #20
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
 8001880:	460b      	mov	r3, r1
 8001882:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	691a      	ldr	r2, [r3, #16]
 8001888:	887b      	ldrh	r3, [r7, #2]
 800188a:	4013      	ands	r3, r2
 800188c:	2b00      	cmp	r3, #0
 800188e:	d002      	beq.n	8001896 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001890:	2301      	movs	r3, #1
 8001892:	73fb      	strb	r3, [r7, #15]
 8001894:	e001      	b.n	800189a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001896:	2300      	movs	r3, #0
 8001898:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800189a:	7bfb      	ldrb	r3, [r7, #15]
}
 800189c:	4618      	mov	r0, r3
 800189e:	3714      	adds	r7, #20
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr

080018a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b083      	sub	sp, #12
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
 80018b0:	460b      	mov	r3, r1
 80018b2:	807b      	strh	r3, [r7, #2]
 80018b4:	4613      	mov	r3, r2
 80018b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80018b8:	787b      	ldrb	r3, [r7, #1]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d003      	beq.n	80018c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80018be:	887a      	ldrh	r2, [r7, #2]
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80018c4:	e002      	b.n	80018cc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80018c6:	887a      	ldrh	r2, [r7, #2]
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	629a      	str	r2, [r3, #40]	; 0x28
}
 80018cc:	bf00      	nop
 80018ce:	370c      	adds	r7, #12
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr

080018d8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b082      	sub	sp, #8
 80018dc:	af00      	add	r7, sp, #0
 80018de:	4603      	mov	r3, r0
 80018e0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80018e2:	4b08      	ldr	r3, [pc, #32]	; (8001904 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80018e4:	695a      	ldr	r2, [r3, #20]
 80018e6:	88fb      	ldrh	r3, [r7, #6]
 80018e8:	4013      	ands	r3, r2
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d006      	beq.n	80018fc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80018ee:	4a05      	ldr	r2, [pc, #20]	; (8001904 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80018f0:	88fb      	ldrh	r3, [r7, #6]
 80018f2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80018f4:	88fb      	ldrh	r3, [r7, #6]
 80018f6:	4618      	mov	r0, r3
 80018f8:	f7fe fcce 	bl	8000298 <HAL_GPIO_EXTI_Callback>
  }
}
 80018fc:	bf00      	nop
 80018fe:	3708      	adds	r7, #8
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}
 8001904:	40010400 	.word	0x40010400

08001908 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800190e:	af00      	add	r7, sp, #0
 8001910:	1d3b      	adds	r3, r7, #4
 8001912:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001914:	1d3b      	adds	r3, r7, #4
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d102      	bne.n	8001922 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 800191c:	2301      	movs	r3, #1
 800191e:	f000 bef4 	b.w	800270a <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001922:	1d3b      	adds	r3, r7, #4
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f003 0301 	and.w	r3, r3, #1
 800192c:	2b00      	cmp	r3, #0
 800192e:	f000 816a 	beq.w	8001c06 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001932:	4bb3      	ldr	r3, [pc, #716]	; (8001c00 <HAL_RCC_OscConfig+0x2f8>)
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	f003 030c 	and.w	r3, r3, #12
 800193a:	2b04      	cmp	r3, #4
 800193c:	d00c      	beq.n	8001958 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800193e:	4bb0      	ldr	r3, [pc, #704]	; (8001c00 <HAL_RCC_OscConfig+0x2f8>)
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	f003 030c 	and.w	r3, r3, #12
 8001946:	2b08      	cmp	r3, #8
 8001948:	d159      	bne.n	80019fe <HAL_RCC_OscConfig+0xf6>
 800194a:	4bad      	ldr	r3, [pc, #692]	; (8001c00 <HAL_RCC_OscConfig+0x2f8>)
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001952:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001956:	d152      	bne.n	80019fe <HAL_RCC_OscConfig+0xf6>
 8001958:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800195c:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001960:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001964:	fa93 f3a3 	rbit	r3, r3
 8001968:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800196c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001970:	fab3 f383 	clz	r3, r3
 8001974:	b2db      	uxtb	r3, r3
 8001976:	095b      	lsrs	r3, r3, #5
 8001978:	b2db      	uxtb	r3, r3
 800197a:	f043 0301 	orr.w	r3, r3, #1
 800197e:	b2db      	uxtb	r3, r3
 8001980:	2b01      	cmp	r3, #1
 8001982:	d102      	bne.n	800198a <HAL_RCC_OscConfig+0x82>
 8001984:	4b9e      	ldr	r3, [pc, #632]	; (8001c00 <HAL_RCC_OscConfig+0x2f8>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	e015      	b.n	80019b6 <HAL_RCC_OscConfig+0xae>
 800198a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800198e:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001992:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001996:	fa93 f3a3 	rbit	r3, r3
 800199a:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800199e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80019a2:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80019a6:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80019aa:	fa93 f3a3 	rbit	r3, r3
 80019ae:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80019b2:	4b93      	ldr	r3, [pc, #588]	; (8001c00 <HAL_RCC_OscConfig+0x2f8>)
 80019b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019b6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80019ba:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80019be:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80019c2:	fa92 f2a2 	rbit	r2, r2
 80019c6:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80019ca:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80019ce:	fab2 f282 	clz	r2, r2
 80019d2:	b2d2      	uxtb	r2, r2
 80019d4:	f042 0220 	orr.w	r2, r2, #32
 80019d8:	b2d2      	uxtb	r2, r2
 80019da:	f002 021f 	and.w	r2, r2, #31
 80019de:	2101      	movs	r1, #1
 80019e0:	fa01 f202 	lsl.w	r2, r1, r2
 80019e4:	4013      	ands	r3, r2
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	f000 810c 	beq.w	8001c04 <HAL_RCC_OscConfig+0x2fc>
 80019ec:	1d3b      	adds	r3, r7, #4
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	f040 8106 	bne.w	8001c04 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 80019f8:	2301      	movs	r3, #1
 80019fa:	f000 be86 	b.w	800270a <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019fe:	1d3b      	adds	r3, r7, #4
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a08:	d106      	bne.n	8001a18 <HAL_RCC_OscConfig+0x110>
 8001a0a:	4b7d      	ldr	r3, [pc, #500]	; (8001c00 <HAL_RCC_OscConfig+0x2f8>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4a7c      	ldr	r2, [pc, #496]	; (8001c00 <HAL_RCC_OscConfig+0x2f8>)
 8001a10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a14:	6013      	str	r3, [r2, #0]
 8001a16:	e030      	b.n	8001a7a <HAL_RCC_OscConfig+0x172>
 8001a18:	1d3b      	adds	r3, r7, #4
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d10c      	bne.n	8001a3c <HAL_RCC_OscConfig+0x134>
 8001a22:	4b77      	ldr	r3, [pc, #476]	; (8001c00 <HAL_RCC_OscConfig+0x2f8>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4a76      	ldr	r2, [pc, #472]	; (8001c00 <HAL_RCC_OscConfig+0x2f8>)
 8001a28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a2c:	6013      	str	r3, [r2, #0]
 8001a2e:	4b74      	ldr	r3, [pc, #464]	; (8001c00 <HAL_RCC_OscConfig+0x2f8>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4a73      	ldr	r2, [pc, #460]	; (8001c00 <HAL_RCC_OscConfig+0x2f8>)
 8001a34:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a38:	6013      	str	r3, [r2, #0]
 8001a3a:	e01e      	b.n	8001a7a <HAL_RCC_OscConfig+0x172>
 8001a3c:	1d3b      	adds	r3, r7, #4
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a46:	d10c      	bne.n	8001a62 <HAL_RCC_OscConfig+0x15a>
 8001a48:	4b6d      	ldr	r3, [pc, #436]	; (8001c00 <HAL_RCC_OscConfig+0x2f8>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a6c      	ldr	r2, [pc, #432]	; (8001c00 <HAL_RCC_OscConfig+0x2f8>)
 8001a4e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a52:	6013      	str	r3, [r2, #0]
 8001a54:	4b6a      	ldr	r3, [pc, #424]	; (8001c00 <HAL_RCC_OscConfig+0x2f8>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a69      	ldr	r2, [pc, #420]	; (8001c00 <HAL_RCC_OscConfig+0x2f8>)
 8001a5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a5e:	6013      	str	r3, [r2, #0]
 8001a60:	e00b      	b.n	8001a7a <HAL_RCC_OscConfig+0x172>
 8001a62:	4b67      	ldr	r3, [pc, #412]	; (8001c00 <HAL_RCC_OscConfig+0x2f8>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4a66      	ldr	r2, [pc, #408]	; (8001c00 <HAL_RCC_OscConfig+0x2f8>)
 8001a68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a6c:	6013      	str	r3, [r2, #0]
 8001a6e:	4b64      	ldr	r3, [pc, #400]	; (8001c00 <HAL_RCC_OscConfig+0x2f8>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4a63      	ldr	r2, [pc, #396]	; (8001c00 <HAL_RCC_OscConfig+0x2f8>)
 8001a74:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a78:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001a7a:	4b61      	ldr	r3, [pc, #388]	; (8001c00 <HAL_RCC_OscConfig+0x2f8>)
 8001a7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a7e:	f023 020f 	bic.w	r2, r3, #15
 8001a82:	1d3b      	adds	r3, r7, #4
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	689b      	ldr	r3, [r3, #8]
 8001a88:	495d      	ldr	r1, [pc, #372]	; (8001c00 <HAL_RCC_OscConfig+0x2f8>)
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a8e:	1d3b      	adds	r3, r7, #4
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d059      	beq.n	8001b4c <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a98:	f7ff fa2e 	bl	8000ef8 <HAL_GetTick>
 8001a9c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aa0:	e00a      	b.n	8001ab8 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001aa2:	f7ff fa29 	bl	8000ef8 <HAL_GetTick>
 8001aa6:	4602      	mov	r2, r0
 8001aa8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001aac:	1ad3      	subs	r3, r2, r3
 8001aae:	2b64      	cmp	r3, #100	; 0x64
 8001ab0:	d902      	bls.n	8001ab8 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8001ab2:	2303      	movs	r3, #3
 8001ab4:	f000 be29 	b.w	800270a <HAL_RCC_OscConfig+0xe02>
 8001ab8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001abc:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ac0:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001ac4:	fa93 f3a3 	rbit	r3, r3
 8001ac8:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001acc:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ad0:	fab3 f383 	clz	r3, r3
 8001ad4:	b2db      	uxtb	r3, r3
 8001ad6:	095b      	lsrs	r3, r3, #5
 8001ad8:	b2db      	uxtb	r3, r3
 8001ada:	f043 0301 	orr.w	r3, r3, #1
 8001ade:	b2db      	uxtb	r3, r3
 8001ae0:	2b01      	cmp	r3, #1
 8001ae2:	d102      	bne.n	8001aea <HAL_RCC_OscConfig+0x1e2>
 8001ae4:	4b46      	ldr	r3, [pc, #280]	; (8001c00 <HAL_RCC_OscConfig+0x2f8>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	e015      	b.n	8001b16 <HAL_RCC_OscConfig+0x20e>
 8001aea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001aee:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001af2:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001af6:	fa93 f3a3 	rbit	r3, r3
 8001afa:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001afe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b02:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001b06:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001b0a:	fa93 f3a3 	rbit	r3, r3
 8001b0e:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001b12:	4b3b      	ldr	r3, [pc, #236]	; (8001c00 <HAL_RCC_OscConfig+0x2f8>)
 8001b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b16:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001b1a:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001b1e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001b22:	fa92 f2a2 	rbit	r2, r2
 8001b26:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001b2a:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001b2e:	fab2 f282 	clz	r2, r2
 8001b32:	b2d2      	uxtb	r2, r2
 8001b34:	f042 0220 	orr.w	r2, r2, #32
 8001b38:	b2d2      	uxtb	r2, r2
 8001b3a:	f002 021f 	and.w	r2, r2, #31
 8001b3e:	2101      	movs	r1, #1
 8001b40:	fa01 f202 	lsl.w	r2, r1, r2
 8001b44:	4013      	ands	r3, r2
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d0ab      	beq.n	8001aa2 <HAL_RCC_OscConfig+0x19a>
 8001b4a:	e05c      	b.n	8001c06 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b4c:	f7ff f9d4 	bl	8000ef8 <HAL_GetTick>
 8001b50:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b54:	e00a      	b.n	8001b6c <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b56:	f7ff f9cf 	bl	8000ef8 <HAL_GetTick>
 8001b5a:	4602      	mov	r2, r0
 8001b5c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b60:	1ad3      	subs	r3, r2, r3
 8001b62:	2b64      	cmp	r3, #100	; 0x64
 8001b64:	d902      	bls.n	8001b6c <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8001b66:	2303      	movs	r3, #3
 8001b68:	f000 bdcf 	b.w	800270a <HAL_RCC_OscConfig+0xe02>
 8001b6c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b70:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b74:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001b78:	fa93 f3a3 	rbit	r3, r3
 8001b7c:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001b80:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b84:	fab3 f383 	clz	r3, r3
 8001b88:	b2db      	uxtb	r3, r3
 8001b8a:	095b      	lsrs	r3, r3, #5
 8001b8c:	b2db      	uxtb	r3, r3
 8001b8e:	f043 0301 	orr.w	r3, r3, #1
 8001b92:	b2db      	uxtb	r3, r3
 8001b94:	2b01      	cmp	r3, #1
 8001b96:	d102      	bne.n	8001b9e <HAL_RCC_OscConfig+0x296>
 8001b98:	4b19      	ldr	r3, [pc, #100]	; (8001c00 <HAL_RCC_OscConfig+0x2f8>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	e015      	b.n	8001bca <HAL_RCC_OscConfig+0x2c2>
 8001b9e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ba2:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ba6:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001baa:	fa93 f3a3 	rbit	r3, r3
 8001bae:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001bb2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001bb6:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001bba:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001bbe:	fa93 f3a3 	rbit	r3, r3
 8001bc2:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001bc6:	4b0e      	ldr	r3, [pc, #56]	; (8001c00 <HAL_RCC_OscConfig+0x2f8>)
 8001bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bca:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001bce:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001bd2:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001bd6:	fa92 f2a2 	rbit	r2, r2
 8001bda:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001bde:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001be2:	fab2 f282 	clz	r2, r2
 8001be6:	b2d2      	uxtb	r2, r2
 8001be8:	f042 0220 	orr.w	r2, r2, #32
 8001bec:	b2d2      	uxtb	r2, r2
 8001bee:	f002 021f 	and.w	r2, r2, #31
 8001bf2:	2101      	movs	r1, #1
 8001bf4:	fa01 f202 	lsl.w	r2, r1, r2
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d1ab      	bne.n	8001b56 <HAL_RCC_OscConfig+0x24e>
 8001bfe:	e002      	b.n	8001c06 <HAL_RCC_OscConfig+0x2fe>
 8001c00:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c06:	1d3b      	adds	r3, r7, #4
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f003 0302 	and.w	r3, r3, #2
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	f000 816f 	beq.w	8001ef4 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001c16:	4bd0      	ldr	r3, [pc, #832]	; (8001f58 <HAL_RCC_OscConfig+0x650>)
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	f003 030c 	and.w	r3, r3, #12
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d00b      	beq.n	8001c3a <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001c22:	4bcd      	ldr	r3, [pc, #820]	; (8001f58 <HAL_RCC_OscConfig+0x650>)
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	f003 030c 	and.w	r3, r3, #12
 8001c2a:	2b08      	cmp	r3, #8
 8001c2c:	d16c      	bne.n	8001d08 <HAL_RCC_OscConfig+0x400>
 8001c2e:	4bca      	ldr	r3, [pc, #808]	; (8001f58 <HAL_RCC_OscConfig+0x650>)
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d166      	bne.n	8001d08 <HAL_RCC_OscConfig+0x400>
 8001c3a:	2302      	movs	r3, #2
 8001c3c:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c40:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001c44:	fa93 f3a3 	rbit	r3, r3
 8001c48:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001c4c:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c50:	fab3 f383 	clz	r3, r3
 8001c54:	b2db      	uxtb	r3, r3
 8001c56:	095b      	lsrs	r3, r3, #5
 8001c58:	b2db      	uxtb	r3, r3
 8001c5a:	f043 0301 	orr.w	r3, r3, #1
 8001c5e:	b2db      	uxtb	r3, r3
 8001c60:	2b01      	cmp	r3, #1
 8001c62:	d102      	bne.n	8001c6a <HAL_RCC_OscConfig+0x362>
 8001c64:	4bbc      	ldr	r3, [pc, #752]	; (8001f58 <HAL_RCC_OscConfig+0x650>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	e013      	b.n	8001c92 <HAL_RCC_OscConfig+0x38a>
 8001c6a:	2302      	movs	r3, #2
 8001c6c:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c70:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001c74:	fa93 f3a3 	rbit	r3, r3
 8001c78:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001c7c:	2302      	movs	r3, #2
 8001c7e:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001c82:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001c86:	fa93 f3a3 	rbit	r3, r3
 8001c8a:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001c8e:	4bb2      	ldr	r3, [pc, #712]	; (8001f58 <HAL_RCC_OscConfig+0x650>)
 8001c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c92:	2202      	movs	r2, #2
 8001c94:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001c98:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001c9c:	fa92 f2a2 	rbit	r2, r2
 8001ca0:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001ca4:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001ca8:	fab2 f282 	clz	r2, r2
 8001cac:	b2d2      	uxtb	r2, r2
 8001cae:	f042 0220 	orr.w	r2, r2, #32
 8001cb2:	b2d2      	uxtb	r2, r2
 8001cb4:	f002 021f 	and.w	r2, r2, #31
 8001cb8:	2101      	movs	r1, #1
 8001cba:	fa01 f202 	lsl.w	r2, r1, r2
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d007      	beq.n	8001cd4 <HAL_RCC_OscConfig+0x3cc>
 8001cc4:	1d3b      	adds	r3, r7, #4
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	691b      	ldr	r3, [r3, #16]
 8001cca:	2b01      	cmp	r3, #1
 8001ccc:	d002      	beq.n	8001cd4 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	f000 bd1b 	b.w	800270a <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cd4:	4ba0      	ldr	r3, [pc, #640]	; (8001f58 <HAL_RCC_OscConfig+0x650>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cdc:	1d3b      	adds	r3, r7, #4
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	695b      	ldr	r3, [r3, #20]
 8001ce2:	21f8      	movs	r1, #248	; 0xf8
 8001ce4:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ce8:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001cec:	fa91 f1a1 	rbit	r1, r1
 8001cf0:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001cf4:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001cf8:	fab1 f181 	clz	r1, r1
 8001cfc:	b2c9      	uxtb	r1, r1
 8001cfe:	408b      	lsls	r3, r1
 8001d00:	4995      	ldr	r1, [pc, #596]	; (8001f58 <HAL_RCC_OscConfig+0x650>)
 8001d02:	4313      	orrs	r3, r2
 8001d04:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d06:	e0f5      	b.n	8001ef4 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d08:	1d3b      	adds	r3, r7, #4
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	691b      	ldr	r3, [r3, #16]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	f000 8085 	beq.w	8001e1e <HAL_RCC_OscConfig+0x516>
 8001d14:	2301      	movs	r3, #1
 8001d16:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d1a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001d1e:	fa93 f3a3 	rbit	r3, r3
 8001d22:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001d26:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d2a:	fab3 f383 	clz	r3, r3
 8001d2e:	b2db      	uxtb	r3, r3
 8001d30:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001d34:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001d38:	009b      	lsls	r3, r3, #2
 8001d3a:	461a      	mov	r2, r3
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d40:	f7ff f8da 	bl	8000ef8 <HAL_GetTick>
 8001d44:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d48:	e00a      	b.n	8001d60 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d4a:	f7ff f8d5 	bl	8000ef8 <HAL_GetTick>
 8001d4e:	4602      	mov	r2, r0
 8001d50:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d54:	1ad3      	subs	r3, r2, r3
 8001d56:	2b02      	cmp	r3, #2
 8001d58:	d902      	bls.n	8001d60 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8001d5a:	2303      	movs	r3, #3
 8001d5c:	f000 bcd5 	b.w	800270a <HAL_RCC_OscConfig+0xe02>
 8001d60:	2302      	movs	r3, #2
 8001d62:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d66:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001d6a:	fa93 f3a3 	rbit	r3, r3
 8001d6e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001d72:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d76:	fab3 f383 	clz	r3, r3
 8001d7a:	b2db      	uxtb	r3, r3
 8001d7c:	095b      	lsrs	r3, r3, #5
 8001d7e:	b2db      	uxtb	r3, r3
 8001d80:	f043 0301 	orr.w	r3, r3, #1
 8001d84:	b2db      	uxtb	r3, r3
 8001d86:	2b01      	cmp	r3, #1
 8001d88:	d102      	bne.n	8001d90 <HAL_RCC_OscConfig+0x488>
 8001d8a:	4b73      	ldr	r3, [pc, #460]	; (8001f58 <HAL_RCC_OscConfig+0x650>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	e013      	b.n	8001db8 <HAL_RCC_OscConfig+0x4b0>
 8001d90:	2302      	movs	r3, #2
 8001d92:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d96:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001d9a:	fa93 f3a3 	rbit	r3, r3
 8001d9e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001da2:	2302      	movs	r3, #2
 8001da4:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001da8:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001dac:	fa93 f3a3 	rbit	r3, r3
 8001db0:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001db4:	4b68      	ldr	r3, [pc, #416]	; (8001f58 <HAL_RCC_OscConfig+0x650>)
 8001db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db8:	2202      	movs	r2, #2
 8001dba:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001dbe:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001dc2:	fa92 f2a2 	rbit	r2, r2
 8001dc6:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001dca:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001dce:	fab2 f282 	clz	r2, r2
 8001dd2:	b2d2      	uxtb	r2, r2
 8001dd4:	f042 0220 	orr.w	r2, r2, #32
 8001dd8:	b2d2      	uxtb	r2, r2
 8001dda:	f002 021f 	and.w	r2, r2, #31
 8001dde:	2101      	movs	r1, #1
 8001de0:	fa01 f202 	lsl.w	r2, r1, r2
 8001de4:	4013      	ands	r3, r2
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d0af      	beq.n	8001d4a <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dea:	4b5b      	ldr	r3, [pc, #364]	; (8001f58 <HAL_RCC_OscConfig+0x650>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001df2:	1d3b      	adds	r3, r7, #4
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	695b      	ldr	r3, [r3, #20]
 8001df8:	21f8      	movs	r1, #248	; 0xf8
 8001dfa:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dfe:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001e02:	fa91 f1a1 	rbit	r1, r1
 8001e06:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001e0a:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001e0e:	fab1 f181 	clz	r1, r1
 8001e12:	b2c9      	uxtb	r1, r1
 8001e14:	408b      	lsls	r3, r1
 8001e16:	4950      	ldr	r1, [pc, #320]	; (8001f58 <HAL_RCC_OscConfig+0x650>)
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	600b      	str	r3, [r1, #0]
 8001e1c:	e06a      	b.n	8001ef4 <HAL_RCC_OscConfig+0x5ec>
 8001e1e:	2301      	movs	r3, #1
 8001e20:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e24:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001e28:	fa93 f3a3 	rbit	r3, r3
 8001e2c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001e30:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e34:	fab3 f383 	clz	r3, r3
 8001e38:	b2db      	uxtb	r3, r3
 8001e3a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001e3e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001e42:	009b      	lsls	r3, r3, #2
 8001e44:	461a      	mov	r2, r3
 8001e46:	2300      	movs	r3, #0
 8001e48:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e4a:	f7ff f855 	bl	8000ef8 <HAL_GetTick>
 8001e4e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e52:	e00a      	b.n	8001e6a <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e54:	f7ff f850 	bl	8000ef8 <HAL_GetTick>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001e5e:	1ad3      	subs	r3, r2, r3
 8001e60:	2b02      	cmp	r3, #2
 8001e62:	d902      	bls.n	8001e6a <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8001e64:	2303      	movs	r3, #3
 8001e66:	f000 bc50 	b.w	800270a <HAL_RCC_OscConfig+0xe02>
 8001e6a:	2302      	movs	r3, #2
 8001e6c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e70:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001e74:	fa93 f3a3 	rbit	r3, r3
 8001e78:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001e7c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e80:	fab3 f383 	clz	r3, r3
 8001e84:	b2db      	uxtb	r3, r3
 8001e86:	095b      	lsrs	r3, r3, #5
 8001e88:	b2db      	uxtb	r3, r3
 8001e8a:	f043 0301 	orr.w	r3, r3, #1
 8001e8e:	b2db      	uxtb	r3, r3
 8001e90:	2b01      	cmp	r3, #1
 8001e92:	d102      	bne.n	8001e9a <HAL_RCC_OscConfig+0x592>
 8001e94:	4b30      	ldr	r3, [pc, #192]	; (8001f58 <HAL_RCC_OscConfig+0x650>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	e013      	b.n	8001ec2 <HAL_RCC_OscConfig+0x5ba>
 8001e9a:	2302      	movs	r3, #2
 8001e9c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ea0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001ea4:	fa93 f3a3 	rbit	r3, r3
 8001ea8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001eac:	2302      	movs	r3, #2
 8001eae:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001eb2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001eb6:	fa93 f3a3 	rbit	r3, r3
 8001eba:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001ebe:	4b26      	ldr	r3, [pc, #152]	; (8001f58 <HAL_RCC_OscConfig+0x650>)
 8001ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec2:	2202      	movs	r2, #2
 8001ec4:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001ec8:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001ecc:	fa92 f2a2 	rbit	r2, r2
 8001ed0:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001ed4:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001ed8:	fab2 f282 	clz	r2, r2
 8001edc:	b2d2      	uxtb	r2, r2
 8001ede:	f042 0220 	orr.w	r2, r2, #32
 8001ee2:	b2d2      	uxtb	r2, r2
 8001ee4:	f002 021f 	and.w	r2, r2, #31
 8001ee8:	2101      	movs	r1, #1
 8001eea:	fa01 f202 	lsl.w	r2, r1, r2
 8001eee:	4013      	ands	r3, r2
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d1af      	bne.n	8001e54 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ef4:	1d3b      	adds	r3, r7, #4
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f003 0308 	and.w	r3, r3, #8
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	f000 80da 	beq.w	80020b8 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f04:	1d3b      	adds	r3, r7, #4
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	699b      	ldr	r3, [r3, #24]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d069      	beq.n	8001fe2 <HAL_RCC_OscConfig+0x6da>
 8001f0e:	2301      	movs	r3, #1
 8001f10:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f14:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001f18:	fa93 f3a3 	rbit	r3, r3
 8001f1c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001f20:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f24:	fab3 f383 	clz	r3, r3
 8001f28:	b2db      	uxtb	r3, r3
 8001f2a:	461a      	mov	r2, r3
 8001f2c:	4b0b      	ldr	r3, [pc, #44]	; (8001f5c <HAL_RCC_OscConfig+0x654>)
 8001f2e:	4413      	add	r3, r2
 8001f30:	009b      	lsls	r3, r3, #2
 8001f32:	461a      	mov	r2, r3
 8001f34:	2301      	movs	r3, #1
 8001f36:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f38:	f7fe ffde 	bl	8000ef8 <HAL_GetTick>
 8001f3c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f40:	e00e      	b.n	8001f60 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f42:	f7fe ffd9 	bl	8000ef8 <HAL_GetTick>
 8001f46:	4602      	mov	r2, r0
 8001f48:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f4c:	1ad3      	subs	r3, r2, r3
 8001f4e:	2b02      	cmp	r3, #2
 8001f50:	d906      	bls.n	8001f60 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8001f52:	2303      	movs	r3, #3
 8001f54:	e3d9      	b.n	800270a <HAL_RCC_OscConfig+0xe02>
 8001f56:	bf00      	nop
 8001f58:	40021000 	.word	0x40021000
 8001f5c:	10908120 	.word	0x10908120
 8001f60:	2302      	movs	r3, #2
 8001f62:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f66:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001f6a:	fa93 f3a3 	rbit	r3, r3
 8001f6e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001f72:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001f76:	2202      	movs	r2, #2
 8001f78:	601a      	str	r2, [r3, #0]
 8001f7a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	fa93 f2a3 	rbit	r2, r3
 8001f84:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001f88:	601a      	str	r2, [r3, #0]
 8001f8a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001f8e:	2202      	movs	r2, #2
 8001f90:	601a      	str	r2, [r3, #0]
 8001f92:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	fa93 f2a3 	rbit	r2, r3
 8001f9c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001fa0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fa2:	4ba5      	ldr	r3, [pc, #660]	; (8002238 <HAL_RCC_OscConfig+0x930>)
 8001fa4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001fa6:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001faa:	2102      	movs	r1, #2
 8001fac:	6019      	str	r1, [r3, #0]
 8001fae:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	fa93 f1a3 	rbit	r1, r3
 8001fb8:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001fbc:	6019      	str	r1, [r3, #0]
  return result;
 8001fbe:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	fab3 f383 	clz	r3, r3
 8001fc8:	b2db      	uxtb	r3, r3
 8001fca:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001fce:	b2db      	uxtb	r3, r3
 8001fd0:	f003 031f 	and.w	r3, r3, #31
 8001fd4:	2101      	movs	r1, #1
 8001fd6:	fa01 f303 	lsl.w	r3, r1, r3
 8001fda:	4013      	ands	r3, r2
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d0b0      	beq.n	8001f42 <HAL_RCC_OscConfig+0x63a>
 8001fe0:	e06a      	b.n	80020b8 <HAL_RCC_OscConfig+0x7b0>
 8001fe2:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fea:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	fa93 f2a3 	rbit	r2, r3
 8001ff4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001ff8:	601a      	str	r2, [r3, #0]
  return result;
 8001ffa:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001ffe:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002000:	fab3 f383 	clz	r3, r3
 8002004:	b2db      	uxtb	r3, r3
 8002006:	461a      	mov	r2, r3
 8002008:	4b8c      	ldr	r3, [pc, #560]	; (800223c <HAL_RCC_OscConfig+0x934>)
 800200a:	4413      	add	r3, r2
 800200c:	009b      	lsls	r3, r3, #2
 800200e:	461a      	mov	r2, r3
 8002010:	2300      	movs	r3, #0
 8002012:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002014:	f7fe ff70 	bl	8000ef8 <HAL_GetTick>
 8002018:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800201c:	e009      	b.n	8002032 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800201e:	f7fe ff6b 	bl	8000ef8 <HAL_GetTick>
 8002022:	4602      	mov	r2, r0
 8002024:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002028:	1ad3      	subs	r3, r2, r3
 800202a:	2b02      	cmp	r3, #2
 800202c:	d901      	bls.n	8002032 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 800202e:	2303      	movs	r3, #3
 8002030:	e36b      	b.n	800270a <HAL_RCC_OscConfig+0xe02>
 8002032:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002036:	2202      	movs	r2, #2
 8002038:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800203a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	fa93 f2a3 	rbit	r2, r3
 8002044:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002048:	601a      	str	r2, [r3, #0]
 800204a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800204e:	2202      	movs	r2, #2
 8002050:	601a      	str	r2, [r3, #0]
 8002052:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	fa93 f2a3 	rbit	r2, r3
 800205c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002060:	601a      	str	r2, [r3, #0]
 8002062:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002066:	2202      	movs	r2, #2
 8002068:	601a      	str	r2, [r3, #0]
 800206a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	fa93 f2a3 	rbit	r2, r3
 8002074:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002078:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800207a:	4b6f      	ldr	r3, [pc, #444]	; (8002238 <HAL_RCC_OscConfig+0x930>)
 800207c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800207e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002082:	2102      	movs	r1, #2
 8002084:	6019      	str	r1, [r3, #0]
 8002086:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	fa93 f1a3 	rbit	r1, r3
 8002090:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002094:	6019      	str	r1, [r3, #0]
  return result;
 8002096:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	fab3 f383 	clz	r3, r3
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80020a6:	b2db      	uxtb	r3, r3
 80020a8:	f003 031f 	and.w	r3, r3, #31
 80020ac:	2101      	movs	r1, #1
 80020ae:	fa01 f303 	lsl.w	r3, r1, r3
 80020b2:	4013      	ands	r3, r2
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d1b2      	bne.n	800201e <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020b8:	1d3b      	adds	r3, r7, #4
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f003 0304 	and.w	r3, r3, #4
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	f000 8158 	beq.w	8002378 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020c8:	2300      	movs	r3, #0
 80020ca:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020ce:	4b5a      	ldr	r3, [pc, #360]	; (8002238 <HAL_RCC_OscConfig+0x930>)
 80020d0:	69db      	ldr	r3, [r3, #28]
 80020d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d112      	bne.n	8002100 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020da:	4b57      	ldr	r3, [pc, #348]	; (8002238 <HAL_RCC_OscConfig+0x930>)
 80020dc:	69db      	ldr	r3, [r3, #28]
 80020de:	4a56      	ldr	r2, [pc, #344]	; (8002238 <HAL_RCC_OscConfig+0x930>)
 80020e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020e4:	61d3      	str	r3, [r2, #28]
 80020e6:	4b54      	ldr	r3, [pc, #336]	; (8002238 <HAL_RCC_OscConfig+0x930>)
 80020e8:	69db      	ldr	r3, [r3, #28]
 80020ea:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80020ee:	f107 0308 	add.w	r3, r7, #8
 80020f2:	601a      	str	r2, [r3, #0]
 80020f4:	f107 0308 	add.w	r3, r7, #8
 80020f8:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80020fa:	2301      	movs	r3, #1
 80020fc:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002100:	4b4f      	ldr	r3, [pc, #316]	; (8002240 <HAL_RCC_OscConfig+0x938>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002108:	2b00      	cmp	r3, #0
 800210a:	d11a      	bne.n	8002142 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800210c:	4b4c      	ldr	r3, [pc, #304]	; (8002240 <HAL_RCC_OscConfig+0x938>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a4b      	ldr	r2, [pc, #300]	; (8002240 <HAL_RCC_OscConfig+0x938>)
 8002112:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002116:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002118:	f7fe feee 	bl	8000ef8 <HAL_GetTick>
 800211c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002120:	e009      	b.n	8002136 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002122:	f7fe fee9 	bl	8000ef8 <HAL_GetTick>
 8002126:	4602      	mov	r2, r0
 8002128:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800212c:	1ad3      	subs	r3, r2, r3
 800212e:	2b64      	cmp	r3, #100	; 0x64
 8002130:	d901      	bls.n	8002136 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8002132:	2303      	movs	r3, #3
 8002134:	e2e9      	b.n	800270a <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002136:	4b42      	ldr	r3, [pc, #264]	; (8002240 <HAL_RCC_OscConfig+0x938>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800213e:	2b00      	cmp	r3, #0
 8002140:	d0ef      	beq.n	8002122 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002142:	1d3b      	adds	r3, r7, #4
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	68db      	ldr	r3, [r3, #12]
 8002148:	2b01      	cmp	r3, #1
 800214a:	d106      	bne.n	800215a <HAL_RCC_OscConfig+0x852>
 800214c:	4b3a      	ldr	r3, [pc, #232]	; (8002238 <HAL_RCC_OscConfig+0x930>)
 800214e:	6a1b      	ldr	r3, [r3, #32]
 8002150:	4a39      	ldr	r2, [pc, #228]	; (8002238 <HAL_RCC_OscConfig+0x930>)
 8002152:	f043 0301 	orr.w	r3, r3, #1
 8002156:	6213      	str	r3, [r2, #32]
 8002158:	e02f      	b.n	80021ba <HAL_RCC_OscConfig+0x8b2>
 800215a:	1d3b      	adds	r3, r7, #4
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	68db      	ldr	r3, [r3, #12]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d10c      	bne.n	800217e <HAL_RCC_OscConfig+0x876>
 8002164:	4b34      	ldr	r3, [pc, #208]	; (8002238 <HAL_RCC_OscConfig+0x930>)
 8002166:	6a1b      	ldr	r3, [r3, #32]
 8002168:	4a33      	ldr	r2, [pc, #204]	; (8002238 <HAL_RCC_OscConfig+0x930>)
 800216a:	f023 0301 	bic.w	r3, r3, #1
 800216e:	6213      	str	r3, [r2, #32]
 8002170:	4b31      	ldr	r3, [pc, #196]	; (8002238 <HAL_RCC_OscConfig+0x930>)
 8002172:	6a1b      	ldr	r3, [r3, #32]
 8002174:	4a30      	ldr	r2, [pc, #192]	; (8002238 <HAL_RCC_OscConfig+0x930>)
 8002176:	f023 0304 	bic.w	r3, r3, #4
 800217a:	6213      	str	r3, [r2, #32]
 800217c:	e01d      	b.n	80021ba <HAL_RCC_OscConfig+0x8b2>
 800217e:	1d3b      	adds	r3, r7, #4
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	68db      	ldr	r3, [r3, #12]
 8002184:	2b05      	cmp	r3, #5
 8002186:	d10c      	bne.n	80021a2 <HAL_RCC_OscConfig+0x89a>
 8002188:	4b2b      	ldr	r3, [pc, #172]	; (8002238 <HAL_RCC_OscConfig+0x930>)
 800218a:	6a1b      	ldr	r3, [r3, #32]
 800218c:	4a2a      	ldr	r2, [pc, #168]	; (8002238 <HAL_RCC_OscConfig+0x930>)
 800218e:	f043 0304 	orr.w	r3, r3, #4
 8002192:	6213      	str	r3, [r2, #32]
 8002194:	4b28      	ldr	r3, [pc, #160]	; (8002238 <HAL_RCC_OscConfig+0x930>)
 8002196:	6a1b      	ldr	r3, [r3, #32]
 8002198:	4a27      	ldr	r2, [pc, #156]	; (8002238 <HAL_RCC_OscConfig+0x930>)
 800219a:	f043 0301 	orr.w	r3, r3, #1
 800219e:	6213      	str	r3, [r2, #32]
 80021a0:	e00b      	b.n	80021ba <HAL_RCC_OscConfig+0x8b2>
 80021a2:	4b25      	ldr	r3, [pc, #148]	; (8002238 <HAL_RCC_OscConfig+0x930>)
 80021a4:	6a1b      	ldr	r3, [r3, #32]
 80021a6:	4a24      	ldr	r2, [pc, #144]	; (8002238 <HAL_RCC_OscConfig+0x930>)
 80021a8:	f023 0301 	bic.w	r3, r3, #1
 80021ac:	6213      	str	r3, [r2, #32]
 80021ae:	4b22      	ldr	r3, [pc, #136]	; (8002238 <HAL_RCC_OscConfig+0x930>)
 80021b0:	6a1b      	ldr	r3, [r3, #32]
 80021b2:	4a21      	ldr	r2, [pc, #132]	; (8002238 <HAL_RCC_OscConfig+0x930>)
 80021b4:	f023 0304 	bic.w	r3, r3, #4
 80021b8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80021ba:	1d3b      	adds	r3, r7, #4
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	68db      	ldr	r3, [r3, #12]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d06b      	beq.n	800229c <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021c4:	f7fe fe98 	bl	8000ef8 <HAL_GetTick>
 80021c8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021cc:	e00b      	b.n	80021e6 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021ce:	f7fe fe93 	bl	8000ef8 <HAL_GetTick>
 80021d2:	4602      	mov	r2, r0
 80021d4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80021d8:	1ad3      	subs	r3, r2, r3
 80021da:	f241 3288 	movw	r2, #5000	; 0x1388
 80021de:	4293      	cmp	r3, r2
 80021e0:	d901      	bls.n	80021e6 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 80021e2:	2303      	movs	r3, #3
 80021e4:	e291      	b.n	800270a <HAL_RCC_OscConfig+0xe02>
 80021e6:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80021ea:	2202      	movs	r2, #2
 80021ec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ee:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	fa93 f2a3 	rbit	r2, r3
 80021f8:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80021fc:	601a      	str	r2, [r3, #0]
 80021fe:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002202:	2202      	movs	r2, #2
 8002204:	601a      	str	r2, [r3, #0]
 8002206:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	fa93 f2a3 	rbit	r2, r3
 8002210:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002214:	601a      	str	r2, [r3, #0]
  return result;
 8002216:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800221a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800221c:	fab3 f383 	clz	r3, r3
 8002220:	b2db      	uxtb	r3, r3
 8002222:	095b      	lsrs	r3, r3, #5
 8002224:	b2db      	uxtb	r3, r3
 8002226:	f043 0302 	orr.w	r3, r3, #2
 800222a:	b2db      	uxtb	r3, r3
 800222c:	2b02      	cmp	r3, #2
 800222e:	d109      	bne.n	8002244 <HAL_RCC_OscConfig+0x93c>
 8002230:	4b01      	ldr	r3, [pc, #4]	; (8002238 <HAL_RCC_OscConfig+0x930>)
 8002232:	6a1b      	ldr	r3, [r3, #32]
 8002234:	e014      	b.n	8002260 <HAL_RCC_OscConfig+0x958>
 8002236:	bf00      	nop
 8002238:	40021000 	.word	0x40021000
 800223c:	10908120 	.word	0x10908120
 8002240:	40007000 	.word	0x40007000
 8002244:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002248:	2202      	movs	r2, #2
 800224a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800224c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	fa93 f2a3 	rbit	r2, r3
 8002256:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800225a:	601a      	str	r2, [r3, #0]
 800225c:	4bbb      	ldr	r3, [pc, #748]	; (800254c <HAL_RCC_OscConfig+0xc44>)
 800225e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002260:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002264:	2102      	movs	r1, #2
 8002266:	6011      	str	r1, [r2, #0]
 8002268:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800226c:	6812      	ldr	r2, [r2, #0]
 800226e:	fa92 f1a2 	rbit	r1, r2
 8002272:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8002276:	6011      	str	r1, [r2, #0]
  return result;
 8002278:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800227c:	6812      	ldr	r2, [r2, #0]
 800227e:	fab2 f282 	clz	r2, r2
 8002282:	b2d2      	uxtb	r2, r2
 8002284:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002288:	b2d2      	uxtb	r2, r2
 800228a:	f002 021f 	and.w	r2, r2, #31
 800228e:	2101      	movs	r1, #1
 8002290:	fa01 f202 	lsl.w	r2, r1, r2
 8002294:	4013      	ands	r3, r2
 8002296:	2b00      	cmp	r3, #0
 8002298:	d099      	beq.n	80021ce <HAL_RCC_OscConfig+0x8c6>
 800229a:	e063      	b.n	8002364 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800229c:	f7fe fe2c 	bl	8000ef8 <HAL_GetTick>
 80022a0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022a4:	e00b      	b.n	80022be <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022a6:	f7fe fe27 	bl	8000ef8 <HAL_GetTick>
 80022aa:	4602      	mov	r2, r0
 80022ac:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80022b0:	1ad3      	subs	r3, r2, r3
 80022b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d901      	bls.n	80022be <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 80022ba:	2303      	movs	r3, #3
 80022bc:	e225      	b.n	800270a <HAL_RCC_OscConfig+0xe02>
 80022be:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80022c2:	2202      	movs	r2, #2
 80022c4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022c6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	fa93 f2a3 	rbit	r2, r3
 80022d0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80022d4:	601a      	str	r2, [r3, #0]
 80022d6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80022da:	2202      	movs	r2, #2
 80022dc:	601a      	str	r2, [r3, #0]
 80022de:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	fa93 f2a3 	rbit	r2, r3
 80022e8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80022ec:	601a      	str	r2, [r3, #0]
  return result;
 80022ee:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80022f2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022f4:	fab3 f383 	clz	r3, r3
 80022f8:	b2db      	uxtb	r3, r3
 80022fa:	095b      	lsrs	r3, r3, #5
 80022fc:	b2db      	uxtb	r3, r3
 80022fe:	f043 0302 	orr.w	r3, r3, #2
 8002302:	b2db      	uxtb	r3, r3
 8002304:	2b02      	cmp	r3, #2
 8002306:	d102      	bne.n	800230e <HAL_RCC_OscConfig+0xa06>
 8002308:	4b90      	ldr	r3, [pc, #576]	; (800254c <HAL_RCC_OscConfig+0xc44>)
 800230a:	6a1b      	ldr	r3, [r3, #32]
 800230c:	e00d      	b.n	800232a <HAL_RCC_OscConfig+0xa22>
 800230e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002312:	2202      	movs	r2, #2
 8002314:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002316:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	fa93 f2a3 	rbit	r2, r3
 8002320:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002324:	601a      	str	r2, [r3, #0]
 8002326:	4b89      	ldr	r3, [pc, #548]	; (800254c <HAL_RCC_OscConfig+0xc44>)
 8002328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800232a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800232e:	2102      	movs	r1, #2
 8002330:	6011      	str	r1, [r2, #0]
 8002332:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002336:	6812      	ldr	r2, [r2, #0]
 8002338:	fa92 f1a2 	rbit	r1, r2
 800233c:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8002340:	6011      	str	r1, [r2, #0]
  return result;
 8002342:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8002346:	6812      	ldr	r2, [r2, #0]
 8002348:	fab2 f282 	clz	r2, r2
 800234c:	b2d2      	uxtb	r2, r2
 800234e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002352:	b2d2      	uxtb	r2, r2
 8002354:	f002 021f 	and.w	r2, r2, #31
 8002358:	2101      	movs	r1, #1
 800235a:	fa01 f202 	lsl.w	r2, r1, r2
 800235e:	4013      	ands	r3, r2
 8002360:	2b00      	cmp	r3, #0
 8002362:	d1a0      	bne.n	80022a6 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002364:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002368:	2b01      	cmp	r3, #1
 800236a:	d105      	bne.n	8002378 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800236c:	4b77      	ldr	r3, [pc, #476]	; (800254c <HAL_RCC_OscConfig+0xc44>)
 800236e:	69db      	ldr	r3, [r3, #28]
 8002370:	4a76      	ldr	r2, [pc, #472]	; (800254c <HAL_RCC_OscConfig+0xc44>)
 8002372:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002376:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002378:	1d3b      	adds	r3, r7, #4
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	69db      	ldr	r3, [r3, #28]
 800237e:	2b00      	cmp	r3, #0
 8002380:	f000 81c2 	beq.w	8002708 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002384:	4b71      	ldr	r3, [pc, #452]	; (800254c <HAL_RCC_OscConfig+0xc44>)
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	f003 030c 	and.w	r3, r3, #12
 800238c:	2b08      	cmp	r3, #8
 800238e:	f000 819c 	beq.w	80026ca <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002392:	1d3b      	adds	r3, r7, #4
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	69db      	ldr	r3, [r3, #28]
 8002398:	2b02      	cmp	r3, #2
 800239a:	f040 8114 	bne.w	80025c6 <HAL_RCC_OscConfig+0xcbe>
 800239e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80023a2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80023a6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023a8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	fa93 f2a3 	rbit	r2, r3
 80023b2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80023b6:	601a      	str	r2, [r3, #0]
  return result;
 80023b8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80023bc:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023be:	fab3 f383 	clz	r3, r3
 80023c2:	b2db      	uxtb	r3, r3
 80023c4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80023c8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80023cc:	009b      	lsls	r3, r3, #2
 80023ce:	461a      	mov	r2, r3
 80023d0:	2300      	movs	r3, #0
 80023d2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023d4:	f7fe fd90 	bl	8000ef8 <HAL_GetTick>
 80023d8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023dc:	e009      	b.n	80023f2 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023de:	f7fe fd8b 	bl	8000ef8 <HAL_GetTick>
 80023e2:	4602      	mov	r2, r0
 80023e4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80023e8:	1ad3      	subs	r3, r2, r3
 80023ea:	2b02      	cmp	r3, #2
 80023ec:	d901      	bls.n	80023f2 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 80023ee:	2303      	movs	r3, #3
 80023f0:	e18b      	b.n	800270a <HAL_RCC_OscConfig+0xe02>
 80023f2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80023f6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80023fa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023fc:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	fa93 f2a3 	rbit	r2, r3
 8002406:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800240a:	601a      	str	r2, [r3, #0]
  return result;
 800240c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002410:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002412:	fab3 f383 	clz	r3, r3
 8002416:	b2db      	uxtb	r3, r3
 8002418:	095b      	lsrs	r3, r3, #5
 800241a:	b2db      	uxtb	r3, r3
 800241c:	f043 0301 	orr.w	r3, r3, #1
 8002420:	b2db      	uxtb	r3, r3
 8002422:	2b01      	cmp	r3, #1
 8002424:	d102      	bne.n	800242c <HAL_RCC_OscConfig+0xb24>
 8002426:	4b49      	ldr	r3, [pc, #292]	; (800254c <HAL_RCC_OscConfig+0xc44>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	e01b      	b.n	8002464 <HAL_RCC_OscConfig+0xb5c>
 800242c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002430:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002434:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002436:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	fa93 f2a3 	rbit	r2, r3
 8002440:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002444:	601a      	str	r2, [r3, #0]
 8002446:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800244a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800244e:	601a      	str	r2, [r3, #0]
 8002450:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	fa93 f2a3 	rbit	r2, r3
 800245a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800245e:	601a      	str	r2, [r3, #0]
 8002460:	4b3a      	ldr	r3, [pc, #232]	; (800254c <HAL_RCC_OscConfig+0xc44>)
 8002462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002464:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002468:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800246c:	6011      	str	r1, [r2, #0]
 800246e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002472:	6812      	ldr	r2, [r2, #0]
 8002474:	fa92 f1a2 	rbit	r1, r2
 8002478:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800247c:	6011      	str	r1, [r2, #0]
  return result;
 800247e:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8002482:	6812      	ldr	r2, [r2, #0]
 8002484:	fab2 f282 	clz	r2, r2
 8002488:	b2d2      	uxtb	r2, r2
 800248a:	f042 0220 	orr.w	r2, r2, #32
 800248e:	b2d2      	uxtb	r2, r2
 8002490:	f002 021f 	and.w	r2, r2, #31
 8002494:	2101      	movs	r1, #1
 8002496:	fa01 f202 	lsl.w	r2, r1, r2
 800249a:	4013      	ands	r3, r2
 800249c:	2b00      	cmp	r3, #0
 800249e:	d19e      	bne.n	80023de <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024a0:	4b2a      	ldr	r3, [pc, #168]	; (800254c <HAL_RCC_OscConfig+0xc44>)
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80024a8:	1d3b      	adds	r3, r7, #4
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80024ae:	1d3b      	adds	r3, r7, #4
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	6a1b      	ldr	r3, [r3, #32]
 80024b4:	430b      	orrs	r3, r1
 80024b6:	4925      	ldr	r1, [pc, #148]	; (800254c <HAL_RCC_OscConfig+0xc44>)
 80024b8:	4313      	orrs	r3, r2
 80024ba:	604b      	str	r3, [r1, #4]
 80024bc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80024c0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80024c4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024c6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	fa93 f2a3 	rbit	r2, r3
 80024d0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80024d4:	601a      	str	r2, [r3, #0]
  return result;
 80024d6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80024da:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024dc:	fab3 f383 	clz	r3, r3
 80024e0:	b2db      	uxtb	r3, r3
 80024e2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80024e6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80024ea:	009b      	lsls	r3, r3, #2
 80024ec:	461a      	mov	r2, r3
 80024ee:	2301      	movs	r3, #1
 80024f0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024f2:	f7fe fd01 	bl	8000ef8 <HAL_GetTick>
 80024f6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024fa:	e009      	b.n	8002510 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024fc:	f7fe fcfc 	bl	8000ef8 <HAL_GetTick>
 8002500:	4602      	mov	r2, r0
 8002502:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002506:	1ad3      	subs	r3, r2, r3
 8002508:	2b02      	cmp	r3, #2
 800250a:	d901      	bls.n	8002510 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 800250c:	2303      	movs	r3, #3
 800250e:	e0fc      	b.n	800270a <HAL_RCC_OscConfig+0xe02>
 8002510:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002514:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002518:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800251a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	fa93 f2a3 	rbit	r2, r3
 8002524:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002528:	601a      	str	r2, [r3, #0]
  return result;
 800252a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800252e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002530:	fab3 f383 	clz	r3, r3
 8002534:	b2db      	uxtb	r3, r3
 8002536:	095b      	lsrs	r3, r3, #5
 8002538:	b2db      	uxtb	r3, r3
 800253a:	f043 0301 	orr.w	r3, r3, #1
 800253e:	b2db      	uxtb	r3, r3
 8002540:	2b01      	cmp	r3, #1
 8002542:	d105      	bne.n	8002550 <HAL_RCC_OscConfig+0xc48>
 8002544:	4b01      	ldr	r3, [pc, #4]	; (800254c <HAL_RCC_OscConfig+0xc44>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	e01e      	b.n	8002588 <HAL_RCC_OscConfig+0xc80>
 800254a:	bf00      	nop
 800254c:	40021000 	.word	0x40021000
 8002550:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002554:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002558:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800255a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	fa93 f2a3 	rbit	r2, r3
 8002564:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002568:	601a      	str	r2, [r3, #0]
 800256a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800256e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002572:	601a      	str	r2, [r3, #0]
 8002574:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	fa93 f2a3 	rbit	r2, r3
 800257e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002582:	601a      	str	r2, [r3, #0]
 8002584:	4b63      	ldr	r3, [pc, #396]	; (8002714 <HAL_RCC_OscConfig+0xe0c>)
 8002586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002588:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800258c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002590:	6011      	str	r1, [r2, #0]
 8002592:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002596:	6812      	ldr	r2, [r2, #0]
 8002598:	fa92 f1a2 	rbit	r1, r2
 800259c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80025a0:	6011      	str	r1, [r2, #0]
  return result;
 80025a2:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80025a6:	6812      	ldr	r2, [r2, #0]
 80025a8:	fab2 f282 	clz	r2, r2
 80025ac:	b2d2      	uxtb	r2, r2
 80025ae:	f042 0220 	orr.w	r2, r2, #32
 80025b2:	b2d2      	uxtb	r2, r2
 80025b4:	f002 021f 	and.w	r2, r2, #31
 80025b8:	2101      	movs	r1, #1
 80025ba:	fa01 f202 	lsl.w	r2, r1, r2
 80025be:	4013      	ands	r3, r2
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d09b      	beq.n	80024fc <HAL_RCC_OscConfig+0xbf4>
 80025c4:	e0a0      	b.n	8002708 <HAL_RCC_OscConfig+0xe00>
 80025c6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80025ca:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80025ce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025d0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	fa93 f2a3 	rbit	r2, r3
 80025da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80025de:	601a      	str	r2, [r3, #0]
  return result;
 80025e0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80025e4:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025e6:	fab3 f383 	clz	r3, r3
 80025ea:	b2db      	uxtb	r3, r3
 80025ec:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80025f0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80025f4:	009b      	lsls	r3, r3, #2
 80025f6:	461a      	mov	r2, r3
 80025f8:	2300      	movs	r3, #0
 80025fa:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025fc:	f7fe fc7c 	bl	8000ef8 <HAL_GetTick>
 8002600:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002604:	e009      	b.n	800261a <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002606:	f7fe fc77 	bl	8000ef8 <HAL_GetTick>
 800260a:	4602      	mov	r2, r0
 800260c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002610:	1ad3      	subs	r3, r2, r3
 8002612:	2b02      	cmp	r3, #2
 8002614:	d901      	bls.n	800261a <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8002616:	2303      	movs	r3, #3
 8002618:	e077      	b.n	800270a <HAL_RCC_OscConfig+0xe02>
 800261a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800261e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002622:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002624:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	fa93 f2a3 	rbit	r2, r3
 800262e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002632:	601a      	str	r2, [r3, #0]
  return result;
 8002634:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002638:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800263a:	fab3 f383 	clz	r3, r3
 800263e:	b2db      	uxtb	r3, r3
 8002640:	095b      	lsrs	r3, r3, #5
 8002642:	b2db      	uxtb	r3, r3
 8002644:	f043 0301 	orr.w	r3, r3, #1
 8002648:	b2db      	uxtb	r3, r3
 800264a:	2b01      	cmp	r3, #1
 800264c:	d102      	bne.n	8002654 <HAL_RCC_OscConfig+0xd4c>
 800264e:	4b31      	ldr	r3, [pc, #196]	; (8002714 <HAL_RCC_OscConfig+0xe0c>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	e01b      	b.n	800268c <HAL_RCC_OscConfig+0xd84>
 8002654:	f107 0320 	add.w	r3, r7, #32
 8002658:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800265c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800265e:	f107 0320 	add.w	r3, r7, #32
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	fa93 f2a3 	rbit	r2, r3
 8002668:	f107 031c 	add.w	r3, r7, #28
 800266c:	601a      	str	r2, [r3, #0]
 800266e:	f107 0318 	add.w	r3, r7, #24
 8002672:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002676:	601a      	str	r2, [r3, #0]
 8002678:	f107 0318 	add.w	r3, r7, #24
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	fa93 f2a3 	rbit	r2, r3
 8002682:	f107 0314 	add.w	r3, r7, #20
 8002686:	601a      	str	r2, [r3, #0]
 8002688:	4b22      	ldr	r3, [pc, #136]	; (8002714 <HAL_RCC_OscConfig+0xe0c>)
 800268a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800268c:	f107 0210 	add.w	r2, r7, #16
 8002690:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002694:	6011      	str	r1, [r2, #0]
 8002696:	f107 0210 	add.w	r2, r7, #16
 800269a:	6812      	ldr	r2, [r2, #0]
 800269c:	fa92 f1a2 	rbit	r1, r2
 80026a0:	f107 020c 	add.w	r2, r7, #12
 80026a4:	6011      	str	r1, [r2, #0]
  return result;
 80026a6:	f107 020c 	add.w	r2, r7, #12
 80026aa:	6812      	ldr	r2, [r2, #0]
 80026ac:	fab2 f282 	clz	r2, r2
 80026b0:	b2d2      	uxtb	r2, r2
 80026b2:	f042 0220 	orr.w	r2, r2, #32
 80026b6:	b2d2      	uxtb	r2, r2
 80026b8:	f002 021f 	and.w	r2, r2, #31
 80026bc:	2101      	movs	r1, #1
 80026be:	fa01 f202 	lsl.w	r2, r1, r2
 80026c2:	4013      	ands	r3, r2
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d19e      	bne.n	8002606 <HAL_RCC_OscConfig+0xcfe>
 80026c8:	e01e      	b.n	8002708 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026ca:	1d3b      	adds	r3, r7, #4
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	69db      	ldr	r3, [r3, #28]
 80026d0:	2b01      	cmp	r3, #1
 80026d2:	d101      	bne.n	80026d8 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 80026d4:	2301      	movs	r3, #1
 80026d6:	e018      	b.n	800270a <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80026d8:	4b0e      	ldr	r3, [pc, #56]	; (8002714 <HAL_RCC_OscConfig+0xe0c>)
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80026e0:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80026e4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80026e8:	1d3b      	adds	r3, r7, #4
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	6a1b      	ldr	r3, [r3, #32]
 80026ee:	429a      	cmp	r2, r3
 80026f0:	d108      	bne.n	8002704 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80026f2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80026f6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80026fa:	1d3b      	adds	r3, r7, #4
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002700:	429a      	cmp	r2, r3
 8002702:	d001      	beq.n	8002708 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8002704:	2301      	movs	r3, #1
 8002706:	e000      	b.n	800270a <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8002708:	2300      	movs	r3, #0
}
 800270a:	4618      	mov	r0, r3
 800270c:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}
 8002714:	40021000 	.word	0x40021000

08002718 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b09e      	sub	sp, #120	; 0x78
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
 8002720:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002722:	2300      	movs	r3, #0
 8002724:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d101      	bne.n	8002730 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800272c:	2301      	movs	r3, #1
 800272e:	e162      	b.n	80029f6 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002730:	4b90      	ldr	r3, [pc, #576]	; (8002974 <HAL_RCC_ClockConfig+0x25c>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f003 0307 	and.w	r3, r3, #7
 8002738:	683a      	ldr	r2, [r7, #0]
 800273a:	429a      	cmp	r2, r3
 800273c:	d910      	bls.n	8002760 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800273e:	4b8d      	ldr	r3, [pc, #564]	; (8002974 <HAL_RCC_ClockConfig+0x25c>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f023 0207 	bic.w	r2, r3, #7
 8002746:	498b      	ldr	r1, [pc, #556]	; (8002974 <HAL_RCC_ClockConfig+0x25c>)
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	4313      	orrs	r3, r2
 800274c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800274e:	4b89      	ldr	r3, [pc, #548]	; (8002974 <HAL_RCC_ClockConfig+0x25c>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f003 0307 	and.w	r3, r3, #7
 8002756:	683a      	ldr	r2, [r7, #0]
 8002758:	429a      	cmp	r2, r3
 800275a:	d001      	beq.n	8002760 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800275c:	2301      	movs	r3, #1
 800275e:	e14a      	b.n	80029f6 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f003 0302 	and.w	r3, r3, #2
 8002768:	2b00      	cmp	r3, #0
 800276a:	d008      	beq.n	800277e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800276c:	4b82      	ldr	r3, [pc, #520]	; (8002978 <HAL_RCC_ClockConfig+0x260>)
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	497f      	ldr	r1, [pc, #508]	; (8002978 <HAL_RCC_ClockConfig+0x260>)
 800277a:	4313      	orrs	r3, r2
 800277c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f003 0301 	and.w	r3, r3, #1
 8002786:	2b00      	cmp	r3, #0
 8002788:	f000 80dc 	beq.w	8002944 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	2b01      	cmp	r3, #1
 8002792:	d13c      	bne.n	800280e <HAL_RCC_ClockConfig+0xf6>
 8002794:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002798:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800279a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800279c:	fa93 f3a3 	rbit	r3, r3
 80027a0:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80027a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027a4:	fab3 f383 	clz	r3, r3
 80027a8:	b2db      	uxtb	r3, r3
 80027aa:	095b      	lsrs	r3, r3, #5
 80027ac:	b2db      	uxtb	r3, r3
 80027ae:	f043 0301 	orr.w	r3, r3, #1
 80027b2:	b2db      	uxtb	r3, r3
 80027b4:	2b01      	cmp	r3, #1
 80027b6:	d102      	bne.n	80027be <HAL_RCC_ClockConfig+0xa6>
 80027b8:	4b6f      	ldr	r3, [pc, #444]	; (8002978 <HAL_RCC_ClockConfig+0x260>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	e00f      	b.n	80027de <HAL_RCC_ClockConfig+0xc6>
 80027be:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80027c2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027c4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80027c6:	fa93 f3a3 	rbit	r3, r3
 80027ca:	667b      	str	r3, [r7, #100]	; 0x64
 80027cc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80027d0:	663b      	str	r3, [r7, #96]	; 0x60
 80027d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80027d4:	fa93 f3a3 	rbit	r3, r3
 80027d8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80027da:	4b67      	ldr	r3, [pc, #412]	; (8002978 <HAL_RCC_ClockConfig+0x260>)
 80027dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027de:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80027e2:	65ba      	str	r2, [r7, #88]	; 0x58
 80027e4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80027e6:	fa92 f2a2 	rbit	r2, r2
 80027ea:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80027ec:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80027ee:	fab2 f282 	clz	r2, r2
 80027f2:	b2d2      	uxtb	r2, r2
 80027f4:	f042 0220 	orr.w	r2, r2, #32
 80027f8:	b2d2      	uxtb	r2, r2
 80027fa:	f002 021f 	and.w	r2, r2, #31
 80027fe:	2101      	movs	r1, #1
 8002800:	fa01 f202 	lsl.w	r2, r1, r2
 8002804:	4013      	ands	r3, r2
 8002806:	2b00      	cmp	r3, #0
 8002808:	d17b      	bne.n	8002902 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800280a:	2301      	movs	r3, #1
 800280c:	e0f3      	b.n	80029f6 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	2b02      	cmp	r3, #2
 8002814:	d13c      	bne.n	8002890 <HAL_RCC_ClockConfig+0x178>
 8002816:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800281a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800281c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800281e:	fa93 f3a3 	rbit	r3, r3
 8002822:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002824:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002826:	fab3 f383 	clz	r3, r3
 800282a:	b2db      	uxtb	r3, r3
 800282c:	095b      	lsrs	r3, r3, #5
 800282e:	b2db      	uxtb	r3, r3
 8002830:	f043 0301 	orr.w	r3, r3, #1
 8002834:	b2db      	uxtb	r3, r3
 8002836:	2b01      	cmp	r3, #1
 8002838:	d102      	bne.n	8002840 <HAL_RCC_ClockConfig+0x128>
 800283a:	4b4f      	ldr	r3, [pc, #316]	; (8002978 <HAL_RCC_ClockConfig+0x260>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	e00f      	b.n	8002860 <HAL_RCC_ClockConfig+0x148>
 8002840:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002844:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002846:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002848:	fa93 f3a3 	rbit	r3, r3
 800284c:	647b      	str	r3, [r7, #68]	; 0x44
 800284e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002852:	643b      	str	r3, [r7, #64]	; 0x40
 8002854:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002856:	fa93 f3a3 	rbit	r3, r3
 800285a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800285c:	4b46      	ldr	r3, [pc, #280]	; (8002978 <HAL_RCC_ClockConfig+0x260>)
 800285e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002860:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002864:	63ba      	str	r2, [r7, #56]	; 0x38
 8002866:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002868:	fa92 f2a2 	rbit	r2, r2
 800286c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800286e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002870:	fab2 f282 	clz	r2, r2
 8002874:	b2d2      	uxtb	r2, r2
 8002876:	f042 0220 	orr.w	r2, r2, #32
 800287a:	b2d2      	uxtb	r2, r2
 800287c:	f002 021f 	and.w	r2, r2, #31
 8002880:	2101      	movs	r1, #1
 8002882:	fa01 f202 	lsl.w	r2, r1, r2
 8002886:	4013      	ands	r3, r2
 8002888:	2b00      	cmp	r3, #0
 800288a:	d13a      	bne.n	8002902 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800288c:	2301      	movs	r3, #1
 800288e:	e0b2      	b.n	80029f6 <HAL_RCC_ClockConfig+0x2de>
 8002890:	2302      	movs	r3, #2
 8002892:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002896:	fa93 f3a3 	rbit	r3, r3
 800289a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800289c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800289e:	fab3 f383 	clz	r3, r3
 80028a2:	b2db      	uxtb	r3, r3
 80028a4:	095b      	lsrs	r3, r3, #5
 80028a6:	b2db      	uxtb	r3, r3
 80028a8:	f043 0301 	orr.w	r3, r3, #1
 80028ac:	b2db      	uxtb	r3, r3
 80028ae:	2b01      	cmp	r3, #1
 80028b0:	d102      	bne.n	80028b8 <HAL_RCC_ClockConfig+0x1a0>
 80028b2:	4b31      	ldr	r3, [pc, #196]	; (8002978 <HAL_RCC_ClockConfig+0x260>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	e00d      	b.n	80028d4 <HAL_RCC_ClockConfig+0x1bc>
 80028b8:	2302      	movs	r3, #2
 80028ba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028be:	fa93 f3a3 	rbit	r3, r3
 80028c2:	627b      	str	r3, [r7, #36]	; 0x24
 80028c4:	2302      	movs	r3, #2
 80028c6:	623b      	str	r3, [r7, #32]
 80028c8:	6a3b      	ldr	r3, [r7, #32]
 80028ca:	fa93 f3a3 	rbit	r3, r3
 80028ce:	61fb      	str	r3, [r7, #28]
 80028d0:	4b29      	ldr	r3, [pc, #164]	; (8002978 <HAL_RCC_ClockConfig+0x260>)
 80028d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d4:	2202      	movs	r2, #2
 80028d6:	61ba      	str	r2, [r7, #24]
 80028d8:	69ba      	ldr	r2, [r7, #24]
 80028da:	fa92 f2a2 	rbit	r2, r2
 80028de:	617a      	str	r2, [r7, #20]
  return result;
 80028e0:	697a      	ldr	r2, [r7, #20]
 80028e2:	fab2 f282 	clz	r2, r2
 80028e6:	b2d2      	uxtb	r2, r2
 80028e8:	f042 0220 	orr.w	r2, r2, #32
 80028ec:	b2d2      	uxtb	r2, r2
 80028ee:	f002 021f 	and.w	r2, r2, #31
 80028f2:	2101      	movs	r1, #1
 80028f4:	fa01 f202 	lsl.w	r2, r1, r2
 80028f8:	4013      	ands	r3, r2
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d101      	bne.n	8002902 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80028fe:	2301      	movs	r3, #1
 8002900:	e079      	b.n	80029f6 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002902:	4b1d      	ldr	r3, [pc, #116]	; (8002978 <HAL_RCC_ClockConfig+0x260>)
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	f023 0203 	bic.w	r2, r3, #3
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	491a      	ldr	r1, [pc, #104]	; (8002978 <HAL_RCC_ClockConfig+0x260>)
 8002910:	4313      	orrs	r3, r2
 8002912:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002914:	f7fe faf0 	bl	8000ef8 <HAL_GetTick>
 8002918:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800291a:	e00a      	b.n	8002932 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800291c:	f7fe faec 	bl	8000ef8 <HAL_GetTick>
 8002920:	4602      	mov	r2, r0
 8002922:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002924:	1ad3      	subs	r3, r2, r3
 8002926:	f241 3288 	movw	r2, #5000	; 0x1388
 800292a:	4293      	cmp	r3, r2
 800292c:	d901      	bls.n	8002932 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800292e:	2303      	movs	r3, #3
 8002930:	e061      	b.n	80029f6 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002932:	4b11      	ldr	r3, [pc, #68]	; (8002978 <HAL_RCC_ClockConfig+0x260>)
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	f003 020c 	and.w	r2, r3, #12
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	009b      	lsls	r3, r3, #2
 8002940:	429a      	cmp	r2, r3
 8002942:	d1eb      	bne.n	800291c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002944:	4b0b      	ldr	r3, [pc, #44]	; (8002974 <HAL_RCC_ClockConfig+0x25c>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f003 0307 	and.w	r3, r3, #7
 800294c:	683a      	ldr	r2, [r7, #0]
 800294e:	429a      	cmp	r2, r3
 8002950:	d214      	bcs.n	800297c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002952:	4b08      	ldr	r3, [pc, #32]	; (8002974 <HAL_RCC_ClockConfig+0x25c>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f023 0207 	bic.w	r2, r3, #7
 800295a:	4906      	ldr	r1, [pc, #24]	; (8002974 <HAL_RCC_ClockConfig+0x25c>)
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	4313      	orrs	r3, r2
 8002960:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002962:	4b04      	ldr	r3, [pc, #16]	; (8002974 <HAL_RCC_ClockConfig+0x25c>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f003 0307 	and.w	r3, r3, #7
 800296a:	683a      	ldr	r2, [r7, #0]
 800296c:	429a      	cmp	r2, r3
 800296e:	d005      	beq.n	800297c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002970:	2301      	movs	r3, #1
 8002972:	e040      	b.n	80029f6 <HAL_RCC_ClockConfig+0x2de>
 8002974:	40022000 	.word	0x40022000
 8002978:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f003 0304 	and.w	r3, r3, #4
 8002984:	2b00      	cmp	r3, #0
 8002986:	d008      	beq.n	800299a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002988:	4b1d      	ldr	r3, [pc, #116]	; (8002a00 <HAL_RCC_ClockConfig+0x2e8>)
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	68db      	ldr	r3, [r3, #12]
 8002994:	491a      	ldr	r1, [pc, #104]	; (8002a00 <HAL_RCC_ClockConfig+0x2e8>)
 8002996:	4313      	orrs	r3, r2
 8002998:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f003 0308 	and.w	r3, r3, #8
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d009      	beq.n	80029ba <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80029a6:	4b16      	ldr	r3, [pc, #88]	; (8002a00 <HAL_RCC_ClockConfig+0x2e8>)
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	691b      	ldr	r3, [r3, #16]
 80029b2:	00db      	lsls	r3, r3, #3
 80029b4:	4912      	ldr	r1, [pc, #72]	; (8002a00 <HAL_RCC_ClockConfig+0x2e8>)
 80029b6:	4313      	orrs	r3, r2
 80029b8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80029ba:	f000 f829 	bl	8002a10 <HAL_RCC_GetSysClockFreq>
 80029be:	4601      	mov	r1, r0
 80029c0:	4b0f      	ldr	r3, [pc, #60]	; (8002a00 <HAL_RCC_ClockConfig+0x2e8>)
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80029c8:	22f0      	movs	r2, #240	; 0xf0
 80029ca:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029cc:	693a      	ldr	r2, [r7, #16]
 80029ce:	fa92 f2a2 	rbit	r2, r2
 80029d2:	60fa      	str	r2, [r7, #12]
  return result;
 80029d4:	68fa      	ldr	r2, [r7, #12]
 80029d6:	fab2 f282 	clz	r2, r2
 80029da:	b2d2      	uxtb	r2, r2
 80029dc:	40d3      	lsrs	r3, r2
 80029de:	4a09      	ldr	r2, [pc, #36]	; (8002a04 <HAL_RCC_ClockConfig+0x2ec>)
 80029e0:	5cd3      	ldrb	r3, [r2, r3]
 80029e2:	fa21 f303 	lsr.w	r3, r1, r3
 80029e6:	4a08      	ldr	r2, [pc, #32]	; (8002a08 <HAL_RCC_ClockConfig+0x2f0>)
 80029e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80029ea:	4b08      	ldr	r3, [pc, #32]	; (8002a0c <HAL_RCC_ClockConfig+0x2f4>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4618      	mov	r0, r3
 80029f0:	f7fe fa3e 	bl	8000e70 <HAL_InitTick>
  
  return HAL_OK;
 80029f4:	2300      	movs	r3, #0
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	3778      	adds	r7, #120	; 0x78
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}
 80029fe:	bf00      	nop
 8002a00:	40021000 	.word	0x40021000
 8002a04:	08006318 	.word	0x08006318
 8002a08:	20000004 	.word	0x20000004
 8002a0c:	20000008 	.word	0x20000008

08002a10 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b08b      	sub	sp, #44	; 0x2c
 8002a14:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002a16:	2300      	movs	r3, #0
 8002a18:	61fb      	str	r3, [r7, #28]
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	61bb      	str	r3, [r7, #24]
 8002a1e:	2300      	movs	r3, #0
 8002a20:	627b      	str	r3, [r7, #36]	; 0x24
 8002a22:	2300      	movs	r3, #0
 8002a24:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002a26:	2300      	movs	r3, #0
 8002a28:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002a2a:	4b29      	ldr	r3, [pc, #164]	; (8002ad0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002a30:	69fb      	ldr	r3, [r7, #28]
 8002a32:	f003 030c 	and.w	r3, r3, #12
 8002a36:	2b04      	cmp	r3, #4
 8002a38:	d002      	beq.n	8002a40 <HAL_RCC_GetSysClockFreq+0x30>
 8002a3a:	2b08      	cmp	r3, #8
 8002a3c:	d003      	beq.n	8002a46 <HAL_RCC_GetSysClockFreq+0x36>
 8002a3e:	e03c      	b.n	8002aba <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002a40:	4b24      	ldr	r3, [pc, #144]	; (8002ad4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002a42:	623b      	str	r3, [r7, #32]
      break;
 8002a44:	e03c      	b.n	8002ac0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002a46:	69fb      	ldr	r3, [r7, #28]
 8002a48:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002a4c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002a50:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a52:	68ba      	ldr	r2, [r7, #8]
 8002a54:	fa92 f2a2 	rbit	r2, r2
 8002a58:	607a      	str	r2, [r7, #4]
  return result;
 8002a5a:	687a      	ldr	r2, [r7, #4]
 8002a5c:	fab2 f282 	clz	r2, r2
 8002a60:	b2d2      	uxtb	r2, r2
 8002a62:	40d3      	lsrs	r3, r2
 8002a64:	4a1c      	ldr	r2, [pc, #112]	; (8002ad8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002a66:	5cd3      	ldrb	r3, [r2, r3]
 8002a68:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002a6a:	4b19      	ldr	r3, [pc, #100]	; (8002ad0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002a6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a6e:	f003 030f 	and.w	r3, r3, #15
 8002a72:	220f      	movs	r2, #15
 8002a74:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a76:	693a      	ldr	r2, [r7, #16]
 8002a78:	fa92 f2a2 	rbit	r2, r2
 8002a7c:	60fa      	str	r2, [r7, #12]
  return result;
 8002a7e:	68fa      	ldr	r2, [r7, #12]
 8002a80:	fab2 f282 	clz	r2, r2
 8002a84:	b2d2      	uxtb	r2, r2
 8002a86:	40d3      	lsrs	r3, r2
 8002a88:	4a14      	ldr	r2, [pc, #80]	; (8002adc <HAL_RCC_GetSysClockFreq+0xcc>)
 8002a8a:	5cd3      	ldrb	r3, [r2, r3]
 8002a8c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002a8e:	69fb      	ldr	r3, [r7, #28]
 8002a90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d008      	beq.n	8002aaa <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002a98:	4a0e      	ldr	r2, [pc, #56]	; (8002ad4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002a9a:	69bb      	ldr	r3, [r7, #24]
 8002a9c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	fb02 f303 	mul.w	r3, r2, r3
 8002aa6:	627b      	str	r3, [r7, #36]	; 0x24
 8002aa8:	e004      	b.n	8002ab4 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	4a0c      	ldr	r2, [pc, #48]	; (8002ae0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002aae:	fb02 f303 	mul.w	r3, r2, r3
 8002ab2:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab6:	623b      	str	r3, [r7, #32]
      break;
 8002ab8:	e002      	b.n	8002ac0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002aba:	4b06      	ldr	r3, [pc, #24]	; (8002ad4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002abc:	623b      	str	r3, [r7, #32]
      break;
 8002abe:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ac0:	6a3b      	ldr	r3, [r7, #32]
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	372c      	adds	r7, #44	; 0x2c
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002acc:	4770      	bx	lr
 8002ace:	bf00      	nop
 8002ad0:	40021000 	.word	0x40021000
 8002ad4:	007a1200 	.word	0x007a1200
 8002ad8:	08006330 	.word	0x08006330
 8002adc:	08006340 	.word	0x08006340
 8002ae0:	003d0900 	.word	0x003d0900

08002ae4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ae8:	4b03      	ldr	r3, [pc, #12]	; (8002af8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002aea:	681b      	ldr	r3, [r3, #0]
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	46bd      	mov	sp, r7
 8002af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af4:	4770      	bx	lr
 8002af6:	bf00      	nop
 8002af8:	20000004 	.word	0x20000004

08002afc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b082      	sub	sp, #8
 8002b00:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002b02:	f7ff ffef 	bl	8002ae4 <HAL_RCC_GetHCLKFreq>
 8002b06:	4601      	mov	r1, r0
 8002b08:	4b0b      	ldr	r3, [pc, #44]	; (8002b38 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002b10:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002b14:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b16:	687a      	ldr	r2, [r7, #4]
 8002b18:	fa92 f2a2 	rbit	r2, r2
 8002b1c:	603a      	str	r2, [r7, #0]
  return result;
 8002b1e:	683a      	ldr	r2, [r7, #0]
 8002b20:	fab2 f282 	clz	r2, r2
 8002b24:	b2d2      	uxtb	r2, r2
 8002b26:	40d3      	lsrs	r3, r2
 8002b28:	4a04      	ldr	r2, [pc, #16]	; (8002b3c <HAL_RCC_GetPCLK1Freq+0x40>)
 8002b2a:	5cd3      	ldrb	r3, [r2, r3]
 8002b2c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002b30:	4618      	mov	r0, r3
 8002b32:	3708      	adds	r7, #8
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bd80      	pop	{r7, pc}
 8002b38:	40021000 	.word	0x40021000
 8002b3c:	08006328 	.word	0x08006328

08002b40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b082      	sub	sp, #8
 8002b44:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002b46:	f7ff ffcd 	bl	8002ae4 <HAL_RCC_GetHCLKFreq>
 8002b4a:	4601      	mov	r1, r0
 8002b4c:	4b0b      	ldr	r3, [pc, #44]	; (8002b7c <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002b54:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002b58:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b5a:	687a      	ldr	r2, [r7, #4]
 8002b5c:	fa92 f2a2 	rbit	r2, r2
 8002b60:	603a      	str	r2, [r7, #0]
  return result;
 8002b62:	683a      	ldr	r2, [r7, #0]
 8002b64:	fab2 f282 	clz	r2, r2
 8002b68:	b2d2      	uxtb	r2, r2
 8002b6a:	40d3      	lsrs	r3, r2
 8002b6c:	4a04      	ldr	r2, [pc, #16]	; (8002b80 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002b6e:	5cd3      	ldrb	r3, [r2, r3]
 8002b70:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002b74:	4618      	mov	r0, r3
 8002b76:	3708      	adds	r7, #8
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}
 8002b7c:	40021000 	.word	0x40021000
 8002b80:	08006328 	.word	0x08006328

08002b84 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b092      	sub	sp, #72	; 0x48
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002b90:	2300      	movs	r3, #0
 8002b92:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002b94:	2300      	movs	r3, #0
 8002b96:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	f000 80cd 	beq.w	8002d42 <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ba8:	4b86      	ldr	r3, [pc, #536]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002baa:	69db      	ldr	r3, [r3, #28]
 8002bac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d10e      	bne.n	8002bd2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bb4:	4b83      	ldr	r3, [pc, #524]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002bb6:	69db      	ldr	r3, [r3, #28]
 8002bb8:	4a82      	ldr	r2, [pc, #520]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002bba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bbe:	61d3      	str	r3, [r2, #28]
 8002bc0:	4b80      	ldr	r3, [pc, #512]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002bc2:	69db      	ldr	r3, [r3, #28]
 8002bc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bc8:	60bb      	str	r3, [r7, #8]
 8002bca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bd2:	4b7d      	ldr	r3, [pc, #500]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d118      	bne.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002bde:	4b7a      	ldr	r3, [pc, #488]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a79      	ldr	r2, [pc, #484]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002be4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002be8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bea:	f7fe f985 	bl	8000ef8 <HAL_GetTick>
 8002bee:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bf0:	e008      	b.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bf2:	f7fe f981 	bl	8000ef8 <HAL_GetTick>
 8002bf6:	4602      	mov	r2, r0
 8002bf8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002bfa:	1ad3      	subs	r3, r2, r3
 8002bfc:	2b64      	cmp	r3, #100	; 0x64
 8002bfe:	d901      	bls.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002c00:	2303      	movs	r3, #3
 8002c02:	e0db      	b.n	8002dbc <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c04:	4b70      	ldr	r3, [pc, #448]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d0f0      	beq.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002c10:	4b6c      	ldr	r3, [pc, #432]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002c12:	6a1b      	ldr	r3, [r3, #32]
 8002c14:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c18:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002c1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d07d      	beq.n	8002d1c <HAL_RCCEx_PeriphCLKConfig+0x198>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c28:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002c2a:	429a      	cmp	r2, r3
 8002c2c:	d076      	beq.n	8002d1c <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002c2e:	4b65      	ldr	r3, [pc, #404]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002c30:	6a1b      	ldr	r3, [r3, #32]
 8002c32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c36:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c38:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002c3c:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c40:	fa93 f3a3 	rbit	r3, r3
 8002c44:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002c46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002c48:	fab3 f383 	clz	r3, r3
 8002c4c:	b2db      	uxtb	r3, r3
 8002c4e:	461a      	mov	r2, r3
 8002c50:	4b5e      	ldr	r3, [pc, #376]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002c52:	4413      	add	r3, r2
 8002c54:	009b      	lsls	r3, r3, #2
 8002c56:	461a      	mov	r2, r3
 8002c58:	2301      	movs	r3, #1
 8002c5a:	6013      	str	r3, [r2, #0]
 8002c5c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002c60:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c64:	fa93 f3a3 	rbit	r3, r3
 8002c68:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002c6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002c6c:	fab3 f383 	clz	r3, r3
 8002c70:	b2db      	uxtb	r3, r3
 8002c72:	461a      	mov	r2, r3
 8002c74:	4b55      	ldr	r3, [pc, #340]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002c76:	4413      	add	r3, r2
 8002c78:	009b      	lsls	r3, r3, #2
 8002c7a:	461a      	mov	r2, r3
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002c80:	4a50      	ldr	r2, [pc, #320]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002c82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c84:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002c86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c88:	f003 0301 	and.w	r3, r3, #1
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d045      	beq.n	8002d1c <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c90:	f7fe f932 	bl	8000ef8 <HAL_GetTick>
 8002c94:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c96:	e00a      	b.n	8002cae <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c98:	f7fe f92e 	bl	8000ef8 <HAL_GetTick>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ca0:	1ad3      	subs	r3, r2, r3
 8002ca2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d901      	bls.n	8002cae <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8002caa:	2303      	movs	r3, #3
 8002cac:	e086      	b.n	8002dbc <HAL_RCCEx_PeriphCLKConfig+0x238>
 8002cae:	2302      	movs	r3, #2
 8002cb0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cb4:	fa93 f3a3 	rbit	r3, r3
 8002cb8:	627b      	str	r3, [r7, #36]	; 0x24
 8002cba:	2302      	movs	r3, #2
 8002cbc:	623b      	str	r3, [r7, #32]
 8002cbe:	6a3b      	ldr	r3, [r7, #32]
 8002cc0:	fa93 f3a3 	rbit	r3, r3
 8002cc4:	61fb      	str	r3, [r7, #28]
  return result;
 8002cc6:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cc8:	fab3 f383 	clz	r3, r3
 8002ccc:	b2db      	uxtb	r3, r3
 8002cce:	095b      	lsrs	r3, r3, #5
 8002cd0:	b2db      	uxtb	r3, r3
 8002cd2:	f043 0302 	orr.w	r3, r3, #2
 8002cd6:	b2db      	uxtb	r3, r3
 8002cd8:	2b02      	cmp	r3, #2
 8002cda:	d102      	bne.n	8002ce2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8002cdc:	4b39      	ldr	r3, [pc, #228]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002cde:	6a1b      	ldr	r3, [r3, #32]
 8002ce0:	e007      	b.n	8002cf2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8002ce2:	2302      	movs	r3, #2
 8002ce4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ce6:	69bb      	ldr	r3, [r7, #24]
 8002ce8:	fa93 f3a3 	rbit	r3, r3
 8002cec:	617b      	str	r3, [r7, #20]
 8002cee:	4b35      	ldr	r3, [pc, #212]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf2:	2202      	movs	r2, #2
 8002cf4:	613a      	str	r2, [r7, #16]
 8002cf6:	693a      	ldr	r2, [r7, #16]
 8002cf8:	fa92 f2a2 	rbit	r2, r2
 8002cfc:	60fa      	str	r2, [r7, #12]
  return result;
 8002cfe:	68fa      	ldr	r2, [r7, #12]
 8002d00:	fab2 f282 	clz	r2, r2
 8002d04:	b2d2      	uxtb	r2, r2
 8002d06:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d0a:	b2d2      	uxtb	r2, r2
 8002d0c:	f002 021f 	and.w	r2, r2, #31
 8002d10:	2101      	movs	r1, #1
 8002d12:	fa01 f202 	lsl.w	r2, r1, r2
 8002d16:	4013      	ands	r3, r2
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d0bd      	beq.n	8002c98 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002d1c:	4b29      	ldr	r3, [pc, #164]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002d1e:	6a1b      	ldr	r3, [r3, #32]
 8002d20:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	4926      	ldr	r1, [pc, #152]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002d2e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002d32:	2b01      	cmp	r3, #1
 8002d34:	d105      	bne.n	8002d42 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d36:	4b23      	ldr	r3, [pc, #140]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002d38:	69db      	ldr	r3, [r3, #28]
 8002d3a:	4a22      	ldr	r2, [pc, #136]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002d3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d40:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f003 0301 	and.w	r3, r3, #1
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d008      	beq.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002d4e:	4b1d      	ldr	r3, [pc, #116]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d52:	f023 0203 	bic.w	r2, r3, #3
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	689b      	ldr	r3, [r3, #8]
 8002d5a:	491a      	ldr	r1, [pc, #104]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f003 0320 	and.w	r3, r3, #32
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d008      	beq.n	8002d7e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002d6c:	4b15      	ldr	r3, [pc, #84]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002d6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d70:	f023 0210 	bic.w	r2, r3, #16
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	68db      	ldr	r3, [r3, #12]
 8002d78:	4912      	ldr	r1, [pc, #72]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d008      	beq.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002d8a:	4b0e      	ldr	r3, [pc, #56]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002d8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d8e:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	691b      	ldr	r3, [r3, #16]
 8002d96:	490b      	ldr	r1, [pc, #44]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d008      	beq.n	8002dba <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002da8:	4b06      	ldr	r3, [pc, #24]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dac:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	695b      	ldr	r3, [r3, #20]
 8002db4:	4903      	ldr	r1, [pc, #12]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002db6:	4313      	orrs	r3, r2
 8002db8:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002dba:	2300      	movs	r3, #0
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	3748      	adds	r7, #72	; 0x48
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}
 8002dc4:	40021000 	.word	0x40021000
 8002dc8:	40007000 	.word	0x40007000
 8002dcc:	10908100 	.word	0x10908100

08002dd0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b082      	sub	sp, #8
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d101      	bne.n	8002de2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	e049      	b.n	8002e76 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d106      	bne.n	8002dfc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2200      	movs	r2, #0
 8002df2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002df6:	6878      	ldr	r0, [r7, #4]
 8002df8:	f7fd fdf6 	bl	80009e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2202      	movs	r2, #2
 8002e00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681a      	ldr	r2, [r3, #0]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	3304      	adds	r3, #4
 8002e0c:	4619      	mov	r1, r3
 8002e0e:	4610      	mov	r0, r2
 8002e10:	f000 fb54 	bl	80034bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2201      	movs	r2, #1
 8002e18:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2201      	movs	r2, #1
 8002e20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2201      	movs	r2, #1
 8002e28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2201      	movs	r2, #1
 8002e30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2201      	movs	r2, #1
 8002e38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2201      	movs	r2, #1
 8002e40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2201      	movs	r2, #1
 8002e48:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2201      	movs	r2, #1
 8002e50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2201      	movs	r2, #1
 8002e58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2201      	movs	r2, #1
 8002e60:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2201      	movs	r2, #1
 8002e68:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2201      	movs	r2, #1
 8002e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e74:	2300      	movs	r3, #0
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	3708      	adds	r7, #8
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}

08002e7e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002e7e:	b580      	push	{r7, lr}
 8002e80:	b082      	sub	sp, #8
 8002e82:	af00      	add	r7, sp, #0
 8002e84:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d101      	bne.n	8002e90 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	e049      	b.n	8002f24 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e96:	b2db      	uxtb	r3, r3
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d106      	bne.n	8002eaa <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002ea4:	6878      	ldr	r0, [r7, #4]
 8002ea6:	f000 f841 	bl	8002f2c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2202      	movs	r2, #2
 8002eae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681a      	ldr	r2, [r3, #0]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	3304      	adds	r3, #4
 8002eba:	4619      	mov	r1, r3
 8002ebc:	4610      	mov	r0, r2
 8002ebe:	f000 fafd 	bl	80034bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2201      	movs	r2, #1
 8002ec6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2201      	movs	r2, #1
 8002ece:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2201      	movs	r2, #1
 8002ed6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2201      	movs	r2, #1
 8002ede:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2201      	movs	r2, #1
 8002ee6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2201      	movs	r2, #1
 8002eee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2201      	movs	r2, #1
 8002ef6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2201      	movs	r2, #1
 8002efe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2201      	movs	r2, #1
 8002f06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2201      	movs	r2, #1
 8002f16:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2201      	movs	r2, #1
 8002f1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f22:	2300      	movs	r3, #0
}
 8002f24:	4618      	mov	r0, r3
 8002f26:	3708      	adds	r7, #8
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bd80      	pop	{r7, pc}

08002f2c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b083      	sub	sp, #12
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002f34:	bf00      	nop
 8002f36:	370c      	adds	r7, #12
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3e:	4770      	bx	lr

08002f40 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b084      	sub	sp, #16
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
 8002f48:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d109      	bne.n	8002f64 <HAL_TIM_PWM_Start+0x24>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002f56:	b2db      	uxtb	r3, r3
 8002f58:	2b01      	cmp	r3, #1
 8002f5a:	bf14      	ite	ne
 8002f5c:	2301      	movne	r3, #1
 8002f5e:	2300      	moveq	r3, #0
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	e03c      	b.n	8002fde <HAL_TIM_PWM_Start+0x9e>
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	2b04      	cmp	r3, #4
 8002f68:	d109      	bne.n	8002f7e <HAL_TIM_PWM_Start+0x3e>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	2b01      	cmp	r3, #1
 8002f74:	bf14      	ite	ne
 8002f76:	2301      	movne	r3, #1
 8002f78:	2300      	moveq	r3, #0
 8002f7a:	b2db      	uxtb	r3, r3
 8002f7c:	e02f      	b.n	8002fde <HAL_TIM_PWM_Start+0x9e>
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	2b08      	cmp	r3, #8
 8002f82:	d109      	bne.n	8002f98 <HAL_TIM_PWM_Start+0x58>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f8a:	b2db      	uxtb	r3, r3
 8002f8c:	2b01      	cmp	r3, #1
 8002f8e:	bf14      	ite	ne
 8002f90:	2301      	movne	r3, #1
 8002f92:	2300      	moveq	r3, #0
 8002f94:	b2db      	uxtb	r3, r3
 8002f96:	e022      	b.n	8002fde <HAL_TIM_PWM_Start+0x9e>
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	2b0c      	cmp	r3, #12
 8002f9c:	d109      	bne.n	8002fb2 <HAL_TIM_PWM_Start+0x72>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002fa4:	b2db      	uxtb	r3, r3
 8002fa6:	2b01      	cmp	r3, #1
 8002fa8:	bf14      	ite	ne
 8002faa:	2301      	movne	r3, #1
 8002fac:	2300      	moveq	r3, #0
 8002fae:	b2db      	uxtb	r3, r3
 8002fb0:	e015      	b.n	8002fde <HAL_TIM_PWM_Start+0x9e>
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	2b10      	cmp	r3, #16
 8002fb6:	d109      	bne.n	8002fcc <HAL_TIM_PWM_Start+0x8c>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002fbe:	b2db      	uxtb	r3, r3
 8002fc0:	2b01      	cmp	r3, #1
 8002fc2:	bf14      	ite	ne
 8002fc4:	2301      	movne	r3, #1
 8002fc6:	2300      	moveq	r3, #0
 8002fc8:	b2db      	uxtb	r3, r3
 8002fca:	e008      	b.n	8002fde <HAL_TIM_PWM_Start+0x9e>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002fd2:	b2db      	uxtb	r3, r3
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	bf14      	ite	ne
 8002fd8:	2301      	movne	r3, #1
 8002fda:	2300      	moveq	r3, #0
 8002fdc:	b2db      	uxtb	r3, r3
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d001      	beq.n	8002fe6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e088      	b.n	80030f8 <HAL_TIM_PWM_Start+0x1b8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d104      	bne.n	8002ff6 <HAL_TIM_PWM_Start+0xb6>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2202      	movs	r2, #2
 8002ff0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ff4:	e023      	b.n	800303e <HAL_TIM_PWM_Start+0xfe>
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	2b04      	cmp	r3, #4
 8002ffa:	d104      	bne.n	8003006 <HAL_TIM_PWM_Start+0xc6>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2202      	movs	r2, #2
 8003000:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003004:	e01b      	b.n	800303e <HAL_TIM_PWM_Start+0xfe>
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	2b08      	cmp	r3, #8
 800300a:	d104      	bne.n	8003016 <HAL_TIM_PWM_Start+0xd6>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2202      	movs	r2, #2
 8003010:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003014:	e013      	b.n	800303e <HAL_TIM_PWM_Start+0xfe>
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	2b0c      	cmp	r3, #12
 800301a:	d104      	bne.n	8003026 <HAL_TIM_PWM_Start+0xe6>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2202      	movs	r2, #2
 8003020:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003024:	e00b      	b.n	800303e <HAL_TIM_PWM_Start+0xfe>
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	2b10      	cmp	r3, #16
 800302a:	d104      	bne.n	8003036 <HAL_TIM_PWM_Start+0xf6>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2202      	movs	r2, #2
 8003030:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003034:	e003      	b.n	800303e <HAL_TIM_PWM_Start+0xfe>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2202      	movs	r2, #2
 800303a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	2201      	movs	r2, #1
 8003044:	6839      	ldr	r1, [r7, #0]
 8003046:	4618      	mov	r0, r3
 8003048:	f000 fdf0 	bl	8003c2c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a2b      	ldr	r2, [pc, #172]	; (8003100 <HAL_TIM_PWM_Start+0x1c0>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d00e      	beq.n	8003074 <HAL_TIM_PWM_Start+0x134>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a2a      	ldr	r2, [pc, #168]	; (8003104 <HAL_TIM_PWM_Start+0x1c4>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d009      	beq.n	8003074 <HAL_TIM_PWM_Start+0x134>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a28      	ldr	r2, [pc, #160]	; (8003108 <HAL_TIM_PWM_Start+0x1c8>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d004      	beq.n	8003074 <HAL_TIM_PWM_Start+0x134>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a27      	ldr	r2, [pc, #156]	; (800310c <HAL_TIM_PWM_Start+0x1cc>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d101      	bne.n	8003078 <HAL_TIM_PWM_Start+0x138>
 8003074:	2301      	movs	r3, #1
 8003076:	e000      	b.n	800307a <HAL_TIM_PWM_Start+0x13a>
 8003078:	2300      	movs	r3, #0
 800307a:	2b00      	cmp	r3, #0
 800307c:	d007      	beq.n	800308e <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800308c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4a1b      	ldr	r2, [pc, #108]	; (8003100 <HAL_TIM_PWM_Start+0x1c0>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d00e      	beq.n	80030b6 <HAL_TIM_PWM_Start+0x176>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030a0:	d009      	beq.n	80030b6 <HAL_TIM_PWM_Start+0x176>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4a1a      	ldr	r2, [pc, #104]	; (8003110 <HAL_TIM_PWM_Start+0x1d0>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d004      	beq.n	80030b6 <HAL_TIM_PWM_Start+0x176>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a14      	ldr	r2, [pc, #80]	; (8003104 <HAL_TIM_PWM_Start+0x1c4>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d115      	bne.n	80030e2 <HAL_TIM_PWM_Start+0x1a2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	689a      	ldr	r2, [r3, #8]
 80030bc:	4b15      	ldr	r3, [pc, #84]	; (8003114 <HAL_TIM_PWM_Start+0x1d4>)
 80030be:	4013      	ands	r3, r2
 80030c0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	2b06      	cmp	r3, #6
 80030c6:	d015      	beq.n	80030f4 <HAL_TIM_PWM_Start+0x1b4>
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030ce:	d011      	beq.n	80030f4 <HAL_TIM_PWM_Start+0x1b4>
    {
      __HAL_TIM_ENABLE(htim);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	681a      	ldr	r2, [r3, #0]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f042 0201 	orr.w	r2, r2, #1
 80030de:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030e0:	e008      	b.n	80030f4 <HAL_TIM_PWM_Start+0x1b4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	681a      	ldr	r2, [r3, #0]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f042 0201 	orr.w	r2, r2, #1
 80030f0:	601a      	str	r2, [r3, #0]
 80030f2:	e000      	b.n	80030f6 <HAL_TIM_PWM_Start+0x1b6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030f4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80030f6:	2300      	movs	r3, #0
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	3710      	adds	r7, #16
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bd80      	pop	{r7, pc}
 8003100:	40012c00 	.word	0x40012c00
 8003104:	40014000 	.word	0x40014000
 8003108:	40014400 	.word	0x40014400
 800310c:	40014800 	.word	0x40014800
 8003110:	40000400 	.word	0x40000400
 8003114:	00010007 	.word	0x00010007

08003118 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b086      	sub	sp, #24
 800311c:	af00      	add	r7, sp, #0
 800311e:	60f8      	str	r0, [r7, #12]
 8003120:	60b9      	str	r1, [r7, #8]
 8003122:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003124:	2300      	movs	r3, #0
 8003126:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800312e:	2b01      	cmp	r3, #1
 8003130:	d101      	bne.n	8003136 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003132:	2302      	movs	r3, #2
 8003134:	e0ff      	b.n	8003336 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	2201      	movs	r2, #1
 800313a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2b14      	cmp	r3, #20
 8003142:	f200 80f0 	bhi.w	8003326 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003146:	a201      	add	r2, pc, #4	; (adr r2, 800314c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003148:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800314c:	080031a1 	.word	0x080031a1
 8003150:	08003327 	.word	0x08003327
 8003154:	08003327 	.word	0x08003327
 8003158:	08003327 	.word	0x08003327
 800315c:	080031e1 	.word	0x080031e1
 8003160:	08003327 	.word	0x08003327
 8003164:	08003327 	.word	0x08003327
 8003168:	08003327 	.word	0x08003327
 800316c:	08003223 	.word	0x08003223
 8003170:	08003327 	.word	0x08003327
 8003174:	08003327 	.word	0x08003327
 8003178:	08003327 	.word	0x08003327
 800317c:	08003263 	.word	0x08003263
 8003180:	08003327 	.word	0x08003327
 8003184:	08003327 	.word	0x08003327
 8003188:	08003327 	.word	0x08003327
 800318c:	080032a5 	.word	0x080032a5
 8003190:	08003327 	.word	0x08003327
 8003194:	08003327 	.word	0x08003327
 8003198:	08003327 	.word	0x08003327
 800319c:	080032e5 	.word	0x080032e5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	68b9      	ldr	r1, [r7, #8]
 80031a6:	4618      	mov	r0, r3
 80031a8:	f000 fa00 	bl	80035ac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	699a      	ldr	r2, [r3, #24]
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f042 0208 	orr.w	r2, r2, #8
 80031ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	699a      	ldr	r2, [r3, #24]
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f022 0204 	bic.w	r2, r2, #4
 80031ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	6999      	ldr	r1, [r3, #24]
 80031d2:	68bb      	ldr	r3, [r7, #8]
 80031d4:	691a      	ldr	r2, [r3, #16]
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	430a      	orrs	r2, r1
 80031dc:	619a      	str	r2, [r3, #24]
      break;
 80031de:	e0a5      	b.n	800332c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	68b9      	ldr	r1, [r7, #8]
 80031e6:	4618      	mov	r0, r3
 80031e8:	f000 fa66 	bl	80036b8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	699a      	ldr	r2, [r3, #24]
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80031fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	699a      	ldr	r2, [r3, #24]
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800320a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	6999      	ldr	r1, [r3, #24]
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	691b      	ldr	r3, [r3, #16]
 8003216:	021a      	lsls	r2, r3, #8
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	430a      	orrs	r2, r1
 800321e:	619a      	str	r2, [r3, #24]
      break;
 8003220:	e084      	b.n	800332c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	68b9      	ldr	r1, [r7, #8]
 8003228:	4618      	mov	r0, r3
 800322a:	f000 fac5 	bl	80037b8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	69da      	ldr	r2, [r3, #28]
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f042 0208 	orr.w	r2, r2, #8
 800323c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	69da      	ldr	r2, [r3, #28]
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f022 0204 	bic.w	r2, r2, #4
 800324c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	69d9      	ldr	r1, [r3, #28]
 8003254:	68bb      	ldr	r3, [r7, #8]
 8003256:	691a      	ldr	r2, [r3, #16]
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	430a      	orrs	r2, r1
 800325e:	61da      	str	r2, [r3, #28]
      break;
 8003260:	e064      	b.n	800332c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	68b9      	ldr	r1, [r7, #8]
 8003268:	4618      	mov	r0, r3
 800326a:	f000 fb23 	bl	80038b4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	69da      	ldr	r2, [r3, #28]
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800327c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	69da      	ldr	r2, [r3, #28]
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800328c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	69d9      	ldr	r1, [r3, #28]
 8003294:	68bb      	ldr	r3, [r7, #8]
 8003296:	691b      	ldr	r3, [r3, #16]
 8003298:	021a      	lsls	r2, r3, #8
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	430a      	orrs	r2, r1
 80032a0:	61da      	str	r2, [r3, #28]
      break;
 80032a2:	e043      	b.n	800332c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	68b9      	ldr	r1, [r7, #8]
 80032aa:	4618      	mov	r0, r3
 80032ac:	f000 fb66 	bl	800397c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f042 0208 	orr.w	r2, r2, #8
 80032be:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f022 0204 	bic.w	r2, r2, #4
 80032ce:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80032d6:	68bb      	ldr	r3, [r7, #8]
 80032d8:	691a      	ldr	r2, [r3, #16]
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	430a      	orrs	r2, r1
 80032e0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80032e2:	e023      	b.n	800332c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	68b9      	ldr	r1, [r7, #8]
 80032ea:	4618      	mov	r0, r3
 80032ec:	f000 fba4 	bl	8003a38 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80032fe:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800330e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003316:	68bb      	ldr	r3, [r7, #8]
 8003318:	691b      	ldr	r3, [r3, #16]
 800331a:	021a      	lsls	r2, r3, #8
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	430a      	orrs	r2, r1
 8003322:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003324:	e002      	b.n	800332c <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	75fb      	strb	r3, [r7, #23]
      break;
 800332a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	2200      	movs	r2, #0
 8003330:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003334:	7dfb      	ldrb	r3, [r7, #23]
}
 8003336:	4618      	mov	r0, r3
 8003338:	3718      	adds	r7, #24
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}
 800333e:	bf00      	nop

08003340 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b084      	sub	sp, #16
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
 8003348:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800334a:	2300      	movs	r3, #0
 800334c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003354:	2b01      	cmp	r3, #1
 8003356:	d101      	bne.n	800335c <HAL_TIM_ConfigClockSource+0x1c>
 8003358:	2302      	movs	r3, #2
 800335a:	e0ab      	b.n	80034b4 <HAL_TIM_ConfigClockSource+0x174>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2201      	movs	r2, #1
 8003360:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2202      	movs	r2, #2
 8003368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800337a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800337e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003386:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	68ba      	ldr	r2, [r7, #8]
 800338e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	2b40      	cmp	r3, #64	; 0x40
 8003396:	d067      	beq.n	8003468 <HAL_TIM_ConfigClockSource+0x128>
 8003398:	2b40      	cmp	r3, #64	; 0x40
 800339a:	d80b      	bhi.n	80033b4 <HAL_TIM_ConfigClockSource+0x74>
 800339c:	2b10      	cmp	r3, #16
 800339e:	d073      	beq.n	8003488 <HAL_TIM_ConfigClockSource+0x148>
 80033a0:	2b10      	cmp	r3, #16
 80033a2:	d802      	bhi.n	80033aa <HAL_TIM_ConfigClockSource+0x6a>
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d06f      	beq.n	8003488 <HAL_TIM_ConfigClockSource+0x148>
 80033a8:	e077      	b.n	800349a <HAL_TIM_ConfigClockSource+0x15a>
 80033aa:	2b20      	cmp	r3, #32
 80033ac:	d06c      	beq.n	8003488 <HAL_TIM_ConfigClockSource+0x148>
 80033ae:	2b30      	cmp	r3, #48	; 0x30
 80033b0:	d06a      	beq.n	8003488 <HAL_TIM_ConfigClockSource+0x148>
 80033b2:	e072      	b.n	800349a <HAL_TIM_ConfigClockSource+0x15a>
 80033b4:	2b70      	cmp	r3, #112	; 0x70
 80033b6:	d00d      	beq.n	80033d4 <HAL_TIM_ConfigClockSource+0x94>
 80033b8:	2b70      	cmp	r3, #112	; 0x70
 80033ba:	d804      	bhi.n	80033c6 <HAL_TIM_ConfigClockSource+0x86>
 80033bc:	2b50      	cmp	r3, #80	; 0x50
 80033be:	d033      	beq.n	8003428 <HAL_TIM_ConfigClockSource+0xe8>
 80033c0:	2b60      	cmp	r3, #96	; 0x60
 80033c2:	d041      	beq.n	8003448 <HAL_TIM_ConfigClockSource+0x108>
 80033c4:	e069      	b.n	800349a <HAL_TIM_ConfigClockSource+0x15a>
 80033c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033ca:	d069      	beq.n	80034a0 <HAL_TIM_ConfigClockSource+0x160>
 80033cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033d0:	d017      	beq.n	8003402 <HAL_TIM_ConfigClockSource+0xc2>
 80033d2:	e062      	b.n	800349a <HAL_TIM_ConfigClockSource+0x15a>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6818      	ldr	r0, [r3, #0]
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	6899      	ldr	r1, [r3, #8]
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	685a      	ldr	r2, [r3, #4]
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	68db      	ldr	r3, [r3, #12]
 80033e4:	f000 fc02 	bl	8003bec <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80033f0:	68bb      	ldr	r3, [r7, #8]
 80033f2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80033f6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	68ba      	ldr	r2, [r7, #8]
 80033fe:	609a      	str	r2, [r3, #8]
      break;
 8003400:	e04f      	b.n	80034a2 <HAL_TIM_ConfigClockSource+0x162>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6818      	ldr	r0, [r3, #0]
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	6899      	ldr	r1, [r3, #8]
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	685a      	ldr	r2, [r3, #4]
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	68db      	ldr	r3, [r3, #12]
 8003412:	f000 fbeb 	bl	8003bec <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	689a      	ldr	r2, [r3, #8]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003424:	609a      	str	r2, [r3, #8]
      break;
 8003426:	e03c      	b.n	80034a2 <HAL_TIM_ConfigClockSource+0x162>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6818      	ldr	r0, [r3, #0]
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	6859      	ldr	r1, [r3, #4]
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	68db      	ldr	r3, [r3, #12]
 8003434:	461a      	mov	r2, r3
 8003436:	f000 fb5f 	bl	8003af8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	2150      	movs	r1, #80	; 0x50
 8003440:	4618      	mov	r0, r3
 8003442:	f000 fbb8 	bl	8003bb6 <TIM_ITRx_SetConfig>
      break;
 8003446:	e02c      	b.n	80034a2 <HAL_TIM_ConfigClockSource+0x162>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6818      	ldr	r0, [r3, #0]
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	6859      	ldr	r1, [r3, #4]
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	68db      	ldr	r3, [r3, #12]
 8003454:	461a      	mov	r2, r3
 8003456:	f000 fb7e 	bl	8003b56 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	2160      	movs	r1, #96	; 0x60
 8003460:	4618      	mov	r0, r3
 8003462:	f000 fba8 	bl	8003bb6 <TIM_ITRx_SetConfig>
      break;
 8003466:	e01c      	b.n	80034a2 <HAL_TIM_ConfigClockSource+0x162>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6818      	ldr	r0, [r3, #0]
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	6859      	ldr	r1, [r3, #4]
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	68db      	ldr	r3, [r3, #12]
 8003474:	461a      	mov	r2, r3
 8003476:	f000 fb3f 	bl	8003af8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	2140      	movs	r1, #64	; 0x40
 8003480:	4618      	mov	r0, r3
 8003482:	f000 fb98 	bl	8003bb6 <TIM_ITRx_SetConfig>
      break;
 8003486:	e00c      	b.n	80034a2 <HAL_TIM_ConfigClockSource+0x162>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681a      	ldr	r2, [r3, #0]
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4619      	mov	r1, r3
 8003492:	4610      	mov	r0, r2
 8003494:	f000 fb8f 	bl	8003bb6 <TIM_ITRx_SetConfig>
      break;
 8003498:	e003      	b.n	80034a2 <HAL_TIM_ConfigClockSource+0x162>
    }

    default:
      status = HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	73fb      	strb	r3, [r7, #15]
      break;
 800349e:	e000      	b.n	80034a2 <HAL_TIM_ConfigClockSource+0x162>
      break;
 80034a0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2201      	movs	r2, #1
 80034a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2200      	movs	r2, #0
 80034ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80034b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80034b4:	4618      	mov	r0, r3
 80034b6:	3710      	adds	r7, #16
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bd80      	pop	{r7, pc}

080034bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80034bc:	b480      	push	{r7}
 80034be:	b085      	sub	sp, #20
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
 80034c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	4a32      	ldr	r2, [pc, #200]	; (8003598 <TIM_Base_SetConfig+0xdc>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d007      	beq.n	80034e4 <TIM_Base_SetConfig+0x28>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034da:	d003      	beq.n	80034e4 <TIM_Base_SetConfig+0x28>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	4a2f      	ldr	r2, [pc, #188]	; (800359c <TIM_Base_SetConfig+0xe0>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d108      	bne.n	80034f6 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	68fa      	ldr	r2, [r7, #12]
 80034f2:	4313      	orrs	r3, r2
 80034f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	4a27      	ldr	r2, [pc, #156]	; (8003598 <TIM_Base_SetConfig+0xdc>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d013      	beq.n	8003526 <TIM_Base_SetConfig+0x6a>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003504:	d00f      	beq.n	8003526 <TIM_Base_SetConfig+0x6a>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	4a24      	ldr	r2, [pc, #144]	; (800359c <TIM_Base_SetConfig+0xe0>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d00b      	beq.n	8003526 <TIM_Base_SetConfig+0x6a>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	4a23      	ldr	r2, [pc, #140]	; (80035a0 <TIM_Base_SetConfig+0xe4>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d007      	beq.n	8003526 <TIM_Base_SetConfig+0x6a>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	4a22      	ldr	r2, [pc, #136]	; (80035a4 <TIM_Base_SetConfig+0xe8>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d003      	beq.n	8003526 <TIM_Base_SetConfig+0x6a>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	4a21      	ldr	r2, [pc, #132]	; (80035a8 <TIM_Base_SetConfig+0xec>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d108      	bne.n	8003538 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800352c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	68db      	ldr	r3, [r3, #12]
 8003532:	68fa      	ldr	r2, [r7, #12]
 8003534:	4313      	orrs	r3, r2
 8003536:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	695b      	ldr	r3, [r3, #20]
 8003542:	4313      	orrs	r3, r2
 8003544:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	68fa      	ldr	r2, [r7, #12]
 800354a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	689a      	ldr	r2, [r3, #8]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	681a      	ldr	r2, [r3, #0]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	4a0e      	ldr	r2, [pc, #56]	; (8003598 <TIM_Base_SetConfig+0xdc>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d00b      	beq.n	800357c <TIM_Base_SetConfig+0xc0>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	4a0e      	ldr	r2, [pc, #56]	; (80035a0 <TIM_Base_SetConfig+0xe4>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d007      	beq.n	800357c <TIM_Base_SetConfig+0xc0>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	4a0d      	ldr	r2, [pc, #52]	; (80035a4 <TIM_Base_SetConfig+0xe8>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d003      	beq.n	800357c <TIM_Base_SetConfig+0xc0>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	4a0c      	ldr	r2, [pc, #48]	; (80035a8 <TIM_Base_SetConfig+0xec>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d103      	bne.n	8003584 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	691a      	ldr	r2, [r3, #16]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2201      	movs	r2, #1
 8003588:	615a      	str	r2, [r3, #20]
}
 800358a:	bf00      	nop
 800358c:	3714      	adds	r7, #20
 800358e:	46bd      	mov	sp, r7
 8003590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003594:	4770      	bx	lr
 8003596:	bf00      	nop
 8003598:	40012c00 	.word	0x40012c00
 800359c:	40000400 	.word	0x40000400
 80035a0:	40014000 	.word	0x40014000
 80035a4:	40014400 	.word	0x40014400
 80035a8:	40014800 	.word	0x40014800

080035ac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80035ac:	b480      	push	{r7}
 80035ae:	b087      	sub	sp, #28
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
 80035b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6a1b      	ldr	r3, [r3, #32]
 80035ba:	f023 0201 	bic.w	r2, r3, #1
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6a1b      	ldr	r3, [r3, #32]
 80035c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	699b      	ldr	r3, [r3, #24]
 80035d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	f023 0303 	bic.w	r3, r3, #3
 80035e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	68fa      	ldr	r2, [r7, #12]
 80035ee:	4313      	orrs	r3, r2
 80035f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	f023 0302 	bic.w	r3, r3, #2
 80035f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	689b      	ldr	r3, [r3, #8]
 80035fe:	697a      	ldr	r2, [r7, #20]
 8003600:	4313      	orrs	r3, r2
 8003602:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	4a28      	ldr	r2, [pc, #160]	; (80036a8 <TIM_OC1_SetConfig+0xfc>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d00b      	beq.n	8003624 <TIM_OC1_SetConfig+0x78>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	4a27      	ldr	r2, [pc, #156]	; (80036ac <TIM_OC1_SetConfig+0x100>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d007      	beq.n	8003624 <TIM_OC1_SetConfig+0x78>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	4a26      	ldr	r2, [pc, #152]	; (80036b0 <TIM_OC1_SetConfig+0x104>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d003      	beq.n	8003624 <TIM_OC1_SetConfig+0x78>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	4a25      	ldr	r2, [pc, #148]	; (80036b4 <TIM_OC1_SetConfig+0x108>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d10c      	bne.n	800363e <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	f023 0308 	bic.w	r3, r3, #8
 800362a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	68db      	ldr	r3, [r3, #12]
 8003630:	697a      	ldr	r2, [r7, #20]
 8003632:	4313      	orrs	r3, r2
 8003634:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	f023 0304 	bic.w	r3, r3, #4
 800363c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	4a19      	ldr	r2, [pc, #100]	; (80036a8 <TIM_OC1_SetConfig+0xfc>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d00b      	beq.n	800365e <TIM_OC1_SetConfig+0xb2>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	4a18      	ldr	r2, [pc, #96]	; (80036ac <TIM_OC1_SetConfig+0x100>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d007      	beq.n	800365e <TIM_OC1_SetConfig+0xb2>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	4a17      	ldr	r2, [pc, #92]	; (80036b0 <TIM_OC1_SetConfig+0x104>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d003      	beq.n	800365e <TIM_OC1_SetConfig+0xb2>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	4a16      	ldr	r2, [pc, #88]	; (80036b4 <TIM_OC1_SetConfig+0x108>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d111      	bne.n	8003682 <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800365e:	693b      	ldr	r3, [r7, #16]
 8003660:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003664:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800366c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	695b      	ldr	r3, [r3, #20]
 8003672:	693a      	ldr	r2, [r7, #16]
 8003674:	4313      	orrs	r3, r2
 8003676:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	699b      	ldr	r3, [r3, #24]
 800367c:	693a      	ldr	r2, [r7, #16]
 800367e:	4313      	orrs	r3, r2
 8003680:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	693a      	ldr	r2, [r7, #16]
 8003686:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	68fa      	ldr	r2, [r7, #12]
 800368c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	685a      	ldr	r2, [r3, #4]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	697a      	ldr	r2, [r7, #20]
 800369a:	621a      	str	r2, [r3, #32]
}
 800369c:	bf00      	nop
 800369e:	371c      	adds	r7, #28
 80036a0:	46bd      	mov	sp, r7
 80036a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a6:	4770      	bx	lr
 80036a8:	40012c00 	.word	0x40012c00
 80036ac:	40014000 	.word	0x40014000
 80036b0:	40014400 	.word	0x40014400
 80036b4:	40014800 	.word	0x40014800

080036b8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80036b8:	b480      	push	{r7}
 80036ba:	b087      	sub	sp, #28
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
 80036c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6a1b      	ldr	r3, [r3, #32]
 80036c6:	f023 0210 	bic.w	r2, r3, #16
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6a1b      	ldr	r3, [r3, #32]
 80036d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	699b      	ldr	r3, [r3, #24]
 80036de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80036e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	021b      	lsls	r3, r3, #8
 80036fa:	68fa      	ldr	r2, [r7, #12]
 80036fc:	4313      	orrs	r3, r2
 80036fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003700:	697b      	ldr	r3, [r7, #20]
 8003702:	f023 0320 	bic.w	r3, r3, #32
 8003706:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	689b      	ldr	r3, [r3, #8]
 800370c:	011b      	lsls	r3, r3, #4
 800370e:	697a      	ldr	r2, [r7, #20]
 8003710:	4313      	orrs	r3, r2
 8003712:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	4a24      	ldr	r2, [pc, #144]	; (80037a8 <TIM_OC2_SetConfig+0xf0>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d10d      	bne.n	8003738 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800371c:	697b      	ldr	r3, [r7, #20]
 800371e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003722:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	68db      	ldr	r3, [r3, #12]
 8003728:	011b      	lsls	r3, r3, #4
 800372a:	697a      	ldr	r2, [r7, #20]
 800372c:	4313      	orrs	r3, r2
 800372e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003730:	697b      	ldr	r3, [r7, #20]
 8003732:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003736:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	4a1b      	ldr	r2, [pc, #108]	; (80037a8 <TIM_OC2_SetConfig+0xf0>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d00b      	beq.n	8003758 <TIM_OC2_SetConfig+0xa0>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	4a1a      	ldr	r2, [pc, #104]	; (80037ac <TIM_OC2_SetConfig+0xf4>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d007      	beq.n	8003758 <TIM_OC2_SetConfig+0xa0>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	4a19      	ldr	r2, [pc, #100]	; (80037b0 <TIM_OC2_SetConfig+0xf8>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d003      	beq.n	8003758 <TIM_OC2_SetConfig+0xa0>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	4a18      	ldr	r2, [pc, #96]	; (80037b4 <TIM_OC2_SetConfig+0xfc>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d113      	bne.n	8003780 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003758:	693b      	ldr	r3, [r7, #16]
 800375a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800375e:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003760:	693b      	ldr	r3, [r7, #16]
 8003762:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003766:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	695b      	ldr	r3, [r3, #20]
 800376c:	009b      	lsls	r3, r3, #2
 800376e:	693a      	ldr	r2, [r7, #16]
 8003770:	4313      	orrs	r3, r2
 8003772:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	699b      	ldr	r3, [r3, #24]
 8003778:	009b      	lsls	r3, r3, #2
 800377a:	693a      	ldr	r2, [r7, #16]
 800377c:	4313      	orrs	r3, r2
 800377e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	693a      	ldr	r2, [r7, #16]
 8003784:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	68fa      	ldr	r2, [r7, #12]
 800378a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	685a      	ldr	r2, [r3, #4]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	697a      	ldr	r2, [r7, #20]
 8003798:	621a      	str	r2, [r3, #32]
}
 800379a:	bf00      	nop
 800379c:	371c      	adds	r7, #28
 800379e:	46bd      	mov	sp, r7
 80037a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a4:	4770      	bx	lr
 80037a6:	bf00      	nop
 80037a8:	40012c00 	.word	0x40012c00
 80037ac:	40014000 	.word	0x40014000
 80037b0:	40014400 	.word	0x40014400
 80037b4:	40014800 	.word	0x40014800

080037b8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b087      	sub	sp, #28
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
 80037c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6a1b      	ldr	r3, [r3, #32]
 80037c6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6a1b      	ldr	r3, [r3, #32]
 80037d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	69db      	ldr	r3, [r3, #28]
 80037de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	f023 0303 	bic.w	r3, r3, #3
 80037f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	68fa      	ldr	r2, [r7, #12]
 80037fa:	4313      	orrs	r3, r2
 80037fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003804:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	689b      	ldr	r3, [r3, #8]
 800380a:	021b      	lsls	r3, r3, #8
 800380c:	697a      	ldr	r2, [r7, #20]
 800380e:	4313      	orrs	r3, r2
 8003810:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	4a23      	ldr	r2, [pc, #140]	; (80038a4 <TIM_OC3_SetConfig+0xec>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d10d      	bne.n	8003836 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800381a:	697b      	ldr	r3, [r7, #20]
 800381c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003820:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	68db      	ldr	r3, [r3, #12]
 8003826:	021b      	lsls	r3, r3, #8
 8003828:	697a      	ldr	r2, [r7, #20]
 800382a:	4313      	orrs	r3, r2
 800382c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003834:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	4a1a      	ldr	r2, [pc, #104]	; (80038a4 <TIM_OC3_SetConfig+0xec>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d00b      	beq.n	8003856 <TIM_OC3_SetConfig+0x9e>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	4a19      	ldr	r2, [pc, #100]	; (80038a8 <TIM_OC3_SetConfig+0xf0>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d007      	beq.n	8003856 <TIM_OC3_SetConfig+0x9e>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	4a18      	ldr	r2, [pc, #96]	; (80038ac <TIM_OC3_SetConfig+0xf4>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d003      	beq.n	8003856 <TIM_OC3_SetConfig+0x9e>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	4a17      	ldr	r2, [pc, #92]	; (80038b0 <TIM_OC3_SetConfig+0xf8>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d113      	bne.n	800387e <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800385c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003864:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	695b      	ldr	r3, [r3, #20]
 800386a:	011b      	lsls	r3, r3, #4
 800386c:	693a      	ldr	r2, [r7, #16]
 800386e:	4313      	orrs	r3, r2
 8003870:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	699b      	ldr	r3, [r3, #24]
 8003876:	011b      	lsls	r3, r3, #4
 8003878:	693a      	ldr	r2, [r7, #16]
 800387a:	4313      	orrs	r3, r2
 800387c:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	693a      	ldr	r2, [r7, #16]
 8003882:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	68fa      	ldr	r2, [r7, #12]
 8003888:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	685a      	ldr	r2, [r3, #4]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	697a      	ldr	r2, [r7, #20]
 8003896:	621a      	str	r2, [r3, #32]
}
 8003898:	bf00      	nop
 800389a:	371c      	adds	r7, #28
 800389c:	46bd      	mov	sp, r7
 800389e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a2:	4770      	bx	lr
 80038a4:	40012c00 	.word	0x40012c00
 80038a8:	40014000 	.word	0x40014000
 80038ac:	40014400 	.word	0x40014400
 80038b0:	40014800 	.word	0x40014800

080038b4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80038b4:	b480      	push	{r7}
 80038b6:	b087      	sub	sp, #28
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
 80038bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6a1b      	ldr	r3, [r3, #32]
 80038c2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6a1b      	ldr	r3, [r3, #32]
 80038ce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	69db      	ldr	r3, [r3, #28]
 80038da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80038e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80038e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	021b      	lsls	r3, r3, #8
 80038f6:	68fa      	ldr	r2, [r7, #12]
 80038f8:	4313      	orrs	r3, r2
 80038fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80038fc:	693b      	ldr	r3, [r7, #16]
 80038fe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003902:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	689b      	ldr	r3, [r3, #8]
 8003908:	031b      	lsls	r3, r3, #12
 800390a:	693a      	ldr	r2, [r7, #16]
 800390c:	4313      	orrs	r3, r2
 800390e:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	4a16      	ldr	r2, [pc, #88]	; (800396c <TIM_OC4_SetConfig+0xb8>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d00b      	beq.n	8003930 <TIM_OC4_SetConfig+0x7c>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	4a15      	ldr	r2, [pc, #84]	; (8003970 <TIM_OC4_SetConfig+0xbc>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d007      	beq.n	8003930 <TIM_OC4_SetConfig+0x7c>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	4a14      	ldr	r2, [pc, #80]	; (8003974 <TIM_OC4_SetConfig+0xc0>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d003      	beq.n	8003930 <TIM_OC4_SetConfig+0x7c>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	4a13      	ldr	r2, [pc, #76]	; (8003978 <TIM_OC4_SetConfig+0xc4>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d109      	bne.n	8003944 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003936:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	695b      	ldr	r3, [r3, #20]
 800393c:	019b      	lsls	r3, r3, #6
 800393e:	697a      	ldr	r2, [r7, #20]
 8003940:	4313      	orrs	r3, r2
 8003942:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	697a      	ldr	r2, [r7, #20]
 8003948:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	68fa      	ldr	r2, [r7, #12]
 800394e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	685a      	ldr	r2, [r3, #4]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	693a      	ldr	r2, [r7, #16]
 800395c:	621a      	str	r2, [r3, #32]
}
 800395e:	bf00      	nop
 8003960:	371c      	adds	r7, #28
 8003962:	46bd      	mov	sp, r7
 8003964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003968:	4770      	bx	lr
 800396a:	bf00      	nop
 800396c:	40012c00 	.word	0x40012c00
 8003970:	40014000 	.word	0x40014000
 8003974:	40014400 	.word	0x40014400
 8003978:	40014800 	.word	0x40014800

0800397c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800397c:	b480      	push	{r7}
 800397e:	b087      	sub	sp, #28
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
 8003984:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6a1b      	ldr	r3, [r3, #32]
 800398a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6a1b      	ldr	r3, [r3, #32]
 8003996:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	68fa      	ldr	r2, [r7, #12]
 80039b6:	4313      	orrs	r3, r2
 80039b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80039c0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	689b      	ldr	r3, [r3, #8]
 80039c6:	041b      	lsls	r3, r3, #16
 80039c8:	693a      	ldr	r2, [r7, #16]
 80039ca:	4313      	orrs	r3, r2
 80039cc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	4a15      	ldr	r2, [pc, #84]	; (8003a28 <TIM_OC5_SetConfig+0xac>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d00b      	beq.n	80039ee <TIM_OC5_SetConfig+0x72>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	4a14      	ldr	r2, [pc, #80]	; (8003a2c <TIM_OC5_SetConfig+0xb0>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d007      	beq.n	80039ee <TIM_OC5_SetConfig+0x72>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	4a13      	ldr	r2, [pc, #76]	; (8003a30 <TIM_OC5_SetConfig+0xb4>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d003      	beq.n	80039ee <TIM_OC5_SetConfig+0x72>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	4a12      	ldr	r2, [pc, #72]	; (8003a34 <TIM_OC5_SetConfig+0xb8>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d109      	bne.n	8003a02 <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80039ee:	697b      	ldr	r3, [r7, #20]
 80039f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039f4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	695b      	ldr	r3, [r3, #20]
 80039fa:	021b      	lsls	r3, r3, #8
 80039fc:	697a      	ldr	r2, [r7, #20]
 80039fe:	4313      	orrs	r3, r2
 8003a00:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	697a      	ldr	r2, [r7, #20]
 8003a06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	68fa      	ldr	r2, [r7, #12]
 8003a0c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	685a      	ldr	r2, [r3, #4]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	693a      	ldr	r2, [r7, #16]
 8003a1a:	621a      	str	r2, [r3, #32]
}
 8003a1c:	bf00      	nop
 8003a1e:	371c      	adds	r7, #28
 8003a20:	46bd      	mov	sp, r7
 8003a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a26:	4770      	bx	lr
 8003a28:	40012c00 	.word	0x40012c00
 8003a2c:	40014000 	.word	0x40014000
 8003a30:	40014400 	.word	0x40014400
 8003a34:	40014800 	.word	0x40014800

08003a38 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b087      	sub	sp, #28
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
 8003a40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6a1b      	ldr	r3, [r3, #32]
 8003a46:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6a1b      	ldr	r3, [r3, #32]
 8003a52:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	021b      	lsls	r3, r3, #8
 8003a72:	68fa      	ldr	r2, [r7, #12]
 8003a74:	4313      	orrs	r3, r2
 8003a76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003a78:	693b      	ldr	r3, [r7, #16]
 8003a7a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003a7e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	689b      	ldr	r3, [r3, #8]
 8003a84:	051b      	lsls	r3, r3, #20
 8003a86:	693a      	ldr	r2, [r7, #16]
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	4a16      	ldr	r2, [pc, #88]	; (8003ae8 <TIM_OC6_SetConfig+0xb0>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d00b      	beq.n	8003aac <TIM_OC6_SetConfig+0x74>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	4a15      	ldr	r2, [pc, #84]	; (8003aec <TIM_OC6_SetConfig+0xb4>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d007      	beq.n	8003aac <TIM_OC6_SetConfig+0x74>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	4a14      	ldr	r2, [pc, #80]	; (8003af0 <TIM_OC6_SetConfig+0xb8>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d003      	beq.n	8003aac <TIM_OC6_SetConfig+0x74>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	4a13      	ldr	r2, [pc, #76]	; (8003af4 <TIM_OC6_SetConfig+0xbc>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d109      	bne.n	8003ac0 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003aac:	697b      	ldr	r3, [r7, #20]
 8003aae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ab2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	695b      	ldr	r3, [r3, #20]
 8003ab8:	029b      	lsls	r3, r3, #10
 8003aba:	697a      	ldr	r2, [r7, #20]
 8003abc:	4313      	orrs	r3, r2
 8003abe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	697a      	ldr	r2, [r7, #20]
 8003ac4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	68fa      	ldr	r2, [r7, #12]
 8003aca:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	685a      	ldr	r2, [r3, #4]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	693a      	ldr	r2, [r7, #16]
 8003ad8:	621a      	str	r2, [r3, #32]
}
 8003ada:	bf00      	nop
 8003adc:	371c      	adds	r7, #28
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae4:	4770      	bx	lr
 8003ae6:	bf00      	nop
 8003ae8:	40012c00 	.word	0x40012c00
 8003aec:	40014000 	.word	0x40014000
 8003af0:	40014400 	.word	0x40014400
 8003af4:	40014800 	.word	0x40014800

08003af8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b087      	sub	sp, #28
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	60f8      	str	r0, [r7, #12]
 8003b00:	60b9      	str	r1, [r7, #8]
 8003b02:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	6a1b      	ldr	r3, [r3, #32]
 8003b08:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	6a1b      	ldr	r3, [r3, #32]
 8003b0e:	f023 0201 	bic.w	r2, r3, #1
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	699b      	ldr	r3, [r3, #24]
 8003b1a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003b1c:	693b      	ldr	r3, [r7, #16]
 8003b1e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003b22:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	011b      	lsls	r3, r3, #4
 8003b28:	693a      	ldr	r2, [r7, #16]
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003b2e:	697b      	ldr	r3, [r7, #20]
 8003b30:	f023 030a 	bic.w	r3, r3, #10
 8003b34:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003b36:	697a      	ldr	r2, [r7, #20]
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	693a      	ldr	r2, [r7, #16]
 8003b42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	697a      	ldr	r2, [r7, #20]
 8003b48:	621a      	str	r2, [r3, #32]
}
 8003b4a:	bf00      	nop
 8003b4c:	371c      	adds	r7, #28
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b54:	4770      	bx	lr

08003b56 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b56:	b480      	push	{r7}
 8003b58:	b087      	sub	sp, #28
 8003b5a:	af00      	add	r7, sp, #0
 8003b5c:	60f8      	str	r0, [r7, #12]
 8003b5e:	60b9      	str	r1, [r7, #8]
 8003b60:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	6a1b      	ldr	r3, [r3, #32]
 8003b66:	f023 0210 	bic.w	r2, r3, #16
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	699b      	ldr	r3, [r3, #24]
 8003b72:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	6a1b      	ldr	r3, [r3, #32]
 8003b78:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003b80:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	031b      	lsls	r3, r3, #12
 8003b86:	697a      	ldr	r2, [r7, #20]
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003b8c:	693b      	ldr	r3, [r7, #16]
 8003b8e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003b92:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	011b      	lsls	r3, r3, #4
 8003b98:	693a      	ldr	r2, [r7, #16]
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	697a      	ldr	r2, [r7, #20]
 8003ba2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	693a      	ldr	r2, [r7, #16]
 8003ba8:	621a      	str	r2, [r3, #32]
}
 8003baa:	bf00      	nop
 8003bac:	371c      	adds	r7, #28
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb4:	4770      	bx	lr

08003bb6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003bb6:	b480      	push	{r7}
 8003bb8:	b085      	sub	sp, #20
 8003bba:	af00      	add	r7, sp, #0
 8003bbc:	6078      	str	r0, [r7, #4]
 8003bbe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	689b      	ldr	r3, [r3, #8]
 8003bc4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bcc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003bce:	683a      	ldr	r2, [r7, #0]
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	f043 0307 	orr.w	r3, r3, #7
 8003bd8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	68fa      	ldr	r2, [r7, #12]
 8003bde:	609a      	str	r2, [r3, #8]
}
 8003be0:	bf00      	nop
 8003be2:	3714      	adds	r7, #20
 8003be4:	46bd      	mov	sp, r7
 8003be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bea:	4770      	bx	lr

08003bec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003bec:	b480      	push	{r7}
 8003bee:	b087      	sub	sp, #28
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	60f8      	str	r0, [r7, #12]
 8003bf4:	60b9      	str	r1, [r7, #8]
 8003bf6:	607a      	str	r2, [r7, #4]
 8003bf8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	689b      	ldr	r3, [r3, #8]
 8003bfe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c00:	697b      	ldr	r3, [r7, #20]
 8003c02:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003c06:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	021a      	lsls	r2, r3, #8
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	431a      	orrs	r2, r3
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	4313      	orrs	r3, r2
 8003c14:	697a      	ldr	r2, [r7, #20]
 8003c16:	4313      	orrs	r3, r2
 8003c18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	697a      	ldr	r2, [r7, #20]
 8003c1e:	609a      	str	r2, [r3, #8]
}
 8003c20:	bf00      	nop
 8003c22:	371c      	adds	r7, #28
 8003c24:	46bd      	mov	sp, r7
 8003c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2a:	4770      	bx	lr

08003c2c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	b087      	sub	sp, #28
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	60f8      	str	r0, [r7, #12]
 8003c34:	60b9      	str	r1, [r7, #8]
 8003c36:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	f003 031f 	and.w	r3, r3, #31
 8003c3e:	2201      	movs	r2, #1
 8003c40:	fa02 f303 	lsl.w	r3, r2, r3
 8003c44:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	6a1a      	ldr	r2, [r3, #32]
 8003c4a:	697b      	ldr	r3, [r7, #20]
 8003c4c:	43db      	mvns	r3, r3
 8003c4e:	401a      	ands	r2, r3
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	6a1a      	ldr	r2, [r3, #32]
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	f003 031f 	and.w	r3, r3, #31
 8003c5e:	6879      	ldr	r1, [r7, #4]
 8003c60:	fa01 f303 	lsl.w	r3, r1, r3
 8003c64:	431a      	orrs	r2, r3
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	621a      	str	r2, [r3, #32]
}
 8003c6a:	bf00      	nop
 8003c6c:	371c      	adds	r7, #28
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c74:	4770      	bx	lr
	...

08003c78 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	b085      	sub	sp, #20
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
 8003c80:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c88:	2b01      	cmp	r3, #1
 8003c8a:	d101      	bne.n	8003c90 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003c8c:	2302      	movs	r3, #2
 8003c8e:	e054      	b.n	8003d3a <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2201      	movs	r2, #1
 8003c94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2202      	movs	r2, #2
 8003c9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	689b      	ldr	r3, [r3, #8]
 8003cae:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a24      	ldr	r2, [pc, #144]	; (8003d48 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d108      	bne.n	8003ccc <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003cc0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	68fa      	ldr	r2, [r7, #12]
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cd2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	68fa      	ldr	r2, [r7, #12]
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	68fa      	ldr	r2, [r7, #12]
 8003ce4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a17      	ldr	r2, [pc, #92]	; (8003d48 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d00e      	beq.n	8003d0e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cf8:	d009      	beq.n	8003d0e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4a13      	ldr	r2, [pc, #76]	; (8003d4c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d004      	beq.n	8003d0e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4a11      	ldr	r2, [pc, #68]	; (8003d50 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d10c      	bne.n	8003d28 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003d0e:	68bb      	ldr	r3, [r7, #8]
 8003d10:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d14:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	689b      	ldr	r3, [r3, #8]
 8003d1a:	68ba      	ldr	r2, [r7, #8]
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	68ba      	ldr	r2, [r7, #8]
 8003d26:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2201      	movs	r2, #1
 8003d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2200      	movs	r2, #0
 8003d34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d38:	2300      	movs	r3, #0
}
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	3714      	adds	r7, #20
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d44:	4770      	bx	lr
 8003d46:	bf00      	nop
 8003d48:	40012c00 	.word	0x40012c00
 8003d4c:	40000400 	.word	0x40000400
 8003d50:	40014000 	.word	0x40014000

08003d54 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003d54:	b480      	push	{r7}
 8003d56:	b085      	sub	sp, #20
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
 8003d5c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003d5e:	2300      	movs	r3, #0
 8003d60:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d68:	2b01      	cmp	r3, #1
 8003d6a:	d101      	bne.n	8003d70 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003d6c:	2302      	movs	r3, #2
 8003d6e:	e060      	b.n	8003e32 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2201      	movs	r2, #1
 8003d74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	68db      	ldr	r3, [r3, #12]
 8003d82:	4313      	orrs	r3, r2
 8003d84:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	689b      	ldr	r3, [r3, #8]
 8003d90:	4313      	orrs	r3, r2
 8003d92:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4313      	orrs	r3, r2
 8003dae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	691b      	ldr	r3, [r3, #16]
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	695b      	ldr	r3, [r3, #20]
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	699b      	ldr	r3, [r3, #24]
 8003de4:	041b      	lsls	r3, r3, #16
 8003de6:	4313      	orrs	r3, r2
 8003de8:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4a14      	ldr	r2, [pc, #80]	; (8003e40 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d115      	bne.n	8003e20 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dfe:	051b      	lsls	r3, r3, #20
 8003e00:	4313      	orrs	r3, r2
 8003e02:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	69db      	ldr	r3, [r3, #28]
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	6a1b      	ldr	r3, [r3, #32]
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	68fa      	ldr	r2, [r7, #12]
 8003e26:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e30:	2300      	movs	r3, #0
}
 8003e32:	4618      	mov	r0, r3
 8003e34:	3714      	adds	r7, #20
 8003e36:	46bd      	mov	sp, r7
 8003e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3c:	4770      	bx	lr
 8003e3e:	bf00      	nop
 8003e40:	40012c00 	.word	0x40012c00

08003e44 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b082      	sub	sp, #8
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d101      	bne.n	8003e56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e52:	2301      	movs	r3, #1
 8003e54:	e040      	b.n	8003ed8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d106      	bne.n	8003e6c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2200      	movs	r2, #0
 8003e62:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e66:	6878      	ldr	r0, [r7, #4]
 8003e68:	f7fc fe28 	bl	8000abc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2224      	movs	r2, #36	; 0x24
 8003e70:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	681a      	ldr	r2, [r3, #0]
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f022 0201 	bic.w	r2, r2, #1
 8003e80:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003e82:	6878      	ldr	r0, [r7, #4]
 8003e84:	f000 fc18 	bl	80046b8 <UART_SetConfig>
 8003e88:	4603      	mov	r3, r0
 8003e8a:	2b01      	cmp	r3, #1
 8003e8c:	d101      	bne.n	8003e92 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	e022      	b.n	8003ed8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d002      	beq.n	8003ea0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003e9a:	6878      	ldr	r0, [r7, #4]
 8003e9c:	f000 fd44 	bl	8004928 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	685a      	ldr	r2, [r3, #4]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003eae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	689a      	ldr	r2, [r3, #8]
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003ebe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	681a      	ldr	r2, [r3, #0]
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f042 0201 	orr.w	r2, r2, #1
 8003ece:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003ed0:	6878      	ldr	r0, [r7, #4]
 8003ed2:	f000 fdcb 	bl	8004a6c <UART_CheckIdleState>
 8003ed6:	4603      	mov	r3, r0
}
 8003ed8:	4618      	mov	r0, r3
 8003eda:	3708      	adds	r7, #8
 8003edc:	46bd      	mov	sp, r7
 8003ede:	bd80      	pop	{r7, pc}

08003ee0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b08a      	sub	sp, #40	; 0x28
 8003ee4:	af02      	add	r7, sp, #8
 8003ee6:	60f8      	str	r0, [r7, #12]
 8003ee8:	60b9      	str	r1, [r7, #8]
 8003eea:	603b      	str	r3, [r7, #0]
 8003eec:	4613      	mov	r3, r2
 8003eee:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ef4:	2b20      	cmp	r3, #32
 8003ef6:	f040 8082 	bne.w	8003ffe <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d002      	beq.n	8003f06 <HAL_UART_Transmit+0x26>
 8003f00:	88fb      	ldrh	r3, [r7, #6]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d101      	bne.n	8003f0a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003f06:	2301      	movs	r3, #1
 8003f08:	e07a      	b.n	8004000 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003f10:	2b01      	cmp	r3, #1
 8003f12:	d101      	bne.n	8003f18 <HAL_UART_Transmit+0x38>
 8003f14:	2302      	movs	r3, #2
 8003f16:	e073      	b.n	8004000 <HAL_UART_Transmit+0x120>
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	2200      	movs	r2, #0
 8003f24:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	2221      	movs	r2, #33	; 0x21
 8003f2c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003f2e:	f7fc ffe3 	bl	8000ef8 <HAL_GetTick>
 8003f32:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	88fa      	ldrh	r2, [r7, #6]
 8003f38:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	88fa      	ldrh	r2, [r7, #6]
 8003f40:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	689b      	ldr	r3, [r3, #8]
 8003f48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f4c:	d108      	bne.n	8003f60 <HAL_UART_Transmit+0x80>
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	691b      	ldr	r3, [r3, #16]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d104      	bne.n	8003f60 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003f56:	2300      	movs	r3, #0
 8003f58:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003f5a:	68bb      	ldr	r3, [r7, #8]
 8003f5c:	61bb      	str	r3, [r7, #24]
 8003f5e:	e003      	b.n	8003f68 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003f64:	2300      	movs	r3, #0
 8003f66:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003f70:	e02d      	b.n	8003fce <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	9300      	str	r3, [sp, #0]
 8003f76:	697b      	ldr	r3, [r7, #20]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	2180      	movs	r1, #128	; 0x80
 8003f7c:	68f8      	ldr	r0, [r7, #12]
 8003f7e:	f000 fdbe 	bl	8004afe <UART_WaitOnFlagUntilTimeout>
 8003f82:	4603      	mov	r3, r0
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d001      	beq.n	8003f8c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003f88:	2303      	movs	r3, #3
 8003f8a:	e039      	b.n	8004000 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8003f8c:	69fb      	ldr	r3, [r7, #28]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d10b      	bne.n	8003faa <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003f92:	69bb      	ldr	r3, [r7, #24]
 8003f94:	881a      	ldrh	r2, [r3, #0]
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f9e:	b292      	uxth	r2, r2
 8003fa0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003fa2:	69bb      	ldr	r3, [r7, #24]
 8003fa4:	3302      	adds	r3, #2
 8003fa6:	61bb      	str	r3, [r7, #24]
 8003fa8:	e008      	b.n	8003fbc <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003faa:	69fb      	ldr	r3, [r7, #28]
 8003fac:	781a      	ldrb	r2, [r3, #0]
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	b292      	uxth	r2, r2
 8003fb4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003fb6:	69fb      	ldr	r3, [r7, #28]
 8003fb8:	3301      	adds	r3, #1
 8003fba:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003fc2:	b29b      	uxth	r3, r3
 8003fc4:	3b01      	subs	r3, #1
 8003fc6:	b29a      	uxth	r2, r3
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003fd4:	b29b      	uxth	r3, r3
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d1cb      	bne.n	8003f72 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	9300      	str	r3, [sp, #0]
 8003fde:	697b      	ldr	r3, [r7, #20]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	2140      	movs	r1, #64	; 0x40
 8003fe4:	68f8      	ldr	r0, [r7, #12]
 8003fe6:	f000 fd8a 	bl	8004afe <UART_WaitOnFlagUntilTimeout>
 8003fea:	4603      	mov	r3, r0
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d001      	beq.n	8003ff4 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003ff0:	2303      	movs	r3, #3
 8003ff2:	e005      	b.n	8004000 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	2220      	movs	r2, #32
 8003ff8:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	e000      	b.n	8004000 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8003ffe:	2302      	movs	r3, #2
  }
}
 8004000:	4618      	mov	r0, r3
 8004002:	3720      	adds	r7, #32
 8004004:	46bd      	mov	sp, r7
 8004006:	bd80      	pop	{r7, pc}

08004008 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b08a      	sub	sp, #40	; 0x28
 800400c:	af00      	add	r7, sp, #0
 800400e:	60f8      	str	r0, [r7, #12]
 8004010:	60b9      	str	r1, [r7, #8]
 8004012:	4613      	mov	r3, r2
 8004014:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800401a:	2b20      	cmp	r3, #32
 800401c:	d13d      	bne.n	800409a <HAL_UART_Receive_DMA+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 800401e:	68bb      	ldr	r3, [r7, #8]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d002      	beq.n	800402a <HAL_UART_Receive_DMA+0x22>
 8004024:	88fb      	ldrh	r3, [r7, #6]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d101      	bne.n	800402e <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 800402a:	2301      	movs	r3, #1
 800402c:	e036      	b.n	800409c <HAL_UART_Receive_DMA+0x94>
    }

    __HAL_LOCK(huart);
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004034:	2b01      	cmp	r3, #1
 8004036:	d101      	bne.n	800403c <HAL_UART_Receive_DMA+0x34>
 8004038:	2302      	movs	r3, #2
 800403a:	e02f      	b.n	800409c <HAL_UART_Receive_DMA+0x94>
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	2201      	movs	r2, #1
 8004040:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	2200      	movs	r2, #0
 8004048:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004054:	2b00      	cmp	r3, #0
 8004056:	d018      	beq.n	800408a <HAL_UART_Receive_DMA+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800405e:	697b      	ldr	r3, [r7, #20]
 8004060:	e853 3f00 	ldrex	r3, [r3]
 8004064:	613b      	str	r3, [r7, #16]
   return(result);
 8004066:	693b      	ldr	r3, [r7, #16]
 8004068:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800406c:	627b      	str	r3, [r7, #36]	; 0x24
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	461a      	mov	r2, r3
 8004074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004076:	623b      	str	r3, [r7, #32]
 8004078:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800407a:	69f9      	ldr	r1, [r7, #28]
 800407c:	6a3a      	ldr	r2, [r7, #32]
 800407e:	e841 2300 	strex	r3, r2, [r1]
 8004082:	61bb      	str	r3, [r7, #24]
   return(result);
 8004084:	69bb      	ldr	r3, [r7, #24]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d1e6      	bne.n	8004058 <HAL_UART_Receive_DMA+0x50>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800408a:	88fb      	ldrh	r3, [r7, #6]
 800408c:	461a      	mov	r2, r3
 800408e:	68b9      	ldr	r1, [r7, #8]
 8004090:	68f8      	ldr	r0, [r7, #12]
 8004092:	f000 fdf9 	bl	8004c88 <UART_Start_Receive_DMA>
 8004096:	4603      	mov	r3, r0
 8004098:	e000      	b.n	800409c <HAL_UART_Receive_DMA+0x94>
  }
  else
  {
    return HAL_BUSY;
 800409a:	2302      	movs	r3, #2
  }
}
 800409c:	4618      	mov	r0, r3
 800409e:	3728      	adds	r7, #40	; 0x28
 80040a0:	46bd      	mov	sp, r7
 80040a2:	bd80      	pop	{r7, pc}

080040a4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b0ba      	sub	sp, #232	; 0xe8
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	69db      	ldr	r3, [r3, #28]
 80040b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	689b      	ldr	r3, [r3, #8]
 80040c6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80040ca:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80040ce:	f640 030f 	movw	r3, #2063	; 0x80f
 80040d2:	4013      	ands	r3, r2
 80040d4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80040d8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d115      	bne.n	800410c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80040e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040e4:	f003 0320 	and.w	r3, r3, #32
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d00f      	beq.n	800410c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80040ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80040f0:	f003 0320 	and.w	r3, r3, #32
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d009      	beq.n	800410c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	f000 82a4 	beq.w	800464a <HAL_UART_IRQHandler+0x5a6>
      {
        huart->RxISR(huart);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004106:	6878      	ldr	r0, [r7, #4]
 8004108:	4798      	blx	r3
      }
      return;
 800410a:	e29e      	b.n	800464a <HAL_UART_IRQHandler+0x5a6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800410c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004110:	2b00      	cmp	r3, #0
 8004112:	f000 8117 	beq.w	8004344 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004116:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800411a:	f003 0301 	and.w	r3, r3, #1
 800411e:	2b00      	cmp	r3, #0
 8004120:	d106      	bne.n	8004130 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004122:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004126:	4b85      	ldr	r3, [pc, #532]	; (800433c <HAL_UART_IRQHandler+0x298>)
 8004128:	4013      	ands	r3, r2
 800412a:	2b00      	cmp	r3, #0
 800412c:	f000 810a 	beq.w	8004344 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004130:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004134:	f003 0301 	and.w	r3, r3, #1
 8004138:	2b00      	cmp	r3, #0
 800413a:	d011      	beq.n	8004160 <HAL_UART_IRQHandler+0xbc>
 800413c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004140:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004144:	2b00      	cmp	r3, #0
 8004146:	d00b      	beq.n	8004160 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	2201      	movs	r2, #1
 800414e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004156:	f043 0201 	orr.w	r2, r3, #1
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004160:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004164:	f003 0302 	and.w	r3, r3, #2
 8004168:	2b00      	cmp	r3, #0
 800416a:	d011      	beq.n	8004190 <HAL_UART_IRQHandler+0xec>
 800416c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004170:	f003 0301 	and.w	r3, r3, #1
 8004174:	2b00      	cmp	r3, #0
 8004176:	d00b      	beq.n	8004190 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	2202      	movs	r2, #2
 800417e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004186:	f043 0204 	orr.w	r2, r3, #4
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004190:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004194:	f003 0304 	and.w	r3, r3, #4
 8004198:	2b00      	cmp	r3, #0
 800419a:	d011      	beq.n	80041c0 <HAL_UART_IRQHandler+0x11c>
 800419c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80041a0:	f003 0301 	and.w	r3, r3, #1
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d00b      	beq.n	80041c0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	2204      	movs	r2, #4
 80041ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80041b6:	f043 0202 	orr.w	r2, r3, #2
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80041c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041c4:	f003 0308 	and.w	r3, r3, #8
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d017      	beq.n	80041fc <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80041cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041d0:	f003 0320 	and.w	r3, r3, #32
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d105      	bne.n	80041e4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80041d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80041dc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d00b      	beq.n	80041fc <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	2208      	movs	r2, #8
 80041ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80041f2:	f043 0208 	orr.w	r2, r3, #8
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80041fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004200:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004204:	2b00      	cmp	r3, #0
 8004206:	d012      	beq.n	800422e <HAL_UART_IRQHandler+0x18a>
 8004208:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800420c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004210:	2b00      	cmp	r3, #0
 8004212:	d00c      	beq.n	800422e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800421c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004224:	f043 0220 	orr.w	r2, r3, #32
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004234:	2b00      	cmp	r3, #0
 8004236:	f000 820a 	beq.w	800464e <HAL_UART_IRQHandler+0x5aa>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800423a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800423e:	f003 0320 	and.w	r3, r3, #32
 8004242:	2b00      	cmp	r3, #0
 8004244:	d00d      	beq.n	8004262 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004246:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800424a:	f003 0320 	and.w	r3, r3, #32
 800424e:	2b00      	cmp	r3, #0
 8004250:	d007      	beq.n	8004262 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004256:	2b00      	cmp	r3, #0
 8004258:	d003      	beq.n	8004262 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800425e:	6878      	ldr	r0, [r7, #4]
 8004260:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004268:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	689b      	ldr	r3, [r3, #8]
 8004272:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004276:	2b40      	cmp	r3, #64	; 0x40
 8004278:	d005      	beq.n	8004286 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800427a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800427e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004282:	2b00      	cmp	r3, #0
 8004284:	d04f      	beq.n	8004326 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004286:	6878      	ldr	r0, [r7, #4]
 8004288:	f000 fdc6 	bl	8004e18 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	689b      	ldr	r3, [r3, #8]
 8004292:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004296:	2b40      	cmp	r3, #64	; 0x40
 8004298:	d141      	bne.n	800431e <HAL_UART_IRQHandler+0x27a>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	3308      	adds	r3, #8
 80042a0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042a4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80042a8:	e853 3f00 	ldrex	r3, [r3]
 80042ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80042b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80042b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80042b8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	3308      	adds	r3, #8
 80042c2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80042c6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80042ca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042ce:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80042d2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80042d6:	e841 2300 	strex	r3, r2, [r1]
 80042da:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80042de:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d1d9      	bne.n	800429a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d013      	beq.n	8004316 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042f2:	4a13      	ldr	r2, [pc, #76]	; (8004340 <HAL_UART_IRQHandler+0x29c>)
 80042f4:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042fa:	4618      	mov	r0, r3
 80042fc:	f7fd f81a 	bl	8001334 <HAL_DMA_Abort_IT>
 8004300:	4603      	mov	r3, r0
 8004302:	2b00      	cmp	r3, #0
 8004304:	d017      	beq.n	8004336 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800430a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800430c:	687a      	ldr	r2, [r7, #4]
 800430e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8004310:	4610      	mov	r0, r2
 8004312:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004314:	e00f      	b.n	8004336 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004316:	6878      	ldr	r0, [r7, #4]
 8004318:	f000 f9b8 	bl	800468c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800431c:	e00b      	b.n	8004336 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800431e:	6878      	ldr	r0, [r7, #4]
 8004320:	f000 f9b4 	bl	800468c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004324:	e007      	b.n	8004336 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004326:	6878      	ldr	r0, [r7, #4]
 8004328:	f000 f9b0 	bl	800468c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2200      	movs	r2, #0
 8004330:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8004334:	e18b      	b.n	800464e <HAL_UART_IRQHandler+0x5aa>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004336:	bf00      	nop
    return;
 8004338:	e189      	b.n	800464e <HAL_UART_IRQHandler+0x5aa>
 800433a:	bf00      	nop
 800433c:	04000120 	.word	0x04000120
 8004340:	080050b1 	.word	0x080050b1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004348:	2b01      	cmp	r3, #1
 800434a:	f040 8143 	bne.w	80045d4 <HAL_UART_IRQHandler+0x530>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800434e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004352:	f003 0310 	and.w	r3, r3, #16
 8004356:	2b00      	cmp	r3, #0
 8004358:	f000 813c 	beq.w	80045d4 <HAL_UART_IRQHandler+0x530>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800435c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004360:	f003 0310 	and.w	r3, r3, #16
 8004364:	2b00      	cmp	r3, #0
 8004366:	f000 8135 	beq.w	80045d4 <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	2210      	movs	r2, #16
 8004370:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	689b      	ldr	r3, [r3, #8]
 8004378:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800437c:	2b40      	cmp	r3, #64	; 0x40
 800437e:	f040 80b1 	bne.w	80044e4 <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800438e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004392:	2b00      	cmp	r3, #0
 8004394:	f000 815d 	beq.w	8004652 <HAL_UART_IRQHandler+0x5ae>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800439e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80043a2:	429a      	cmp	r2, r3
 80043a4:	f080 8155 	bcs.w	8004652 <HAL_UART_IRQHandler+0x5ae>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80043ae:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043b6:	699b      	ldr	r3, [r3, #24]
 80043b8:	2b20      	cmp	r3, #32
 80043ba:	f000 8085 	beq.w	80044c8 <HAL_UART_IRQHandler+0x424>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043c6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80043ca:	e853 3f00 	ldrex	r3, [r3]
 80043ce:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80043d2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80043d6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80043da:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	461a      	mov	r2, r3
 80043e4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80043e8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80043ec:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043f0:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80043f4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80043f8:	e841 2300 	strex	r3, r2, [r1]
 80043fc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004400:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004404:	2b00      	cmp	r3, #0
 8004406:	d1da      	bne.n	80043be <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	3308      	adds	r3, #8
 800440e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004410:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004412:	e853 3f00 	ldrex	r3, [r3]
 8004416:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004418:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800441a:	f023 0301 	bic.w	r3, r3, #1
 800441e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	3308      	adds	r3, #8
 8004428:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800442c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004430:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004432:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004434:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004438:	e841 2300 	strex	r3, r2, [r1]
 800443c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800443e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004440:	2b00      	cmp	r3, #0
 8004442:	d1e1      	bne.n	8004408 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	3308      	adds	r3, #8
 800444a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800444c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800444e:	e853 3f00 	ldrex	r3, [r3]
 8004452:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004454:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004456:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800445a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	3308      	adds	r3, #8
 8004464:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004468:	66fa      	str	r2, [r7, #108]	; 0x6c
 800446a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800446c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800446e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004470:	e841 2300 	strex	r3, r2, [r1]
 8004474:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004476:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004478:	2b00      	cmp	r3, #0
 800447a:	d1e3      	bne.n	8004444 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2220      	movs	r2, #32
 8004480:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2200      	movs	r2, #0
 8004486:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800448e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004490:	e853 3f00 	ldrex	r3, [r3]
 8004494:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004496:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004498:	f023 0310 	bic.w	r3, r3, #16
 800449c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	461a      	mov	r2, r3
 80044a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80044aa:	65bb      	str	r3, [r7, #88]	; 0x58
 80044ac:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044ae:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80044b0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80044b2:	e841 2300 	strex	r3, r2, [r1]
 80044b6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80044b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d1e4      	bne.n	8004488 <HAL_UART_IRQHandler+0x3e4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044c2:	4618      	mov	r0, r3
 80044c4:	f7fc fefd 	bl	80012c2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80044d4:	b29b      	uxth	r3, r3
 80044d6:	1ad3      	subs	r3, r2, r3
 80044d8:	b29b      	uxth	r3, r3
 80044da:	4619      	mov	r1, r3
 80044dc:	6878      	ldr	r0, [r7, #4]
 80044de:	f000 f8df 	bl	80046a0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80044e2:	e0b6      	b.n	8004652 <HAL_UART_IRQHandler+0x5ae>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80044f0:	b29b      	uxth	r3, r3
 80044f2:	1ad3      	subs	r3, r2, r3
 80044f4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80044fe:	b29b      	uxth	r3, r3
 8004500:	2b00      	cmp	r3, #0
 8004502:	f000 80a8 	beq.w	8004656 <HAL_UART_IRQHandler+0x5b2>
          && (nb_rx_data > 0U))
 8004506:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800450a:	2b00      	cmp	r3, #0
 800450c:	f000 80a3 	beq.w	8004656 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004518:	e853 3f00 	ldrex	r3, [r3]
 800451c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800451e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004520:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004524:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	461a      	mov	r2, r3
 800452e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004532:	647b      	str	r3, [r7, #68]	; 0x44
 8004534:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004536:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004538:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800453a:	e841 2300 	strex	r3, r2, [r1]
 800453e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004540:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004542:	2b00      	cmp	r3, #0
 8004544:	d1e4      	bne.n	8004510 <HAL_UART_IRQHandler+0x46c>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	3308      	adds	r3, #8
 800454c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800454e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004550:	e853 3f00 	ldrex	r3, [r3]
 8004554:	623b      	str	r3, [r7, #32]
   return(result);
 8004556:	6a3b      	ldr	r3, [r7, #32]
 8004558:	f023 0301 	bic.w	r3, r3, #1
 800455c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	3308      	adds	r3, #8
 8004566:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800456a:	633a      	str	r2, [r7, #48]	; 0x30
 800456c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800456e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004570:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004572:	e841 2300 	strex	r3, r2, [r1]
 8004576:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800457a:	2b00      	cmp	r3, #0
 800457c:	d1e3      	bne.n	8004546 <HAL_UART_IRQHandler+0x4a2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2220      	movs	r2, #32
 8004582:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2200      	movs	r2, #0
 8004588:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2200      	movs	r2, #0
 800458e:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004596:	693b      	ldr	r3, [r7, #16]
 8004598:	e853 3f00 	ldrex	r3, [r3]
 800459c:	60fb      	str	r3, [r7, #12]
   return(result);
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	f023 0310 	bic.w	r3, r3, #16
 80045a4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	461a      	mov	r2, r3
 80045ae:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80045b2:	61fb      	str	r3, [r7, #28]
 80045b4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045b6:	69b9      	ldr	r1, [r7, #24]
 80045b8:	69fa      	ldr	r2, [r7, #28]
 80045ba:	e841 2300 	strex	r3, r2, [r1]
 80045be:	617b      	str	r3, [r7, #20]
   return(result);
 80045c0:	697b      	ldr	r3, [r7, #20]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d1e4      	bne.n	8004590 <HAL_UART_IRQHandler+0x4ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80045c6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80045ca:	4619      	mov	r1, r3
 80045cc:	6878      	ldr	r0, [r7, #4]
 80045ce:	f000 f867 	bl	80046a0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80045d2:	e040      	b.n	8004656 <HAL_UART_IRQHandler+0x5b2>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80045d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d00e      	beq.n	80045fe <HAL_UART_IRQHandler+0x55a>
 80045e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80045e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d008      	beq.n	80045fe <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80045f4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80045f6:	6878      	ldr	r0, [r7, #4]
 80045f8:	f000 fd9a 	bl	8005130 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80045fc:	e02e      	b.n	800465c <HAL_UART_IRQHandler+0x5b8>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80045fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004602:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004606:	2b00      	cmp	r3, #0
 8004608:	d00e      	beq.n	8004628 <HAL_UART_IRQHandler+0x584>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800460a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800460e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004612:	2b00      	cmp	r3, #0
 8004614:	d008      	beq.n	8004628 <HAL_UART_IRQHandler+0x584>
  {
    if (huart->TxISR != NULL)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800461a:	2b00      	cmp	r3, #0
 800461c:	d01d      	beq.n	800465a <HAL_UART_IRQHandler+0x5b6>
    {
      huart->TxISR(huart);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004622:	6878      	ldr	r0, [r7, #4]
 8004624:	4798      	blx	r3
    }
    return;
 8004626:	e018      	b.n	800465a <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004628:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800462c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004630:	2b00      	cmp	r3, #0
 8004632:	d013      	beq.n	800465c <HAL_UART_IRQHandler+0x5b8>
 8004634:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004638:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800463c:	2b00      	cmp	r3, #0
 800463e:	d00d      	beq.n	800465c <HAL_UART_IRQHandler+0x5b8>
  {
    UART_EndTransmit_IT(huart);
 8004640:	6878      	ldr	r0, [r7, #4]
 8004642:	f000 fd4b 	bl	80050dc <UART_EndTransmit_IT>
    return;
 8004646:	bf00      	nop
 8004648:	e008      	b.n	800465c <HAL_UART_IRQHandler+0x5b8>
      return;
 800464a:	bf00      	nop
 800464c:	e006      	b.n	800465c <HAL_UART_IRQHandler+0x5b8>
    return;
 800464e:	bf00      	nop
 8004650:	e004      	b.n	800465c <HAL_UART_IRQHandler+0x5b8>
      return;
 8004652:	bf00      	nop
 8004654:	e002      	b.n	800465c <HAL_UART_IRQHandler+0x5b8>
      return;
 8004656:	bf00      	nop
 8004658:	e000      	b.n	800465c <HAL_UART_IRQHandler+0x5b8>
    return;
 800465a:	bf00      	nop
  }

}
 800465c:	37e8      	adds	r7, #232	; 0xe8
 800465e:	46bd      	mov	sp, r7
 8004660:	bd80      	pop	{r7, pc}
 8004662:	bf00      	nop

08004664 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004664:	b480      	push	{r7}
 8004666:	b083      	sub	sp, #12
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800466c:	bf00      	nop
 800466e:	370c      	adds	r7, #12
 8004670:	46bd      	mov	sp, r7
 8004672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004676:	4770      	bx	lr

08004678 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004678:	b480      	push	{r7}
 800467a:	b083      	sub	sp, #12
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8004680:	bf00      	nop
 8004682:	370c      	adds	r7, #12
 8004684:	46bd      	mov	sp, r7
 8004686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468a:	4770      	bx	lr

0800468c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800468c:	b480      	push	{r7}
 800468e:	b083      	sub	sp, #12
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004694:	bf00      	nop
 8004696:	370c      	adds	r7, #12
 8004698:	46bd      	mov	sp, r7
 800469a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469e:	4770      	bx	lr

080046a0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80046a0:	b480      	push	{r7}
 80046a2:	b083      	sub	sp, #12
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
 80046a8:	460b      	mov	r3, r1
 80046aa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80046ac:	bf00      	nop
 80046ae:	370c      	adds	r7, #12
 80046b0:	46bd      	mov	sp, r7
 80046b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b6:	4770      	bx	lr

080046b8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b088      	sub	sp, #32
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80046c0:	2300      	movs	r3, #0
 80046c2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	689a      	ldr	r2, [r3, #8]
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	691b      	ldr	r3, [r3, #16]
 80046cc:	431a      	orrs	r2, r3
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	695b      	ldr	r3, [r3, #20]
 80046d2:	431a      	orrs	r2, r3
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	69db      	ldr	r3, [r3, #28]
 80046d8:	4313      	orrs	r3, r2
 80046da:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	681a      	ldr	r2, [r3, #0]
 80046e2:	4b8b      	ldr	r3, [pc, #556]	; (8004910 <UART_SetConfig+0x258>)
 80046e4:	4013      	ands	r3, r2
 80046e6:	687a      	ldr	r2, [r7, #4]
 80046e8:	6812      	ldr	r2, [r2, #0]
 80046ea:	6979      	ldr	r1, [r7, #20]
 80046ec:	430b      	orrs	r3, r1
 80046ee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	68da      	ldr	r2, [r3, #12]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	430a      	orrs	r2, r1
 8004704:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	699b      	ldr	r3, [r3, #24]
 800470a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6a1b      	ldr	r3, [r3, #32]
 8004710:	697a      	ldr	r2, [r7, #20]
 8004712:	4313      	orrs	r3, r2
 8004714:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	689b      	ldr	r3, [r3, #8]
 800471c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	697a      	ldr	r2, [r7, #20]
 8004726:	430a      	orrs	r2, r1
 8004728:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4a79      	ldr	r2, [pc, #484]	; (8004914 <UART_SetConfig+0x25c>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d121      	bne.n	8004778 <UART_SetConfig+0xc0>
 8004734:	4b78      	ldr	r3, [pc, #480]	; (8004918 <UART_SetConfig+0x260>)
 8004736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004738:	f003 0303 	and.w	r3, r3, #3
 800473c:	2b03      	cmp	r3, #3
 800473e:	d817      	bhi.n	8004770 <UART_SetConfig+0xb8>
 8004740:	a201      	add	r2, pc, #4	; (adr r2, 8004748 <UART_SetConfig+0x90>)
 8004742:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004746:	bf00      	nop
 8004748:	08004759 	.word	0x08004759
 800474c:	08004765 	.word	0x08004765
 8004750:	0800476b 	.word	0x0800476b
 8004754:	0800475f 	.word	0x0800475f
 8004758:	2300      	movs	r3, #0
 800475a:	77fb      	strb	r3, [r7, #31]
 800475c:	e01e      	b.n	800479c <UART_SetConfig+0xe4>
 800475e:	2302      	movs	r3, #2
 8004760:	77fb      	strb	r3, [r7, #31]
 8004762:	e01b      	b.n	800479c <UART_SetConfig+0xe4>
 8004764:	2304      	movs	r3, #4
 8004766:	77fb      	strb	r3, [r7, #31]
 8004768:	e018      	b.n	800479c <UART_SetConfig+0xe4>
 800476a:	2308      	movs	r3, #8
 800476c:	77fb      	strb	r3, [r7, #31]
 800476e:	e015      	b.n	800479c <UART_SetConfig+0xe4>
 8004770:	2310      	movs	r3, #16
 8004772:	77fb      	strb	r3, [r7, #31]
 8004774:	bf00      	nop
 8004776:	e011      	b.n	800479c <UART_SetConfig+0xe4>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4a67      	ldr	r2, [pc, #412]	; (800491c <UART_SetConfig+0x264>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d102      	bne.n	8004788 <UART_SetConfig+0xd0>
 8004782:	2300      	movs	r3, #0
 8004784:	77fb      	strb	r3, [r7, #31]
 8004786:	e009      	b.n	800479c <UART_SetConfig+0xe4>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4a64      	ldr	r2, [pc, #400]	; (8004920 <UART_SetConfig+0x268>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d102      	bne.n	8004798 <UART_SetConfig+0xe0>
 8004792:	2300      	movs	r3, #0
 8004794:	77fb      	strb	r3, [r7, #31]
 8004796:	e001      	b.n	800479c <UART_SetConfig+0xe4>
 8004798:	2310      	movs	r3, #16
 800479a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	69db      	ldr	r3, [r3, #28]
 80047a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047a4:	d15c      	bne.n	8004860 <UART_SetConfig+0x1a8>
  {
    switch (clocksource)
 80047a6:	7ffb      	ldrb	r3, [r7, #31]
 80047a8:	2b08      	cmp	r3, #8
 80047aa:	d828      	bhi.n	80047fe <UART_SetConfig+0x146>
 80047ac:	a201      	add	r2, pc, #4	; (adr r2, 80047b4 <UART_SetConfig+0xfc>)
 80047ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047b2:	bf00      	nop
 80047b4:	080047d9 	.word	0x080047d9
 80047b8:	080047e1 	.word	0x080047e1
 80047bc:	080047e9 	.word	0x080047e9
 80047c0:	080047ff 	.word	0x080047ff
 80047c4:	080047ef 	.word	0x080047ef
 80047c8:	080047ff 	.word	0x080047ff
 80047cc:	080047ff 	.word	0x080047ff
 80047d0:	080047ff 	.word	0x080047ff
 80047d4:	080047f7 	.word	0x080047f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80047d8:	f7fe f990 	bl	8002afc <HAL_RCC_GetPCLK1Freq>
 80047dc:	61b8      	str	r0, [r7, #24]
        break;
 80047de:	e013      	b.n	8004808 <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80047e0:	f7fe f9ae 	bl	8002b40 <HAL_RCC_GetPCLK2Freq>
 80047e4:	61b8      	str	r0, [r7, #24]
        break;
 80047e6:	e00f      	b.n	8004808 <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80047e8:	4b4e      	ldr	r3, [pc, #312]	; (8004924 <UART_SetConfig+0x26c>)
 80047ea:	61bb      	str	r3, [r7, #24]
        break;
 80047ec:	e00c      	b.n	8004808 <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80047ee:	f7fe f90f 	bl	8002a10 <HAL_RCC_GetSysClockFreq>
 80047f2:	61b8      	str	r0, [r7, #24]
        break;
 80047f4:	e008      	b.n	8004808 <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80047f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80047fa:	61bb      	str	r3, [r7, #24]
        break;
 80047fc:	e004      	b.n	8004808 <UART_SetConfig+0x150>
      default:
        pclk = 0U;
 80047fe:	2300      	movs	r3, #0
 8004800:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004802:	2301      	movs	r3, #1
 8004804:	77bb      	strb	r3, [r7, #30]
        break;
 8004806:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004808:	69bb      	ldr	r3, [r7, #24]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d074      	beq.n	80048f8 <UART_SetConfig+0x240>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800480e:	69bb      	ldr	r3, [r7, #24]
 8004810:	005a      	lsls	r2, r3, #1
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	085b      	lsrs	r3, r3, #1
 8004818:	441a      	add	r2, r3
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004822:	b29b      	uxth	r3, r3
 8004824:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004826:	693b      	ldr	r3, [r7, #16]
 8004828:	2b0f      	cmp	r3, #15
 800482a:	d916      	bls.n	800485a <UART_SetConfig+0x1a2>
 800482c:	693b      	ldr	r3, [r7, #16]
 800482e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004832:	d212      	bcs.n	800485a <UART_SetConfig+0x1a2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004834:	693b      	ldr	r3, [r7, #16]
 8004836:	b29b      	uxth	r3, r3
 8004838:	f023 030f 	bic.w	r3, r3, #15
 800483c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	085b      	lsrs	r3, r3, #1
 8004842:	b29b      	uxth	r3, r3
 8004844:	f003 0307 	and.w	r3, r3, #7
 8004848:	b29a      	uxth	r2, r3
 800484a:	89fb      	ldrh	r3, [r7, #14]
 800484c:	4313      	orrs	r3, r2
 800484e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	89fa      	ldrh	r2, [r7, #14]
 8004856:	60da      	str	r2, [r3, #12]
 8004858:	e04e      	b.n	80048f8 <UART_SetConfig+0x240>
      }
      else
      {
        ret = HAL_ERROR;
 800485a:	2301      	movs	r3, #1
 800485c:	77bb      	strb	r3, [r7, #30]
 800485e:	e04b      	b.n	80048f8 <UART_SetConfig+0x240>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004860:	7ffb      	ldrb	r3, [r7, #31]
 8004862:	2b08      	cmp	r3, #8
 8004864:	d827      	bhi.n	80048b6 <UART_SetConfig+0x1fe>
 8004866:	a201      	add	r2, pc, #4	; (adr r2, 800486c <UART_SetConfig+0x1b4>)
 8004868:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800486c:	08004891 	.word	0x08004891
 8004870:	08004899 	.word	0x08004899
 8004874:	080048a1 	.word	0x080048a1
 8004878:	080048b7 	.word	0x080048b7
 800487c:	080048a7 	.word	0x080048a7
 8004880:	080048b7 	.word	0x080048b7
 8004884:	080048b7 	.word	0x080048b7
 8004888:	080048b7 	.word	0x080048b7
 800488c:	080048af 	.word	0x080048af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004890:	f7fe f934 	bl	8002afc <HAL_RCC_GetPCLK1Freq>
 8004894:	61b8      	str	r0, [r7, #24]
        break;
 8004896:	e013      	b.n	80048c0 <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004898:	f7fe f952 	bl	8002b40 <HAL_RCC_GetPCLK2Freq>
 800489c:	61b8      	str	r0, [r7, #24]
        break;
 800489e:	e00f      	b.n	80048c0 <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80048a0:	4b20      	ldr	r3, [pc, #128]	; (8004924 <UART_SetConfig+0x26c>)
 80048a2:	61bb      	str	r3, [r7, #24]
        break;
 80048a4:	e00c      	b.n	80048c0 <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80048a6:	f7fe f8b3 	bl	8002a10 <HAL_RCC_GetSysClockFreq>
 80048aa:	61b8      	str	r0, [r7, #24]
        break;
 80048ac:	e008      	b.n	80048c0 <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80048ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80048b2:	61bb      	str	r3, [r7, #24]
        break;
 80048b4:	e004      	b.n	80048c0 <UART_SetConfig+0x208>
      default:
        pclk = 0U;
 80048b6:	2300      	movs	r3, #0
 80048b8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80048ba:	2301      	movs	r3, #1
 80048bc:	77bb      	strb	r3, [r7, #30]
        break;
 80048be:	bf00      	nop
    }

    if (pclk != 0U)
 80048c0:	69bb      	ldr	r3, [r7, #24]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d018      	beq.n	80048f8 <UART_SetConfig+0x240>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	085a      	lsrs	r2, r3, #1
 80048cc:	69bb      	ldr	r3, [r7, #24]
 80048ce:	441a      	add	r2, r3
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80048d8:	b29b      	uxth	r3, r3
 80048da:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80048dc:	693b      	ldr	r3, [r7, #16]
 80048de:	2b0f      	cmp	r3, #15
 80048e0:	d908      	bls.n	80048f4 <UART_SetConfig+0x23c>
 80048e2:	693b      	ldr	r3, [r7, #16]
 80048e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048e8:	d204      	bcs.n	80048f4 <UART_SetConfig+0x23c>
      {
        huart->Instance->BRR = usartdiv;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	693a      	ldr	r2, [r7, #16]
 80048f0:	60da      	str	r2, [r3, #12]
 80048f2:	e001      	b.n	80048f8 <UART_SetConfig+0x240>
      }
      else
      {
        ret = HAL_ERROR;
 80048f4:	2301      	movs	r3, #1
 80048f6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2200      	movs	r2, #0
 80048fc:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2200      	movs	r2, #0
 8004902:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004904:	7fbb      	ldrb	r3, [r7, #30]
}
 8004906:	4618      	mov	r0, r3
 8004908:	3720      	adds	r7, #32
 800490a:	46bd      	mov	sp, r7
 800490c:	bd80      	pop	{r7, pc}
 800490e:	bf00      	nop
 8004910:	efff69f3 	.word	0xefff69f3
 8004914:	40013800 	.word	0x40013800
 8004918:	40021000 	.word	0x40021000
 800491c:	40004400 	.word	0x40004400
 8004920:	40004800 	.word	0x40004800
 8004924:	007a1200 	.word	0x007a1200

08004928 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004928:	b480      	push	{r7}
 800492a:	b083      	sub	sp, #12
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004934:	f003 0301 	and.w	r3, r3, #1
 8004938:	2b00      	cmp	r3, #0
 800493a:	d00a      	beq.n	8004952 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	430a      	orrs	r2, r1
 8004950:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004956:	f003 0302 	and.w	r3, r3, #2
 800495a:	2b00      	cmp	r3, #0
 800495c:	d00a      	beq.n	8004974 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	685b      	ldr	r3, [r3, #4]
 8004964:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	430a      	orrs	r2, r1
 8004972:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004978:	f003 0304 	and.w	r3, r3, #4
 800497c:	2b00      	cmp	r3, #0
 800497e:	d00a      	beq.n	8004996 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	430a      	orrs	r2, r1
 8004994:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800499a:	f003 0308 	and.w	r3, r3, #8
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d00a      	beq.n	80049b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	430a      	orrs	r2, r1
 80049b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049bc:	f003 0310 	and.w	r3, r3, #16
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d00a      	beq.n	80049da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	689b      	ldr	r3, [r3, #8]
 80049ca:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	430a      	orrs	r2, r1
 80049d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049de:	f003 0320 	and.w	r3, r3, #32
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d00a      	beq.n	80049fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	689b      	ldr	r3, [r3, #8]
 80049ec:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	430a      	orrs	r2, r1
 80049fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d01a      	beq.n	8004a3e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	685b      	ldr	r3, [r3, #4]
 8004a0e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	430a      	orrs	r2, r1
 8004a1c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a22:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a26:	d10a      	bne.n	8004a3e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	430a      	orrs	r2, r1
 8004a3c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d00a      	beq.n	8004a60 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	685b      	ldr	r3, [r3, #4]
 8004a50:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	430a      	orrs	r2, r1
 8004a5e:	605a      	str	r2, [r3, #4]
  }
}
 8004a60:	bf00      	nop
 8004a62:	370c      	adds	r7, #12
 8004a64:	46bd      	mov	sp, r7
 8004a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6a:	4770      	bx	lr

08004a6c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b086      	sub	sp, #24
 8004a70:	af02      	add	r7, sp, #8
 8004a72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2200      	movs	r2, #0
 8004a78:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004a7c:	f7fc fa3c 	bl	8000ef8 <HAL_GetTick>
 8004a80:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f003 0308 	and.w	r3, r3, #8
 8004a8c:	2b08      	cmp	r3, #8
 8004a8e:	d10e      	bne.n	8004aae <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a90:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004a94:	9300      	str	r3, [sp, #0]
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	2200      	movs	r2, #0
 8004a9a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004a9e:	6878      	ldr	r0, [r7, #4]
 8004aa0:	f000 f82d 	bl	8004afe <UART_WaitOnFlagUntilTimeout>
 8004aa4:	4603      	mov	r3, r0
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d001      	beq.n	8004aae <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004aaa:	2303      	movs	r3, #3
 8004aac:	e023      	b.n	8004af6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f003 0304 	and.w	r3, r3, #4
 8004ab8:	2b04      	cmp	r3, #4
 8004aba:	d10e      	bne.n	8004ada <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004abc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004ac0:	9300      	str	r3, [sp, #0]
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004aca:	6878      	ldr	r0, [r7, #4]
 8004acc:	f000 f817 	bl	8004afe <UART_WaitOnFlagUntilTimeout>
 8004ad0:	4603      	mov	r3, r0
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d001      	beq.n	8004ada <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ad6:	2303      	movs	r3, #3
 8004ad8:	e00d      	b.n	8004af6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2220      	movs	r2, #32
 8004ade:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2220      	movs	r2, #32
 8004ae4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2200      	movs	r2, #0
 8004aea:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2200      	movs	r2, #0
 8004af0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004af4:	2300      	movs	r3, #0
}
 8004af6:	4618      	mov	r0, r3
 8004af8:	3710      	adds	r7, #16
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bd80      	pop	{r7, pc}

08004afe <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004afe:	b580      	push	{r7, lr}
 8004b00:	b09c      	sub	sp, #112	; 0x70
 8004b02:	af00      	add	r7, sp, #0
 8004b04:	60f8      	str	r0, [r7, #12]
 8004b06:	60b9      	str	r1, [r7, #8]
 8004b08:	603b      	str	r3, [r7, #0]
 8004b0a:	4613      	mov	r3, r2
 8004b0c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b0e:	e0a5      	b.n	8004c5c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b10:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004b12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b16:	f000 80a1 	beq.w	8004c5c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b1a:	f7fc f9ed 	bl	8000ef8 <HAL_GetTick>
 8004b1e:	4602      	mov	r2, r0
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	1ad3      	subs	r3, r2, r3
 8004b24:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004b26:	429a      	cmp	r2, r3
 8004b28:	d302      	bcc.n	8004b30 <UART_WaitOnFlagUntilTimeout+0x32>
 8004b2a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d13e      	bne.n	8004bae <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b38:	e853 3f00 	ldrex	r3, [r3]
 8004b3c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004b3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b40:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004b44:	667b      	str	r3, [r7, #100]	; 0x64
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	461a      	mov	r2, r3
 8004b4c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004b4e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004b50:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b52:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004b54:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004b56:	e841 2300 	strex	r3, r2, [r1]
 8004b5a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004b5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d1e6      	bne.n	8004b30 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	3308      	adds	r3, #8
 8004b68:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b6c:	e853 3f00 	ldrex	r3, [r3]
 8004b70:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004b72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b74:	f023 0301 	bic.w	r3, r3, #1
 8004b78:	663b      	str	r3, [r7, #96]	; 0x60
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	3308      	adds	r3, #8
 8004b80:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004b82:	64ba      	str	r2, [r7, #72]	; 0x48
 8004b84:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b86:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004b88:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004b8a:	e841 2300 	strex	r3, r2, [r1]
 8004b8e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004b90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d1e5      	bne.n	8004b62 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	2220      	movs	r2, #32
 8004b9a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	2220      	movs	r2, #32
 8004ba0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004baa:	2303      	movs	r3, #3
 8004bac:	e067      	b.n	8004c7e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f003 0304 	and.w	r3, r3, #4
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d04f      	beq.n	8004c5c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	69db      	ldr	r3, [r3, #28]
 8004bc2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004bc6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004bca:	d147      	bne.n	8004c5c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004bd4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bde:	e853 3f00 	ldrex	r3, [r3]
 8004be2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004be6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004bea:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	461a      	mov	r2, r3
 8004bf2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bf4:	637b      	str	r3, [r7, #52]	; 0x34
 8004bf6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bf8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004bfa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004bfc:	e841 2300 	strex	r3, r2, [r1]
 8004c00:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004c02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d1e6      	bne.n	8004bd6 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	3308      	adds	r3, #8
 8004c0e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c10:	697b      	ldr	r3, [r7, #20]
 8004c12:	e853 3f00 	ldrex	r3, [r3]
 8004c16:	613b      	str	r3, [r7, #16]
   return(result);
 8004c18:	693b      	ldr	r3, [r7, #16]
 8004c1a:	f023 0301 	bic.w	r3, r3, #1
 8004c1e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	3308      	adds	r3, #8
 8004c26:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004c28:	623a      	str	r2, [r7, #32]
 8004c2a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c2c:	69f9      	ldr	r1, [r7, #28]
 8004c2e:	6a3a      	ldr	r2, [r7, #32]
 8004c30:	e841 2300 	strex	r3, r2, [r1]
 8004c34:	61bb      	str	r3, [r7, #24]
   return(result);
 8004c36:	69bb      	ldr	r3, [r7, #24]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d1e5      	bne.n	8004c08 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	2220      	movs	r2, #32
 8004c40:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	2220      	movs	r2, #32
 8004c46:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	2220      	movs	r2, #32
 8004c4c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	2200      	movs	r2, #0
 8004c54:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004c58:	2303      	movs	r3, #3
 8004c5a:	e010      	b.n	8004c7e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	69da      	ldr	r2, [r3, #28]
 8004c62:	68bb      	ldr	r3, [r7, #8]
 8004c64:	4013      	ands	r3, r2
 8004c66:	68ba      	ldr	r2, [r7, #8]
 8004c68:	429a      	cmp	r2, r3
 8004c6a:	bf0c      	ite	eq
 8004c6c:	2301      	moveq	r3, #1
 8004c6e:	2300      	movne	r3, #0
 8004c70:	b2db      	uxtb	r3, r3
 8004c72:	461a      	mov	r2, r3
 8004c74:	79fb      	ldrb	r3, [r7, #7]
 8004c76:	429a      	cmp	r2, r3
 8004c78:	f43f af4a 	beq.w	8004b10 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004c7c:	2300      	movs	r3, #0
}
 8004c7e:	4618      	mov	r0, r3
 8004c80:	3770      	adds	r7, #112	; 0x70
 8004c82:	46bd      	mov	sp, r7
 8004c84:	bd80      	pop	{r7, pc}
	...

08004c88 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b096      	sub	sp, #88	; 0x58
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	60f8      	str	r0, [r7, #12]
 8004c90:	60b9      	str	r1, [r7, #8]
 8004c92:	4613      	mov	r3, r2
 8004c94:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	68ba      	ldr	r2, [r7, #8]
 8004c9a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	88fa      	ldrh	r2, [r7, #6]
 8004ca0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	2222      	movs	r2, #34	; 0x22
 8004cb0:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d02b      	beq.n	8004d12 <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cbe:	4a40      	ldr	r2, [pc, #256]	; (8004dc0 <UART_Start_Receive_DMA+0x138>)
 8004cc0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cc6:	4a3f      	ldr	r2, [pc, #252]	; (8004dc4 <UART_Start_Receive_DMA+0x13c>)
 8004cc8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cce:	4a3e      	ldr	r2, [pc, #248]	; (8004dc8 <UART_Start_Receive_DMA+0x140>)
 8004cd0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	3324      	adds	r3, #36	; 0x24
 8004ce4:	4619      	mov	r1, r3
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cea:	461a      	mov	r2, r3
 8004cec:	88fb      	ldrh	r3, [r7, #6]
 8004cee:	f7fc fa89 	bl	8001204 <HAL_DMA_Start_IT>
 8004cf2:	4603      	mov	r3, r0
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d00c      	beq.n	8004d12 <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	2210      	movs	r2, #16
 8004cfc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	2200      	movs	r2, #0
 8004d04:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	2220      	movs	r2, #32
 8004d0c:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_ERROR;
 8004d0e:	2301      	movs	r3, #1
 8004d10:	e051      	b.n	8004db6 <UART_Start_Receive_DMA+0x12e>
    }
  }
  __HAL_UNLOCK(huart);
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	2200      	movs	r2, #0
 8004d16:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d22:	e853 3f00 	ldrex	r3, [r3]
 8004d26:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004d28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d2e:	657b      	str	r3, [r7, #84]	; 0x54
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	461a      	mov	r2, r3
 8004d36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d38:	64bb      	str	r3, [r7, #72]	; 0x48
 8004d3a:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d3c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004d3e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004d40:	e841 2300 	strex	r3, r2, [r1]
 8004d44:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004d46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d1e6      	bne.n	8004d1a <UART_Start_Receive_DMA+0x92>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	3308      	adds	r3, #8
 8004d52:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d56:	e853 3f00 	ldrex	r3, [r3]
 8004d5a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d5e:	f043 0301 	orr.w	r3, r3, #1
 8004d62:	653b      	str	r3, [r7, #80]	; 0x50
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	3308      	adds	r3, #8
 8004d6a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004d6c:	637a      	str	r2, [r7, #52]	; 0x34
 8004d6e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d70:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004d72:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004d74:	e841 2300 	strex	r3, r2, [r1]
 8004d78:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004d7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d1e5      	bne.n	8004d4c <UART_Start_Receive_DMA+0xc4>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	3308      	adds	r3, #8
 8004d86:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d88:	697b      	ldr	r3, [r7, #20]
 8004d8a:	e853 3f00 	ldrex	r3, [r3]
 8004d8e:	613b      	str	r3, [r7, #16]
   return(result);
 8004d90:	693b      	ldr	r3, [r7, #16]
 8004d92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d96:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	3308      	adds	r3, #8
 8004d9e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004da0:	623a      	str	r2, [r7, #32]
 8004da2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004da4:	69f9      	ldr	r1, [r7, #28]
 8004da6:	6a3a      	ldr	r2, [r7, #32]
 8004da8:	e841 2300 	strex	r3, r2, [r1]
 8004dac:	61bb      	str	r3, [r7, #24]
   return(result);
 8004dae:	69bb      	ldr	r3, [r7, #24]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d1e5      	bne.n	8004d80 <UART_Start_Receive_DMA+0xf8>

  return HAL_OK;
 8004db4:	2300      	movs	r3, #0
}
 8004db6:	4618      	mov	r0, r3
 8004db8:	3758      	adds	r7, #88	; 0x58
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bd80      	pop	{r7, pc}
 8004dbe:	bf00      	nop
 8004dc0:	08004edf 	.word	0x08004edf
 8004dc4:	08004ffd 	.word	0x08004ffd
 8004dc8:	08005035 	.word	0x08005035

08004dcc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004dcc:	b480      	push	{r7}
 8004dce:	b089      	sub	sp, #36	; 0x24
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	e853 3f00 	ldrex	r3, [r3]
 8004de0:	60bb      	str	r3, [r7, #8]
   return(result);
 8004de2:	68bb      	ldr	r3, [r7, #8]
 8004de4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004de8:	61fb      	str	r3, [r7, #28]
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	461a      	mov	r2, r3
 8004df0:	69fb      	ldr	r3, [r7, #28]
 8004df2:	61bb      	str	r3, [r7, #24]
 8004df4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004df6:	6979      	ldr	r1, [r7, #20]
 8004df8:	69ba      	ldr	r2, [r7, #24]
 8004dfa:	e841 2300 	strex	r3, r2, [r1]
 8004dfe:	613b      	str	r3, [r7, #16]
   return(result);
 8004e00:	693b      	ldr	r3, [r7, #16]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d1e6      	bne.n	8004dd4 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2220      	movs	r2, #32
 8004e0a:	679a      	str	r2, [r3, #120]	; 0x78
}
 8004e0c:	bf00      	nop
 8004e0e:	3724      	adds	r7, #36	; 0x24
 8004e10:	46bd      	mov	sp, r7
 8004e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e16:	4770      	bx	lr

08004e18 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004e18:	b480      	push	{r7}
 8004e1a:	b095      	sub	sp, #84	; 0x54
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e28:	e853 3f00 	ldrex	r3, [r3]
 8004e2c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e30:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004e34:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	461a      	mov	r2, r3
 8004e3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e3e:	643b      	str	r3, [r7, #64]	; 0x40
 8004e40:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e42:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004e44:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004e46:	e841 2300 	strex	r3, r2, [r1]
 8004e4a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004e4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d1e6      	bne.n	8004e20 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	3308      	adds	r3, #8
 8004e58:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e5a:	6a3b      	ldr	r3, [r7, #32]
 8004e5c:	e853 3f00 	ldrex	r3, [r3]
 8004e60:	61fb      	str	r3, [r7, #28]
   return(result);
 8004e62:	69fb      	ldr	r3, [r7, #28]
 8004e64:	f023 0301 	bic.w	r3, r3, #1
 8004e68:	64bb      	str	r3, [r7, #72]	; 0x48
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	3308      	adds	r3, #8
 8004e70:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004e72:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004e74:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e76:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004e78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e7a:	e841 2300 	strex	r3, r2, [r1]
 8004e7e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d1e5      	bne.n	8004e52 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e8a:	2b01      	cmp	r3, #1
 8004e8c:	d118      	bne.n	8004ec0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	e853 3f00 	ldrex	r3, [r3]
 8004e9a:	60bb      	str	r3, [r7, #8]
   return(result);
 8004e9c:	68bb      	ldr	r3, [r7, #8]
 8004e9e:	f023 0310 	bic.w	r3, r3, #16
 8004ea2:	647b      	str	r3, [r7, #68]	; 0x44
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	461a      	mov	r2, r3
 8004eaa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004eac:	61bb      	str	r3, [r7, #24]
 8004eae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eb0:	6979      	ldr	r1, [r7, #20]
 8004eb2:	69ba      	ldr	r2, [r7, #24]
 8004eb4:	e841 2300 	strex	r3, r2, [r1]
 8004eb8:	613b      	str	r3, [r7, #16]
   return(result);
 8004eba:	693b      	ldr	r3, [r7, #16]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d1e6      	bne.n	8004e8e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2220      	movs	r2, #32
 8004ec4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2200      	movs	r2, #0
 8004eca:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2200      	movs	r2, #0
 8004ed0:	665a      	str	r2, [r3, #100]	; 0x64
}
 8004ed2:	bf00      	nop
 8004ed4:	3754      	adds	r7, #84	; 0x54
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004edc:	4770      	bx	lr

08004ede <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004ede:	b580      	push	{r7, lr}
 8004ee0:	b09c      	sub	sp, #112	; 0x70
 8004ee2:	af00      	add	r7, sp, #0
 8004ee4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eea:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	699b      	ldr	r3, [r3, #24]
 8004ef0:	2b20      	cmp	r3, #32
 8004ef2:	d070      	beq.n	8004fd6 <UART_DMAReceiveCplt+0xf8>
  {
    huart->RxXferCount = 0U;
 8004ef4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004efc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f04:	e853 3f00 	ldrex	r3, [r3]
 8004f08:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004f0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f10:	66bb      	str	r3, [r7, #104]	; 0x68
 8004f12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	461a      	mov	r2, r3
 8004f18:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004f1a:	65bb      	str	r3, [r7, #88]	; 0x58
 8004f1c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f1e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004f20:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004f22:	e841 2300 	strex	r3, r2, [r1]
 8004f26:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004f28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d1e6      	bne.n	8004efc <UART_DMAReceiveCplt+0x1e>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	3308      	adds	r3, #8
 8004f34:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f38:	e853 3f00 	ldrex	r3, [r3]
 8004f3c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004f3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f40:	f023 0301 	bic.w	r3, r3, #1
 8004f44:	667b      	str	r3, [r7, #100]	; 0x64
 8004f46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	3308      	adds	r3, #8
 8004f4c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004f4e:	647a      	str	r2, [r7, #68]	; 0x44
 8004f50:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f52:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004f54:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004f56:	e841 2300 	strex	r3, r2, [r1]
 8004f5a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004f5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d1e5      	bne.n	8004f2e <UART_DMAReceiveCplt+0x50>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	3308      	adds	r3, #8
 8004f68:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f6c:	e853 3f00 	ldrex	r3, [r3]
 8004f70:	623b      	str	r3, [r7, #32]
   return(result);
 8004f72:	6a3b      	ldr	r3, [r7, #32]
 8004f74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f78:	663b      	str	r3, [r7, #96]	; 0x60
 8004f7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	3308      	adds	r3, #8
 8004f80:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004f82:	633a      	str	r2, [r7, #48]	; 0x30
 8004f84:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f86:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004f88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f8a:	e841 2300 	strex	r3, r2, [r1]
 8004f8e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004f90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d1e5      	bne.n	8004f62 <UART_DMAReceiveCplt+0x84>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004f96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f98:	2220      	movs	r2, #32
 8004f9a:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fa0:	2b01      	cmp	r3, #1
 8004fa2:	d118      	bne.n	8004fd6 <UART_DMAReceiveCplt+0xf8>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fa4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004faa:	693b      	ldr	r3, [r7, #16]
 8004fac:	e853 3f00 	ldrex	r3, [r3]
 8004fb0:	60fb      	str	r3, [r7, #12]
   return(result);
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	f023 0310 	bic.w	r3, r3, #16
 8004fb8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004fba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	461a      	mov	r2, r3
 8004fc0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004fc2:	61fb      	str	r3, [r7, #28]
 8004fc4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fc6:	69b9      	ldr	r1, [r7, #24]
 8004fc8:	69fa      	ldr	r2, [r7, #28]
 8004fca:	e841 2300 	strex	r3, r2, [r1]
 8004fce:	617b      	str	r3, [r7, #20]
   return(result);
 8004fd0:	697b      	ldr	r3, [r7, #20]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d1e6      	bne.n	8004fa4 <UART_DMAReceiveCplt+0xc6>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fda:	2b01      	cmp	r3, #1
 8004fdc:	d107      	bne.n	8004fee <UART_DMAReceiveCplt+0x110>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004fde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fe0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004fe4:	4619      	mov	r1, r3
 8004fe6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004fe8:	f7ff fb5a 	bl	80046a0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004fec:	e002      	b.n	8004ff4 <UART_DMAReceiveCplt+0x116>
    HAL_UART_RxCpltCallback(huart);
 8004fee:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004ff0:	f7fb f96c 	bl	80002cc <HAL_UART_RxCpltCallback>
}
 8004ff4:	bf00      	nop
 8004ff6:	3770      	adds	r7, #112	; 0x70
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	bd80      	pop	{r7, pc}

08004ffc <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b084      	sub	sp, #16
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005008:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800500e:	2b01      	cmp	r3, #1
 8005010:	d109      	bne.n	8005026 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005018:	085b      	lsrs	r3, r3, #1
 800501a:	b29b      	uxth	r3, r3
 800501c:	4619      	mov	r1, r3
 800501e:	68f8      	ldr	r0, [r7, #12]
 8005020:	f7ff fb3e 	bl	80046a0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005024:	e002      	b.n	800502c <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 8005026:	68f8      	ldr	r0, [r7, #12]
 8005028:	f7ff fb26 	bl	8004678 <HAL_UART_RxHalfCpltCallback>
}
 800502c:	bf00      	nop
 800502e:	3710      	adds	r7, #16
 8005030:	46bd      	mov	sp, r7
 8005032:	bd80      	pop	{r7, pc}

08005034 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b086      	sub	sp, #24
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005040:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8005042:	697b      	ldr	r3, [r7, #20]
 8005044:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005046:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8005048:	697b      	ldr	r3, [r7, #20]
 800504a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800504c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800504e:	697b      	ldr	r3, [r7, #20]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	689b      	ldr	r3, [r3, #8]
 8005054:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005058:	2b80      	cmp	r3, #128	; 0x80
 800505a:	d109      	bne.n	8005070 <UART_DMAError+0x3c>
 800505c:	693b      	ldr	r3, [r7, #16]
 800505e:	2b21      	cmp	r3, #33	; 0x21
 8005060:	d106      	bne.n	8005070 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8005062:	697b      	ldr	r3, [r7, #20]
 8005064:	2200      	movs	r2, #0
 8005066:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800506a:	6978      	ldr	r0, [r7, #20]
 800506c:	f7ff feae 	bl	8004dcc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005070:	697b      	ldr	r3, [r7, #20]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	689b      	ldr	r3, [r3, #8]
 8005076:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800507a:	2b40      	cmp	r3, #64	; 0x40
 800507c:	d109      	bne.n	8005092 <UART_DMAError+0x5e>
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	2b22      	cmp	r3, #34	; 0x22
 8005082:	d106      	bne.n	8005092 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8005084:	697b      	ldr	r3, [r7, #20]
 8005086:	2200      	movs	r2, #0
 8005088:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800508c:	6978      	ldr	r0, [r7, #20]
 800508e:	f7ff fec3 	bl	8004e18 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005092:	697b      	ldr	r3, [r7, #20]
 8005094:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005098:	f043 0210 	orr.w	r2, r3, #16
 800509c:	697b      	ldr	r3, [r7, #20]
 800509e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80050a2:	6978      	ldr	r0, [r7, #20]
 80050a4:	f7ff faf2 	bl	800468c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80050a8:	bf00      	nop
 80050aa:	3718      	adds	r7, #24
 80050ac:	46bd      	mov	sp, r7
 80050ae:	bd80      	pop	{r7, pc}

080050b0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b084      	sub	sp, #16
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050bc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	2200      	movs	r2, #0
 80050c2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	2200      	movs	r2, #0
 80050ca:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80050ce:	68f8      	ldr	r0, [r7, #12]
 80050d0:	f7ff fadc 	bl	800468c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80050d4:	bf00      	nop
 80050d6:	3710      	adds	r7, #16
 80050d8:	46bd      	mov	sp, r7
 80050da:	bd80      	pop	{r7, pc}

080050dc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b088      	sub	sp, #32
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	e853 3f00 	ldrex	r3, [r3]
 80050f0:	60bb      	str	r3, [r7, #8]
   return(result);
 80050f2:	68bb      	ldr	r3, [r7, #8]
 80050f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050f8:	61fb      	str	r3, [r7, #28]
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	461a      	mov	r2, r3
 8005100:	69fb      	ldr	r3, [r7, #28]
 8005102:	61bb      	str	r3, [r7, #24]
 8005104:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005106:	6979      	ldr	r1, [r7, #20]
 8005108:	69ba      	ldr	r2, [r7, #24]
 800510a:	e841 2300 	strex	r3, r2, [r1]
 800510e:	613b      	str	r3, [r7, #16]
   return(result);
 8005110:	693b      	ldr	r3, [r7, #16]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d1e6      	bne.n	80050e4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2220      	movs	r2, #32
 800511a:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2200      	movs	r2, #0
 8005120:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005122:	6878      	ldr	r0, [r7, #4]
 8005124:	f7ff fa9e 	bl	8004664 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005128:	bf00      	nop
 800512a:	3720      	adds	r7, #32
 800512c:	46bd      	mov	sp, r7
 800512e:	bd80      	pop	{r7, pc}

08005130 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005130:	b480      	push	{r7}
 8005132:	b083      	sub	sp, #12
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005138:	bf00      	nop
 800513a:	370c      	adds	r7, #12
 800513c:	46bd      	mov	sp, r7
 800513e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005142:	4770      	bx	lr

08005144 <__errno>:
 8005144:	4b01      	ldr	r3, [pc, #4]	; (800514c <__errno+0x8>)
 8005146:	6818      	ldr	r0, [r3, #0]
 8005148:	4770      	bx	lr
 800514a:	bf00      	nop
 800514c:	20000010 	.word	0x20000010

08005150 <__libc_init_array>:
 8005150:	b570      	push	{r4, r5, r6, lr}
 8005152:	4e0d      	ldr	r6, [pc, #52]	; (8005188 <__libc_init_array+0x38>)
 8005154:	4c0d      	ldr	r4, [pc, #52]	; (800518c <__libc_init_array+0x3c>)
 8005156:	1ba4      	subs	r4, r4, r6
 8005158:	10a4      	asrs	r4, r4, #2
 800515a:	2500      	movs	r5, #0
 800515c:	42a5      	cmp	r5, r4
 800515e:	d109      	bne.n	8005174 <__libc_init_array+0x24>
 8005160:	4e0b      	ldr	r6, [pc, #44]	; (8005190 <__libc_init_array+0x40>)
 8005162:	4c0c      	ldr	r4, [pc, #48]	; (8005194 <__libc_init_array+0x44>)
 8005164:	f001 f8c8 	bl	80062f8 <_init>
 8005168:	1ba4      	subs	r4, r4, r6
 800516a:	10a4      	asrs	r4, r4, #2
 800516c:	2500      	movs	r5, #0
 800516e:	42a5      	cmp	r5, r4
 8005170:	d105      	bne.n	800517e <__libc_init_array+0x2e>
 8005172:	bd70      	pop	{r4, r5, r6, pc}
 8005174:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005178:	4798      	blx	r3
 800517a:	3501      	adds	r5, #1
 800517c:	e7ee      	b.n	800515c <__libc_init_array+0xc>
 800517e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005182:	4798      	blx	r3
 8005184:	3501      	adds	r5, #1
 8005186:	e7f2      	b.n	800516e <__libc_init_array+0x1e>
 8005188:	080063e8 	.word	0x080063e8
 800518c:	080063e8 	.word	0x080063e8
 8005190:	080063e8 	.word	0x080063e8
 8005194:	080063ec 	.word	0x080063ec

08005198 <memset>:
 8005198:	4402      	add	r2, r0
 800519a:	4603      	mov	r3, r0
 800519c:	4293      	cmp	r3, r2
 800519e:	d100      	bne.n	80051a2 <memset+0xa>
 80051a0:	4770      	bx	lr
 80051a2:	f803 1b01 	strb.w	r1, [r3], #1
 80051a6:	e7f9      	b.n	800519c <memset+0x4>

080051a8 <iprintf>:
 80051a8:	b40f      	push	{r0, r1, r2, r3}
 80051aa:	4b0a      	ldr	r3, [pc, #40]	; (80051d4 <iprintf+0x2c>)
 80051ac:	b513      	push	{r0, r1, r4, lr}
 80051ae:	681c      	ldr	r4, [r3, #0]
 80051b0:	b124      	cbz	r4, 80051bc <iprintf+0x14>
 80051b2:	69a3      	ldr	r3, [r4, #24]
 80051b4:	b913      	cbnz	r3, 80051bc <iprintf+0x14>
 80051b6:	4620      	mov	r0, r4
 80051b8:	f000 f86e 	bl	8005298 <__sinit>
 80051bc:	ab05      	add	r3, sp, #20
 80051be:	9a04      	ldr	r2, [sp, #16]
 80051c0:	68a1      	ldr	r1, [r4, #8]
 80051c2:	9301      	str	r3, [sp, #4]
 80051c4:	4620      	mov	r0, r4
 80051c6:	f000 fac7 	bl	8005758 <_vfiprintf_r>
 80051ca:	b002      	add	sp, #8
 80051cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80051d0:	b004      	add	sp, #16
 80051d2:	4770      	bx	lr
 80051d4:	20000010 	.word	0x20000010

080051d8 <siprintf>:
 80051d8:	b40e      	push	{r1, r2, r3}
 80051da:	b500      	push	{lr}
 80051dc:	b09c      	sub	sp, #112	; 0x70
 80051de:	ab1d      	add	r3, sp, #116	; 0x74
 80051e0:	9002      	str	r0, [sp, #8]
 80051e2:	9006      	str	r0, [sp, #24]
 80051e4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80051e8:	4809      	ldr	r0, [pc, #36]	; (8005210 <siprintf+0x38>)
 80051ea:	9107      	str	r1, [sp, #28]
 80051ec:	9104      	str	r1, [sp, #16]
 80051ee:	4909      	ldr	r1, [pc, #36]	; (8005214 <siprintf+0x3c>)
 80051f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80051f4:	9105      	str	r1, [sp, #20]
 80051f6:	6800      	ldr	r0, [r0, #0]
 80051f8:	9301      	str	r3, [sp, #4]
 80051fa:	a902      	add	r1, sp, #8
 80051fc:	f000 f98a 	bl	8005514 <_svfiprintf_r>
 8005200:	9b02      	ldr	r3, [sp, #8]
 8005202:	2200      	movs	r2, #0
 8005204:	701a      	strb	r2, [r3, #0]
 8005206:	b01c      	add	sp, #112	; 0x70
 8005208:	f85d eb04 	ldr.w	lr, [sp], #4
 800520c:	b003      	add	sp, #12
 800520e:	4770      	bx	lr
 8005210:	20000010 	.word	0x20000010
 8005214:	ffff0208 	.word	0xffff0208

08005218 <std>:
 8005218:	2300      	movs	r3, #0
 800521a:	b510      	push	{r4, lr}
 800521c:	4604      	mov	r4, r0
 800521e:	e9c0 3300 	strd	r3, r3, [r0]
 8005222:	6083      	str	r3, [r0, #8]
 8005224:	8181      	strh	r1, [r0, #12]
 8005226:	6643      	str	r3, [r0, #100]	; 0x64
 8005228:	81c2      	strh	r2, [r0, #14]
 800522a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800522e:	6183      	str	r3, [r0, #24]
 8005230:	4619      	mov	r1, r3
 8005232:	2208      	movs	r2, #8
 8005234:	305c      	adds	r0, #92	; 0x5c
 8005236:	f7ff ffaf 	bl	8005198 <memset>
 800523a:	4b05      	ldr	r3, [pc, #20]	; (8005250 <std+0x38>)
 800523c:	6263      	str	r3, [r4, #36]	; 0x24
 800523e:	4b05      	ldr	r3, [pc, #20]	; (8005254 <std+0x3c>)
 8005240:	62a3      	str	r3, [r4, #40]	; 0x28
 8005242:	4b05      	ldr	r3, [pc, #20]	; (8005258 <std+0x40>)
 8005244:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005246:	4b05      	ldr	r3, [pc, #20]	; (800525c <std+0x44>)
 8005248:	6224      	str	r4, [r4, #32]
 800524a:	6323      	str	r3, [r4, #48]	; 0x30
 800524c:	bd10      	pop	{r4, pc}
 800524e:	bf00      	nop
 8005250:	08005cb5 	.word	0x08005cb5
 8005254:	08005cd7 	.word	0x08005cd7
 8005258:	08005d0f 	.word	0x08005d0f
 800525c:	08005d33 	.word	0x08005d33

08005260 <_cleanup_r>:
 8005260:	4901      	ldr	r1, [pc, #4]	; (8005268 <_cleanup_r+0x8>)
 8005262:	f000 b885 	b.w	8005370 <_fwalk_reent>
 8005266:	bf00      	nop
 8005268:	0800600d 	.word	0x0800600d

0800526c <__sfmoreglue>:
 800526c:	b570      	push	{r4, r5, r6, lr}
 800526e:	1e4a      	subs	r2, r1, #1
 8005270:	2568      	movs	r5, #104	; 0x68
 8005272:	4355      	muls	r5, r2
 8005274:	460e      	mov	r6, r1
 8005276:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800527a:	f000 f897 	bl	80053ac <_malloc_r>
 800527e:	4604      	mov	r4, r0
 8005280:	b140      	cbz	r0, 8005294 <__sfmoreglue+0x28>
 8005282:	2100      	movs	r1, #0
 8005284:	e9c0 1600 	strd	r1, r6, [r0]
 8005288:	300c      	adds	r0, #12
 800528a:	60a0      	str	r0, [r4, #8]
 800528c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005290:	f7ff ff82 	bl	8005198 <memset>
 8005294:	4620      	mov	r0, r4
 8005296:	bd70      	pop	{r4, r5, r6, pc}

08005298 <__sinit>:
 8005298:	6983      	ldr	r3, [r0, #24]
 800529a:	b510      	push	{r4, lr}
 800529c:	4604      	mov	r4, r0
 800529e:	bb33      	cbnz	r3, 80052ee <__sinit+0x56>
 80052a0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80052a4:	6503      	str	r3, [r0, #80]	; 0x50
 80052a6:	4b12      	ldr	r3, [pc, #72]	; (80052f0 <__sinit+0x58>)
 80052a8:	4a12      	ldr	r2, [pc, #72]	; (80052f4 <__sinit+0x5c>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	6282      	str	r2, [r0, #40]	; 0x28
 80052ae:	4298      	cmp	r0, r3
 80052b0:	bf04      	itt	eq
 80052b2:	2301      	moveq	r3, #1
 80052b4:	6183      	streq	r3, [r0, #24]
 80052b6:	f000 f81f 	bl	80052f8 <__sfp>
 80052ba:	6060      	str	r0, [r4, #4]
 80052bc:	4620      	mov	r0, r4
 80052be:	f000 f81b 	bl	80052f8 <__sfp>
 80052c2:	60a0      	str	r0, [r4, #8]
 80052c4:	4620      	mov	r0, r4
 80052c6:	f000 f817 	bl	80052f8 <__sfp>
 80052ca:	2200      	movs	r2, #0
 80052cc:	60e0      	str	r0, [r4, #12]
 80052ce:	2104      	movs	r1, #4
 80052d0:	6860      	ldr	r0, [r4, #4]
 80052d2:	f7ff ffa1 	bl	8005218 <std>
 80052d6:	2201      	movs	r2, #1
 80052d8:	2109      	movs	r1, #9
 80052da:	68a0      	ldr	r0, [r4, #8]
 80052dc:	f7ff ff9c 	bl	8005218 <std>
 80052e0:	2202      	movs	r2, #2
 80052e2:	2112      	movs	r1, #18
 80052e4:	68e0      	ldr	r0, [r4, #12]
 80052e6:	f7ff ff97 	bl	8005218 <std>
 80052ea:	2301      	movs	r3, #1
 80052ec:	61a3      	str	r3, [r4, #24]
 80052ee:	bd10      	pop	{r4, pc}
 80052f0:	08006350 	.word	0x08006350
 80052f4:	08005261 	.word	0x08005261

080052f8 <__sfp>:
 80052f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052fa:	4b1b      	ldr	r3, [pc, #108]	; (8005368 <__sfp+0x70>)
 80052fc:	681e      	ldr	r6, [r3, #0]
 80052fe:	69b3      	ldr	r3, [r6, #24]
 8005300:	4607      	mov	r7, r0
 8005302:	b913      	cbnz	r3, 800530a <__sfp+0x12>
 8005304:	4630      	mov	r0, r6
 8005306:	f7ff ffc7 	bl	8005298 <__sinit>
 800530a:	3648      	adds	r6, #72	; 0x48
 800530c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005310:	3b01      	subs	r3, #1
 8005312:	d503      	bpl.n	800531c <__sfp+0x24>
 8005314:	6833      	ldr	r3, [r6, #0]
 8005316:	b133      	cbz	r3, 8005326 <__sfp+0x2e>
 8005318:	6836      	ldr	r6, [r6, #0]
 800531a:	e7f7      	b.n	800530c <__sfp+0x14>
 800531c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005320:	b16d      	cbz	r5, 800533e <__sfp+0x46>
 8005322:	3468      	adds	r4, #104	; 0x68
 8005324:	e7f4      	b.n	8005310 <__sfp+0x18>
 8005326:	2104      	movs	r1, #4
 8005328:	4638      	mov	r0, r7
 800532a:	f7ff ff9f 	bl	800526c <__sfmoreglue>
 800532e:	6030      	str	r0, [r6, #0]
 8005330:	2800      	cmp	r0, #0
 8005332:	d1f1      	bne.n	8005318 <__sfp+0x20>
 8005334:	230c      	movs	r3, #12
 8005336:	603b      	str	r3, [r7, #0]
 8005338:	4604      	mov	r4, r0
 800533a:	4620      	mov	r0, r4
 800533c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800533e:	4b0b      	ldr	r3, [pc, #44]	; (800536c <__sfp+0x74>)
 8005340:	6665      	str	r5, [r4, #100]	; 0x64
 8005342:	e9c4 5500 	strd	r5, r5, [r4]
 8005346:	60a5      	str	r5, [r4, #8]
 8005348:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800534c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8005350:	2208      	movs	r2, #8
 8005352:	4629      	mov	r1, r5
 8005354:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005358:	f7ff ff1e 	bl	8005198 <memset>
 800535c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005360:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005364:	e7e9      	b.n	800533a <__sfp+0x42>
 8005366:	bf00      	nop
 8005368:	08006350 	.word	0x08006350
 800536c:	ffff0001 	.word	0xffff0001

08005370 <_fwalk_reent>:
 8005370:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005374:	4680      	mov	r8, r0
 8005376:	4689      	mov	r9, r1
 8005378:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800537c:	2600      	movs	r6, #0
 800537e:	b914      	cbnz	r4, 8005386 <_fwalk_reent+0x16>
 8005380:	4630      	mov	r0, r6
 8005382:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005386:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800538a:	3f01      	subs	r7, #1
 800538c:	d501      	bpl.n	8005392 <_fwalk_reent+0x22>
 800538e:	6824      	ldr	r4, [r4, #0]
 8005390:	e7f5      	b.n	800537e <_fwalk_reent+0xe>
 8005392:	89ab      	ldrh	r3, [r5, #12]
 8005394:	2b01      	cmp	r3, #1
 8005396:	d907      	bls.n	80053a8 <_fwalk_reent+0x38>
 8005398:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800539c:	3301      	adds	r3, #1
 800539e:	d003      	beq.n	80053a8 <_fwalk_reent+0x38>
 80053a0:	4629      	mov	r1, r5
 80053a2:	4640      	mov	r0, r8
 80053a4:	47c8      	blx	r9
 80053a6:	4306      	orrs	r6, r0
 80053a8:	3568      	adds	r5, #104	; 0x68
 80053aa:	e7ee      	b.n	800538a <_fwalk_reent+0x1a>

080053ac <_malloc_r>:
 80053ac:	b570      	push	{r4, r5, r6, lr}
 80053ae:	1ccd      	adds	r5, r1, #3
 80053b0:	f025 0503 	bic.w	r5, r5, #3
 80053b4:	3508      	adds	r5, #8
 80053b6:	2d0c      	cmp	r5, #12
 80053b8:	bf38      	it	cc
 80053ba:	250c      	movcc	r5, #12
 80053bc:	2d00      	cmp	r5, #0
 80053be:	4606      	mov	r6, r0
 80053c0:	db01      	blt.n	80053c6 <_malloc_r+0x1a>
 80053c2:	42a9      	cmp	r1, r5
 80053c4:	d903      	bls.n	80053ce <_malloc_r+0x22>
 80053c6:	230c      	movs	r3, #12
 80053c8:	6033      	str	r3, [r6, #0]
 80053ca:	2000      	movs	r0, #0
 80053cc:	bd70      	pop	{r4, r5, r6, pc}
 80053ce:	f000 fee1 	bl	8006194 <__malloc_lock>
 80053d2:	4a21      	ldr	r2, [pc, #132]	; (8005458 <_malloc_r+0xac>)
 80053d4:	6814      	ldr	r4, [r2, #0]
 80053d6:	4621      	mov	r1, r4
 80053d8:	b991      	cbnz	r1, 8005400 <_malloc_r+0x54>
 80053da:	4c20      	ldr	r4, [pc, #128]	; (800545c <_malloc_r+0xb0>)
 80053dc:	6823      	ldr	r3, [r4, #0]
 80053de:	b91b      	cbnz	r3, 80053e8 <_malloc_r+0x3c>
 80053e0:	4630      	mov	r0, r6
 80053e2:	f000 fc57 	bl	8005c94 <_sbrk_r>
 80053e6:	6020      	str	r0, [r4, #0]
 80053e8:	4629      	mov	r1, r5
 80053ea:	4630      	mov	r0, r6
 80053ec:	f000 fc52 	bl	8005c94 <_sbrk_r>
 80053f0:	1c43      	adds	r3, r0, #1
 80053f2:	d124      	bne.n	800543e <_malloc_r+0x92>
 80053f4:	230c      	movs	r3, #12
 80053f6:	6033      	str	r3, [r6, #0]
 80053f8:	4630      	mov	r0, r6
 80053fa:	f000 fecc 	bl	8006196 <__malloc_unlock>
 80053fe:	e7e4      	b.n	80053ca <_malloc_r+0x1e>
 8005400:	680b      	ldr	r3, [r1, #0]
 8005402:	1b5b      	subs	r3, r3, r5
 8005404:	d418      	bmi.n	8005438 <_malloc_r+0x8c>
 8005406:	2b0b      	cmp	r3, #11
 8005408:	d90f      	bls.n	800542a <_malloc_r+0x7e>
 800540a:	600b      	str	r3, [r1, #0]
 800540c:	50cd      	str	r5, [r1, r3]
 800540e:	18cc      	adds	r4, r1, r3
 8005410:	4630      	mov	r0, r6
 8005412:	f000 fec0 	bl	8006196 <__malloc_unlock>
 8005416:	f104 000b 	add.w	r0, r4, #11
 800541a:	1d23      	adds	r3, r4, #4
 800541c:	f020 0007 	bic.w	r0, r0, #7
 8005420:	1ac3      	subs	r3, r0, r3
 8005422:	d0d3      	beq.n	80053cc <_malloc_r+0x20>
 8005424:	425a      	negs	r2, r3
 8005426:	50e2      	str	r2, [r4, r3]
 8005428:	e7d0      	b.n	80053cc <_malloc_r+0x20>
 800542a:	428c      	cmp	r4, r1
 800542c:	684b      	ldr	r3, [r1, #4]
 800542e:	bf16      	itet	ne
 8005430:	6063      	strne	r3, [r4, #4]
 8005432:	6013      	streq	r3, [r2, #0]
 8005434:	460c      	movne	r4, r1
 8005436:	e7eb      	b.n	8005410 <_malloc_r+0x64>
 8005438:	460c      	mov	r4, r1
 800543a:	6849      	ldr	r1, [r1, #4]
 800543c:	e7cc      	b.n	80053d8 <_malloc_r+0x2c>
 800543e:	1cc4      	adds	r4, r0, #3
 8005440:	f024 0403 	bic.w	r4, r4, #3
 8005444:	42a0      	cmp	r0, r4
 8005446:	d005      	beq.n	8005454 <_malloc_r+0xa8>
 8005448:	1a21      	subs	r1, r4, r0
 800544a:	4630      	mov	r0, r6
 800544c:	f000 fc22 	bl	8005c94 <_sbrk_r>
 8005450:	3001      	adds	r0, #1
 8005452:	d0cf      	beq.n	80053f4 <_malloc_r+0x48>
 8005454:	6025      	str	r5, [r4, #0]
 8005456:	e7db      	b.n	8005410 <_malloc_r+0x64>
 8005458:	200000a8 	.word	0x200000a8
 800545c:	200000ac 	.word	0x200000ac

08005460 <__ssputs_r>:
 8005460:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005464:	688e      	ldr	r6, [r1, #8]
 8005466:	429e      	cmp	r6, r3
 8005468:	4682      	mov	sl, r0
 800546a:	460c      	mov	r4, r1
 800546c:	4690      	mov	r8, r2
 800546e:	4699      	mov	r9, r3
 8005470:	d837      	bhi.n	80054e2 <__ssputs_r+0x82>
 8005472:	898a      	ldrh	r2, [r1, #12]
 8005474:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005478:	d031      	beq.n	80054de <__ssputs_r+0x7e>
 800547a:	6825      	ldr	r5, [r4, #0]
 800547c:	6909      	ldr	r1, [r1, #16]
 800547e:	1a6f      	subs	r7, r5, r1
 8005480:	6965      	ldr	r5, [r4, #20]
 8005482:	2302      	movs	r3, #2
 8005484:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005488:	fb95 f5f3 	sdiv	r5, r5, r3
 800548c:	f109 0301 	add.w	r3, r9, #1
 8005490:	443b      	add	r3, r7
 8005492:	429d      	cmp	r5, r3
 8005494:	bf38      	it	cc
 8005496:	461d      	movcc	r5, r3
 8005498:	0553      	lsls	r3, r2, #21
 800549a:	d530      	bpl.n	80054fe <__ssputs_r+0x9e>
 800549c:	4629      	mov	r1, r5
 800549e:	f7ff ff85 	bl	80053ac <_malloc_r>
 80054a2:	4606      	mov	r6, r0
 80054a4:	b950      	cbnz	r0, 80054bc <__ssputs_r+0x5c>
 80054a6:	230c      	movs	r3, #12
 80054a8:	f8ca 3000 	str.w	r3, [sl]
 80054ac:	89a3      	ldrh	r3, [r4, #12]
 80054ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80054b2:	81a3      	strh	r3, [r4, #12]
 80054b4:	f04f 30ff 	mov.w	r0, #4294967295
 80054b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054bc:	463a      	mov	r2, r7
 80054be:	6921      	ldr	r1, [r4, #16]
 80054c0:	f000 fe44 	bl	800614c <memcpy>
 80054c4:	89a3      	ldrh	r3, [r4, #12]
 80054c6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80054ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054ce:	81a3      	strh	r3, [r4, #12]
 80054d0:	6126      	str	r6, [r4, #16]
 80054d2:	6165      	str	r5, [r4, #20]
 80054d4:	443e      	add	r6, r7
 80054d6:	1bed      	subs	r5, r5, r7
 80054d8:	6026      	str	r6, [r4, #0]
 80054da:	60a5      	str	r5, [r4, #8]
 80054dc:	464e      	mov	r6, r9
 80054de:	454e      	cmp	r6, r9
 80054e0:	d900      	bls.n	80054e4 <__ssputs_r+0x84>
 80054e2:	464e      	mov	r6, r9
 80054e4:	4632      	mov	r2, r6
 80054e6:	4641      	mov	r1, r8
 80054e8:	6820      	ldr	r0, [r4, #0]
 80054ea:	f000 fe3a 	bl	8006162 <memmove>
 80054ee:	68a3      	ldr	r3, [r4, #8]
 80054f0:	1b9b      	subs	r3, r3, r6
 80054f2:	60a3      	str	r3, [r4, #8]
 80054f4:	6823      	ldr	r3, [r4, #0]
 80054f6:	441e      	add	r6, r3
 80054f8:	6026      	str	r6, [r4, #0]
 80054fa:	2000      	movs	r0, #0
 80054fc:	e7dc      	b.n	80054b8 <__ssputs_r+0x58>
 80054fe:	462a      	mov	r2, r5
 8005500:	f000 fe98 	bl	8006234 <_realloc_r>
 8005504:	4606      	mov	r6, r0
 8005506:	2800      	cmp	r0, #0
 8005508:	d1e2      	bne.n	80054d0 <__ssputs_r+0x70>
 800550a:	6921      	ldr	r1, [r4, #16]
 800550c:	4650      	mov	r0, sl
 800550e:	f000 fe43 	bl	8006198 <_free_r>
 8005512:	e7c8      	b.n	80054a6 <__ssputs_r+0x46>

08005514 <_svfiprintf_r>:
 8005514:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005518:	461d      	mov	r5, r3
 800551a:	898b      	ldrh	r3, [r1, #12]
 800551c:	061f      	lsls	r7, r3, #24
 800551e:	b09d      	sub	sp, #116	; 0x74
 8005520:	4680      	mov	r8, r0
 8005522:	460c      	mov	r4, r1
 8005524:	4616      	mov	r6, r2
 8005526:	d50f      	bpl.n	8005548 <_svfiprintf_r+0x34>
 8005528:	690b      	ldr	r3, [r1, #16]
 800552a:	b96b      	cbnz	r3, 8005548 <_svfiprintf_r+0x34>
 800552c:	2140      	movs	r1, #64	; 0x40
 800552e:	f7ff ff3d 	bl	80053ac <_malloc_r>
 8005532:	6020      	str	r0, [r4, #0]
 8005534:	6120      	str	r0, [r4, #16]
 8005536:	b928      	cbnz	r0, 8005544 <_svfiprintf_r+0x30>
 8005538:	230c      	movs	r3, #12
 800553a:	f8c8 3000 	str.w	r3, [r8]
 800553e:	f04f 30ff 	mov.w	r0, #4294967295
 8005542:	e0c8      	b.n	80056d6 <_svfiprintf_r+0x1c2>
 8005544:	2340      	movs	r3, #64	; 0x40
 8005546:	6163      	str	r3, [r4, #20]
 8005548:	2300      	movs	r3, #0
 800554a:	9309      	str	r3, [sp, #36]	; 0x24
 800554c:	2320      	movs	r3, #32
 800554e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005552:	2330      	movs	r3, #48	; 0x30
 8005554:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005558:	9503      	str	r5, [sp, #12]
 800555a:	f04f 0b01 	mov.w	fp, #1
 800555e:	4637      	mov	r7, r6
 8005560:	463d      	mov	r5, r7
 8005562:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005566:	b10b      	cbz	r3, 800556c <_svfiprintf_r+0x58>
 8005568:	2b25      	cmp	r3, #37	; 0x25
 800556a:	d13e      	bne.n	80055ea <_svfiprintf_r+0xd6>
 800556c:	ebb7 0a06 	subs.w	sl, r7, r6
 8005570:	d00b      	beq.n	800558a <_svfiprintf_r+0x76>
 8005572:	4653      	mov	r3, sl
 8005574:	4632      	mov	r2, r6
 8005576:	4621      	mov	r1, r4
 8005578:	4640      	mov	r0, r8
 800557a:	f7ff ff71 	bl	8005460 <__ssputs_r>
 800557e:	3001      	adds	r0, #1
 8005580:	f000 80a4 	beq.w	80056cc <_svfiprintf_r+0x1b8>
 8005584:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005586:	4453      	add	r3, sl
 8005588:	9309      	str	r3, [sp, #36]	; 0x24
 800558a:	783b      	ldrb	r3, [r7, #0]
 800558c:	2b00      	cmp	r3, #0
 800558e:	f000 809d 	beq.w	80056cc <_svfiprintf_r+0x1b8>
 8005592:	2300      	movs	r3, #0
 8005594:	f04f 32ff 	mov.w	r2, #4294967295
 8005598:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800559c:	9304      	str	r3, [sp, #16]
 800559e:	9307      	str	r3, [sp, #28]
 80055a0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80055a4:	931a      	str	r3, [sp, #104]	; 0x68
 80055a6:	462f      	mov	r7, r5
 80055a8:	2205      	movs	r2, #5
 80055aa:	f817 1b01 	ldrb.w	r1, [r7], #1
 80055ae:	4850      	ldr	r0, [pc, #320]	; (80056f0 <_svfiprintf_r+0x1dc>)
 80055b0:	f7fa fe0e 	bl	80001d0 <memchr>
 80055b4:	9b04      	ldr	r3, [sp, #16]
 80055b6:	b9d0      	cbnz	r0, 80055ee <_svfiprintf_r+0xda>
 80055b8:	06d9      	lsls	r1, r3, #27
 80055ba:	bf44      	itt	mi
 80055bc:	2220      	movmi	r2, #32
 80055be:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80055c2:	071a      	lsls	r2, r3, #28
 80055c4:	bf44      	itt	mi
 80055c6:	222b      	movmi	r2, #43	; 0x2b
 80055c8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80055cc:	782a      	ldrb	r2, [r5, #0]
 80055ce:	2a2a      	cmp	r2, #42	; 0x2a
 80055d0:	d015      	beq.n	80055fe <_svfiprintf_r+0xea>
 80055d2:	9a07      	ldr	r2, [sp, #28]
 80055d4:	462f      	mov	r7, r5
 80055d6:	2000      	movs	r0, #0
 80055d8:	250a      	movs	r5, #10
 80055da:	4639      	mov	r1, r7
 80055dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80055e0:	3b30      	subs	r3, #48	; 0x30
 80055e2:	2b09      	cmp	r3, #9
 80055e4:	d94d      	bls.n	8005682 <_svfiprintf_r+0x16e>
 80055e6:	b1b8      	cbz	r0, 8005618 <_svfiprintf_r+0x104>
 80055e8:	e00f      	b.n	800560a <_svfiprintf_r+0xf6>
 80055ea:	462f      	mov	r7, r5
 80055ec:	e7b8      	b.n	8005560 <_svfiprintf_r+0x4c>
 80055ee:	4a40      	ldr	r2, [pc, #256]	; (80056f0 <_svfiprintf_r+0x1dc>)
 80055f0:	1a80      	subs	r0, r0, r2
 80055f2:	fa0b f000 	lsl.w	r0, fp, r0
 80055f6:	4318      	orrs	r0, r3
 80055f8:	9004      	str	r0, [sp, #16]
 80055fa:	463d      	mov	r5, r7
 80055fc:	e7d3      	b.n	80055a6 <_svfiprintf_r+0x92>
 80055fe:	9a03      	ldr	r2, [sp, #12]
 8005600:	1d11      	adds	r1, r2, #4
 8005602:	6812      	ldr	r2, [r2, #0]
 8005604:	9103      	str	r1, [sp, #12]
 8005606:	2a00      	cmp	r2, #0
 8005608:	db01      	blt.n	800560e <_svfiprintf_r+0xfa>
 800560a:	9207      	str	r2, [sp, #28]
 800560c:	e004      	b.n	8005618 <_svfiprintf_r+0x104>
 800560e:	4252      	negs	r2, r2
 8005610:	f043 0302 	orr.w	r3, r3, #2
 8005614:	9207      	str	r2, [sp, #28]
 8005616:	9304      	str	r3, [sp, #16]
 8005618:	783b      	ldrb	r3, [r7, #0]
 800561a:	2b2e      	cmp	r3, #46	; 0x2e
 800561c:	d10c      	bne.n	8005638 <_svfiprintf_r+0x124>
 800561e:	787b      	ldrb	r3, [r7, #1]
 8005620:	2b2a      	cmp	r3, #42	; 0x2a
 8005622:	d133      	bne.n	800568c <_svfiprintf_r+0x178>
 8005624:	9b03      	ldr	r3, [sp, #12]
 8005626:	1d1a      	adds	r2, r3, #4
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	9203      	str	r2, [sp, #12]
 800562c:	2b00      	cmp	r3, #0
 800562e:	bfb8      	it	lt
 8005630:	f04f 33ff 	movlt.w	r3, #4294967295
 8005634:	3702      	adds	r7, #2
 8005636:	9305      	str	r3, [sp, #20]
 8005638:	4d2e      	ldr	r5, [pc, #184]	; (80056f4 <_svfiprintf_r+0x1e0>)
 800563a:	7839      	ldrb	r1, [r7, #0]
 800563c:	2203      	movs	r2, #3
 800563e:	4628      	mov	r0, r5
 8005640:	f7fa fdc6 	bl	80001d0 <memchr>
 8005644:	b138      	cbz	r0, 8005656 <_svfiprintf_r+0x142>
 8005646:	2340      	movs	r3, #64	; 0x40
 8005648:	1b40      	subs	r0, r0, r5
 800564a:	fa03 f000 	lsl.w	r0, r3, r0
 800564e:	9b04      	ldr	r3, [sp, #16]
 8005650:	4303      	orrs	r3, r0
 8005652:	3701      	adds	r7, #1
 8005654:	9304      	str	r3, [sp, #16]
 8005656:	7839      	ldrb	r1, [r7, #0]
 8005658:	4827      	ldr	r0, [pc, #156]	; (80056f8 <_svfiprintf_r+0x1e4>)
 800565a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800565e:	2206      	movs	r2, #6
 8005660:	1c7e      	adds	r6, r7, #1
 8005662:	f7fa fdb5 	bl	80001d0 <memchr>
 8005666:	2800      	cmp	r0, #0
 8005668:	d038      	beq.n	80056dc <_svfiprintf_r+0x1c8>
 800566a:	4b24      	ldr	r3, [pc, #144]	; (80056fc <_svfiprintf_r+0x1e8>)
 800566c:	bb13      	cbnz	r3, 80056b4 <_svfiprintf_r+0x1a0>
 800566e:	9b03      	ldr	r3, [sp, #12]
 8005670:	3307      	adds	r3, #7
 8005672:	f023 0307 	bic.w	r3, r3, #7
 8005676:	3308      	adds	r3, #8
 8005678:	9303      	str	r3, [sp, #12]
 800567a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800567c:	444b      	add	r3, r9
 800567e:	9309      	str	r3, [sp, #36]	; 0x24
 8005680:	e76d      	b.n	800555e <_svfiprintf_r+0x4a>
 8005682:	fb05 3202 	mla	r2, r5, r2, r3
 8005686:	2001      	movs	r0, #1
 8005688:	460f      	mov	r7, r1
 800568a:	e7a6      	b.n	80055da <_svfiprintf_r+0xc6>
 800568c:	2300      	movs	r3, #0
 800568e:	3701      	adds	r7, #1
 8005690:	9305      	str	r3, [sp, #20]
 8005692:	4619      	mov	r1, r3
 8005694:	250a      	movs	r5, #10
 8005696:	4638      	mov	r0, r7
 8005698:	f810 2b01 	ldrb.w	r2, [r0], #1
 800569c:	3a30      	subs	r2, #48	; 0x30
 800569e:	2a09      	cmp	r2, #9
 80056a0:	d903      	bls.n	80056aa <_svfiprintf_r+0x196>
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d0c8      	beq.n	8005638 <_svfiprintf_r+0x124>
 80056a6:	9105      	str	r1, [sp, #20]
 80056a8:	e7c6      	b.n	8005638 <_svfiprintf_r+0x124>
 80056aa:	fb05 2101 	mla	r1, r5, r1, r2
 80056ae:	2301      	movs	r3, #1
 80056b0:	4607      	mov	r7, r0
 80056b2:	e7f0      	b.n	8005696 <_svfiprintf_r+0x182>
 80056b4:	ab03      	add	r3, sp, #12
 80056b6:	9300      	str	r3, [sp, #0]
 80056b8:	4622      	mov	r2, r4
 80056ba:	4b11      	ldr	r3, [pc, #68]	; (8005700 <_svfiprintf_r+0x1ec>)
 80056bc:	a904      	add	r1, sp, #16
 80056be:	4640      	mov	r0, r8
 80056c0:	f3af 8000 	nop.w
 80056c4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80056c8:	4681      	mov	r9, r0
 80056ca:	d1d6      	bne.n	800567a <_svfiprintf_r+0x166>
 80056cc:	89a3      	ldrh	r3, [r4, #12]
 80056ce:	065b      	lsls	r3, r3, #25
 80056d0:	f53f af35 	bmi.w	800553e <_svfiprintf_r+0x2a>
 80056d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80056d6:	b01d      	add	sp, #116	; 0x74
 80056d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056dc:	ab03      	add	r3, sp, #12
 80056de:	9300      	str	r3, [sp, #0]
 80056e0:	4622      	mov	r2, r4
 80056e2:	4b07      	ldr	r3, [pc, #28]	; (8005700 <_svfiprintf_r+0x1ec>)
 80056e4:	a904      	add	r1, sp, #16
 80056e6:	4640      	mov	r0, r8
 80056e8:	f000 f9c2 	bl	8005a70 <_printf_i>
 80056ec:	e7ea      	b.n	80056c4 <_svfiprintf_r+0x1b0>
 80056ee:	bf00      	nop
 80056f0:	080063b4 	.word	0x080063b4
 80056f4:	080063ba 	.word	0x080063ba
 80056f8:	080063be 	.word	0x080063be
 80056fc:	00000000 	.word	0x00000000
 8005700:	08005461 	.word	0x08005461

08005704 <__sfputc_r>:
 8005704:	6893      	ldr	r3, [r2, #8]
 8005706:	3b01      	subs	r3, #1
 8005708:	2b00      	cmp	r3, #0
 800570a:	b410      	push	{r4}
 800570c:	6093      	str	r3, [r2, #8]
 800570e:	da08      	bge.n	8005722 <__sfputc_r+0x1e>
 8005710:	6994      	ldr	r4, [r2, #24]
 8005712:	42a3      	cmp	r3, r4
 8005714:	db01      	blt.n	800571a <__sfputc_r+0x16>
 8005716:	290a      	cmp	r1, #10
 8005718:	d103      	bne.n	8005722 <__sfputc_r+0x1e>
 800571a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800571e:	f000 bb0d 	b.w	8005d3c <__swbuf_r>
 8005722:	6813      	ldr	r3, [r2, #0]
 8005724:	1c58      	adds	r0, r3, #1
 8005726:	6010      	str	r0, [r2, #0]
 8005728:	7019      	strb	r1, [r3, #0]
 800572a:	4608      	mov	r0, r1
 800572c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005730:	4770      	bx	lr

08005732 <__sfputs_r>:
 8005732:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005734:	4606      	mov	r6, r0
 8005736:	460f      	mov	r7, r1
 8005738:	4614      	mov	r4, r2
 800573a:	18d5      	adds	r5, r2, r3
 800573c:	42ac      	cmp	r4, r5
 800573e:	d101      	bne.n	8005744 <__sfputs_r+0x12>
 8005740:	2000      	movs	r0, #0
 8005742:	e007      	b.n	8005754 <__sfputs_r+0x22>
 8005744:	463a      	mov	r2, r7
 8005746:	f814 1b01 	ldrb.w	r1, [r4], #1
 800574a:	4630      	mov	r0, r6
 800574c:	f7ff ffda 	bl	8005704 <__sfputc_r>
 8005750:	1c43      	adds	r3, r0, #1
 8005752:	d1f3      	bne.n	800573c <__sfputs_r+0xa>
 8005754:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005758 <_vfiprintf_r>:
 8005758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800575c:	460c      	mov	r4, r1
 800575e:	b09d      	sub	sp, #116	; 0x74
 8005760:	4617      	mov	r7, r2
 8005762:	461d      	mov	r5, r3
 8005764:	4606      	mov	r6, r0
 8005766:	b118      	cbz	r0, 8005770 <_vfiprintf_r+0x18>
 8005768:	6983      	ldr	r3, [r0, #24]
 800576a:	b90b      	cbnz	r3, 8005770 <_vfiprintf_r+0x18>
 800576c:	f7ff fd94 	bl	8005298 <__sinit>
 8005770:	4b7c      	ldr	r3, [pc, #496]	; (8005964 <_vfiprintf_r+0x20c>)
 8005772:	429c      	cmp	r4, r3
 8005774:	d158      	bne.n	8005828 <_vfiprintf_r+0xd0>
 8005776:	6874      	ldr	r4, [r6, #4]
 8005778:	89a3      	ldrh	r3, [r4, #12]
 800577a:	0718      	lsls	r0, r3, #28
 800577c:	d55e      	bpl.n	800583c <_vfiprintf_r+0xe4>
 800577e:	6923      	ldr	r3, [r4, #16]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d05b      	beq.n	800583c <_vfiprintf_r+0xe4>
 8005784:	2300      	movs	r3, #0
 8005786:	9309      	str	r3, [sp, #36]	; 0x24
 8005788:	2320      	movs	r3, #32
 800578a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800578e:	2330      	movs	r3, #48	; 0x30
 8005790:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005794:	9503      	str	r5, [sp, #12]
 8005796:	f04f 0b01 	mov.w	fp, #1
 800579a:	46b8      	mov	r8, r7
 800579c:	4645      	mov	r5, r8
 800579e:	f815 3b01 	ldrb.w	r3, [r5], #1
 80057a2:	b10b      	cbz	r3, 80057a8 <_vfiprintf_r+0x50>
 80057a4:	2b25      	cmp	r3, #37	; 0x25
 80057a6:	d154      	bne.n	8005852 <_vfiprintf_r+0xfa>
 80057a8:	ebb8 0a07 	subs.w	sl, r8, r7
 80057ac:	d00b      	beq.n	80057c6 <_vfiprintf_r+0x6e>
 80057ae:	4653      	mov	r3, sl
 80057b0:	463a      	mov	r2, r7
 80057b2:	4621      	mov	r1, r4
 80057b4:	4630      	mov	r0, r6
 80057b6:	f7ff ffbc 	bl	8005732 <__sfputs_r>
 80057ba:	3001      	adds	r0, #1
 80057bc:	f000 80c2 	beq.w	8005944 <_vfiprintf_r+0x1ec>
 80057c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057c2:	4453      	add	r3, sl
 80057c4:	9309      	str	r3, [sp, #36]	; 0x24
 80057c6:	f898 3000 	ldrb.w	r3, [r8]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	f000 80ba 	beq.w	8005944 <_vfiprintf_r+0x1ec>
 80057d0:	2300      	movs	r3, #0
 80057d2:	f04f 32ff 	mov.w	r2, #4294967295
 80057d6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80057da:	9304      	str	r3, [sp, #16]
 80057dc:	9307      	str	r3, [sp, #28]
 80057de:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80057e2:	931a      	str	r3, [sp, #104]	; 0x68
 80057e4:	46a8      	mov	r8, r5
 80057e6:	2205      	movs	r2, #5
 80057e8:	f818 1b01 	ldrb.w	r1, [r8], #1
 80057ec:	485e      	ldr	r0, [pc, #376]	; (8005968 <_vfiprintf_r+0x210>)
 80057ee:	f7fa fcef 	bl	80001d0 <memchr>
 80057f2:	9b04      	ldr	r3, [sp, #16]
 80057f4:	bb78      	cbnz	r0, 8005856 <_vfiprintf_r+0xfe>
 80057f6:	06d9      	lsls	r1, r3, #27
 80057f8:	bf44      	itt	mi
 80057fa:	2220      	movmi	r2, #32
 80057fc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005800:	071a      	lsls	r2, r3, #28
 8005802:	bf44      	itt	mi
 8005804:	222b      	movmi	r2, #43	; 0x2b
 8005806:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800580a:	782a      	ldrb	r2, [r5, #0]
 800580c:	2a2a      	cmp	r2, #42	; 0x2a
 800580e:	d02a      	beq.n	8005866 <_vfiprintf_r+0x10e>
 8005810:	9a07      	ldr	r2, [sp, #28]
 8005812:	46a8      	mov	r8, r5
 8005814:	2000      	movs	r0, #0
 8005816:	250a      	movs	r5, #10
 8005818:	4641      	mov	r1, r8
 800581a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800581e:	3b30      	subs	r3, #48	; 0x30
 8005820:	2b09      	cmp	r3, #9
 8005822:	d969      	bls.n	80058f8 <_vfiprintf_r+0x1a0>
 8005824:	b360      	cbz	r0, 8005880 <_vfiprintf_r+0x128>
 8005826:	e024      	b.n	8005872 <_vfiprintf_r+0x11a>
 8005828:	4b50      	ldr	r3, [pc, #320]	; (800596c <_vfiprintf_r+0x214>)
 800582a:	429c      	cmp	r4, r3
 800582c:	d101      	bne.n	8005832 <_vfiprintf_r+0xda>
 800582e:	68b4      	ldr	r4, [r6, #8]
 8005830:	e7a2      	b.n	8005778 <_vfiprintf_r+0x20>
 8005832:	4b4f      	ldr	r3, [pc, #316]	; (8005970 <_vfiprintf_r+0x218>)
 8005834:	429c      	cmp	r4, r3
 8005836:	bf08      	it	eq
 8005838:	68f4      	ldreq	r4, [r6, #12]
 800583a:	e79d      	b.n	8005778 <_vfiprintf_r+0x20>
 800583c:	4621      	mov	r1, r4
 800583e:	4630      	mov	r0, r6
 8005840:	f000 fae0 	bl	8005e04 <__swsetup_r>
 8005844:	2800      	cmp	r0, #0
 8005846:	d09d      	beq.n	8005784 <_vfiprintf_r+0x2c>
 8005848:	f04f 30ff 	mov.w	r0, #4294967295
 800584c:	b01d      	add	sp, #116	; 0x74
 800584e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005852:	46a8      	mov	r8, r5
 8005854:	e7a2      	b.n	800579c <_vfiprintf_r+0x44>
 8005856:	4a44      	ldr	r2, [pc, #272]	; (8005968 <_vfiprintf_r+0x210>)
 8005858:	1a80      	subs	r0, r0, r2
 800585a:	fa0b f000 	lsl.w	r0, fp, r0
 800585e:	4318      	orrs	r0, r3
 8005860:	9004      	str	r0, [sp, #16]
 8005862:	4645      	mov	r5, r8
 8005864:	e7be      	b.n	80057e4 <_vfiprintf_r+0x8c>
 8005866:	9a03      	ldr	r2, [sp, #12]
 8005868:	1d11      	adds	r1, r2, #4
 800586a:	6812      	ldr	r2, [r2, #0]
 800586c:	9103      	str	r1, [sp, #12]
 800586e:	2a00      	cmp	r2, #0
 8005870:	db01      	blt.n	8005876 <_vfiprintf_r+0x11e>
 8005872:	9207      	str	r2, [sp, #28]
 8005874:	e004      	b.n	8005880 <_vfiprintf_r+0x128>
 8005876:	4252      	negs	r2, r2
 8005878:	f043 0302 	orr.w	r3, r3, #2
 800587c:	9207      	str	r2, [sp, #28]
 800587e:	9304      	str	r3, [sp, #16]
 8005880:	f898 3000 	ldrb.w	r3, [r8]
 8005884:	2b2e      	cmp	r3, #46	; 0x2e
 8005886:	d10e      	bne.n	80058a6 <_vfiprintf_r+0x14e>
 8005888:	f898 3001 	ldrb.w	r3, [r8, #1]
 800588c:	2b2a      	cmp	r3, #42	; 0x2a
 800588e:	d138      	bne.n	8005902 <_vfiprintf_r+0x1aa>
 8005890:	9b03      	ldr	r3, [sp, #12]
 8005892:	1d1a      	adds	r2, r3, #4
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	9203      	str	r2, [sp, #12]
 8005898:	2b00      	cmp	r3, #0
 800589a:	bfb8      	it	lt
 800589c:	f04f 33ff 	movlt.w	r3, #4294967295
 80058a0:	f108 0802 	add.w	r8, r8, #2
 80058a4:	9305      	str	r3, [sp, #20]
 80058a6:	4d33      	ldr	r5, [pc, #204]	; (8005974 <_vfiprintf_r+0x21c>)
 80058a8:	f898 1000 	ldrb.w	r1, [r8]
 80058ac:	2203      	movs	r2, #3
 80058ae:	4628      	mov	r0, r5
 80058b0:	f7fa fc8e 	bl	80001d0 <memchr>
 80058b4:	b140      	cbz	r0, 80058c8 <_vfiprintf_r+0x170>
 80058b6:	2340      	movs	r3, #64	; 0x40
 80058b8:	1b40      	subs	r0, r0, r5
 80058ba:	fa03 f000 	lsl.w	r0, r3, r0
 80058be:	9b04      	ldr	r3, [sp, #16]
 80058c0:	4303      	orrs	r3, r0
 80058c2:	f108 0801 	add.w	r8, r8, #1
 80058c6:	9304      	str	r3, [sp, #16]
 80058c8:	f898 1000 	ldrb.w	r1, [r8]
 80058cc:	482a      	ldr	r0, [pc, #168]	; (8005978 <_vfiprintf_r+0x220>)
 80058ce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80058d2:	2206      	movs	r2, #6
 80058d4:	f108 0701 	add.w	r7, r8, #1
 80058d8:	f7fa fc7a 	bl	80001d0 <memchr>
 80058dc:	2800      	cmp	r0, #0
 80058de:	d037      	beq.n	8005950 <_vfiprintf_r+0x1f8>
 80058e0:	4b26      	ldr	r3, [pc, #152]	; (800597c <_vfiprintf_r+0x224>)
 80058e2:	bb1b      	cbnz	r3, 800592c <_vfiprintf_r+0x1d4>
 80058e4:	9b03      	ldr	r3, [sp, #12]
 80058e6:	3307      	adds	r3, #7
 80058e8:	f023 0307 	bic.w	r3, r3, #7
 80058ec:	3308      	adds	r3, #8
 80058ee:	9303      	str	r3, [sp, #12]
 80058f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80058f2:	444b      	add	r3, r9
 80058f4:	9309      	str	r3, [sp, #36]	; 0x24
 80058f6:	e750      	b.n	800579a <_vfiprintf_r+0x42>
 80058f8:	fb05 3202 	mla	r2, r5, r2, r3
 80058fc:	2001      	movs	r0, #1
 80058fe:	4688      	mov	r8, r1
 8005900:	e78a      	b.n	8005818 <_vfiprintf_r+0xc0>
 8005902:	2300      	movs	r3, #0
 8005904:	f108 0801 	add.w	r8, r8, #1
 8005908:	9305      	str	r3, [sp, #20]
 800590a:	4619      	mov	r1, r3
 800590c:	250a      	movs	r5, #10
 800590e:	4640      	mov	r0, r8
 8005910:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005914:	3a30      	subs	r2, #48	; 0x30
 8005916:	2a09      	cmp	r2, #9
 8005918:	d903      	bls.n	8005922 <_vfiprintf_r+0x1ca>
 800591a:	2b00      	cmp	r3, #0
 800591c:	d0c3      	beq.n	80058a6 <_vfiprintf_r+0x14e>
 800591e:	9105      	str	r1, [sp, #20]
 8005920:	e7c1      	b.n	80058a6 <_vfiprintf_r+0x14e>
 8005922:	fb05 2101 	mla	r1, r5, r1, r2
 8005926:	2301      	movs	r3, #1
 8005928:	4680      	mov	r8, r0
 800592a:	e7f0      	b.n	800590e <_vfiprintf_r+0x1b6>
 800592c:	ab03      	add	r3, sp, #12
 800592e:	9300      	str	r3, [sp, #0]
 8005930:	4622      	mov	r2, r4
 8005932:	4b13      	ldr	r3, [pc, #76]	; (8005980 <_vfiprintf_r+0x228>)
 8005934:	a904      	add	r1, sp, #16
 8005936:	4630      	mov	r0, r6
 8005938:	f3af 8000 	nop.w
 800593c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005940:	4681      	mov	r9, r0
 8005942:	d1d5      	bne.n	80058f0 <_vfiprintf_r+0x198>
 8005944:	89a3      	ldrh	r3, [r4, #12]
 8005946:	065b      	lsls	r3, r3, #25
 8005948:	f53f af7e 	bmi.w	8005848 <_vfiprintf_r+0xf0>
 800594c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800594e:	e77d      	b.n	800584c <_vfiprintf_r+0xf4>
 8005950:	ab03      	add	r3, sp, #12
 8005952:	9300      	str	r3, [sp, #0]
 8005954:	4622      	mov	r2, r4
 8005956:	4b0a      	ldr	r3, [pc, #40]	; (8005980 <_vfiprintf_r+0x228>)
 8005958:	a904      	add	r1, sp, #16
 800595a:	4630      	mov	r0, r6
 800595c:	f000 f888 	bl	8005a70 <_printf_i>
 8005960:	e7ec      	b.n	800593c <_vfiprintf_r+0x1e4>
 8005962:	bf00      	nop
 8005964:	08006374 	.word	0x08006374
 8005968:	080063b4 	.word	0x080063b4
 800596c:	08006394 	.word	0x08006394
 8005970:	08006354 	.word	0x08006354
 8005974:	080063ba 	.word	0x080063ba
 8005978:	080063be 	.word	0x080063be
 800597c:	00000000 	.word	0x00000000
 8005980:	08005733 	.word	0x08005733

08005984 <_printf_common>:
 8005984:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005988:	4691      	mov	r9, r2
 800598a:	461f      	mov	r7, r3
 800598c:	688a      	ldr	r2, [r1, #8]
 800598e:	690b      	ldr	r3, [r1, #16]
 8005990:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005994:	4293      	cmp	r3, r2
 8005996:	bfb8      	it	lt
 8005998:	4613      	movlt	r3, r2
 800599a:	f8c9 3000 	str.w	r3, [r9]
 800599e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80059a2:	4606      	mov	r6, r0
 80059a4:	460c      	mov	r4, r1
 80059a6:	b112      	cbz	r2, 80059ae <_printf_common+0x2a>
 80059a8:	3301      	adds	r3, #1
 80059aa:	f8c9 3000 	str.w	r3, [r9]
 80059ae:	6823      	ldr	r3, [r4, #0]
 80059b0:	0699      	lsls	r1, r3, #26
 80059b2:	bf42      	ittt	mi
 80059b4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80059b8:	3302      	addmi	r3, #2
 80059ba:	f8c9 3000 	strmi.w	r3, [r9]
 80059be:	6825      	ldr	r5, [r4, #0]
 80059c0:	f015 0506 	ands.w	r5, r5, #6
 80059c4:	d107      	bne.n	80059d6 <_printf_common+0x52>
 80059c6:	f104 0a19 	add.w	sl, r4, #25
 80059ca:	68e3      	ldr	r3, [r4, #12]
 80059cc:	f8d9 2000 	ldr.w	r2, [r9]
 80059d0:	1a9b      	subs	r3, r3, r2
 80059d2:	42ab      	cmp	r3, r5
 80059d4:	dc28      	bgt.n	8005a28 <_printf_common+0xa4>
 80059d6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80059da:	6822      	ldr	r2, [r4, #0]
 80059dc:	3300      	adds	r3, #0
 80059de:	bf18      	it	ne
 80059e0:	2301      	movne	r3, #1
 80059e2:	0692      	lsls	r2, r2, #26
 80059e4:	d42d      	bmi.n	8005a42 <_printf_common+0xbe>
 80059e6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80059ea:	4639      	mov	r1, r7
 80059ec:	4630      	mov	r0, r6
 80059ee:	47c0      	blx	r8
 80059f0:	3001      	adds	r0, #1
 80059f2:	d020      	beq.n	8005a36 <_printf_common+0xb2>
 80059f4:	6823      	ldr	r3, [r4, #0]
 80059f6:	68e5      	ldr	r5, [r4, #12]
 80059f8:	f8d9 2000 	ldr.w	r2, [r9]
 80059fc:	f003 0306 	and.w	r3, r3, #6
 8005a00:	2b04      	cmp	r3, #4
 8005a02:	bf08      	it	eq
 8005a04:	1aad      	subeq	r5, r5, r2
 8005a06:	68a3      	ldr	r3, [r4, #8]
 8005a08:	6922      	ldr	r2, [r4, #16]
 8005a0a:	bf0c      	ite	eq
 8005a0c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005a10:	2500      	movne	r5, #0
 8005a12:	4293      	cmp	r3, r2
 8005a14:	bfc4      	itt	gt
 8005a16:	1a9b      	subgt	r3, r3, r2
 8005a18:	18ed      	addgt	r5, r5, r3
 8005a1a:	f04f 0900 	mov.w	r9, #0
 8005a1e:	341a      	adds	r4, #26
 8005a20:	454d      	cmp	r5, r9
 8005a22:	d11a      	bne.n	8005a5a <_printf_common+0xd6>
 8005a24:	2000      	movs	r0, #0
 8005a26:	e008      	b.n	8005a3a <_printf_common+0xb6>
 8005a28:	2301      	movs	r3, #1
 8005a2a:	4652      	mov	r2, sl
 8005a2c:	4639      	mov	r1, r7
 8005a2e:	4630      	mov	r0, r6
 8005a30:	47c0      	blx	r8
 8005a32:	3001      	adds	r0, #1
 8005a34:	d103      	bne.n	8005a3e <_printf_common+0xba>
 8005a36:	f04f 30ff 	mov.w	r0, #4294967295
 8005a3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a3e:	3501      	adds	r5, #1
 8005a40:	e7c3      	b.n	80059ca <_printf_common+0x46>
 8005a42:	18e1      	adds	r1, r4, r3
 8005a44:	1c5a      	adds	r2, r3, #1
 8005a46:	2030      	movs	r0, #48	; 0x30
 8005a48:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005a4c:	4422      	add	r2, r4
 8005a4e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005a52:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005a56:	3302      	adds	r3, #2
 8005a58:	e7c5      	b.n	80059e6 <_printf_common+0x62>
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	4622      	mov	r2, r4
 8005a5e:	4639      	mov	r1, r7
 8005a60:	4630      	mov	r0, r6
 8005a62:	47c0      	blx	r8
 8005a64:	3001      	adds	r0, #1
 8005a66:	d0e6      	beq.n	8005a36 <_printf_common+0xb2>
 8005a68:	f109 0901 	add.w	r9, r9, #1
 8005a6c:	e7d8      	b.n	8005a20 <_printf_common+0x9c>
	...

08005a70 <_printf_i>:
 8005a70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005a74:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005a78:	460c      	mov	r4, r1
 8005a7a:	7e09      	ldrb	r1, [r1, #24]
 8005a7c:	b085      	sub	sp, #20
 8005a7e:	296e      	cmp	r1, #110	; 0x6e
 8005a80:	4617      	mov	r7, r2
 8005a82:	4606      	mov	r6, r0
 8005a84:	4698      	mov	r8, r3
 8005a86:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005a88:	f000 80b3 	beq.w	8005bf2 <_printf_i+0x182>
 8005a8c:	d822      	bhi.n	8005ad4 <_printf_i+0x64>
 8005a8e:	2963      	cmp	r1, #99	; 0x63
 8005a90:	d036      	beq.n	8005b00 <_printf_i+0x90>
 8005a92:	d80a      	bhi.n	8005aaa <_printf_i+0x3a>
 8005a94:	2900      	cmp	r1, #0
 8005a96:	f000 80b9 	beq.w	8005c0c <_printf_i+0x19c>
 8005a9a:	2958      	cmp	r1, #88	; 0x58
 8005a9c:	f000 8083 	beq.w	8005ba6 <_printf_i+0x136>
 8005aa0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005aa4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005aa8:	e032      	b.n	8005b10 <_printf_i+0xa0>
 8005aaa:	2964      	cmp	r1, #100	; 0x64
 8005aac:	d001      	beq.n	8005ab2 <_printf_i+0x42>
 8005aae:	2969      	cmp	r1, #105	; 0x69
 8005ab0:	d1f6      	bne.n	8005aa0 <_printf_i+0x30>
 8005ab2:	6820      	ldr	r0, [r4, #0]
 8005ab4:	6813      	ldr	r3, [r2, #0]
 8005ab6:	0605      	lsls	r5, r0, #24
 8005ab8:	f103 0104 	add.w	r1, r3, #4
 8005abc:	d52a      	bpl.n	8005b14 <_printf_i+0xa4>
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	6011      	str	r1, [r2, #0]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	da03      	bge.n	8005ace <_printf_i+0x5e>
 8005ac6:	222d      	movs	r2, #45	; 0x2d
 8005ac8:	425b      	negs	r3, r3
 8005aca:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005ace:	486f      	ldr	r0, [pc, #444]	; (8005c8c <_printf_i+0x21c>)
 8005ad0:	220a      	movs	r2, #10
 8005ad2:	e039      	b.n	8005b48 <_printf_i+0xd8>
 8005ad4:	2973      	cmp	r1, #115	; 0x73
 8005ad6:	f000 809d 	beq.w	8005c14 <_printf_i+0x1a4>
 8005ada:	d808      	bhi.n	8005aee <_printf_i+0x7e>
 8005adc:	296f      	cmp	r1, #111	; 0x6f
 8005ade:	d020      	beq.n	8005b22 <_printf_i+0xb2>
 8005ae0:	2970      	cmp	r1, #112	; 0x70
 8005ae2:	d1dd      	bne.n	8005aa0 <_printf_i+0x30>
 8005ae4:	6823      	ldr	r3, [r4, #0]
 8005ae6:	f043 0320 	orr.w	r3, r3, #32
 8005aea:	6023      	str	r3, [r4, #0]
 8005aec:	e003      	b.n	8005af6 <_printf_i+0x86>
 8005aee:	2975      	cmp	r1, #117	; 0x75
 8005af0:	d017      	beq.n	8005b22 <_printf_i+0xb2>
 8005af2:	2978      	cmp	r1, #120	; 0x78
 8005af4:	d1d4      	bne.n	8005aa0 <_printf_i+0x30>
 8005af6:	2378      	movs	r3, #120	; 0x78
 8005af8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005afc:	4864      	ldr	r0, [pc, #400]	; (8005c90 <_printf_i+0x220>)
 8005afe:	e055      	b.n	8005bac <_printf_i+0x13c>
 8005b00:	6813      	ldr	r3, [r2, #0]
 8005b02:	1d19      	adds	r1, r3, #4
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	6011      	str	r1, [r2, #0]
 8005b08:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005b0c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005b10:	2301      	movs	r3, #1
 8005b12:	e08c      	b.n	8005c2e <_printf_i+0x1be>
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	6011      	str	r1, [r2, #0]
 8005b18:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005b1c:	bf18      	it	ne
 8005b1e:	b21b      	sxthne	r3, r3
 8005b20:	e7cf      	b.n	8005ac2 <_printf_i+0x52>
 8005b22:	6813      	ldr	r3, [r2, #0]
 8005b24:	6825      	ldr	r5, [r4, #0]
 8005b26:	1d18      	adds	r0, r3, #4
 8005b28:	6010      	str	r0, [r2, #0]
 8005b2a:	0628      	lsls	r0, r5, #24
 8005b2c:	d501      	bpl.n	8005b32 <_printf_i+0xc2>
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	e002      	b.n	8005b38 <_printf_i+0xc8>
 8005b32:	0668      	lsls	r0, r5, #25
 8005b34:	d5fb      	bpl.n	8005b2e <_printf_i+0xbe>
 8005b36:	881b      	ldrh	r3, [r3, #0]
 8005b38:	4854      	ldr	r0, [pc, #336]	; (8005c8c <_printf_i+0x21c>)
 8005b3a:	296f      	cmp	r1, #111	; 0x6f
 8005b3c:	bf14      	ite	ne
 8005b3e:	220a      	movne	r2, #10
 8005b40:	2208      	moveq	r2, #8
 8005b42:	2100      	movs	r1, #0
 8005b44:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005b48:	6865      	ldr	r5, [r4, #4]
 8005b4a:	60a5      	str	r5, [r4, #8]
 8005b4c:	2d00      	cmp	r5, #0
 8005b4e:	f2c0 8095 	blt.w	8005c7c <_printf_i+0x20c>
 8005b52:	6821      	ldr	r1, [r4, #0]
 8005b54:	f021 0104 	bic.w	r1, r1, #4
 8005b58:	6021      	str	r1, [r4, #0]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d13d      	bne.n	8005bda <_printf_i+0x16a>
 8005b5e:	2d00      	cmp	r5, #0
 8005b60:	f040 808e 	bne.w	8005c80 <_printf_i+0x210>
 8005b64:	4665      	mov	r5, ip
 8005b66:	2a08      	cmp	r2, #8
 8005b68:	d10b      	bne.n	8005b82 <_printf_i+0x112>
 8005b6a:	6823      	ldr	r3, [r4, #0]
 8005b6c:	07db      	lsls	r3, r3, #31
 8005b6e:	d508      	bpl.n	8005b82 <_printf_i+0x112>
 8005b70:	6923      	ldr	r3, [r4, #16]
 8005b72:	6862      	ldr	r2, [r4, #4]
 8005b74:	429a      	cmp	r2, r3
 8005b76:	bfde      	ittt	le
 8005b78:	2330      	movle	r3, #48	; 0x30
 8005b7a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005b7e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005b82:	ebac 0305 	sub.w	r3, ip, r5
 8005b86:	6123      	str	r3, [r4, #16]
 8005b88:	f8cd 8000 	str.w	r8, [sp]
 8005b8c:	463b      	mov	r3, r7
 8005b8e:	aa03      	add	r2, sp, #12
 8005b90:	4621      	mov	r1, r4
 8005b92:	4630      	mov	r0, r6
 8005b94:	f7ff fef6 	bl	8005984 <_printf_common>
 8005b98:	3001      	adds	r0, #1
 8005b9a:	d14d      	bne.n	8005c38 <_printf_i+0x1c8>
 8005b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8005ba0:	b005      	add	sp, #20
 8005ba2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005ba6:	4839      	ldr	r0, [pc, #228]	; (8005c8c <_printf_i+0x21c>)
 8005ba8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005bac:	6813      	ldr	r3, [r2, #0]
 8005bae:	6821      	ldr	r1, [r4, #0]
 8005bb0:	1d1d      	adds	r5, r3, #4
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	6015      	str	r5, [r2, #0]
 8005bb6:	060a      	lsls	r2, r1, #24
 8005bb8:	d50b      	bpl.n	8005bd2 <_printf_i+0x162>
 8005bba:	07ca      	lsls	r2, r1, #31
 8005bbc:	bf44      	itt	mi
 8005bbe:	f041 0120 	orrmi.w	r1, r1, #32
 8005bc2:	6021      	strmi	r1, [r4, #0]
 8005bc4:	b91b      	cbnz	r3, 8005bce <_printf_i+0x15e>
 8005bc6:	6822      	ldr	r2, [r4, #0]
 8005bc8:	f022 0220 	bic.w	r2, r2, #32
 8005bcc:	6022      	str	r2, [r4, #0]
 8005bce:	2210      	movs	r2, #16
 8005bd0:	e7b7      	b.n	8005b42 <_printf_i+0xd2>
 8005bd2:	064d      	lsls	r5, r1, #25
 8005bd4:	bf48      	it	mi
 8005bd6:	b29b      	uxthmi	r3, r3
 8005bd8:	e7ef      	b.n	8005bba <_printf_i+0x14a>
 8005bda:	4665      	mov	r5, ip
 8005bdc:	fbb3 f1f2 	udiv	r1, r3, r2
 8005be0:	fb02 3311 	mls	r3, r2, r1, r3
 8005be4:	5cc3      	ldrb	r3, [r0, r3]
 8005be6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005bea:	460b      	mov	r3, r1
 8005bec:	2900      	cmp	r1, #0
 8005bee:	d1f5      	bne.n	8005bdc <_printf_i+0x16c>
 8005bf0:	e7b9      	b.n	8005b66 <_printf_i+0xf6>
 8005bf2:	6813      	ldr	r3, [r2, #0]
 8005bf4:	6825      	ldr	r5, [r4, #0]
 8005bf6:	6961      	ldr	r1, [r4, #20]
 8005bf8:	1d18      	adds	r0, r3, #4
 8005bfa:	6010      	str	r0, [r2, #0]
 8005bfc:	0628      	lsls	r0, r5, #24
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	d501      	bpl.n	8005c06 <_printf_i+0x196>
 8005c02:	6019      	str	r1, [r3, #0]
 8005c04:	e002      	b.n	8005c0c <_printf_i+0x19c>
 8005c06:	066a      	lsls	r2, r5, #25
 8005c08:	d5fb      	bpl.n	8005c02 <_printf_i+0x192>
 8005c0a:	8019      	strh	r1, [r3, #0]
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	6123      	str	r3, [r4, #16]
 8005c10:	4665      	mov	r5, ip
 8005c12:	e7b9      	b.n	8005b88 <_printf_i+0x118>
 8005c14:	6813      	ldr	r3, [r2, #0]
 8005c16:	1d19      	adds	r1, r3, #4
 8005c18:	6011      	str	r1, [r2, #0]
 8005c1a:	681d      	ldr	r5, [r3, #0]
 8005c1c:	6862      	ldr	r2, [r4, #4]
 8005c1e:	2100      	movs	r1, #0
 8005c20:	4628      	mov	r0, r5
 8005c22:	f7fa fad5 	bl	80001d0 <memchr>
 8005c26:	b108      	cbz	r0, 8005c2c <_printf_i+0x1bc>
 8005c28:	1b40      	subs	r0, r0, r5
 8005c2a:	6060      	str	r0, [r4, #4]
 8005c2c:	6863      	ldr	r3, [r4, #4]
 8005c2e:	6123      	str	r3, [r4, #16]
 8005c30:	2300      	movs	r3, #0
 8005c32:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c36:	e7a7      	b.n	8005b88 <_printf_i+0x118>
 8005c38:	6923      	ldr	r3, [r4, #16]
 8005c3a:	462a      	mov	r2, r5
 8005c3c:	4639      	mov	r1, r7
 8005c3e:	4630      	mov	r0, r6
 8005c40:	47c0      	blx	r8
 8005c42:	3001      	adds	r0, #1
 8005c44:	d0aa      	beq.n	8005b9c <_printf_i+0x12c>
 8005c46:	6823      	ldr	r3, [r4, #0]
 8005c48:	079b      	lsls	r3, r3, #30
 8005c4a:	d413      	bmi.n	8005c74 <_printf_i+0x204>
 8005c4c:	68e0      	ldr	r0, [r4, #12]
 8005c4e:	9b03      	ldr	r3, [sp, #12]
 8005c50:	4298      	cmp	r0, r3
 8005c52:	bfb8      	it	lt
 8005c54:	4618      	movlt	r0, r3
 8005c56:	e7a3      	b.n	8005ba0 <_printf_i+0x130>
 8005c58:	2301      	movs	r3, #1
 8005c5a:	464a      	mov	r2, r9
 8005c5c:	4639      	mov	r1, r7
 8005c5e:	4630      	mov	r0, r6
 8005c60:	47c0      	blx	r8
 8005c62:	3001      	adds	r0, #1
 8005c64:	d09a      	beq.n	8005b9c <_printf_i+0x12c>
 8005c66:	3501      	adds	r5, #1
 8005c68:	68e3      	ldr	r3, [r4, #12]
 8005c6a:	9a03      	ldr	r2, [sp, #12]
 8005c6c:	1a9b      	subs	r3, r3, r2
 8005c6e:	42ab      	cmp	r3, r5
 8005c70:	dcf2      	bgt.n	8005c58 <_printf_i+0x1e8>
 8005c72:	e7eb      	b.n	8005c4c <_printf_i+0x1dc>
 8005c74:	2500      	movs	r5, #0
 8005c76:	f104 0919 	add.w	r9, r4, #25
 8005c7a:	e7f5      	b.n	8005c68 <_printf_i+0x1f8>
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d1ac      	bne.n	8005bda <_printf_i+0x16a>
 8005c80:	7803      	ldrb	r3, [r0, #0]
 8005c82:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005c86:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005c8a:	e76c      	b.n	8005b66 <_printf_i+0xf6>
 8005c8c:	080063c5 	.word	0x080063c5
 8005c90:	080063d6 	.word	0x080063d6

08005c94 <_sbrk_r>:
 8005c94:	b538      	push	{r3, r4, r5, lr}
 8005c96:	4c06      	ldr	r4, [pc, #24]	; (8005cb0 <_sbrk_r+0x1c>)
 8005c98:	2300      	movs	r3, #0
 8005c9a:	4605      	mov	r5, r0
 8005c9c:	4608      	mov	r0, r1
 8005c9e:	6023      	str	r3, [r4, #0]
 8005ca0:	f7fb f85e 	bl	8000d60 <_sbrk>
 8005ca4:	1c43      	adds	r3, r0, #1
 8005ca6:	d102      	bne.n	8005cae <_sbrk_r+0x1a>
 8005ca8:	6823      	ldr	r3, [r4, #0]
 8005caa:	b103      	cbz	r3, 8005cae <_sbrk_r+0x1a>
 8005cac:	602b      	str	r3, [r5, #0]
 8005cae:	bd38      	pop	{r3, r4, r5, pc}
 8005cb0:	2000024c 	.word	0x2000024c

08005cb4 <__sread>:
 8005cb4:	b510      	push	{r4, lr}
 8005cb6:	460c      	mov	r4, r1
 8005cb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005cbc:	f000 fae0 	bl	8006280 <_read_r>
 8005cc0:	2800      	cmp	r0, #0
 8005cc2:	bfab      	itete	ge
 8005cc4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005cc6:	89a3      	ldrhlt	r3, [r4, #12]
 8005cc8:	181b      	addge	r3, r3, r0
 8005cca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005cce:	bfac      	ite	ge
 8005cd0:	6563      	strge	r3, [r4, #84]	; 0x54
 8005cd2:	81a3      	strhlt	r3, [r4, #12]
 8005cd4:	bd10      	pop	{r4, pc}

08005cd6 <__swrite>:
 8005cd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005cda:	461f      	mov	r7, r3
 8005cdc:	898b      	ldrh	r3, [r1, #12]
 8005cde:	05db      	lsls	r3, r3, #23
 8005ce0:	4605      	mov	r5, r0
 8005ce2:	460c      	mov	r4, r1
 8005ce4:	4616      	mov	r6, r2
 8005ce6:	d505      	bpl.n	8005cf4 <__swrite+0x1e>
 8005ce8:	2302      	movs	r3, #2
 8005cea:	2200      	movs	r2, #0
 8005cec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005cf0:	f000 f9b6 	bl	8006060 <_lseek_r>
 8005cf4:	89a3      	ldrh	r3, [r4, #12]
 8005cf6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005cfa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005cfe:	81a3      	strh	r3, [r4, #12]
 8005d00:	4632      	mov	r2, r6
 8005d02:	463b      	mov	r3, r7
 8005d04:	4628      	mov	r0, r5
 8005d06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005d0a:	f000 b869 	b.w	8005de0 <_write_r>

08005d0e <__sseek>:
 8005d0e:	b510      	push	{r4, lr}
 8005d10:	460c      	mov	r4, r1
 8005d12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d16:	f000 f9a3 	bl	8006060 <_lseek_r>
 8005d1a:	1c43      	adds	r3, r0, #1
 8005d1c:	89a3      	ldrh	r3, [r4, #12]
 8005d1e:	bf15      	itete	ne
 8005d20:	6560      	strne	r0, [r4, #84]	; 0x54
 8005d22:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005d26:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005d2a:	81a3      	strheq	r3, [r4, #12]
 8005d2c:	bf18      	it	ne
 8005d2e:	81a3      	strhne	r3, [r4, #12]
 8005d30:	bd10      	pop	{r4, pc}

08005d32 <__sclose>:
 8005d32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d36:	f000 b8d3 	b.w	8005ee0 <_close_r>
	...

08005d3c <__swbuf_r>:
 8005d3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d3e:	460e      	mov	r6, r1
 8005d40:	4614      	mov	r4, r2
 8005d42:	4605      	mov	r5, r0
 8005d44:	b118      	cbz	r0, 8005d4e <__swbuf_r+0x12>
 8005d46:	6983      	ldr	r3, [r0, #24]
 8005d48:	b90b      	cbnz	r3, 8005d4e <__swbuf_r+0x12>
 8005d4a:	f7ff faa5 	bl	8005298 <__sinit>
 8005d4e:	4b21      	ldr	r3, [pc, #132]	; (8005dd4 <__swbuf_r+0x98>)
 8005d50:	429c      	cmp	r4, r3
 8005d52:	d12a      	bne.n	8005daa <__swbuf_r+0x6e>
 8005d54:	686c      	ldr	r4, [r5, #4]
 8005d56:	69a3      	ldr	r3, [r4, #24]
 8005d58:	60a3      	str	r3, [r4, #8]
 8005d5a:	89a3      	ldrh	r3, [r4, #12]
 8005d5c:	071a      	lsls	r2, r3, #28
 8005d5e:	d52e      	bpl.n	8005dbe <__swbuf_r+0x82>
 8005d60:	6923      	ldr	r3, [r4, #16]
 8005d62:	b363      	cbz	r3, 8005dbe <__swbuf_r+0x82>
 8005d64:	6923      	ldr	r3, [r4, #16]
 8005d66:	6820      	ldr	r0, [r4, #0]
 8005d68:	1ac0      	subs	r0, r0, r3
 8005d6a:	6963      	ldr	r3, [r4, #20]
 8005d6c:	b2f6      	uxtb	r6, r6
 8005d6e:	4283      	cmp	r3, r0
 8005d70:	4637      	mov	r7, r6
 8005d72:	dc04      	bgt.n	8005d7e <__swbuf_r+0x42>
 8005d74:	4621      	mov	r1, r4
 8005d76:	4628      	mov	r0, r5
 8005d78:	f000 f948 	bl	800600c <_fflush_r>
 8005d7c:	bb28      	cbnz	r0, 8005dca <__swbuf_r+0x8e>
 8005d7e:	68a3      	ldr	r3, [r4, #8]
 8005d80:	3b01      	subs	r3, #1
 8005d82:	60a3      	str	r3, [r4, #8]
 8005d84:	6823      	ldr	r3, [r4, #0]
 8005d86:	1c5a      	adds	r2, r3, #1
 8005d88:	6022      	str	r2, [r4, #0]
 8005d8a:	701e      	strb	r6, [r3, #0]
 8005d8c:	6963      	ldr	r3, [r4, #20]
 8005d8e:	3001      	adds	r0, #1
 8005d90:	4283      	cmp	r3, r0
 8005d92:	d004      	beq.n	8005d9e <__swbuf_r+0x62>
 8005d94:	89a3      	ldrh	r3, [r4, #12]
 8005d96:	07db      	lsls	r3, r3, #31
 8005d98:	d519      	bpl.n	8005dce <__swbuf_r+0x92>
 8005d9a:	2e0a      	cmp	r6, #10
 8005d9c:	d117      	bne.n	8005dce <__swbuf_r+0x92>
 8005d9e:	4621      	mov	r1, r4
 8005da0:	4628      	mov	r0, r5
 8005da2:	f000 f933 	bl	800600c <_fflush_r>
 8005da6:	b190      	cbz	r0, 8005dce <__swbuf_r+0x92>
 8005da8:	e00f      	b.n	8005dca <__swbuf_r+0x8e>
 8005daa:	4b0b      	ldr	r3, [pc, #44]	; (8005dd8 <__swbuf_r+0x9c>)
 8005dac:	429c      	cmp	r4, r3
 8005dae:	d101      	bne.n	8005db4 <__swbuf_r+0x78>
 8005db0:	68ac      	ldr	r4, [r5, #8]
 8005db2:	e7d0      	b.n	8005d56 <__swbuf_r+0x1a>
 8005db4:	4b09      	ldr	r3, [pc, #36]	; (8005ddc <__swbuf_r+0xa0>)
 8005db6:	429c      	cmp	r4, r3
 8005db8:	bf08      	it	eq
 8005dba:	68ec      	ldreq	r4, [r5, #12]
 8005dbc:	e7cb      	b.n	8005d56 <__swbuf_r+0x1a>
 8005dbe:	4621      	mov	r1, r4
 8005dc0:	4628      	mov	r0, r5
 8005dc2:	f000 f81f 	bl	8005e04 <__swsetup_r>
 8005dc6:	2800      	cmp	r0, #0
 8005dc8:	d0cc      	beq.n	8005d64 <__swbuf_r+0x28>
 8005dca:	f04f 37ff 	mov.w	r7, #4294967295
 8005dce:	4638      	mov	r0, r7
 8005dd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005dd2:	bf00      	nop
 8005dd4:	08006374 	.word	0x08006374
 8005dd8:	08006394 	.word	0x08006394
 8005ddc:	08006354 	.word	0x08006354

08005de0 <_write_r>:
 8005de0:	b538      	push	{r3, r4, r5, lr}
 8005de2:	4c07      	ldr	r4, [pc, #28]	; (8005e00 <_write_r+0x20>)
 8005de4:	4605      	mov	r5, r0
 8005de6:	4608      	mov	r0, r1
 8005de8:	4611      	mov	r1, r2
 8005dea:	2200      	movs	r2, #0
 8005dec:	6022      	str	r2, [r4, #0]
 8005dee:	461a      	mov	r2, r3
 8005df0:	f7fa fa3e 	bl	8000270 <_write>
 8005df4:	1c43      	adds	r3, r0, #1
 8005df6:	d102      	bne.n	8005dfe <_write_r+0x1e>
 8005df8:	6823      	ldr	r3, [r4, #0]
 8005dfa:	b103      	cbz	r3, 8005dfe <_write_r+0x1e>
 8005dfc:	602b      	str	r3, [r5, #0]
 8005dfe:	bd38      	pop	{r3, r4, r5, pc}
 8005e00:	2000024c 	.word	0x2000024c

08005e04 <__swsetup_r>:
 8005e04:	4b32      	ldr	r3, [pc, #200]	; (8005ed0 <__swsetup_r+0xcc>)
 8005e06:	b570      	push	{r4, r5, r6, lr}
 8005e08:	681d      	ldr	r5, [r3, #0]
 8005e0a:	4606      	mov	r6, r0
 8005e0c:	460c      	mov	r4, r1
 8005e0e:	b125      	cbz	r5, 8005e1a <__swsetup_r+0x16>
 8005e10:	69ab      	ldr	r3, [r5, #24]
 8005e12:	b913      	cbnz	r3, 8005e1a <__swsetup_r+0x16>
 8005e14:	4628      	mov	r0, r5
 8005e16:	f7ff fa3f 	bl	8005298 <__sinit>
 8005e1a:	4b2e      	ldr	r3, [pc, #184]	; (8005ed4 <__swsetup_r+0xd0>)
 8005e1c:	429c      	cmp	r4, r3
 8005e1e:	d10f      	bne.n	8005e40 <__swsetup_r+0x3c>
 8005e20:	686c      	ldr	r4, [r5, #4]
 8005e22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005e26:	b29a      	uxth	r2, r3
 8005e28:	0715      	lsls	r5, r2, #28
 8005e2a:	d42c      	bmi.n	8005e86 <__swsetup_r+0x82>
 8005e2c:	06d0      	lsls	r0, r2, #27
 8005e2e:	d411      	bmi.n	8005e54 <__swsetup_r+0x50>
 8005e30:	2209      	movs	r2, #9
 8005e32:	6032      	str	r2, [r6, #0]
 8005e34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005e38:	81a3      	strh	r3, [r4, #12]
 8005e3a:	f04f 30ff 	mov.w	r0, #4294967295
 8005e3e:	e03e      	b.n	8005ebe <__swsetup_r+0xba>
 8005e40:	4b25      	ldr	r3, [pc, #148]	; (8005ed8 <__swsetup_r+0xd4>)
 8005e42:	429c      	cmp	r4, r3
 8005e44:	d101      	bne.n	8005e4a <__swsetup_r+0x46>
 8005e46:	68ac      	ldr	r4, [r5, #8]
 8005e48:	e7eb      	b.n	8005e22 <__swsetup_r+0x1e>
 8005e4a:	4b24      	ldr	r3, [pc, #144]	; (8005edc <__swsetup_r+0xd8>)
 8005e4c:	429c      	cmp	r4, r3
 8005e4e:	bf08      	it	eq
 8005e50:	68ec      	ldreq	r4, [r5, #12]
 8005e52:	e7e6      	b.n	8005e22 <__swsetup_r+0x1e>
 8005e54:	0751      	lsls	r1, r2, #29
 8005e56:	d512      	bpl.n	8005e7e <__swsetup_r+0x7a>
 8005e58:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005e5a:	b141      	cbz	r1, 8005e6e <__swsetup_r+0x6a>
 8005e5c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005e60:	4299      	cmp	r1, r3
 8005e62:	d002      	beq.n	8005e6a <__swsetup_r+0x66>
 8005e64:	4630      	mov	r0, r6
 8005e66:	f000 f997 	bl	8006198 <_free_r>
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	6363      	str	r3, [r4, #52]	; 0x34
 8005e6e:	89a3      	ldrh	r3, [r4, #12]
 8005e70:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005e74:	81a3      	strh	r3, [r4, #12]
 8005e76:	2300      	movs	r3, #0
 8005e78:	6063      	str	r3, [r4, #4]
 8005e7a:	6923      	ldr	r3, [r4, #16]
 8005e7c:	6023      	str	r3, [r4, #0]
 8005e7e:	89a3      	ldrh	r3, [r4, #12]
 8005e80:	f043 0308 	orr.w	r3, r3, #8
 8005e84:	81a3      	strh	r3, [r4, #12]
 8005e86:	6923      	ldr	r3, [r4, #16]
 8005e88:	b94b      	cbnz	r3, 8005e9e <__swsetup_r+0x9a>
 8005e8a:	89a3      	ldrh	r3, [r4, #12]
 8005e8c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005e90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e94:	d003      	beq.n	8005e9e <__swsetup_r+0x9a>
 8005e96:	4621      	mov	r1, r4
 8005e98:	4630      	mov	r0, r6
 8005e9a:	f000 f917 	bl	80060cc <__smakebuf_r>
 8005e9e:	89a2      	ldrh	r2, [r4, #12]
 8005ea0:	f012 0301 	ands.w	r3, r2, #1
 8005ea4:	d00c      	beq.n	8005ec0 <__swsetup_r+0xbc>
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	60a3      	str	r3, [r4, #8]
 8005eaa:	6963      	ldr	r3, [r4, #20]
 8005eac:	425b      	negs	r3, r3
 8005eae:	61a3      	str	r3, [r4, #24]
 8005eb0:	6923      	ldr	r3, [r4, #16]
 8005eb2:	b953      	cbnz	r3, 8005eca <__swsetup_r+0xc6>
 8005eb4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005eb8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8005ebc:	d1ba      	bne.n	8005e34 <__swsetup_r+0x30>
 8005ebe:	bd70      	pop	{r4, r5, r6, pc}
 8005ec0:	0792      	lsls	r2, r2, #30
 8005ec2:	bf58      	it	pl
 8005ec4:	6963      	ldrpl	r3, [r4, #20]
 8005ec6:	60a3      	str	r3, [r4, #8]
 8005ec8:	e7f2      	b.n	8005eb0 <__swsetup_r+0xac>
 8005eca:	2000      	movs	r0, #0
 8005ecc:	e7f7      	b.n	8005ebe <__swsetup_r+0xba>
 8005ece:	bf00      	nop
 8005ed0:	20000010 	.word	0x20000010
 8005ed4:	08006374 	.word	0x08006374
 8005ed8:	08006394 	.word	0x08006394
 8005edc:	08006354 	.word	0x08006354

08005ee0 <_close_r>:
 8005ee0:	b538      	push	{r3, r4, r5, lr}
 8005ee2:	4c06      	ldr	r4, [pc, #24]	; (8005efc <_close_r+0x1c>)
 8005ee4:	2300      	movs	r3, #0
 8005ee6:	4605      	mov	r5, r0
 8005ee8:	4608      	mov	r0, r1
 8005eea:	6023      	str	r3, [r4, #0]
 8005eec:	f7fa ff03 	bl	8000cf6 <_close>
 8005ef0:	1c43      	adds	r3, r0, #1
 8005ef2:	d102      	bne.n	8005efa <_close_r+0x1a>
 8005ef4:	6823      	ldr	r3, [r4, #0]
 8005ef6:	b103      	cbz	r3, 8005efa <_close_r+0x1a>
 8005ef8:	602b      	str	r3, [r5, #0]
 8005efa:	bd38      	pop	{r3, r4, r5, pc}
 8005efc:	2000024c 	.word	0x2000024c

08005f00 <__sflush_r>:
 8005f00:	898a      	ldrh	r2, [r1, #12]
 8005f02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f06:	4605      	mov	r5, r0
 8005f08:	0710      	lsls	r0, r2, #28
 8005f0a:	460c      	mov	r4, r1
 8005f0c:	d458      	bmi.n	8005fc0 <__sflush_r+0xc0>
 8005f0e:	684b      	ldr	r3, [r1, #4]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	dc05      	bgt.n	8005f20 <__sflush_r+0x20>
 8005f14:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	dc02      	bgt.n	8005f20 <__sflush_r+0x20>
 8005f1a:	2000      	movs	r0, #0
 8005f1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f20:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005f22:	2e00      	cmp	r6, #0
 8005f24:	d0f9      	beq.n	8005f1a <__sflush_r+0x1a>
 8005f26:	2300      	movs	r3, #0
 8005f28:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005f2c:	682f      	ldr	r7, [r5, #0]
 8005f2e:	6a21      	ldr	r1, [r4, #32]
 8005f30:	602b      	str	r3, [r5, #0]
 8005f32:	d032      	beq.n	8005f9a <__sflush_r+0x9a>
 8005f34:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005f36:	89a3      	ldrh	r3, [r4, #12]
 8005f38:	075a      	lsls	r2, r3, #29
 8005f3a:	d505      	bpl.n	8005f48 <__sflush_r+0x48>
 8005f3c:	6863      	ldr	r3, [r4, #4]
 8005f3e:	1ac0      	subs	r0, r0, r3
 8005f40:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005f42:	b10b      	cbz	r3, 8005f48 <__sflush_r+0x48>
 8005f44:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005f46:	1ac0      	subs	r0, r0, r3
 8005f48:	2300      	movs	r3, #0
 8005f4a:	4602      	mov	r2, r0
 8005f4c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005f4e:	6a21      	ldr	r1, [r4, #32]
 8005f50:	4628      	mov	r0, r5
 8005f52:	47b0      	blx	r6
 8005f54:	1c43      	adds	r3, r0, #1
 8005f56:	89a3      	ldrh	r3, [r4, #12]
 8005f58:	d106      	bne.n	8005f68 <__sflush_r+0x68>
 8005f5a:	6829      	ldr	r1, [r5, #0]
 8005f5c:	291d      	cmp	r1, #29
 8005f5e:	d848      	bhi.n	8005ff2 <__sflush_r+0xf2>
 8005f60:	4a29      	ldr	r2, [pc, #164]	; (8006008 <__sflush_r+0x108>)
 8005f62:	40ca      	lsrs	r2, r1
 8005f64:	07d6      	lsls	r6, r2, #31
 8005f66:	d544      	bpl.n	8005ff2 <__sflush_r+0xf2>
 8005f68:	2200      	movs	r2, #0
 8005f6a:	6062      	str	r2, [r4, #4]
 8005f6c:	04d9      	lsls	r1, r3, #19
 8005f6e:	6922      	ldr	r2, [r4, #16]
 8005f70:	6022      	str	r2, [r4, #0]
 8005f72:	d504      	bpl.n	8005f7e <__sflush_r+0x7e>
 8005f74:	1c42      	adds	r2, r0, #1
 8005f76:	d101      	bne.n	8005f7c <__sflush_r+0x7c>
 8005f78:	682b      	ldr	r3, [r5, #0]
 8005f7a:	b903      	cbnz	r3, 8005f7e <__sflush_r+0x7e>
 8005f7c:	6560      	str	r0, [r4, #84]	; 0x54
 8005f7e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005f80:	602f      	str	r7, [r5, #0]
 8005f82:	2900      	cmp	r1, #0
 8005f84:	d0c9      	beq.n	8005f1a <__sflush_r+0x1a>
 8005f86:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005f8a:	4299      	cmp	r1, r3
 8005f8c:	d002      	beq.n	8005f94 <__sflush_r+0x94>
 8005f8e:	4628      	mov	r0, r5
 8005f90:	f000 f902 	bl	8006198 <_free_r>
 8005f94:	2000      	movs	r0, #0
 8005f96:	6360      	str	r0, [r4, #52]	; 0x34
 8005f98:	e7c0      	b.n	8005f1c <__sflush_r+0x1c>
 8005f9a:	2301      	movs	r3, #1
 8005f9c:	4628      	mov	r0, r5
 8005f9e:	47b0      	blx	r6
 8005fa0:	1c41      	adds	r1, r0, #1
 8005fa2:	d1c8      	bne.n	8005f36 <__sflush_r+0x36>
 8005fa4:	682b      	ldr	r3, [r5, #0]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d0c5      	beq.n	8005f36 <__sflush_r+0x36>
 8005faa:	2b1d      	cmp	r3, #29
 8005fac:	d001      	beq.n	8005fb2 <__sflush_r+0xb2>
 8005fae:	2b16      	cmp	r3, #22
 8005fb0:	d101      	bne.n	8005fb6 <__sflush_r+0xb6>
 8005fb2:	602f      	str	r7, [r5, #0]
 8005fb4:	e7b1      	b.n	8005f1a <__sflush_r+0x1a>
 8005fb6:	89a3      	ldrh	r3, [r4, #12]
 8005fb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005fbc:	81a3      	strh	r3, [r4, #12]
 8005fbe:	e7ad      	b.n	8005f1c <__sflush_r+0x1c>
 8005fc0:	690f      	ldr	r7, [r1, #16]
 8005fc2:	2f00      	cmp	r7, #0
 8005fc4:	d0a9      	beq.n	8005f1a <__sflush_r+0x1a>
 8005fc6:	0793      	lsls	r3, r2, #30
 8005fc8:	680e      	ldr	r6, [r1, #0]
 8005fca:	bf08      	it	eq
 8005fcc:	694b      	ldreq	r3, [r1, #20]
 8005fce:	600f      	str	r7, [r1, #0]
 8005fd0:	bf18      	it	ne
 8005fd2:	2300      	movne	r3, #0
 8005fd4:	eba6 0807 	sub.w	r8, r6, r7
 8005fd8:	608b      	str	r3, [r1, #8]
 8005fda:	f1b8 0f00 	cmp.w	r8, #0
 8005fde:	dd9c      	ble.n	8005f1a <__sflush_r+0x1a>
 8005fe0:	4643      	mov	r3, r8
 8005fe2:	463a      	mov	r2, r7
 8005fe4:	6a21      	ldr	r1, [r4, #32]
 8005fe6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005fe8:	4628      	mov	r0, r5
 8005fea:	47b0      	blx	r6
 8005fec:	2800      	cmp	r0, #0
 8005fee:	dc06      	bgt.n	8005ffe <__sflush_r+0xfe>
 8005ff0:	89a3      	ldrh	r3, [r4, #12]
 8005ff2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005ff6:	81a3      	strh	r3, [r4, #12]
 8005ff8:	f04f 30ff 	mov.w	r0, #4294967295
 8005ffc:	e78e      	b.n	8005f1c <__sflush_r+0x1c>
 8005ffe:	4407      	add	r7, r0
 8006000:	eba8 0800 	sub.w	r8, r8, r0
 8006004:	e7e9      	b.n	8005fda <__sflush_r+0xda>
 8006006:	bf00      	nop
 8006008:	20400001 	.word	0x20400001

0800600c <_fflush_r>:
 800600c:	b538      	push	{r3, r4, r5, lr}
 800600e:	690b      	ldr	r3, [r1, #16]
 8006010:	4605      	mov	r5, r0
 8006012:	460c      	mov	r4, r1
 8006014:	b1db      	cbz	r3, 800604e <_fflush_r+0x42>
 8006016:	b118      	cbz	r0, 8006020 <_fflush_r+0x14>
 8006018:	6983      	ldr	r3, [r0, #24]
 800601a:	b90b      	cbnz	r3, 8006020 <_fflush_r+0x14>
 800601c:	f7ff f93c 	bl	8005298 <__sinit>
 8006020:	4b0c      	ldr	r3, [pc, #48]	; (8006054 <_fflush_r+0x48>)
 8006022:	429c      	cmp	r4, r3
 8006024:	d109      	bne.n	800603a <_fflush_r+0x2e>
 8006026:	686c      	ldr	r4, [r5, #4]
 8006028:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800602c:	b17b      	cbz	r3, 800604e <_fflush_r+0x42>
 800602e:	4621      	mov	r1, r4
 8006030:	4628      	mov	r0, r5
 8006032:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006036:	f7ff bf63 	b.w	8005f00 <__sflush_r>
 800603a:	4b07      	ldr	r3, [pc, #28]	; (8006058 <_fflush_r+0x4c>)
 800603c:	429c      	cmp	r4, r3
 800603e:	d101      	bne.n	8006044 <_fflush_r+0x38>
 8006040:	68ac      	ldr	r4, [r5, #8]
 8006042:	e7f1      	b.n	8006028 <_fflush_r+0x1c>
 8006044:	4b05      	ldr	r3, [pc, #20]	; (800605c <_fflush_r+0x50>)
 8006046:	429c      	cmp	r4, r3
 8006048:	bf08      	it	eq
 800604a:	68ec      	ldreq	r4, [r5, #12]
 800604c:	e7ec      	b.n	8006028 <_fflush_r+0x1c>
 800604e:	2000      	movs	r0, #0
 8006050:	bd38      	pop	{r3, r4, r5, pc}
 8006052:	bf00      	nop
 8006054:	08006374 	.word	0x08006374
 8006058:	08006394 	.word	0x08006394
 800605c:	08006354 	.word	0x08006354

08006060 <_lseek_r>:
 8006060:	b538      	push	{r3, r4, r5, lr}
 8006062:	4c07      	ldr	r4, [pc, #28]	; (8006080 <_lseek_r+0x20>)
 8006064:	4605      	mov	r5, r0
 8006066:	4608      	mov	r0, r1
 8006068:	4611      	mov	r1, r2
 800606a:	2200      	movs	r2, #0
 800606c:	6022      	str	r2, [r4, #0]
 800606e:	461a      	mov	r2, r3
 8006070:	f7fa fe68 	bl	8000d44 <_lseek>
 8006074:	1c43      	adds	r3, r0, #1
 8006076:	d102      	bne.n	800607e <_lseek_r+0x1e>
 8006078:	6823      	ldr	r3, [r4, #0]
 800607a:	b103      	cbz	r3, 800607e <_lseek_r+0x1e>
 800607c:	602b      	str	r3, [r5, #0]
 800607e:	bd38      	pop	{r3, r4, r5, pc}
 8006080:	2000024c 	.word	0x2000024c

08006084 <__swhatbuf_r>:
 8006084:	b570      	push	{r4, r5, r6, lr}
 8006086:	460e      	mov	r6, r1
 8006088:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800608c:	2900      	cmp	r1, #0
 800608e:	b096      	sub	sp, #88	; 0x58
 8006090:	4614      	mov	r4, r2
 8006092:	461d      	mov	r5, r3
 8006094:	da07      	bge.n	80060a6 <__swhatbuf_r+0x22>
 8006096:	2300      	movs	r3, #0
 8006098:	602b      	str	r3, [r5, #0]
 800609a:	89b3      	ldrh	r3, [r6, #12]
 800609c:	061a      	lsls	r2, r3, #24
 800609e:	d410      	bmi.n	80060c2 <__swhatbuf_r+0x3e>
 80060a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80060a4:	e00e      	b.n	80060c4 <__swhatbuf_r+0x40>
 80060a6:	466a      	mov	r2, sp
 80060a8:	f000 f8fc 	bl	80062a4 <_fstat_r>
 80060ac:	2800      	cmp	r0, #0
 80060ae:	dbf2      	blt.n	8006096 <__swhatbuf_r+0x12>
 80060b0:	9a01      	ldr	r2, [sp, #4]
 80060b2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80060b6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80060ba:	425a      	negs	r2, r3
 80060bc:	415a      	adcs	r2, r3
 80060be:	602a      	str	r2, [r5, #0]
 80060c0:	e7ee      	b.n	80060a0 <__swhatbuf_r+0x1c>
 80060c2:	2340      	movs	r3, #64	; 0x40
 80060c4:	2000      	movs	r0, #0
 80060c6:	6023      	str	r3, [r4, #0]
 80060c8:	b016      	add	sp, #88	; 0x58
 80060ca:	bd70      	pop	{r4, r5, r6, pc}

080060cc <__smakebuf_r>:
 80060cc:	898b      	ldrh	r3, [r1, #12]
 80060ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80060d0:	079d      	lsls	r5, r3, #30
 80060d2:	4606      	mov	r6, r0
 80060d4:	460c      	mov	r4, r1
 80060d6:	d507      	bpl.n	80060e8 <__smakebuf_r+0x1c>
 80060d8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80060dc:	6023      	str	r3, [r4, #0]
 80060de:	6123      	str	r3, [r4, #16]
 80060e0:	2301      	movs	r3, #1
 80060e2:	6163      	str	r3, [r4, #20]
 80060e4:	b002      	add	sp, #8
 80060e6:	bd70      	pop	{r4, r5, r6, pc}
 80060e8:	ab01      	add	r3, sp, #4
 80060ea:	466a      	mov	r2, sp
 80060ec:	f7ff ffca 	bl	8006084 <__swhatbuf_r>
 80060f0:	9900      	ldr	r1, [sp, #0]
 80060f2:	4605      	mov	r5, r0
 80060f4:	4630      	mov	r0, r6
 80060f6:	f7ff f959 	bl	80053ac <_malloc_r>
 80060fa:	b948      	cbnz	r0, 8006110 <__smakebuf_r+0x44>
 80060fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006100:	059a      	lsls	r2, r3, #22
 8006102:	d4ef      	bmi.n	80060e4 <__smakebuf_r+0x18>
 8006104:	f023 0303 	bic.w	r3, r3, #3
 8006108:	f043 0302 	orr.w	r3, r3, #2
 800610c:	81a3      	strh	r3, [r4, #12]
 800610e:	e7e3      	b.n	80060d8 <__smakebuf_r+0xc>
 8006110:	4b0d      	ldr	r3, [pc, #52]	; (8006148 <__smakebuf_r+0x7c>)
 8006112:	62b3      	str	r3, [r6, #40]	; 0x28
 8006114:	89a3      	ldrh	r3, [r4, #12]
 8006116:	6020      	str	r0, [r4, #0]
 8006118:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800611c:	81a3      	strh	r3, [r4, #12]
 800611e:	9b00      	ldr	r3, [sp, #0]
 8006120:	6163      	str	r3, [r4, #20]
 8006122:	9b01      	ldr	r3, [sp, #4]
 8006124:	6120      	str	r0, [r4, #16]
 8006126:	b15b      	cbz	r3, 8006140 <__smakebuf_r+0x74>
 8006128:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800612c:	4630      	mov	r0, r6
 800612e:	f000 f8cb 	bl	80062c8 <_isatty_r>
 8006132:	b128      	cbz	r0, 8006140 <__smakebuf_r+0x74>
 8006134:	89a3      	ldrh	r3, [r4, #12]
 8006136:	f023 0303 	bic.w	r3, r3, #3
 800613a:	f043 0301 	orr.w	r3, r3, #1
 800613e:	81a3      	strh	r3, [r4, #12]
 8006140:	89a3      	ldrh	r3, [r4, #12]
 8006142:	431d      	orrs	r5, r3
 8006144:	81a5      	strh	r5, [r4, #12]
 8006146:	e7cd      	b.n	80060e4 <__smakebuf_r+0x18>
 8006148:	08005261 	.word	0x08005261

0800614c <memcpy>:
 800614c:	b510      	push	{r4, lr}
 800614e:	1e43      	subs	r3, r0, #1
 8006150:	440a      	add	r2, r1
 8006152:	4291      	cmp	r1, r2
 8006154:	d100      	bne.n	8006158 <memcpy+0xc>
 8006156:	bd10      	pop	{r4, pc}
 8006158:	f811 4b01 	ldrb.w	r4, [r1], #1
 800615c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006160:	e7f7      	b.n	8006152 <memcpy+0x6>

08006162 <memmove>:
 8006162:	4288      	cmp	r0, r1
 8006164:	b510      	push	{r4, lr}
 8006166:	eb01 0302 	add.w	r3, r1, r2
 800616a:	d807      	bhi.n	800617c <memmove+0x1a>
 800616c:	1e42      	subs	r2, r0, #1
 800616e:	4299      	cmp	r1, r3
 8006170:	d00a      	beq.n	8006188 <memmove+0x26>
 8006172:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006176:	f802 4f01 	strb.w	r4, [r2, #1]!
 800617a:	e7f8      	b.n	800616e <memmove+0xc>
 800617c:	4283      	cmp	r3, r0
 800617e:	d9f5      	bls.n	800616c <memmove+0xa>
 8006180:	1881      	adds	r1, r0, r2
 8006182:	1ad2      	subs	r2, r2, r3
 8006184:	42d3      	cmn	r3, r2
 8006186:	d100      	bne.n	800618a <memmove+0x28>
 8006188:	bd10      	pop	{r4, pc}
 800618a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800618e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8006192:	e7f7      	b.n	8006184 <memmove+0x22>

08006194 <__malloc_lock>:
 8006194:	4770      	bx	lr

08006196 <__malloc_unlock>:
 8006196:	4770      	bx	lr

08006198 <_free_r>:
 8006198:	b538      	push	{r3, r4, r5, lr}
 800619a:	4605      	mov	r5, r0
 800619c:	2900      	cmp	r1, #0
 800619e:	d045      	beq.n	800622c <_free_r+0x94>
 80061a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80061a4:	1f0c      	subs	r4, r1, #4
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	bfb8      	it	lt
 80061aa:	18e4      	addlt	r4, r4, r3
 80061ac:	f7ff fff2 	bl	8006194 <__malloc_lock>
 80061b0:	4a1f      	ldr	r2, [pc, #124]	; (8006230 <_free_r+0x98>)
 80061b2:	6813      	ldr	r3, [r2, #0]
 80061b4:	4610      	mov	r0, r2
 80061b6:	b933      	cbnz	r3, 80061c6 <_free_r+0x2e>
 80061b8:	6063      	str	r3, [r4, #4]
 80061ba:	6014      	str	r4, [r2, #0]
 80061bc:	4628      	mov	r0, r5
 80061be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80061c2:	f7ff bfe8 	b.w	8006196 <__malloc_unlock>
 80061c6:	42a3      	cmp	r3, r4
 80061c8:	d90c      	bls.n	80061e4 <_free_r+0x4c>
 80061ca:	6821      	ldr	r1, [r4, #0]
 80061cc:	1862      	adds	r2, r4, r1
 80061ce:	4293      	cmp	r3, r2
 80061d0:	bf04      	itt	eq
 80061d2:	681a      	ldreq	r2, [r3, #0]
 80061d4:	685b      	ldreq	r3, [r3, #4]
 80061d6:	6063      	str	r3, [r4, #4]
 80061d8:	bf04      	itt	eq
 80061da:	1852      	addeq	r2, r2, r1
 80061dc:	6022      	streq	r2, [r4, #0]
 80061de:	6004      	str	r4, [r0, #0]
 80061e0:	e7ec      	b.n	80061bc <_free_r+0x24>
 80061e2:	4613      	mov	r3, r2
 80061e4:	685a      	ldr	r2, [r3, #4]
 80061e6:	b10a      	cbz	r2, 80061ec <_free_r+0x54>
 80061e8:	42a2      	cmp	r2, r4
 80061ea:	d9fa      	bls.n	80061e2 <_free_r+0x4a>
 80061ec:	6819      	ldr	r1, [r3, #0]
 80061ee:	1858      	adds	r0, r3, r1
 80061f0:	42a0      	cmp	r0, r4
 80061f2:	d10b      	bne.n	800620c <_free_r+0x74>
 80061f4:	6820      	ldr	r0, [r4, #0]
 80061f6:	4401      	add	r1, r0
 80061f8:	1858      	adds	r0, r3, r1
 80061fa:	4282      	cmp	r2, r0
 80061fc:	6019      	str	r1, [r3, #0]
 80061fe:	d1dd      	bne.n	80061bc <_free_r+0x24>
 8006200:	6810      	ldr	r0, [r2, #0]
 8006202:	6852      	ldr	r2, [r2, #4]
 8006204:	605a      	str	r2, [r3, #4]
 8006206:	4401      	add	r1, r0
 8006208:	6019      	str	r1, [r3, #0]
 800620a:	e7d7      	b.n	80061bc <_free_r+0x24>
 800620c:	d902      	bls.n	8006214 <_free_r+0x7c>
 800620e:	230c      	movs	r3, #12
 8006210:	602b      	str	r3, [r5, #0]
 8006212:	e7d3      	b.n	80061bc <_free_r+0x24>
 8006214:	6820      	ldr	r0, [r4, #0]
 8006216:	1821      	adds	r1, r4, r0
 8006218:	428a      	cmp	r2, r1
 800621a:	bf04      	itt	eq
 800621c:	6811      	ldreq	r1, [r2, #0]
 800621e:	6852      	ldreq	r2, [r2, #4]
 8006220:	6062      	str	r2, [r4, #4]
 8006222:	bf04      	itt	eq
 8006224:	1809      	addeq	r1, r1, r0
 8006226:	6021      	streq	r1, [r4, #0]
 8006228:	605c      	str	r4, [r3, #4]
 800622a:	e7c7      	b.n	80061bc <_free_r+0x24>
 800622c:	bd38      	pop	{r3, r4, r5, pc}
 800622e:	bf00      	nop
 8006230:	200000a8 	.word	0x200000a8

08006234 <_realloc_r>:
 8006234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006236:	4607      	mov	r7, r0
 8006238:	4614      	mov	r4, r2
 800623a:	460e      	mov	r6, r1
 800623c:	b921      	cbnz	r1, 8006248 <_realloc_r+0x14>
 800623e:	4611      	mov	r1, r2
 8006240:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006244:	f7ff b8b2 	b.w	80053ac <_malloc_r>
 8006248:	b922      	cbnz	r2, 8006254 <_realloc_r+0x20>
 800624a:	f7ff ffa5 	bl	8006198 <_free_r>
 800624e:	4625      	mov	r5, r4
 8006250:	4628      	mov	r0, r5
 8006252:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006254:	f000 f848 	bl	80062e8 <_malloc_usable_size_r>
 8006258:	42a0      	cmp	r0, r4
 800625a:	d20f      	bcs.n	800627c <_realloc_r+0x48>
 800625c:	4621      	mov	r1, r4
 800625e:	4638      	mov	r0, r7
 8006260:	f7ff f8a4 	bl	80053ac <_malloc_r>
 8006264:	4605      	mov	r5, r0
 8006266:	2800      	cmp	r0, #0
 8006268:	d0f2      	beq.n	8006250 <_realloc_r+0x1c>
 800626a:	4631      	mov	r1, r6
 800626c:	4622      	mov	r2, r4
 800626e:	f7ff ff6d 	bl	800614c <memcpy>
 8006272:	4631      	mov	r1, r6
 8006274:	4638      	mov	r0, r7
 8006276:	f7ff ff8f 	bl	8006198 <_free_r>
 800627a:	e7e9      	b.n	8006250 <_realloc_r+0x1c>
 800627c:	4635      	mov	r5, r6
 800627e:	e7e7      	b.n	8006250 <_realloc_r+0x1c>

08006280 <_read_r>:
 8006280:	b538      	push	{r3, r4, r5, lr}
 8006282:	4c07      	ldr	r4, [pc, #28]	; (80062a0 <_read_r+0x20>)
 8006284:	4605      	mov	r5, r0
 8006286:	4608      	mov	r0, r1
 8006288:	4611      	mov	r1, r2
 800628a:	2200      	movs	r2, #0
 800628c:	6022      	str	r2, [r4, #0]
 800628e:	461a      	mov	r2, r3
 8006290:	f7fa fd14 	bl	8000cbc <_read>
 8006294:	1c43      	adds	r3, r0, #1
 8006296:	d102      	bne.n	800629e <_read_r+0x1e>
 8006298:	6823      	ldr	r3, [r4, #0]
 800629a:	b103      	cbz	r3, 800629e <_read_r+0x1e>
 800629c:	602b      	str	r3, [r5, #0]
 800629e:	bd38      	pop	{r3, r4, r5, pc}
 80062a0:	2000024c 	.word	0x2000024c

080062a4 <_fstat_r>:
 80062a4:	b538      	push	{r3, r4, r5, lr}
 80062a6:	4c07      	ldr	r4, [pc, #28]	; (80062c4 <_fstat_r+0x20>)
 80062a8:	2300      	movs	r3, #0
 80062aa:	4605      	mov	r5, r0
 80062ac:	4608      	mov	r0, r1
 80062ae:	4611      	mov	r1, r2
 80062b0:	6023      	str	r3, [r4, #0]
 80062b2:	f7fa fd2c 	bl	8000d0e <_fstat>
 80062b6:	1c43      	adds	r3, r0, #1
 80062b8:	d102      	bne.n	80062c0 <_fstat_r+0x1c>
 80062ba:	6823      	ldr	r3, [r4, #0]
 80062bc:	b103      	cbz	r3, 80062c0 <_fstat_r+0x1c>
 80062be:	602b      	str	r3, [r5, #0]
 80062c0:	bd38      	pop	{r3, r4, r5, pc}
 80062c2:	bf00      	nop
 80062c4:	2000024c 	.word	0x2000024c

080062c8 <_isatty_r>:
 80062c8:	b538      	push	{r3, r4, r5, lr}
 80062ca:	4c06      	ldr	r4, [pc, #24]	; (80062e4 <_isatty_r+0x1c>)
 80062cc:	2300      	movs	r3, #0
 80062ce:	4605      	mov	r5, r0
 80062d0:	4608      	mov	r0, r1
 80062d2:	6023      	str	r3, [r4, #0]
 80062d4:	f7fa fd2b 	bl	8000d2e <_isatty>
 80062d8:	1c43      	adds	r3, r0, #1
 80062da:	d102      	bne.n	80062e2 <_isatty_r+0x1a>
 80062dc:	6823      	ldr	r3, [r4, #0]
 80062de:	b103      	cbz	r3, 80062e2 <_isatty_r+0x1a>
 80062e0:	602b      	str	r3, [r5, #0]
 80062e2:	bd38      	pop	{r3, r4, r5, pc}
 80062e4:	2000024c 	.word	0x2000024c

080062e8 <_malloc_usable_size_r>:
 80062e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80062ec:	1f18      	subs	r0, r3, #4
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	bfbc      	itt	lt
 80062f2:	580b      	ldrlt	r3, [r1, r0]
 80062f4:	18c0      	addlt	r0, r0, r3
 80062f6:	4770      	bx	lr

080062f8 <_init>:
 80062f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062fa:	bf00      	nop
 80062fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062fe:	bc08      	pop	{r3}
 8006300:	469e      	mov	lr, r3
 8006302:	4770      	bx	lr

08006304 <_fini>:
 8006304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006306:	bf00      	nop
 8006308:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800630a:	bc08      	pop	{r3}
 800630c:	469e      	mov	lr, r3
 800630e:	4770      	bx	lr
