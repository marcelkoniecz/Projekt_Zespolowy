
ProjektZespolowy.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004df0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08004f78  08004f78  00014f78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004fb0  08004fb0  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08004fb0  08004fb0  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004fb0  08004fb0  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004fb0  08004fb0  00014fb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004fb4  08004fb4  00014fb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004fb8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c8  20000010  08004fc8  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001d8  08004fc8  000201d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010204  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001d89  00000000  00000000  00030244  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d20  00000000  00000000  00031fd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c68  00000000  00000000  00032cf0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001b6e1  00000000  00000000  00033958  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c104  00000000  00000000  0004f039  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000a4e04  00000000  00000000  0005b13d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000fff41  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003700  00000000  00000000  000fffbc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004f60 	.word	0x08004f60

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	08004f60 	.word	0x08004f60

080001c8 <HAL_GPIO_EXTI_Callback>:
	HAL_UART_Transmit(&huart2 , (uint8_t*)ptr , len , 50) ;
	return len;
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	4603      	mov	r3, r0
 80001d0:	80fb      	strh	r3, [r7, #6]
    if(GPIO_Pin == LeftSensor_Pin || GPIO_Pin == CenterSensor_Pin || GPIO_Pin == RightSensor_Pin)
 80001d2:	88fb      	ldrh	r3, [r7, #6]
 80001d4:	2b01      	cmp	r3, #1
 80001d6:	d005      	beq.n	80001e4 <HAL_GPIO_EXTI_Callback+0x1c>
 80001d8:	88fb      	ldrh	r3, [r7, #6]
 80001da:	2b20      	cmp	r3, #32
 80001dc:	d002      	beq.n	80001e4 <HAL_GPIO_EXTI_Callback+0x1c>
 80001de:	88fb      	ldrh	r3, [r7, #6]
 80001e0:	2b10      	cmp	r3, #16
 80001e2:	d102      	bne.n	80001ea <HAL_GPIO_EXTI_Callback+0x22>
    {
    	interruptFlag = 1;
 80001e4:	4b04      	ldr	r3, [pc, #16]	; (80001f8 <HAL_GPIO_EXTI_Callback+0x30>)
 80001e6:	2201      	movs	r2, #1
 80001e8:	601a      	str	r2, [r3, #0]
    }
}
 80001ea:	bf00      	nop
 80001ec:	370c      	adds	r7, #12
 80001ee:	46bd      	mov	sp, r7
 80001f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001f4:	4770      	bx	lr
 80001f6:	bf00      	nop
 80001f8:	2000002c 	.word	0x2000002c

080001fc <HAL_UART_RxCpltCallback>:
	HAL_UART_Transmit_DMA(&huart1,"jeden",strlen("jeden"));
	interruptFlagUART = 1;
}*/

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	b082      	sub	sp, #8
 8000200:	af00      	add	r7, sp, #0
 8000202:	6078      	str	r0, [r7, #4]
	if(huart->Instance == huart1.Instance)
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	681a      	ldr	r2, [r3, #0]
 8000208:	4b0b      	ldr	r3, [pc, #44]	; (8000238 <HAL_UART_RxCpltCallback+0x3c>)
 800020a:	681b      	ldr	r3, [r3, #0]
 800020c:	429a      	cmp	r2, r3
 800020e:	d10e      	bne.n	800022e <HAL_UART_RxCpltCallback+0x32>
	{

		HAL_UART_Transmit(&huart2, RX_BUFFER, BUFFER_LEN, 100);
 8000210:	2364      	movs	r3, #100	; 0x64
 8000212:	2201      	movs	r2, #1
 8000214:	4909      	ldr	r1, [pc, #36]	; (800023c <HAL_UART_RxCpltCallback+0x40>)
 8000216:	480a      	ldr	r0, [pc, #40]	; (8000240 <HAL_UART_RxCpltCallback+0x44>)
 8000218:	f003 fd44 	bl	8003ca4 <HAL_UART_Transmit>
		direct = RX_BUFFER[0];
 800021c:	4b07      	ldr	r3, [pc, #28]	; (800023c <HAL_UART_RxCpltCallback+0x40>)
 800021e:	781a      	ldrb	r2, [r3, #0]
 8000220:	4b08      	ldr	r3, [pc, #32]	; (8000244 <HAL_UART_RxCpltCallback+0x48>)
 8000222:	701a      	strb	r2, [r3, #0]
/*
		RX_BUFFER[0]= ' ';
		RX_BUFFER[1]= ' ';
		speed = atoi(RX_BUFFER);*/
		HAL_UART_Receive_DMA(&huart1, RX_BUFFER, BUFFER_LEN);
 8000224:	2201      	movs	r2, #1
 8000226:	4905      	ldr	r1, [pc, #20]	; (800023c <HAL_UART_RxCpltCallback+0x40>)
 8000228:	4803      	ldr	r0, [pc, #12]	; (8000238 <HAL_UART_RxCpltCallback+0x3c>)
 800022a:	f003 fdcf 	bl	8003dcc <HAL_UART_Receive_DMA>
	}
}
 800022e:	bf00      	nop
 8000230:	3708      	adds	r7, #8
 8000232:	46bd      	mov	sp, r7
 8000234:	bd80      	pop	{r7, pc}
 8000236:	bf00      	nop
 8000238:	20000080 	.word	0x20000080
 800023c:	20000038 	.word	0x20000038
 8000240:	20000150 	.word	0x20000150
 8000244:	20000034 	.word	0x20000034

08000248 <MotorControler>:


void MotorControler(uint Motor_AIN1, uint Motor_AIN2, uint Motor_BIN1, uint Motor_BIN2, int PWMA, int PWMB){
 8000248:	b580      	push	{r7, lr}
 800024a:	b084      	sub	sp, #16
 800024c:	af00      	add	r7, sp, #0
 800024e:	60f8      	str	r0, [r7, #12]
 8000250:	60b9      	str	r1, [r7, #8]
 8000252:	607a      	str	r2, [r7, #4]
 8000254:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(MotorSTBY_GPIO_Port, MotorSTBY_Pin, GPIO_PIN_SET);
 8000256:	2201      	movs	r2, #1
 8000258:	2102      	movs	r1, #2
 800025a:	4816      	ldr	r0, [pc, #88]	; (80002b4 <MotorControler+0x6c>)
 800025c:	f001 fa06 	bl	800166c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MotorAIN2_GPIO_Port, MotorAIN2_Pin, Motor_AIN2);
 8000260:	68bb      	ldr	r3, [r7, #8]
 8000262:	b2db      	uxtb	r3, r3
 8000264:	461a      	mov	r2, r3
 8000266:	2101      	movs	r1, #1
 8000268:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800026c:	f001 f9fe 	bl	800166c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MotorAIN1_GPIO_Port, MotorAIN1_Pin, Motor_AIN1);
 8000270:	68fb      	ldr	r3, [r7, #12]
 8000272:	b2db      	uxtb	r3, r3
 8000274:	461a      	mov	r2, r3
 8000276:	2102      	movs	r1, #2
 8000278:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800027c:	f001 f9f6 	bl	800166c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MotorBN2_GPIO_Port, MotorBN2_Pin, Motor_BIN2);
 8000280:	683b      	ldr	r3, [r7, #0]
 8000282:	b2db      	uxtb	r3, r3
 8000284:	461a      	mov	r2, r3
 8000286:	2140      	movs	r1, #64	; 0x40
 8000288:	480a      	ldr	r0, [pc, #40]	; (80002b4 <MotorControler+0x6c>)
 800028a:	f001 f9ef 	bl	800166c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MotorBN1_GPIO_Port, MotorBN1_Pin, Motor_BIN1);
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	b2db      	uxtb	r3, r3
 8000292:	461a      	mov	r2, r3
 8000294:	2180      	movs	r1, #128	; 0x80
 8000296:	4807      	ldr	r0, [pc, #28]	; (80002b4 <MotorControler+0x6c>)
 8000298:	f001 f9e8 	bl	800166c <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, PWMA);
 800029c:	4b06      	ldr	r3, [pc, #24]	; (80002b8 <MotorControler+0x70>)
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	69ba      	ldr	r2, [r7, #24]
 80002a2:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, PWMB);
 80002a4:	4b04      	ldr	r3, [pc, #16]	; (80002b8 <MotorControler+0x70>)
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	69fa      	ldr	r2, [r7, #28]
 80002aa:	641a      	str	r2, [r3, #64]	; 0x40
}
 80002ac:	bf00      	nop
 80002ae:	3710      	adds	r7, #16
 80002b0:	46bd      	mov	sp, r7
 80002b2:	bd80      	pop	{r7, pc}
 80002b4:	48000400 	.word	0x48000400
 80002b8:	20000104 	.word	0x20000104

080002bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	b082      	sub	sp, #8
 80002c0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002c2:	f000 fca1 	bl	8000c08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002c6:	f000 f8ad 	bl	8000424 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002ca:	f000 fa37 	bl	800073c <MX_GPIO_Init>
  MX_DMA_Init();
 80002ce:	f000 fa17 	bl	8000700 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80002d2:	f000 f9e5 	bl	80006a0 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80002d6:	f000 f8fb 	bl	80004d0 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80002da:	f000 f9b1 	bl	8000640 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pwm_duty);
 80002de:	4b49      	ldr	r3, [pc, #292]	; (8000404 <main+0x148>)
 80002e0:	681a      	ldr	r2, [r3, #0]
 80002e2:	4b49      	ldr	r3, [pc, #292]	; (8000408 <main+0x14c>)
 80002e4:	681b      	ldr	r3, [r3, #0]
 80002e6:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, pwm_duty);
 80002e8:	4b46      	ldr	r3, [pc, #280]	; (8000404 <main+0x148>)
 80002ea:	681a      	ldr	r2, [r3, #0]
 80002ec:	4b46      	ldr	r3, [pc, #280]	; (8000408 <main+0x14c>)
 80002ee:	681b      	ldr	r3, [r3, #0]
 80002f0:	641a      	str	r2, [r3, #64]	; 0x40
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80002f2:	2100      	movs	r1, #0
 80002f4:	4844      	ldr	r0, [pc, #272]	; (8000408 <main+0x14c>)
 80002f6:	f002 fd05 	bl	8002d04 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80002fa:	210c      	movs	r1, #12
 80002fc:	4842      	ldr	r0, [pc, #264]	; (8000408 <main+0x14c>)
 80002fe:	f002 fd01 	bl	8002d04 <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(BT_Enable_GPIO_Port, BT_Enable_Pin, GPIO_PIN_RESET);
 8000302:	2200      	movs	r2, #0
 8000304:	2180      	movs	r1, #128	; 0x80
 8000306:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800030a:	f001 f9af 	bl	800166c <HAL_GPIO_WritePin>
  HAL_UART_Receive_DMA(&huart1, RX_BUFFER, BUFFER_LEN);
 800030e:	2201      	movs	r2, #1
 8000310:	493e      	ldr	r1, [pc, #248]	; (800040c <main+0x150>)
 8000312:	483f      	ldr	r0, [pc, #252]	; (8000410 <main+0x154>)
 8000314:	f003 fd5a 	bl	8003dcc <HAL_UART_Receive_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(interruptFlag == 1){
 8000318:	4b3e      	ldr	r3, [pc, #248]	; (8000414 <main+0x158>)
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	2b01      	cmp	r3, #1
 800031e:	d111      	bne.n	8000344 <main+0x88>
		  HAL_Delay(10);
 8000320:	200a      	movs	r0, #10
 8000322:	f000 fcd7 	bl	8000cd4 <HAL_Delay>
		  HAL_GPIO_ReadPin(LeftSensor_GPIO_Port, LeftSensor_Pin);
 8000326:	2101      	movs	r1, #1
 8000328:	483b      	ldr	r0, [pc, #236]	; (8000418 <main+0x15c>)
 800032a:	f001 f987 	bl	800163c <HAL_GPIO_ReadPin>
		  HAL_GPIO_ReadPin(CenterSensor_GPIO_Port, CenterSensor_Pin);
 800032e:	2120      	movs	r1, #32
 8000330:	4839      	ldr	r0, [pc, #228]	; (8000418 <main+0x15c>)
 8000332:	f001 f983 	bl	800163c <HAL_GPIO_ReadPin>
		  HAL_GPIO_ReadPin(RightSensor_GPIO_Port, RightSensor_Pin);
 8000336:	2110      	movs	r1, #16
 8000338:	4837      	ldr	r0, [pc, #220]	; (8000418 <main+0x15c>)
 800033a:	f001 f97f 	bl	800163c <HAL_GPIO_ReadPin>
		  interruptFlag = 0;
 800033e:	4b35      	ldr	r3, [pc, #212]	; (8000414 <main+0x158>)
 8000340:	2200      	movs	r2, #0
 8000342:	601a      	str	r2, [r3, #0]

	  }

	  if(speed < 999 && speed >= 0){
 8000344:	4b35      	ldr	r3, [pc, #212]	; (800041c <main+0x160>)
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	f240 32e6 	movw	r2, #998	; 0x3e6
 800034c:	4293      	cmp	r3, r2
 800034e:	d852      	bhi.n	80003f6 <main+0x13a>
 8000350:	4b32      	ldr	r3, [pc, #200]	; (800041c <main+0x160>)
 8000352:	681b      	ldr	r3, [r3, #0]
	  	  switch (direct) {
 8000354:	4b32      	ldr	r3, [pc, #200]	; (8000420 <main+0x164>)
 8000356:	781b      	ldrb	r3, [r3, #0]
 8000358:	b2db      	uxtb	r3, r3
 800035a:	3b30      	subs	r3, #48	; 0x30
 800035c:	2b04      	cmp	r3, #4
 800035e:	d84c      	bhi.n	80003fa <main+0x13e>
 8000360:	a201      	add	r2, pc, #4	; (adr r2, 8000368 <main+0xac>)
 8000362:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000366:	bf00      	nop
 8000368:	0800037d 	.word	0x0800037d
 800036c:	08000393 	.word	0x08000393
 8000370:	080003ab 	.word	0x080003ab
 8000374:	080003c3 	.word	0x080003c3
 8000378:	080003dd 	.word	0x080003dd
			case '0':
				MotorControler(0, 0, 0, 0, 0, 0);
 800037c:	2300      	movs	r3, #0
 800037e:	9301      	str	r3, [sp, #4]
 8000380:	2300      	movs	r3, #0
 8000382:	9300      	str	r3, [sp, #0]
 8000384:	2300      	movs	r3, #0
 8000386:	2200      	movs	r2, #0
 8000388:	2100      	movs	r1, #0
 800038a:	2000      	movs	r0, #0
 800038c:	f7ff ff5c 	bl	8000248 <MotorControler>
			break;
 8000390:	e034      	b.n	80003fc <main+0x140>
			case '1':
				MotorControler(1, 0, 0, 0, 300 , 0);
 8000392:	2300      	movs	r3, #0
 8000394:	9301      	str	r3, [sp, #4]
 8000396:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800039a:	9300      	str	r3, [sp, #0]
 800039c:	2300      	movs	r3, #0
 800039e:	2200      	movs	r2, #0
 80003a0:	2100      	movs	r1, #0
 80003a2:	2001      	movs	r0, #1
 80003a4:	f7ff ff50 	bl	8000248 <MotorControler>
			break;
 80003a8:	e028      	b.n	80003fc <main+0x140>
			case '2':
				MotorControler(0, 0, 1, 0, 0, 300 );
 80003aa:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80003ae:	9301      	str	r3, [sp, #4]
 80003b0:	2300      	movs	r3, #0
 80003b2:	9300      	str	r3, [sp, #0]
 80003b4:	2300      	movs	r3, #0
 80003b6:	2201      	movs	r2, #1
 80003b8:	2100      	movs	r1, #0
 80003ba:	2000      	movs	r0, #0
 80003bc:	f7ff ff44 	bl	8000248 <MotorControler>
			break;
 80003c0:	e01c      	b.n	80003fc <main+0x140>
			case '3':
				MotorControler(1, 0, 1, 0, 300 , 300 );
 80003c2:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80003c6:	9301      	str	r3, [sp, #4]
 80003c8:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80003cc:	9300      	str	r3, [sp, #0]
 80003ce:	2300      	movs	r3, #0
 80003d0:	2201      	movs	r2, #1
 80003d2:	2100      	movs	r1, #0
 80003d4:	2001      	movs	r0, #1
 80003d6:	f7ff ff37 	bl	8000248 <MotorControler>
			break;
 80003da:	e00f      	b.n	80003fc <main+0x140>
			case '4':
				MotorControler(0, 1, 0, 1, 300, 300);
 80003dc:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80003e0:	9301      	str	r3, [sp, #4]
 80003e2:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80003e6:	9300      	str	r3, [sp, #0]
 80003e8:	2301      	movs	r3, #1
 80003ea:	2200      	movs	r2, #0
 80003ec:	2101      	movs	r1, #1
 80003ee:	2000      	movs	r0, #0
 80003f0:	f7ff ff2a 	bl	8000248 <MotorControler>
			default:
			break;
 80003f4:	e001      	b.n	80003fa <main+0x13e>
	  	  }
}
 80003f6:	bf00      	nop
 80003f8:	e000      	b.n	80003fc <main+0x140>
			break;
 80003fa:	bf00      	nop
	  HAL_Delay(200);
 80003fc:	20c8      	movs	r0, #200	; 0xc8
 80003fe:	f000 fc69 	bl	8000cd4 <HAL_Delay>
	  if(interruptFlag == 1){
 8000402:	e789      	b.n	8000318 <main+0x5c>
 8000404:	20000030 	.word	0x20000030
 8000408:	20000104 	.word	0x20000104
 800040c:	20000038 	.word	0x20000038
 8000410:	20000080 	.word	0x20000080
 8000414:	2000002c 	.word	0x2000002c
 8000418:	48000400 	.word	0x48000400
 800041c:	20000000 	.word	0x20000000
 8000420:	20000034 	.word	0x20000034

08000424 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	b096      	sub	sp, #88	; 0x58
 8000428:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800042a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800042e:	2228      	movs	r2, #40	; 0x28
 8000430:	2100      	movs	r1, #0
 8000432:	4618      	mov	r0, r3
 8000434:	f004 fd8c 	bl	8004f50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000438:	f107 031c 	add.w	r3, r7, #28
 800043c:	2200      	movs	r2, #0
 800043e:	601a      	str	r2, [r3, #0]
 8000440:	605a      	str	r2, [r3, #4]
 8000442:	609a      	str	r2, [r3, #8]
 8000444:	60da      	str	r2, [r3, #12]
 8000446:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000448:	1d3b      	adds	r3, r7, #4
 800044a:	2200      	movs	r2, #0
 800044c:	601a      	str	r2, [r3, #0]
 800044e:	605a      	str	r2, [r3, #4]
 8000450:	609a      	str	r2, [r3, #8]
 8000452:	60da      	str	r2, [r3, #12]
 8000454:	611a      	str	r2, [r3, #16]
 8000456:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000458:	2302      	movs	r3, #2
 800045a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800045c:	2301      	movs	r3, #1
 800045e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000460:	2310      	movs	r3, #16
 8000462:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000464:	2300      	movs	r3, #0
 8000466:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000468:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800046c:	4618      	mov	r0, r3
 800046e:	f001 f92d 	bl	80016cc <HAL_RCC_OscConfig>
 8000472:	4603      	mov	r3, r0
 8000474:	2b00      	cmp	r3, #0
 8000476:	d001      	beq.n	800047c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000478:	f000 f9f4 	bl	8000864 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800047c:	230f      	movs	r3, #15
 800047e:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000480:	2300      	movs	r3, #0
 8000482:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000484:	2300      	movs	r3, #0
 8000486:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000488:	2300      	movs	r3, #0
 800048a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800048c:	2300      	movs	r3, #0
 800048e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000490:	f107 031c 	add.w	r3, r7, #28
 8000494:	2100      	movs	r1, #0
 8000496:	4618      	mov	r0, r3
 8000498:	f002 f820 	bl	80024dc <HAL_RCC_ClockConfig>
 800049c:	4603      	mov	r3, r0
 800049e:	2b00      	cmp	r3, #0
 80004a0:	d001      	beq.n	80004a6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80004a2:	f000 f9df 	bl	8000864 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_TIM1;
 80004a6:	f241 0301 	movw	r3, #4097	; 0x1001
 80004aa:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80004ac:	2300      	movs	r3, #0
 80004ae:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 80004b0:	2300      	movs	r3, #0
 80004b2:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004b4:	1d3b      	adds	r3, r7, #4
 80004b6:	4618      	mov	r0, r3
 80004b8:	f002 fa46 	bl	8002948 <HAL_RCCEx_PeriphCLKConfig>
 80004bc:	4603      	mov	r3, r0
 80004be:	2b00      	cmp	r3, #0
 80004c0:	d001      	beq.n	80004c6 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80004c2:	f000 f9cf 	bl	8000864 <Error_Handler>
  }
}
 80004c6:	bf00      	nop
 80004c8:	3758      	adds	r7, #88	; 0x58
 80004ca:	46bd      	mov	sp, r7
 80004cc:	bd80      	pop	{r7, pc}
	...

080004d0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b09a      	sub	sp, #104	; 0x68
 80004d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80004d6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80004da:	2200      	movs	r2, #0
 80004dc:	601a      	str	r2, [r3, #0]
 80004de:	605a      	str	r2, [r3, #4]
 80004e0:	609a      	str	r2, [r3, #8]
 80004e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004e4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80004e8:	2200      	movs	r2, #0
 80004ea:	601a      	str	r2, [r3, #0]
 80004ec:	605a      	str	r2, [r3, #4]
 80004ee:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80004f0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80004f4:	2200      	movs	r2, #0
 80004f6:	601a      	str	r2, [r3, #0]
 80004f8:	605a      	str	r2, [r3, #4]
 80004fa:	609a      	str	r2, [r3, #8]
 80004fc:	60da      	str	r2, [r3, #12]
 80004fe:	611a      	str	r2, [r3, #16]
 8000500:	615a      	str	r2, [r3, #20]
 8000502:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000504:	1d3b      	adds	r3, r7, #4
 8000506:	222c      	movs	r2, #44	; 0x2c
 8000508:	2100      	movs	r1, #0
 800050a:	4618      	mov	r0, r3
 800050c:	f004 fd20 	bl	8004f50 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000510:	4b49      	ldr	r3, [pc, #292]	; (8000638 <MX_TIM1_Init+0x168>)
 8000512:	4a4a      	ldr	r2, [pc, #296]	; (800063c <MX_TIM1_Init+0x16c>)
 8000514:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 79;
 8000516:	4b48      	ldr	r3, [pc, #288]	; (8000638 <MX_TIM1_Init+0x168>)
 8000518:	224f      	movs	r2, #79	; 0x4f
 800051a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800051c:	4b46      	ldr	r3, [pc, #280]	; (8000638 <MX_TIM1_Init+0x168>)
 800051e:	2200      	movs	r2, #0
 8000520:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8000522:	4b45      	ldr	r3, [pc, #276]	; (8000638 <MX_TIM1_Init+0x168>)
 8000524:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000528:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800052a:	4b43      	ldr	r3, [pc, #268]	; (8000638 <MX_TIM1_Init+0x168>)
 800052c:	2200      	movs	r2, #0
 800052e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000530:	4b41      	ldr	r3, [pc, #260]	; (8000638 <MX_TIM1_Init+0x168>)
 8000532:	2200      	movs	r2, #0
 8000534:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000536:	4b40      	ldr	r3, [pc, #256]	; (8000638 <MX_TIM1_Init+0x168>)
 8000538:	2200      	movs	r2, #0
 800053a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800053c:	483e      	ldr	r0, [pc, #248]	; (8000638 <MX_TIM1_Init+0x168>)
 800053e:	f002 fb29 	bl	8002b94 <HAL_TIM_Base_Init>
 8000542:	4603      	mov	r3, r0
 8000544:	2b00      	cmp	r3, #0
 8000546:	d001      	beq.n	800054c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000548:	f000 f98c 	bl	8000864 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800054c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000550:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000552:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000556:	4619      	mov	r1, r3
 8000558:	4837      	ldr	r0, [pc, #220]	; (8000638 <MX_TIM1_Init+0x168>)
 800055a:	f002 fdd3 	bl	8003104 <HAL_TIM_ConfigClockSource>
 800055e:	4603      	mov	r3, r0
 8000560:	2b00      	cmp	r3, #0
 8000562:	d001      	beq.n	8000568 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000564:	f000 f97e 	bl	8000864 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000568:	4833      	ldr	r0, [pc, #204]	; (8000638 <MX_TIM1_Init+0x168>)
 800056a:	f002 fb6a 	bl	8002c42 <HAL_TIM_PWM_Init>
 800056e:	4603      	mov	r3, r0
 8000570:	2b00      	cmp	r3, #0
 8000572:	d001      	beq.n	8000578 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000574:	f000 f976 	bl	8000864 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000578:	2300      	movs	r3, #0
 800057a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800057c:	2300      	movs	r3, #0
 800057e:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000580:	2300      	movs	r3, #0
 8000582:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000584:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000588:	4619      	mov	r1, r3
 800058a:	482b      	ldr	r0, [pc, #172]	; (8000638 <MX_TIM1_Init+0x168>)
 800058c:	f003 fa56 	bl	8003a3c <HAL_TIMEx_MasterConfigSynchronization>
 8000590:	4603      	mov	r3, r0
 8000592:	2b00      	cmp	r3, #0
 8000594:	d001      	beq.n	800059a <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000596:	f000 f965 	bl	8000864 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800059a:	2360      	movs	r3, #96	; 0x60
 800059c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 800059e:	2300      	movs	r3, #0
 80005a0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80005a2:	2300      	movs	r3, #0
 80005a4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80005a6:	2300      	movs	r3, #0
 80005a8:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80005aa:	2300      	movs	r3, #0
 80005ac:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80005ae:	2300      	movs	r3, #0
 80005b0:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80005b2:	2300      	movs	r3, #0
 80005b4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80005b6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80005ba:	2200      	movs	r2, #0
 80005bc:	4619      	mov	r1, r3
 80005be:	481e      	ldr	r0, [pc, #120]	; (8000638 <MX_TIM1_Init+0x168>)
 80005c0:	f002 fc8c 	bl	8002edc <HAL_TIM_PWM_ConfigChannel>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d001      	beq.n	80005ce <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80005ca:	f000 f94b 	bl	8000864 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80005ce:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80005d2:	220c      	movs	r2, #12
 80005d4:	4619      	mov	r1, r3
 80005d6:	4818      	ldr	r0, [pc, #96]	; (8000638 <MX_TIM1_Init+0x168>)
 80005d8:	f002 fc80 	bl	8002edc <HAL_TIM_PWM_ConfigChannel>
 80005dc:	4603      	mov	r3, r0
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d001      	beq.n	80005e6 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 80005e2:	f000 f93f 	bl	8000864 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80005e6:	2300      	movs	r3, #0
 80005e8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80005ea:	2300      	movs	r3, #0
 80005ec:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80005ee:	2300      	movs	r3, #0
 80005f0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80005f2:	2300      	movs	r3, #0
 80005f4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80005f6:	2300      	movs	r3, #0
 80005f8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80005fa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005fe:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000600:	2300      	movs	r3, #0
 8000602:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000604:	2300      	movs	r3, #0
 8000606:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000608:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800060c:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800060e:	2300      	movs	r3, #0
 8000610:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000612:	2300      	movs	r3, #0
 8000614:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000616:	1d3b      	adds	r3, r7, #4
 8000618:	4619      	mov	r1, r3
 800061a:	4807      	ldr	r0, [pc, #28]	; (8000638 <MX_TIM1_Init+0x168>)
 800061c:	f003 fa7c 	bl	8003b18 <HAL_TIMEx_ConfigBreakDeadTime>
 8000620:	4603      	mov	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	d001      	beq.n	800062a <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 8000626:	f000 f91d 	bl	8000864 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800062a:	4803      	ldr	r0, [pc, #12]	; (8000638 <MX_TIM1_Init+0x168>)
 800062c:	f000 f966 	bl	80008fc <HAL_TIM_MspPostInit>

}
 8000630:	bf00      	nop
 8000632:	3768      	adds	r7, #104	; 0x68
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}
 8000638:	20000104 	.word	0x20000104
 800063c:	40012c00 	.word	0x40012c00

08000640 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000644:	4b14      	ldr	r3, [pc, #80]	; (8000698 <MX_USART1_UART_Init+0x58>)
 8000646:	4a15      	ldr	r2, [pc, #84]	; (800069c <MX_USART1_UART_Init+0x5c>)
 8000648:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800064a:	4b13      	ldr	r3, [pc, #76]	; (8000698 <MX_USART1_UART_Init+0x58>)
 800064c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000650:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000652:	4b11      	ldr	r3, [pc, #68]	; (8000698 <MX_USART1_UART_Init+0x58>)
 8000654:	2200      	movs	r2, #0
 8000656:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000658:	4b0f      	ldr	r3, [pc, #60]	; (8000698 <MX_USART1_UART_Init+0x58>)
 800065a:	2200      	movs	r2, #0
 800065c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800065e:	4b0e      	ldr	r3, [pc, #56]	; (8000698 <MX_USART1_UART_Init+0x58>)
 8000660:	2200      	movs	r2, #0
 8000662:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000664:	4b0c      	ldr	r3, [pc, #48]	; (8000698 <MX_USART1_UART_Init+0x58>)
 8000666:	220c      	movs	r2, #12
 8000668:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800066a:	4b0b      	ldr	r3, [pc, #44]	; (8000698 <MX_USART1_UART_Init+0x58>)
 800066c:	2200      	movs	r2, #0
 800066e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000670:	4b09      	ldr	r3, [pc, #36]	; (8000698 <MX_USART1_UART_Init+0x58>)
 8000672:	2200      	movs	r2, #0
 8000674:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000676:	4b08      	ldr	r3, [pc, #32]	; (8000698 <MX_USART1_UART_Init+0x58>)
 8000678:	2200      	movs	r2, #0
 800067a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800067c:	4b06      	ldr	r3, [pc, #24]	; (8000698 <MX_USART1_UART_Init+0x58>)
 800067e:	2200      	movs	r2, #0
 8000680:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000682:	4805      	ldr	r0, [pc, #20]	; (8000698 <MX_USART1_UART_Init+0x58>)
 8000684:	f003 fac0 	bl	8003c08 <HAL_UART_Init>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800068e:	f000 f8e9 	bl	8000864 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000692:	bf00      	nop
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	20000080 	.word	0x20000080
 800069c:	40013800 	.word	0x40013800

080006a0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006a4:	4b14      	ldr	r3, [pc, #80]	; (80006f8 <MX_USART2_UART_Init+0x58>)
 80006a6:	4a15      	ldr	r2, [pc, #84]	; (80006fc <MX_USART2_UART_Init+0x5c>)
 80006a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80006aa:	4b13      	ldr	r3, [pc, #76]	; (80006f8 <MX_USART2_UART_Init+0x58>)
 80006ac:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80006b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006b2:	4b11      	ldr	r3, [pc, #68]	; (80006f8 <MX_USART2_UART_Init+0x58>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006b8:	4b0f      	ldr	r3, [pc, #60]	; (80006f8 <MX_USART2_UART_Init+0x58>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006be:	4b0e      	ldr	r3, [pc, #56]	; (80006f8 <MX_USART2_UART_Init+0x58>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006c4:	4b0c      	ldr	r3, [pc, #48]	; (80006f8 <MX_USART2_UART_Init+0x58>)
 80006c6:	220c      	movs	r2, #12
 80006c8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006ca:	4b0b      	ldr	r3, [pc, #44]	; (80006f8 <MX_USART2_UART_Init+0x58>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006d0:	4b09      	ldr	r3, [pc, #36]	; (80006f8 <MX_USART2_UART_Init+0x58>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006d6:	4b08      	ldr	r3, [pc, #32]	; (80006f8 <MX_USART2_UART_Init+0x58>)
 80006d8:	2200      	movs	r2, #0
 80006da:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006dc:	4b06      	ldr	r3, [pc, #24]	; (80006f8 <MX_USART2_UART_Init+0x58>)
 80006de:	2200      	movs	r2, #0
 80006e0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006e2:	4805      	ldr	r0, [pc, #20]	; (80006f8 <MX_USART2_UART_Init+0x58>)
 80006e4:	f003 fa90 	bl	8003c08 <HAL_UART_Init>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80006ee:	f000 f8b9 	bl	8000864 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006f2:	bf00      	nop
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	20000150 	.word	0x20000150
 80006fc:	40004400 	.word	0x40004400

08000700 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000706:	4b0c      	ldr	r3, [pc, #48]	; (8000738 <MX_DMA_Init+0x38>)
 8000708:	695b      	ldr	r3, [r3, #20]
 800070a:	4a0b      	ldr	r2, [pc, #44]	; (8000738 <MX_DMA_Init+0x38>)
 800070c:	f043 0301 	orr.w	r3, r3, #1
 8000710:	6153      	str	r3, [r2, #20]
 8000712:	4b09      	ldr	r3, [pc, #36]	; (8000738 <MX_DMA_Init+0x38>)
 8000714:	695b      	ldr	r3, [r3, #20]
 8000716:	f003 0301 	and.w	r3, r3, #1
 800071a:	607b      	str	r3, [r7, #4]
 800071c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800071e:	2200      	movs	r2, #0
 8000720:	2100      	movs	r1, #0
 8000722:	200f      	movs	r0, #15
 8000724:	f000 fbd3 	bl	8000ece <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000728:	200f      	movs	r0, #15
 800072a:	f000 fbec 	bl	8000f06 <HAL_NVIC_EnableIRQ>

}
 800072e:	bf00      	nop
 8000730:	3708      	adds	r7, #8
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	40021000 	.word	0x40021000

0800073c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b088      	sub	sp, #32
 8000740:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000742:	f107 030c 	add.w	r3, r7, #12
 8000746:	2200      	movs	r2, #0
 8000748:	601a      	str	r2, [r3, #0]
 800074a:	605a      	str	r2, [r3, #4]
 800074c:	609a      	str	r2, [r3, #8]
 800074e:	60da      	str	r2, [r3, #12]
 8000750:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000752:	4b42      	ldr	r3, [pc, #264]	; (800085c <MX_GPIO_Init+0x120>)
 8000754:	695b      	ldr	r3, [r3, #20]
 8000756:	4a41      	ldr	r2, [pc, #260]	; (800085c <MX_GPIO_Init+0x120>)
 8000758:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800075c:	6153      	str	r3, [r2, #20]
 800075e:	4b3f      	ldr	r3, [pc, #252]	; (800085c <MX_GPIO_Init+0x120>)
 8000760:	695b      	ldr	r3, [r3, #20]
 8000762:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000766:	60bb      	str	r3, [r7, #8]
 8000768:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800076a:	4b3c      	ldr	r3, [pc, #240]	; (800085c <MX_GPIO_Init+0x120>)
 800076c:	695b      	ldr	r3, [r3, #20]
 800076e:	4a3b      	ldr	r2, [pc, #236]	; (800085c <MX_GPIO_Init+0x120>)
 8000770:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000774:	6153      	str	r3, [r2, #20]
 8000776:	4b39      	ldr	r3, [pc, #228]	; (800085c <MX_GPIO_Init+0x120>)
 8000778:	695b      	ldr	r3, [r3, #20]
 800077a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800077e:	607b      	str	r3, [r7, #4]
 8000780:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000782:	4b36      	ldr	r3, [pc, #216]	; (800085c <MX_GPIO_Init+0x120>)
 8000784:	695b      	ldr	r3, [r3, #20]
 8000786:	4a35      	ldr	r2, [pc, #212]	; (800085c <MX_GPIO_Init+0x120>)
 8000788:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800078c:	6153      	str	r3, [r2, #20]
 800078e:	4b33      	ldr	r3, [pc, #204]	; (800085c <MX_GPIO_Init+0x120>)
 8000790:	695b      	ldr	r3, [r3, #20]
 8000792:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000796:	603b      	str	r3, [r7, #0]
 8000798:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MotorAIN2_Pin|MotorAIN1_Pin|BT_Enable_Pin, GPIO_PIN_RESET);
 800079a:	2200      	movs	r2, #0
 800079c:	2183      	movs	r1, #131	; 0x83
 800079e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007a2:	f000 ff63 	bl	800166c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MotorSTBY_Pin|LED3_Pin|MotorBN2_Pin|MotorBN1_Pin, GPIO_PIN_RESET);
 80007a6:	2200      	movs	r2, #0
 80007a8:	21ca      	movs	r1, #202	; 0xca
 80007aa:	482d      	ldr	r0, [pc, #180]	; (8000860 <MX_GPIO_Init+0x124>)
 80007ac:	f000 ff5e 	bl	800166c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : MotorAIN2_Pin MotorAIN1_Pin */
  GPIO_InitStruct.Pin = MotorAIN2_Pin|MotorAIN1_Pin;
 80007b0:	2303      	movs	r3, #3
 80007b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007b4:	2301      	movs	r3, #1
 80007b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b8:	2300      	movs	r3, #0
 80007ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007bc:	2300      	movs	r3, #0
 80007be:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007c0:	f107 030c 	add.w	r3, r7, #12
 80007c4:	4619      	mov	r1, r3
 80007c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007ca:	f000 fdc5 	bl	8001358 <HAL_GPIO_Init>

  /*Configure GPIO pin : BT_Enable_Pin */
  GPIO_InitStruct.Pin = BT_Enable_Pin;
 80007ce:	2380      	movs	r3, #128	; 0x80
 80007d0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007d2:	2301      	movs	r3, #1
 80007d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007d6:	2301      	movs	r3, #1
 80007d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007da:	2300      	movs	r3, #0
 80007dc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BT_Enable_GPIO_Port, &GPIO_InitStruct);
 80007de:	f107 030c 	add.w	r3, r7, #12
 80007e2:	4619      	mov	r1, r3
 80007e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007e8:	f000 fdb6 	bl	8001358 <HAL_GPIO_Init>

  /*Configure GPIO pins : LeftSensor_Pin RightSensor_Pin CenterSensor_Pin */
  GPIO_InitStruct.Pin = LeftSensor_Pin|RightSensor_Pin|CenterSensor_Pin;
 80007ec:	2331      	movs	r3, #49	; 0x31
 80007ee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007f0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80007f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f6:	2300      	movs	r3, #0
 80007f8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007fa:	f107 030c 	add.w	r3, r7, #12
 80007fe:	4619      	mov	r1, r3
 8000800:	4817      	ldr	r0, [pc, #92]	; (8000860 <MX_GPIO_Init+0x124>)
 8000802:	f000 fda9 	bl	8001358 <HAL_GPIO_Init>

  /*Configure GPIO pins : MotorSTBY_Pin LED3_Pin MotorBN2_Pin MotorBN1_Pin */
  GPIO_InitStruct.Pin = MotorSTBY_Pin|LED3_Pin|MotorBN2_Pin|MotorBN1_Pin;
 8000806:	23ca      	movs	r3, #202	; 0xca
 8000808:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800080a:	2301      	movs	r3, #1
 800080c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080e:	2300      	movs	r3, #0
 8000810:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000812:	2300      	movs	r3, #0
 8000814:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000816:	f107 030c 	add.w	r3, r7, #12
 800081a:	4619      	mov	r1, r3
 800081c:	4810      	ldr	r0, [pc, #64]	; (8000860 <MX_GPIO_Init+0x124>)
 800081e:	f000 fd9b 	bl	8001358 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000822:	2200      	movs	r2, #0
 8000824:	2100      	movs	r1, #0
 8000826:	2006      	movs	r0, #6
 8000828:	f000 fb51 	bl	8000ece <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800082c:	2006      	movs	r0, #6
 800082e:	f000 fb6a 	bl	8000f06 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8000832:	2200      	movs	r2, #0
 8000834:	2100      	movs	r1, #0
 8000836:	200a      	movs	r0, #10
 8000838:	f000 fb49 	bl	8000ece <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800083c:	200a      	movs	r0, #10
 800083e:	f000 fb62 	bl	8000f06 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000842:	2200      	movs	r2, #0
 8000844:	2100      	movs	r1, #0
 8000846:	2017      	movs	r0, #23
 8000848:	f000 fb41 	bl	8000ece <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800084c:	2017      	movs	r0, #23
 800084e:	f000 fb5a 	bl	8000f06 <HAL_NVIC_EnableIRQ>

}
 8000852:	bf00      	nop
 8000854:	3720      	adds	r7, #32
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	40021000 	.word	0x40021000
 8000860:	48000400 	.word	0x48000400

08000864 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000868:	bf00      	nop
 800086a:	46bd      	mov	sp, r7
 800086c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000870:	4770      	bx	lr
	...

08000874 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000874:	b480      	push	{r7}
 8000876:	b083      	sub	sp, #12
 8000878:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800087a:	4b0f      	ldr	r3, [pc, #60]	; (80008b8 <HAL_MspInit+0x44>)
 800087c:	699b      	ldr	r3, [r3, #24]
 800087e:	4a0e      	ldr	r2, [pc, #56]	; (80008b8 <HAL_MspInit+0x44>)
 8000880:	f043 0301 	orr.w	r3, r3, #1
 8000884:	6193      	str	r3, [r2, #24]
 8000886:	4b0c      	ldr	r3, [pc, #48]	; (80008b8 <HAL_MspInit+0x44>)
 8000888:	699b      	ldr	r3, [r3, #24]
 800088a:	f003 0301 	and.w	r3, r3, #1
 800088e:	607b      	str	r3, [r7, #4]
 8000890:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000892:	4b09      	ldr	r3, [pc, #36]	; (80008b8 <HAL_MspInit+0x44>)
 8000894:	69db      	ldr	r3, [r3, #28]
 8000896:	4a08      	ldr	r2, [pc, #32]	; (80008b8 <HAL_MspInit+0x44>)
 8000898:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800089c:	61d3      	str	r3, [r2, #28]
 800089e:	4b06      	ldr	r3, [pc, #24]	; (80008b8 <HAL_MspInit+0x44>)
 80008a0:	69db      	ldr	r3, [r3, #28]
 80008a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008a6:	603b      	str	r3, [r7, #0]
 80008a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008aa:	bf00      	nop
 80008ac:	370c      	adds	r7, #12
 80008ae:	46bd      	mov	sp, r7
 80008b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b4:	4770      	bx	lr
 80008b6:	bf00      	nop
 80008b8:	40021000 	.word	0x40021000

080008bc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80008bc:	b480      	push	{r7}
 80008be:	b085      	sub	sp, #20
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	4a0a      	ldr	r2, [pc, #40]	; (80008f4 <HAL_TIM_Base_MspInit+0x38>)
 80008ca:	4293      	cmp	r3, r2
 80008cc:	d10b      	bne.n	80008e6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80008ce:	4b0a      	ldr	r3, [pc, #40]	; (80008f8 <HAL_TIM_Base_MspInit+0x3c>)
 80008d0:	699b      	ldr	r3, [r3, #24]
 80008d2:	4a09      	ldr	r2, [pc, #36]	; (80008f8 <HAL_TIM_Base_MspInit+0x3c>)
 80008d4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80008d8:	6193      	str	r3, [r2, #24]
 80008da:	4b07      	ldr	r3, [pc, #28]	; (80008f8 <HAL_TIM_Base_MspInit+0x3c>)
 80008dc:	699b      	ldr	r3, [r3, #24]
 80008de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80008e2:	60fb      	str	r3, [r7, #12]
 80008e4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80008e6:	bf00      	nop
 80008e8:	3714      	adds	r7, #20
 80008ea:	46bd      	mov	sp, r7
 80008ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f0:	4770      	bx	lr
 80008f2:	bf00      	nop
 80008f4:	40012c00 	.word	0x40012c00
 80008f8:	40021000 	.word	0x40021000

080008fc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b088      	sub	sp, #32
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000904:	f107 030c 	add.w	r3, r7, #12
 8000908:	2200      	movs	r2, #0
 800090a:	601a      	str	r2, [r3, #0]
 800090c:	605a      	str	r2, [r3, #4]
 800090e:	609a      	str	r2, [r3, #8]
 8000910:	60da      	str	r2, [r3, #12]
 8000912:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	4a1b      	ldr	r2, [pc, #108]	; (8000988 <HAL_TIM_MspPostInit+0x8c>)
 800091a:	4293      	cmp	r3, r2
 800091c:	d12f      	bne.n	800097e <HAL_TIM_MspPostInit+0x82>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800091e:	4b1b      	ldr	r3, [pc, #108]	; (800098c <HAL_TIM_MspPostInit+0x90>)
 8000920:	695b      	ldr	r3, [r3, #20]
 8000922:	4a1a      	ldr	r2, [pc, #104]	; (800098c <HAL_TIM_MspPostInit+0x90>)
 8000924:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000928:	6153      	str	r3, [r2, #20]
 800092a:	4b18      	ldr	r3, [pc, #96]	; (800098c <HAL_TIM_MspPostInit+0x90>)
 800092c:	695b      	ldr	r3, [r3, #20]
 800092e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000932:	60bb      	str	r3, [r7, #8]
 8000934:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = MotorPWMA_Pin;
 8000936:	f44f 7380 	mov.w	r3, #256	; 0x100
 800093a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800093c:	2302      	movs	r3, #2
 800093e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000940:	2300      	movs	r3, #0
 8000942:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000944:	2300      	movs	r3, #0
 8000946:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000948:	2306      	movs	r3, #6
 800094a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(MotorPWMA_GPIO_Port, &GPIO_InitStruct);
 800094c:	f107 030c 	add.w	r3, r7, #12
 8000950:	4619      	mov	r1, r3
 8000952:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000956:	f000 fcff 	bl	8001358 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MotorPWMB_Pin;
 800095a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800095e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000960:	2302      	movs	r3, #2
 8000962:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000964:	2300      	movs	r3, #0
 8000966:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000968:	2300      	movs	r3, #0
 800096a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF11_TIM1;
 800096c:	230b      	movs	r3, #11
 800096e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(MotorPWMB_GPIO_Port, &GPIO_InitStruct);
 8000970:	f107 030c 	add.w	r3, r7, #12
 8000974:	4619      	mov	r1, r3
 8000976:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800097a:	f000 fced 	bl	8001358 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800097e:	bf00      	nop
 8000980:	3720      	adds	r7, #32
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	40012c00 	.word	0x40012c00
 800098c:	40021000 	.word	0x40021000

08000990 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b08c      	sub	sp, #48	; 0x30
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000998:	f107 031c 	add.w	r3, r7, #28
 800099c:	2200      	movs	r2, #0
 800099e:	601a      	str	r2, [r3, #0]
 80009a0:	605a      	str	r2, [r3, #4]
 80009a2:	609a      	str	r2, [r3, #8]
 80009a4:	60da      	str	r2, [r3, #12]
 80009a6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	4a47      	ldr	r2, [pc, #284]	; (8000acc <HAL_UART_MspInit+0x13c>)
 80009ae:	4293      	cmp	r3, r2
 80009b0:	d158      	bne.n	8000a64 <HAL_UART_MspInit+0xd4>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80009b2:	4b47      	ldr	r3, [pc, #284]	; (8000ad0 <HAL_UART_MspInit+0x140>)
 80009b4:	699b      	ldr	r3, [r3, #24]
 80009b6:	4a46      	ldr	r2, [pc, #280]	; (8000ad0 <HAL_UART_MspInit+0x140>)
 80009b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009bc:	6193      	str	r3, [r2, #24]
 80009be:	4b44      	ldr	r3, [pc, #272]	; (8000ad0 <HAL_UART_MspInit+0x140>)
 80009c0:	699b      	ldr	r3, [r3, #24]
 80009c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009c6:	61bb      	str	r3, [r7, #24]
 80009c8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ca:	4b41      	ldr	r3, [pc, #260]	; (8000ad0 <HAL_UART_MspInit+0x140>)
 80009cc:	695b      	ldr	r3, [r3, #20]
 80009ce:	4a40      	ldr	r2, [pc, #256]	; (8000ad0 <HAL_UART_MspInit+0x140>)
 80009d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009d4:	6153      	str	r3, [r2, #20]
 80009d6:	4b3e      	ldr	r3, [pc, #248]	; (8000ad0 <HAL_UART_MspInit+0x140>)
 80009d8:	695b      	ldr	r3, [r3, #20]
 80009da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009de:	617b      	str	r3, [r7, #20]
 80009e0:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80009e2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80009e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009e8:	2302      	movs	r3, #2
 80009ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ec:	2300      	movs	r3, #0
 80009ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009f0:	2303      	movs	r3, #3
 80009f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80009f4:	2307      	movs	r3, #7
 80009f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009f8:	f107 031c 	add.w	r3, r7, #28
 80009fc:	4619      	mov	r1, r3
 80009fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a02:	f000 fca9 	bl	8001358 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8000a06:	4b33      	ldr	r3, [pc, #204]	; (8000ad4 <HAL_UART_MspInit+0x144>)
 8000a08:	4a33      	ldr	r2, [pc, #204]	; (8000ad8 <HAL_UART_MspInit+0x148>)
 8000a0a:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a0c:	4b31      	ldr	r3, [pc, #196]	; (8000ad4 <HAL_UART_MspInit+0x144>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a12:	4b30      	ldr	r3, [pc, #192]	; (8000ad4 <HAL_UART_MspInit+0x144>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000a18:	4b2e      	ldr	r3, [pc, #184]	; (8000ad4 <HAL_UART_MspInit+0x144>)
 8000a1a:	2280      	movs	r2, #128	; 0x80
 8000a1c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000a1e:	4b2d      	ldr	r3, [pc, #180]	; (8000ad4 <HAL_UART_MspInit+0x144>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a24:	4b2b      	ldr	r3, [pc, #172]	; (8000ad4 <HAL_UART_MspInit+0x144>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8000a2a:	4b2a      	ldr	r3, [pc, #168]	; (8000ad4 <HAL_UART_MspInit+0x144>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000a30:	4b28      	ldr	r3, [pc, #160]	; (8000ad4 <HAL_UART_MspInit+0x144>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000a36:	4827      	ldr	r0, [pc, #156]	; (8000ad4 <HAL_UART_MspInit+0x144>)
 8000a38:	f000 fa7f 	bl	8000f3a <HAL_DMA_Init>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d001      	beq.n	8000a46 <HAL_UART_MspInit+0xb6>
    {
      Error_Handler();
 8000a42:	f7ff ff0f 	bl	8000864 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	4a22      	ldr	r2, [pc, #136]	; (8000ad4 <HAL_UART_MspInit+0x144>)
 8000a4a:	671a      	str	r2, [r3, #112]	; 0x70
 8000a4c:	4a21      	ldr	r2, [pc, #132]	; (8000ad4 <HAL_UART_MspInit+0x144>)
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000a52:	2200      	movs	r2, #0
 8000a54:	2100      	movs	r1, #0
 8000a56:	2025      	movs	r0, #37	; 0x25
 8000a58:	f000 fa39 	bl	8000ece <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000a5c:	2025      	movs	r0, #37	; 0x25
 8000a5e:	f000 fa52 	bl	8000f06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a62:	e02e      	b.n	8000ac2 <HAL_UART_MspInit+0x132>
  else if(huart->Instance==USART2)
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	4a1c      	ldr	r2, [pc, #112]	; (8000adc <HAL_UART_MspInit+0x14c>)
 8000a6a:	4293      	cmp	r3, r2
 8000a6c:	d129      	bne.n	8000ac2 <HAL_UART_MspInit+0x132>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a6e:	4b18      	ldr	r3, [pc, #96]	; (8000ad0 <HAL_UART_MspInit+0x140>)
 8000a70:	69db      	ldr	r3, [r3, #28]
 8000a72:	4a17      	ldr	r2, [pc, #92]	; (8000ad0 <HAL_UART_MspInit+0x140>)
 8000a74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a78:	61d3      	str	r3, [r2, #28]
 8000a7a:	4b15      	ldr	r3, [pc, #84]	; (8000ad0 <HAL_UART_MspInit+0x140>)
 8000a7c:	69db      	ldr	r3, [r3, #28]
 8000a7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a82:	613b      	str	r3, [r7, #16]
 8000a84:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a86:	4b12      	ldr	r3, [pc, #72]	; (8000ad0 <HAL_UART_MspInit+0x140>)
 8000a88:	695b      	ldr	r3, [r3, #20]
 8000a8a:	4a11      	ldr	r2, [pc, #68]	; (8000ad0 <HAL_UART_MspInit+0x140>)
 8000a8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a90:	6153      	str	r3, [r2, #20]
 8000a92:	4b0f      	ldr	r3, [pc, #60]	; (8000ad0 <HAL_UART_MspInit+0x140>)
 8000a94:	695b      	ldr	r3, [r3, #20]
 8000a96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a9a:	60fb      	str	r3, [r7, #12]
 8000a9c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8000a9e:	f248 0304 	movw	r3, #32772	; 0x8004
 8000aa2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa4:	2302      	movs	r3, #2
 8000aa6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000aac:	2303      	movs	r3, #3
 8000aae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ab0:	2307      	movs	r3, #7
 8000ab2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ab4:	f107 031c 	add.w	r3, r7, #28
 8000ab8:	4619      	mov	r1, r3
 8000aba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000abe:	f000 fc4b 	bl	8001358 <HAL_GPIO_Init>
}
 8000ac2:	bf00      	nop
 8000ac4:	3730      	adds	r7, #48	; 0x30
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	40013800 	.word	0x40013800
 8000ad0:	40021000 	.word	0x40021000
 8000ad4:	2000003c 	.word	0x2000003c
 8000ad8:	40020058 	.word	0x40020058
 8000adc:	40004400 	.word	0x40004400

08000ae0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000ae4:	bf00      	nop
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aec:	4770      	bx	lr

08000aee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aee:	b480      	push	{r7}
 8000af0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000af2:	e7fe      	b.n	8000af2 <HardFault_Handler+0x4>

08000af4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000af8:	e7fe      	b.n	8000af8 <MemManage_Handler+0x4>

08000afa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000afa:	b480      	push	{r7}
 8000afc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000afe:	e7fe      	b.n	8000afe <BusFault_Handler+0x4>

08000b00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b04:	e7fe      	b.n	8000b04 <UsageFault_Handler+0x4>

08000b06 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b06:	b480      	push	{r7}
 8000b08:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b0a:	bf00      	nop
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b12:	4770      	bx	lr

08000b14 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b18:	bf00      	nop
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr

08000b22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b22:	b480      	push	{r7}
 8000b24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b26:	bf00      	nop
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2e:	4770      	bx	lr

08000b30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b34:	f000 f8ae 	bl	8000c94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b38:	bf00      	nop
 8000b3a:	bd80      	pop	{r7, pc}

08000b3c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000b40:	2001      	movs	r0, #1
 8000b42:	f000 fdab 	bl	800169c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000b46:	bf00      	nop
 8000b48:	bd80      	pop	{r7, pc}

08000b4a <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8000b4a:	b580      	push	{r7, lr}
 8000b4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8000b4e:	2010      	movs	r0, #16
 8000b50:	f000 fda4 	bl	800169c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8000b54:	bf00      	nop
 8000b56:	bd80      	pop	{r7, pc}

08000b58 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000b5c:	4802      	ldr	r0, [pc, #8]	; (8000b68 <DMA1_Channel5_IRQHandler+0x10>)
 8000b5e:	f000 fb09 	bl	8001174 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8000b62:	bf00      	nop
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	2000003c 	.word	0x2000003c

08000b6c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8000b70:	2020      	movs	r0, #32
 8000b72:	f000 fd93 	bl	800169c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000b76:	bf00      	nop
 8000b78:	bd80      	pop	{r7, pc}
	...

08000b7c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXT line 25.
  */
void USART1_IRQHandler(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000b80:	4802      	ldr	r0, [pc, #8]	; (8000b8c <USART1_IRQHandler+0x10>)
 8000b82:	f003 f971 	bl	8003e68 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000b86:	bf00      	nop
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	20000080 	.word	0x20000080

08000b90 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b94:	4b06      	ldr	r3, [pc, #24]	; (8000bb0 <SystemInit+0x20>)
 8000b96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b9a:	4a05      	ldr	r2, [pc, #20]	; (8000bb0 <SystemInit+0x20>)
 8000b9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ba0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ba4:	bf00      	nop
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop
 8000bb0:	e000ed00 	.word	0xe000ed00

08000bb4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000bb4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bec <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bb8:	480d      	ldr	r0, [pc, #52]	; (8000bf0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000bba:	490e      	ldr	r1, [pc, #56]	; (8000bf4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bbc:	4a0e      	ldr	r2, [pc, #56]	; (8000bf8 <LoopForever+0xe>)
  movs r3, #0
 8000bbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bc0:	e002      	b.n	8000bc8 <LoopCopyDataInit>

08000bc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bc6:	3304      	adds	r3, #4

08000bc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bcc:	d3f9      	bcc.n	8000bc2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bce:	4a0b      	ldr	r2, [pc, #44]	; (8000bfc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000bd0:	4c0b      	ldr	r4, [pc, #44]	; (8000c00 <LoopForever+0x16>)
  movs r3, #0
 8000bd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bd4:	e001      	b.n	8000bda <LoopFillZerobss>

08000bd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bd8:	3204      	adds	r2, #4

08000bda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bdc:	d3fb      	bcc.n	8000bd6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000bde:	f7ff ffd7 	bl	8000b90 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000be2:	f004 f991 	bl	8004f08 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000be6:	f7ff fb69 	bl	80002bc <main>

08000bea <LoopForever>:

LoopForever:
    b LoopForever
 8000bea:	e7fe      	b.n	8000bea <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000bec:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000bf0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bf4:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000bf8:	08004fb8 	.word	0x08004fb8
  ldr r2, =_sbss
 8000bfc:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000c00:	200001d8 	.word	0x200001d8

08000c04 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c04:	e7fe      	b.n	8000c04 <ADC1_2_IRQHandler>
	...

08000c08 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c0c:	4b08      	ldr	r3, [pc, #32]	; (8000c30 <HAL_Init+0x28>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	4a07      	ldr	r2, [pc, #28]	; (8000c30 <HAL_Init+0x28>)
 8000c12:	f043 0310 	orr.w	r3, r3, #16
 8000c16:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c18:	2003      	movs	r0, #3
 8000c1a:	f000 f94d 	bl	8000eb8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c1e:	2000      	movs	r0, #0
 8000c20:	f000 f808 	bl	8000c34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c24:	f7ff fe26 	bl	8000874 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c28:	2300      	movs	r3, #0
}
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	40022000 	.word	0x40022000

08000c34 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b082      	sub	sp, #8
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c3c:	4b12      	ldr	r3, [pc, #72]	; (8000c88 <HAL_InitTick+0x54>)
 8000c3e:	681a      	ldr	r2, [r3, #0]
 8000c40:	4b12      	ldr	r3, [pc, #72]	; (8000c8c <HAL_InitTick+0x58>)
 8000c42:	781b      	ldrb	r3, [r3, #0]
 8000c44:	4619      	mov	r1, r3
 8000c46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c52:	4618      	mov	r0, r3
 8000c54:	f000 f965 	bl	8000f22 <HAL_SYSTICK_Config>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d001      	beq.n	8000c62 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c5e:	2301      	movs	r3, #1
 8000c60:	e00e      	b.n	8000c80 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	2b0f      	cmp	r3, #15
 8000c66:	d80a      	bhi.n	8000c7e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c68:	2200      	movs	r2, #0
 8000c6a:	6879      	ldr	r1, [r7, #4]
 8000c6c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c70:	f000 f92d 	bl	8000ece <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c74:	4a06      	ldr	r2, [pc, #24]	; (8000c90 <HAL_InitTick+0x5c>)
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	e000      	b.n	8000c80 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c7e:	2301      	movs	r3, #1
}
 8000c80:	4618      	mov	r0, r3
 8000c82:	3708      	adds	r7, #8
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	20000004 	.word	0x20000004
 8000c8c:	2000000c 	.word	0x2000000c
 8000c90:	20000008 	.word	0x20000008

08000c94 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c98:	4b06      	ldr	r3, [pc, #24]	; (8000cb4 <HAL_IncTick+0x20>)
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	461a      	mov	r2, r3
 8000c9e:	4b06      	ldr	r3, [pc, #24]	; (8000cb8 <HAL_IncTick+0x24>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	4413      	add	r3, r2
 8000ca4:	4a04      	ldr	r2, [pc, #16]	; (8000cb8 <HAL_IncTick+0x24>)
 8000ca6:	6013      	str	r3, [r2, #0]
}
 8000ca8:	bf00      	nop
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr
 8000cb2:	bf00      	nop
 8000cb4:	2000000c 	.word	0x2000000c
 8000cb8:	200001d4 	.word	0x200001d4

08000cbc <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  return uwTick;  
 8000cc0:	4b03      	ldr	r3, [pc, #12]	; (8000cd0 <HAL_GetTick+0x14>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
}
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop
 8000cd0:	200001d4 	.word	0x200001d4

08000cd4 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b084      	sub	sp, #16
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cdc:	f7ff ffee 	bl	8000cbc <HAL_GetTick>
 8000ce0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cec:	d005      	beq.n	8000cfa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cee:	4b09      	ldr	r3, [pc, #36]	; (8000d14 <HAL_Delay+0x40>)
 8000cf0:	781b      	ldrb	r3, [r3, #0]
 8000cf2:	461a      	mov	r2, r3
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	4413      	add	r3, r2
 8000cf8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000cfa:	bf00      	nop
 8000cfc:	f7ff ffde 	bl	8000cbc <HAL_GetTick>
 8000d00:	4602      	mov	r2, r0
 8000d02:	68bb      	ldr	r3, [r7, #8]
 8000d04:	1ad3      	subs	r3, r2, r3
 8000d06:	68fa      	ldr	r2, [r7, #12]
 8000d08:	429a      	cmp	r2, r3
 8000d0a:	d8f7      	bhi.n	8000cfc <HAL_Delay+0x28>
  {
  }
}
 8000d0c:	bf00      	nop
 8000d0e:	3710      	adds	r7, #16
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	2000000c 	.word	0x2000000c

08000d18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b085      	sub	sp, #20
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	f003 0307 	and.w	r3, r3, #7
 8000d26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d28:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <__NVIC_SetPriorityGrouping+0x44>)
 8000d2a:	68db      	ldr	r3, [r3, #12]
 8000d2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d2e:	68ba      	ldr	r2, [r7, #8]
 8000d30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d34:	4013      	ands	r3, r2
 8000d36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d3c:	68bb      	ldr	r3, [r7, #8]
 8000d3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d4a:	4a04      	ldr	r2, [pc, #16]	; (8000d5c <__NVIC_SetPriorityGrouping+0x44>)
 8000d4c:	68bb      	ldr	r3, [r7, #8]
 8000d4e:	60d3      	str	r3, [r2, #12]
}
 8000d50:	bf00      	nop
 8000d52:	3714      	adds	r7, #20
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr
 8000d5c:	e000ed00 	.word	0xe000ed00

08000d60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d64:	4b04      	ldr	r3, [pc, #16]	; (8000d78 <__NVIC_GetPriorityGrouping+0x18>)
 8000d66:	68db      	ldr	r3, [r3, #12]
 8000d68:	0a1b      	lsrs	r3, r3, #8
 8000d6a:	f003 0307 	and.w	r3, r3, #7
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	46bd      	mov	sp, r7
 8000d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d76:	4770      	bx	lr
 8000d78:	e000ed00 	.word	0xe000ed00

08000d7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b083      	sub	sp, #12
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	4603      	mov	r3, r0
 8000d84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	db0b      	blt.n	8000da6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d8e:	79fb      	ldrb	r3, [r7, #7]
 8000d90:	f003 021f 	and.w	r2, r3, #31
 8000d94:	4907      	ldr	r1, [pc, #28]	; (8000db4 <__NVIC_EnableIRQ+0x38>)
 8000d96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d9a:	095b      	lsrs	r3, r3, #5
 8000d9c:	2001      	movs	r0, #1
 8000d9e:	fa00 f202 	lsl.w	r2, r0, r2
 8000da2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000da6:	bf00      	nop
 8000da8:	370c      	adds	r7, #12
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop
 8000db4:	e000e100 	.word	0xe000e100

08000db8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b083      	sub	sp, #12
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	6039      	str	r1, [r7, #0]
 8000dc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	db0a      	blt.n	8000de2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	b2da      	uxtb	r2, r3
 8000dd0:	490c      	ldr	r1, [pc, #48]	; (8000e04 <__NVIC_SetPriority+0x4c>)
 8000dd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd6:	0112      	lsls	r2, r2, #4
 8000dd8:	b2d2      	uxtb	r2, r2
 8000dda:	440b      	add	r3, r1
 8000ddc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000de0:	e00a      	b.n	8000df8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	b2da      	uxtb	r2, r3
 8000de6:	4908      	ldr	r1, [pc, #32]	; (8000e08 <__NVIC_SetPriority+0x50>)
 8000de8:	79fb      	ldrb	r3, [r7, #7]
 8000dea:	f003 030f 	and.w	r3, r3, #15
 8000dee:	3b04      	subs	r3, #4
 8000df0:	0112      	lsls	r2, r2, #4
 8000df2:	b2d2      	uxtb	r2, r2
 8000df4:	440b      	add	r3, r1
 8000df6:	761a      	strb	r2, [r3, #24]
}
 8000df8:	bf00      	nop
 8000dfa:	370c      	adds	r7, #12
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e02:	4770      	bx	lr
 8000e04:	e000e100 	.word	0xe000e100
 8000e08:	e000ed00 	.word	0xe000ed00

08000e0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b089      	sub	sp, #36	; 0x24
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	60f8      	str	r0, [r7, #12]
 8000e14:	60b9      	str	r1, [r7, #8]
 8000e16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	f003 0307 	and.w	r3, r3, #7
 8000e1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e20:	69fb      	ldr	r3, [r7, #28]
 8000e22:	f1c3 0307 	rsb	r3, r3, #7
 8000e26:	2b04      	cmp	r3, #4
 8000e28:	bf28      	it	cs
 8000e2a:	2304      	movcs	r3, #4
 8000e2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e2e:	69fb      	ldr	r3, [r7, #28]
 8000e30:	3304      	adds	r3, #4
 8000e32:	2b06      	cmp	r3, #6
 8000e34:	d902      	bls.n	8000e3c <NVIC_EncodePriority+0x30>
 8000e36:	69fb      	ldr	r3, [r7, #28]
 8000e38:	3b03      	subs	r3, #3
 8000e3a:	e000      	b.n	8000e3e <NVIC_EncodePriority+0x32>
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e40:	f04f 32ff 	mov.w	r2, #4294967295
 8000e44:	69bb      	ldr	r3, [r7, #24]
 8000e46:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4a:	43da      	mvns	r2, r3
 8000e4c:	68bb      	ldr	r3, [r7, #8]
 8000e4e:	401a      	ands	r2, r3
 8000e50:	697b      	ldr	r3, [r7, #20]
 8000e52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e54:	f04f 31ff 	mov.w	r1, #4294967295
 8000e58:	697b      	ldr	r3, [r7, #20]
 8000e5a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e5e:	43d9      	mvns	r1, r3
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e64:	4313      	orrs	r3, r2
         );
}
 8000e66:	4618      	mov	r0, r3
 8000e68:	3724      	adds	r7, #36	; 0x24
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr
	...

08000e74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	3b01      	subs	r3, #1
 8000e80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e84:	d301      	bcc.n	8000e8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e86:	2301      	movs	r3, #1
 8000e88:	e00f      	b.n	8000eaa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e8a:	4a0a      	ldr	r2, [pc, #40]	; (8000eb4 <SysTick_Config+0x40>)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	3b01      	subs	r3, #1
 8000e90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e92:	210f      	movs	r1, #15
 8000e94:	f04f 30ff 	mov.w	r0, #4294967295
 8000e98:	f7ff ff8e 	bl	8000db8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e9c:	4b05      	ldr	r3, [pc, #20]	; (8000eb4 <SysTick_Config+0x40>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ea2:	4b04      	ldr	r3, [pc, #16]	; (8000eb4 <SysTick_Config+0x40>)
 8000ea4:	2207      	movs	r2, #7
 8000ea6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ea8:	2300      	movs	r3, #0
}
 8000eaa:	4618      	mov	r0, r3
 8000eac:	3708      	adds	r7, #8
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	e000e010 	.word	0xe000e010

08000eb8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ec0:	6878      	ldr	r0, [r7, #4]
 8000ec2:	f7ff ff29 	bl	8000d18 <__NVIC_SetPriorityGrouping>
}
 8000ec6:	bf00      	nop
 8000ec8:	3708      	adds	r7, #8
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}

08000ece <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ece:	b580      	push	{r7, lr}
 8000ed0:	b086      	sub	sp, #24
 8000ed2:	af00      	add	r7, sp, #0
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	60b9      	str	r1, [r7, #8]
 8000ed8:	607a      	str	r2, [r7, #4]
 8000eda:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000edc:	2300      	movs	r3, #0
 8000ede:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ee0:	f7ff ff3e 	bl	8000d60 <__NVIC_GetPriorityGrouping>
 8000ee4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ee6:	687a      	ldr	r2, [r7, #4]
 8000ee8:	68b9      	ldr	r1, [r7, #8]
 8000eea:	6978      	ldr	r0, [r7, #20]
 8000eec:	f7ff ff8e 	bl	8000e0c <NVIC_EncodePriority>
 8000ef0:	4602      	mov	r2, r0
 8000ef2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ef6:	4611      	mov	r1, r2
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f7ff ff5d 	bl	8000db8 <__NVIC_SetPriority>
}
 8000efe:	bf00      	nop
 8000f00:	3718      	adds	r7, #24
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}

08000f06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f06:	b580      	push	{r7, lr}
 8000f08:	b082      	sub	sp, #8
 8000f0a:	af00      	add	r7, sp, #0
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f14:	4618      	mov	r0, r3
 8000f16:	f7ff ff31 	bl	8000d7c <__NVIC_EnableIRQ>
}
 8000f1a:	bf00      	nop
 8000f1c:	3708      	adds	r7, #8
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}

08000f22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f22:	b580      	push	{r7, lr}
 8000f24:	b082      	sub	sp, #8
 8000f26:	af00      	add	r7, sp, #0
 8000f28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f2a:	6878      	ldr	r0, [r7, #4]
 8000f2c:	f7ff ffa2 	bl	8000e74 <SysTick_Config>
 8000f30:	4603      	mov	r3, r0
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	3708      	adds	r7, #8
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}

08000f3a <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8000f3a:	b580      	push	{r7, lr}
 8000f3c:	b084      	sub	sp, #16
 8000f3e:	af00      	add	r7, sp, #0
 8000f40:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000f42:	2300      	movs	r3, #0
 8000f44:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d101      	bne.n	8000f50 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	e037      	b.n	8000fc0 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	2202      	movs	r2, #2
 8000f54:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000f66:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000f6a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000f74:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	68db      	ldr	r3, [r3, #12]
 8000f7a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f80:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	695b      	ldr	r3, [r3, #20]
 8000f86:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f8c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	69db      	ldr	r3, [r3, #28]
 8000f92:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000f94:	68fa      	ldr	r2, [r7, #12]
 8000f96:	4313      	orrs	r3, r2
 8000f98:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	68fa      	ldr	r2, [r7, #12]
 8000fa0:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8000fa2:	6878      	ldr	r0, [r7, #4]
 8000fa4:	f000 f9b8 	bl	8001318 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	2200      	movs	r2, #0
 8000fac:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	2200      	movs	r2, #0
 8000fba:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8000fbe:	2300      	movs	r3, #0
}  
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	3710      	adds	r7, #16
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}

08000fc8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b086      	sub	sp, #24
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	60f8      	str	r0, [r7, #12]
 8000fd0:	60b9      	str	r1, [r7, #8]
 8000fd2:	607a      	str	r2, [r7, #4]
 8000fd4:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000fe0:	2b01      	cmp	r3, #1
 8000fe2:	d101      	bne.n	8000fe8 <HAL_DMA_Start_IT+0x20>
 8000fe4:	2302      	movs	r3, #2
 8000fe6:	e04a      	b.n	800107e <HAL_DMA_Start_IT+0xb6>
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	2201      	movs	r2, #1
 8000fec:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000ff6:	2b01      	cmp	r3, #1
 8000ff8:	d13a      	bne.n	8001070 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	2202      	movs	r2, #2
 8000ffe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	2200      	movs	r2, #0
 8001006:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	681a      	ldr	r2, [r3, #0]
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	f022 0201 	bic.w	r2, r2, #1
 8001016:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	687a      	ldr	r2, [r7, #4]
 800101c:	68b9      	ldr	r1, [r7, #8]
 800101e:	68f8      	ldr	r0, [r7, #12]
 8001020:	f000 f94b 	bl	80012ba <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001028:	2b00      	cmp	r3, #0
 800102a:	d008      	beq.n	800103e <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	681a      	ldr	r2, [r3, #0]
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	f042 020e 	orr.w	r2, r2, #14
 800103a:	601a      	str	r2, [r3, #0]
 800103c:	e00f      	b.n	800105e <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	681a      	ldr	r2, [r3, #0]
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	f042 020a 	orr.w	r2, r2, #10
 800104c:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	681a      	ldr	r2, [r3, #0]
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f022 0204 	bic.w	r2, r2, #4
 800105c:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	681a      	ldr	r2, [r3, #0]
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	f042 0201 	orr.w	r2, r2, #1
 800106c:	601a      	str	r2, [r3, #0]
 800106e:	e005      	b.n	800107c <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	2200      	movs	r2, #0
 8001074:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8001078:	2302      	movs	r3, #2
 800107a:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 800107c:	7dfb      	ldrb	r3, [r7, #23]
} 
 800107e:	4618      	mov	r0, r3
 8001080:	3718      	adds	r7, #24
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}

08001086 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001086:	b480      	push	{r7}
 8001088:	b083      	sub	sp, #12
 800108a:	af00      	add	r7, sp, #0
 800108c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001094:	2b02      	cmp	r3, #2
 8001096:	d008      	beq.n	80010aa <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	2204      	movs	r2, #4
 800109c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	2200      	movs	r2, #0
 80010a2:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80010a6:	2301      	movs	r3, #1
 80010a8:	e020      	b.n	80010ec <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	681a      	ldr	r2, [r3, #0]
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f022 020e 	bic.w	r2, r2, #14
 80010b8:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	681a      	ldr	r2, [r3, #0]
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f022 0201 	bic.w	r2, r2, #1
 80010c8:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010d2:	2101      	movs	r1, #1
 80010d4:	fa01 f202 	lsl.w	r2, r1, r2
 80010d8:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	2201      	movs	r2, #1
 80010de:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	2200      	movs	r2, #0
 80010e6:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80010ea:	2300      	movs	r3, #0
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	370c      	adds	r7, #12
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr

080010f8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b084      	sub	sp, #16
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001100:	2300      	movs	r3, #0
 8001102:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800110a:	2b02      	cmp	r3, #2
 800110c:	d005      	beq.n	800111a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	2204      	movs	r2, #4
 8001112:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001114:	2301      	movs	r3, #1
 8001116:	73fb      	strb	r3, [r7, #15]
 8001118:	e027      	b.n	800116a <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	681a      	ldr	r2, [r3, #0]
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f022 020e 	bic.w	r2, r2, #14
 8001128:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	681a      	ldr	r2, [r3, #0]
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f022 0201 	bic.w	r2, r2, #1
 8001138:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001142:	2101      	movs	r1, #1
 8001144:	fa01 f202 	lsl.w	r2, r1, r2
 8001148:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	2201      	movs	r2, #1
 800114e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	2200      	movs	r2, #0
 8001156:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800115e:	2b00      	cmp	r3, #0
 8001160:	d003      	beq.n	800116a <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001166:	6878      	ldr	r0, [r7, #4]
 8001168:	4798      	blx	r3
    } 
  }
  return status;
 800116a:	7bfb      	ldrb	r3, [r7, #15]
}
 800116c:	4618      	mov	r0, r3
 800116e:	3710      	adds	r7, #16
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}

08001174 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b084      	sub	sp, #16
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001190:	2204      	movs	r2, #4
 8001192:	409a      	lsls	r2, r3
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	4013      	ands	r3, r2
 8001198:	2b00      	cmp	r3, #0
 800119a:	d024      	beq.n	80011e6 <HAL_DMA_IRQHandler+0x72>
 800119c:	68bb      	ldr	r3, [r7, #8]
 800119e:	f003 0304 	and.w	r3, r3, #4
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d01f      	beq.n	80011e6 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f003 0320 	and.w	r3, r3, #32
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d107      	bne.n	80011c4 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	681a      	ldr	r2, [r3, #0]
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f022 0204 	bic.w	r2, r2, #4
 80011c2:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011cc:	2104      	movs	r1, #4
 80011ce:	fa01 f202 	lsl.w	r2, r1, r2
 80011d2:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d06a      	beq.n	80012b2 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011e0:	6878      	ldr	r0, [r7, #4]
 80011e2:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 80011e4:	e065      	b.n	80012b2 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ea:	2202      	movs	r2, #2
 80011ec:	409a      	lsls	r2, r3
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	4013      	ands	r3, r2
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d02c      	beq.n	8001250 <HAL_DMA_IRQHandler+0xdc>
 80011f6:	68bb      	ldr	r3, [r7, #8]
 80011f8:	f003 0302 	and.w	r3, r3, #2
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d027      	beq.n	8001250 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f003 0320 	and.w	r3, r3, #32
 800120a:	2b00      	cmp	r3, #0
 800120c:	d10b      	bne.n	8001226 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	681a      	ldr	r2, [r3, #0]
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f022 020a 	bic.w	r2, r2, #10
 800121c:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	2201      	movs	r2, #1
 8001222:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800122e:	2102      	movs	r1, #2
 8001230:	fa01 f202 	lsl.w	r2, r1, r2
 8001234:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	2200      	movs	r2, #0
 800123a:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001242:	2b00      	cmp	r3, #0
 8001244:	d035      	beq.n	80012b2 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800124a:	6878      	ldr	r0, [r7, #4]
 800124c:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 800124e:	e030      	b.n	80012b2 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001254:	2208      	movs	r2, #8
 8001256:	409a      	lsls	r2, r3
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	4013      	ands	r3, r2
 800125c:	2b00      	cmp	r3, #0
 800125e:	d028      	beq.n	80012b2 <HAL_DMA_IRQHandler+0x13e>
 8001260:	68bb      	ldr	r3, [r7, #8]
 8001262:	f003 0308 	and.w	r3, r3, #8
 8001266:	2b00      	cmp	r3, #0
 8001268:	d023      	beq.n	80012b2 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	681a      	ldr	r2, [r3, #0]
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f022 020e 	bic.w	r2, r2, #14
 8001278:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001282:	2101      	movs	r1, #1
 8001284:	fa01 f202 	lsl.w	r2, r1, r2
 8001288:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	2201      	movs	r2, #1
 800128e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	2201      	movs	r2, #1
 8001294:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	2200      	movs	r2, #0
 800129c:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d004      	beq.n	80012b2 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ac:	6878      	ldr	r0, [r7, #4]
 80012ae:	4798      	blx	r3
    }
  }
}  
 80012b0:	e7ff      	b.n	80012b2 <HAL_DMA_IRQHandler+0x13e>
 80012b2:	bf00      	nop
 80012b4:	3710      	adds	r7, #16
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}

080012ba <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80012ba:	b480      	push	{r7}
 80012bc:	b085      	sub	sp, #20
 80012be:	af00      	add	r7, sp, #0
 80012c0:	60f8      	str	r0, [r7, #12]
 80012c2:	60b9      	str	r1, [r7, #8]
 80012c4:	607a      	str	r2, [r7, #4]
 80012c6:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012d0:	2101      	movs	r1, #1
 80012d2:	fa01 f202 	lsl.w	r2, r1, r2
 80012d6:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	683a      	ldr	r2, [r7, #0]
 80012de:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	2b10      	cmp	r3, #16
 80012e6:	d108      	bne.n	80012fa <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	687a      	ldr	r2, [r7, #4]
 80012ee:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	68ba      	ldr	r2, [r7, #8]
 80012f6:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80012f8:	e007      	b.n	800130a <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	68ba      	ldr	r2, [r7, #8]
 8001300:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	687a      	ldr	r2, [r7, #4]
 8001308:	60da      	str	r2, [r3, #12]
}
 800130a:	bf00      	nop
 800130c:	3714      	adds	r7, #20
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr
	...

08001318 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001318:	b480      	push	{r7}
 800131a:	b083      	sub	sp, #12
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	461a      	mov	r2, r3
 8001326:	4b09      	ldr	r3, [pc, #36]	; (800134c <DMA_CalcBaseAndBitshift+0x34>)
 8001328:	4413      	add	r3, r2
 800132a:	4a09      	ldr	r2, [pc, #36]	; (8001350 <DMA_CalcBaseAndBitshift+0x38>)
 800132c:	fba2 2303 	umull	r2, r3, r2, r3
 8001330:	091b      	lsrs	r3, r3, #4
 8001332:	009a      	lsls	r2, r3, #2
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	4a06      	ldr	r2, [pc, #24]	; (8001354 <DMA_CalcBaseAndBitshift+0x3c>)
 800133c:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 800133e:	bf00      	nop
 8001340:	370c      	adds	r7, #12
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr
 800134a:	bf00      	nop
 800134c:	bffdfff8 	.word	0xbffdfff8
 8001350:	cccccccd 	.word	0xcccccccd
 8001354:	40020000 	.word	0x40020000

08001358 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001358:	b480      	push	{r7}
 800135a:	b087      	sub	sp, #28
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
 8001360:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001362:	2300      	movs	r3, #0
 8001364:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001366:	e14e      	b.n	8001606 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	681a      	ldr	r2, [r3, #0]
 800136c:	2101      	movs	r1, #1
 800136e:	697b      	ldr	r3, [r7, #20]
 8001370:	fa01 f303 	lsl.w	r3, r1, r3
 8001374:	4013      	ands	r3, r2
 8001376:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	2b00      	cmp	r3, #0
 800137c:	f000 8140 	beq.w	8001600 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	f003 0303 	and.w	r3, r3, #3
 8001388:	2b01      	cmp	r3, #1
 800138a:	d005      	beq.n	8001398 <HAL_GPIO_Init+0x40>
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	f003 0303 	and.w	r3, r3, #3
 8001394:	2b02      	cmp	r3, #2
 8001396:	d130      	bne.n	80013fa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	689b      	ldr	r3, [r3, #8]
 800139c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800139e:	697b      	ldr	r3, [r7, #20]
 80013a0:	005b      	lsls	r3, r3, #1
 80013a2:	2203      	movs	r2, #3
 80013a4:	fa02 f303 	lsl.w	r3, r2, r3
 80013a8:	43db      	mvns	r3, r3
 80013aa:	693a      	ldr	r2, [r7, #16]
 80013ac:	4013      	ands	r3, r2
 80013ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	68da      	ldr	r2, [r3, #12]
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	005b      	lsls	r3, r3, #1
 80013b8:	fa02 f303 	lsl.w	r3, r2, r3
 80013bc:	693a      	ldr	r2, [r7, #16]
 80013be:	4313      	orrs	r3, r2
 80013c0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	693a      	ldr	r2, [r7, #16]
 80013c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80013ce:	2201      	movs	r2, #1
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	fa02 f303 	lsl.w	r3, r2, r3
 80013d6:	43db      	mvns	r3, r3
 80013d8:	693a      	ldr	r2, [r7, #16]
 80013da:	4013      	ands	r3, r2
 80013dc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	091b      	lsrs	r3, r3, #4
 80013e4:	f003 0201 	and.w	r2, r3, #1
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	fa02 f303 	lsl.w	r3, r2, r3
 80013ee:	693a      	ldr	r2, [r7, #16]
 80013f0:	4313      	orrs	r3, r2
 80013f2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	693a      	ldr	r2, [r7, #16]
 80013f8:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	f003 0303 	and.w	r3, r3, #3
 8001402:	2b03      	cmp	r3, #3
 8001404:	d017      	beq.n	8001436 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	68db      	ldr	r3, [r3, #12]
 800140a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	005b      	lsls	r3, r3, #1
 8001410:	2203      	movs	r2, #3
 8001412:	fa02 f303 	lsl.w	r3, r2, r3
 8001416:	43db      	mvns	r3, r3
 8001418:	693a      	ldr	r2, [r7, #16]
 800141a:	4013      	ands	r3, r2
 800141c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	689a      	ldr	r2, [r3, #8]
 8001422:	697b      	ldr	r3, [r7, #20]
 8001424:	005b      	lsls	r3, r3, #1
 8001426:	fa02 f303 	lsl.w	r3, r2, r3
 800142a:	693a      	ldr	r2, [r7, #16]
 800142c:	4313      	orrs	r3, r2
 800142e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	693a      	ldr	r2, [r7, #16]
 8001434:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	f003 0303 	and.w	r3, r3, #3
 800143e:	2b02      	cmp	r3, #2
 8001440:	d123      	bne.n	800148a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001442:	697b      	ldr	r3, [r7, #20]
 8001444:	08da      	lsrs	r2, r3, #3
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	3208      	adds	r2, #8
 800144a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800144e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001450:	697b      	ldr	r3, [r7, #20]
 8001452:	f003 0307 	and.w	r3, r3, #7
 8001456:	009b      	lsls	r3, r3, #2
 8001458:	220f      	movs	r2, #15
 800145a:	fa02 f303 	lsl.w	r3, r2, r3
 800145e:	43db      	mvns	r3, r3
 8001460:	693a      	ldr	r2, [r7, #16]
 8001462:	4013      	ands	r3, r2
 8001464:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	691a      	ldr	r2, [r3, #16]
 800146a:	697b      	ldr	r3, [r7, #20]
 800146c:	f003 0307 	and.w	r3, r3, #7
 8001470:	009b      	lsls	r3, r3, #2
 8001472:	fa02 f303 	lsl.w	r3, r2, r3
 8001476:	693a      	ldr	r2, [r7, #16]
 8001478:	4313      	orrs	r3, r2
 800147a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	08da      	lsrs	r2, r3, #3
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	3208      	adds	r2, #8
 8001484:	6939      	ldr	r1, [r7, #16]
 8001486:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001490:	697b      	ldr	r3, [r7, #20]
 8001492:	005b      	lsls	r3, r3, #1
 8001494:	2203      	movs	r2, #3
 8001496:	fa02 f303 	lsl.w	r3, r2, r3
 800149a:	43db      	mvns	r3, r3
 800149c:	693a      	ldr	r2, [r7, #16]
 800149e:	4013      	ands	r3, r2
 80014a0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	f003 0203 	and.w	r2, r3, #3
 80014aa:	697b      	ldr	r3, [r7, #20]
 80014ac:	005b      	lsls	r3, r3, #1
 80014ae:	fa02 f303 	lsl.w	r3, r2, r3
 80014b2:	693a      	ldr	r2, [r7, #16]
 80014b4:	4313      	orrs	r3, r2
 80014b6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	693a      	ldr	r2, [r7, #16]
 80014bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	f000 809a 	beq.w	8001600 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014cc:	4b55      	ldr	r3, [pc, #340]	; (8001624 <HAL_GPIO_Init+0x2cc>)
 80014ce:	699b      	ldr	r3, [r3, #24]
 80014d0:	4a54      	ldr	r2, [pc, #336]	; (8001624 <HAL_GPIO_Init+0x2cc>)
 80014d2:	f043 0301 	orr.w	r3, r3, #1
 80014d6:	6193      	str	r3, [r2, #24]
 80014d8:	4b52      	ldr	r3, [pc, #328]	; (8001624 <HAL_GPIO_Init+0x2cc>)
 80014da:	699b      	ldr	r3, [r3, #24]
 80014dc:	f003 0301 	and.w	r3, r3, #1
 80014e0:	60bb      	str	r3, [r7, #8]
 80014e2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80014e4:	4a50      	ldr	r2, [pc, #320]	; (8001628 <HAL_GPIO_Init+0x2d0>)
 80014e6:	697b      	ldr	r3, [r7, #20]
 80014e8:	089b      	lsrs	r3, r3, #2
 80014ea:	3302      	adds	r3, #2
 80014ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014f0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80014f2:	697b      	ldr	r3, [r7, #20]
 80014f4:	f003 0303 	and.w	r3, r3, #3
 80014f8:	009b      	lsls	r3, r3, #2
 80014fa:	220f      	movs	r2, #15
 80014fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001500:	43db      	mvns	r3, r3
 8001502:	693a      	ldr	r2, [r7, #16]
 8001504:	4013      	ands	r3, r2
 8001506:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800150e:	d013      	beq.n	8001538 <HAL_GPIO_Init+0x1e0>
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	4a46      	ldr	r2, [pc, #280]	; (800162c <HAL_GPIO_Init+0x2d4>)
 8001514:	4293      	cmp	r3, r2
 8001516:	d00d      	beq.n	8001534 <HAL_GPIO_Init+0x1dc>
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	4a45      	ldr	r2, [pc, #276]	; (8001630 <HAL_GPIO_Init+0x2d8>)
 800151c:	4293      	cmp	r3, r2
 800151e:	d007      	beq.n	8001530 <HAL_GPIO_Init+0x1d8>
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	4a44      	ldr	r2, [pc, #272]	; (8001634 <HAL_GPIO_Init+0x2dc>)
 8001524:	4293      	cmp	r3, r2
 8001526:	d101      	bne.n	800152c <HAL_GPIO_Init+0x1d4>
 8001528:	2303      	movs	r3, #3
 800152a:	e006      	b.n	800153a <HAL_GPIO_Init+0x1e2>
 800152c:	2305      	movs	r3, #5
 800152e:	e004      	b.n	800153a <HAL_GPIO_Init+0x1e2>
 8001530:	2302      	movs	r3, #2
 8001532:	e002      	b.n	800153a <HAL_GPIO_Init+0x1e2>
 8001534:	2301      	movs	r3, #1
 8001536:	e000      	b.n	800153a <HAL_GPIO_Init+0x1e2>
 8001538:	2300      	movs	r3, #0
 800153a:	697a      	ldr	r2, [r7, #20]
 800153c:	f002 0203 	and.w	r2, r2, #3
 8001540:	0092      	lsls	r2, r2, #2
 8001542:	4093      	lsls	r3, r2
 8001544:	693a      	ldr	r2, [r7, #16]
 8001546:	4313      	orrs	r3, r2
 8001548:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800154a:	4937      	ldr	r1, [pc, #220]	; (8001628 <HAL_GPIO_Init+0x2d0>)
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	089b      	lsrs	r3, r3, #2
 8001550:	3302      	adds	r3, #2
 8001552:	693a      	ldr	r2, [r7, #16]
 8001554:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001558:	4b37      	ldr	r3, [pc, #220]	; (8001638 <HAL_GPIO_Init+0x2e0>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	43db      	mvns	r3, r3
 8001562:	693a      	ldr	r2, [r7, #16]
 8001564:	4013      	ands	r3, r2
 8001566:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001570:	2b00      	cmp	r3, #0
 8001572:	d003      	beq.n	800157c <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001574:	693a      	ldr	r2, [r7, #16]
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	4313      	orrs	r3, r2
 800157a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800157c:	4a2e      	ldr	r2, [pc, #184]	; (8001638 <HAL_GPIO_Init+0x2e0>)
 800157e:	693b      	ldr	r3, [r7, #16]
 8001580:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001582:	4b2d      	ldr	r3, [pc, #180]	; (8001638 <HAL_GPIO_Init+0x2e0>)
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	43db      	mvns	r3, r3
 800158c:	693a      	ldr	r2, [r7, #16]
 800158e:	4013      	ands	r3, r2
 8001590:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800159a:	2b00      	cmp	r3, #0
 800159c:	d003      	beq.n	80015a6 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800159e:	693a      	ldr	r2, [r7, #16]
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	4313      	orrs	r3, r2
 80015a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80015a6:	4a24      	ldr	r2, [pc, #144]	; (8001638 <HAL_GPIO_Init+0x2e0>)
 80015a8:	693b      	ldr	r3, [r7, #16]
 80015aa:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80015ac:	4b22      	ldr	r3, [pc, #136]	; (8001638 <HAL_GPIO_Init+0x2e0>)
 80015ae:	689b      	ldr	r3, [r3, #8]
 80015b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	43db      	mvns	r3, r3
 80015b6:	693a      	ldr	r2, [r7, #16]
 80015b8:	4013      	ands	r3, r2
 80015ba:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d003      	beq.n	80015d0 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80015c8:	693a      	ldr	r2, [r7, #16]
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	4313      	orrs	r3, r2
 80015ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80015d0:	4a19      	ldr	r2, [pc, #100]	; (8001638 <HAL_GPIO_Init+0x2e0>)
 80015d2:	693b      	ldr	r3, [r7, #16]
 80015d4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80015d6:	4b18      	ldr	r3, [pc, #96]	; (8001638 <HAL_GPIO_Init+0x2e0>)
 80015d8:	68db      	ldr	r3, [r3, #12]
 80015da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	43db      	mvns	r3, r3
 80015e0:	693a      	ldr	r2, [r7, #16]
 80015e2:	4013      	ands	r3, r2
 80015e4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d003      	beq.n	80015fa <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80015f2:	693a      	ldr	r2, [r7, #16]
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	4313      	orrs	r3, r2
 80015f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80015fa:	4a0f      	ldr	r2, [pc, #60]	; (8001638 <HAL_GPIO_Init+0x2e0>)
 80015fc:	693b      	ldr	r3, [r7, #16]
 80015fe:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001600:	697b      	ldr	r3, [r7, #20]
 8001602:	3301      	adds	r3, #1
 8001604:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	681a      	ldr	r2, [r3, #0]
 800160a:	697b      	ldr	r3, [r7, #20]
 800160c:	fa22 f303 	lsr.w	r3, r2, r3
 8001610:	2b00      	cmp	r3, #0
 8001612:	f47f aea9 	bne.w	8001368 <HAL_GPIO_Init+0x10>
  }
}
 8001616:	bf00      	nop
 8001618:	371c      	adds	r7, #28
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr
 8001622:	bf00      	nop
 8001624:	40021000 	.word	0x40021000
 8001628:	40010000 	.word	0x40010000
 800162c:	48000400 	.word	0x48000400
 8001630:	48000800 	.word	0x48000800
 8001634:	48000c00 	.word	0x48000c00
 8001638:	40010400 	.word	0x40010400

0800163c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800163c:	b480      	push	{r7}
 800163e:	b085      	sub	sp, #20
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
 8001644:	460b      	mov	r3, r1
 8001646:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	691a      	ldr	r2, [r3, #16]
 800164c:	887b      	ldrh	r3, [r7, #2]
 800164e:	4013      	ands	r3, r2
 8001650:	2b00      	cmp	r3, #0
 8001652:	d002      	beq.n	800165a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001654:	2301      	movs	r3, #1
 8001656:	73fb      	strb	r3, [r7, #15]
 8001658:	e001      	b.n	800165e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800165a:	2300      	movs	r3, #0
 800165c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800165e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001660:	4618      	mov	r0, r3
 8001662:	3714      	adds	r7, #20
 8001664:	46bd      	mov	sp, r7
 8001666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166a:	4770      	bx	lr

0800166c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800166c:	b480      	push	{r7}
 800166e:	b083      	sub	sp, #12
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
 8001674:	460b      	mov	r3, r1
 8001676:	807b      	strh	r3, [r7, #2]
 8001678:	4613      	mov	r3, r2
 800167a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800167c:	787b      	ldrb	r3, [r7, #1]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d003      	beq.n	800168a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001682:	887a      	ldrh	r2, [r7, #2]
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001688:	e002      	b.n	8001690 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800168a:	887a      	ldrh	r2, [r7, #2]
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001690:	bf00      	nop
 8001692:	370c      	adds	r7, #12
 8001694:	46bd      	mov	sp, r7
 8001696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169a:	4770      	bx	lr

0800169c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b082      	sub	sp, #8
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	4603      	mov	r3, r0
 80016a4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80016a6:	4b08      	ldr	r3, [pc, #32]	; (80016c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80016a8:	695a      	ldr	r2, [r3, #20]
 80016aa:	88fb      	ldrh	r3, [r7, #6]
 80016ac:	4013      	ands	r3, r2
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d006      	beq.n	80016c0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80016b2:	4a05      	ldr	r2, [pc, #20]	; (80016c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80016b4:	88fb      	ldrh	r3, [r7, #6]
 80016b6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80016b8:	88fb      	ldrh	r3, [r7, #6]
 80016ba:	4618      	mov	r0, r3
 80016bc:	f7fe fd84 	bl	80001c8 <HAL_GPIO_EXTI_Callback>
  }
}
 80016c0:	bf00      	nop
 80016c2:	3708      	adds	r7, #8
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	40010400 	.word	0x40010400

080016cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80016d2:	af00      	add	r7, sp, #0
 80016d4:	1d3b      	adds	r3, r7, #4
 80016d6:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80016d8:	1d3b      	adds	r3, r7, #4
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d102      	bne.n	80016e6 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80016e0:	2301      	movs	r3, #1
 80016e2:	f000 bef4 	b.w	80024ce <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016e6:	1d3b      	adds	r3, r7, #4
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f003 0301 	and.w	r3, r3, #1
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	f000 816a 	beq.w	80019ca <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80016f6:	4bb3      	ldr	r3, [pc, #716]	; (80019c4 <HAL_RCC_OscConfig+0x2f8>)
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	f003 030c 	and.w	r3, r3, #12
 80016fe:	2b04      	cmp	r3, #4
 8001700:	d00c      	beq.n	800171c <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001702:	4bb0      	ldr	r3, [pc, #704]	; (80019c4 <HAL_RCC_OscConfig+0x2f8>)
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	f003 030c 	and.w	r3, r3, #12
 800170a:	2b08      	cmp	r3, #8
 800170c:	d159      	bne.n	80017c2 <HAL_RCC_OscConfig+0xf6>
 800170e:	4bad      	ldr	r3, [pc, #692]	; (80019c4 <HAL_RCC_OscConfig+0x2f8>)
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001716:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800171a:	d152      	bne.n	80017c2 <HAL_RCC_OscConfig+0xf6>
 800171c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001720:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001724:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001728:	fa93 f3a3 	rbit	r3, r3
 800172c:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001730:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001734:	fab3 f383 	clz	r3, r3
 8001738:	b2db      	uxtb	r3, r3
 800173a:	095b      	lsrs	r3, r3, #5
 800173c:	b2db      	uxtb	r3, r3
 800173e:	f043 0301 	orr.w	r3, r3, #1
 8001742:	b2db      	uxtb	r3, r3
 8001744:	2b01      	cmp	r3, #1
 8001746:	d102      	bne.n	800174e <HAL_RCC_OscConfig+0x82>
 8001748:	4b9e      	ldr	r3, [pc, #632]	; (80019c4 <HAL_RCC_OscConfig+0x2f8>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	e015      	b.n	800177a <HAL_RCC_OscConfig+0xae>
 800174e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001752:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001756:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 800175a:	fa93 f3a3 	rbit	r3, r3
 800175e:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001762:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001766:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800176a:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800176e:	fa93 f3a3 	rbit	r3, r3
 8001772:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001776:	4b93      	ldr	r3, [pc, #588]	; (80019c4 <HAL_RCC_OscConfig+0x2f8>)
 8001778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800177a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800177e:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001782:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001786:	fa92 f2a2 	rbit	r2, r2
 800178a:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 800178e:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001792:	fab2 f282 	clz	r2, r2
 8001796:	b2d2      	uxtb	r2, r2
 8001798:	f042 0220 	orr.w	r2, r2, #32
 800179c:	b2d2      	uxtb	r2, r2
 800179e:	f002 021f 	and.w	r2, r2, #31
 80017a2:	2101      	movs	r1, #1
 80017a4:	fa01 f202 	lsl.w	r2, r1, r2
 80017a8:	4013      	ands	r3, r2
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	f000 810c 	beq.w	80019c8 <HAL_RCC_OscConfig+0x2fc>
 80017b0:	1d3b      	adds	r3, r7, #4
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	f040 8106 	bne.w	80019c8 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 80017bc:	2301      	movs	r3, #1
 80017be:	f000 be86 	b.w	80024ce <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017c2:	1d3b      	adds	r3, r7, #4
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017cc:	d106      	bne.n	80017dc <HAL_RCC_OscConfig+0x110>
 80017ce:	4b7d      	ldr	r3, [pc, #500]	; (80019c4 <HAL_RCC_OscConfig+0x2f8>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4a7c      	ldr	r2, [pc, #496]	; (80019c4 <HAL_RCC_OscConfig+0x2f8>)
 80017d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017d8:	6013      	str	r3, [r2, #0]
 80017da:	e030      	b.n	800183e <HAL_RCC_OscConfig+0x172>
 80017dc:	1d3b      	adds	r3, r7, #4
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d10c      	bne.n	8001800 <HAL_RCC_OscConfig+0x134>
 80017e6:	4b77      	ldr	r3, [pc, #476]	; (80019c4 <HAL_RCC_OscConfig+0x2f8>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4a76      	ldr	r2, [pc, #472]	; (80019c4 <HAL_RCC_OscConfig+0x2f8>)
 80017ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017f0:	6013      	str	r3, [r2, #0]
 80017f2:	4b74      	ldr	r3, [pc, #464]	; (80019c4 <HAL_RCC_OscConfig+0x2f8>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4a73      	ldr	r2, [pc, #460]	; (80019c4 <HAL_RCC_OscConfig+0x2f8>)
 80017f8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017fc:	6013      	str	r3, [r2, #0]
 80017fe:	e01e      	b.n	800183e <HAL_RCC_OscConfig+0x172>
 8001800:	1d3b      	adds	r3, r7, #4
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800180a:	d10c      	bne.n	8001826 <HAL_RCC_OscConfig+0x15a>
 800180c:	4b6d      	ldr	r3, [pc, #436]	; (80019c4 <HAL_RCC_OscConfig+0x2f8>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a6c      	ldr	r2, [pc, #432]	; (80019c4 <HAL_RCC_OscConfig+0x2f8>)
 8001812:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001816:	6013      	str	r3, [r2, #0]
 8001818:	4b6a      	ldr	r3, [pc, #424]	; (80019c4 <HAL_RCC_OscConfig+0x2f8>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a69      	ldr	r2, [pc, #420]	; (80019c4 <HAL_RCC_OscConfig+0x2f8>)
 800181e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001822:	6013      	str	r3, [r2, #0]
 8001824:	e00b      	b.n	800183e <HAL_RCC_OscConfig+0x172>
 8001826:	4b67      	ldr	r3, [pc, #412]	; (80019c4 <HAL_RCC_OscConfig+0x2f8>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4a66      	ldr	r2, [pc, #408]	; (80019c4 <HAL_RCC_OscConfig+0x2f8>)
 800182c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001830:	6013      	str	r3, [r2, #0]
 8001832:	4b64      	ldr	r3, [pc, #400]	; (80019c4 <HAL_RCC_OscConfig+0x2f8>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4a63      	ldr	r2, [pc, #396]	; (80019c4 <HAL_RCC_OscConfig+0x2f8>)
 8001838:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800183c:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800183e:	4b61      	ldr	r3, [pc, #388]	; (80019c4 <HAL_RCC_OscConfig+0x2f8>)
 8001840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001842:	f023 020f 	bic.w	r2, r3, #15
 8001846:	1d3b      	adds	r3, r7, #4
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	689b      	ldr	r3, [r3, #8]
 800184c:	495d      	ldr	r1, [pc, #372]	; (80019c4 <HAL_RCC_OscConfig+0x2f8>)
 800184e:	4313      	orrs	r3, r2
 8001850:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001852:	1d3b      	adds	r3, r7, #4
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d059      	beq.n	8001910 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800185c:	f7ff fa2e 	bl	8000cbc <HAL_GetTick>
 8001860:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001864:	e00a      	b.n	800187c <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001866:	f7ff fa29 	bl	8000cbc <HAL_GetTick>
 800186a:	4602      	mov	r2, r0
 800186c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001870:	1ad3      	subs	r3, r2, r3
 8001872:	2b64      	cmp	r3, #100	; 0x64
 8001874:	d902      	bls.n	800187c <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8001876:	2303      	movs	r3, #3
 8001878:	f000 be29 	b.w	80024ce <HAL_RCC_OscConfig+0xe02>
 800187c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001880:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001884:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001888:	fa93 f3a3 	rbit	r3, r3
 800188c:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001890:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001894:	fab3 f383 	clz	r3, r3
 8001898:	b2db      	uxtb	r3, r3
 800189a:	095b      	lsrs	r3, r3, #5
 800189c:	b2db      	uxtb	r3, r3
 800189e:	f043 0301 	orr.w	r3, r3, #1
 80018a2:	b2db      	uxtb	r3, r3
 80018a4:	2b01      	cmp	r3, #1
 80018a6:	d102      	bne.n	80018ae <HAL_RCC_OscConfig+0x1e2>
 80018a8:	4b46      	ldr	r3, [pc, #280]	; (80019c4 <HAL_RCC_OscConfig+0x2f8>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	e015      	b.n	80018da <HAL_RCC_OscConfig+0x20e>
 80018ae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80018b2:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018b6:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80018ba:	fa93 f3a3 	rbit	r3, r3
 80018be:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80018c2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80018c6:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80018ca:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80018ce:	fa93 f3a3 	rbit	r3, r3
 80018d2:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80018d6:	4b3b      	ldr	r3, [pc, #236]	; (80019c4 <HAL_RCC_OscConfig+0x2f8>)
 80018d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018da:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80018de:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80018e2:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80018e6:	fa92 f2a2 	rbit	r2, r2
 80018ea:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80018ee:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80018f2:	fab2 f282 	clz	r2, r2
 80018f6:	b2d2      	uxtb	r2, r2
 80018f8:	f042 0220 	orr.w	r2, r2, #32
 80018fc:	b2d2      	uxtb	r2, r2
 80018fe:	f002 021f 	and.w	r2, r2, #31
 8001902:	2101      	movs	r1, #1
 8001904:	fa01 f202 	lsl.w	r2, r1, r2
 8001908:	4013      	ands	r3, r2
 800190a:	2b00      	cmp	r3, #0
 800190c:	d0ab      	beq.n	8001866 <HAL_RCC_OscConfig+0x19a>
 800190e:	e05c      	b.n	80019ca <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001910:	f7ff f9d4 	bl	8000cbc <HAL_GetTick>
 8001914:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001918:	e00a      	b.n	8001930 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800191a:	f7ff f9cf 	bl	8000cbc <HAL_GetTick>
 800191e:	4602      	mov	r2, r0
 8001920:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001924:	1ad3      	subs	r3, r2, r3
 8001926:	2b64      	cmp	r3, #100	; 0x64
 8001928:	d902      	bls.n	8001930 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 800192a:	2303      	movs	r3, #3
 800192c:	f000 bdcf 	b.w	80024ce <HAL_RCC_OscConfig+0xe02>
 8001930:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001934:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001938:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800193c:	fa93 f3a3 	rbit	r3, r3
 8001940:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001944:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001948:	fab3 f383 	clz	r3, r3
 800194c:	b2db      	uxtb	r3, r3
 800194e:	095b      	lsrs	r3, r3, #5
 8001950:	b2db      	uxtb	r3, r3
 8001952:	f043 0301 	orr.w	r3, r3, #1
 8001956:	b2db      	uxtb	r3, r3
 8001958:	2b01      	cmp	r3, #1
 800195a:	d102      	bne.n	8001962 <HAL_RCC_OscConfig+0x296>
 800195c:	4b19      	ldr	r3, [pc, #100]	; (80019c4 <HAL_RCC_OscConfig+0x2f8>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	e015      	b.n	800198e <HAL_RCC_OscConfig+0x2c2>
 8001962:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001966:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800196a:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800196e:	fa93 f3a3 	rbit	r3, r3
 8001972:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001976:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800197a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800197e:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001982:	fa93 f3a3 	rbit	r3, r3
 8001986:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800198a:	4b0e      	ldr	r3, [pc, #56]	; (80019c4 <HAL_RCC_OscConfig+0x2f8>)
 800198c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800198e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001992:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001996:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800199a:	fa92 f2a2 	rbit	r2, r2
 800199e:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80019a2:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80019a6:	fab2 f282 	clz	r2, r2
 80019aa:	b2d2      	uxtb	r2, r2
 80019ac:	f042 0220 	orr.w	r2, r2, #32
 80019b0:	b2d2      	uxtb	r2, r2
 80019b2:	f002 021f 	and.w	r2, r2, #31
 80019b6:	2101      	movs	r1, #1
 80019b8:	fa01 f202 	lsl.w	r2, r1, r2
 80019bc:	4013      	ands	r3, r2
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d1ab      	bne.n	800191a <HAL_RCC_OscConfig+0x24e>
 80019c2:	e002      	b.n	80019ca <HAL_RCC_OscConfig+0x2fe>
 80019c4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019ca:	1d3b      	adds	r3, r7, #4
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f003 0302 	and.w	r3, r3, #2
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	f000 816f 	beq.w	8001cb8 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80019da:	4bd0      	ldr	r3, [pc, #832]	; (8001d1c <HAL_RCC_OscConfig+0x650>)
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	f003 030c 	and.w	r3, r3, #12
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d00b      	beq.n	80019fe <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80019e6:	4bcd      	ldr	r3, [pc, #820]	; (8001d1c <HAL_RCC_OscConfig+0x650>)
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	f003 030c 	and.w	r3, r3, #12
 80019ee:	2b08      	cmp	r3, #8
 80019f0:	d16c      	bne.n	8001acc <HAL_RCC_OscConfig+0x400>
 80019f2:	4bca      	ldr	r3, [pc, #808]	; (8001d1c <HAL_RCC_OscConfig+0x650>)
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d166      	bne.n	8001acc <HAL_RCC_OscConfig+0x400>
 80019fe:	2302      	movs	r3, #2
 8001a00:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a04:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001a08:	fa93 f3a3 	rbit	r3, r3
 8001a0c:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001a10:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a14:	fab3 f383 	clz	r3, r3
 8001a18:	b2db      	uxtb	r3, r3
 8001a1a:	095b      	lsrs	r3, r3, #5
 8001a1c:	b2db      	uxtb	r3, r3
 8001a1e:	f043 0301 	orr.w	r3, r3, #1
 8001a22:	b2db      	uxtb	r3, r3
 8001a24:	2b01      	cmp	r3, #1
 8001a26:	d102      	bne.n	8001a2e <HAL_RCC_OscConfig+0x362>
 8001a28:	4bbc      	ldr	r3, [pc, #752]	; (8001d1c <HAL_RCC_OscConfig+0x650>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	e013      	b.n	8001a56 <HAL_RCC_OscConfig+0x38a>
 8001a2e:	2302      	movs	r3, #2
 8001a30:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a34:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001a38:	fa93 f3a3 	rbit	r3, r3
 8001a3c:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001a40:	2302      	movs	r3, #2
 8001a42:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001a46:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001a4a:	fa93 f3a3 	rbit	r3, r3
 8001a4e:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001a52:	4bb2      	ldr	r3, [pc, #712]	; (8001d1c <HAL_RCC_OscConfig+0x650>)
 8001a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a56:	2202      	movs	r2, #2
 8001a58:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001a5c:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001a60:	fa92 f2a2 	rbit	r2, r2
 8001a64:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001a68:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001a6c:	fab2 f282 	clz	r2, r2
 8001a70:	b2d2      	uxtb	r2, r2
 8001a72:	f042 0220 	orr.w	r2, r2, #32
 8001a76:	b2d2      	uxtb	r2, r2
 8001a78:	f002 021f 	and.w	r2, r2, #31
 8001a7c:	2101      	movs	r1, #1
 8001a7e:	fa01 f202 	lsl.w	r2, r1, r2
 8001a82:	4013      	ands	r3, r2
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d007      	beq.n	8001a98 <HAL_RCC_OscConfig+0x3cc>
 8001a88:	1d3b      	adds	r3, r7, #4
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	691b      	ldr	r3, [r3, #16]
 8001a8e:	2b01      	cmp	r3, #1
 8001a90:	d002      	beq.n	8001a98 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8001a92:	2301      	movs	r3, #1
 8001a94:	f000 bd1b 	b.w	80024ce <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a98:	4ba0      	ldr	r3, [pc, #640]	; (8001d1c <HAL_RCC_OscConfig+0x650>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001aa0:	1d3b      	adds	r3, r7, #4
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	695b      	ldr	r3, [r3, #20]
 8001aa6:	21f8      	movs	r1, #248	; 0xf8
 8001aa8:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aac:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001ab0:	fa91 f1a1 	rbit	r1, r1
 8001ab4:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001ab8:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001abc:	fab1 f181 	clz	r1, r1
 8001ac0:	b2c9      	uxtb	r1, r1
 8001ac2:	408b      	lsls	r3, r1
 8001ac4:	4995      	ldr	r1, [pc, #596]	; (8001d1c <HAL_RCC_OscConfig+0x650>)
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001aca:	e0f5      	b.n	8001cb8 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001acc:	1d3b      	adds	r3, r7, #4
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	691b      	ldr	r3, [r3, #16]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	f000 8085 	beq.w	8001be2 <HAL_RCC_OscConfig+0x516>
 8001ad8:	2301      	movs	r3, #1
 8001ada:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ade:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001ae2:	fa93 f3a3 	rbit	r3, r3
 8001ae6:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001aea:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001aee:	fab3 f383 	clz	r3, r3
 8001af2:	b2db      	uxtb	r3, r3
 8001af4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001af8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001afc:	009b      	lsls	r3, r3, #2
 8001afe:	461a      	mov	r2, r3
 8001b00:	2301      	movs	r3, #1
 8001b02:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b04:	f7ff f8da 	bl	8000cbc <HAL_GetTick>
 8001b08:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b0c:	e00a      	b.n	8001b24 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b0e:	f7ff f8d5 	bl	8000cbc <HAL_GetTick>
 8001b12:	4602      	mov	r2, r0
 8001b14:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b18:	1ad3      	subs	r3, r2, r3
 8001b1a:	2b02      	cmp	r3, #2
 8001b1c:	d902      	bls.n	8001b24 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8001b1e:	2303      	movs	r3, #3
 8001b20:	f000 bcd5 	b.w	80024ce <HAL_RCC_OscConfig+0xe02>
 8001b24:	2302      	movs	r3, #2
 8001b26:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b2a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001b2e:	fa93 f3a3 	rbit	r3, r3
 8001b32:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001b36:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b3a:	fab3 f383 	clz	r3, r3
 8001b3e:	b2db      	uxtb	r3, r3
 8001b40:	095b      	lsrs	r3, r3, #5
 8001b42:	b2db      	uxtb	r3, r3
 8001b44:	f043 0301 	orr.w	r3, r3, #1
 8001b48:	b2db      	uxtb	r3, r3
 8001b4a:	2b01      	cmp	r3, #1
 8001b4c:	d102      	bne.n	8001b54 <HAL_RCC_OscConfig+0x488>
 8001b4e:	4b73      	ldr	r3, [pc, #460]	; (8001d1c <HAL_RCC_OscConfig+0x650>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	e013      	b.n	8001b7c <HAL_RCC_OscConfig+0x4b0>
 8001b54:	2302      	movs	r3, #2
 8001b56:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b5a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001b5e:	fa93 f3a3 	rbit	r3, r3
 8001b62:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001b66:	2302      	movs	r3, #2
 8001b68:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001b6c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001b70:	fa93 f3a3 	rbit	r3, r3
 8001b74:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001b78:	4b68      	ldr	r3, [pc, #416]	; (8001d1c <HAL_RCC_OscConfig+0x650>)
 8001b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b7c:	2202      	movs	r2, #2
 8001b7e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001b82:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001b86:	fa92 f2a2 	rbit	r2, r2
 8001b8a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001b8e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001b92:	fab2 f282 	clz	r2, r2
 8001b96:	b2d2      	uxtb	r2, r2
 8001b98:	f042 0220 	orr.w	r2, r2, #32
 8001b9c:	b2d2      	uxtb	r2, r2
 8001b9e:	f002 021f 	and.w	r2, r2, #31
 8001ba2:	2101      	movs	r1, #1
 8001ba4:	fa01 f202 	lsl.w	r2, r1, r2
 8001ba8:	4013      	ands	r3, r2
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d0af      	beq.n	8001b0e <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bae:	4b5b      	ldr	r3, [pc, #364]	; (8001d1c <HAL_RCC_OscConfig+0x650>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bb6:	1d3b      	adds	r3, r7, #4
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	695b      	ldr	r3, [r3, #20]
 8001bbc:	21f8      	movs	r1, #248	; 0xf8
 8001bbe:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bc2:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001bc6:	fa91 f1a1 	rbit	r1, r1
 8001bca:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001bce:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001bd2:	fab1 f181 	clz	r1, r1
 8001bd6:	b2c9      	uxtb	r1, r1
 8001bd8:	408b      	lsls	r3, r1
 8001bda:	4950      	ldr	r1, [pc, #320]	; (8001d1c <HAL_RCC_OscConfig+0x650>)
 8001bdc:	4313      	orrs	r3, r2
 8001bde:	600b      	str	r3, [r1, #0]
 8001be0:	e06a      	b.n	8001cb8 <HAL_RCC_OscConfig+0x5ec>
 8001be2:	2301      	movs	r3, #1
 8001be4:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001be8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001bec:	fa93 f3a3 	rbit	r3, r3
 8001bf0:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001bf4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bf8:	fab3 f383 	clz	r3, r3
 8001bfc:	b2db      	uxtb	r3, r3
 8001bfe:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001c02:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001c06:	009b      	lsls	r3, r3, #2
 8001c08:	461a      	mov	r2, r3
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c0e:	f7ff f855 	bl	8000cbc <HAL_GetTick>
 8001c12:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c16:	e00a      	b.n	8001c2e <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c18:	f7ff f850 	bl	8000cbc <HAL_GetTick>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c22:	1ad3      	subs	r3, r2, r3
 8001c24:	2b02      	cmp	r3, #2
 8001c26:	d902      	bls.n	8001c2e <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8001c28:	2303      	movs	r3, #3
 8001c2a:	f000 bc50 	b.w	80024ce <HAL_RCC_OscConfig+0xe02>
 8001c2e:	2302      	movs	r3, #2
 8001c30:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c34:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001c38:	fa93 f3a3 	rbit	r3, r3
 8001c3c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001c40:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c44:	fab3 f383 	clz	r3, r3
 8001c48:	b2db      	uxtb	r3, r3
 8001c4a:	095b      	lsrs	r3, r3, #5
 8001c4c:	b2db      	uxtb	r3, r3
 8001c4e:	f043 0301 	orr.w	r3, r3, #1
 8001c52:	b2db      	uxtb	r3, r3
 8001c54:	2b01      	cmp	r3, #1
 8001c56:	d102      	bne.n	8001c5e <HAL_RCC_OscConfig+0x592>
 8001c58:	4b30      	ldr	r3, [pc, #192]	; (8001d1c <HAL_RCC_OscConfig+0x650>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	e013      	b.n	8001c86 <HAL_RCC_OscConfig+0x5ba>
 8001c5e:	2302      	movs	r3, #2
 8001c60:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c64:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001c68:	fa93 f3a3 	rbit	r3, r3
 8001c6c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001c70:	2302      	movs	r3, #2
 8001c72:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001c76:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001c7a:	fa93 f3a3 	rbit	r3, r3
 8001c7e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001c82:	4b26      	ldr	r3, [pc, #152]	; (8001d1c <HAL_RCC_OscConfig+0x650>)
 8001c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c86:	2202      	movs	r2, #2
 8001c88:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001c8c:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001c90:	fa92 f2a2 	rbit	r2, r2
 8001c94:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001c98:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001c9c:	fab2 f282 	clz	r2, r2
 8001ca0:	b2d2      	uxtb	r2, r2
 8001ca2:	f042 0220 	orr.w	r2, r2, #32
 8001ca6:	b2d2      	uxtb	r2, r2
 8001ca8:	f002 021f 	and.w	r2, r2, #31
 8001cac:	2101      	movs	r1, #1
 8001cae:	fa01 f202 	lsl.w	r2, r1, r2
 8001cb2:	4013      	ands	r3, r2
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d1af      	bne.n	8001c18 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cb8:	1d3b      	adds	r3, r7, #4
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f003 0308 	and.w	r3, r3, #8
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	f000 80da 	beq.w	8001e7c <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001cc8:	1d3b      	adds	r3, r7, #4
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	699b      	ldr	r3, [r3, #24]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d069      	beq.n	8001da6 <HAL_RCC_OscConfig+0x6da>
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cd8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001cdc:	fa93 f3a3 	rbit	r3, r3
 8001ce0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001ce4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ce8:	fab3 f383 	clz	r3, r3
 8001cec:	b2db      	uxtb	r3, r3
 8001cee:	461a      	mov	r2, r3
 8001cf0:	4b0b      	ldr	r3, [pc, #44]	; (8001d20 <HAL_RCC_OscConfig+0x654>)
 8001cf2:	4413      	add	r3, r2
 8001cf4:	009b      	lsls	r3, r3, #2
 8001cf6:	461a      	mov	r2, r3
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cfc:	f7fe ffde 	bl	8000cbc <HAL_GetTick>
 8001d00:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d04:	e00e      	b.n	8001d24 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d06:	f7fe ffd9 	bl	8000cbc <HAL_GetTick>
 8001d0a:	4602      	mov	r2, r0
 8001d0c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d10:	1ad3      	subs	r3, r2, r3
 8001d12:	2b02      	cmp	r3, #2
 8001d14:	d906      	bls.n	8001d24 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8001d16:	2303      	movs	r3, #3
 8001d18:	e3d9      	b.n	80024ce <HAL_RCC_OscConfig+0xe02>
 8001d1a:	bf00      	nop
 8001d1c:	40021000 	.word	0x40021000
 8001d20:	10908120 	.word	0x10908120
 8001d24:	2302      	movs	r3, #2
 8001d26:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d2a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001d2e:	fa93 f3a3 	rbit	r3, r3
 8001d32:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001d36:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001d3a:	2202      	movs	r2, #2
 8001d3c:	601a      	str	r2, [r3, #0]
 8001d3e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	fa93 f2a3 	rbit	r2, r3
 8001d48:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001d4c:	601a      	str	r2, [r3, #0]
 8001d4e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001d52:	2202      	movs	r2, #2
 8001d54:	601a      	str	r2, [r3, #0]
 8001d56:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	fa93 f2a3 	rbit	r2, r3
 8001d60:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001d64:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d66:	4ba5      	ldr	r3, [pc, #660]	; (8001ffc <HAL_RCC_OscConfig+0x930>)
 8001d68:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d6a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001d6e:	2102      	movs	r1, #2
 8001d70:	6019      	str	r1, [r3, #0]
 8001d72:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	fa93 f1a3 	rbit	r1, r3
 8001d7c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001d80:	6019      	str	r1, [r3, #0]
  return result;
 8001d82:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	fab3 f383 	clz	r3, r3
 8001d8c:	b2db      	uxtb	r3, r3
 8001d8e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001d92:	b2db      	uxtb	r3, r3
 8001d94:	f003 031f 	and.w	r3, r3, #31
 8001d98:	2101      	movs	r1, #1
 8001d9a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d9e:	4013      	ands	r3, r2
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d0b0      	beq.n	8001d06 <HAL_RCC_OscConfig+0x63a>
 8001da4:	e06a      	b.n	8001e7c <HAL_RCC_OscConfig+0x7b0>
 8001da6:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001daa:	2201      	movs	r2, #1
 8001dac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dae:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	fa93 f2a3 	rbit	r2, r3
 8001db8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001dbc:	601a      	str	r2, [r3, #0]
  return result;
 8001dbe:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001dc2:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001dc4:	fab3 f383 	clz	r3, r3
 8001dc8:	b2db      	uxtb	r3, r3
 8001dca:	461a      	mov	r2, r3
 8001dcc:	4b8c      	ldr	r3, [pc, #560]	; (8002000 <HAL_RCC_OscConfig+0x934>)
 8001dce:	4413      	add	r3, r2
 8001dd0:	009b      	lsls	r3, r3, #2
 8001dd2:	461a      	mov	r2, r3
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dd8:	f7fe ff70 	bl	8000cbc <HAL_GetTick>
 8001ddc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001de0:	e009      	b.n	8001df6 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001de2:	f7fe ff6b 	bl	8000cbc <HAL_GetTick>
 8001de6:	4602      	mov	r2, r0
 8001de8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001dec:	1ad3      	subs	r3, r2, r3
 8001dee:	2b02      	cmp	r3, #2
 8001df0:	d901      	bls.n	8001df6 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8001df2:	2303      	movs	r3, #3
 8001df4:	e36b      	b.n	80024ce <HAL_RCC_OscConfig+0xe02>
 8001df6:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001dfa:	2202      	movs	r2, #2
 8001dfc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dfe:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	fa93 f2a3 	rbit	r2, r3
 8001e08:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001e0c:	601a      	str	r2, [r3, #0]
 8001e0e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001e12:	2202      	movs	r2, #2
 8001e14:	601a      	str	r2, [r3, #0]
 8001e16:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	fa93 f2a3 	rbit	r2, r3
 8001e20:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001e24:	601a      	str	r2, [r3, #0]
 8001e26:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001e2a:	2202      	movs	r2, #2
 8001e2c:	601a      	str	r2, [r3, #0]
 8001e2e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	fa93 f2a3 	rbit	r2, r3
 8001e38:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001e3c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e3e:	4b6f      	ldr	r3, [pc, #444]	; (8001ffc <HAL_RCC_OscConfig+0x930>)
 8001e40:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e42:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001e46:	2102      	movs	r1, #2
 8001e48:	6019      	str	r1, [r3, #0]
 8001e4a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	fa93 f1a3 	rbit	r1, r3
 8001e54:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001e58:	6019      	str	r1, [r3, #0]
  return result;
 8001e5a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	fab3 f383 	clz	r3, r3
 8001e64:	b2db      	uxtb	r3, r3
 8001e66:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001e6a:	b2db      	uxtb	r3, r3
 8001e6c:	f003 031f 	and.w	r3, r3, #31
 8001e70:	2101      	movs	r1, #1
 8001e72:	fa01 f303 	lsl.w	r3, r1, r3
 8001e76:	4013      	ands	r3, r2
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d1b2      	bne.n	8001de2 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e7c:	1d3b      	adds	r3, r7, #4
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f003 0304 	and.w	r3, r3, #4
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	f000 8158 	beq.w	800213c <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e92:	4b5a      	ldr	r3, [pc, #360]	; (8001ffc <HAL_RCC_OscConfig+0x930>)
 8001e94:	69db      	ldr	r3, [r3, #28]
 8001e96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d112      	bne.n	8001ec4 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e9e:	4b57      	ldr	r3, [pc, #348]	; (8001ffc <HAL_RCC_OscConfig+0x930>)
 8001ea0:	69db      	ldr	r3, [r3, #28]
 8001ea2:	4a56      	ldr	r2, [pc, #344]	; (8001ffc <HAL_RCC_OscConfig+0x930>)
 8001ea4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ea8:	61d3      	str	r3, [r2, #28]
 8001eaa:	4b54      	ldr	r3, [pc, #336]	; (8001ffc <HAL_RCC_OscConfig+0x930>)
 8001eac:	69db      	ldr	r3, [r3, #28]
 8001eae:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001eb2:	f107 0308 	add.w	r3, r7, #8
 8001eb6:	601a      	str	r2, [r3, #0]
 8001eb8:	f107 0308 	add.w	r3, r7, #8
 8001ebc:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ec4:	4b4f      	ldr	r3, [pc, #316]	; (8002004 <HAL_RCC_OscConfig+0x938>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d11a      	bne.n	8001f06 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ed0:	4b4c      	ldr	r3, [pc, #304]	; (8002004 <HAL_RCC_OscConfig+0x938>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a4b      	ldr	r2, [pc, #300]	; (8002004 <HAL_RCC_OscConfig+0x938>)
 8001ed6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001eda:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001edc:	f7fe feee 	bl	8000cbc <HAL_GetTick>
 8001ee0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ee4:	e009      	b.n	8001efa <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ee6:	f7fe fee9 	bl	8000cbc <HAL_GetTick>
 8001eea:	4602      	mov	r2, r0
 8001eec:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001ef0:	1ad3      	subs	r3, r2, r3
 8001ef2:	2b64      	cmp	r3, #100	; 0x64
 8001ef4:	d901      	bls.n	8001efa <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8001ef6:	2303      	movs	r3, #3
 8001ef8:	e2e9      	b.n	80024ce <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001efa:	4b42      	ldr	r3, [pc, #264]	; (8002004 <HAL_RCC_OscConfig+0x938>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d0ef      	beq.n	8001ee6 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f06:	1d3b      	adds	r3, r7, #4
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	68db      	ldr	r3, [r3, #12]
 8001f0c:	2b01      	cmp	r3, #1
 8001f0e:	d106      	bne.n	8001f1e <HAL_RCC_OscConfig+0x852>
 8001f10:	4b3a      	ldr	r3, [pc, #232]	; (8001ffc <HAL_RCC_OscConfig+0x930>)
 8001f12:	6a1b      	ldr	r3, [r3, #32]
 8001f14:	4a39      	ldr	r2, [pc, #228]	; (8001ffc <HAL_RCC_OscConfig+0x930>)
 8001f16:	f043 0301 	orr.w	r3, r3, #1
 8001f1a:	6213      	str	r3, [r2, #32]
 8001f1c:	e02f      	b.n	8001f7e <HAL_RCC_OscConfig+0x8b2>
 8001f1e:	1d3b      	adds	r3, r7, #4
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	68db      	ldr	r3, [r3, #12]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d10c      	bne.n	8001f42 <HAL_RCC_OscConfig+0x876>
 8001f28:	4b34      	ldr	r3, [pc, #208]	; (8001ffc <HAL_RCC_OscConfig+0x930>)
 8001f2a:	6a1b      	ldr	r3, [r3, #32]
 8001f2c:	4a33      	ldr	r2, [pc, #204]	; (8001ffc <HAL_RCC_OscConfig+0x930>)
 8001f2e:	f023 0301 	bic.w	r3, r3, #1
 8001f32:	6213      	str	r3, [r2, #32]
 8001f34:	4b31      	ldr	r3, [pc, #196]	; (8001ffc <HAL_RCC_OscConfig+0x930>)
 8001f36:	6a1b      	ldr	r3, [r3, #32]
 8001f38:	4a30      	ldr	r2, [pc, #192]	; (8001ffc <HAL_RCC_OscConfig+0x930>)
 8001f3a:	f023 0304 	bic.w	r3, r3, #4
 8001f3e:	6213      	str	r3, [r2, #32]
 8001f40:	e01d      	b.n	8001f7e <HAL_RCC_OscConfig+0x8b2>
 8001f42:	1d3b      	adds	r3, r7, #4
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	68db      	ldr	r3, [r3, #12]
 8001f48:	2b05      	cmp	r3, #5
 8001f4a:	d10c      	bne.n	8001f66 <HAL_RCC_OscConfig+0x89a>
 8001f4c:	4b2b      	ldr	r3, [pc, #172]	; (8001ffc <HAL_RCC_OscConfig+0x930>)
 8001f4e:	6a1b      	ldr	r3, [r3, #32]
 8001f50:	4a2a      	ldr	r2, [pc, #168]	; (8001ffc <HAL_RCC_OscConfig+0x930>)
 8001f52:	f043 0304 	orr.w	r3, r3, #4
 8001f56:	6213      	str	r3, [r2, #32]
 8001f58:	4b28      	ldr	r3, [pc, #160]	; (8001ffc <HAL_RCC_OscConfig+0x930>)
 8001f5a:	6a1b      	ldr	r3, [r3, #32]
 8001f5c:	4a27      	ldr	r2, [pc, #156]	; (8001ffc <HAL_RCC_OscConfig+0x930>)
 8001f5e:	f043 0301 	orr.w	r3, r3, #1
 8001f62:	6213      	str	r3, [r2, #32]
 8001f64:	e00b      	b.n	8001f7e <HAL_RCC_OscConfig+0x8b2>
 8001f66:	4b25      	ldr	r3, [pc, #148]	; (8001ffc <HAL_RCC_OscConfig+0x930>)
 8001f68:	6a1b      	ldr	r3, [r3, #32]
 8001f6a:	4a24      	ldr	r2, [pc, #144]	; (8001ffc <HAL_RCC_OscConfig+0x930>)
 8001f6c:	f023 0301 	bic.w	r3, r3, #1
 8001f70:	6213      	str	r3, [r2, #32]
 8001f72:	4b22      	ldr	r3, [pc, #136]	; (8001ffc <HAL_RCC_OscConfig+0x930>)
 8001f74:	6a1b      	ldr	r3, [r3, #32]
 8001f76:	4a21      	ldr	r2, [pc, #132]	; (8001ffc <HAL_RCC_OscConfig+0x930>)
 8001f78:	f023 0304 	bic.w	r3, r3, #4
 8001f7c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f7e:	1d3b      	adds	r3, r7, #4
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	68db      	ldr	r3, [r3, #12]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d06b      	beq.n	8002060 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f88:	f7fe fe98 	bl	8000cbc <HAL_GetTick>
 8001f8c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f90:	e00b      	b.n	8001faa <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f92:	f7fe fe93 	bl	8000cbc <HAL_GetTick>
 8001f96:	4602      	mov	r2, r0
 8001f98:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f9c:	1ad3      	subs	r3, r2, r3
 8001f9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d901      	bls.n	8001faa <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8001fa6:	2303      	movs	r3, #3
 8001fa8:	e291      	b.n	80024ce <HAL_RCC_OscConfig+0xe02>
 8001faa:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001fae:	2202      	movs	r2, #2
 8001fb0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fb2:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	fa93 f2a3 	rbit	r2, r3
 8001fbc:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001fc0:	601a      	str	r2, [r3, #0]
 8001fc2:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001fc6:	2202      	movs	r2, #2
 8001fc8:	601a      	str	r2, [r3, #0]
 8001fca:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	fa93 f2a3 	rbit	r2, r3
 8001fd4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001fd8:	601a      	str	r2, [r3, #0]
  return result;
 8001fda:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001fde:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fe0:	fab3 f383 	clz	r3, r3
 8001fe4:	b2db      	uxtb	r3, r3
 8001fe6:	095b      	lsrs	r3, r3, #5
 8001fe8:	b2db      	uxtb	r3, r3
 8001fea:	f043 0302 	orr.w	r3, r3, #2
 8001fee:	b2db      	uxtb	r3, r3
 8001ff0:	2b02      	cmp	r3, #2
 8001ff2:	d109      	bne.n	8002008 <HAL_RCC_OscConfig+0x93c>
 8001ff4:	4b01      	ldr	r3, [pc, #4]	; (8001ffc <HAL_RCC_OscConfig+0x930>)
 8001ff6:	6a1b      	ldr	r3, [r3, #32]
 8001ff8:	e014      	b.n	8002024 <HAL_RCC_OscConfig+0x958>
 8001ffa:	bf00      	nop
 8001ffc:	40021000 	.word	0x40021000
 8002000:	10908120 	.word	0x10908120
 8002004:	40007000 	.word	0x40007000
 8002008:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800200c:	2202      	movs	r2, #2
 800200e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002010:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	fa93 f2a3 	rbit	r2, r3
 800201a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800201e:	601a      	str	r2, [r3, #0]
 8002020:	4bbb      	ldr	r3, [pc, #748]	; (8002310 <HAL_RCC_OscConfig+0xc44>)
 8002022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002024:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002028:	2102      	movs	r1, #2
 800202a:	6011      	str	r1, [r2, #0]
 800202c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002030:	6812      	ldr	r2, [r2, #0]
 8002032:	fa92 f1a2 	rbit	r1, r2
 8002036:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800203a:	6011      	str	r1, [r2, #0]
  return result;
 800203c:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8002040:	6812      	ldr	r2, [r2, #0]
 8002042:	fab2 f282 	clz	r2, r2
 8002046:	b2d2      	uxtb	r2, r2
 8002048:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800204c:	b2d2      	uxtb	r2, r2
 800204e:	f002 021f 	and.w	r2, r2, #31
 8002052:	2101      	movs	r1, #1
 8002054:	fa01 f202 	lsl.w	r2, r1, r2
 8002058:	4013      	ands	r3, r2
 800205a:	2b00      	cmp	r3, #0
 800205c:	d099      	beq.n	8001f92 <HAL_RCC_OscConfig+0x8c6>
 800205e:	e063      	b.n	8002128 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002060:	f7fe fe2c 	bl	8000cbc <HAL_GetTick>
 8002064:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002068:	e00b      	b.n	8002082 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800206a:	f7fe fe27 	bl	8000cbc <HAL_GetTick>
 800206e:	4602      	mov	r2, r0
 8002070:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002074:	1ad3      	subs	r3, r2, r3
 8002076:	f241 3288 	movw	r2, #5000	; 0x1388
 800207a:	4293      	cmp	r3, r2
 800207c:	d901      	bls.n	8002082 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 800207e:	2303      	movs	r3, #3
 8002080:	e225      	b.n	80024ce <HAL_RCC_OscConfig+0xe02>
 8002082:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002086:	2202      	movs	r2, #2
 8002088:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800208a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	fa93 f2a3 	rbit	r2, r3
 8002094:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002098:	601a      	str	r2, [r3, #0]
 800209a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800209e:	2202      	movs	r2, #2
 80020a0:	601a      	str	r2, [r3, #0]
 80020a2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	fa93 f2a3 	rbit	r2, r3
 80020ac:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80020b0:	601a      	str	r2, [r3, #0]
  return result;
 80020b2:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80020b6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020b8:	fab3 f383 	clz	r3, r3
 80020bc:	b2db      	uxtb	r3, r3
 80020be:	095b      	lsrs	r3, r3, #5
 80020c0:	b2db      	uxtb	r3, r3
 80020c2:	f043 0302 	orr.w	r3, r3, #2
 80020c6:	b2db      	uxtb	r3, r3
 80020c8:	2b02      	cmp	r3, #2
 80020ca:	d102      	bne.n	80020d2 <HAL_RCC_OscConfig+0xa06>
 80020cc:	4b90      	ldr	r3, [pc, #576]	; (8002310 <HAL_RCC_OscConfig+0xc44>)
 80020ce:	6a1b      	ldr	r3, [r3, #32]
 80020d0:	e00d      	b.n	80020ee <HAL_RCC_OscConfig+0xa22>
 80020d2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80020d6:	2202      	movs	r2, #2
 80020d8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020da:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	fa93 f2a3 	rbit	r2, r3
 80020e4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80020e8:	601a      	str	r2, [r3, #0]
 80020ea:	4b89      	ldr	r3, [pc, #548]	; (8002310 <HAL_RCC_OscConfig+0xc44>)
 80020ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ee:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80020f2:	2102      	movs	r1, #2
 80020f4:	6011      	str	r1, [r2, #0]
 80020f6:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80020fa:	6812      	ldr	r2, [r2, #0]
 80020fc:	fa92 f1a2 	rbit	r1, r2
 8002100:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8002104:	6011      	str	r1, [r2, #0]
  return result;
 8002106:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800210a:	6812      	ldr	r2, [r2, #0]
 800210c:	fab2 f282 	clz	r2, r2
 8002110:	b2d2      	uxtb	r2, r2
 8002112:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002116:	b2d2      	uxtb	r2, r2
 8002118:	f002 021f 	and.w	r2, r2, #31
 800211c:	2101      	movs	r1, #1
 800211e:	fa01 f202 	lsl.w	r2, r1, r2
 8002122:	4013      	ands	r3, r2
 8002124:	2b00      	cmp	r3, #0
 8002126:	d1a0      	bne.n	800206a <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002128:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 800212c:	2b01      	cmp	r3, #1
 800212e:	d105      	bne.n	800213c <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002130:	4b77      	ldr	r3, [pc, #476]	; (8002310 <HAL_RCC_OscConfig+0xc44>)
 8002132:	69db      	ldr	r3, [r3, #28]
 8002134:	4a76      	ldr	r2, [pc, #472]	; (8002310 <HAL_RCC_OscConfig+0xc44>)
 8002136:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800213a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800213c:	1d3b      	adds	r3, r7, #4
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	69db      	ldr	r3, [r3, #28]
 8002142:	2b00      	cmp	r3, #0
 8002144:	f000 81c2 	beq.w	80024cc <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002148:	4b71      	ldr	r3, [pc, #452]	; (8002310 <HAL_RCC_OscConfig+0xc44>)
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	f003 030c 	and.w	r3, r3, #12
 8002150:	2b08      	cmp	r3, #8
 8002152:	f000 819c 	beq.w	800248e <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002156:	1d3b      	adds	r3, r7, #4
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	69db      	ldr	r3, [r3, #28]
 800215c:	2b02      	cmp	r3, #2
 800215e:	f040 8114 	bne.w	800238a <HAL_RCC_OscConfig+0xcbe>
 8002162:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002166:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800216a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800216c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	fa93 f2a3 	rbit	r2, r3
 8002176:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800217a:	601a      	str	r2, [r3, #0]
  return result;
 800217c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002180:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002182:	fab3 f383 	clz	r3, r3
 8002186:	b2db      	uxtb	r3, r3
 8002188:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800218c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002190:	009b      	lsls	r3, r3, #2
 8002192:	461a      	mov	r2, r3
 8002194:	2300      	movs	r3, #0
 8002196:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002198:	f7fe fd90 	bl	8000cbc <HAL_GetTick>
 800219c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021a0:	e009      	b.n	80021b6 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021a2:	f7fe fd8b 	bl	8000cbc <HAL_GetTick>
 80021a6:	4602      	mov	r2, r0
 80021a8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80021ac:	1ad3      	subs	r3, r2, r3
 80021ae:	2b02      	cmp	r3, #2
 80021b0:	d901      	bls.n	80021b6 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 80021b2:	2303      	movs	r3, #3
 80021b4:	e18b      	b.n	80024ce <HAL_RCC_OscConfig+0xe02>
 80021b6:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80021ba:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80021be:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021c0:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	fa93 f2a3 	rbit	r2, r3
 80021ca:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80021ce:	601a      	str	r2, [r3, #0]
  return result;
 80021d0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80021d4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021d6:	fab3 f383 	clz	r3, r3
 80021da:	b2db      	uxtb	r3, r3
 80021dc:	095b      	lsrs	r3, r3, #5
 80021de:	b2db      	uxtb	r3, r3
 80021e0:	f043 0301 	orr.w	r3, r3, #1
 80021e4:	b2db      	uxtb	r3, r3
 80021e6:	2b01      	cmp	r3, #1
 80021e8:	d102      	bne.n	80021f0 <HAL_RCC_OscConfig+0xb24>
 80021ea:	4b49      	ldr	r3, [pc, #292]	; (8002310 <HAL_RCC_OscConfig+0xc44>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	e01b      	b.n	8002228 <HAL_RCC_OscConfig+0xb5c>
 80021f0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80021f4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80021f8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021fa:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	fa93 f2a3 	rbit	r2, r3
 8002204:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002208:	601a      	str	r2, [r3, #0]
 800220a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800220e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002212:	601a      	str	r2, [r3, #0]
 8002214:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	fa93 f2a3 	rbit	r2, r3
 800221e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002222:	601a      	str	r2, [r3, #0]
 8002224:	4b3a      	ldr	r3, [pc, #232]	; (8002310 <HAL_RCC_OscConfig+0xc44>)
 8002226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002228:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800222c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002230:	6011      	str	r1, [r2, #0]
 8002232:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002236:	6812      	ldr	r2, [r2, #0]
 8002238:	fa92 f1a2 	rbit	r1, r2
 800223c:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8002240:	6011      	str	r1, [r2, #0]
  return result;
 8002242:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8002246:	6812      	ldr	r2, [r2, #0]
 8002248:	fab2 f282 	clz	r2, r2
 800224c:	b2d2      	uxtb	r2, r2
 800224e:	f042 0220 	orr.w	r2, r2, #32
 8002252:	b2d2      	uxtb	r2, r2
 8002254:	f002 021f 	and.w	r2, r2, #31
 8002258:	2101      	movs	r1, #1
 800225a:	fa01 f202 	lsl.w	r2, r1, r2
 800225e:	4013      	ands	r3, r2
 8002260:	2b00      	cmp	r3, #0
 8002262:	d19e      	bne.n	80021a2 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002264:	4b2a      	ldr	r3, [pc, #168]	; (8002310 <HAL_RCC_OscConfig+0xc44>)
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800226c:	1d3b      	adds	r3, r7, #4
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002272:	1d3b      	adds	r3, r7, #4
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	6a1b      	ldr	r3, [r3, #32]
 8002278:	430b      	orrs	r3, r1
 800227a:	4925      	ldr	r1, [pc, #148]	; (8002310 <HAL_RCC_OscConfig+0xc44>)
 800227c:	4313      	orrs	r3, r2
 800227e:	604b      	str	r3, [r1, #4]
 8002280:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002284:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002288:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800228a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	fa93 f2a3 	rbit	r2, r3
 8002294:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002298:	601a      	str	r2, [r3, #0]
  return result;
 800229a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800229e:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022a0:	fab3 f383 	clz	r3, r3
 80022a4:	b2db      	uxtb	r3, r3
 80022a6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80022aa:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80022ae:	009b      	lsls	r3, r3, #2
 80022b0:	461a      	mov	r2, r3
 80022b2:	2301      	movs	r3, #1
 80022b4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022b6:	f7fe fd01 	bl	8000cbc <HAL_GetTick>
 80022ba:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022be:	e009      	b.n	80022d4 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022c0:	f7fe fcfc 	bl	8000cbc <HAL_GetTick>
 80022c4:	4602      	mov	r2, r0
 80022c6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80022ca:	1ad3      	subs	r3, r2, r3
 80022cc:	2b02      	cmp	r3, #2
 80022ce:	d901      	bls.n	80022d4 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 80022d0:	2303      	movs	r3, #3
 80022d2:	e0fc      	b.n	80024ce <HAL_RCC_OscConfig+0xe02>
 80022d4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80022d8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80022dc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022de:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	fa93 f2a3 	rbit	r2, r3
 80022e8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80022ec:	601a      	str	r2, [r3, #0]
  return result;
 80022ee:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80022f2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022f4:	fab3 f383 	clz	r3, r3
 80022f8:	b2db      	uxtb	r3, r3
 80022fa:	095b      	lsrs	r3, r3, #5
 80022fc:	b2db      	uxtb	r3, r3
 80022fe:	f043 0301 	orr.w	r3, r3, #1
 8002302:	b2db      	uxtb	r3, r3
 8002304:	2b01      	cmp	r3, #1
 8002306:	d105      	bne.n	8002314 <HAL_RCC_OscConfig+0xc48>
 8002308:	4b01      	ldr	r3, [pc, #4]	; (8002310 <HAL_RCC_OscConfig+0xc44>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	e01e      	b.n	800234c <HAL_RCC_OscConfig+0xc80>
 800230e:	bf00      	nop
 8002310:	40021000 	.word	0x40021000
 8002314:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002318:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800231c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800231e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	fa93 f2a3 	rbit	r2, r3
 8002328:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800232c:	601a      	str	r2, [r3, #0]
 800232e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002332:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002336:	601a      	str	r2, [r3, #0]
 8002338:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	fa93 f2a3 	rbit	r2, r3
 8002342:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002346:	601a      	str	r2, [r3, #0]
 8002348:	4b63      	ldr	r3, [pc, #396]	; (80024d8 <HAL_RCC_OscConfig+0xe0c>)
 800234a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800234c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002350:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002354:	6011      	str	r1, [r2, #0]
 8002356:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800235a:	6812      	ldr	r2, [r2, #0]
 800235c:	fa92 f1a2 	rbit	r1, r2
 8002360:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002364:	6011      	str	r1, [r2, #0]
  return result;
 8002366:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800236a:	6812      	ldr	r2, [r2, #0]
 800236c:	fab2 f282 	clz	r2, r2
 8002370:	b2d2      	uxtb	r2, r2
 8002372:	f042 0220 	orr.w	r2, r2, #32
 8002376:	b2d2      	uxtb	r2, r2
 8002378:	f002 021f 	and.w	r2, r2, #31
 800237c:	2101      	movs	r1, #1
 800237e:	fa01 f202 	lsl.w	r2, r1, r2
 8002382:	4013      	ands	r3, r2
 8002384:	2b00      	cmp	r3, #0
 8002386:	d09b      	beq.n	80022c0 <HAL_RCC_OscConfig+0xbf4>
 8002388:	e0a0      	b.n	80024cc <HAL_RCC_OscConfig+0xe00>
 800238a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800238e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002392:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002394:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	fa93 f2a3 	rbit	r2, r3
 800239e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80023a2:	601a      	str	r2, [r3, #0]
  return result;
 80023a4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80023a8:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023aa:	fab3 f383 	clz	r3, r3
 80023ae:	b2db      	uxtb	r3, r3
 80023b0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80023b4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80023b8:	009b      	lsls	r3, r3, #2
 80023ba:	461a      	mov	r2, r3
 80023bc:	2300      	movs	r3, #0
 80023be:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023c0:	f7fe fc7c 	bl	8000cbc <HAL_GetTick>
 80023c4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023c8:	e009      	b.n	80023de <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023ca:	f7fe fc77 	bl	8000cbc <HAL_GetTick>
 80023ce:	4602      	mov	r2, r0
 80023d0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80023d4:	1ad3      	subs	r3, r2, r3
 80023d6:	2b02      	cmp	r3, #2
 80023d8:	d901      	bls.n	80023de <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 80023da:	2303      	movs	r3, #3
 80023dc:	e077      	b.n	80024ce <HAL_RCC_OscConfig+0xe02>
 80023de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80023e2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80023e6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023e8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	fa93 f2a3 	rbit	r2, r3
 80023f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023f6:	601a      	str	r2, [r3, #0]
  return result;
 80023f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023fc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023fe:	fab3 f383 	clz	r3, r3
 8002402:	b2db      	uxtb	r3, r3
 8002404:	095b      	lsrs	r3, r3, #5
 8002406:	b2db      	uxtb	r3, r3
 8002408:	f043 0301 	orr.w	r3, r3, #1
 800240c:	b2db      	uxtb	r3, r3
 800240e:	2b01      	cmp	r3, #1
 8002410:	d102      	bne.n	8002418 <HAL_RCC_OscConfig+0xd4c>
 8002412:	4b31      	ldr	r3, [pc, #196]	; (80024d8 <HAL_RCC_OscConfig+0xe0c>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	e01b      	b.n	8002450 <HAL_RCC_OscConfig+0xd84>
 8002418:	f107 0320 	add.w	r3, r7, #32
 800241c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002420:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002422:	f107 0320 	add.w	r3, r7, #32
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	fa93 f2a3 	rbit	r2, r3
 800242c:	f107 031c 	add.w	r3, r7, #28
 8002430:	601a      	str	r2, [r3, #0]
 8002432:	f107 0318 	add.w	r3, r7, #24
 8002436:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800243a:	601a      	str	r2, [r3, #0]
 800243c:	f107 0318 	add.w	r3, r7, #24
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	fa93 f2a3 	rbit	r2, r3
 8002446:	f107 0314 	add.w	r3, r7, #20
 800244a:	601a      	str	r2, [r3, #0]
 800244c:	4b22      	ldr	r3, [pc, #136]	; (80024d8 <HAL_RCC_OscConfig+0xe0c>)
 800244e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002450:	f107 0210 	add.w	r2, r7, #16
 8002454:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002458:	6011      	str	r1, [r2, #0]
 800245a:	f107 0210 	add.w	r2, r7, #16
 800245e:	6812      	ldr	r2, [r2, #0]
 8002460:	fa92 f1a2 	rbit	r1, r2
 8002464:	f107 020c 	add.w	r2, r7, #12
 8002468:	6011      	str	r1, [r2, #0]
  return result;
 800246a:	f107 020c 	add.w	r2, r7, #12
 800246e:	6812      	ldr	r2, [r2, #0]
 8002470:	fab2 f282 	clz	r2, r2
 8002474:	b2d2      	uxtb	r2, r2
 8002476:	f042 0220 	orr.w	r2, r2, #32
 800247a:	b2d2      	uxtb	r2, r2
 800247c:	f002 021f 	and.w	r2, r2, #31
 8002480:	2101      	movs	r1, #1
 8002482:	fa01 f202 	lsl.w	r2, r1, r2
 8002486:	4013      	ands	r3, r2
 8002488:	2b00      	cmp	r3, #0
 800248a:	d19e      	bne.n	80023ca <HAL_RCC_OscConfig+0xcfe>
 800248c:	e01e      	b.n	80024cc <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800248e:	1d3b      	adds	r3, r7, #4
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	69db      	ldr	r3, [r3, #28]
 8002494:	2b01      	cmp	r3, #1
 8002496:	d101      	bne.n	800249c <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8002498:	2301      	movs	r3, #1
 800249a:	e018      	b.n	80024ce <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800249c:	4b0e      	ldr	r3, [pc, #56]	; (80024d8 <HAL_RCC_OscConfig+0xe0c>)
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80024a4:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80024a8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80024ac:	1d3b      	adds	r3, r7, #4
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	6a1b      	ldr	r3, [r3, #32]
 80024b2:	429a      	cmp	r2, r3
 80024b4:	d108      	bne.n	80024c8 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80024b6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80024ba:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80024be:	1d3b      	adds	r3, r7, #4
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80024c4:	429a      	cmp	r2, r3
 80024c6:	d001      	beq.n	80024cc <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 80024c8:	2301      	movs	r3, #1
 80024ca:	e000      	b.n	80024ce <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 80024cc:	2300      	movs	r3, #0
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}
 80024d8:	40021000 	.word	0x40021000

080024dc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b09e      	sub	sp, #120	; 0x78
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
 80024e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80024e6:	2300      	movs	r3, #0
 80024e8:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d101      	bne.n	80024f4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80024f0:	2301      	movs	r3, #1
 80024f2:	e162      	b.n	80027ba <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80024f4:	4b90      	ldr	r3, [pc, #576]	; (8002738 <HAL_RCC_ClockConfig+0x25c>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f003 0307 	and.w	r3, r3, #7
 80024fc:	683a      	ldr	r2, [r7, #0]
 80024fe:	429a      	cmp	r2, r3
 8002500:	d910      	bls.n	8002524 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002502:	4b8d      	ldr	r3, [pc, #564]	; (8002738 <HAL_RCC_ClockConfig+0x25c>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f023 0207 	bic.w	r2, r3, #7
 800250a:	498b      	ldr	r1, [pc, #556]	; (8002738 <HAL_RCC_ClockConfig+0x25c>)
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	4313      	orrs	r3, r2
 8002510:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002512:	4b89      	ldr	r3, [pc, #548]	; (8002738 <HAL_RCC_ClockConfig+0x25c>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f003 0307 	and.w	r3, r3, #7
 800251a:	683a      	ldr	r2, [r7, #0]
 800251c:	429a      	cmp	r2, r3
 800251e:	d001      	beq.n	8002524 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002520:	2301      	movs	r3, #1
 8002522:	e14a      	b.n	80027ba <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f003 0302 	and.w	r3, r3, #2
 800252c:	2b00      	cmp	r3, #0
 800252e:	d008      	beq.n	8002542 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002530:	4b82      	ldr	r3, [pc, #520]	; (800273c <HAL_RCC_ClockConfig+0x260>)
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	689b      	ldr	r3, [r3, #8]
 800253c:	497f      	ldr	r1, [pc, #508]	; (800273c <HAL_RCC_ClockConfig+0x260>)
 800253e:	4313      	orrs	r3, r2
 8002540:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f003 0301 	and.w	r3, r3, #1
 800254a:	2b00      	cmp	r3, #0
 800254c:	f000 80dc 	beq.w	8002708 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	2b01      	cmp	r3, #1
 8002556:	d13c      	bne.n	80025d2 <HAL_RCC_ClockConfig+0xf6>
 8002558:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800255c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800255e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002560:	fa93 f3a3 	rbit	r3, r3
 8002564:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002566:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002568:	fab3 f383 	clz	r3, r3
 800256c:	b2db      	uxtb	r3, r3
 800256e:	095b      	lsrs	r3, r3, #5
 8002570:	b2db      	uxtb	r3, r3
 8002572:	f043 0301 	orr.w	r3, r3, #1
 8002576:	b2db      	uxtb	r3, r3
 8002578:	2b01      	cmp	r3, #1
 800257a:	d102      	bne.n	8002582 <HAL_RCC_ClockConfig+0xa6>
 800257c:	4b6f      	ldr	r3, [pc, #444]	; (800273c <HAL_RCC_ClockConfig+0x260>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	e00f      	b.n	80025a2 <HAL_RCC_ClockConfig+0xc6>
 8002582:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002586:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002588:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800258a:	fa93 f3a3 	rbit	r3, r3
 800258e:	667b      	str	r3, [r7, #100]	; 0x64
 8002590:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002594:	663b      	str	r3, [r7, #96]	; 0x60
 8002596:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002598:	fa93 f3a3 	rbit	r3, r3
 800259c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800259e:	4b67      	ldr	r3, [pc, #412]	; (800273c <HAL_RCC_ClockConfig+0x260>)
 80025a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80025a6:	65ba      	str	r2, [r7, #88]	; 0x58
 80025a8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80025aa:	fa92 f2a2 	rbit	r2, r2
 80025ae:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80025b0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80025b2:	fab2 f282 	clz	r2, r2
 80025b6:	b2d2      	uxtb	r2, r2
 80025b8:	f042 0220 	orr.w	r2, r2, #32
 80025bc:	b2d2      	uxtb	r2, r2
 80025be:	f002 021f 	and.w	r2, r2, #31
 80025c2:	2101      	movs	r1, #1
 80025c4:	fa01 f202 	lsl.w	r2, r1, r2
 80025c8:	4013      	ands	r3, r2
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d17b      	bne.n	80026c6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e0f3      	b.n	80027ba <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	2b02      	cmp	r3, #2
 80025d8:	d13c      	bne.n	8002654 <HAL_RCC_ClockConfig+0x178>
 80025da:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80025de:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80025e2:	fa93 f3a3 	rbit	r3, r3
 80025e6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80025e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025ea:	fab3 f383 	clz	r3, r3
 80025ee:	b2db      	uxtb	r3, r3
 80025f0:	095b      	lsrs	r3, r3, #5
 80025f2:	b2db      	uxtb	r3, r3
 80025f4:	f043 0301 	orr.w	r3, r3, #1
 80025f8:	b2db      	uxtb	r3, r3
 80025fa:	2b01      	cmp	r3, #1
 80025fc:	d102      	bne.n	8002604 <HAL_RCC_ClockConfig+0x128>
 80025fe:	4b4f      	ldr	r3, [pc, #316]	; (800273c <HAL_RCC_ClockConfig+0x260>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	e00f      	b.n	8002624 <HAL_RCC_ClockConfig+0x148>
 8002604:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002608:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800260a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800260c:	fa93 f3a3 	rbit	r3, r3
 8002610:	647b      	str	r3, [r7, #68]	; 0x44
 8002612:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002616:	643b      	str	r3, [r7, #64]	; 0x40
 8002618:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800261a:	fa93 f3a3 	rbit	r3, r3
 800261e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002620:	4b46      	ldr	r3, [pc, #280]	; (800273c <HAL_RCC_ClockConfig+0x260>)
 8002622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002624:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002628:	63ba      	str	r2, [r7, #56]	; 0x38
 800262a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800262c:	fa92 f2a2 	rbit	r2, r2
 8002630:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002632:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002634:	fab2 f282 	clz	r2, r2
 8002638:	b2d2      	uxtb	r2, r2
 800263a:	f042 0220 	orr.w	r2, r2, #32
 800263e:	b2d2      	uxtb	r2, r2
 8002640:	f002 021f 	and.w	r2, r2, #31
 8002644:	2101      	movs	r1, #1
 8002646:	fa01 f202 	lsl.w	r2, r1, r2
 800264a:	4013      	ands	r3, r2
 800264c:	2b00      	cmp	r3, #0
 800264e:	d13a      	bne.n	80026c6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002650:	2301      	movs	r3, #1
 8002652:	e0b2      	b.n	80027ba <HAL_RCC_ClockConfig+0x2de>
 8002654:	2302      	movs	r3, #2
 8002656:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800265a:	fa93 f3a3 	rbit	r3, r3
 800265e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002662:	fab3 f383 	clz	r3, r3
 8002666:	b2db      	uxtb	r3, r3
 8002668:	095b      	lsrs	r3, r3, #5
 800266a:	b2db      	uxtb	r3, r3
 800266c:	f043 0301 	orr.w	r3, r3, #1
 8002670:	b2db      	uxtb	r3, r3
 8002672:	2b01      	cmp	r3, #1
 8002674:	d102      	bne.n	800267c <HAL_RCC_ClockConfig+0x1a0>
 8002676:	4b31      	ldr	r3, [pc, #196]	; (800273c <HAL_RCC_ClockConfig+0x260>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	e00d      	b.n	8002698 <HAL_RCC_ClockConfig+0x1bc>
 800267c:	2302      	movs	r3, #2
 800267e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002682:	fa93 f3a3 	rbit	r3, r3
 8002686:	627b      	str	r3, [r7, #36]	; 0x24
 8002688:	2302      	movs	r3, #2
 800268a:	623b      	str	r3, [r7, #32]
 800268c:	6a3b      	ldr	r3, [r7, #32]
 800268e:	fa93 f3a3 	rbit	r3, r3
 8002692:	61fb      	str	r3, [r7, #28]
 8002694:	4b29      	ldr	r3, [pc, #164]	; (800273c <HAL_RCC_ClockConfig+0x260>)
 8002696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002698:	2202      	movs	r2, #2
 800269a:	61ba      	str	r2, [r7, #24]
 800269c:	69ba      	ldr	r2, [r7, #24]
 800269e:	fa92 f2a2 	rbit	r2, r2
 80026a2:	617a      	str	r2, [r7, #20]
  return result;
 80026a4:	697a      	ldr	r2, [r7, #20]
 80026a6:	fab2 f282 	clz	r2, r2
 80026aa:	b2d2      	uxtb	r2, r2
 80026ac:	f042 0220 	orr.w	r2, r2, #32
 80026b0:	b2d2      	uxtb	r2, r2
 80026b2:	f002 021f 	and.w	r2, r2, #31
 80026b6:	2101      	movs	r1, #1
 80026b8:	fa01 f202 	lsl.w	r2, r1, r2
 80026bc:	4013      	ands	r3, r2
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d101      	bne.n	80026c6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	e079      	b.n	80027ba <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026c6:	4b1d      	ldr	r3, [pc, #116]	; (800273c <HAL_RCC_ClockConfig+0x260>)
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	f023 0203 	bic.w	r2, r3, #3
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	491a      	ldr	r1, [pc, #104]	; (800273c <HAL_RCC_ClockConfig+0x260>)
 80026d4:	4313      	orrs	r3, r2
 80026d6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026d8:	f7fe faf0 	bl	8000cbc <HAL_GetTick>
 80026dc:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026de:	e00a      	b.n	80026f6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026e0:	f7fe faec 	bl	8000cbc <HAL_GetTick>
 80026e4:	4602      	mov	r2, r0
 80026e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80026e8:	1ad3      	subs	r3, r2, r3
 80026ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d901      	bls.n	80026f6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80026f2:	2303      	movs	r3, #3
 80026f4:	e061      	b.n	80027ba <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026f6:	4b11      	ldr	r3, [pc, #68]	; (800273c <HAL_RCC_ClockConfig+0x260>)
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	f003 020c 	and.w	r2, r3, #12
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	009b      	lsls	r3, r3, #2
 8002704:	429a      	cmp	r2, r3
 8002706:	d1eb      	bne.n	80026e0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002708:	4b0b      	ldr	r3, [pc, #44]	; (8002738 <HAL_RCC_ClockConfig+0x25c>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f003 0307 	and.w	r3, r3, #7
 8002710:	683a      	ldr	r2, [r7, #0]
 8002712:	429a      	cmp	r2, r3
 8002714:	d214      	bcs.n	8002740 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002716:	4b08      	ldr	r3, [pc, #32]	; (8002738 <HAL_RCC_ClockConfig+0x25c>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f023 0207 	bic.w	r2, r3, #7
 800271e:	4906      	ldr	r1, [pc, #24]	; (8002738 <HAL_RCC_ClockConfig+0x25c>)
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	4313      	orrs	r3, r2
 8002724:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002726:	4b04      	ldr	r3, [pc, #16]	; (8002738 <HAL_RCC_ClockConfig+0x25c>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f003 0307 	and.w	r3, r3, #7
 800272e:	683a      	ldr	r2, [r7, #0]
 8002730:	429a      	cmp	r2, r3
 8002732:	d005      	beq.n	8002740 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002734:	2301      	movs	r3, #1
 8002736:	e040      	b.n	80027ba <HAL_RCC_ClockConfig+0x2de>
 8002738:	40022000 	.word	0x40022000
 800273c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f003 0304 	and.w	r3, r3, #4
 8002748:	2b00      	cmp	r3, #0
 800274a:	d008      	beq.n	800275e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800274c:	4b1d      	ldr	r3, [pc, #116]	; (80027c4 <HAL_RCC_ClockConfig+0x2e8>)
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	68db      	ldr	r3, [r3, #12]
 8002758:	491a      	ldr	r1, [pc, #104]	; (80027c4 <HAL_RCC_ClockConfig+0x2e8>)
 800275a:	4313      	orrs	r3, r2
 800275c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f003 0308 	and.w	r3, r3, #8
 8002766:	2b00      	cmp	r3, #0
 8002768:	d009      	beq.n	800277e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800276a:	4b16      	ldr	r3, [pc, #88]	; (80027c4 <HAL_RCC_ClockConfig+0x2e8>)
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	691b      	ldr	r3, [r3, #16]
 8002776:	00db      	lsls	r3, r3, #3
 8002778:	4912      	ldr	r1, [pc, #72]	; (80027c4 <HAL_RCC_ClockConfig+0x2e8>)
 800277a:	4313      	orrs	r3, r2
 800277c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800277e:	f000 f829 	bl	80027d4 <HAL_RCC_GetSysClockFreq>
 8002782:	4601      	mov	r1, r0
 8002784:	4b0f      	ldr	r3, [pc, #60]	; (80027c4 <HAL_RCC_ClockConfig+0x2e8>)
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800278c:	22f0      	movs	r2, #240	; 0xf0
 800278e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002790:	693a      	ldr	r2, [r7, #16]
 8002792:	fa92 f2a2 	rbit	r2, r2
 8002796:	60fa      	str	r2, [r7, #12]
  return result;
 8002798:	68fa      	ldr	r2, [r7, #12]
 800279a:	fab2 f282 	clz	r2, r2
 800279e:	b2d2      	uxtb	r2, r2
 80027a0:	40d3      	lsrs	r3, r2
 80027a2:	4a09      	ldr	r2, [pc, #36]	; (80027c8 <HAL_RCC_ClockConfig+0x2ec>)
 80027a4:	5cd3      	ldrb	r3, [r2, r3]
 80027a6:	fa21 f303 	lsr.w	r3, r1, r3
 80027aa:	4a08      	ldr	r2, [pc, #32]	; (80027cc <HAL_RCC_ClockConfig+0x2f0>)
 80027ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80027ae:	4b08      	ldr	r3, [pc, #32]	; (80027d0 <HAL_RCC_ClockConfig+0x2f4>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4618      	mov	r0, r3
 80027b4:	f7fe fa3e 	bl	8000c34 <HAL_InitTick>
  
  return HAL_OK;
 80027b8:	2300      	movs	r3, #0
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	3778      	adds	r7, #120	; 0x78
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}
 80027c2:	bf00      	nop
 80027c4:	40021000 	.word	0x40021000
 80027c8:	08004f78 	.word	0x08004f78
 80027cc:	20000004 	.word	0x20000004
 80027d0:	20000008 	.word	0x20000008

080027d4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b08b      	sub	sp, #44	; 0x2c
 80027d8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80027da:	2300      	movs	r3, #0
 80027dc:	61fb      	str	r3, [r7, #28]
 80027de:	2300      	movs	r3, #0
 80027e0:	61bb      	str	r3, [r7, #24]
 80027e2:	2300      	movs	r3, #0
 80027e4:	627b      	str	r3, [r7, #36]	; 0x24
 80027e6:	2300      	movs	r3, #0
 80027e8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80027ea:	2300      	movs	r3, #0
 80027ec:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80027ee:	4b29      	ldr	r3, [pc, #164]	; (8002894 <HAL_RCC_GetSysClockFreq+0xc0>)
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80027f4:	69fb      	ldr	r3, [r7, #28]
 80027f6:	f003 030c 	and.w	r3, r3, #12
 80027fa:	2b04      	cmp	r3, #4
 80027fc:	d002      	beq.n	8002804 <HAL_RCC_GetSysClockFreq+0x30>
 80027fe:	2b08      	cmp	r3, #8
 8002800:	d003      	beq.n	800280a <HAL_RCC_GetSysClockFreq+0x36>
 8002802:	e03c      	b.n	800287e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002804:	4b24      	ldr	r3, [pc, #144]	; (8002898 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002806:	623b      	str	r3, [r7, #32]
      break;
 8002808:	e03c      	b.n	8002884 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800280a:	69fb      	ldr	r3, [r7, #28]
 800280c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002810:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002814:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002816:	68ba      	ldr	r2, [r7, #8]
 8002818:	fa92 f2a2 	rbit	r2, r2
 800281c:	607a      	str	r2, [r7, #4]
  return result;
 800281e:	687a      	ldr	r2, [r7, #4]
 8002820:	fab2 f282 	clz	r2, r2
 8002824:	b2d2      	uxtb	r2, r2
 8002826:	40d3      	lsrs	r3, r2
 8002828:	4a1c      	ldr	r2, [pc, #112]	; (800289c <HAL_RCC_GetSysClockFreq+0xc8>)
 800282a:	5cd3      	ldrb	r3, [r2, r3]
 800282c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800282e:	4b19      	ldr	r3, [pc, #100]	; (8002894 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002832:	f003 030f 	and.w	r3, r3, #15
 8002836:	220f      	movs	r2, #15
 8002838:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800283a:	693a      	ldr	r2, [r7, #16]
 800283c:	fa92 f2a2 	rbit	r2, r2
 8002840:	60fa      	str	r2, [r7, #12]
  return result;
 8002842:	68fa      	ldr	r2, [r7, #12]
 8002844:	fab2 f282 	clz	r2, r2
 8002848:	b2d2      	uxtb	r2, r2
 800284a:	40d3      	lsrs	r3, r2
 800284c:	4a14      	ldr	r2, [pc, #80]	; (80028a0 <HAL_RCC_GetSysClockFreq+0xcc>)
 800284e:	5cd3      	ldrb	r3, [r2, r3]
 8002850:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002852:	69fb      	ldr	r3, [r7, #28]
 8002854:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002858:	2b00      	cmp	r3, #0
 800285a:	d008      	beq.n	800286e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800285c:	4a0e      	ldr	r2, [pc, #56]	; (8002898 <HAL_RCC_GetSysClockFreq+0xc4>)
 800285e:	69bb      	ldr	r3, [r7, #24]
 8002860:	fbb2 f2f3 	udiv	r2, r2, r3
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	fb02 f303 	mul.w	r3, r2, r3
 800286a:	627b      	str	r3, [r7, #36]	; 0x24
 800286c:	e004      	b.n	8002878 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	4a0c      	ldr	r2, [pc, #48]	; (80028a4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002872:	fb02 f303 	mul.w	r3, r2, r3
 8002876:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800287a:	623b      	str	r3, [r7, #32]
      break;
 800287c:	e002      	b.n	8002884 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800287e:	4b06      	ldr	r3, [pc, #24]	; (8002898 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002880:	623b      	str	r3, [r7, #32]
      break;
 8002882:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002884:	6a3b      	ldr	r3, [r7, #32]
}
 8002886:	4618      	mov	r0, r3
 8002888:	372c      	adds	r7, #44	; 0x2c
 800288a:	46bd      	mov	sp, r7
 800288c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002890:	4770      	bx	lr
 8002892:	bf00      	nop
 8002894:	40021000 	.word	0x40021000
 8002898:	007a1200 	.word	0x007a1200
 800289c:	08004f90 	.word	0x08004f90
 80028a0:	08004fa0 	.word	0x08004fa0
 80028a4:	003d0900 	.word	0x003d0900

080028a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028a8:	b480      	push	{r7}
 80028aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028ac:	4b03      	ldr	r3, [pc, #12]	; (80028bc <HAL_RCC_GetHCLKFreq+0x14>)
 80028ae:	681b      	ldr	r3, [r3, #0]
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	46bd      	mov	sp, r7
 80028b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b8:	4770      	bx	lr
 80028ba:	bf00      	nop
 80028bc:	20000004 	.word	0x20000004

080028c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b082      	sub	sp, #8
 80028c4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80028c6:	f7ff ffef 	bl	80028a8 <HAL_RCC_GetHCLKFreq>
 80028ca:	4601      	mov	r1, r0
 80028cc:	4b0b      	ldr	r3, [pc, #44]	; (80028fc <HAL_RCC_GetPCLK1Freq+0x3c>)
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80028d4:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80028d8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028da:	687a      	ldr	r2, [r7, #4]
 80028dc:	fa92 f2a2 	rbit	r2, r2
 80028e0:	603a      	str	r2, [r7, #0]
  return result;
 80028e2:	683a      	ldr	r2, [r7, #0]
 80028e4:	fab2 f282 	clz	r2, r2
 80028e8:	b2d2      	uxtb	r2, r2
 80028ea:	40d3      	lsrs	r3, r2
 80028ec:	4a04      	ldr	r2, [pc, #16]	; (8002900 <HAL_RCC_GetPCLK1Freq+0x40>)
 80028ee:	5cd3      	ldrb	r3, [r2, r3]
 80028f0:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80028f4:	4618      	mov	r0, r3
 80028f6:	3708      	adds	r7, #8
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bd80      	pop	{r7, pc}
 80028fc:	40021000 	.word	0x40021000
 8002900:	08004f88 	.word	0x08004f88

08002904 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b082      	sub	sp, #8
 8002908:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800290a:	f7ff ffcd 	bl	80028a8 <HAL_RCC_GetHCLKFreq>
 800290e:	4601      	mov	r1, r0
 8002910:	4b0b      	ldr	r3, [pc, #44]	; (8002940 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002918:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800291c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800291e:	687a      	ldr	r2, [r7, #4]
 8002920:	fa92 f2a2 	rbit	r2, r2
 8002924:	603a      	str	r2, [r7, #0]
  return result;
 8002926:	683a      	ldr	r2, [r7, #0]
 8002928:	fab2 f282 	clz	r2, r2
 800292c:	b2d2      	uxtb	r2, r2
 800292e:	40d3      	lsrs	r3, r2
 8002930:	4a04      	ldr	r2, [pc, #16]	; (8002944 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002932:	5cd3      	ldrb	r3, [r2, r3]
 8002934:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002938:	4618      	mov	r0, r3
 800293a:	3708      	adds	r7, #8
 800293c:	46bd      	mov	sp, r7
 800293e:	bd80      	pop	{r7, pc}
 8002940:	40021000 	.word	0x40021000
 8002944:	08004f88 	.word	0x08004f88

08002948 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b092      	sub	sp, #72	; 0x48
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002950:	2300      	movs	r3, #0
 8002952:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002954:	2300      	movs	r3, #0
 8002956:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002958:	2300      	movs	r3, #0
 800295a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002966:	2b00      	cmp	r3, #0
 8002968:	f000 80cd 	beq.w	8002b06 <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800296c:	4b86      	ldr	r3, [pc, #536]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800296e:	69db      	ldr	r3, [r3, #28]
 8002970:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002974:	2b00      	cmp	r3, #0
 8002976:	d10e      	bne.n	8002996 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002978:	4b83      	ldr	r3, [pc, #524]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800297a:	69db      	ldr	r3, [r3, #28]
 800297c:	4a82      	ldr	r2, [pc, #520]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800297e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002982:	61d3      	str	r3, [r2, #28]
 8002984:	4b80      	ldr	r3, [pc, #512]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002986:	69db      	ldr	r3, [r3, #28]
 8002988:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800298c:	60bb      	str	r3, [r7, #8]
 800298e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002990:	2301      	movs	r3, #1
 8002992:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002996:	4b7d      	ldr	r3, [pc, #500]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d118      	bne.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029a2:	4b7a      	ldr	r3, [pc, #488]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a79      	ldr	r2, [pc, #484]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80029a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029ac:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029ae:	f7fe f985 	bl	8000cbc <HAL_GetTick>
 80029b2:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029b4:	e008      	b.n	80029c8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029b6:	f7fe f981 	bl	8000cbc <HAL_GetTick>
 80029ba:	4602      	mov	r2, r0
 80029bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80029be:	1ad3      	subs	r3, r2, r3
 80029c0:	2b64      	cmp	r3, #100	; 0x64
 80029c2:	d901      	bls.n	80029c8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80029c4:	2303      	movs	r3, #3
 80029c6:	e0db      	b.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029c8:	4b70      	ldr	r3, [pc, #448]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d0f0      	beq.n	80029b6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80029d4:	4b6c      	ldr	r3, [pc, #432]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80029d6:	6a1b      	ldr	r3, [r3, #32]
 80029d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029dc:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80029de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d07d      	beq.n	8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029ec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80029ee:	429a      	cmp	r2, r3
 80029f0:	d076      	beq.n	8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80029f2:	4b65      	ldr	r3, [pc, #404]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80029f4:	6a1b      	ldr	r3, [r3, #32]
 80029f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80029fc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002a00:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a04:	fa93 f3a3 	rbit	r3, r3
 8002a08:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002a0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002a0c:	fab3 f383 	clz	r3, r3
 8002a10:	b2db      	uxtb	r3, r3
 8002a12:	461a      	mov	r2, r3
 8002a14:	4b5e      	ldr	r3, [pc, #376]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002a16:	4413      	add	r3, r2
 8002a18:	009b      	lsls	r3, r3, #2
 8002a1a:	461a      	mov	r2, r3
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	6013      	str	r3, [r2, #0]
 8002a20:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002a24:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a28:	fa93 f3a3 	rbit	r3, r3
 8002a2c:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002a2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002a30:	fab3 f383 	clz	r3, r3
 8002a34:	b2db      	uxtb	r3, r3
 8002a36:	461a      	mov	r2, r3
 8002a38:	4b55      	ldr	r3, [pc, #340]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002a3a:	4413      	add	r3, r2
 8002a3c:	009b      	lsls	r3, r3, #2
 8002a3e:	461a      	mov	r2, r3
 8002a40:	2300      	movs	r3, #0
 8002a42:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002a44:	4a50      	ldr	r2, [pc, #320]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002a46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a48:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002a4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a4c:	f003 0301 	and.w	r3, r3, #1
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d045      	beq.n	8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a54:	f7fe f932 	bl	8000cbc <HAL_GetTick>
 8002a58:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a5a:	e00a      	b.n	8002a72 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a5c:	f7fe f92e 	bl	8000cbc <HAL_GetTick>
 8002a60:	4602      	mov	r2, r0
 8002a62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a64:	1ad3      	subs	r3, r2, r3
 8002a66:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d901      	bls.n	8002a72 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8002a6e:	2303      	movs	r3, #3
 8002a70:	e086      	b.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x238>
 8002a72:	2302      	movs	r3, #2
 8002a74:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a78:	fa93 f3a3 	rbit	r3, r3
 8002a7c:	627b      	str	r3, [r7, #36]	; 0x24
 8002a7e:	2302      	movs	r3, #2
 8002a80:	623b      	str	r3, [r7, #32]
 8002a82:	6a3b      	ldr	r3, [r7, #32]
 8002a84:	fa93 f3a3 	rbit	r3, r3
 8002a88:	61fb      	str	r3, [r7, #28]
  return result;
 8002a8a:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a8c:	fab3 f383 	clz	r3, r3
 8002a90:	b2db      	uxtb	r3, r3
 8002a92:	095b      	lsrs	r3, r3, #5
 8002a94:	b2db      	uxtb	r3, r3
 8002a96:	f043 0302 	orr.w	r3, r3, #2
 8002a9a:	b2db      	uxtb	r3, r3
 8002a9c:	2b02      	cmp	r3, #2
 8002a9e:	d102      	bne.n	8002aa6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8002aa0:	4b39      	ldr	r3, [pc, #228]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002aa2:	6a1b      	ldr	r3, [r3, #32]
 8002aa4:	e007      	b.n	8002ab6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8002aa6:	2302      	movs	r3, #2
 8002aa8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aaa:	69bb      	ldr	r3, [r7, #24]
 8002aac:	fa93 f3a3 	rbit	r3, r3
 8002ab0:	617b      	str	r3, [r7, #20]
 8002ab2:	4b35      	ldr	r3, [pc, #212]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab6:	2202      	movs	r2, #2
 8002ab8:	613a      	str	r2, [r7, #16]
 8002aba:	693a      	ldr	r2, [r7, #16]
 8002abc:	fa92 f2a2 	rbit	r2, r2
 8002ac0:	60fa      	str	r2, [r7, #12]
  return result;
 8002ac2:	68fa      	ldr	r2, [r7, #12]
 8002ac4:	fab2 f282 	clz	r2, r2
 8002ac8:	b2d2      	uxtb	r2, r2
 8002aca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ace:	b2d2      	uxtb	r2, r2
 8002ad0:	f002 021f 	and.w	r2, r2, #31
 8002ad4:	2101      	movs	r1, #1
 8002ad6:	fa01 f202 	lsl.w	r2, r1, r2
 8002ada:	4013      	ands	r3, r2
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d0bd      	beq.n	8002a5c <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002ae0:	4b29      	ldr	r3, [pc, #164]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002ae2:	6a1b      	ldr	r3, [r3, #32]
 8002ae4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	4926      	ldr	r1, [pc, #152]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002aee:	4313      	orrs	r3, r2
 8002af0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002af2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002af6:	2b01      	cmp	r3, #1
 8002af8:	d105      	bne.n	8002b06 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002afa:	4b23      	ldr	r3, [pc, #140]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002afc:	69db      	ldr	r3, [r3, #28]
 8002afe:	4a22      	ldr	r2, [pc, #136]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002b00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b04:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f003 0301 	and.w	r3, r3, #1
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d008      	beq.n	8002b24 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002b12:	4b1d      	ldr	r3, [pc, #116]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b16:	f023 0203 	bic.w	r2, r3, #3
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	689b      	ldr	r3, [r3, #8]
 8002b1e:	491a      	ldr	r1, [pc, #104]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002b20:	4313      	orrs	r3, r2
 8002b22:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f003 0320 	and.w	r3, r3, #32
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d008      	beq.n	8002b42 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002b30:	4b15      	ldr	r3, [pc, #84]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b34:	f023 0210 	bic.w	r2, r3, #16
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	68db      	ldr	r3, [r3, #12]
 8002b3c:	4912      	ldr	r1, [pc, #72]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d008      	beq.n	8002b60 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002b4e:	4b0e      	ldr	r3, [pc, #56]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002b50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b52:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	691b      	ldr	r3, [r3, #16]
 8002b5a:	490b      	ldr	r1, [pc, #44]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d008      	beq.n	8002b7e <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002b6c:	4b06      	ldr	r3, [pc, #24]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002b6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b70:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	695b      	ldr	r3, [r3, #20]
 8002b78:	4903      	ldr	r1, [pc, #12]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002b7e:	2300      	movs	r3, #0
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	3748      	adds	r7, #72	; 0x48
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd80      	pop	{r7, pc}
 8002b88:	40021000 	.word	0x40021000
 8002b8c:	40007000 	.word	0x40007000
 8002b90:	10908100 	.word	0x10908100

08002b94 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b082      	sub	sp, #8
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d101      	bne.n	8002ba6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e049      	b.n	8002c3a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d106      	bne.n	8002bc0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002bba:	6878      	ldr	r0, [r7, #4]
 8002bbc:	f7fd fe7e 	bl	80008bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2202      	movs	r2, #2
 8002bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681a      	ldr	r2, [r3, #0]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	3304      	adds	r3, #4
 8002bd0:	4619      	mov	r1, r3
 8002bd2:	4610      	mov	r0, r2
 8002bd4:	f000 fb54 	bl	8003280 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2201      	movs	r2, #1
 8002bdc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2201      	movs	r2, #1
 8002be4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2201      	movs	r2, #1
 8002bec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2201      	movs	r2, #1
 8002bf4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2201      	movs	r2, #1
 8002c04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2201      	movs	r2, #1
 8002c14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2201      	movs	r2, #1
 8002c24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2201      	movs	r2, #1
 8002c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002c38:	2300      	movs	r3, #0
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	3708      	adds	r7, #8
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}

08002c42 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002c42:	b580      	push	{r7, lr}
 8002c44:	b082      	sub	sp, #8
 8002c46:	af00      	add	r7, sp, #0
 8002c48:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d101      	bne.n	8002c54 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002c50:	2301      	movs	r3, #1
 8002c52:	e049      	b.n	8002ce8 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c5a:	b2db      	uxtb	r3, r3
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d106      	bne.n	8002c6e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2200      	movs	r2, #0
 8002c64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002c68:	6878      	ldr	r0, [r7, #4]
 8002c6a:	f000 f841 	bl	8002cf0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2202      	movs	r2, #2
 8002c72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681a      	ldr	r2, [r3, #0]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	3304      	adds	r3, #4
 8002c7e:	4619      	mov	r1, r3
 8002c80:	4610      	mov	r0, r2
 8002c82:	f000 fafd 	bl	8003280 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2201      	movs	r2, #1
 8002c8a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2201      	movs	r2, #1
 8002c92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2201      	movs	r2, #1
 8002c9a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2201      	movs	r2, #1
 8002ca2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2201      	movs	r2, #1
 8002caa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2201      	movs	r2, #1
 8002cb2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2201      	movs	r2, #1
 8002cba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2201      	movs	r2, #1
 8002cc2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2201      	movs	r2, #1
 8002cca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2201      	movs	r2, #1
 8002cd2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2201      	movs	r2, #1
 8002cda:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2201      	movs	r2, #1
 8002ce2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ce6:	2300      	movs	r3, #0
}
 8002ce8:	4618      	mov	r0, r3
 8002cea:	3708      	adds	r7, #8
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd80      	pop	{r7, pc}

08002cf0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b083      	sub	sp, #12
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002cf8:	bf00      	nop
 8002cfa:	370c      	adds	r7, #12
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d02:	4770      	bx	lr

08002d04 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b084      	sub	sp, #16
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
 8002d0c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d109      	bne.n	8002d28 <HAL_TIM_PWM_Start+0x24>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002d1a:	b2db      	uxtb	r3, r3
 8002d1c:	2b01      	cmp	r3, #1
 8002d1e:	bf14      	ite	ne
 8002d20:	2301      	movne	r3, #1
 8002d22:	2300      	moveq	r3, #0
 8002d24:	b2db      	uxtb	r3, r3
 8002d26:	e03c      	b.n	8002da2 <HAL_TIM_PWM_Start+0x9e>
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	2b04      	cmp	r3, #4
 8002d2c:	d109      	bne.n	8002d42 <HAL_TIM_PWM_Start+0x3e>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002d34:	b2db      	uxtb	r3, r3
 8002d36:	2b01      	cmp	r3, #1
 8002d38:	bf14      	ite	ne
 8002d3a:	2301      	movne	r3, #1
 8002d3c:	2300      	moveq	r3, #0
 8002d3e:	b2db      	uxtb	r3, r3
 8002d40:	e02f      	b.n	8002da2 <HAL_TIM_PWM_Start+0x9e>
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	2b08      	cmp	r3, #8
 8002d46:	d109      	bne.n	8002d5c <HAL_TIM_PWM_Start+0x58>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d4e:	b2db      	uxtb	r3, r3
 8002d50:	2b01      	cmp	r3, #1
 8002d52:	bf14      	ite	ne
 8002d54:	2301      	movne	r3, #1
 8002d56:	2300      	moveq	r3, #0
 8002d58:	b2db      	uxtb	r3, r3
 8002d5a:	e022      	b.n	8002da2 <HAL_TIM_PWM_Start+0x9e>
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	2b0c      	cmp	r3, #12
 8002d60:	d109      	bne.n	8002d76 <HAL_TIM_PWM_Start+0x72>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d68:	b2db      	uxtb	r3, r3
 8002d6a:	2b01      	cmp	r3, #1
 8002d6c:	bf14      	ite	ne
 8002d6e:	2301      	movne	r3, #1
 8002d70:	2300      	moveq	r3, #0
 8002d72:	b2db      	uxtb	r3, r3
 8002d74:	e015      	b.n	8002da2 <HAL_TIM_PWM_Start+0x9e>
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	2b10      	cmp	r3, #16
 8002d7a:	d109      	bne.n	8002d90 <HAL_TIM_PWM_Start+0x8c>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002d82:	b2db      	uxtb	r3, r3
 8002d84:	2b01      	cmp	r3, #1
 8002d86:	bf14      	ite	ne
 8002d88:	2301      	movne	r3, #1
 8002d8a:	2300      	moveq	r3, #0
 8002d8c:	b2db      	uxtb	r3, r3
 8002d8e:	e008      	b.n	8002da2 <HAL_TIM_PWM_Start+0x9e>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002d96:	b2db      	uxtb	r3, r3
 8002d98:	2b01      	cmp	r3, #1
 8002d9a:	bf14      	ite	ne
 8002d9c:	2301      	movne	r3, #1
 8002d9e:	2300      	moveq	r3, #0
 8002da0:	b2db      	uxtb	r3, r3
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d001      	beq.n	8002daa <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8002da6:	2301      	movs	r3, #1
 8002da8:	e088      	b.n	8002ebc <HAL_TIM_PWM_Start+0x1b8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d104      	bne.n	8002dba <HAL_TIM_PWM_Start+0xb6>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2202      	movs	r2, #2
 8002db4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002db8:	e023      	b.n	8002e02 <HAL_TIM_PWM_Start+0xfe>
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	2b04      	cmp	r3, #4
 8002dbe:	d104      	bne.n	8002dca <HAL_TIM_PWM_Start+0xc6>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2202      	movs	r2, #2
 8002dc4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002dc8:	e01b      	b.n	8002e02 <HAL_TIM_PWM_Start+0xfe>
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	2b08      	cmp	r3, #8
 8002dce:	d104      	bne.n	8002dda <HAL_TIM_PWM_Start+0xd6>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2202      	movs	r2, #2
 8002dd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002dd8:	e013      	b.n	8002e02 <HAL_TIM_PWM_Start+0xfe>
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	2b0c      	cmp	r3, #12
 8002dde:	d104      	bne.n	8002dea <HAL_TIM_PWM_Start+0xe6>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2202      	movs	r2, #2
 8002de4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002de8:	e00b      	b.n	8002e02 <HAL_TIM_PWM_Start+0xfe>
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	2b10      	cmp	r3, #16
 8002dee:	d104      	bne.n	8002dfa <HAL_TIM_PWM_Start+0xf6>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2202      	movs	r2, #2
 8002df4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002df8:	e003      	b.n	8002e02 <HAL_TIM_PWM_Start+0xfe>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2202      	movs	r2, #2
 8002dfe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	2201      	movs	r2, #1
 8002e08:	6839      	ldr	r1, [r7, #0]
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f000 fdf0 	bl	80039f0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a2b      	ldr	r2, [pc, #172]	; (8002ec4 <HAL_TIM_PWM_Start+0x1c0>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d00e      	beq.n	8002e38 <HAL_TIM_PWM_Start+0x134>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a2a      	ldr	r2, [pc, #168]	; (8002ec8 <HAL_TIM_PWM_Start+0x1c4>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d009      	beq.n	8002e38 <HAL_TIM_PWM_Start+0x134>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a28      	ldr	r2, [pc, #160]	; (8002ecc <HAL_TIM_PWM_Start+0x1c8>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d004      	beq.n	8002e38 <HAL_TIM_PWM_Start+0x134>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a27      	ldr	r2, [pc, #156]	; (8002ed0 <HAL_TIM_PWM_Start+0x1cc>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d101      	bne.n	8002e3c <HAL_TIM_PWM_Start+0x138>
 8002e38:	2301      	movs	r3, #1
 8002e3a:	e000      	b.n	8002e3e <HAL_TIM_PWM_Start+0x13a>
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d007      	beq.n	8002e52 <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e50:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a1b      	ldr	r2, [pc, #108]	; (8002ec4 <HAL_TIM_PWM_Start+0x1c0>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d00e      	beq.n	8002e7a <HAL_TIM_PWM_Start+0x176>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e64:	d009      	beq.n	8002e7a <HAL_TIM_PWM_Start+0x176>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a1a      	ldr	r2, [pc, #104]	; (8002ed4 <HAL_TIM_PWM_Start+0x1d0>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d004      	beq.n	8002e7a <HAL_TIM_PWM_Start+0x176>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a14      	ldr	r2, [pc, #80]	; (8002ec8 <HAL_TIM_PWM_Start+0x1c4>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d115      	bne.n	8002ea6 <HAL_TIM_PWM_Start+0x1a2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	689a      	ldr	r2, [r3, #8]
 8002e80:	4b15      	ldr	r3, [pc, #84]	; (8002ed8 <HAL_TIM_PWM_Start+0x1d4>)
 8002e82:	4013      	ands	r3, r2
 8002e84:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	2b06      	cmp	r3, #6
 8002e8a:	d015      	beq.n	8002eb8 <HAL_TIM_PWM_Start+0x1b4>
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e92:	d011      	beq.n	8002eb8 <HAL_TIM_PWM_Start+0x1b4>
    {
      __HAL_TIM_ENABLE(htim);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	681a      	ldr	r2, [r3, #0]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f042 0201 	orr.w	r2, r2, #1
 8002ea2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ea4:	e008      	b.n	8002eb8 <HAL_TIM_PWM_Start+0x1b4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f042 0201 	orr.w	r2, r2, #1
 8002eb4:	601a      	str	r2, [r3, #0]
 8002eb6:	e000      	b.n	8002eba <HAL_TIM_PWM_Start+0x1b6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002eb8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002eba:	2300      	movs	r3, #0
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	3710      	adds	r7, #16
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}
 8002ec4:	40012c00 	.word	0x40012c00
 8002ec8:	40014000 	.word	0x40014000
 8002ecc:	40014400 	.word	0x40014400
 8002ed0:	40014800 	.word	0x40014800
 8002ed4:	40000400 	.word	0x40000400
 8002ed8:	00010007 	.word	0x00010007

08002edc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b086      	sub	sp, #24
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	60f8      	str	r0, [r7, #12]
 8002ee4:	60b9      	str	r1, [r7, #8]
 8002ee6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ef2:	2b01      	cmp	r3, #1
 8002ef4:	d101      	bne.n	8002efa <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002ef6:	2302      	movs	r3, #2
 8002ef8:	e0ff      	b.n	80030fa <HAL_TIM_PWM_ConfigChannel+0x21e>
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	2201      	movs	r2, #1
 8002efe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2b14      	cmp	r3, #20
 8002f06:	f200 80f0 	bhi.w	80030ea <HAL_TIM_PWM_ConfigChannel+0x20e>
 8002f0a:	a201      	add	r2, pc, #4	; (adr r2, 8002f10 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002f0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f10:	08002f65 	.word	0x08002f65
 8002f14:	080030eb 	.word	0x080030eb
 8002f18:	080030eb 	.word	0x080030eb
 8002f1c:	080030eb 	.word	0x080030eb
 8002f20:	08002fa5 	.word	0x08002fa5
 8002f24:	080030eb 	.word	0x080030eb
 8002f28:	080030eb 	.word	0x080030eb
 8002f2c:	080030eb 	.word	0x080030eb
 8002f30:	08002fe7 	.word	0x08002fe7
 8002f34:	080030eb 	.word	0x080030eb
 8002f38:	080030eb 	.word	0x080030eb
 8002f3c:	080030eb 	.word	0x080030eb
 8002f40:	08003027 	.word	0x08003027
 8002f44:	080030eb 	.word	0x080030eb
 8002f48:	080030eb 	.word	0x080030eb
 8002f4c:	080030eb 	.word	0x080030eb
 8002f50:	08003069 	.word	0x08003069
 8002f54:	080030eb 	.word	0x080030eb
 8002f58:	080030eb 	.word	0x080030eb
 8002f5c:	080030eb 	.word	0x080030eb
 8002f60:	080030a9 	.word	0x080030a9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	68b9      	ldr	r1, [r7, #8]
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f000 fa00 	bl	8003370 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	699a      	ldr	r2, [r3, #24]
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f042 0208 	orr.w	r2, r2, #8
 8002f7e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	699a      	ldr	r2, [r3, #24]
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f022 0204 	bic.w	r2, r2, #4
 8002f8e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	6999      	ldr	r1, [r3, #24]
 8002f96:	68bb      	ldr	r3, [r7, #8]
 8002f98:	691a      	ldr	r2, [r3, #16]
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	430a      	orrs	r2, r1
 8002fa0:	619a      	str	r2, [r3, #24]
      break;
 8002fa2:	e0a5      	b.n	80030f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	68b9      	ldr	r1, [r7, #8]
 8002faa:	4618      	mov	r0, r3
 8002fac:	f000 fa66 	bl	800347c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	699a      	ldr	r2, [r3, #24]
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002fbe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	699a      	ldr	r2, [r3, #24]
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	6999      	ldr	r1, [r3, #24]
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	691b      	ldr	r3, [r3, #16]
 8002fda:	021a      	lsls	r2, r3, #8
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	430a      	orrs	r2, r1
 8002fe2:	619a      	str	r2, [r3, #24]
      break;
 8002fe4:	e084      	b.n	80030f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	68b9      	ldr	r1, [r7, #8]
 8002fec:	4618      	mov	r0, r3
 8002fee:	f000 fac5 	bl	800357c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	69da      	ldr	r2, [r3, #28]
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f042 0208 	orr.w	r2, r2, #8
 8003000:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	69da      	ldr	r2, [r3, #28]
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f022 0204 	bic.w	r2, r2, #4
 8003010:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	69d9      	ldr	r1, [r3, #28]
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	691a      	ldr	r2, [r3, #16]
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	430a      	orrs	r2, r1
 8003022:	61da      	str	r2, [r3, #28]
      break;
 8003024:	e064      	b.n	80030f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	68b9      	ldr	r1, [r7, #8]
 800302c:	4618      	mov	r0, r3
 800302e:	f000 fb23 	bl	8003678 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	69da      	ldr	r2, [r3, #28]
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003040:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	69da      	ldr	r2, [r3, #28]
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003050:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	69d9      	ldr	r1, [r3, #28]
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	691b      	ldr	r3, [r3, #16]
 800305c:	021a      	lsls	r2, r3, #8
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	430a      	orrs	r2, r1
 8003064:	61da      	str	r2, [r3, #28]
      break;
 8003066:	e043      	b.n	80030f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	68b9      	ldr	r1, [r7, #8]
 800306e:	4618      	mov	r0, r3
 8003070:	f000 fb66 	bl	8003740 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f042 0208 	orr.w	r2, r2, #8
 8003082:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f022 0204 	bic.w	r2, r2, #4
 8003092:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800309a:	68bb      	ldr	r3, [r7, #8]
 800309c:	691a      	ldr	r2, [r3, #16]
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	430a      	orrs	r2, r1
 80030a4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80030a6:	e023      	b.n	80030f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	68b9      	ldr	r1, [r7, #8]
 80030ae:	4618      	mov	r0, r3
 80030b0:	f000 fba4 	bl	80037fc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80030c2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030d2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	691b      	ldr	r3, [r3, #16]
 80030de:	021a      	lsls	r2, r3, #8
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	430a      	orrs	r2, r1
 80030e6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80030e8:	e002      	b.n	80030f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	75fb      	strb	r3, [r7, #23]
      break;
 80030ee:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	2200      	movs	r2, #0
 80030f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80030f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	3718      	adds	r7, #24
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}
 8003102:	bf00      	nop

08003104 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b084      	sub	sp, #16
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
 800310c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800310e:	2300      	movs	r3, #0
 8003110:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003118:	2b01      	cmp	r3, #1
 800311a:	d101      	bne.n	8003120 <HAL_TIM_ConfigClockSource+0x1c>
 800311c:	2302      	movs	r3, #2
 800311e:	e0ab      	b.n	8003278 <HAL_TIM_ConfigClockSource+0x174>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2201      	movs	r2, #1
 8003124:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2202      	movs	r2, #2
 800312c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800313e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003142:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003144:	68bb      	ldr	r3, [r7, #8]
 8003146:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800314a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	68ba      	ldr	r2, [r7, #8]
 8003152:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	2b40      	cmp	r3, #64	; 0x40
 800315a:	d067      	beq.n	800322c <HAL_TIM_ConfigClockSource+0x128>
 800315c:	2b40      	cmp	r3, #64	; 0x40
 800315e:	d80b      	bhi.n	8003178 <HAL_TIM_ConfigClockSource+0x74>
 8003160:	2b10      	cmp	r3, #16
 8003162:	d073      	beq.n	800324c <HAL_TIM_ConfigClockSource+0x148>
 8003164:	2b10      	cmp	r3, #16
 8003166:	d802      	bhi.n	800316e <HAL_TIM_ConfigClockSource+0x6a>
 8003168:	2b00      	cmp	r3, #0
 800316a:	d06f      	beq.n	800324c <HAL_TIM_ConfigClockSource+0x148>
 800316c:	e077      	b.n	800325e <HAL_TIM_ConfigClockSource+0x15a>
 800316e:	2b20      	cmp	r3, #32
 8003170:	d06c      	beq.n	800324c <HAL_TIM_ConfigClockSource+0x148>
 8003172:	2b30      	cmp	r3, #48	; 0x30
 8003174:	d06a      	beq.n	800324c <HAL_TIM_ConfigClockSource+0x148>
 8003176:	e072      	b.n	800325e <HAL_TIM_ConfigClockSource+0x15a>
 8003178:	2b70      	cmp	r3, #112	; 0x70
 800317a:	d00d      	beq.n	8003198 <HAL_TIM_ConfigClockSource+0x94>
 800317c:	2b70      	cmp	r3, #112	; 0x70
 800317e:	d804      	bhi.n	800318a <HAL_TIM_ConfigClockSource+0x86>
 8003180:	2b50      	cmp	r3, #80	; 0x50
 8003182:	d033      	beq.n	80031ec <HAL_TIM_ConfigClockSource+0xe8>
 8003184:	2b60      	cmp	r3, #96	; 0x60
 8003186:	d041      	beq.n	800320c <HAL_TIM_ConfigClockSource+0x108>
 8003188:	e069      	b.n	800325e <HAL_TIM_ConfigClockSource+0x15a>
 800318a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800318e:	d069      	beq.n	8003264 <HAL_TIM_ConfigClockSource+0x160>
 8003190:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003194:	d017      	beq.n	80031c6 <HAL_TIM_ConfigClockSource+0xc2>
 8003196:	e062      	b.n	800325e <HAL_TIM_ConfigClockSource+0x15a>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6818      	ldr	r0, [r3, #0]
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	6899      	ldr	r1, [r3, #8]
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	685a      	ldr	r2, [r3, #4]
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	68db      	ldr	r3, [r3, #12]
 80031a8:	f000 fc02 	bl	80039b0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	689b      	ldr	r3, [r3, #8]
 80031b2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80031b4:	68bb      	ldr	r3, [r7, #8]
 80031b6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80031ba:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	68ba      	ldr	r2, [r7, #8]
 80031c2:	609a      	str	r2, [r3, #8]
      break;
 80031c4:	e04f      	b.n	8003266 <HAL_TIM_ConfigClockSource+0x162>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6818      	ldr	r0, [r3, #0]
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	6899      	ldr	r1, [r3, #8]
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	685a      	ldr	r2, [r3, #4]
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	68db      	ldr	r3, [r3, #12]
 80031d6:	f000 fbeb 	bl	80039b0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	689a      	ldr	r2, [r3, #8]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80031e8:	609a      	str	r2, [r3, #8]
      break;
 80031ea:	e03c      	b.n	8003266 <HAL_TIM_ConfigClockSource+0x162>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6818      	ldr	r0, [r3, #0]
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	6859      	ldr	r1, [r3, #4]
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	68db      	ldr	r3, [r3, #12]
 80031f8:	461a      	mov	r2, r3
 80031fa:	f000 fb5f 	bl	80038bc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	2150      	movs	r1, #80	; 0x50
 8003204:	4618      	mov	r0, r3
 8003206:	f000 fbb8 	bl	800397a <TIM_ITRx_SetConfig>
      break;
 800320a:	e02c      	b.n	8003266 <HAL_TIM_ConfigClockSource+0x162>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6818      	ldr	r0, [r3, #0]
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	6859      	ldr	r1, [r3, #4]
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	68db      	ldr	r3, [r3, #12]
 8003218:	461a      	mov	r2, r3
 800321a:	f000 fb7e 	bl	800391a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	2160      	movs	r1, #96	; 0x60
 8003224:	4618      	mov	r0, r3
 8003226:	f000 fba8 	bl	800397a <TIM_ITRx_SetConfig>
      break;
 800322a:	e01c      	b.n	8003266 <HAL_TIM_ConfigClockSource+0x162>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6818      	ldr	r0, [r3, #0]
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	6859      	ldr	r1, [r3, #4]
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	68db      	ldr	r3, [r3, #12]
 8003238:	461a      	mov	r2, r3
 800323a:	f000 fb3f 	bl	80038bc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	2140      	movs	r1, #64	; 0x40
 8003244:	4618      	mov	r0, r3
 8003246:	f000 fb98 	bl	800397a <TIM_ITRx_SetConfig>
      break;
 800324a:	e00c      	b.n	8003266 <HAL_TIM_ConfigClockSource+0x162>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681a      	ldr	r2, [r3, #0]
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4619      	mov	r1, r3
 8003256:	4610      	mov	r0, r2
 8003258:	f000 fb8f 	bl	800397a <TIM_ITRx_SetConfig>
      break;
 800325c:	e003      	b.n	8003266 <HAL_TIM_ConfigClockSource+0x162>
    }

    default:
      status = HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	73fb      	strb	r3, [r7, #15]
      break;
 8003262:	e000      	b.n	8003266 <HAL_TIM_ConfigClockSource+0x162>
      break;
 8003264:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2201      	movs	r2, #1
 800326a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2200      	movs	r2, #0
 8003272:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003276:	7bfb      	ldrb	r3, [r7, #15]
}
 8003278:	4618      	mov	r0, r3
 800327a:	3710      	adds	r7, #16
 800327c:	46bd      	mov	sp, r7
 800327e:	bd80      	pop	{r7, pc}

08003280 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003280:	b480      	push	{r7}
 8003282:	b085      	sub	sp, #20
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
 8003288:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	4a32      	ldr	r2, [pc, #200]	; (800335c <TIM_Base_SetConfig+0xdc>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d007      	beq.n	80032a8 <TIM_Base_SetConfig+0x28>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800329e:	d003      	beq.n	80032a8 <TIM_Base_SetConfig+0x28>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	4a2f      	ldr	r2, [pc, #188]	; (8003360 <TIM_Base_SetConfig+0xe0>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d108      	bne.n	80032ba <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	68fa      	ldr	r2, [r7, #12]
 80032b6:	4313      	orrs	r3, r2
 80032b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	4a27      	ldr	r2, [pc, #156]	; (800335c <TIM_Base_SetConfig+0xdc>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d013      	beq.n	80032ea <TIM_Base_SetConfig+0x6a>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032c8:	d00f      	beq.n	80032ea <TIM_Base_SetConfig+0x6a>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	4a24      	ldr	r2, [pc, #144]	; (8003360 <TIM_Base_SetConfig+0xe0>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d00b      	beq.n	80032ea <TIM_Base_SetConfig+0x6a>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	4a23      	ldr	r2, [pc, #140]	; (8003364 <TIM_Base_SetConfig+0xe4>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d007      	beq.n	80032ea <TIM_Base_SetConfig+0x6a>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	4a22      	ldr	r2, [pc, #136]	; (8003368 <TIM_Base_SetConfig+0xe8>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d003      	beq.n	80032ea <TIM_Base_SetConfig+0x6a>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	4a21      	ldr	r2, [pc, #132]	; (800336c <TIM_Base_SetConfig+0xec>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d108      	bne.n	80032fc <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	68db      	ldr	r3, [r3, #12]
 80032f6:	68fa      	ldr	r2, [r7, #12]
 80032f8:	4313      	orrs	r3, r2
 80032fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	695b      	ldr	r3, [r3, #20]
 8003306:	4313      	orrs	r3, r2
 8003308:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	68fa      	ldr	r2, [r7, #12]
 800330e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	689a      	ldr	r2, [r3, #8]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	681a      	ldr	r2, [r3, #0]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	4a0e      	ldr	r2, [pc, #56]	; (800335c <TIM_Base_SetConfig+0xdc>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d00b      	beq.n	8003340 <TIM_Base_SetConfig+0xc0>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	4a0e      	ldr	r2, [pc, #56]	; (8003364 <TIM_Base_SetConfig+0xe4>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d007      	beq.n	8003340 <TIM_Base_SetConfig+0xc0>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	4a0d      	ldr	r2, [pc, #52]	; (8003368 <TIM_Base_SetConfig+0xe8>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d003      	beq.n	8003340 <TIM_Base_SetConfig+0xc0>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	4a0c      	ldr	r2, [pc, #48]	; (800336c <TIM_Base_SetConfig+0xec>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d103      	bne.n	8003348 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	691a      	ldr	r2, [r3, #16]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2201      	movs	r2, #1
 800334c:	615a      	str	r2, [r3, #20]
}
 800334e:	bf00      	nop
 8003350:	3714      	adds	r7, #20
 8003352:	46bd      	mov	sp, r7
 8003354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003358:	4770      	bx	lr
 800335a:	bf00      	nop
 800335c:	40012c00 	.word	0x40012c00
 8003360:	40000400 	.word	0x40000400
 8003364:	40014000 	.word	0x40014000
 8003368:	40014400 	.word	0x40014400
 800336c:	40014800 	.word	0x40014800

08003370 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003370:	b480      	push	{r7}
 8003372:	b087      	sub	sp, #28
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
 8003378:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6a1b      	ldr	r3, [r3, #32]
 800337e:	f023 0201 	bic.w	r2, r3, #1
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6a1b      	ldr	r3, [r3, #32]
 800338a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	699b      	ldr	r3, [r3, #24]
 8003396:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800339e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	f023 0303 	bic.w	r3, r3, #3
 80033aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	68fa      	ldr	r2, [r7, #12]
 80033b2:	4313      	orrs	r3, r2
 80033b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	f023 0302 	bic.w	r3, r3, #2
 80033bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	689b      	ldr	r3, [r3, #8]
 80033c2:	697a      	ldr	r2, [r7, #20]
 80033c4:	4313      	orrs	r3, r2
 80033c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	4a28      	ldr	r2, [pc, #160]	; (800346c <TIM_OC1_SetConfig+0xfc>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d00b      	beq.n	80033e8 <TIM_OC1_SetConfig+0x78>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	4a27      	ldr	r2, [pc, #156]	; (8003470 <TIM_OC1_SetConfig+0x100>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d007      	beq.n	80033e8 <TIM_OC1_SetConfig+0x78>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	4a26      	ldr	r2, [pc, #152]	; (8003474 <TIM_OC1_SetConfig+0x104>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d003      	beq.n	80033e8 <TIM_OC1_SetConfig+0x78>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	4a25      	ldr	r2, [pc, #148]	; (8003478 <TIM_OC1_SetConfig+0x108>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d10c      	bne.n	8003402 <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	f023 0308 	bic.w	r3, r3, #8
 80033ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	68db      	ldr	r3, [r3, #12]
 80033f4:	697a      	ldr	r2, [r7, #20]
 80033f6:	4313      	orrs	r3, r2
 80033f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80033fa:	697b      	ldr	r3, [r7, #20]
 80033fc:	f023 0304 	bic.w	r3, r3, #4
 8003400:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	4a19      	ldr	r2, [pc, #100]	; (800346c <TIM_OC1_SetConfig+0xfc>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d00b      	beq.n	8003422 <TIM_OC1_SetConfig+0xb2>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	4a18      	ldr	r2, [pc, #96]	; (8003470 <TIM_OC1_SetConfig+0x100>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d007      	beq.n	8003422 <TIM_OC1_SetConfig+0xb2>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	4a17      	ldr	r2, [pc, #92]	; (8003474 <TIM_OC1_SetConfig+0x104>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d003      	beq.n	8003422 <TIM_OC1_SetConfig+0xb2>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	4a16      	ldr	r2, [pc, #88]	; (8003478 <TIM_OC1_SetConfig+0x108>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d111      	bne.n	8003446 <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003428:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003430:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	695b      	ldr	r3, [r3, #20]
 8003436:	693a      	ldr	r2, [r7, #16]
 8003438:	4313      	orrs	r3, r2
 800343a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	699b      	ldr	r3, [r3, #24]
 8003440:	693a      	ldr	r2, [r7, #16]
 8003442:	4313      	orrs	r3, r2
 8003444:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	693a      	ldr	r2, [r7, #16]
 800344a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	68fa      	ldr	r2, [r7, #12]
 8003450:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	685a      	ldr	r2, [r3, #4]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	697a      	ldr	r2, [r7, #20]
 800345e:	621a      	str	r2, [r3, #32]
}
 8003460:	bf00      	nop
 8003462:	371c      	adds	r7, #28
 8003464:	46bd      	mov	sp, r7
 8003466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346a:	4770      	bx	lr
 800346c:	40012c00 	.word	0x40012c00
 8003470:	40014000 	.word	0x40014000
 8003474:	40014400 	.word	0x40014400
 8003478:	40014800 	.word	0x40014800

0800347c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800347c:	b480      	push	{r7}
 800347e:	b087      	sub	sp, #28
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
 8003484:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6a1b      	ldr	r3, [r3, #32]
 800348a:	f023 0210 	bic.w	r2, r3, #16
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6a1b      	ldr	r3, [r3, #32]
 8003496:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	699b      	ldr	r3, [r3, #24]
 80034a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80034aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	021b      	lsls	r3, r3, #8
 80034be:	68fa      	ldr	r2, [r7, #12]
 80034c0:	4313      	orrs	r3, r2
 80034c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80034c4:	697b      	ldr	r3, [r7, #20]
 80034c6:	f023 0320 	bic.w	r3, r3, #32
 80034ca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	011b      	lsls	r3, r3, #4
 80034d2:	697a      	ldr	r2, [r7, #20]
 80034d4:	4313      	orrs	r3, r2
 80034d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	4a24      	ldr	r2, [pc, #144]	; (800356c <TIM_OC2_SetConfig+0xf0>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d10d      	bne.n	80034fc <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80034e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	68db      	ldr	r3, [r3, #12]
 80034ec:	011b      	lsls	r3, r3, #4
 80034ee:	697a      	ldr	r2, [r7, #20]
 80034f0:	4313      	orrs	r3, r2
 80034f2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80034f4:	697b      	ldr	r3, [r7, #20]
 80034f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80034fa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	4a1b      	ldr	r2, [pc, #108]	; (800356c <TIM_OC2_SetConfig+0xf0>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d00b      	beq.n	800351c <TIM_OC2_SetConfig+0xa0>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	4a1a      	ldr	r2, [pc, #104]	; (8003570 <TIM_OC2_SetConfig+0xf4>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d007      	beq.n	800351c <TIM_OC2_SetConfig+0xa0>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	4a19      	ldr	r2, [pc, #100]	; (8003574 <TIM_OC2_SetConfig+0xf8>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d003      	beq.n	800351c <TIM_OC2_SetConfig+0xa0>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	4a18      	ldr	r2, [pc, #96]	; (8003578 <TIM_OC2_SetConfig+0xfc>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d113      	bne.n	8003544 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800351c:	693b      	ldr	r3, [r7, #16]
 800351e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003522:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003524:	693b      	ldr	r3, [r7, #16]
 8003526:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800352a:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	695b      	ldr	r3, [r3, #20]
 8003530:	009b      	lsls	r3, r3, #2
 8003532:	693a      	ldr	r2, [r7, #16]
 8003534:	4313      	orrs	r3, r2
 8003536:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	699b      	ldr	r3, [r3, #24]
 800353c:	009b      	lsls	r3, r3, #2
 800353e:	693a      	ldr	r2, [r7, #16]
 8003540:	4313      	orrs	r3, r2
 8003542:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	693a      	ldr	r2, [r7, #16]
 8003548:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	68fa      	ldr	r2, [r7, #12]
 800354e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	685a      	ldr	r2, [r3, #4]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	697a      	ldr	r2, [r7, #20]
 800355c:	621a      	str	r2, [r3, #32]
}
 800355e:	bf00      	nop
 8003560:	371c      	adds	r7, #28
 8003562:	46bd      	mov	sp, r7
 8003564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003568:	4770      	bx	lr
 800356a:	bf00      	nop
 800356c:	40012c00 	.word	0x40012c00
 8003570:	40014000 	.word	0x40014000
 8003574:	40014400 	.word	0x40014400
 8003578:	40014800 	.word	0x40014800

0800357c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800357c:	b480      	push	{r7}
 800357e:	b087      	sub	sp, #28
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
 8003584:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6a1b      	ldr	r3, [r3, #32]
 800358a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6a1b      	ldr	r3, [r3, #32]
 8003596:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	69db      	ldr	r3, [r3, #28]
 80035a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	f023 0303 	bic.w	r3, r3, #3
 80035b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	68fa      	ldr	r2, [r7, #12]
 80035be:	4313      	orrs	r3, r2
 80035c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80035c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	689b      	ldr	r3, [r3, #8]
 80035ce:	021b      	lsls	r3, r3, #8
 80035d0:	697a      	ldr	r2, [r7, #20]
 80035d2:	4313      	orrs	r3, r2
 80035d4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	4a23      	ldr	r2, [pc, #140]	; (8003668 <TIM_OC3_SetConfig+0xec>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d10d      	bne.n	80035fa <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80035de:	697b      	ldr	r3, [r7, #20]
 80035e0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80035e4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	68db      	ldr	r3, [r3, #12]
 80035ea:	021b      	lsls	r3, r3, #8
 80035ec:	697a      	ldr	r2, [r7, #20]
 80035ee:	4313      	orrs	r3, r2
 80035f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80035f8:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	4a1a      	ldr	r2, [pc, #104]	; (8003668 <TIM_OC3_SetConfig+0xec>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d00b      	beq.n	800361a <TIM_OC3_SetConfig+0x9e>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	4a19      	ldr	r2, [pc, #100]	; (800366c <TIM_OC3_SetConfig+0xf0>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d007      	beq.n	800361a <TIM_OC3_SetConfig+0x9e>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	4a18      	ldr	r2, [pc, #96]	; (8003670 <TIM_OC3_SetConfig+0xf4>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d003      	beq.n	800361a <TIM_OC3_SetConfig+0x9e>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	4a17      	ldr	r2, [pc, #92]	; (8003674 <TIM_OC3_SetConfig+0xf8>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d113      	bne.n	8003642 <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003620:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003628:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	695b      	ldr	r3, [r3, #20]
 800362e:	011b      	lsls	r3, r3, #4
 8003630:	693a      	ldr	r2, [r7, #16]
 8003632:	4313      	orrs	r3, r2
 8003634:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	699b      	ldr	r3, [r3, #24]
 800363a:	011b      	lsls	r3, r3, #4
 800363c:	693a      	ldr	r2, [r7, #16]
 800363e:	4313      	orrs	r3, r2
 8003640:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	693a      	ldr	r2, [r7, #16]
 8003646:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	68fa      	ldr	r2, [r7, #12]
 800364c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	685a      	ldr	r2, [r3, #4]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	697a      	ldr	r2, [r7, #20]
 800365a:	621a      	str	r2, [r3, #32]
}
 800365c:	bf00      	nop
 800365e:	371c      	adds	r7, #28
 8003660:	46bd      	mov	sp, r7
 8003662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003666:	4770      	bx	lr
 8003668:	40012c00 	.word	0x40012c00
 800366c:	40014000 	.word	0x40014000
 8003670:	40014400 	.word	0x40014400
 8003674:	40014800 	.word	0x40014800

08003678 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003678:	b480      	push	{r7}
 800367a:	b087      	sub	sp, #28
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
 8003680:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6a1b      	ldr	r3, [r3, #32]
 8003686:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6a1b      	ldr	r3, [r3, #32]
 8003692:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	69db      	ldr	r3, [r3, #28]
 800369e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80036a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	021b      	lsls	r3, r3, #8
 80036ba:	68fa      	ldr	r2, [r7, #12]
 80036bc:	4313      	orrs	r3, r2
 80036be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80036c0:	693b      	ldr	r3, [r7, #16]
 80036c2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80036c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	689b      	ldr	r3, [r3, #8]
 80036cc:	031b      	lsls	r3, r3, #12
 80036ce:	693a      	ldr	r2, [r7, #16]
 80036d0:	4313      	orrs	r3, r2
 80036d2:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	4a16      	ldr	r2, [pc, #88]	; (8003730 <TIM_OC4_SetConfig+0xb8>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d00b      	beq.n	80036f4 <TIM_OC4_SetConfig+0x7c>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	4a15      	ldr	r2, [pc, #84]	; (8003734 <TIM_OC4_SetConfig+0xbc>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d007      	beq.n	80036f4 <TIM_OC4_SetConfig+0x7c>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	4a14      	ldr	r2, [pc, #80]	; (8003738 <TIM_OC4_SetConfig+0xc0>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d003      	beq.n	80036f4 <TIM_OC4_SetConfig+0x7c>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	4a13      	ldr	r2, [pc, #76]	; (800373c <TIM_OC4_SetConfig+0xc4>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d109      	bne.n	8003708 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80036f4:	697b      	ldr	r3, [r7, #20]
 80036f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80036fa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	695b      	ldr	r3, [r3, #20]
 8003700:	019b      	lsls	r3, r3, #6
 8003702:	697a      	ldr	r2, [r7, #20]
 8003704:	4313      	orrs	r3, r2
 8003706:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	697a      	ldr	r2, [r7, #20]
 800370c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	68fa      	ldr	r2, [r7, #12]
 8003712:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	685a      	ldr	r2, [r3, #4]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	693a      	ldr	r2, [r7, #16]
 8003720:	621a      	str	r2, [r3, #32]
}
 8003722:	bf00      	nop
 8003724:	371c      	adds	r7, #28
 8003726:	46bd      	mov	sp, r7
 8003728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372c:	4770      	bx	lr
 800372e:	bf00      	nop
 8003730:	40012c00 	.word	0x40012c00
 8003734:	40014000 	.word	0x40014000
 8003738:	40014400 	.word	0x40014400
 800373c:	40014800 	.word	0x40014800

08003740 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003740:	b480      	push	{r7}
 8003742:	b087      	sub	sp, #28
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
 8003748:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6a1b      	ldr	r3, [r3, #32]
 800374e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6a1b      	ldr	r3, [r3, #32]
 800375a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003766:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800376e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003772:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	68fa      	ldr	r2, [r7, #12]
 800377a:	4313      	orrs	r3, r2
 800377c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003784:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	689b      	ldr	r3, [r3, #8]
 800378a:	041b      	lsls	r3, r3, #16
 800378c:	693a      	ldr	r2, [r7, #16]
 800378e:	4313      	orrs	r3, r2
 8003790:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	4a15      	ldr	r2, [pc, #84]	; (80037ec <TIM_OC5_SetConfig+0xac>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d00b      	beq.n	80037b2 <TIM_OC5_SetConfig+0x72>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	4a14      	ldr	r2, [pc, #80]	; (80037f0 <TIM_OC5_SetConfig+0xb0>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d007      	beq.n	80037b2 <TIM_OC5_SetConfig+0x72>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	4a13      	ldr	r2, [pc, #76]	; (80037f4 <TIM_OC5_SetConfig+0xb4>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d003      	beq.n	80037b2 <TIM_OC5_SetConfig+0x72>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	4a12      	ldr	r2, [pc, #72]	; (80037f8 <TIM_OC5_SetConfig+0xb8>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d109      	bne.n	80037c6 <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80037b2:	697b      	ldr	r3, [r7, #20]
 80037b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037b8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	695b      	ldr	r3, [r3, #20]
 80037be:	021b      	lsls	r3, r3, #8
 80037c0:	697a      	ldr	r2, [r7, #20]
 80037c2:	4313      	orrs	r3, r2
 80037c4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	697a      	ldr	r2, [r7, #20]
 80037ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	68fa      	ldr	r2, [r7, #12]
 80037d0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	685a      	ldr	r2, [r3, #4]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	693a      	ldr	r2, [r7, #16]
 80037de:	621a      	str	r2, [r3, #32]
}
 80037e0:	bf00      	nop
 80037e2:	371c      	adds	r7, #28
 80037e4:	46bd      	mov	sp, r7
 80037e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ea:	4770      	bx	lr
 80037ec:	40012c00 	.word	0x40012c00
 80037f0:	40014000 	.word	0x40014000
 80037f4:	40014400 	.word	0x40014400
 80037f8:	40014800 	.word	0x40014800

080037fc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b087      	sub	sp, #28
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
 8003804:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6a1b      	ldr	r3, [r3, #32]
 800380a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6a1b      	ldr	r3, [r3, #32]
 8003816:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003822:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800382a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800382e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	021b      	lsls	r3, r3, #8
 8003836:	68fa      	ldr	r2, [r7, #12]
 8003838:	4313      	orrs	r3, r2
 800383a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800383c:	693b      	ldr	r3, [r7, #16]
 800383e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003842:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	689b      	ldr	r3, [r3, #8]
 8003848:	051b      	lsls	r3, r3, #20
 800384a:	693a      	ldr	r2, [r7, #16]
 800384c:	4313      	orrs	r3, r2
 800384e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	4a16      	ldr	r2, [pc, #88]	; (80038ac <TIM_OC6_SetConfig+0xb0>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d00b      	beq.n	8003870 <TIM_OC6_SetConfig+0x74>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	4a15      	ldr	r2, [pc, #84]	; (80038b0 <TIM_OC6_SetConfig+0xb4>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d007      	beq.n	8003870 <TIM_OC6_SetConfig+0x74>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	4a14      	ldr	r2, [pc, #80]	; (80038b4 <TIM_OC6_SetConfig+0xb8>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d003      	beq.n	8003870 <TIM_OC6_SetConfig+0x74>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	4a13      	ldr	r2, [pc, #76]	; (80038b8 <TIM_OC6_SetConfig+0xbc>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d109      	bne.n	8003884 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003876:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	695b      	ldr	r3, [r3, #20]
 800387c:	029b      	lsls	r3, r3, #10
 800387e:	697a      	ldr	r2, [r7, #20]
 8003880:	4313      	orrs	r3, r2
 8003882:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	697a      	ldr	r2, [r7, #20]
 8003888:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	68fa      	ldr	r2, [r7, #12]
 800388e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	685a      	ldr	r2, [r3, #4]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	693a      	ldr	r2, [r7, #16]
 800389c:	621a      	str	r2, [r3, #32]
}
 800389e:	bf00      	nop
 80038a0:	371c      	adds	r7, #28
 80038a2:	46bd      	mov	sp, r7
 80038a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a8:	4770      	bx	lr
 80038aa:	bf00      	nop
 80038ac:	40012c00 	.word	0x40012c00
 80038b0:	40014000 	.word	0x40014000
 80038b4:	40014400 	.word	0x40014400
 80038b8:	40014800 	.word	0x40014800

080038bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80038bc:	b480      	push	{r7}
 80038be:	b087      	sub	sp, #28
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	60f8      	str	r0, [r7, #12]
 80038c4:	60b9      	str	r1, [r7, #8]
 80038c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	6a1b      	ldr	r3, [r3, #32]
 80038cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	6a1b      	ldr	r3, [r3, #32]
 80038d2:	f023 0201 	bic.w	r2, r3, #1
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	699b      	ldr	r3, [r3, #24]
 80038de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80038e0:	693b      	ldr	r3, [r7, #16]
 80038e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80038e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	011b      	lsls	r3, r3, #4
 80038ec:	693a      	ldr	r2, [r7, #16]
 80038ee:	4313      	orrs	r3, r2
 80038f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	f023 030a 	bic.w	r3, r3, #10
 80038f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80038fa:	697a      	ldr	r2, [r7, #20]
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	4313      	orrs	r3, r2
 8003900:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	693a      	ldr	r2, [r7, #16]
 8003906:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	697a      	ldr	r2, [r7, #20]
 800390c:	621a      	str	r2, [r3, #32]
}
 800390e:	bf00      	nop
 8003910:	371c      	adds	r7, #28
 8003912:	46bd      	mov	sp, r7
 8003914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003918:	4770      	bx	lr

0800391a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800391a:	b480      	push	{r7}
 800391c:	b087      	sub	sp, #28
 800391e:	af00      	add	r7, sp, #0
 8003920:	60f8      	str	r0, [r7, #12]
 8003922:	60b9      	str	r1, [r7, #8]
 8003924:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	6a1b      	ldr	r3, [r3, #32]
 800392a:	f023 0210 	bic.w	r2, r3, #16
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	699b      	ldr	r3, [r3, #24]
 8003936:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	6a1b      	ldr	r3, [r3, #32]
 800393c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800393e:	697b      	ldr	r3, [r7, #20]
 8003940:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003944:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	031b      	lsls	r3, r3, #12
 800394a:	697a      	ldr	r2, [r7, #20]
 800394c:	4313      	orrs	r3, r2
 800394e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003950:	693b      	ldr	r3, [r7, #16]
 8003952:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003956:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	011b      	lsls	r3, r3, #4
 800395c:	693a      	ldr	r2, [r7, #16]
 800395e:	4313      	orrs	r3, r2
 8003960:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	697a      	ldr	r2, [r7, #20]
 8003966:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	693a      	ldr	r2, [r7, #16]
 800396c:	621a      	str	r2, [r3, #32]
}
 800396e:	bf00      	nop
 8003970:	371c      	adds	r7, #28
 8003972:	46bd      	mov	sp, r7
 8003974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003978:	4770      	bx	lr

0800397a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800397a:	b480      	push	{r7}
 800397c:	b085      	sub	sp, #20
 800397e:	af00      	add	r7, sp, #0
 8003980:	6078      	str	r0, [r7, #4]
 8003982:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003990:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003992:	683a      	ldr	r2, [r7, #0]
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	4313      	orrs	r3, r2
 8003998:	f043 0307 	orr.w	r3, r3, #7
 800399c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	68fa      	ldr	r2, [r7, #12]
 80039a2:	609a      	str	r2, [r3, #8]
}
 80039a4:	bf00      	nop
 80039a6:	3714      	adds	r7, #20
 80039a8:	46bd      	mov	sp, r7
 80039aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ae:	4770      	bx	lr

080039b0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80039b0:	b480      	push	{r7}
 80039b2:	b087      	sub	sp, #28
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	60f8      	str	r0, [r7, #12]
 80039b8:	60b9      	str	r1, [r7, #8]
 80039ba:	607a      	str	r2, [r7, #4]
 80039bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80039ca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	021a      	lsls	r2, r3, #8
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	431a      	orrs	r2, r3
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	4313      	orrs	r3, r2
 80039d8:	697a      	ldr	r2, [r7, #20]
 80039da:	4313      	orrs	r3, r2
 80039dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	697a      	ldr	r2, [r7, #20]
 80039e2:	609a      	str	r2, [r3, #8]
}
 80039e4:	bf00      	nop
 80039e6:	371c      	adds	r7, #28
 80039e8:	46bd      	mov	sp, r7
 80039ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ee:	4770      	bx	lr

080039f0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80039f0:	b480      	push	{r7}
 80039f2:	b087      	sub	sp, #28
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	60f8      	str	r0, [r7, #12]
 80039f8:	60b9      	str	r1, [r7, #8]
 80039fa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	f003 031f 	and.w	r3, r3, #31
 8003a02:	2201      	movs	r2, #1
 8003a04:	fa02 f303 	lsl.w	r3, r2, r3
 8003a08:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	6a1a      	ldr	r2, [r3, #32]
 8003a0e:	697b      	ldr	r3, [r7, #20]
 8003a10:	43db      	mvns	r3, r3
 8003a12:	401a      	ands	r2, r3
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	6a1a      	ldr	r2, [r3, #32]
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	f003 031f 	and.w	r3, r3, #31
 8003a22:	6879      	ldr	r1, [r7, #4]
 8003a24:	fa01 f303 	lsl.w	r3, r1, r3
 8003a28:	431a      	orrs	r2, r3
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	621a      	str	r2, [r3, #32]
}
 8003a2e:	bf00      	nop
 8003a30:	371c      	adds	r7, #28
 8003a32:	46bd      	mov	sp, r7
 8003a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a38:	4770      	bx	lr
	...

08003a3c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b085      	sub	sp, #20
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
 8003a44:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a4c:	2b01      	cmp	r3, #1
 8003a4e:	d101      	bne.n	8003a54 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003a50:	2302      	movs	r3, #2
 8003a52:	e054      	b.n	8003afe <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2201      	movs	r2, #1
 8003a58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2202      	movs	r2, #2
 8003a60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	689b      	ldr	r3, [r3, #8]
 8003a72:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a24      	ldr	r2, [pc, #144]	; (8003b0c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d108      	bne.n	8003a90 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003a84:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	68fa      	ldr	r2, [r7, #12]
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a96:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	68fa      	ldr	r2, [r7, #12]
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	68fa      	ldr	r2, [r7, #12]
 8003aa8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a17      	ldr	r2, [pc, #92]	; (8003b0c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d00e      	beq.n	8003ad2 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003abc:	d009      	beq.n	8003ad2 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a13      	ldr	r2, [pc, #76]	; (8003b10 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d004      	beq.n	8003ad2 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a11      	ldr	r2, [pc, #68]	; (8003b14 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d10c      	bne.n	8003aec <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003ad2:	68bb      	ldr	r3, [r7, #8]
 8003ad4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ad8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	689b      	ldr	r3, [r3, #8]
 8003ade:	68ba      	ldr	r2, [r7, #8]
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	68ba      	ldr	r2, [r7, #8]
 8003aea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2201      	movs	r2, #1
 8003af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2200      	movs	r2, #0
 8003af8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003afc:	2300      	movs	r3, #0
}
 8003afe:	4618      	mov	r0, r3
 8003b00:	3714      	adds	r7, #20
 8003b02:	46bd      	mov	sp, r7
 8003b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b08:	4770      	bx	lr
 8003b0a:	bf00      	nop
 8003b0c:	40012c00 	.word	0x40012c00
 8003b10:	40000400 	.word	0x40000400
 8003b14:	40014000 	.word	0x40014000

08003b18 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b085      	sub	sp, #20
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
 8003b20:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003b22:	2300      	movs	r3, #0
 8003b24:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b2c:	2b01      	cmp	r3, #1
 8003b2e:	d101      	bne.n	8003b34 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003b30:	2302      	movs	r3, #2
 8003b32:	e060      	b.n	8003bf6 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2201      	movs	r2, #1
 8003b38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	68db      	ldr	r3, [r3, #12]
 8003b46:	4313      	orrs	r3, r2
 8003b48:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	689b      	ldr	r3, [r3, #8]
 8003b54:	4313      	orrs	r3, r2
 8003b56:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	4313      	orrs	r3, r2
 8003b64:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4313      	orrs	r3, r2
 8003b72:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	691b      	ldr	r3, [r3, #16]
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	695b      	ldr	r3, [r3, #20]
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	699b      	ldr	r3, [r3, #24]
 8003ba8:	041b      	lsls	r3, r3, #16
 8003baa:	4313      	orrs	r3, r2
 8003bac:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a14      	ldr	r2, [pc, #80]	; (8003c04 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d115      	bne.n	8003be4 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc2:	051b      	lsls	r3, r3, #20
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	69db      	ldr	r3, [r3, #28]
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	6a1b      	ldr	r3, [r3, #32]
 8003be0:	4313      	orrs	r3, r2
 8003be2:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	68fa      	ldr	r2, [r7, #12]
 8003bea:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003bf4:	2300      	movs	r3, #0
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	3714      	adds	r7, #20
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c00:	4770      	bx	lr
 8003c02:	bf00      	nop
 8003c04:	40012c00 	.word	0x40012c00

08003c08 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b082      	sub	sp, #8
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d101      	bne.n	8003c1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	e040      	b.n	8003c9c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d106      	bne.n	8003c30 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2200      	movs	r2, #0
 8003c26:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c2a:	6878      	ldr	r0, [r7, #4]
 8003c2c:	f7fc feb0 	bl	8000990 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2224      	movs	r2, #36	; 0x24
 8003c34:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	681a      	ldr	r2, [r3, #0]
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f022 0201 	bic.w	r2, r2, #1
 8003c44:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003c46:	6878      	ldr	r0, [r7, #4]
 8003c48:	f000 fc18 	bl	800447c <UART_SetConfig>
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	2b01      	cmp	r3, #1
 8003c50:	d101      	bne.n	8003c56 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003c52:	2301      	movs	r3, #1
 8003c54:	e022      	b.n	8003c9c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d002      	beq.n	8003c64 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003c5e:	6878      	ldr	r0, [r7, #4]
 8003c60:	f000 fd44 	bl	80046ec <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	685a      	ldr	r2, [r3, #4]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003c72:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	689a      	ldr	r2, [r3, #8]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003c82:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	681a      	ldr	r2, [r3, #0]
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f042 0201 	orr.w	r2, r2, #1
 8003c92:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003c94:	6878      	ldr	r0, [r7, #4]
 8003c96:	f000 fdcb 	bl	8004830 <UART_CheckIdleState>
 8003c9a:	4603      	mov	r3, r0
}
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	3708      	adds	r7, #8
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	bd80      	pop	{r7, pc}

08003ca4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b08a      	sub	sp, #40	; 0x28
 8003ca8:	af02      	add	r7, sp, #8
 8003caa:	60f8      	str	r0, [r7, #12]
 8003cac:	60b9      	str	r1, [r7, #8]
 8003cae:	603b      	str	r3, [r7, #0]
 8003cb0:	4613      	mov	r3, r2
 8003cb2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003cb8:	2b20      	cmp	r3, #32
 8003cba:	f040 8082 	bne.w	8003dc2 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d002      	beq.n	8003cca <HAL_UART_Transmit+0x26>
 8003cc4:	88fb      	ldrh	r3, [r7, #6]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d101      	bne.n	8003cce <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	e07a      	b.n	8003dc4 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003cd4:	2b01      	cmp	r3, #1
 8003cd6:	d101      	bne.n	8003cdc <HAL_UART_Transmit+0x38>
 8003cd8:	2302      	movs	r3, #2
 8003cda:	e073      	b.n	8003dc4 <HAL_UART_Transmit+0x120>
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	2201      	movs	r2, #1
 8003ce0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	2221      	movs	r2, #33	; 0x21
 8003cf0:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003cf2:	f7fc ffe3 	bl	8000cbc <HAL_GetTick>
 8003cf6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	88fa      	ldrh	r2, [r7, #6]
 8003cfc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	88fa      	ldrh	r2, [r7, #6]
 8003d04:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	689b      	ldr	r3, [r3, #8]
 8003d0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d10:	d108      	bne.n	8003d24 <HAL_UART_Transmit+0x80>
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	691b      	ldr	r3, [r3, #16]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d104      	bne.n	8003d24 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003d1e:	68bb      	ldr	r3, [r7, #8]
 8003d20:	61bb      	str	r3, [r7, #24]
 8003d22:	e003      	b.n	8003d2c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003d28:	2300      	movs	r3, #0
 8003d2a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003d34:	e02d      	b.n	8003d92 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	9300      	str	r3, [sp, #0]
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	2180      	movs	r1, #128	; 0x80
 8003d40:	68f8      	ldr	r0, [r7, #12]
 8003d42:	f000 fdbe 	bl	80048c2 <UART_WaitOnFlagUntilTimeout>
 8003d46:	4603      	mov	r3, r0
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d001      	beq.n	8003d50 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003d4c:	2303      	movs	r3, #3
 8003d4e:	e039      	b.n	8003dc4 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8003d50:	69fb      	ldr	r3, [r7, #28]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d10b      	bne.n	8003d6e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003d56:	69bb      	ldr	r3, [r7, #24]
 8003d58:	881a      	ldrh	r2, [r3, #0]
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d62:	b292      	uxth	r2, r2
 8003d64:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003d66:	69bb      	ldr	r3, [r7, #24]
 8003d68:	3302      	adds	r3, #2
 8003d6a:	61bb      	str	r3, [r7, #24]
 8003d6c:	e008      	b.n	8003d80 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003d6e:	69fb      	ldr	r3, [r7, #28]
 8003d70:	781a      	ldrb	r2, [r3, #0]
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	b292      	uxth	r2, r2
 8003d78:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003d7a:	69fb      	ldr	r3, [r7, #28]
 8003d7c:	3301      	adds	r3, #1
 8003d7e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003d86:	b29b      	uxth	r3, r3
 8003d88:	3b01      	subs	r3, #1
 8003d8a:	b29a      	uxth	r2, r3
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003d98:	b29b      	uxth	r3, r3
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d1cb      	bne.n	8003d36 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	9300      	str	r3, [sp, #0]
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	2200      	movs	r2, #0
 8003da6:	2140      	movs	r1, #64	; 0x40
 8003da8:	68f8      	ldr	r0, [r7, #12]
 8003daa:	f000 fd8a 	bl	80048c2 <UART_WaitOnFlagUntilTimeout>
 8003dae:	4603      	mov	r3, r0
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d001      	beq.n	8003db8 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003db4:	2303      	movs	r3, #3
 8003db6:	e005      	b.n	8003dc4 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	2220      	movs	r2, #32
 8003dbc:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	e000      	b.n	8003dc4 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8003dc2:	2302      	movs	r3, #2
  }
}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	3720      	adds	r7, #32
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bd80      	pop	{r7, pc}

08003dcc <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b08a      	sub	sp, #40	; 0x28
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	60f8      	str	r0, [r7, #12]
 8003dd4:	60b9      	str	r1, [r7, #8]
 8003dd6:	4613      	mov	r3, r2
 8003dd8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003dde:	2b20      	cmp	r3, #32
 8003de0:	d13d      	bne.n	8003e5e <HAL_UART_Receive_DMA+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 8003de2:	68bb      	ldr	r3, [r7, #8]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d002      	beq.n	8003dee <HAL_UART_Receive_DMA+0x22>
 8003de8:	88fb      	ldrh	r3, [r7, #6]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d101      	bne.n	8003df2 <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 8003dee:	2301      	movs	r3, #1
 8003df0:	e036      	b.n	8003e60 <HAL_UART_Receive_DMA+0x94>
    }

    __HAL_LOCK(huart);
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003df8:	2b01      	cmp	r3, #1
 8003dfa:	d101      	bne.n	8003e00 <HAL_UART_Receive_DMA+0x34>
 8003dfc:	2302      	movs	r3, #2
 8003dfe:	e02f      	b.n	8003e60 <HAL_UART_Receive_DMA+0x94>
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	2201      	movs	r2, #1
 8003e04:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d018      	beq.n	8003e4e <HAL_UART_Receive_DMA+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e22:	697b      	ldr	r3, [r7, #20]
 8003e24:	e853 3f00 	ldrex	r3, [r3]
 8003e28:	613b      	str	r3, [r7, #16]
   return(result);
 8003e2a:	693b      	ldr	r3, [r7, #16]
 8003e2c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003e30:	627b      	str	r3, [r7, #36]	; 0x24
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	461a      	mov	r2, r3
 8003e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e3a:	623b      	str	r3, [r7, #32]
 8003e3c:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e3e:	69f9      	ldr	r1, [r7, #28]
 8003e40:	6a3a      	ldr	r2, [r7, #32]
 8003e42:	e841 2300 	strex	r3, r2, [r1]
 8003e46:	61bb      	str	r3, [r7, #24]
   return(result);
 8003e48:	69bb      	ldr	r3, [r7, #24]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d1e6      	bne.n	8003e1c <HAL_UART_Receive_DMA+0x50>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8003e4e:	88fb      	ldrh	r3, [r7, #6]
 8003e50:	461a      	mov	r2, r3
 8003e52:	68b9      	ldr	r1, [r7, #8]
 8003e54:	68f8      	ldr	r0, [r7, #12]
 8003e56:	f000 fdf9 	bl	8004a4c <UART_Start_Receive_DMA>
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	e000      	b.n	8003e60 <HAL_UART_Receive_DMA+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003e5e:	2302      	movs	r3, #2
  }
}
 8003e60:	4618      	mov	r0, r3
 8003e62:	3728      	adds	r7, #40	; 0x28
 8003e64:	46bd      	mov	sp, r7
 8003e66:	bd80      	pop	{r7, pc}

08003e68 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b0ba      	sub	sp, #232	; 0xe8
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	69db      	ldr	r3, [r3, #28]
 8003e76:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003e8e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003e92:	f640 030f 	movw	r3, #2063	; 0x80f
 8003e96:	4013      	ands	r3, r2
 8003e98:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003e9c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d115      	bne.n	8003ed0 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003ea4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ea8:	f003 0320 	and.w	r3, r3, #32
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d00f      	beq.n	8003ed0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003eb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003eb4:	f003 0320 	and.w	r3, r3, #32
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d009      	beq.n	8003ed0 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	f000 82a4 	beq.w	800440e <HAL_UART_IRQHandler+0x5a6>
      {
        huart->RxISR(huart);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003eca:	6878      	ldr	r0, [r7, #4]
 8003ecc:	4798      	blx	r3
      }
      return;
 8003ece:	e29e      	b.n	800440e <HAL_UART_IRQHandler+0x5a6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003ed0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	f000 8117 	beq.w	8004108 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003eda:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003ede:	f003 0301 	and.w	r3, r3, #1
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d106      	bne.n	8003ef4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003ee6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003eea:	4b85      	ldr	r3, [pc, #532]	; (8004100 <HAL_UART_IRQHandler+0x298>)
 8003eec:	4013      	ands	r3, r2
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	f000 810a 	beq.w	8004108 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003ef4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ef8:	f003 0301 	and.w	r3, r3, #1
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d011      	beq.n	8003f24 <HAL_UART_IRQHandler+0xbc>
 8003f00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d00b      	beq.n	8003f24 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	2201      	movs	r2, #1
 8003f12:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f1a:	f043 0201 	orr.w	r2, r3, #1
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003f24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f28:	f003 0302 	and.w	r3, r3, #2
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d011      	beq.n	8003f54 <HAL_UART_IRQHandler+0xec>
 8003f30:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003f34:	f003 0301 	and.w	r3, r3, #1
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d00b      	beq.n	8003f54 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	2202      	movs	r2, #2
 8003f42:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f4a:	f043 0204 	orr.w	r2, r3, #4
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003f54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f58:	f003 0304 	and.w	r3, r3, #4
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d011      	beq.n	8003f84 <HAL_UART_IRQHandler+0x11c>
 8003f60:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003f64:	f003 0301 	and.w	r3, r3, #1
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d00b      	beq.n	8003f84 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	2204      	movs	r2, #4
 8003f72:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f7a:	f043 0202 	orr.w	r2, r3, #2
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003f84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f88:	f003 0308 	and.w	r3, r3, #8
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d017      	beq.n	8003fc0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003f90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f94:	f003 0320 	and.w	r3, r3, #32
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d105      	bne.n	8003fa8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003f9c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003fa0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d00b      	beq.n	8003fc0 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	2208      	movs	r2, #8
 8003fae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003fb6:	f043 0208 	orr.w	r2, r3, #8
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003fc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fc4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d012      	beq.n	8003ff2 <HAL_UART_IRQHandler+0x18a>
 8003fcc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003fd0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d00c      	beq.n	8003ff2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003fe0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003fe8:	f043 0220 	orr.w	r2, r3, #32
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	f000 820a 	beq.w	8004412 <HAL_UART_IRQHandler+0x5aa>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003ffe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004002:	f003 0320 	and.w	r3, r3, #32
 8004006:	2b00      	cmp	r3, #0
 8004008:	d00d      	beq.n	8004026 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800400a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800400e:	f003 0320 	and.w	r3, r3, #32
 8004012:	2b00      	cmp	r3, #0
 8004014:	d007      	beq.n	8004026 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800401a:	2b00      	cmp	r3, #0
 800401c:	d003      	beq.n	8004026 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004022:	6878      	ldr	r0, [r7, #4]
 8004024:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800402c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	689b      	ldr	r3, [r3, #8]
 8004036:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800403a:	2b40      	cmp	r3, #64	; 0x40
 800403c:	d005      	beq.n	800404a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800403e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004042:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004046:	2b00      	cmp	r3, #0
 8004048:	d04f      	beq.n	80040ea <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800404a:	6878      	ldr	r0, [r7, #4]
 800404c:	f000 fdc6 	bl	8004bdc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	689b      	ldr	r3, [r3, #8]
 8004056:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800405a:	2b40      	cmp	r3, #64	; 0x40
 800405c:	d141      	bne.n	80040e2 <HAL_UART_IRQHandler+0x27a>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	3308      	adds	r3, #8
 8004064:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004068:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800406c:	e853 3f00 	ldrex	r3, [r3]
 8004070:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004074:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004078:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800407c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	3308      	adds	r3, #8
 8004086:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800408a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800408e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004092:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004096:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800409a:	e841 2300 	strex	r3, r2, [r1]
 800409e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80040a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d1d9      	bne.n	800405e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d013      	beq.n	80040da <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040b6:	4a13      	ldr	r2, [pc, #76]	; (8004104 <HAL_UART_IRQHandler+0x29c>)
 80040b8:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040be:	4618      	mov	r0, r3
 80040c0:	f7fd f81a 	bl	80010f8 <HAL_DMA_Abort_IT>
 80040c4:	4603      	mov	r3, r0
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d017      	beq.n	80040fa <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040d0:	687a      	ldr	r2, [r7, #4]
 80040d2:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80040d4:	4610      	mov	r0, r2
 80040d6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040d8:	e00f      	b.n	80040fa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80040da:	6878      	ldr	r0, [r7, #4]
 80040dc:	f000 f9b8 	bl	8004450 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040e0:	e00b      	b.n	80040fa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80040e2:	6878      	ldr	r0, [r7, #4]
 80040e4:	f000 f9b4 	bl	8004450 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040e8:	e007      	b.n	80040fa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80040ea:	6878      	ldr	r0, [r7, #4]
 80040ec:	f000 f9b0 	bl	8004450 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2200      	movs	r2, #0
 80040f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80040f8:	e18b      	b.n	8004412 <HAL_UART_IRQHandler+0x5aa>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040fa:	bf00      	nop
    return;
 80040fc:	e189      	b.n	8004412 <HAL_UART_IRQHandler+0x5aa>
 80040fe:	bf00      	nop
 8004100:	04000120 	.word	0x04000120
 8004104:	08004e75 	.word	0x08004e75

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800410c:	2b01      	cmp	r3, #1
 800410e:	f040 8143 	bne.w	8004398 <HAL_UART_IRQHandler+0x530>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004112:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004116:	f003 0310 	and.w	r3, r3, #16
 800411a:	2b00      	cmp	r3, #0
 800411c:	f000 813c 	beq.w	8004398 <HAL_UART_IRQHandler+0x530>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004120:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004124:	f003 0310 	and.w	r3, r3, #16
 8004128:	2b00      	cmp	r3, #0
 800412a:	f000 8135 	beq.w	8004398 <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	2210      	movs	r2, #16
 8004134:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	689b      	ldr	r3, [r3, #8]
 800413c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004140:	2b40      	cmp	r3, #64	; 0x40
 8004142:	f040 80b1 	bne.w	80042a8 <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004152:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004156:	2b00      	cmp	r3, #0
 8004158:	f000 815d 	beq.w	8004416 <HAL_UART_IRQHandler+0x5ae>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004162:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004166:	429a      	cmp	r2, r3
 8004168:	f080 8155 	bcs.w	8004416 <HAL_UART_IRQHandler+0x5ae>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004172:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800417a:	699b      	ldr	r3, [r3, #24]
 800417c:	2b20      	cmp	r3, #32
 800417e:	f000 8085 	beq.w	800428c <HAL_UART_IRQHandler+0x424>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800418a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800418e:	e853 3f00 	ldrex	r3, [r3]
 8004192:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004196:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800419a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800419e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	461a      	mov	r2, r3
 80041a8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80041ac:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80041b0:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041b4:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80041b8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80041bc:	e841 2300 	strex	r3, r2, [r1]
 80041c0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80041c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d1da      	bne.n	8004182 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	3308      	adds	r3, #8
 80041d2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041d6:	e853 3f00 	ldrex	r3, [r3]
 80041da:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80041dc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80041de:	f023 0301 	bic.w	r3, r3, #1
 80041e2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	3308      	adds	r3, #8
 80041ec:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80041f0:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80041f4:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041f6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80041f8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80041fc:	e841 2300 	strex	r3, r2, [r1]
 8004200:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004202:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004204:	2b00      	cmp	r3, #0
 8004206:	d1e1      	bne.n	80041cc <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	3308      	adds	r3, #8
 800420e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004210:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004212:	e853 3f00 	ldrex	r3, [r3]
 8004216:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004218:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800421a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800421e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	3308      	adds	r3, #8
 8004228:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800422c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800422e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004230:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004232:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004234:	e841 2300 	strex	r3, r2, [r1]
 8004238:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800423a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800423c:	2b00      	cmp	r3, #0
 800423e:	d1e3      	bne.n	8004208 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2220      	movs	r2, #32
 8004244:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2200      	movs	r2, #0
 800424a:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004252:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004254:	e853 3f00 	ldrex	r3, [r3]
 8004258:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800425a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800425c:	f023 0310 	bic.w	r3, r3, #16
 8004260:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	461a      	mov	r2, r3
 800426a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800426e:	65bb      	str	r3, [r7, #88]	; 0x58
 8004270:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004272:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004274:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004276:	e841 2300 	strex	r3, r2, [r1]
 800427a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800427c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800427e:	2b00      	cmp	r3, #0
 8004280:	d1e4      	bne.n	800424c <HAL_UART_IRQHandler+0x3e4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004286:	4618      	mov	r0, r3
 8004288:	f7fc fefd 	bl	8001086 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004298:	b29b      	uxth	r3, r3
 800429a:	1ad3      	subs	r3, r2, r3
 800429c:	b29b      	uxth	r3, r3
 800429e:	4619      	mov	r1, r3
 80042a0:	6878      	ldr	r0, [r7, #4]
 80042a2:	f000 f8df 	bl	8004464 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80042a6:	e0b6      	b.n	8004416 <HAL_UART_IRQHandler+0x5ae>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80042b4:	b29b      	uxth	r3, r3
 80042b6:	1ad3      	subs	r3, r2, r3
 80042b8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80042c2:	b29b      	uxth	r3, r3
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	f000 80a8 	beq.w	800441a <HAL_UART_IRQHandler+0x5b2>
          && (nb_rx_data > 0U))
 80042ca:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	f000 80a3 	beq.w	800441a <HAL_UART_IRQHandler+0x5b2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042dc:	e853 3f00 	ldrex	r3, [r3]
 80042e0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80042e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042e4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80042e8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	461a      	mov	r2, r3
 80042f2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80042f6:	647b      	str	r3, [r7, #68]	; 0x44
 80042f8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042fa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80042fc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80042fe:	e841 2300 	strex	r3, r2, [r1]
 8004302:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004304:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004306:	2b00      	cmp	r3, #0
 8004308:	d1e4      	bne.n	80042d4 <HAL_UART_IRQHandler+0x46c>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	3308      	adds	r3, #8
 8004310:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004314:	e853 3f00 	ldrex	r3, [r3]
 8004318:	623b      	str	r3, [r7, #32]
   return(result);
 800431a:	6a3b      	ldr	r3, [r7, #32]
 800431c:	f023 0301 	bic.w	r3, r3, #1
 8004320:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	3308      	adds	r3, #8
 800432a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800432e:	633a      	str	r2, [r7, #48]	; 0x30
 8004330:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004332:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004334:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004336:	e841 2300 	strex	r3, r2, [r1]
 800433a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800433c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800433e:	2b00      	cmp	r3, #0
 8004340:	d1e3      	bne.n	800430a <HAL_UART_IRQHandler+0x4a2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2220      	movs	r2, #32
 8004346:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2200      	movs	r2, #0
 800434c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2200      	movs	r2, #0
 8004352:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800435a:	693b      	ldr	r3, [r7, #16]
 800435c:	e853 3f00 	ldrex	r3, [r3]
 8004360:	60fb      	str	r3, [r7, #12]
   return(result);
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	f023 0310 	bic.w	r3, r3, #16
 8004368:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	461a      	mov	r2, r3
 8004372:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004376:	61fb      	str	r3, [r7, #28]
 8004378:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800437a:	69b9      	ldr	r1, [r7, #24]
 800437c:	69fa      	ldr	r2, [r7, #28]
 800437e:	e841 2300 	strex	r3, r2, [r1]
 8004382:	617b      	str	r3, [r7, #20]
   return(result);
 8004384:	697b      	ldr	r3, [r7, #20]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d1e4      	bne.n	8004354 <HAL_UART_IRQHandler+0x4ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800438a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800438e:	4619      	mov	r1, r3
 8004390:	6878      	ldr	r0, [r7, #4]
 8004392:	f000 f867 	bl	8004464 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004396:	e040      	b.n	800441a <HAL_UART_IRQHandler+0x5b2>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004398:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800439c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d00e      	beq.n	80043c2 <HAL_UART_IRQHandler+0x55a>
 80043a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80043a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d008      	beq.n	80043c2 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80043b8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80043ba:	6878      	ldr	r0, [r7, #4]
 80043bc:	f000 fd9a 	bl	8004ef4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80043c0:	e02e      	b.n	8004420 <HAL_UART_IRQHandler+0x5b8>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80043c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d00e      	beq.n	80043ec <HAL_UART_IRQHandler+0x584>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80043ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d008      	beq.n	80043ec <HAL_UART_IRQHandler+0x584>
  {
    if (huart->TxISR != NULL)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d01d      	beq.n	800441e <HAL_UART_IRQHandler+0x5b6>
    {
      huart->TxISR(huart);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80043e6:	6878      	ldr	r0, [r7, #4]
 80043e8:	4798      	blx	r3
    }
    return;
 80043ea:	e018      	b.n	800441e <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80043ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d013      	beq.n	8004420 <HAL_UART_IRQHandler+0x5b8>
 80043f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004400:	2b00      	cmp	r3, #0
 8004402:	d00d      	beq.n	8004420 <HAL_UART_IRQHandler+0x5b8>
  {
    UART_EndTransmit_IT(huart);
 8004404:	6878      	ldr	r0, [r7, #4]
 8004406:	f000 fd4b 	bl	8004ea0 <UART_EndTransmit_IT>
    return;
 800440a:	bf00      	nop
 800440c:	e008      	b.n	8004420 <HAL_UART_IRQHandler+0x5b8>
      return;
 800440e:	bf00      	nop
 8004410:	e006      	b.n	8004420 <HAL_UART_IRQHandler+0x5b8>
    return;
 8004412:	bf00      	nop
 8004414:	e004      	b.n	8004420 <HAL_UART_IRQHandler+0x5b8>
      return;
 8004416:	bf00      	nop
 8004418:	e002      	b.n	8004420 <HAL_UART_IRQHandler+0x5b8>
      return;
 800441a:	bf00      	nop
 800441c:	e000      	b.n	8004420 <HAL_UART_IRQHandler+0x5b8>
    return;
 800441e:	bf00      	nop
  }

}
 8004420:	37e8      	adds	r7, #232	; 0xe8
 8004422:	46bd      	mov	sp, r7
 8004424:	bd80      	pop	{r7, pc}
 8004426:	bf00      	nop

08004428 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004428:	b480      	push	{r7}
 800442a:	b083      	sub	sp, #12
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004430:	bf00      	nop
 8004432:	370c      	adds	r7, #12
 8004434:	46bd      	mov	sp, r7
 8004436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443a:	4770      	bx	lr

0800443c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800443c:	b480      	push	{r7}
 800443e:	b083      	sub	sp, #12
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8004444:	bf00      	nop
 8004446:	370c      	adds	r7, #12
 8004448:	46bd      	mov	sp, r7
 800444a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444e:	4770      	bx	lr

08004450 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004450:	b480      	push	{r7}
 8004452:	b083      	sub	sp, #12
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004458:	bf00      	nop
 800445a:	370c      	adds	r7, #12
 800445c:	46bd      	mov	sp, r7
 800445e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004462:	4770      	bx	lr

08004464 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004464:	b480      	push	{r7}
 8004466:	b083      	sub	sp, #12
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
 800446c:	460b      	mov	r3, r1
 800446e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004470:	bf00      	nop
 8004472:	370c      	adds	r7, #12
 8004474:	46bd      	mov	sp, r7
 8004476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447a:	4770      	bx	lr

0800447c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b088      	sub	sp, #32
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004484:	2300      	movs	r3, #0
 8004486:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	689a      	ldr	r2, [r3, #8]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	691b      	ldr	r3, [r3, #16]
 8004490:	431a      	orrs	r2, r3
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	695b      	ldr	r3, [r3, #20]
 8004496:	431a      	orrs	r2, r3
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	69db      	ldr	r3, [r3, #28]
 800449c:	4313      	orrs	r3, r2
 800449e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	681a      	ldr	r2, [r3, #0]
 80044a6:	4b8b      	ldr	r3, [pc, #556]	; (80046d4 <UART_SetConfig+0x258>)
 80044a8:	4013      	ands	r3, r2
 80044aa:	687a      	ldr	r2, [r7, #4]
 80044ac:	6812      	ldr	r2, [r2, #0]
 80044ae:	6979      	ldr	r1, [r7, #20]
 80044b0:	430b      	orrs	r3, r1
 80044b2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	68da      	ldr	r2, [r3, #12]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	430a      	orrs	r2, r1
 80044c8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	699b      	ldr	r3, [r3, #24]
 80044ce:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6a1b      	ldr	r3, [r3, #32]
 80044d4:	697a      	ldr	r2, [r7, #20]
 80044d6:	4313      	orrs	r3, r2
 80044d8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	689b      	ldr	r3, [r3, #8]
 80044e0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	697a      	ldr	r2, [r7, #20]
 80044ea:	430a      	orrs	r2, r1
 80044ec:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4a79      	ldr	r2, [pc, #484]	; (80046d8 <UART_SetConfig+0x25c>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d121      	bne.n	800453c <UART_SetConfig+0xc0>
 80044f8:	4b78      	ldr	r3, [pc, #480]	; (80046dc <UART_SetConfig+0x260>)
 80044fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044fc:	f003 0303 	and.w	r3, r3, #3
 8004500:	2b03      	cmp	r3, #3
 8004502:	d817      	bhi.n	8004534 <UART_SetConfig+0xb8>
 8004504:	a201      	add	r2, pc, #4	; (adr r2, 800450c <UART_SetConfig+0x90>)
 8004506:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800450a:	bf00      	nop
 800450c:	0800451d 	.word	0x0800451d
 8004510:	08004529 	.word	0x08004529
 8004514:	0800452f 	.word	0x0800452f
 8004518:	08004523 	.word	0x08004523
 800451c:	2300      	movs	r3, #0
 800451e:	77fb      	strb	r3, [r7, #31]
 8004520:	e01e      	b.n	8004560 <UART_SetConfig+0xe4>
 8004522:	2302      	movs	r3, #2
 8004524:	77fb      	strb	r3, [r7, #31]
 8004526:	e01b      	b.n	8004560 <UART_SetConfig+0xe4>
 8004528:	2304      	movs	r3, #4
 800452a:	77fb      	strb	r3, [r7, #31]
 800452c:	e018      	b.n	8004560 <UART_SetConfig+0xe4>
 800452e:	2308      	movs	r3, #8
 8004530:	77fb      	strb	r3, [r7, #31]
 8004532:	e015      	b.n	8004560 <UART_SetConfig+0xe4>
 8004534:	2310      	movs	r3, #16
 8004536:	77fb      	strb	r3, [r7, #31]
 8004538:	bf00      	nop
 800453a:	e011      	b.n	8004560 <UART_SetConfig+0xe4>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4a67      	ldr	r2, [pc, #412]	; (80046e0 <UART_SetConfig+0x264>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d102      	bne.n	800454c <UART_SetConfig+0xd0>
 8004546:	2300      	movs	r3, #0
 8004548:	77fb      	strb	r3, [r7, #31]
 800454a:	e009      	b.n	8004560 <UART_SetConfig+0xe4>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a64      	ldr	r2, [pc, #400]	; (80046e4 <UART_SetConfig+0x268>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d102      	bne.n	800455c <UART_SetConfig+0xe0>
 8004556:	2300      	movs	r3, #0
 8004558:	77fb      	strb	r3, [r7, #31]
 800455a:	e001      	b.n	8004560 <UART_SetConfig+0xe4>
 800455c:	2310      	movs	r3, #16
 800455e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	69db      	ldr	r3, [r3, #28]
 8004564:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004568:	d15c      	bne.n	8004624 <UART_SetConfig+0x1a8>
  {
    switch (clocksource)
 800456a:	7ffb      	ldrb	r3, [r7, #31]
 800456c:	2b08      	cmp	r3, #8
 800456e:	d828      	bhi.n	80045c2 <UART_SetConfig+0x146>
 8004570:	a201      	add	r2, pc, #4	; (adr r2, 8004578 <UART_SetConfig+0xfc>)
 8004572:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004576:	bf00      	nop
 8004578:	0800459d 	.word	0x0800459d
 800457c:	080045a5 	.word	0x080045a5
 8004580:	080045ad 	.word	0x080045ad
 8004584:	080045c3 	.word	0x080045c3
 8004588:	080045b3 	.word	0x080045b3
 800458c:	080045c3 	.word	0x080045c3
 8004590:	080045c3 	.word	0x080045c3
 8004594:	080045c3 	.word	0x080045c3
 8004598:	080045bb 	.word	0x080045bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800459c:	f7fe f990 	bl	80028c0 <HAL_RCC_GetPCLK1Freq>
 80045a0:	61b8      	str	r0, [r7, #24]
        break;
 80045a2:	e013      	b.n	80045cc <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80045a4:	f7fe f9ae 	bl	8002904 <HAL_RCC_GetPCLK2Freq>
 80045a8:	61b8      	str	r0, [r7, #24]
        break;
 80045aa:	e00f      	b.n	80045cc <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80045ac:	4b4e      	ldr	r3, [pc, #312]	; (80046e8 <UART_SetConfig+0x26c>)
 80045ae:	61bb      	str	r3, [r7, #24]
        break;
 80045b0:	e00c      	b.n	80045cc <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80045b2:	f7fe f90f 	bl	80027d4 <HAL_RCC_GetSysClockFreq>
 80045b6:	61b8      	str	r0, [r7, #24]
        break;
 80045b8:	e008      	b.n	80045cc <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80045ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80045be:	61bb      	str	r3, [r7, #24]
        break;
 80045c0:	e004      	b.n	80045cc <UART_SetConfig+0x150>
      default:
        pclk = 0U;
 80045c2:	2300      	movs	r3, #0
 80045c4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80045c6:	2301      	movs	r3, #1
 80045c8:	77bb      	strb	r3, [r7, #30]
        break;
 80045ca:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80045cc:	69bb      	ldr	r3, [r7, #24]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d074      	beq.n	80046bc <UART_SetConfig+0x240>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80045d2:	69bb      	ldr	r3, [r7, #24]
 80045d4:	005a      	lsls	r2, r3, #1
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	085b      	lsrs	r3, r3, #1
 80045dc:	441a      	add	r2, r3
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80045e6:	b29b      	uxth	r3, r3
 80045e8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80045ea:	693b      	ldr	r3, [r7, #16]
 80045ec:	2b0f      	cmp	r3, #15
 80045ee:	d916      	bls.n	800461e <UART_SetConfig+0x1a2>
 80045f0:	693b      	ldr	r3, [r7, #16]
 80045f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045f6:	d212      	bcs.n	800461e <UART_SetConfig+0x1a2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80045f8:	693b      	ldr	r3, [r7, #16]
 80045fa:	b29b      	uxth	r3, r3
 80045fc:	f023 030f 	bic.w	r3, r3, #15
 8004600:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004602:	693b      	ldr	r3, [r7, #16]
 8004604:	085b      	lsrs	r3, r3, #1
 8004606:	b29b      	uxth	r3, r3
 8004608:	f003 0307 	and.w	r3, r3, #7
 800460c:	b29a      	uxth	r2, r3
 800460e:	89fb      	ldrh	r3, [r7, #14]
 8004610:	4313      	orrs	r3, r2
 8004612:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	89fa      	ldrh	r2, [r7, #14]
 800461a:	60da      	str	r2, [r3, #12]
 800461c:	e04e      	b.n	80046bc <UART_SetConfig+0x240>
      }
      else
      {
        ret = HAL_ERROR;
 800461e:	2301      	movs	r3, #1
 8004620:	77bb      	strb	r3, [r7, #30]
 8004622:	e04b      	b.n	80046bc <UART_SetConfig+0x240>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004624:	7ffb      	ldrb	r3, [r7, #31]
 8004626:	2b08      	cmp	r3, #8
 8004628:	d827      	bhi.n	800467a <UART_SetConfig+0x1fe>
 800462a:	a201      	add	r2, pc, #4	; (adr r2, 8004630 <UART_SetConfig+0x1b4>)
 800462c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004630:	08004655 	.word	0x08004655
 8004634:	0800465d 	.word	0x0800465d
 8004638:	08004665 	.word	0x08004665
 800463c:	0800467b 	.word	0x0800467b
 8004640:	0800466b 	.word	0x0800466b
 8004644:	0800467b 	.word	0x0800467b
 8004648:	0800467b 	.word	0x0800467b
 800464c:	0800467b 	.word	0x0800467b
 8004650:	08004673 	.word	0x08004673
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004654:	f7fe f934 	bl	80028c0 <HAL_RCC_GetPCLK1Freq>
 8004658:	61b8      	str	r0, [r7, #24]
        break;
 800465a:	e013      	b.n	8004684 <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800465c:	f7fe f952 	bl	8002904 <HAL_RCC_GetPCLK2Freq>
 8004660:	61b8      	str	r0, [r7, #24]
        break;
 8004662:	e00f      	b.n	8004684 <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004664:	4b20      	ldr	r3, [pc, #128]	; (80046e8 <UART_SetConfig+0x26c>)
 8004666:	61bb      	str	r3, [r7, #24]
        break;
 8004668:	e00c      	b.n	8004684 <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800466a:	f7fe f8b3 	bl	80027d4 <HAL_RCC_GetSysClockFreq>
 800466e:	61b8      	str	r0, [r7, #24]
        break;
 8004670:	e008      	b.n	8004684 <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004672:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004676:	61bb      	str	r3, [r7, #24]
        break;
 8004678:	e004      	b.n	8004684 <UART_SetConfig+0x208>
      default:
        pclk = 0U;
 800467a:	2300      	movs	r3, #0
 800467c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800467e:	2301      	movs	r3, #1
 8004680:	77bb      	strb	r3, [r7, #30]
        break;
 8004682:	bf00      	nop
    }

    if (pclk != 0U)
 8004684:	69bb      	ldr	r3, [r7, #24]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d018      	beq.n	80046bc <UART_SetConfig+0x240>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	085a      	lsrs	r2, r3, #1
 8004690:	69bb      	ldr	r3, [r7, #24]
 8004692:	441a      	add	r2, r3
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	685b      	ldr	r3, [r3, #4]
 8004698:	fbb2 f3f3 	udiv	r3, r2, r3
 800469c:	b29b      	uxth	r3, r3
 800469e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80046a0:	693b      	ldr	r3, [r7, #16]
 80046a2:	2b0f      	cmp	r3, #15
 80046a4:	d908      	bls.n	80046b8 <UART_SetConfig+0x23c>
 80046a6:	693b      	ldr	r3, [r7, #16]
 80046a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046ac:	d204      	bcs.n	80046b8 <UART_SetConfig+0x23c>
      {
        huart->Instance->BRR = usartdiv;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	693a      	ldr	r2, [r7, #16]
 80046b4:	60da      	str	r2, [r3, #12]
 80046b6:	e001      	b.n	80046bc <UART_SetConfig+0x240>
      }
      else
      {
        ret = HAL_ERROR;
 80046b8:	2301      	movs	r3, #1
 80046ba:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2200      	movs	r2, #0
 80046c0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2200      	movs	r2, #0
 80046c6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80046c8:	7fbb      	ldrb	r3, [r7, #30]
}
 80046ca:	4618      	mov	r0, r3
 80046cc:	3720      	adds	r7, #32
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd80      	pop	{r7, pc}
 80046d2:	bf00      	nop
 80046d4:	efff69f3 	.word	0xefff69f3
 80046d8:	40013800 	.word	0x40013800
 80046dc:	40021000 	.word	0x40021000
 80046e0:	40004400 	.word	0x40004400
 80046e4:	40004800 	.word	0x40004800
 80046e8:	007a1200 	.word	0x007a1200

080046ec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80046ec:	b480      	push	{r7}
 80046ee:	b083      	sub	sp, #12
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f8:	f003 0301 	and.w	r3, r3, #1
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d00a      	beq.n	8004716 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	430a      	orrs	r2, r1
 8004714:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800471a:	f003 0302 	and.w	r3, r3, #2
 800471e:	2b00      	cmp	r3, #0
 8004720:	d00a      	beq.n	8004738 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	430a      	orrs	r2, r1
 8004736:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800473c:	f003 0304 	and.w	r3, r3, #4
 8004740:	2b00      	cmp	r3, #0
 8004742:	d00a      	beq.n	800475a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	430a      	orrs	r2, r1
 8004758:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800475e:	f003 0308 	and.w	r3, r3, #8
 8004762:	2b00      	cmp	r3, #0
 8004764:	d00a      	beq.n	800477c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	430a      	orrs	r2, r1
 800477a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004780:	f003 0310 	and.w	r3, r3, #16
 8004784:	2b00      	cmp	r3, #0
 8004786:	d00a      	beq.n	800479e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	689b      	ldr	r3, [r3, #8]
 800478e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	430a      	orrs	r2, r1
 800479c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047a2:	f003 0320 	and.w	r3, r3, #32
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d00a      	beq.n	80047c0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	689b      	ldr	r3, [r3, #8]
 80047b0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	430a      	orrs	r2, r1
 80047be:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d01a      	beq.n	8004802 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	430a      	orrs	r2, r1
 80047e0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80047ea:	d10a      	bne.n	8004802 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	430a      	orrs	r2, r1
 8004800:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004806:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800480a:	2b00      	cmp	r3, #0
 800480c:	d00a      	beq.n	8004824 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	430a      	orrs	r2, r1
 8004822:	605a      	str	r2, [r3, #4]
  }
}
 8004824:	bf00      	nop
 8004826:	370c      	adds	r7, #12
 8004828:	46bd      	mov	sp, r7
 800482a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482e:	4770      	bx	lr

08004830 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b086      	sub	sp, #24
 8004834:	af02      	add	r7, sp, #8
 8004836:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2200      	movs	r2, #0
 800483c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004840:	f7fc fa3c 	bl	8000cbc <HAL_GetTick>
 8004844:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f003 0308 	and.w	r3, r3, #8
 8004850:	2b08      	cmp	r3, #8
 8004852:	d10e      	bne.n	8004872 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004854:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004858:	9300      	str	r3, [sp, #0]
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	2200      	movs	r2, #0
 800485e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004862:	6878      	ldr	r0, [r7, #4]
 8004864:	f000 f82d 	bl	80048c2 <UART_WaitOnFlagUntilTimeout>
 8004868:	4603      	mov	r3, r0
 800486a:	2b00      	cmp	r3, #0
 800486c:	d001      	beq.n	8004872 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800486e:	2303      	movs	r3, #3
 8004870:	e023      	b.n	80048ba <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f003 0304 	and.w	r3, r3, #4
 800487c:	2b04      	cmp	r3, #4
 800487e:	d10e      	bne.n	800489e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004880:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004884:	9300      	str	r3, [sp, #0]
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	2200      	movs	r2, #0
 800488a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800488e:	6878      	ldr	r0, [r7, #4]
 8004890:	f000 f817 	bl	80048c2 <UART_WaitOnFlagUntilTimeout>
 8004894:	4603      	mov	r3, r0
 8004896:	2b00      	cmp	r3, #0
 8004898:	d001      	beq.n	800489e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800489a:	2303      	movs	r3, #3
 800489c:	e00d      	b.n	80048ba <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2220      	movs	r2, #32
 80048a2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2220      	movs	r2, #32
 80048a8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2200      	movs	r2, #0
 80048ae:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2200      	movs	r2, #0
 80048b4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80048b8:	2300      	movs	r3, #0
}
 80048ba:	4618      	mov	r0, r3
 80048bc:	3710      	adds	r7, #16
 80048be:	46bd      	mov	sp, r7
 80048c0:	bd80      	pop	{r7, pc}

080048c2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80048c2:	b580      	push	{r7, lr}
 80048c4:	b09c      	sub	sp, #112	; 0x70
 80048c6:	af00      	add	r7, sp, #0
 80048c8:	60f8      	str	r0, [r7, #12]
 80048ca:	60b9      	str	r1, [r7, #8]
 80048cc:	603b      	str	r3, [r7, #0]
 80048ce:	4613      	mov	r3, r2
 80048d0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048d2:	e0a5      	b.n	8004a20 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80048d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048da:	f000 80a1 	beq.w	8004a20 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048de:	f7fc f9ed 	bl	8000cbc <HAL_GetTick>
 80048e2:	4602      	mov	r2, r0
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	1ad3      	subs	r3, r2, r3
 80048e8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80048ea:	429a      	cmp	r2, r3
 80048ec:	d302      	bcc.n	80048f4 <UART_WaitOnFlagUntilTimeout+0x32>
 80048ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d13e      	bne.n	8004972 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80048fc:	e853 3f00 	ldrex	r3, [r3]
 8004900:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004902:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004904:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004908:	667b      	str	r3, [r7, #100]	; 0x64
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	461a      	mov	r2, r3
 8004910:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004912:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004914:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004916:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004918:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800491a:	e841 2300 	strex	r3, r2, [r1]
 800491e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004920:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004922:	2b00      	cmp	r3, #0
 8004924:	d1e6      	bne.n	80048f4 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	3308      	adds	r3, #8
 800492c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800492e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004930:	e853 3f00 	ldrex	r3, [r3]
 8004934:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004938:	f023 0301 	bic.w	r3, r3, #1
 800493c:	663b      	str	r3, [r7, #96]	; 0x60
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	3308      	adds	r3, #8
 8004944:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004946:	64ba      	str	r2, [r7, #72]	; 0x48
 8004948:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800494a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800494c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800494e:	e841 2300 	strex	r3, r2, [r1]
 8004952:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004954:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004956:	2b00      	cmp	r3, #0
 8004958:	d1e5      	bne.n	8004926 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	2220      	movs	r2, #32
 800495e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	2220      	movs	r2, #32
 8004964:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	2200      	movs	r2, #0
 800496a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800496e:	2303      	movs	r3, #3
 8004970:	e067      	b.n	8004a42 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f003 0304 	and.w	r3, r3, #4
 800497c:	2b00      	cmp	r3, #0
 800497e:	d04f      	beq.n	8004a20 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	69db      	ldr	r3, [r3, #28]
 8004986:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800498a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800498e:	d147      	bne.n	8004a20 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004998:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049a2:	e853 3f00 	ldrex	r3, [r3]
 80049a6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80049a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049aa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80049ae:	66fb      	str	r3, [r7, #108]	; 0x6c
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	461a      	mov	r2, r3
 80049b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049b8:	637b      	str	r3, [r7, #52]	; 0x34
 80049ba:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049bc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80049be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80049c0:	e841 2300 	strex	r3, r2, [r1]
 80049c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80049c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d1e6      	bne.n	800499a <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	3308      	adds	r3, #8
 80049d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049d4:	697b      	ldr	r3, [r7, #20]
 80049d6:	e853 3f00 	ldrex	r3, [r3]
 80049da:	613b      	str	r3, [r7, #16]
   return(result);
 80049dc:	693b      	ldr	r3, [r7, #16]
 80049de:	f023 0301 	bic.w	r3, r3, #1
 80049e2:	66bb      	str	r3, [r7, #104]	; 0x68
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	3308      	adds	r3, #8
 80049ea:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80049ec:	623a      	str	r2, [r7, #32]
 80049ee:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049f0:	69f9      	ldr	r1, [r7, #28]
 80049f2:	6a3a      	ldr	r2, [r7, #32]
 80049f4:	e841 2300 	strex	r3, r2, [r1]
 80049f8:	61bb      	str	r3, [r7, #24]
   return(result);
 80049fa:	69bb      	ldr	r3, [r7, #24]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d1e5      	bne.n	80049cc <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	2220      	movs	r2, #32
 8004a04:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	2220      	movs	r2, #32
 8004a0a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	2220      	movs	r2, #32
 8004a10:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	2200      	movs	r2, #0
 8004a18:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004a1c:	2303      	movs	r3, #3
 8004a1e:	e010      	b.n	8004a42 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	69da      	ldr	r2, [r3, #28]
 8004a26:	68bb      	ldr	r3, [r7, #8]
 8004a28:	4013      	ands	r3, r2
 8004a2a:	68ba      	ldr	r2, [r7, #8]
 8004a2c:	429a      	cmp	r2, r3
 8004a2e:	bf0c      	ite	eq
 8004a30:	2301      	moveq	r3, #1
 8004a32:	2300      	movne	r3, #0
 8004a34:	b2db      	uxtb	r3, r3
 8004a36:	461a      	mov	r2, r3
 8004a38:	79fb      	ldrb	r3, [r7, #7]
 8004a3a:	429a      	cmp	r2, r3
 8004a3c:	f43f af4a 	beq.w	80048d4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004a40:	2300      	movs	r3, #0
}
 8004a42:	4618      	mov	r0, r3
 8004a44:	3770      	adds	r7, #112	; 0x70
 8004a46:	46bd      	mov	sp, r7
 8004a48:	bd80      	pop	{r7, pc}
	...

08004a4c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b096      	sub	sp, #88	; 0x58
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	60f8      	str	r0, [r7, #12]
 8004a54:	60b9      	str	r1, [r7, #8]
 8004a56:	4613      	mov	r3, r2
 8004a58:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	68ba      	ldr	r2, [r7, #8]
 8004a5e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	88fa      	ldrh	r2, [r7, #6]
 8004a64:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	2222      	movs	r2, #34	; 0x22
 8004a74:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d02b      	beq.n	8004ad6 <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a82:	4a40      	ldr	r2, [pc, #256]	; (8004b84 <UART_Start_Receive_DMA+0x138>)
 8004a84:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a8a:	4a3f      	ldr	r2, [pc, #252]	; (8004b88 <UART_Start_Receive_DMA+0x13c>)
 8004a8c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a92:	4a3e      	ldr	r2, [pc, #248]	; (8004b8c <UART_Start_Receive_DMA+0x140>)
 8004a94:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	3324      	adds	r3, #36	; 0x24
 8004aa8:	4619      	mov	r1, r3
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004aae:	461a      	mov	r2, r3
 8004ab0:	88fb      	ldrh	r3, [r7, #6]
 8004ab2:	f7fc fa89 	bl	8000fc8 <HAL_DMA_Start_IT>
 8004ab6:	4603      	mov	r3, r0
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d00c      	beq.n	8004ad6 <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	2210      	movs	r2, #16
 8004ac0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	2220      	movs	r2, #32
 8004ad0:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_ERROR;
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	e051      	b.n	8004b7a <UART_Start_Receive_DMA+0x12e>
    }
  }
  __HAL_UNLOCK(huart);
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ae4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ae6:	e853 3f00 	ldrex	r3, [r3]
 8004aea:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004aec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004af2:	657b      	str	r3, [r7, #84]	; 0x54
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	461a      	mov	r2, r3
 8004afa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004afc:	64bb      	str	r3, [r7, #72]	; 0x48
 8004afe:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b00:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004b02:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004b04:	e841 2300 	strex	r3, r2, [r1]
 8004b08:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004b0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d1e6      	bne.n	8004ade <UART_Start_Receive_DMA+0x92>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	3308      	adds	r3, #8
 8004b16:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b1a:	e853 3f00 	ldrex	r3, [r3]
 8004b1e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b22:	f043 0301 	orr.w	r3, r3, #1
 8004b26:	653b      	str	r3, [r7, #80]	; 0x50
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	3308      	adds	r3, #8
 8004b2e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004b30:	637a      	str	r2, [r7, #52]	; 0x34
 8004b32:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b34:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004b36:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004b38:	e841 2300 	strex	r3, r2, [r1]
 8004b3c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004b3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d1e5      	bne.n	8004b10 <UART_Start_Receive_DMA+0xc4>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	3308      	adds	r3, #8
 8004b4a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b4c:	697b      	ldr	r3, [r7, #20]
 8004b4e:	e853 3f00 	ldrex	r3, [r3]
 8004b52:	613b      	str	r3, [r7, #16]
   return(result);
 8004b54:	693b      	ldr	r3, [r7, #16]
 8004b56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004b5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	3308      	adds	r3, #8
 8004b62:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004b64:	623a      	str	r2, [r7, #32]
 8004b66:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b68:	69f9      	ldr	r1, [r7, #28]
 8004b6a:	6a3a      	ldr	r2, [r7, #32]
 8004b6c:	e841 2300 	strex	r3, r2, [r1]
 8004b70:	61bb      	str	r3, [r7, #24]
   return(result);
 8004b72:	69bb      	ldr	r3, [r7, #24]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d1e5      	bne.n	8004b44 <UART_Start_Receive_DMA+0xf8>

  return HAL_OK;
 8004b78:	2300      	movs	r3, #0
}
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	3758      	adds	r7, #88	; 0x58
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	bd80      	pop	{r7, pc}
 8004b82:	bf00      	nop
 8004b84:	08004ca3 	.word	0x08004ca3
 8004b88:	08004dc1 	.word	0x08004dc1
 8004b8c:	08004df9 	.word	0x08004df9

08004b90 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004b90:	b480      	push	{r7}
 8004b92:	b089      	sub	sp, #36	; 0x24
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	e853 3f00 	ldrex	r3, [r3]
 8004ba4:	60bb      	str	r3, [r7, #8]
   return(result);
 8004ba6:	68bb      	ldr	r3, [r7, #8]
 8004ba8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004bac:	61fb      	str	r3, [r7, #28]
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	461a      	mov	r2, r3
 8004bb4:	69fb      	ldr	r3, [r7, #28]
 8004bb6:	61bb      	str	r3, [r7, #24]
 8004bb8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bba:	6979      	ldr	r1, [r7, #20]
 8004bbc:	69ba      	ldr	r2, [r7, #24]
 8004bbe:	e841 2300 	strex	r3, r2, [r1]
 8004bc2:	613b      	str	r3, [r7, #16]
   return(result);
 8004bc4:	693b      	ldr	r3, [r7, #16]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d1e6      	bne.n	8004b98 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2220      	movs	r2, #32
 8004bce:	679a      	str	r2, [r3, #120]	; 0x78
}
 8004bd0:	bf00      	nop
 8004bd2:	3724      	adds	r7, #36	; 0x24
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bda:	4770      	bx	lr

08004bdc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004bdc:	b480      	push	{r7}
 8004bde:	b095      	sub	sp, #84	; 0x54
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bec:	e853 3f00 	ldrex	r3, [r3]
 8004bf0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bf4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004bf8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	461a      	mov	r2, r3
 8004c00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c02:	643b      	str	r3, [r7, #64]	; 0x40
 8004c04:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c06:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004c08:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004c0a:	e841 2300 	strex	r3, r2, [r1]
 8004c0e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004c10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d1e6      	bne.n	8004be4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	3308      	adds	r3, #8
 8004c1c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c1e:	6a3b      	ldr	r3, [r7, #32]
 8004c20:	e853 3f00 	ldrex	r3, [r3]
 8004c24:	61fb      	str	r3, [r7, #28]
   return(result);
 8004c26:	69fb      	ldr	r3, [r7, #28]
 8004c28:	f023 0301 	bic.w	r3, r3, #1
 8004c2c:	64bb      	str	r3, [r7, #72]	; 0x48
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	3308      	adds	r3, #8
 8004c34:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004c36:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004c38:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c3a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004c3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c3e:	e841 2300 	strex	r3, r2, [r1]
 8004c42:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d1e5      	bne.n	8004c16 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c4e:	2b01      	cmp	r3, #1
 8004c50:	d118      	bne.n	8004c84 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	e853 3f00 	ldrex	r3, [r3]
 8004c5e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004c60:	68bb      	ldr	r3, [r7, #8]
 8004c62:	f023 0310 	bic.w	r3, r3, #16
 8004c66:	647b      	str	r3, [r7, #68]	; 0x44
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	461a      	mov	r2, r3
 8004c6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c70:	61bb      	str	r3, [r7, #24]
 8004c72:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c74:	6979      	ldr	r1, [r7, #20]
 8004c76:	69ba      	ldr	r2, [r7, #24]
 8004c78:	e841 2300 	strex	r3, r2, [r1]
 8004c7c:	613b      	str	r3, [r7, #16]
   return(result);
 8004c7e:	693b      	ldr	r3, [r7, #16]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d1e6      	bne.n	8004c52 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2220      	movs	r2, #32
 8004c88:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2200      	movs	r2, #0
 8004c94:	665a      	str	r2, [r3, #100]	; 0x64
}
 8004c96:	bf00      	nop
 8004c98:	3754      	adds	r7, #84	; 0x54
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca0:	4770      	bx	lr

08004ca2 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004ca2:	b580      	push	{r7, lr}
 8004ca4:	b09c      	sub	sp, #112	; 0x70
 8004ca6:	af00      	add	r7, sp, #0
 8004ca8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cae:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	699b      	ldr	r3, [r3, #24]
 8004cb4:	2b20      	cmp	r3, #32
 8004cb6:	d070      	beq.n	8004d9a <UART_DMAReceiveCplt+0xf8>
  {
    huart->RxXferCount = 0U;
 8004cb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cba:	2200      	movs	r2, #0
 8004cbc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004cc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004cc8:	e853 3f00 	ldrex	r3, [r3]
 8004ccc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004cce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004cd0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004cd4:	66bb      	str	r3, [r7, #104]	; 0x68
 8004cd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	461a      	mov	r2, r3
 8004cdc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004cde:	65bb      	str	r3, [r7, #88]	; 0x58
 8004ce0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ce2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004ce4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004ce6:	e841 2300 	strex	r3, r2, [r1]
 8004cea:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004cec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d1e6      	bne.n	8004cc0 <UART_DMAReceiveCplt+0x1e>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cf2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	3308      	adds	r3, #8
 8004cf8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cfc:	e853 3f00 	ldrex	r3, [r3]
 8004d00:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004d02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d04:	f023 0301 	bic.w	r3, r3, #1
 8004d08:	667b      	str	r3, [r7, #100]	; 0x64
 8004d0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	3308      	adds	r3, #8
 8004d10:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004d12:	647a      	str	r2, [r7, #68]	; 0x44
 8004d14:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d16:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004d18:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004d1a:	e841 2300 	strex	r3, r2, [r1]
 8004d1e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004d20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d1e5      	bne.n	8004cf2 <UART_DMAReceiveCplt+0x50>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	3308      	adds	r3, #8
 8004d2c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d30:	e853 3f00 	ldrex	r3, [r3]
 8004d34:	623b      	str	r3, [r7, #32]
   return(result);
 8004d36:	6a3b      	ldr	r3, [r7, #32]
 8004d38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d3c:	663b      	str	r3, [r7, #96]	; 0x60
 8004d3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	3308      	adds	r3, #8
 8004d44:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004d46:	633a      	str	r2, [r7, #48]	; 0x30
 8004d48:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d4a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004d4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d4e:	e841 2300 	strex	r3, r2, [r1]
 8004d52:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d1e5      	bne.n	8004d26 <UART_DMAReceiveCplt+0x84>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004d5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d5c:	2220      	movs	r2, #32
 8004d5e:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d64:	2b01      	cmp	r3, #1
 8004d66:	d118      	bne.n	8004d9a <UART_DMAReceiveCplt+0xf8>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d6e:	693b      	ldr	r3, [r7, #16]
 8004d70:	e853 3f00 	ldrex	r3, [r3]
 8004d74:	60fb      	str	r3, [r7, #12]
   return(result);
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	f023 0310 	bic.w	r3, r3, #16
 8004d7c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004d7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	461a      	mov	r2, r3
 8004d84:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d86:	61fb      	str	r3, [r7, #28]
 8004d88:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d8a:	69b9      	ldr	r1, [r7, #24]
 8004d8c:	69fa      	ldr	r2, [r7, #28]
 8004d8e:	e841 2300 	strex	r3, r2, [r1]
 8004d92:	617b      	str	r3, [r7, #20]
   return(result);
 8004d94:	697b      	ldr	r3, [r7, #20]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d1e6      	bne.n	8004d68 <UART_DMAReceiveCplt+0xc6>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d9e:	2b01      	cmp	r3, #1
 8004da0:	d107      	bne.n	8004db2 <UART_DMAReceiveCplt+0x110>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004da2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004da4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004da8:	4619      	mov	r1, r3
 8004daa:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004dac:	f7ff fb5a 	bl	8004464 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004db0:	e002      	b.n	8004db8 <UART_DMAReceiveCplt+0x116>
    HAL_UART_RxCpltCallback(huart);
 8004db2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004db4:	f7fb fa22 	bl	80001fc <HAL_UART_RxCpltCallback>
}
 8004db8:	bf00      	nop
 8004dba:	3770      	adds	r7, #112	; 0x70
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	bd80      	pop	{r7, pc}

08004dc0 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b084      	sub	sp, #16
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dcc:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004dd2:	2b01      	cmp	r3, #1
 8004dd4:	d109      	bne.n	8004dea <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004ddc:	085b      	lsrs	r3, r3, #1
 8004dde:	b29b      	uxth	r3, r3
 8004de0:	4619      	mov	r1, r3
 8004de2:	68f8      	ldr	r0, [r7, #12]
 8004de4:	f7ff fb3e 	bl	8004464 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004de8:	e002      	b.n	8004df0 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 8004dea:	68f8      	ldr	r0, [r7, #12]
 8004dec:	f7ff fb26 	bl	800443c <HAL_UART_RxHalfCpltCallback>
}
 8004df0:	bf00      	nop
 8004df2:	3710      	adds	r7, #16
 8004df4:	46bd      	mov	sp, r7
 8004df6:	bd80      	pop	{r7, pc}

08004df8 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b086      	sub	sp, #24
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e04:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8004e06:	697b      	ldr	r3, [r7, #20]
 8004e08:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e0a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8004e0c:	697b      	ldr	r3, [r7, #20]
 8004e0e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e10:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8004e12:	697b      	ldr	r3, [r7, #20]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	689b      	ldr	r3, [r3, #8]
 8004e18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e1c:	2b80      	cmp	r3, #128	; 0x80
 8004e1e:	d109      	bne.n	8004e34 <UART_DMAError+0x3c>
 8004e20:	693b      	ldr	r3, [r7, #16]
 8004e22:	2b21      	cmp	r3, #33	; 0x21
 8004e24:	d106      	bne.n	8004e34 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8004e26:	697b      	ldr	r3, [r7, #20]
 8004e28:	2200      	movs	r2, #0
 8004e2a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8004e2e:	6978      	ldr	r0, [r7, #20]
 8004e30:	f7ff feae 	bl	8004b90 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8004e34:	697b      	ldr	r3, [r7, #20]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	689b      	ldr	r3, [r3, #8]
 8004e3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e3e:	2b40      	cmp	r3, #64	; 0x40
 8004e40:	d109      	bne.n	8004e56 <UART_DMAError+0x5e>
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	2b22      	cmp	r3, #34	; 0x22
 8004e46:	d106      	bne.n	8004e56 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8004e48:	697b      	ldr	r3, [r7, #20]
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8004e50:	6978      	ldr	r0, [r7, #20]
 8004e52:	f7ff fec3 	bl	8004bdc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004e56:	697b      	ldr	r3, [r7, #20]
 8004e58:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e5c:	f043 0210 	orr.w	r2, r3, #16
 8004e60:	697b      	ldr	r3, [r7, #20]
 8004e62:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004e66:	6978      	ldr	r0, [r7, #20]
 8004e68:	f7ff faf2 	bl	8004450 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004e6c:	bf00      	nop
 8004e6e:	3718      	adds	r7, #24
 8004e70:	46bd      	mov	sp, r7
 8004e72:	bd80      	pop	{r7, pc}

08004e74 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b084      	sub	sp, #16
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e80:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	2200      	movs	r2, #0
 8004e86:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004e92:	68f8      	ldr	r0, [r7, #12]
 8004e94:	f7ff fadc 	bl	8004450 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004e98:	bf00      	nop
 8004e9a:	3710      	adds	r7, #16
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	bd80      	pop	{r7, pc}

08004ea0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b088      	sub	sp, #32
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	e853 3f00 	ldrex	r3, [r3]
 8004eb4:	60bb      	str	r3, [r7, #8]
   return(result);
 8004eb6:	68bb      	ldr	r3, [r7, #8]
 8004eb8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ebc:	61fb      	str	r3, [r7, #28]
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	461a      	mov	r2, r3
 8004ec4:	69fb      	ldr	r3, [r7, #28]
 8004ec6:	61bb      	str	r3, [r7, #24]
 8004ec8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eca:	6979      	ldr	r1, [r7, #20]
 8004ecc:	69ba      	ldr	r2, [r7, #24]
 8004ece:	e841 2300 	strex	r3, r2, [r1]
 8004ed2:	613b      	str	r3, [r7, #16]
   return(result);
 8004ed4:	693b      	ldr	r3, [r7, #16]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d1e6      	bne.n	8004ea8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2220      	movs	r2, #32
 8004ede:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004ee6:	6878      	ldr	r0, [r7, #4]
 8004ee8:	f7ff fa9e 	bl	8004428 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004eec:	bf00      	nop
 8004eee:	3720      	adds	r7, #32
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	bd80      	pop	{r7, pc}

08004ef4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004ef4:	b480      	push	{r7}
 8004ef6:	b083      	sub	sp, #12
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004efc:	bf00      	nop
 8004efe:	370c      	adds	r7, #12
 8004f00:	46bd      	mov	sp, r7
 8004f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f06:	4770      	bx	lr

08004f08 <__libc_init_array>:
 8004f08:	b570      	push	{r4, r5, r6, lr}
 8004f0a:	4e0d      	ldr	r6, [pc, #52]	; (8004f40 <__libc_init_array+0x38>)
 8004f0c:	4c0d      	ldr	r4, [pc, #52]	; (8004f44 <__libc_init_array+0x3c>)
 8004f0e:	1ba4      	subs	r4, r4, r6
 8004f10:	10a4      	asrs	r4, r4, #2
 8004f12:	2500      	movs	r5, #0
 8004f14:	42a5      	cmp	r5, r4
 8004f16:	d109      	bne.n	8004f2c <__libc_init_array+0x24>
 8004f18:	4e0b      	ldr	r6, [pc, #44]	; (8004f48 <__libc_init_array+0x40>)
 8004f1a:	4c0c      	ldr	r4, [pc, #48]	; (8004f4c <__libc_init_array+0x44>)
 8004f1c:	f000 f820 	bl	8004f60 <_init>
 8004f20:	1ba4      	subs	r4, r4, r6
 8004f22:	10a4      	asrs	r4, r4, #2
 8004f24:	2500      	movs	r5, #0
 8004f26:	42a5      	cmp	r5, r4
 8004f28:	d105      	bne.n	8004f36 <__libc_init_array+0x2e>
 8004f2a:	bd70      	pop	{r4, r5, r6, pc}
 8004f2c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004f30:	4798      	blx	r3
 8004f32:	3501      	adds	r5, #1
 8004f34:	e7ee      	b.n	8004f14 <__libc_init_array+0xc>
 8004f36:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004f3a:	4798      	blx	r3
 8004f3c:	3501      	adds	r5, #1
 8004f3e:	e7f2      	b.n	8004f26 <__libc_init_array+0x1e>
 8004f40:	08004fb0 	.word	0x08004fb0
 8004f44:	08004fb0 	.word	0x08004fb0
 8004f48:	08004fb0 	.word	0x08004fb0
 8004f4c:	08004fb4 	.word	0x08004fb4

08004f50 <memset>:
 8004f50:	4402      	add	r2, r0
 8004f52:	4603      	mov	r3, r0
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d100      	bne.n	8004f5a <memset+0xa>
 8004f58:	4770      	bx	lr
 8004f5a:	f803 1b01 	strb.w	r1, [r3], #1
 8004f5e:	e7f9      	b.n	8004f54 <memset+0x4>

08004f60 <_init>:
 8004f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f62:	bf00      	nop
 8004f64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f66:	bc08      	pop	{r3}
 8004f68:	469e      	mov	lr, r3
 8004f6a:	4770      	bx	lr

08004f6c <_fini>:
 8004f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f6e:	bf00      	nop
 8004f70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f72:	bc08      	pop	{r3}
 8004f74:	469e      	mov	lr, r3
 8004f76:	4770      	bx	lr
