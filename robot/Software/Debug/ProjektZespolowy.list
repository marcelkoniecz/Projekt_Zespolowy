
ProjektZespolowy.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000062e8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  08006478  08006478  00016478  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006550  08006550  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08006550  08006550  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006550  08006550  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006550  08006550  00016550  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006554  08006554  00016554  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006558  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000022c  20000074  080065cc  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002a0  080065cc  000202a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012bc5  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000023f2  00000000  00000000  00032c69  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e30  00000000  00000000  00035060  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d48  00000000  00000000  00035e90  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001cbf4  00000000  00000000  00036bd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d361  00000000  00000000  000537cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000a6259  00000000  00000000  00060b2d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00106d86  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004358  00000000  00000000  00106e04  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006460 	.word	0x08006460

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08006460 	.word	0x08006460

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <_write>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len) {
 8000270:	b580      	push	{r7, lr}
 8000272:	b084      	sub	sp, #16
 8000274:	af00      	add	r7, sp, #0
 8000276:	60f8      	str	r0, [r7, #12]
 8000278:	60b9      	str	r1, [r7, #8]
 800027a:	607a      	str	r2, [r7, #4]

	HAL_UART_Transmit(&huart2, (uint8_t*) ptr, len, 50);
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	b29a      	uxth	r2, r3
 8000280:	2332      	movs	r3, #50	; 0x32
 8000282:	68b9      	ldr	r1, [r7, #8]
 8000284:	4803      	ldr	r0, [pc, #12]	; (8000294 <_write+0x24>)
 8000286:	f003 fedf 	bl	8004048 <HAL_UART_Transmit>
	return len;
 800028a:	687b      	ldr	r3, [r7, #4]
}
 800028c:	4618      	mov	r0, r3
 800028e:	3710      	adds	r7, #16
 8000290:	46bd      	mov	sp, r7
 8000292:	bd80      	pop	{r7, pc}
 8000294:	20000214 	.word	0x20000214

08000298 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000298:	b480      	push	{r7}
 800029a:	b083      	sub	sp, #12
 800029c:	af00      	add	r7, sp, #0
 800029e:	4603      	mov	r3, r0
 80002a0:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == LeftSensor_Pin || GPIO_Pin == CenterSensor_Pin
 80002a2:	88fb      	ldrh	r3, [r7, #6]
 80002a4:	2b01      	cmp	r3, #1
 80002a6:	d005      	beq.n	80002b4 <HAL_GPIO_EXTI_Callback+0x1c>
 80002a8:	88fb      	ldrh	r3, [r7, #6]
 80002aa:	2b20      	cmp	r3, #32
 80002ac:	d002      	beq.n	80002b4 <HAL_GPIO_EXTI_Callback+0x1c>
			|| GPIO_Pin == RightSensor_Pin) {
 80002ae:	88fb      	ldrh	r3, [r7, #6]
 80002b0:	2b10      	cmp	r3, #16
 80002b2:	d102      	bne.n	80002ba <HAL_GPIO_EXTI_Callback+0x22>
		interruptFlag = 1;
 80002b4:	4b04      	ldr	r3, [pc, #16]	; (80002c8 <HAL_GPIO_EXTI_Callback+0x30>)
 80002b6:	2201      	movs	r2, #1
 80002b8:	601a      	str	r2, [r3, #0]
	}
}
 80002ba:	bf00      	nop
 80002bc:	370c      	adds	r7, #12
 80002be:	46bd      	mov	sp, r7
 80002c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c4:	4770      	bx	lr
 80002c6:	bf00      	nop
 80002c8:	20000090 	.word	0x20000090

080002cc <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80002cc:	b580      	push	{r7, lr}
 80002ce:	b082      	sub	sp, #8
 80002d0:	af00      	add	r7, sp, #0
 80002d2:	6078      	str	r0, [r7, #4]
	if (huart->Instance == huart1.Instance) {
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	681a      	ldr	r2, [r3, #0]
 80002d8:	4b0b      	ldr	r3, [pc, #44]	; (8000308 <HAL_UART_RxCpltCallback+0x3c>)
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	429a      	cmp	r2, r3
 80002de:	d10e      	bne.n	80002fe <HAL_UART_RxCpltCallback+0x32>
		interruptFlagUART = 1;
 80002e0:	4b0a      	ldr	r3, [pc, #40]	; (800030c <HAL_UART_RxCpltCallback+0x40>)
 80002e2:	2201      	movs	r2, #1
 80002e4:	601a      	str	r2, [r3, #0]
		direct = RX_BUFFER[0];
 80002e6:	4b0a      	ldr	r3, [pc, #40]	; (8000310 <HAL_UART_RxCpltCallback+0x44>)
 80002e8:	781a      	ldrb	r2, [r3, #0]
 80002ea:	4b0a      	ldr	r3, [pc, #40]	; (8000314 <HAL_UART_RxCpltCallback+0x48>)
 80002ec:	701a      	strb	r2, [r3, #0]
//		speed = atoi((char*)&RX_BUFFER[2]);
		speed = 200;
 80002ee:	4b0a      	ldr	r3, [pc, #40]	; (8000318 <HAL_UART_RxCpltCallback+0x4c>)
 80002f0:	22c8      	movs	r2, #200	; 0xc8
 80002f2:	601a      	str	r2, [r3, #0]

		HAL_UART_Receive_DMA(&huart1, RX_BUFFER, BUFFER_LEN);
 80002f4:	2201      	movs	r2, #1
 80002f6:	4906      	ldr	r1, [pc, #24]	; (8000310 <HAL_UART_RxCpltCallback+0x44>)
 80002f8:	4803      	ldr	r0, [pc, #12]	; (8000308 <HAL_UART_RxCpltCallback+0x3c>)
 80002fa:	f003 ff39 	bl	8004170 <HAL_UART_Receive_DMA>
	}
}
 80002fe:	bf00      	nop
 8000300:	3708      	adds	r7, #8
 8000302:	46bd      	mov	sp, r7
 8000304:	bd80      	pop	{r7, pc}
 8000306:	bf00      	nop
 8000308:	20000144 	.word	0x20000144
 800030c:	20000094 	.word	0x20000094
 8000310:	200000a0 	.word	0x200000a0
 8000314:	2000009c 	.word	0x2000009c
 8000318:	20000000 	.word	0x20000000

0800031c <MotorControler>:

void MotorControler(uint Motor_AIN1, uint Motor_AIN2, uint Motor_BIN1,
		uint Motor_BIN2, int PWMA, int PWMB) {
 800031c:	b580      	push	{r7, lr}
 800031e:	b084      	sub	sp, #16
 8000320:	af00      	add	r7, sp, #0
 8000322:	60f8      	str	r0, [r7, #12]
 8000324:	60b9      	str	r1, [r7, #8]
 8000326:	607a      	str	r2, [r7, #4]
 8000328:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(MotorSTBY_GPIO_Port, MotorSTBY_Pin, GPIO_PIN_SET);
 800032a:	2201      	movs	r2, #1
 800032c:	2102      	movs	r1, #2
 800032e:	4816      	ldr	r0, [pc, #88]	; (8000388 <MotorControler+0x6c>)
 8000330:	f001 fb6e 	bl	8001a10 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MotorAIN2_GPIO_Port, MotorAIN2_Pin, Motor_AIN2);
 8000334:	68bb      	ldr	r3, [r7, #8]
 8000336:	b2db      	uxtb	r3, r3
 8000338:	461a      	mov	r2, r3
 800033a:	2101      	movs	r1, #1
 800033c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000340:	f001 fb66 	bl	8001a10 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MotorAIN1_GPIO_Port, MotorAIN1_Pin, Motor_AIN1);
 8000344:	68fb      	ldr	r3, [r7, #12]
 8000346:	b2db      	uxtb	r3, r3
 8000348:	461a      	mov	r2, r3
 800034a:	2102      	movs	r1, #2
 800034c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000350:	f001 fb5e 	bl	8001a10 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MotorBN2_GPIO_Port, MotorBN2_Pin, Motor_BIN2);
 8000354:	683b      	ldr	r3, [r7, #0]
 8000356:	b2db      	uxtb	r3, r3
 8000358:	461a      	mov	r2, r3
 800035a:	2140      	movs	r1, #64	; 0x40
 800035c:	480a      	ldr	r0, [pc, #40]	; (8000388 <MotorControler+0x6c>)
 800035e:	f001 fb57 	bl	8001a10 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MotorBN1_GPIO_Port, MotorBN1_Pin, Motor_BIN1);
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	b2db      	uxtb	r3, r3
 8000366:	461a      	mov	r2, r3
 8000368:	2180      	movs	r1, #128	; 0x80
 800036a:	4807      	ldr	r0, [pc, #28]	; (8000388 <MotorControler+0x6c>)
 800036c:	f001 fb50 	bl	8001a10 <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, PWMA);
 8000370:	4b06      	ldr	r3, [pc, #24]	; (800038c <MotorControler+0x70>)
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	69ba      	ldr	r2, [r7, #24]
 8000376:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, PWMB);
 8000378:	4b04      	ldr	r3, [pc, #16]	; (800038c <MotorControler+0x70>)
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	69fa      	ldr	r2, [r7, #28]
 800037e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000380:	bf00      	nop
 8000382:	3710      	adds	r7, #16
 8000384:	46bd      	mov	sp, r7
 8000386:	bd80      	pop	{r7, pc}
 8000388:	48000400 	.word	0x48000400
 800038c:	200001c8 	.word	0x200001c8

08000390 <checkLeftObstacle>:

int checkLeftObstacle() {
 8000390:	b580      	push	{r7, lr}
 8000392:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(LeftSensor_GPIO_Port, LeftSensor_Pin) == 1;
 8000394:	2101      	movs	r1, #1
 8000396:	4805      	ldr	r0, [pc, #20]	; (80003ac <checkLeftObstacle+0x1c>)
 8000398:	f001 fb22 	bl	80019e0 <HAL_GPIO_ReadPin>
 800039c:	4603      	mov	r3, r0
 800039e:	2b01      	cmp	r3, #1
 80003a0:	bf0c      	ite	eq
 80003a2:	2301      	moveq	r3, #1
 80003a4:	2300      	movne	r3, #0
 80003a6:	b2db      	uxtb	r3, r3
}
 80003a8:	4618      	mov	r0, r3
 80003aa:	bd80      	pop	{r7, pc}
 80003ac:	48000400 	.word	0x48000400

080003b0 <checkRightObstacle>:

int checkRightObstacle() {
 80003b0:	b580      	push	{r7, lr}
 80003b2:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(RightSensor_GPIO_Port, RightSensor_Pin) == 1;
 80003b4:	2110      	movs	r1, #16
 80003b6:	4805      	ldr	r0, [pc, #20]	; (80003cc <checkRightObstacle+0x1c>)
 80003b8:	f001 fb12 	bl	80019e0 <HAL_GPIO_ReadPin>
 80003bc:	4603      	mov	r3, r0
 80003be:	2b01      	cmp	r3, #1
 80003c0:	bf0c      	ite	eq
 80003c2:	2301      	moveq	r3, #1
 80003c4:	2300      	movne	r3, #0
 80003c6:	b2db      	uxtb	r3, r3

}
 80003c8:	4618      	mov	r0, r3
 80003ca:	bd80      	pop	{r7, pc}
 80003cc:	48000400 	.word	0x48000400

080003d0 <checkCenterObstacle>:

int checkCenterObstacle() {
 80003d0:	b580      	push	{r7, lr}
 80003d2:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(CenterSensor_GPIO_Port, CenterSensor_Pin) == 1;
 80003d4:	2120      	movs	r1, #32
 80003d6:	4805      	ldr	r0, [pc, #20]	; (80003ec <checkCenterObstacle+0x1c>)
 80003d8:	f001 fb02 	bl	80019e0 <HAL_GPIO_ReadPin>
 80003dc:	4603      	mov	r3, r0
 80003de:	2b01      	cmp	r3, #1
 80003e0:	bf0c      	ite	eq
 80003e2:	2301      	moveq	r3, #1
 80003e4:	2300      	movne	r3, #0
 80003e6:	b2db      	uxtb	r3, r3

}
 80003e8:	4618      	mov	r0, r3
 80003ea:	bd80      	pop	{r7, pc}
 80003ec:	48000400 	.word	0x48000400

080003f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	b086      	sub	sp, #24
 80003f4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003f6:	f000 fdd9 	bl	8000fac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003fa:	f000 f8f1 	bl	80005e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003fe:	f000 fab1 	bl	8000964 <MX_GPIO_Init>
  MX_DMA_Init();
 8000402:	f000 fa91 	bl	8000928 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000406:	f000 fa5f 	bl	80008c8 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 800040a:	f000 f93f 	bl	800068c <MX_TIM1_Init>
  MX_USART1_UART_Init();
 800040e:	f000 fa2b 	bl	8000868 <MX_USART1_UART_Init>
  MX_TIM6_Init();
 8000412:	f000 f9f3 	bl	80007fc <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pwm_duty);
 8000416:	4b67      	ldr	r3, [pc, #412]	; (80005b4 <main+0x1c4>)
 8000418:	681a      	ldr	r2, [r3, #0]
 800041a:	4b67      	ldr	r3, [pc, #412]	; (80005b8 <main+0x1c8>)
 800041c:	681b      	ldr	r3, [r3, #0]
 800041e:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, pwm_duty);
 8000420:	4b64      	ldr	r3, [pc, #400]	; (80005b4 <main+0x1c4>)
 8000422:	681a      	ldr	r2, [r3, #0]
 8000424:	4b64      	ldr	r3, [pc, #400]	; (80005b8 <main+0x1c8>)
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800042a:	2100      	movs	r1, #0
 800042c:	4862      	ldr	r0, [pc, #392]	; (80005b8 <main+0x1c8>)
 800042e:	f002 fe3b 	bl	80030a8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8000432:	210c      	movs	r1, #12
 8000434:	4860      	ldr	r0, [pc, #384]	; (80005b8 <main+0x1c8>)
 8000436:	f002 fe37 	bl	80030a8 <HAL_TIM_PWM_Start>
	HAL_GPIO_WritePin(BT_Enable_GPIO_Port, BT_Enable_Pin, GPIO_PIN_RESET);
 800043a:	2200      	movs	r2, #0
 800043c:	2180      	movs	r1, #128	; 0x80
 800043e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000442:	f001 fae5 	bl	8001a10 <HAL_GPIO_WritePin>
	HAL_UART_Receive_DMA(&huart1, RX_BUFFER, BUFFER_LEN);
 8000446:	2201      	movs	r2, #1
 8000448:	495c      	ldr	r1, [pc, #368]	; (80005bc <main+0x1cc>)
 800044a:	485d      	ldr	r0, [pc, #372]	; (80005c0 <main+0x1d0>)
 800044c:	f003 fe90 	bl	8004170 <HAL_UART_Receive_DMA>
	while (1) {
//		ds18b20_start_measure(NULL);
//		HAL_Delay(10);
//		temp = ds18b20_get_temp(NULL);

		if (interruptFlag == 1) {
 8000450:	4b5c      	ldr	r3, [pc, #368]	; (80005c4 <main+0x1d4>)
 8000452:	681b      	ldr	r3, [r3, #0]
 8000454:	2b01      	cmp	r3, #1
 8000456:	d120      	bne.n	800049a <main+0xaa>
			HAL_Delay(10);
 8000458:	200a      	movs	r0, #10
 800045a:	f000 fe0d 	bl	8001078 <HAL_Delay>
			HAL_GPIO_ReadPin(LeftSensor_GPIO_Port, LeftSensor_Pin);
 800045e:	2101      	movs	r1, #1
 8000460:	4859      	ldr	r0, [pc, #356]	; (80005c8 <main+0x1d8>)
 8000462:	f001 fabd 	bl	80019e0 <HAL_GPIO_ReadPin>
			HAL_GPIO_ReadPin(CenterSensor_GPIO_Port, CenterSensor_Pin);
 8000466:	2120      	movs	r1, #32
 8000468:	4857      	ldr	r0, [pc, #348]	; (80005c8 <main+0x1d8>)
 800046a:	f001 fab9 	bl	80019e0 <HAL_GPIO_ReadPin>
			HAL_GPIO_ReadPin(RightSensor_GPIO_Port, RightSensor_Pin);
 800046e:	2110      	movs	r1, #16
 8000470:	4855      	ldr	r0, [pc, #340]	; (80005c8 <main+0x1d8>)
 8000472:	f001 fab5 	bl	80019e0 <HAL_GPIO_ReadPin>
			if (direct == '4') {
 8000476:	4b55      	ldr	r3, [pc, #340]	; (80005cc <main+0x1dc>)
 8000478:	781b      	ldrb	r3, [r3, #0]
 800047a:	b2db      	uxtb	r3, r3
 800047c:	2b34      	cmp	r3, #52	; 0x34
 800047e:	d109      	bne.n	8000494 <main+0xa4>
				MotorControler(0, 0, 0, 0, 0, 0);
 8000480:	2300      	movs	r3, #0
 8000482:	9301      	str	r3, [sp, #4]
 8000484:	2300      	movs	r3, #0
 8000486:	9300      	str	r3, [sp, #0]
 8000488:	2300      	movs	r3, #0
 800048a:	2200      	movs	r2, #0
 800048c:	2100      	movs	r1, #0
 800048e:	2000      	movs	r0, #0
 8000490:	f7ff ff44 	bl	800031c <MotorControler>
			}
			interruptFlag = 0;
 8000494:	4b4b      	ldr	r3, [pc, #300]	; (80005c4 <main+0x1d4>)
 8000496:	2200      	movs	r2, #0
 8000498:	601a      	str	r2, [r3, #0]

		}

		if (interruptFlagUART == 1) {
 800049a:	4b4d      	ldr	r3, [pc, #308]	; (80005d0 <main+0x1e0>)
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	2b01      	cmp	r3, #1
 80004a0:	f040 8083 	bne.w	80005aa <main+0x1ba>
			interruptFlagUART = 0;
 80004a4:	4b4a      	ldr	r3, [pc, #296]	; (80005d0 <main+0x1e0>)
 80004a6:	2200      	movs	r2, #0
 80004a8:	601a      	str	r2, [r3, #0]

			HAL_UART_Transmit(&huart2, (uint8_t*) &direct, 1, 100);
 80004aa:	2364      	movs	r3, #100	; 0x64
 80004ac:	2201      	movs	r2, #1
 80004ae:	4947      	ldr	r1, [pc, #284]	; (80005cc <main+0x1dc>)
 80004b0:	4848      	ldr	r0, [pc, #288]	; (80005d4 <main+0x1e4>)
 80004b2:	f003 fdc9 	bl	8004048 <HAL_UART_Transmit>
			char str[10];
			sprintf(str, " %d\r\n", speed);
 80004b6:	4b48      	ldr	r3, [pc, #288]	; (80005d8 <main+0x1e8>)
 80004b8:	681a      	ldr	r2, [r3, #0]
 80004ba:	1d3b      	adds	r3, r7, #4
 80004bc:	4947      	ldr	r1, [pc, #284]	; (80005dc <main+0x1ec>)
 80004be:	4618      	mov	r0, r3
 80004c0:	f004 ff3e 	bl	8005340 <siprintf>
			printf(str);
 80004c4:	1d3b      	adds	r3, r7, #4
 80004c6:	4618      	mov	r0, r3
 80004c8:	f004 ff22 	bl	8005310 <iprintf>

			if (speed < 999 && speed >= 0) {
 80004cc:	4b42      	ldr	r3, [pc, #264]	; (80005d8 <main+0x1e8>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	f240 32e6 	movw	r2, #998	; 0x3e6
 80004d4:	4293      	cmp	r3, r2
 80004d6:	d865      	bhi.n	80005a4 <main+0x1b4>
 80004d8:	4b3f      	ldr	r3, [pc, #252]	; (80005d8 <main+0x1e8>)
 80004da:	681b      	ldr	r3, [r3, #0]
				switch (direct) {
 80004dc:	4b3b      	ldr	r3, [pc, #236]	; (80005cc <main+0x1dc>)
 80004de:	781b      	ldrb	r3, [r3, #0]
 80004e0:	b2db      	uxtb	r3, r3
 80004e2:	3b30      	subs	r3, #48	; 0x30
 80004e4:	2b04      	cmp	r3, #4
 80004e6:	d85f      	bhi.n	80005a8 <main+0x1b8>
 80004e8:	a201      	add	r2, pc, #4	; (adr r2, 80004f0 <main+0x100>)
 80004ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004ee:	bf00      	nop
 80004f0:	08000505 	.word	0x08000505
 80004f4:	0800051b 	.word	0x0800051b
 80004f8:	08000533 	.word	0x08000533
 80004fc:	0800054f 	.word	0x0800054f
 8000500:	08000569 	.word	0x08000569
				case '0':
					MotorControler(0, 0, 0, 0, 0, 0);
 8000504:	2300      	movs	r3, #0
 8000506:	9301      	str	r3, [sp, #4]
 8000508:	2300      	movs	r3, #0
 800050a:	9300      	str	r3, [sp, #0]
 800050c:	2300      	movs	r3, #0
 800050e:	2200      	movs	r2, #0
 8000510:	2100      	movs	r1, #0
 8000512:	2000      	movs	r0, #0
 8000514:	f7ff ff02 	bl	800031c <MotorControler>
					break;
 8000518:	e047      	b.n	80005aa <main+0x1ba>
				case '1':
					MotorControler(0, 0, 1, 0, 0, speed);
 800051a:	4b2f      	ldr	r3, [pc, #188]	; (80005d8 <main+0x1e8>)
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	9301      	str	r3, [sp, #4]
 8000520:	2300      	movs	r3, #0
 8000522:	9300      	str	r3, [sp, #0]
 8000524:	2300      	movs	r3, #0
 8000526:	2201      	movs	r2, #1
 8000528:	2100      	movs	r1, #0
 800052a:	2000      	movs	r0, #0
 800052c:	f7ff fef6 	bl	800031c <MotorControler>
					break;
 8000530:	e03b      	b.n	80005aa <main+0x1ba>
				case '2':
					MotorControler(0, 1, 0, 1, speed, speed);
 8000532:	4b29      	ldr	r3, [pc, #164]	; (80005d8 <main+0x1e8>)
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	461a      	mov	r2, r3
 8000538:	4b27      	ldr	r3, [pc, #156]	; (80005d8 <main+0x1e8>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	9301      	str	r3, [sp, #4]
 800053e:	9200      	str	r2, [sp, #0]
 8000540:	2301      	movs	r3, #1
 8000542:	2200      	movs	r2, #0
 8000544:	2101      	movs	r1, #1
 8000546:	2000      	movs	r0, #0
 8000548:	f7ff fee8 	bl	800031c <MotorControler>
					break;
 800054c:	e02d      	b.n	80005aa <main+0x1ba>
				case '3':
					MotorControler(1, 0, 0, 0, speed, 0);
 800054e:	4b22      	ldr	r3, [pc, #136]	; (80005d8 <main+0x1e8>)
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	461a      	mov	r2, r3
 8000554:	2300      	movs	r3, #0
 8000556:	9301      	str	r3, [sp, #4]
 8000558:	9200      	str	r2, [sp, #0]
 800055a:	2300      	movs	r3, #0
 800055c:	2200      	movs	r2, #0
 800055e:	2100      	movs	r1, #0
 8000560:	2001      	movs	r0, #1
 8000562:	f7ff fedb 	bl	800031c <MotorControler>
					break;
 8000566:	e020      	b.n	80005aa <main+0x1ba>
				case '4':
					if (checkCenterObstacle() && checkLeftObstacle() && checkRightObstacle()) {
 8000568:	f7ff ff32 	bl	80003d0 <checkCenterObstacle>
 800056c:	4603      	mov	r3, r0
 800056e:	2b00      	cmp	r3, #0
 8000570:	d01a      	beq.n	80005a8 <main+0x1b8>
 8000572:	f7ff ff0d 	bl	8000390 <checkLeftObstacle>
 8000576:	4603      	mov	r3, r0
 8000578:	2b00      	cmp	r3, #0
 800057a:	d015      	beq.n	80005a8 <main+0x1b8>
 800057c:	f7ff ff18 	bl	80003b0 <checkRightObstacle>
 8000580:	4603      	mov	r3, r0
 8000582:	2b00      	cmp	r3, #0
 8000584:	d010      	beq.n	80005a8 <main+0x1b8>
						MotorControler(1, 0, 1, 0, speed, speed);
 8000586:	4b14      	ldr	r3, [pc, #80]	; (80005d8 <main+0x1e8>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	461a      	mov	r2, r3
 800058c:	4b12      	ldr	r3, [pc, #72]	; (80005d8 <main+0x1e8>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	9301      	str	r3, [sp, #4]
 8000592:	9200      	str	r2, [sp, #0]
 8000594:	2300      	movs	r3, #0
 8000596:	2201      	movs	r2, #1
 8000598:	2100      	movs	r1, #0
 800059a:	2001      	movs	r0, #1
 800059c:	f7ff febe 	bl	800031c <MotorControler>
					}
				default:
					break;
 80005a0:	bf00      	nop
 80005a2:	e001      	b.n	80005a8 <main+0x1b8>
				}
			}
 80005a4:	bf00      	nop
 80005a6:	e000      	b.n	80005aa <main+0x1ba>
					break;
 80005a8:	bf00      	nop
//		} else {
//			TX_BUFFER = 1;
//		}
//		HAL_UART_Transmit(&huart1, &TX_BUFFER, 1, 100);

		HAL_Delay(10);
 80005aa:	200a      	movs	r0, #10
 80005ac:	f000 fd64 	bl	8001078 <HAL_Delay>
		if (interruptFlag == 1) {
 80005b0:	e74e      	b.n	8000450 <main+0x60>
 80005b2:	bf00      	nop
 80005b4:	20000098 	.word	0x20000098
 80005b8:	200001c8 	.word	0x200001c8
 80005bc:	200000a0 	.word	0x200000a0
 80005c0:	20000144 	.word	0x20000144
 80005c4:	20000090 	.word	0x20000090
 80005c8:	48000400 	.word	0x48000400
 80005cc:	2000009c 	.word	0x2000009c
 80005d0:	20000094 	.word	0x20000094
 80005d4:	20000214 	.word	0x20000214
 80005d8:	20000000 	.word	0x20000000
 80005dc:	08006478 	.word	0x08006478

080005e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b096      	sub	sp, #88	; 0x58
 80005e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005e6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80005ea:	2228      	movs	r2, #40	; 0x28
 80005ec:	2100      	movs	r1, #0
 80005ee:	4618      	mov	r0, r3
 80005f0:	f004 fe86 	bl	8005300 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f4:	f107 031c 	add.w	r3, r7, #28
 80005f8:	2200      	movs	r2, #0
 80005fa:	601a      	str	r2, [r3, #0]
 80005fc:	605a      	str	r2, [r3, #4]
 80005fe:	609a      	str	r2, [r3, #8]
 8000600:	60da      	str	r2, [r3, #12]
 8000602:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000604:	1d3b      	adds	r3, r7, #4
 8000606:	2200      	movs	r2, #0
 8000608:	601a      	str	r2, [r3, #0]
 800060a:	605a      	str	r2, [r3, #4]
 800060c:	609a      	str	r2, [r3, #8]
 800060e:	60da      	str	r2, [r3, #12]
 8000610:	611a      	str	r2, [r3, #16]
 8000612:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000614:	2302      	movs	r3, #2
 8000616:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000618:	2301      	movs	r3, #1
 800061a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800061c:	2310      	movs	r3, #16
 800061e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000620:	2300      	movs	r3, #0
 8000622:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000624:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000628:	4618      	mov	r0, r3
 800062a:	f001 fa21 	bl	8001a70 <HAL_RCC_OscConfig>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d001      	beq.n	8000638 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000634:	f000 fa4c 	bl	8000ad0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000638:	230f      	movs	r3, #15
 800063a:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800063c:	2300      	movs	r3, #0
 800063e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000640:	2300      	movs	r3, #0
 8000642:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000644:	2300      	movs	r3, #0
 8000646:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000648:	2300      	movs	r3, #0
 800064a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800064c:	f107 031c 	add.w	r3, r7, #28
 8000650:	2100      	movs	r1, #0
 8000652:	4618      	mov	r0, r3
 8000654:	f002 f914 	bl	8002880 <HAL_RCC_ClockConfig>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800065e:	f000 fa37 	bl	8000ad0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_TIM1;
 8000662:	f241 0301 	movw	r3, #4097	; 0x1001
 8000666:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000668:	2300      	movs	r3, #0
 800066a:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 800066c:	2300      	movs	r3, #0
 800066e:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000670:	1d3b      	adds	r3, r7, #4
 8000672:	4618      	mov	r0, r3
 8000674:	f002 fb3a 	bl	8002cec <HAL_RCCEx_PeriphCLKConfig>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800067e:	f000 fa27 	bl	8000ad0 <Error_Handler>
  }
}
 8000682:	bf00      	nop
 8000684:	3758      	adds	r7, #88	; 0x58
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}
	...

0800068c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b09a      	sub	sp, #104	; 0x68
 8000690:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000692:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000696:	2200      	movs	r2, #0
 8000698:	601a      	str	r2, [r3, #0]
 800069a:	605a      	str	r2, [r3, #4]
 800069c:	609a      	str	r2, [r3, #8]
 800069e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006a0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80006a4:	2200      	movs	r2, #0
 80006a6:	601a      	str	r2, [r3, #0]
 80006a8:	605a      	str	r2, [r3, #4]
 80006aa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006ac:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80006b0:	2200      	movs	r2, #0
 80006b2:	601a      	str	r2, [r3, #0]
 80006b4:	605a      	str	r2, [r3, #4]
 80006b6:	609a      	str	r2, [r3, #8]
 80006b8:	60da      	str	r2, [r3, #12]
 80006ba:	611a      	str	r2, [r3, #16]
 80006bc:	615a      	str	r2, [r3, #20]
 80006be:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80006c0:	1d3b      	adds	r3, r7, #4
 80006c2:	222c      	movs	r2, #44	; 0x2c
 80006c4:	2100      	movs	r1, #0
 80006c6:	4618      	mov	r0, r3
 80006c8:	f004 fe1a 	bl	8005300 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80006cc:	4b49      	ldr	r3, [pc, #292]	; (80007f4 <MX_TIM1_Init+0x168>)
 80006ce:	4a4a      	ldr	r2, [pc, #296]	; (80007f8 <MX_TIM1_Init+0x16c>)
 80006d0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 79;
 80006d2:	4b48      	ldr	r3, [pc, #288]	; (80007f4 <MX_TIM1_Init+0x168>)
 80006d4:	224f      	movs	r2, #79	; 0x4f
 80006d6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006d8:	4b46      	ldr	r3, [pc, #280]	; (80007f4 <MX_TIM1_Init+0x168>)
 80006da:	2200      	movs	r2, #0
 80006dc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 80006de:	4b45      	ldr	r3, [pc, #276]	; (80007f4 <MX_TIM1_Init+0x168>)
 80006e0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80006e4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006e6:	4b43      	ldr	r3, [pc, #268]	; (80007f4 <MX_TIM1_Init+0x168>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80006ec:	4b41      	ldr	r3, [pc, #260]	; (80007f4 <MX_TIM1_Init+0x168>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006f2:	4b40      	ldr	r3, [pc, #256]	; (80007f4 <MX_TIM1_Init+0x168>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80006f8:	483e      	ldr	r0, [pc, #248]	; (80007f4 <MX_TIM1_Init+0x168>)
 80006fa:	f002 fc1d 	bl	8002f38 <HAL_TIM_Base_Init>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000704:	f000 f9e4 	bl	8000ad0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000708:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800070c:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800070e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000712:	4619      	mov	r1, r3
 8000714:	4837      	ldr	r0, [pc, #220]	; (80007f4 <MX_TIM1_Init+0x168>)
 8000716:	f002 fec7 	bl	80034a8 <HAL_TIM_ConfigClockSource>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000720:	f000 f9d6 	bl	8000ad0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000724:	4833      	ldr	r0, [pc, #204]	; (80007f4 <MX_TIM1_Init+0x168>)
 8000726:	f002 fc5e 	bl	8002fe6 <HAL_TIM_PWM_Init>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000730:	f000 f9ce 	bl	8000ad0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000734:	2300      	movs	r3, #0
 8000736:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000738:	2300      	movs	r3, #0
 800073a:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800073c:	2300      	movs	r3, #0
 800073e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000740:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000744:	4619      	mov	r1, r3
 8000746:	482b      	ldr	r0, [pc, #172]	; (80007f4 <MX_TIM1_Init+0x168>)
 8000748:	f003 fb4a 	bl	8003de0 <HAL_TIMEx_MasterConfigSynchronization>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000752:	f000 f9bd 	bl	8000ad0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000756:	2360      	movs	r3, #96	; 0x60
 8000758:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 800075a:	2300      	movs	r3, #0
 800075c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800075e:	2300      	movs	r3, #0
 8000760:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000762:	2300      	movs	r3, #0
 8000764:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000766:	2300      	movs	r3, #0
 8000768:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800076a:	2300      	movs	r3, #0
 800076c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800076e:	2300      	movs	r3, #0
 8000770:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000772:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000776:	2200      	movs	r2, #0
 8000778:	4619      	mov	r1, r3
 800077a:	481e      	ldr	r0, [pc, #120]	; (80007f4 <MX_TIM1_Init+0x168>)
 800077c:	f002 fd80 	bl	8003280 <HAL_TIM_PWM_ConfigChannel>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8000786:	f000 f9a3 	bl	8000ad0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800078a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800078e:	220c      	movs	r2, #12
 8000790:	4619      	mov	r1, r3
 8000792:	4818      	ldr	r0, [pc, #96]	; (80007f4 <MX_TIM1_Init+0x168>)
 8000794:	f002 fd74 	bl	8003280 <HAL_TIM_PWM_ConfigChannel>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 800079e:	f000 f997 	bl	8000ad0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80007a2:	2300      	movs	r3, #0
 80007a4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80007a6:	2300      	movs	r3, #0
 80007a8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80007aa:	2300      	movs	r3, #0
 80007ac:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80007ae:	2300      	movs	r3, #0
 80007b0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80007b2:	2300      	movs	r3, #0
 80007b4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80007b6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007ba:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80007bc:	2300      	movs	r3, #0
 80007be:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80007c0:	2300      	movs	r3, #0
 80007c2:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80007c4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80007c8:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80007ca:	2300      	movs	r3, #0
 80007cc:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80007ce:	2300      	movs	r3, #0
 80007d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80007d2:	1d3b      	adds	r3, r7, #4
 80007d4:	4619      	mov	r1, r3
 80007d6:	4807      	ldr	r0, [pc, #28]	; (80007f4 <MX_TIM1_Init+0x168>)
 80007d8:	f003 fb70 	bl	8003ebc <HAL_TIMEx_ConfigBreakDeadTime>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 80007e2:	f000 f975 	bl	8000ad0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80007e6:	4803      	ldr	r0, [pc, #12]	; (80007f4 <MX_TIM1_Init+0x168>)
 80007e8:	f000 f9d2 	bl	8000b90 <HAL_TIM_MspPostInit>

}
 80007ec:	bf00      	nop
 80007ee:	3768      	adds	r7, #104	; 0x68
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	200001c8 	.word	0x200001c8
 80007f8:	40012c00 	.word	0x40012c00

080007fc <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b084      	sub	sp, #16
 8000800:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000802:	1d3b      	adds	r3, r7, #4
 8000804:	2200      	movs	r2, #0
 8000806:	601a      	str	r2, [r3, #0]
 8000808:	605a      	str	r2, [r3, #4]
 800080a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800080c:	4b14      	ldr	r3, [pc, #80]	; (8000860 <MX_TIM6_Init+0x64>)
 800080e:	4a15      	ldr	r2, [pc, #84]	; (8000864 <MX_TIM6_Init+0x68>)
 8000810:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 7;
 8000812:	4b13      	ldr	r3, [pc, #76]	; (8000860 <MX_TIM6_Init+0x64>)
 8000814:	2207      	movs	r2, #7
 8000816:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000818:	4b11      	ldr	r3, [pc, #68]	; (8000860 <MX_TIM6_Init+0x64>)
 800081a:	2200      	movs	r2, #0
 800081c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 0;
 800081e:	4b10      	ldr	r3, [pc, #64]	; (8000860 <MX_TIM6_Init+0x64>)
 8000820:	2200      	movs	r2, #0
 8000822:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000824:	4b0e      	ldr	r3, [pc, #56]	; (8000860 <MX_TIM6_Init+0x64>)
 8000826:	2200      	movs	r2, #0
 8000828:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800082a:	480d      	ldr	r0, [pc, #52]	; (8000860 <MX_TIM6_Init+0x64>)
 800082c:	f002 fb84 	bl	8002f38 <HAL_TIM_Base_Init>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8000836:	f000 f94b 	bl	8000ad0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800083a:	2300      	movs	r3, #0
 800083c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800083e:	2300      	movs	r3, #0
 8000840:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000842:	1d3b      	adds	r3, r7, #4
 8000844:	4619      	mov	r1, r3
 8000846:	4806      	ldr	r0, [pc, #24]	; (8000860 <MX_TIM6_Init+0x64>)
 8000848:	f003 faca 	bl	8003de0 <HAL_TIMEx_MasterConfigSynchronization>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8000852:	f000 f93d 	bl	8000ad0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000856:	bf00      	nop
 8000858:	3710      	adds	r7, #16
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	200000b0 	.word	0x200000b0
 8000864:	40001000 	.word	0x40001000

08000868 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800086c:	4b14      	ldr	r3, [pc, #80]	; (80008c0 <MX_USART1_UART_Init+0x58>)
 800086e:	4a15      	ldr	r2, [pc, #84]	; (80008c4 <MX_USART1_UART_Init+0x5c>)
 8000870:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000872:	4b13      	ldr	r3, [pc, #76]	; (80008c0 <MX_USART1_UART_Init+0x58>)
 8000874:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000878:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800087a:	4b11      	ldr	r3, [pc, #68]	; (80008c0 <MX_USART1_UART_Init+0x58>)
 800087c:	2200      	movs	r2, #0
 800087e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000880:	4b0f      	ldr	r3, [pc, #60]	; (80008c0 <MX_USART1_UART_Init+0x58>)
 8000882:	2200      	movs	r2, #0
 8000884:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000886:	4b0e      	ldr	r3, [pc, #56]	; (80008c0 <MX_USART1_UART_Init+0x58>)
 8000888:	2200      	movs	r2, #0
 800088a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800088c:	4b0c      	ldr	r3, [pc, #48]	; (80008c0 <MX_USART1_UART_Init+0x58>)
 800088e:	220c      	movs	r2, #12
 8000890:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000892:	4b0b      	ldr	r3, [pc, #44]	; (80008c0 <MX_USART1_UART_Init+0x58>)
 8000894:	2200      	movs	r2, #0
 8000896:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000898:	4b09      	ldr	r3, [pc, #36]	; (80008c0 <MX_USART1_UART_Init+0x58>)
 800089a:	2200      	movs	r2, #0
 800089c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800089e:	4b08      	ldr	r3, [pc, #32]	; (80008c0 <MX_USART1_UART_Init+0x58>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008a4:	4b06      	ldr	r3, [pc, #24]	; (80008c0 <MX_USART1_UART_Init+0x58>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80008aa:	4805      	ldr	r0, [pc, #20]	; (80008c0 <MX_USART1_UART_Init+0x58>)
 80008ac:	f003 fb7e 	bl	8003fac <HAL_UART_Init>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80008b6:	f000 f90b 	bl	8000ad0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80008ba:	bf00      	nop
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	20000144 	.word	0x20000144
 80008c4:	40013800 	.word	0x40013800

080008c8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008cc:	4b14      	ldr	r3, [pc, #80]	; (8000920 <MX_USART2_UART_Init+0x58>)
 80008ce:	4a15      	ldr	r2, [pc, #84]	; (8000924 <MX_USART2_UART_Init+0x5c>)
 80008d0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80008d2:	4b13      	ldr	r3, [pc, #76]	; (8000920 <MX_USART2_UART_Init+0x58>)
 80008d4:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80008d8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008da:	4b11      	ldr	r3, [pc, #68]	; (8000920 <MX_USART2_UART_Init+0x58>)
 80008dc:	2200      	movs	r2, #0
 80008de:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008e0:	4b0f      	ldr	r3, [pc, #60]	; (8000920 <MX_USART2_UART_Init+0x58>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008e6:	4b0e      	ldr	r3, [pc, #56]	; (8000920 <MX_USART2_UART_Init+0x58>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008ec:	4b0c      	ldr	r3, [pc, #48]	; (8000920 <MX_USART2_UART_Init+0x58>)
 80008ee:	220c      	movs	r2, #12
 80008f0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008f2:	4b0b      	ldr	r3, [pc, #44]	; (8000920 <MX_USART2_UART_Init+0x58>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008f8:	4b09      	ldr	r3, [pc, #36]	; (8000920 <MX_USART2_UART_Init+0x58>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008fe:	4b08      	ldr	r3, [pc, #32]	; (8000920 <MX_USART2_UART_Init+0x58>)
 8000900:	2200      	movs	r2, #0
 8000902:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000904:	4b06      	ldr	r3, [pc, #24]	; (8000920 <MX_USART2_UART_Init+0x58>)
 8000906:	2200      	movs	r2, #0
 8000908:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800090a:	4805      	ldr	r0, [pc, #20]	; (8000920 <MX_USART2_UART_Init+0x58>)
 800090c:	f003 fb4e 	bl	8003fac <HAL_UART_Init>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000916:	f000 f8db 	bl	8000ad0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800091a:	bf00      	nop
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	20000214 	.word	0x20000214
 8000924:	40004400 	.word	0x40004400

08000928 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b082      	sub	sp, #8
 800092c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800092e:	4b0c      	ldr	r3, [pc, #48]	; (8000960 <MX_DMA_Init+0x38>)
 8000930:	695b      	ldr	r3, [r3, #20]
 8000932:	4a0b      	ldr	r2, [pc, #44]	; (8000960 <MX_DMA_Init+0x38>)
 8000934:	f043 0301 	orr.w	r3, r3, #1
 8000938:	6153      	str	r3, [r2, #20]
 800093a:	4b09      	ldr	r3, [pc, #36]	; (8000960 <MX_DMA_Init+0x38>)
 800093c:	695b      	ldr	r3, [r3, #20]
 800093e:	f003 0301 	and.w	r3, r3, #1
 8000942:	607b      	str	r3, [r7, #4]
 8000944:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000946:	2200      	movs	r2, #0
 8000948:	2100      	movs	r1, #0
 800094a:	200f      	movs	r0, #15
 800094c:	f000 fc91 	bl	8001272 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000950:	200f      	movs	r0, #15
 8000952:	f000 fcaa 	bl	80012aa <HAL_NVIC_EnableIRQ>

}
 8000956:	bf00      	nop
 8000958:	3708      	adds	r7, #8
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	40021000 	.word	0x40021000

08000964 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b088      	sub	sp, #32
 8000968:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800096a:	f107 030c 	add.w	r3, r7, #12
 800096e:	2200      	movs	r2, #0
 8000970:	601a      	str	r2, [r3, #0]
 8000972:	605a      	str	r2, [r3, #4]
 8000974:	609a      	str	r2, [r3, #8]
 8000976:	60da      	str	r2, [r3, #12]
 8000978:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800097a:	4b53      	ldr	r3, [pc, #332]	; (8000ac8 <MX_GPIO_Init+0x164>)
 800097c:	695b      	ldr	r3, [r3, #20]
 800097e:	4a52      	ldr	r2, [pc, #328]	; (8000ac8 <MX_GPIO_Init+0x164>)
 8000980:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000984:	6153      	str	r3, [r2, #20]
 8000986:	4b50      	ldr	r3, [pc, #320]	; (8000ac8 <MX_GPIO_Init+0x164>)
 8000988:	695b      	ldr	r3, [r3, #20]
 800098a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800098e:	60bb      	str	r3, [r7, #8]
 8000990:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000992:	4b4d      	ldr	r3, [pc, #308]	; (8000ac8 <MX_GPIO_Init+0x164>)
 8000994:	695b      	ldr	r3, [r3, #20]
 8000996:	4a4c      	ldr	r2, [pc, #304]	; (8000ac8 <MX_GPIO_Init+0x164>)
 8000998:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800099c:	6153      	str	r3, [r2, #20]
 800099e:	4b4a      	ldr	r3, [pc, #296]	; (8000ac8 <MX_GPIO_Init+0x164>)
 80009a0:	695b      	ldr	r3, [r3, #20]
 80009a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009a6:	607b      	str	r3, [r7, #4]
 80009a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009aa:	4b47      	ldr	r3, [pc, #284]	; (8000ac8 <MX_GPIO_Init+0x164>)
 80009ac:	695b      	ldr	r3, [r3, #20]
 80009ae:	4a46      	ldr	r2, [pc, #280]	; (8000ac8 <MX_GPIO_Init+0x164>)
 80009b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80009b4:	6153      	str	r3, [r2, #20]
 80009b6:	4b44      	ldr	r3, [pc, #272]	; (8000ac8 <MX_GPIO_Init+0x164>)
 80009b8:	695b      	ldr	r3, [r3, #20]
 80009ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80009be:	603b      	str	r3, [r7, #0]
 80009c0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MotorAIN2_Pin|MotorAIN1_Pin|BT_Enable_Pin, GPIO_PIN_RESET);
 80009c2:	2200      	movs	r2, #0
 80009c4:	2183      	movs	r1, #131	; 0x83
 80009c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009ca:	f001 f821 	bl	8001a10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DS_GPIO_Port, DS_Pin, GPIO_PIN_SET);
 80009ce:	2201      	movs	r2, #1
 80009d0:	2108      	movs	r1, #8
 80009d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009d6:	f001 f81b 	bl	8001a10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MotorSTBY_Pin|LED3_Pin|MotorBN2_Pin|MotorBN1_Pin, GPIO_PIN_RESET);
 80009da:	2200      	movs	r2, #0
 80009dc:	21ca      	movs	r1, #202	; 0xca
 80009de:	483b      	ldr	r0, [pc, #236]	; (8000acc <MX_GPIO_Init+0x168>)
 80009e0:	f001 f816 	bl	8001a10 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : MotorAIN2_Pin MotorAIN1_Pin */
  GPIO_InitStruct.Pin = MotorAIN2_Pin|MotorAIN1_Pin;
 80009e4:	2303      	movs	r3, #3
 80009e6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009e8:	2301      	movs	r3, #1
 80009ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ec:	2300      	movs	r3, #0
 80009ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f0:	2300      	movs	r3, #0
 80009f2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009f4:	f107 030c 	add.w	r3, r7, #12
 80009f8:	4619      	mov	r1, r3
 80009fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009fe:	f000 fe7d 	bl	80016fc <HAL_GPIO_Init>

  /*Configure GPIO pin : DS_Pin */
  GPIO_InitStruct.Pin = DS_Pin;
 8000a02:	2308      	movs	r3, #8
 8000a04:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000a06:	2311      	movs	r3, #17
 8000a08:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DS_GPIO_Port, &GPIO_InitStruct);
 8000a12:	f107 030c 	add.w	r3, r7, #12
 8000a16:	4619      	mov	r1, r3
 8000a18:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a1c:	f000 fe6e 	bl	80016fc <HAL_GPIO_Init>

  /*Configure GPIO pin : GAS_IN_Pin */
  GPIO_InitStruct.Pin = GAS_IN_Pin;
 8000a20:	2340      	movs	r3, #64	; 0x40
 8000a22:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a24:	2300      	movs	r3, #0
 8000a26:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GAS_IN_GPIO_Port, &GPIO_InitStruct);
 8000a2c:	f107 030c 	add.w	r3, r7, #12
 8000a30:	4619      	mov	r1, r3
 8000a32:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a36:	f000 fe61 	bl	80016fc <HAL_GPIO_Init>

  /*Configure GPIO pin : BT_Enable_Pin */
  GPIO_InitStruct.Pin = BT_Enable_Pin;
 8000a3a:	2380      	movs	r3, #128	; 0x80
 8000a3c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a3e:	2301      	movs	r3, #1
 8000a40:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a42:	2301      	movs	r3, #1
 8000a44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a46:	2300      	movs	r3, #0
 8000a48:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BT_Enable_GPIO_Port, &GPIO_InitStruct);
 8000a4a:	f107 030c 	add.w	r3, r7, #12
 8000a4e:	4619      	mov	r1, r3
 8000a50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a54:	f000 fe52 	bl	80016fc <HAL_GPIO_Init>

  /*Configure GPIO pins : LeftSensor_Pin RightSensor_Pin CenterSensor_Pin */
  GPIO_InitStruct.Pin = LeftSensor_Pin|RightSensor_Pin|CenterSensor_Pin;
 8000a58:	2331      	movs	r3, #49	; 0x31
 8000a5a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a5c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000a60:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a62:	2300      	movs	r3, #0
 8000a64:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a66:	f107 030c 	add.w	r3, r7, #12
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	4817      	ldr	r0, [pc, #92]	; (8000acc <MX_GPIO_Init+0x168>)
 8000a6e:	f000 fe45 	bl	80016fc <HAL_GPIO_Init>

  /*Configure GPIO pins : MotorSTBY_Pin LED3_Pin MotorBN2_Pin MotorBN1_Pin */
  GPIO_InitStruct.Pin = MotorSTBY_Pin|LED3_Pin|MotorBN2_Pin|MotorBN1_Pin;
 8000a72:	23ca      	movs	r3, #202	; 0xca
 8000a74:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a76:	2301      	movs	r3, #1
 8000a78:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a82:	f107 030c 	add.w	r3, r7, #12
 8000a86:	4619      	mov	r1, r3
 8000a88:	4810      	ldr	r0, [pc, #64]	; (8000acc <MX_GPIO_Init+0x168>)
 8000a8a:	f000 fe37 	bl	80016fc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000a8e:	2200      	movs	r2, #0
 8000a90:	2100      	movs	r1, #0
 8000a92:	2006      	movs	r0, #6
 8000a94:	f000 fbed 	bl	8001272 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000a98:	2006      	movs	r0, #6
 8000a9a:	f000 fc06 	bl	80012aa <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	2100      	movs	r1, #0
 8000aa2:	200a      	movs	r0, #10
 8000aa4:	f000 fbe5 	bl	8001272 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000aa8:	200a      	movs	r0, #10
 8000aaa:	f000 fbfe 	bl	80012aa <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000aae:	2200      	movs	r2, #0
 8000ab0:	2100      	movs	r1, #0
 8000ab2:	2017      	movs	r0, #23
 8000ab4:	f000 fbdd 	bl	8001272 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000ab8:	2017      	movs	r0, #23
 8000aba:	f000 fbf6 	bl	80012aa <HAL_NVIC_EnableIRQ>

}
 8000abe:	bf00      	nop
 8000ac0:	3720      	adds	r7, #32
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	40021000 	.word	0x40021000
 8000acc:	48000400 	.word	0x48000400

08000ad0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000ad4:	bf00      	nop
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr
	...

08000ae0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	b083      	sub	sp, #12
 8000ae4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ae6:	4b0f      	ldr	r3, [pc, #60]	; (8000b24 <HAL_MspInit+0x44>)
 8000ae8:	699b      	ldr	r3, [r3, #24]
 8000aea:	4a0e      	ldr	r2, [pc, #56]	; (8000b24 <HAL_MspInit+0x44>)
 8000aec:	f043 0301 	orr.w	r3, r3, #1
 8000af0:	6193      	str	r3, [r2, #24]
 8000af2:	4b0c      	ldr	r3, [pc, #48]	; (8000b24 <HAL_MspInit+0x44>)
 8000af4:	699b      	ldr	r3, [r3, #24]
 8000af6:	f003 0301 	and.w	r3, r3, #1
 8000afa:	607b      	str	r3, [r7, #4]
 8000afc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000afe:	4b09      	ldr	r3, [pc, #36]	; (8000b24 <HAL_MspInit+0x44>)
 8000b00:	69db      	ldr	r3, [r3, #28]
 8000b02:	4a08      	ldr	r2, [pc, #32]	; (8000b24 <HAL_MspInit+0x44>)
 8000b04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b08:	61d3      	str	r3, [r2, #28]
 8000b0a:	4b06      	ldr	r3, [pc, #24]	; (8000b24 <HAL_MspInit+0x44>)
 8000b0c:	69db      	ldr	r3, [r3, #28]
 8000b0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b12:	603b      	str	r3, [r7, #0]
 8000b14:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b16:	bf00      	nop
 8000b18:	370c      	adds	r7, #12
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop
 8000b24:	40021000 	.word	0x40021000

08000b28 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b085      	sub	sp, #20
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	4a13      	ldr	r2, [pc, #76]	; (8000b84 <HAL_TIM_Base_MspInit+0x5c>)
 8000b36:	4293      	cmp	r3, r2
 8000b38:	d10c      	bne.n	8000b54 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000b3a:	4b13      	ldr	r3, [pc, #76]	; (8000b88 <HAL_TIM_Base_MspInit+0x60>)
 8000b3c:	699b      	ldr	r3, [r3, #24]
 8000b3e:	4a12      	ldr	r2, [pc, #72]	; (8000b88 <HAL_TIM_Base_MspInit+0x60>)
 8000b40:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000b44:	6193      	str	r3, [r2, #24]
 8000b46:	4b10      	ldr	r3, [pc, #64]	; (8000b88 <HAL_TIM_Base_MspInit+0x60>)
 8000b48:	699b      	ldr	r3, [r3, #24]
 8000b4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000b4e:	60fb      	str	r3, [r7, #12]
 8000b50:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8000b52:	e010      	b.n	8000b76 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM6)
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	4a0c      	ldr	r2, [pc, #48]	; (8000b8c <HAL_TIM_Base_MspInit+0x64>)
 8000b5a:	4293      	cmp	r3, r2
 8000b5c:	d10b      	bne.n	8000b76 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000b5e:	4b0a      	ldr	r3, [pc, #40]	; (8000b88 <HAL_TIM_Base_MspInit+0x60>)
 8000b60:	69db      	ldr	r3, [r3, #28]
 8000b62:	4a09      	ldr	r2, [pc, #36]	; (8000b88 <HAL_TIM_Base_MspInit+0x60>)
 8000b64:	f043 0310 	orr.w	r3, r3, #16
 8000b68:	61d3      	str	r3, [r2, #28]
 8000b6a:	4b07      	ldr	r3, [pc, #28]	; (8000b88 <HAL_TIM_Base_MspInit+0x60>)
 8000b6c:	69db      	ldr	r3, [r3, #28]
 8000b6e:	f003 0310 	and.w	r3, r3, #16
 8000b72:	60bb      	str	r3, [r7, #8]
 8000b74:	68bb      	ldr	r3, [r7, #8]
}
 8000b76:	bf00      	nop
 8000b78:	3714      	adds	r7, #20
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b80:	4770      	bx	lr
 8000b82:	bf00      	nop
 8000b84:	40012c00 	.word	0x40012c00
 8000b88:	40021000 	.word	0x40021000
 8000b8c:	40001000 	.word	0x40001000

08000b90 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b088      	sub	sp, #32
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b98:	f107 030c 	add.w	r3, r7, #12
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	601a      	str	r2, [r3, #0]
 8000ba0:	605a      	str	r2, [r3, #4]
 8000ba2:	609a      	str	r2, [r3, #8]
 8000ba4:	60da      	str	r2, [r3, #12]
 8000ba6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	4a1b      	ldr	r2, [pc, #108]	; (8000c1c <HAL_TIM_MspPostInit+0x8c>)
 8000bae:	4293      	cmp	r3, r2
 8000bb0:	d12f      	bne.n	8000c12 <HAL_TIM_MspPostInit+0x82>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bb2:	4b1b      	ldr	r3, [pc, #108]	; (8000c20 <HAL_TIM_MspPostInit+0x90>)
 8000bb4:	695b      	ldr	r3, [r3, #20]
 8000bb6:	4a1a      	ldr	r2, [pc, #104]	; (8000c20 <HAL_TIM_MspPostInit+0x90>)
 8000bb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bbc:	6153      	str	r3, [r2, #20]
 8000bbe:	4b18      	ldr	r3, [pc, #96]	; (8000c20 <HAL_TIM_MspPostInit+0x90>)
 8000bc0:	695b      	ldr	r3, [r3, #20]
 8000bc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bc6:	60bb      	str	r3, [r7, #8]
 8000bc8:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = MotorPWMA_Pin;
 8000bca:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bce:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd0:	2302      	movs	r3, #2
 8000bd2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000bdc:	2306      	movs	r3, #6
 8000bde:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(MotorPWMA_GPIO_Port, &GPIO_InitStruct);
 8000be0:	f107 030c 	add.w	r3, r7, #12
 8000be4:	4619      	mov	r1, r3
 8000be6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bea:	f000 fd87 	bl	80016fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MotorPWMB_Pin;
 8000bee:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000bf2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf4:	2302      	movs	r3, #2
 8000bf6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF11_TIM1;
 8000c00:	230b      	movs	r3, #11
 8000c02:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(MotorPWMB_GPIO_Port, &GPIO_InitStruct);
 8000c04:	f107 030c 	add.w	r3, r7, #12
 8000c08:	4619      	mov	r1, r3
 8000c0a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c0e:	f000 fd75 	bl	80016fc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000c12:	bf00      	nop
 8000c14:	3720      	adds	r7, #32
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	40012c00 	.word	0x40012c00
 8000c20:	40021000 	.word	0x40021000

08000c24 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b08c      	sub	sp, #48	; 0x30
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c2c:	f107 031c 	add.w	r3, r7, #28
 8000c30:	2200      	movs	r2, #0
 8000c32:	601a      	str	r2, [r3, #0]
 8000c34:	605a      	str	r2, [r3, #4]
 8000c36:	609a      	str	r2, [r3, #8]
 8000c38:	60da      	str	r2, [r3, #12]
 8000c3a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	4a47      	ldr	r2, [pc, #284]	; (8000d60 <HAL_UART_MspInit+0x13c>)
 8000c42:	4293      	cmp	r3, r2
 8000c44:	d158      	bne.n	8000cf8 <HAL_UART_MspInit+0xd4>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c46:	4b47      	ldr	r3, [pc, #284]	; (8000d64 <HAL_UART_MspInit+0x140>)
 8000c48:	699b      	ldr	r3, [r3, #24]
 8000c4a:	4a46      	ldr	r2, [pc, #280]	; (8000d64 <HAL_UART_MspInit+0x140>)
 8000c4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c50:	6193      	str	r3, [r2, #24]
 8000c52:	4b44      	ldr	r3, [pc, #272]	; (8000d64 <HAL_UART_MspInit+0x140>)
 8000c54:	699b      	ldr	r3, [r3, #24]
 8000c56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c5a:	61bb      	str	r3, [r7, #24]
 8000c5c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c5e:	4b41      	ldr	r3, [pc, #260]	; (8000d64 <HAL_UART_MspInit+0x140>)
 8000c60:	695b      	ldr	r3, [r3, #20]
 8000c62:	4a40      	ldr	r2, [pc, #256]	; (8000d64 <HAL_UART_MspInit+0x140>)
 8000c64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c68:	6153      	str	r3, [r2, #20]
 8000c6a:	4b3e      	ldr	r3, [pc, #248]	; (8000d64 <HAL_UART_MspInit+0x140>)
 8000c6c:	695b      	ldr	r3, [r3, #20]
 8000c6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c72:	617b      	str	r3, [r7, #20]
 8000c74:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000c76:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000c7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c7c:	2302      	movs	r3, #2
 8000c7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c80:	2300      	movs	r3, #0
 8000c82:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c84:	2303      	movs	r3, #3
 8000c86:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000c88:	2307      	movs	r3, #7
 8000c8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c8c:	f107 031c 	add.w	r3, r7, #28
 8000c90:	4619      	mov	r1, r3
 8000c92:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c96:	f000 fd31 	bl	80016fc <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8000c9a:	4b33      	ldr	r3, [pc, #204]	; (8000d68 <HAL_UART_MspInit+0x144>)
 8000c9c:	4a33      	ldr	r2, [pc, #204]	; (8000d6c <HAL_UART_MspInit+0x148>)
 8000c9e:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ca0:	4b31      	ldr	r3, [pc, #196]	; (8000d68 <HAL_UART_MspInit+0x144>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ca6:	4b30      	ldr	r3, [pc, #192]	; (8000d68 <HAL_UART_MspInit+0x144>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000cac:	4b2e      	ldr	r3, [pc, #184]	; (8000d68 <HAL_UART_MspInit+0x144>)
 8000cae:	2280      	movs	r2, #128	; 0x80
 8000cb0:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000cb2:	4b2d      	ldr	r3, [pc, #180]	; (8000d68 <HAL_UART_MspInit+0x144>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000cb8:	4b2b      	ldr	r3, [pc, #172]	; (8000d68 <HAL_UART_MspInit+0x144>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8000cbe:	4b2a      	ldr	r3, [pc, #168]	; (8000d68 <HAL_UART_MspInit+0x144>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000cc4:	4b28      	ldr	r3, [pc, #160]	; (8000d68 <HAL_UART_MspInit+0x144>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000cca:	4827      	ldr	r0, [pc, #156]	; (8000d68 <HAL_UART_MspInit+0x144>)
 8000ccc:	f000 fb07 	bl	80012de <HAL_DMA_Init>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d001      	beq.n	8000cda <HAL_UART_MspInit+0xb6>
    {
      Error_Handler();
 8000cd6:	f7ff fefb 	bl	8000ad0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	4a22      	ldr	r2, [pc, #136]	; (8000d68 <HAL_UART_MspInit+0x144>)
 8000cde:	671a      	str	r2, [r3, #112]	; 0x70
 8000ce0:	4a21      	ldr	r2, [pc, #132]	; (8000d68 <HAL_UART_MspInit+0x144>)
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	2100      	movs	r1, #0
 8000cea:	2025      	movs	r0, #37	; 0x25
 8000cec:	f000 fac1 	bl	8001272 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000cf0:	2025      	movs	r0, #37	; 0x25
 8000cf2:	f000 fada 	bl	80012aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000cf6:	e02e      	b.n	8000d56 <HAL_UART_MspInit+0x132>
  else if(huart->Instance==USART2)
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4a1c      	ldr	r2, [pc, #112]	; (8000d70 <HAL_UART_MspInit+0x14c>)
 8000cfe:	4293      	cmp	r3, r2
 8000d00:	d129      	bne.n	8000d56 <HAL_UART_MspInit+0x132>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d02:	4b18      	ldr	r3, [pc, #96]	; (8000d64 <HAL_UART_MspInit+0x140>)
 8000d04:	69db      	ldr	r3, [r3, #28]
 8000d06:	4a17      	ldr	r2, [pc, #92]	; (8000d64 <HAL_UART_MspInit+0x140>)
 8000d08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d0c:	61d3      	str	r3, [r2, #28]
 8000d0e:	4b15      	ldr	r3, [pc, #84]	; (8000d64 <HAL_UART_MspInit+0x140>)
 8000d10:	69db      	ldr	r3, [r3, #28]
 8000d12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d16:	613b      	str	r3, [r7, #16]
 8000d18:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d1a:	4b12      	ldr	r3, [pc, #72]	; (8000d64 <HAL_UART_MspInit+0x140>)
 8000d1c:	695b      	ldr	r3, [r3, #20]
 8000d1e:	4a11      	ldr	r2, [pc, #68]	; (8000d64 <HAL_UART_MspInit+0x140>)
 8000d20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d24:	6153      	str	r3, [r2, #20]
 8000d26:	4b0f      	ldr	r3, [pc, #60]	; (8000d64 <HAL_UART_MspInit+0x140>)
 8000d28:	695b      	ldr	r3, [r3, #20]
 8000d2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d2e:	60fb      	str	r3, [r7, #12]
 8000d30:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8000d32:	f248 0304 	movw	r3, #32772	; 0x8004
 8000d36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d38:	2302      	movs	r3, #2
 8000d3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d40:	2303      	movs	r3, #3
 8000d42:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d44:	2307      	movs	r3, #7
 8000d46:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d48:	f107 031c 	add.w	r3, r7, #28
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d52:	f000 fcd3 	bl	80016fc <HAL_GPIO_Init>
}
 8000d56:	bf00      	nop
 8000d58:	3730      	adds	r7, #48	; 0x30
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	40013800 	.word	0x40013800
 8000d64:	40021000 	.word	0x40021000
 8000d68:	20000100 	.word	0x20000100
 8000d6c:	40020058 	.word	0x40020058
 8000d70:	40004400 	.word	0x40004400

08000d74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000d78:	bf00      	nop
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr

08000d82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d82:	b480      	push	{r7}
 8000d84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d86:	e7fe      	b.n	8000d86 <HardFault_Handler+0x4>

08000d88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d8c:	e7fe      	b.n	8000d8c <MemManage_Handler+0x4>

08000d8e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d8e:	b480      	push	{r7}
 8000d90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d92:	e7fe      	b.n	8000d92 <BusFault_Handler+0x4>

08000d94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d98:	e7fe      	b.n	8000d98 <UsageFault_Handler+0x4>

08000d9a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d9a:	b480      	push	{r7}
 8000d9c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d9e:	bf00      	nop
 8000da0:	46bd      	mov	sp, r7
 8000da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da6:	4770      	bx	lr

08000da8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dac:	bf00      	nop
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr

08000db6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000db6:	b480      	push	{r7}
 8000db8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dba:	bf00      	nop
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc2:	4770      	bx	lr

08000dc4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dc8:	f000 f936 	bl	8001038 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dcc:	bf00      	nop
 8000dce:	bd80      	pop	{r7, pc}

08000dd0 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000dd4:	2001      	movs	r0, #1
 8000dd6:	f000 fe33 	bl	8001a40 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000dda:	bf00      	nop
 8000ddc:	bd80      	pop	{r7, pc}

08000dde <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8000dde:	b580      	push	{r7, lr}
 8000de0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8000de2:	2010      	movs	r0, #16
 8000de4:	f000 fe2c 	bl	8001a40 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8000de8:	bf00      	nop
 8000dea:	bd80      	pop	{r7, pc}

08000dec <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000df0:	4802      	ldr	r0, [pc, #8]	; (8000dfc <DMA1_Channel5_IRQHandler+0x10>)
 8000df2:	f000 fb91 	bl	8001518 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8000df6:	bf00      	nop
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	20000100 	.word	0x20000100

08000e00 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8000e04:	2020      	movs	r0, #32
 8000e06:	f000 fe1b 	bl	8001a40 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000e0a:	bf00      	nop
 8000e0c:	bd80      	pop	{r7, pc}
	...

08000e10 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXT line 25.
  */
void USART1_IRQHandler(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000e14:	4802      	ldr	r0, [pc, #8]	; (8000e20 <USART1_IRQHandler+0x10>)
 8000e16:	f003 f9f9 	bl	800420c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000e1a:	bf00      	nop
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	20000144 	.word	0x20000144

08000e24 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b086      	sub	sp, #24
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	60f8      	str	r0, [r7, #12]
 8000e2c:	60b9      	str	r1, [r7, #8]
 8000e2e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e30:	2300      	movs	r3, #0
 8000e32:	617b      	str	r3, [r7, #20]
 8000e34:	e00a      	b.n	8000e4c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000e36:	f3af 8000 	nop.w
 8000e3a:	4601      	mov	r1, r0
 8000e3c:	68bb      	ldr	r3, [r7, #8]
 8000e3e:	1c5a      	adds	r2, r3, #1
 8000e40:	60ba      	str	r2, [r7, #8]
 8000e42:	b2ca      	uxtb	r2, r1
 8000e44:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e46:	697b      	ldr	r3, [r7, #20]
 8000e48:	3301      	adds	r3, #1
 8000e4a:	617b      	str	r3, [r7, #20]
 8000e4c:	697a      	ldr	r2, [r7, #20]
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	429a      	cmp	r2, r3
 8000e52:	dbf0      	blt.n	8000e36 <_read+0x12>
	}

return len;
 8000e54:	687b      	ldr	r3, [r7, #4]
}
 8000e56:	4618      	mov	r0, r3
 8000e58:	3718      	adds	r7, #24
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}

08000e5e <_close>:
	}
	return len;
}

int _close(int file)
{
 8000e5e:	b480      	push	{r7}
 8000e60:	b083      	sub	sp, #12
 8000e62:	af00      	add	r7, sp, #0
 8000e64:	6078      	str	r0, [r7, #4]
	return -1;
 8000e66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	370c      	adds	r7, #12
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr

08000e76 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e76:	b480      	push	{r7}
 8000e78:	b083      	sub	sp, #12
 8000e7a:	af00      	add	r7, sp, #0
 8000e7c:	6078      	str	r0, [r7, #4]
 8000e7e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e86:	605a      	str	r2, [r3, #4]
	return 0;
 8000e88:	2300      	movs	r3, #0
}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	370c      	adds	r7, #12
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e94:	4770      	bx	lr

08000e96 <_isatty>:

int _isatty(int file)
{
 8000e96:	b480      	push	{r7}
 8000e98:	b083      	sub	sp, #12
 8000e9a:	af00      	add	r7, sp, #0
 8000e9c:	6078      	str	r0, [r7, #4]
	return 1;
 8000e9e:	2301      	movs	r3, #1
}
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	370c      	adds	r7, #12
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eaa:	4770      	bx	lr

08000eac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b085      	sub	sp, #20
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	60f8      	str	r0, [r7, #12]
 8000eb4:	60b9      	str	r1, [r7, #8]
 8000eb6:	607a      	str	r2, [r7, #4]
	return 0;
 8000eb8:	2300      	movs	r3, #0
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	3714      	adds	r7, #20
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr
	...

08000ec8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b086      	sub	sp, #24
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ed0:	4a14      	ldr	r2, [pc, #80]	; (8000f24 <_sbrk+0x5c>)
 8000ed2:	4b15      	ldr	r3, [pc, #84]	; (8000f28 <_sbrk+0x60>)
 8000ed4:	1ad3      	subs	r3, r2, r3
 8000ed6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ed8:	697b      	ldr	r3, [r7, #20]
 8000eda:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000edc:	4b13      	ldr	r3, [pc, #76]	; (8000f2c <_sbrk+0x64>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d102      	bne.n	8000eea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ee4:	4b11      	ldr	r3, [pc, #68]	; (8000f2c <_sbrk+0x64>)
 8000ee6:	4a12      	ldr	r2, [pc, #72]	; (8000f30 <_sbrk+0x68>)
 8000ee8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000eea:	4b10      	ldr	r3, [pc, #64]	; (8000f2c <_sbrk+0x64>)
 8000eec:	681a      	ldr	r2, [r3, #0]
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	4413      	add	r3, r2
 8000ef2:	693a      	ldr	r2, [r7, #16]
 8000ef4:	429a      	cmp	r2, r3
 8000ef6:	d207      	bcs.n	8000f08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ef8:	f004 f9d8 	bl	80052ac <__errno>
 8000efc:	4602      	mov	r2, r0
 8000efe:	230c      	movs	r3, #12
 8000f00:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000f02:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f06:	e009      	b.n	8000f1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f08:	4b08      	ldr	r3, [pc, #32]	; (8000f2c <_sbrk+0x64>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f0e:	4b07      	ldr	r3, [pc, #28]	; (8000f2c <_sbrk+0x64>)
 8000f10:	681a      	ldr	r2, [r3, #0]
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	4413      	add	r3, r2
 8000f16:	4a05      	ldr	r2, [pc, #20]	; (8000f2c <_sbrk+0x64>)
 8000f18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f1a:	68fb      	ldr	r3, [r7, #12]
}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	3718      	adds	r7, #24
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	20003000 	.word	0x20003000
 8000f28:	00000400 	.word	0x00000400
 8000f2c:	200000a4 	.word	0x200000a4
 8000f30:	200002a0 	.word	0x200002a0

08000f34 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f38:	4b06      	ldr	r3, [pc, #24]	; (8000f54 <SystemInit+0x20>)
 8000f3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f3e:	4a05      	ldr	r2, [pc, #20]	; (8000f54 <SystemInit+0x20>)
 8000f40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f44:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f48:	bf00      	nop
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop
 8000f54:	e000ed00 	.word	0xe000ed00

08000f58 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000f58:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f90 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f5c:	480d      	ldr	r0, [pc, #52]	; (8000f94 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f5e:	490e      	ldr	r1, [pc, #56]	; (8000f98 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f60:	4a0e      	ldr	r2, [pc, #56]	; (8000f9c <LoopForever+0xe>)
  movs r3, #0
 8000f62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f64:	e002      	b.n	8000f6c <LoopCopyDataInit>

08000f66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f6a:	3304      	adds	r3, #4

08000f6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f70:	d3f9      	bcc.n	8000f66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f72:	4a0b      	ldr	r2, [pc, #44]	; (8000fa0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f74:	4c0b      	ldr	r4, [pc, #44]	; (8000fa4 <LoopForever+0x16>)
  movs r3, #0
 8000f76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f78:	e001      	b.n	8000f7e <LoopFillZerobss>

08000f7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f7c:	3204      	adds	r2, #4

08000f7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f80:	d3fb      	bcc.n	8000f7a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000f82:	f7ff ffd7 	bl	8000f34 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f86:	f004 f997 	bl	80052b8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f8a:	f7ff fa31 	bl	80003f0 <main>

08000f8e <LoopForever>:

LoopForever:
    b LoopForever
 8000f8e:	e7fe      	b.n	8000f8e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000f90:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000f94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f98:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000f9c:	08006558 	.word	0x08006558
  ldr r2, =_sbss
 8000fa0:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000fa4:	200002a0 	.word	0x200002a0

08000fa8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000fa8:	e7fe      	b.n	8000fa8 <ADC1_2_IRQHandler>
	...

08000fac <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fb0:	4b08      	ldr	r3, [pc, #32]	; (8000fd4 <HAL_Init+0x28>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a07      	ldr	r2, [pc, #28]	; (8000fd4 <HAL_Init+0x28>)
 8000fb6:	f043 0310 	orr.w	r3, r3, #16
 8000fba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fbc:	2003      	movs	r0, #3
 8000fbe:	f000 f94d 	bl	800125c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fc2:	2000      	movs	r0, #0
 8000fc4:	f000 f808 	bl	8000fd8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fc8:	f7ff fd8a 	bl	8000ae0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fcc:	2300      	movs	r3, #0
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	40022000 	.word	0x40022000

08000fd8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fe0:	4b12      	ldr	r3, [pc, #72]	; (800102c <HAL_InitTick+0x54>)
 8000fe2:	681a      	ldr	r2, [r3, #0]
 8000fe4:	4b12      	ldr	r3, [pc, #72]	; (8001030 <HAL_InitTick+0x58>)
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	4619      	mov	r1, r3
 8000fea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fee:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ff2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f000 f965 	bl	80012c6 <HAL_SYSTICK_Config>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d001      	beq.n	8001006 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001002:	2301      	movs	r3, #1
 8001004:	e00e      	b.n	8001024 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	2b0f      	cmp	r3, #15
 800100a:	d80a      	bhi.n	8001022 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800100c:	2200      	movs	r2, #0
 800100e:	6879      	ldr	r1, [r7, #4]
 8001010:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001014:	f000 f92d 	bl	8001272 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001018:	4a06      	ldr	r2, [pc, #24]	; (8001034 <HAL_InitTick+0x5c>)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800101e:	2300      	movs	r3, #0
 8001020:	e000      	b.n	8001024 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001022:	2301      	movs	r3, #1
}
 8001024:	4618      	mov	r0, r3
 8001026:	3708      	adds	r7, #8
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	20000004 	.word	0x20000004
 8001030:	2000000c 	.word	0x2000000c
 8001034:	20000008 	.word	0x20000008

08001038 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800103c:	4b06      	ldr	r3, [pc, #24]	; (8001058 <HAL_IncTick+0x20>)
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	461a      	mov	r2, r3
 8001042:	4b06      	ldr	r3, [pc, #24]	; (800105c <HAL_IncTick+0x24>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	4413      	add	r3, r2
 8001048:	4a04      	ldr	r2, [pc, #16]	; (800105c <HAL_IncTick+0x24>)
 800104a:	6013      	str	r3, [r2, #0]
}
 800104c:	bf00      	nop
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop
 8001058:	2000000c 	.word	0x2000000c
 800105c:	20000298 	.word	0x20000298

08001060 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0
  return uwTick;  
 8001064:	4b03      	ldr	r3, [pc, #12]	; (8001074 <HAL_GetTick+0x14>)
 8001066:	681b      	ldr	r3, [r3, #0]
}
 8001068:	4618      	mov	r0, r3
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop
 8001074:	20000298 	.word	0x20000298

08001078 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b084      	sub	sp, #16
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001080:	f7ff ffee 	bl	8001060 <HAL_GetTick>
 8001084:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001090:	d005      	beq.n	800109e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001092:	4b09      	ldr	r3, [pc, #36]	; (80010b8 <HAL_Delay+0x40>)
 8001094:	781b      	ldrb	r3, [r3, #0]
 8001096:	461a      	mov	r2, r3
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	4413      	add	r3, r2
 800109c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800109e:	bf00      	nop
 80010a0:	f7ff ffde 	bl	8001060 <HAL_GetTick>
 80010a4:	4602      	mov	r2, r0
 80010a6:	68bb      	ldr	r3, [r7, #8]
 80010a8:	1ad3      	subs	r3, r2, r3
 80010aa:	68fa      	ldr	r2, [r7, #12]
 80010ac:	429a      	cmp	r2, r3
 80010ae:	d8f7      	bhi.n	80010a0 <HAL_Delay+0x28>
  {
  }
}
 80010b0:	bf00      	nop
 80010b2:	3710      	adds	r7, #16
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	2000000c 	.word	0x2000000c

080010bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010bc:	b480      	push	{r7}
 80010be:	b085      	sub	sp, #20
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	f003 0307 	and.w	r3, r3, #7
 80010ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010cc:	4b0c      	ldr	r3, [pc, #48]	; (8001100 <__NVIC_SetPriorityGrouping+0x44>)
 80010ce:	68db      	ldr	r3, [r3, #12]
 80010d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010d2:	68ba      	ldr	r2, [r7, #8]
 80010d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010d8:	4013      	ands	r3, r2
 80010da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010e0:	68bb      	ldr	r3, [r7, #8]
 80010e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010ee:	4a04      	ldr	r2, [pc, #16]	; (8001100 <__NVIC_SetPriorityGrouping+0x44>)
 80010f0:	68bb      	ldr	r3, [r7, #8]
 80010f2:	60d3      	str	r3, [r2, #12]
}
 80010f4:	bf00      	nop
 80010f6:	3714      	adds	r7, #20
 80010f8:	46bd      	mov	sp, r7
 80010fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fe:	4770      	bx	lr
 8001100:	e000ed00 	.word	0xe000ed00

08001104 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001108:	4b04      	ldr	r3, [pc, #16]	; (800111c <__NVIC_GetPriorityGrouping+0x18>)
 800110a:	68db      	ldr	r3, [r3, #12]
 800110c:	0a1b      	lsrs	r3, r3, #8
 800110e:	f003 0307 	and.w	r3, r3, #7
}
 8001112:	4618      	mov	r0, r3
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr
 800111c:	e000ed00 	.word	0xe000ed00

08001120 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001120:	b480      	push	{r7}
 8001122:	b083      	sub	sp, #12
 8001124:	af00      	add	r7, sp, #0
 8001126:	4603      	mov	r3, r0
 8001128:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800112a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800112e:	2b00      	cmp	r3, #0
 8001130:	db0b      	blt.n	800114a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001132:	79fb      	ldrb	r3, [r7, #7]
 8001134:	f003 021f 	and.w	r2, r3, #31
 8001138:	4907      	ldr	r1, [pc, #28]	; (8001158 <__NVIC_EnableIRQ+0x38>)
 800113a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800113e:	095b      	lsrs	r3, r3, #5
 8001140:	2001      	movs	r0, #1
 8001142:	fa00 f202 	lsl.w	r2, r0, r2
 8001146:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800114a:	bf00      	nop
 800114c:	370c      	adds	r7, #12
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr
 8001156:	bf00      	nop
 8001158:	e000e100 	.word	0xe000e100

0800115c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800115c:	b480      	push	{r7}
 800115e:	b083      	sub	sp, #12
 8001160:	af00      	add	r7, sp, #0
 8001162:	4603      	mov	r3, r0
 8001164:	6039      	str	r1, [r7, #0]
 8001166:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001168:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800116c:	2b00      	cmp	r3, #0
 800116e:	db0a      	blt.n	8001186 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	b2da      	uxtb	r2, r3
 8001174:	490c      	ldr	r1, [pc, #48]	; (80011a8 <__NVIC_SetPriority+0x4c>)
 8001176:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800117a:	0112      	lsls	r2, r2, #4
 800117c:	b2d2      	uxtb	r2, r2
 800117e:	440b      	add	r3, r1
 8001180:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001184:	e00a      	b.n	800119c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	b2da      	uxtb	r2, r3
 800118a:	4908      	ldr	r1, [pc, #32]	; (80011ac <__NVIC_SetPriority+0x50>)
 800118c:	79fb      	ldrb	r3, [r7, #7]
 800118e:	f003 030f 	and.w	r3, r3, #15
 8001192:	3b04      	subs	r3, #4
 8001194:	0112      	lsls	r2, r2, #4
 8001196:	b2d2      	uxtb	r2, r2
 8001198:	440b      	add	r3, r1
 800119a:	761a      	strb	r2, [r3, #24]
}
 800119c:	bf00      	nop
 800119e:	370c      	adds	r7, #12
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr
 80011a8:	e000e100 	.word	0xe000e100
 80011ac:	e000ed00 	.word	0xe000ed00

080011b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b089      	sub	sp, #36	; 0x24
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	60f8      	str	r0, [r7, #12]
 80011b8:	60b9      	str	r1, [r7, #8]
 80011ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	f003 0307 	and.w	r3, r3, #7
 80011c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011c4:	69fb      	ldr	r3, [r7, #28]
 80011c6:	f1c3 0307 	rsb	r3, r3, #7
 80011ca:	2b04      	cmp	r3, #4
 80011cc:	bf28      	it	cs
 80011ce:	2304      	movcs	r3, #4
 80011d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011d2:	69fb      	ldr	r3, [r7, #28]
 80011d4:	3304      	adds	r3, #4
 80011d6:	2b06      	cmp	r3, #6
 80011d8:	d902      	bls.n	80011e0 <NVIC_EncodePriority+0x30>
 80011da:	69fb      	ldr	r3, [r7, #28]
 80011dc:	3b03      	subs	r3, #3
 80011de:	e000      	b.n	80011e2 <NVIC_EncodePriority+0x32>
 80011e0:	2300      	movs	r3, #0
 80011e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80011e8:	69bb      	ldr	r3, [r7, #24]
 80011ea:	fa02 f303 	lsl.w	r3, r2, r3
 80011ee:	43da      	mvns	r2, r3
 80011f0:	68bb      	ldr	r3, [r7, #8]
 80011f2:	401a      	ands	r2, r3
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011f8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001202:	43d9      	mvns	r1, r3
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001208:	4313      	orrs	r3, r2
         );
}
 800120a:	4618      	mov	r0, r3
 800120c:	3724      	adds	r7, #36	; 0x24
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr
	...

08001218 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	3b01      	subs	r3, #1
 8001224:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001228:	d301      	bcc.n	800122e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800122a:	2301      	movs	r3, #1
 800122c:	e00f      	b.n	800124e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800122e:	4a0a      	ldr	r2, [pc, #40]	; (8001258 <SysTick_Config+0x40>)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	3b01      	subs	r3, #1
 8001234:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001236:	210f      	movs	r1, #15
 8001238:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800123c:	f7ff ff8e 	bl	800115c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001240:	4b05      	ldr	r3, [pc, #20]	; (8001258 <SysTick_Config+0x40>)
 8001242:	2200      	movs	r2, #0
 8001244:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001246:	4b04      	ldr	r3, [pc, #16]	; (8001258 <SysTick_Config+0x40>)
 8001248:	2207      	movs	r2, #7
 800124a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800124c:	2300      	movs	r3, #0
}
 800124e:	4618      	mov	r0, r3
 8001250:	3708      	adds	r7, #8
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	e000e010 	.word	0xe000e010

0800125c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001264:	6878      	ldr	r0, [r7, #4]
 8001266:	f7ff ff29 	bl	80010bc <__NVIC_SetPriorityGrouping>
}
 800126a:	bf00      	nop
 800126c:	3708      	adds	r7, #8
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}

08001272 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001272:	b580      	push	{r7, lr}
 8001274:	b086      	sub	sp, #24
 8001276:	af00      	add	r7, sp, #0
 8001278:	4603      	mov	r3, r0
 800127a:	60b9      	str	r1, [r7, #8]
 800127c:	607a      	str	r2, [r7, #4]
 800127e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001280:	2300      	movs	r3, #0
 8001282:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001284:	f7ff ff3e 	bl	8001104 <__NVIC_GetPriorityGrouping>
 8001288:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800128a:	687a      	ldr	r2, [r7, #4]
 800128c:	68b9      	ldr	r1, [r7, #8]
 800128e:	6978      	ldr	r0, [r7, #20]
 8001290:	f7ff ff8e 	bl	80011b0 <NVIC_EncodePriority>
 8001294:	4602      	mov	r2, r0
 8001296:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800129a:	4611      	mov	r1, r2
 800129c:	4618      	mov	r0, r3
 800129e:	f7ff ff5d 	bl	800115c <__NVIC_SetPriority>
}
 80012a2:	bf00      	nop
 80012a4:	3718      	adds	r7, #24
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}

080012aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012aa:	b580      	push	{r7, lr}
 80012ac:	b082      	sub	sp, #8
 80012ae:	af00      	add	r7, sp, #0
 80012b0:	4603      	mov	r3, r0
 80012b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012b8:	4618      	mov	r0, r3
 80012ba:	f7ff ff31 	bl	8001120 <__NVIC_EnableIRQ>
}
 80012be:	bf00      	nop
 80012c0:	3708      	adds	r7, #8
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}

080012c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012c6:	b580      	push	{r7, lr}
 80012c8:	b082      	sub	sp, #8
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012ce:	6878      	ldr	r0, [r7, #4]
 80012d0:	f7ff ffa2 	bl	8001218 <SysTick_Config>
 80012d4:	4603      	mov	r3, r0
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	3708      	adds	r7, #8
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}

080012de <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80012de:	b580      	push	{r7, lr}
 80012e0:	b084      	sub	sp, #16
 80012e2:	af00      	add	r7, sp, #0
 80012e4:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80012e6:	2300      	movs	r3, #0
 80012e8:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d101      	bne.n	80012f4 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80012f0:	2301      	movs	r3, #1
 80012f2:	e037      	b.n	8001364 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	2202      	movs	r2, #2
 80012f8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800130a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800130e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001318:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	68db      	ldr	r3, [r3, #12]
 800131e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001324:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	695b      	ldr	r3, [r3, #20]
 800132a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001330:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	69db      	ldr	r3, [r3, #28]
 8001336:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001338:	68fa      	ldr	r2, [r7, #12]
 800133a:	4313      	orrs	r3, r2
 800133c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	68fa      	ldr	r2, [r7, #12]
 8001344:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8001346:	6878      	ldr	r0, [r7, #4]
 8001348:	f000 f9b8 	bl	80016bc <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2200      	movs	r2, #0
 8001350:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	2201      	movs	r2, #1
 8001356:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	2200      	movs	r2, #0
 800135e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8001362:	2300      	movs	r3, #0
}  
 8001364:	4618      	mov	r0, r3
 8001366:	3710      	adds	r7, #16
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}

0800136c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b086      	sub	sp, #24
 8001370:	af00      	add	r7, sp, #0
 8001372:	60f8      	str	r0, [r7, #12]
 8001374:	60b9      	str	r1, [r7, #8]
 8001376:	607a      	str	r2, [r7, #4]
 8001378:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 800137a:	2300      	movs	r3, #0
 800137c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001384:	2b01      	cmp	r3, #1
 8001386:	d101      	bne.n	800138c <HAL_DMA_Start_IT+0x20>
 8001388:	2302      	movs	r3, #2
 800138a:	e04a      	b.n	8001422 <HAL_DMA_Start_IT+0xb6>
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	2201      	movs	r2, #1
 8001390:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800139a:	2b01      	cmp	r3, #1
 800139c:	d13a      	bne.n	8001414 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	2202      	movs	r2, #2
 80013a2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	2200      	movs	r2, #0
 80013aa:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	681a      	ldr	r2, [r3, #0]
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f022 0201 	bic.w	r2, r2, #1
 80013ba:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	687a      	ldr	r2, [r7, #4]
 80013c0:	68b9      	ldr	r1, [r7, #8]
 80013c2:	68f8      	ldr	r0, [r7, #12]
 80013c4:	f000 f94b 	bl	800165e <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d008      	beq.n	80013e2 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	681a      	ldr	r2, [r3, #0]
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f042 020e 	orr.w	r2, r2, #14
 80013de:	601a      	str	r2, [r3, #0]
 80013e0:	e00f      	b.n	8001402 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	681a      	ldr	r2, [r3, #0]
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f042 020a 	orr.w	r2, r2, #10
 80013f0:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	681a      	ldr	r2, [r3, #0]
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f022 0204 	bic.w	r2, r2, #4
 8001400:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	681a      	ldr	r2, [r3, #0]
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f042 0201 	orr.w	r2, r2, #1
 8001410:	601a      	str	r2, [r3, #0]
 8001412:	e005      	b.n	8001420 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	2200      	movs	r2, #0
 8001418:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 800141c:	2302      	movs	r3, #2
 800141e:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8001420:	7dfb      	ldrb	r3, [r7, #23]
} 
 8001422:	4618      	mov	r0, r3
 8001424:	3718      	adds	r7, #24
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}

0800142a <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800142a:	b480      	push	{r7}
 800142c:	b083      	sub	sp, #12
 800142e:	af00      	add	r7, sp, #0
 8001430:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001438:	2b02      	cmp	r3, #2
 800143a:	d008      	beq.n	800144e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2204      	movs	r2, #4
 8001440:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	2200      	movs	r2, #0
 8001446:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800144a:	2301      	movs	r3, #1
 800144c:	e020      	b.n	8001490 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	681a      	ldr	r2, [r3, #0]
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f022 020e 	bic.w	r2, r2, #14
 800145c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	681a      	ldr	r2, [r3, #0]
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f022 0201 	bic.w	r2, r2, #1
 800146c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001476:	2101      	movs	r1, #1
 8001478:	fa01 f202 	lsl.w	r2, r1, r2
 800147c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	2201      	movs	r2, #1
 8001482:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	2200      	movs	r2, #0
 800148a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 800148e:	2300      	movs	r3, #0
}
 8001490:	4618      	mov	r0, r3
 8001492:	370c      	adds	r7, #12
 8001494:	46bd      	mov	sp, r7
 8001496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149a:	4770      	bx	lr

0800149c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800149c:	b580      	push	{r7, lr}
 800149e:	b084      	sub	sp, #16
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80014a4:	2300      	movs	r3, #0
 80014a6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80014ae:	2b02      	cmp	r3, #2
 80014b0:	d005      	beq.n	80014be <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	2204      	movs	r2, #4
 80014b6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80014b8:	2301      	movs	r3, #1
 80014ba:	73fb      	strb	r3, [r7, #15]
 80014bc:	e027      	b.n	800150e <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	681a      	ldr	r2, [r3, #0]
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f022 020e 	bic.w	r2, r2, #14
 80014cc:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	681a      	ldr	r2, [r3, #0]
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f022 0201 	bic.w	r2, r2, #1
 80014dc:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014e6:	2101      	movs	r1, #1
 80014e8:	fa01 f202 	lsl.w	r2, r1, r2
 80014ec:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	2201      	movs	r2, #1
 80014f2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2200      	movs	r2, #0
 80014fa:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001502:	2b00      	cmp	r3, #0
 8001504:	d003      	beq.n	800150e <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800150a:	6878      	ldr	r0, [r7, #4]
 800150c:	4798      	blx	r3
    } 
  }
  return status;
 800150e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001510:	4618      	mov	r0, r3
 8001512:	3710      	adds	r7, #16
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}

08001518 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b084      	sub	sp, #16
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001534:	2204      	movs	r2, #4
 8001536:	409a      	lsls	r2, r3
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	4013      	ands	r3, r2
 800153c:	2b00      	cmp	r3, #0
 800153e:	d024      	beq.n	800158a <HAL_DMA_IRQHandler+0x72>
 8001540:	68bb      	ldr	r3, [r7, #8]
 8001542:	f003 0304 	and.w	r3, r3, #4
 8001546:	2b00      	cmp	r3, #0
 8001548:	d01f      	beq.n	800158a <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f003 0320 	and.w	r3, r3, #32
 8001554:	2b00      	cmp	r3, #0
 8001556:	d107      	bne.n	8001568 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	681a      	ldr	r2, [r3, #0]
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f022 0204 	bic.w	r2, r2, #4
 8001566:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001570:	2104      	movs	r1, #4
 8001572:	fa01 f202 	lsl.w	r2, r1, r2
 8001576:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800157c:	2b00      	cmp	r3, #0
 800157e:	d06a      	beq.n	8001656 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001584:	6878      	ldr	r0, [r7, #4]
 8001586:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8001588:	e065      	b.n	8001656 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800158e:	2202      	movs	r2, #2
 8001590:	409a      	lsls	r2, r3
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	4013      	ands	r3, r2
 8001596:	2b00      	cmp	r3, #0
 8001598:	d02c      	beq.n	80015f4 <HAL_DMA_IRQHandler+0xdc>
 800159a:	68bb      	ldr	r3, [r7, #8]
 800159c:	f003 0302 	and.w	r3, r3, #2
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d027      	beq.n	80015f4 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f003 0320 	and.w	r3, r3, #32
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d10b      	bne.n	80015ca <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	681a      	ldr	r2, [r3, #0]
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f022 020a 	bic.w	r2, r2, #10
 80015c0:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2201      	movs	r2, #1
 80015c6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015d2:	2102      	movs	r1, #2
 80015d4:	fa01 f202 	lsl.w	r2, r1, r2
 80015d8:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2200      	movs	r2, #0
 80015de:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d035      	beq.n	8001656 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015ee:	6878      	ldr	r0, [r7, #4]
 80015f0:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 80015f2:	e030      	b.n	8001656 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f8:	2208      	movs	r2, #8
 80015fa:	409a      	lsls	r2, r3
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	4013      	ands	r3, r2
 8001600:	2b00      	cmp	r3, #0
 8001602:	d028      	beq.n	8001656 <HAL_DMA_IRQHandler+0x13e>
 8001604:	68bb      	ldr	r3, [r7, #8]
 8001606:	f003 0308 	and.w	r3, r3, #8
 800160a:	2b00      	cmp	r3, #0
 800160c:	d023      	beq.n	8001656 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	681a      	ldr	r2, [r3, #0]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f022 020e 	bic.w	r2, r2, #14
 800161c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001626:	2101      	movs	r1, #1
 8001628:	fa01 f202 	lsl.w	r2, r1, r2
 800162c:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2201      	movs	r2, #1
 8001632:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2201      	movs	r2, #1
 8001638:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2200      	movs	r2, #0
 8001640:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001648:	2b00      	cmp	r3, #0
 800164a:	d004      	beq.n	8001656 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001650:	6878      	ldr	r0, [r7, #4]
 8001652:	4798      	blx	r3
    }
  }
}  
 8001654:	e7ff      	b.n	8001656 <HAL_DMA_IRQHandler+0x13e>
 8001656:	bf00      	nop
 8001658:	3710      	adds	r7, #16
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}

0800165e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800165e:	b480      	push	{r7}
 8001660:	b085      	sub	sp, #20
 8001662:	af00      	add	r7, sp, #0
 8001664:	60f8      	str	r0, [r7, #12]
 8001666:	60b9      	str	r1, [r7, #8]
 8001668:	607a      	str	r2, [r7, #4]
 800166a:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001674:	2101      	movs	r1, #1
 8001676:	fa01 f202 	lsl.w	r2, r1, r2
 800167a:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	683a      	ldr	r2, [r7, #0]
 8001682:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	2b10      	cmp	r3, #16
 800168a:	d108      	bne.n	800169e <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	687a      	ldr	r2, [r7, #4]
 8001692:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	68ba      	ldr	r2, [r7, #8]
 800169a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800169c:	e007      	b.n	80016ae <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	68ba      	ldr	r2, [r7, #8]
 80016a4:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	687a      	ldr	r2, [r7, #4]
 80016ac:	60da      	str	r2, [r3, #12]
}
 80016ae:	bf00      	nop
 80016b0:	3714      	adds	r7, #20
 80016b2:	46bd      	mov	sp, r7
 80016b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b8:	4770      	bx	lr
	...

080016bc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80016bc:	b480      	push	{r7}
 80016be:	b083      	sub	sp, #12
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	461a      	mov	r2, r3
 80016ca:	4b09      	ldr	r3, [pc, #36]	; (80016f0 <DMA_CalcBaseAndBitshift+0x34>)
 80016cc:	4413      	add	r3, r2
 80016ce:	4a09      	ldr	r2, [pc, #36]	; (80016f4 <DMA_CalcBaseAndBitshift+0x38>)
 80016d0:	fba2 2303 	umull	r2, r3, r2, r3
 80016d4:	091b      	lsrs	r3, r3, #4
 80016d6:	009a      	lsls	r2, r3, #2
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	4a06      	ldr	r2, [pc, #24]	; (80016f8 <DMA_CalcBaseAndBitshift+0x3c>)
 80016e0:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 80016e2:	bf00      	nop
 80016e4:	370c      	adds	r7, #12
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr
 80016ee:	bf00      	nop
 80016f0:	bffdfff8 	.word	0xbffdfff8
 80016f4:	cccccccd 	.word	0xcccccccd
 80016f8:	40020000 	.word	0x40020000

080016fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b087      	sub	sp, #28
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
 8001704:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001706:	2300      	movs	r3, #0
 8001708:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800170a:	e14e      	b.n	80019aa <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	681a      	ldr	r2, [r3, #0]
 8001710:	2101      	movs	r1, #1
 8001712:	697b      	ldr	r3, [r7, #20]
 8001714:	fa01 f303 	lsl.w	r3, r1, r3
 8001718:	4013      	ands	r3, r2
 800171a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	2b00      	cmp	r3, #0
 8001720:	f000 8140 	beq.w	80019a4 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	f003 0303 	and.w	r3, r3, #3
 800172c:	2b01      	cmp	r3, #1
 800172e:	d005      	beq.n	800173c <HAL_GPIO_Init+0x40>
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	f003 0303 	and.w	r3, r3, #3
 8001738:	2b02      	cmp	r3, #2
 800173a:	d130      	bne.n	800179e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	689b      	ldr	r3, [r3, #8]
 8001740:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001742:	697b      	ldr	r3, [r7, #20]
 8001744:	005b      	lsls	r3, r3, #1
 8001746:	2203      	movs	r2, #3
 8001748:	fa02 f303 	lsl.w	r3, r2, r3
 800174c:	43db      	mvns	r3, r3
 800174e:	693a      	ldr	r2, [r7, #16]
 8001750:	4013      	ands	r3, r2
 8001752:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	68da      	ldr	r2, [r3, #12]
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	005b      	lsls	r3, r3, #1
 800175c:	fa02 f303 	lsl.w	r3, r2, r3
 8001760:	693a      	ldr	r2, [r7, #16]
 8001762:	4313      	orrs	r3, r2
 8001764:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	693a      	ldr	r2, [r7, #16]
 800176a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001772:	2201      	movs	r2, #1
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	fa02 f303 	lsl.w	r3, r2, r3
 800177a:	43db      	mvns	r3, r3
 800177c:	693a      	ldr	r2, [r7, #16]
 800177e:	4013      	ands	r3, r2
 8001780:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	091b      	lsrs	r3, r3, #4
 8001788:	f003 0201 	and.w	r2, r3, #1
 800178c:	697b      	ldr	r3, [r7, #20]
 800178e:	fa02 f303 	lsl.w	r3, r2, r3
 8001792:	693a      	ldr	r2, [r7, #16]
 8001794:	4313      	orrs	r3, r2
 8001796:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	693a      	ldr	r2, [r7, #16]
 800179c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	f003 0303 	and.w	r3, r3, #3
 80017a6:	2b03      	cmp	r3, #3
 80017a8:	d017      	beq.n	80017da <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	68db      	ldr	r3, [r3, #12]
 80017ae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	005b      	lsls	r3, r3, #1
 80017b4:	2203      	movs	r2, #3
 80017b6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ba:	43db      	mvns	r3, r3
 80017bc:	693a      	ldr	r2, [r7, #16]
 80017be:	4013      	ands	r3, r2
 80017c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	689a      	ldr	r2, [r3, #8]
 80017c6:	697b      	ldr	r3, [r7, #20]
 80017c8:	005b      	lsls	r3, r3, #1
 80017ca:	fa02 f303 	lsl.w	r3, r2, r3
 80017ce:	693a      	ldr	r2, [r7, #16]
 80017d0:	4313      	orrs	r3, r2
 80017d2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	693a      	ldr	r2, [r7, #16]
 80017d8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	f003 0303 	and.w	r3, r3, #3
 80017e2:	2b02      	cmp	r3, #2
 80017e4:	d123      	bne.n	800182e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80017e6:	697b      	ldr	r3, [r7, #20]
 80017e8:	08da      	lsrs	r2, r3, #3
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	3208      	adds	r2, #8
 80017ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017f2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	f003 0307 	and.w	r3, r3, #7
 80017fa:	009b      	lsls	r3, r3, #2
 80017fc:	220f      	movs	r2, #15
 80017fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001802:	43db      	mvns	r3, r3
 8001804:	693a      	ldr	r2, [r7, #16]
 8001806:	4013      	ands	r3, r2
 8001808:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	691a      	ldr	r2, [r3, #16]
 800180e:	697b      	ldr	r3, [r7, #20]
 8001810:	f003 0307 	and.w	r3, r3, #7
 8001814:	009b      	lsls	r3, r3, #2
 8001816:	fa02 f303 	lsl.w	r3, r2, r3
 800181a:	693a      	ldr	r2, [r7, #16]
 800181c:	4313      	orrs	r3, r2
 800181e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	08da      	lsrs	r2, r3, #3
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	3208      	adds	r2, #8
 8001828:	6939      	ldr	r1, [r7, #16]
 800182a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	005b      	lsls	r3, r3, #1
 8001838:	2203      	movs	r2, #3
 800183a:	fa02 f303 	lsl.w	r3, r2, r3
 800183e:	43db      	mvns	r3, r3
 8001840:	693a      	ldr	r2, [r7, #16]
 8001842:	4013      	ands	r3, r2
 8001844:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	f003 0203 	and.w	r2, r3, #3
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	005b      	lsls	r3, r3, #1
 8001852:	fa02 f303 	lsl.w	r3, r2, r3
 8001856:	693a      	ldr	r2, [r7, #16]
 8001858:	4313      	orrs	r3, r2
 800185a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	693a      	ldr	r2, [r7, #16]
 8001860:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800186a:	2b00      	cmp	r3, #0
 800186c:	f000 809a 	beq.w	80019a4 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001870:	4b55      	ldr	r3, [pc, #340]	; (80019c8 <HAL_GPIO_Init+0x2cc>)
 8001872:	699b      	ldr	r3, [r3, #24]
 8001874:	4a54      	ldr	r2, [pc, #336]	; (80019c8 <HAL_GPIO_Init+0x2cc>)
 8001876:	f043 0301 	orr.w	r3, r3, #1
 800187a:	6193      	str	r3, [r2, #24]
 800187c:	4b52      	ldr	r3, [pc, #328]	; (80019c8 <HAL_GPIO_Init+0x2cc>)
 800187e:	699b      	ldr	r3, [r3, #24]
 8001880:	f003 0301 	and.w	r3, r3, #1
 8001884:	60bb      	str	r3, [r7, #8]
 8001886:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001888:	4a50      	ldr	r2, [pc, #320]	; (80019cc <HAL_GPIO_Init+0x2d0>)
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	089b      	lsrs	r3, r3, #2
 800188e:	3302      	adds	r3, #2
 8001890:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001894:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	f003 0303 	and.w	r3, r3, #3
 800189c:	009b      	lsls	r3, r3, #2
 800189e:	220f      	movs	r2, #15
 80018a0:	fa02 f303 	lsl.w	r3, r2, r3
 80018a4:	43db      	mvns	r3, r3
 80018a6:	693a      	ldr	r2, [r7, #16]
 80018a8:	4013      	ands	r3, r2
 80018aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80018b2:	d013      	beq.n	80018dc <HAL_GPIO_Init+0x1e0>
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	4a46      	ldr	r2, [pc, #280]	; (80019d0 <HAL_GPIO_Init+0x2d4>)
 80018b8:	4293      	cmp	r3, r2
 80018ba:	d00d      	beq.n	80018d8 <HAL_GPIO_Init+0x1dc>
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	4a45      	ldr	r2, [pc, #276]	; (80019d4 <HAL_GPIO_Init+0x2d8>)
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d007      	beq.n	80018d4 <HAL_GPIO_Init+0x1d8>
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	4a44      	ldr	r2, [pc, #272]	; (80019d8 <HAL_GPIO_Init+0x2dc>)
 80018c8:	4293      	cmp	r3, r2
 80018ca:	d101      	bne.n	80018d0 <HAL_GPIO_Init+0x1d4>
 80018cc:	2303      	movs	r3, #3
 80018ce:	e006      	b.n	80018de <HAL_GPIO_Init+0x1e2>
 80018d0:	2305      	movs	r3, #5
 80018d2:	e004      	b.n	80018de <HAL_GPIO_Init+0x1e2>
 80018d4:	2302      	movs	r3, #2
 80018d6:	e002      	b.n	80018de <HAL_GPIO_Init+0x1e2>
 80018d8:	2301      	movs	r3, #1
 80018da:	e000      	b.n	80018de <HAL_GPIO_Init+0x1e2>
 80018dc:	2300      	movs	r3, #0
 80018de:	697a      	ldr	r2, [r7, #20]
 80018e0:	f002 0203 	and.w	r2, r2, #3
 80018e4:	0092      	lsls	r2, r2, #2
 80018e6:	4093      	lsls	r3, r2
 80018e8:	693a      	ldr	r2, [r7, #16]
 80018ea:	4313      	orrs	r3, r2
 80018ec:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80018ee:	4937      	ldr	r1, [pc, #220]	; (80019cc <HAL_GPIO_Init+0x2d0>)
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	089b      	lsrs	r3, r3, #2
 80018f4:	3302      	adds	r3, #2
 80018f6:	693a      	ldr	r2, [r7, #16]
 80018f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80018fc:	4b37      	ldr	r3, [pc, #220]	; (80019dc <HAL_GPIO_Init+0x2e0>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	43db      	mvns	r3, r3
 8001906:	693a      	ldr	r2, [r7, #16]
 8001908:	4013      	ands	r3, r2
 800190a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001914:	2b00      	cmp	r3, #0
 8001916:	d003      	beq.n	8001920 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001918:	693a      	ldr	r2, [r7, #16]
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	4313      	orrs	r3, r2
 800191e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001920:	4a2e      	ldr	r2, [pc, #184]	; (80019dc <HAL_GPIO_Init+0x2e0>)
 8001922:	693b      	ldr	r3, [r7, #16]
 8001924:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001926:	4b2d      	ldr	r3, [pc, #180]	; (80019dc <HAL_GPIO_Init+0x2e0>)
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	43db      	mvns	r3, r3
 8001930:	693a      	ldr	r2, [r7, #16]
 8001932:	4013      	ands	r3, r2
 8001934:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800193e:	2b00      	cmp	r3, #0
 8001940:	d003      	beq.n	800194a <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001942:	693a      	ldr	r2, [r7, #16]
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	4313      	orrs	r3, r2
 8001948:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800194a:	4a24      	ldr	r2, [pc, #144]	; (80019dc <HAL_GPIO_Init+0x2e0>)
 800194c:	693b      	ldr	r3, [r7, #16]
 800194e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001950:	4b22      	ldr	r3, [pc, #136]	; (80019dc <HAL_GPIO_Init+0x2e0>)
 8001952:	689b      	ldr	r3, [r3, #8]
 8001954:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	43db      	mvns	r3, r3
 800195a:	693a      	ldr	r2, [r7, #16]
 800195c:	4013      	ands	r3, r2
 800195e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001968:	2b00      	cmp	r3, #0
 800196a:	d003      	beq.n	8001974 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 800196c:	693a      	ldr	r2, [r7, #16]
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	4313      	orrs	r3, r2
 8001972:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001974:	4a19      	ldr	r2, [pc, #100]	; (80019dc <HAL_GPIO_Init+0x2e0>)
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800197a:	4b18      	ldr	r3, [pc, #96]	; (80019dc <HAL_GPIO_Init+0x2e0>)
 800197c:	68db      	ldr	r3, [r3, #12]
 800197e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	43db      	mvns	r3, r3
 8001984:	693a      	ldr	r2, [r7, #16]
 8001986:	4013      	ands	r3, r2
 8001988:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001992:	2b00      	cmp	r3, #0
 8001994:	d003      	beq.n	800199e <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001996:	693a      	ldr	r2, [r7, #16]
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	4313      	orrs	r3, r2
 800199c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800199e:	4a0f      	ldr	r2, [pc, #60]	; (80019dc <HAL_GPIO_Init+0x2e0>)
 80019a0:	693b      	ldr	r3, [r7, #16]
 80019a2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	3301      	adds	r3, #1
 80019a8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	681a      	ldr	r2, [r3, #0]
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	fa22 f303 	lsr.w	r3, r2, r3
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	f47f aea9 	bne.w	800170c <HAL_GPIO_Init+0x10>
  }
}
 80019ba:	bf00      	nop
 80019bc:	371c      	adds	r7, #28
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr
 80019c6:	bf00      	nop
 80019c8:	40021000 	.word	0x40021000
 80019cc:	40010000 	.word	0x40010000
 80019d0:	48000400 	.word	0x48000400
 80019d4:	48000800 	.word	0x48000800
 80019d8:	48000c00 	.word	0x48000c00
 80019dc:	40010400 	.word	0x40010400

080019e0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b085      	sub	sp, #20
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
 80019e8:	460b      	mov	r3, r1
 80019ea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	691a      	ldr	r2, [r3, #16]
 80019f0:	887b      	ldrh	r3, [r7, #2]
 80019f2:	4013      	ands	r3, r2
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d002      	beq.n	80019fe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80019f8:	2301      	movs	r3, #1
 80019fa:	73fb      	strb	r3, [r7, #15]
 80019fc:	e001      	b.n	8001a02 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80019fe:	2300      	movs	r3, #0
 8001a00:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001a02:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	3714      	adds	r7, #20
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0e:	4770      	bx	lr

08001a10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b083      	sub	sp, #12
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
 8001a18:	460b      	mov	r3, r1
 8001a1a:	807b      	strh	r3, [r7, #2]
 8001a1c:	4613      	mov	r3, r2
 8001a1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a20:	787b      	ldrb	r3, [r7, #1]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d003      	beq.n	8001a2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001a26:	887a      	ldrh	r2, [r7, #2]
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001a2c:	e002      	b.n	8001a34 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001a2e:	887a      	ldrh	r2, [r7, #2]
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001a34:	bf00      	nop
 8001a36:	370c      	adds	r7, #12
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3e:	4770      	bx	lr

08001a40 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b082      	sub	sp, #8
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	4603      	mov	r3, r0
 8001a48:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001a4a:	4b08      	ldr	r3, [pc, #32]	; (8001a6c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a4c:	695a      	ldr	r2, [r3, #20]
 8001a4e:	88fb      	ldrh	r3, [r7, #6]
 8001a50:	4013      	ands	r3, r2
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d006      	beq.n	8001a64 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001a56:	4a05      	ldr	r2, [pc, #20]	; (8001a6c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a58:	88fb      	ldrh	r3, [r7, #6]
 8001a5a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001a5c:	88fb      	ldrh	r3, [r7, #6]
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f7fe fc1a 	bl	8000298 <HAL_GPIO_EXTI_Callback>
  }
}
 8001a64:	bf00      	nop
 8001a66:	3708      	adds	r7, #8
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	40010400 	.word	0x40010400

08001a70 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001a76:	af00      	add	r7, sp, #0
 8001a78:	1d3b      	adds	r3, r7, #4
 8001a7a:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a7c:	1d3b      	adds	r3, r7, #4
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d102      	bne.n	8001a8a <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001a84:	2301      	movs	r3, #1
 8001a86:	f000 bef4 	b.w	8002872 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a8a:	1d3b      	adds	r3, r7, #4
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f003 0301 	and.w	r3, r3, #1
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	f000 816a 	beq.w	8001d6e <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001a9a:	4bb3      	ldr	r3, [pc, #716]	; (8001d68 <HAL_RCC_OscConfig+0x2f8>)
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	f003 030c 	and.w	r3, r3, #12
 8001aa2:	2b04      	cmp	r3, #4
 8001aa4:	d00c      	beq.n	8001ac0 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001aa6:	4bb0      	ldr	r3, [pc, #704]	; (8001d68 <HAL_RCC_OscConfig+0x2f8>)
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	f003 030c 	and.w	r3, r3, #12
 8001aae:	2b08      	cmp	r3, #8
 8001ab0:	d159      	bne.n	8001b66 <HAL_RCC_OscConfig+0xf6>
 8001ab2:	4bad      	ldr	r3, [pc, #692]	; (8001d68 <HAL_RCC_OscConfig+0x2f8>)
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001aba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001abe:	d152      	bne.n	8001b66 <HAL_RCC_OscConfig+0xf6>
 8001ac0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ac4:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ac8:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001acc:	fa93 f3a3 	rbit	r3, r3
 8001ad0:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001ad4:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ad8:	fab3 f383 	clz	r3, r3
 8001adc:	b2db      	uxtb	r3, r3
 8001ade:	095b      	lsrs	r3, r3, #5
 8001ae0:	b2db      	uxtb	r3, r3
 8001ae2:	f043 0301 	orr.w	r3, r3, #1
 8001ae6:	b2db      	uxtb	r3, r3
 8001ae8:	2b01      	cmp	r3, #1
 8001aea:	d102      	bne.n	8001af2 <HAL_RCC_OscConfig+0x82>
 8001aec:	4b9e      	ldr	r3, [pc, #632]	; (8001d68 <HAL_RCC_OscConfig+0x2f8>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	e015      	b.n	8001b1e <HAL_RCC_OscConfig+0xae>
 8001af2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001af6:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001afa:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001afe:	fa93 f3a3 	rbit	r3, r3
 8001b02:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001b06:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b0a:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001b0e:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001b12:	fa93 f3a3 	rbit	r3, r3
 8001b16:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001b1a:	4b93      	ldr	r3, [pc, #588]	; (8001d68 <HAL_RCC_OscConfig+0x2f8>)
 8001b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b1e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001b22:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001b26:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001b2a:	fa92 f2a2 	rbit	r2, r2
 8001b2e:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001b32:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001b36:	fab2 f282 	clz	r2, r2
 8001b3a:	b2d2      	uxtb	r2, r2
 8001b3c:	f042 0220 	orr.w	r2, r2, #32
 8001b40:	b2d2      	uxtb	r2, r2
 8001b42:	f002 021f 	and.w	r2, r2, #31
 8001b46:	2101      	movs	r1, #1
 8001b48:	fa01 f202 	lsl.w	r2, r1, r2
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	f000 810c 	beq.w	8001d6c <HAL_RCC_OscConfig+0x2fc>
 8001b54:	1d3b      	adds	r3, r7, #4
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	f040 8106 	bne.w	8001d6c <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8001b60:	2301      	movs	r3, #1
 8001b62:	f000 be86 	b.w	8002872 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b66:	1d3b      	adds	r3, r7, #4
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b70:	d106      	bne.n	8001b80 <HAL_RCC_OscConfig+0x110>
 8001b72:	4b7d      	ldr	r3, [pc, #500]	; (8001d68 <HAL_RCC_OscConfig+0x2f8>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4a7c      	ldr	r2, [pc, #496]	; (8001d68 <HAL_RCC_OscConfig+0x2f8>)
 8001b78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b7c:	6013      	str	r3, [r2, #0]
 8001b7e:	e030      	b.n	8001be2 <HAL_RCC_OscConfig+0x172>
 8001b80:	1d3b      	adds	r3, r7, #4
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d10c      	bne.n	8001ba4 <HAL_RCC_OscConfig+0x134>
 8001b8a:	4b77      	ldr	r3, [pc, #476]	; (8001d68 <HAL_RCC_OscConfig+0x2f8>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4a76      	ldr	r2, [pc, #472]	; (8001d68 <HAL_RCC_OscConfig+0x2f8>)
 8001b90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b94:	6013      	str	r3, [r2, #0]
 8001b96:	4b74      	ldr	r3, [pc, #464]	; (8001d68 <HAL_RCC_OscConfig+0x2f8>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4a73      	ldr	r2, [pc, #460]	; (8001d68 <HAL_RCC_OscConfig+0x2f8>)
 8001b9c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ba0:	6013      	str	r3, [r2, #0]
 8001ba2:	e01e      	b.n	8001be2 <HAL_RCC_OscConfig+0x172>
 8001ba4:	1d3b      	adds	r3, r7, #4
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001bae:	d10c      	bne.n	8001bca <HAL_RCC_OscConfig+0x15a>
 8001bb0:	4b6d      	ldr	r3, [pc, #436]	; (8001d68 <HAL_RCC_OscConfig+0x2f8>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a6c      	ldr	r2, [pc, #432]	; (8001d68 <HAL_RCC_OscConfig+0x2f8>)
 8001bb6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bba:	6013      	str	r3, [r2, #0]
 8001bbc:	4b6a      	ldr	r3, [pc, #424]	; (8001d68 <HAL_RCC_OscConfig+0x2f8>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a69      	ldr	r2, [pc, #420]	; (8001d68 <HAL_RCC_OscConfig+0x2f8>)
 8001bc2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bc6:	6013      	str	r3, [r2, #0]
 8001bc8:	e00b      	b.n	8001be2 <HAL_RCC_OscConfig+0x172>
 8001bca:	4b67      	ldr	r3, [pc, #412]	; (8001d68 <HAL_RCC_OscConfig+0x2f8>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4a66      	ldr	r2, [pc, #408]	; (8001d68 <HAL_RCC_OscConfig+0x2f8>)
 8001bd0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bd4:	6013      	str	r3, [r2, #0]
 8001bd6:	4b64      	ldr	r3, [pc, #400]	; (8001d68 <HAL_RCC_OscConfig+0x2f8>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4a63      	ldr	r2, [pc, #396]	; (8001d68 <HAL_RCC_OscConfig+0x2f8>)
 8001bdc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001be0:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001be2:	4b61      	ldr	r3, [pc, #388]	; (8001d68 <HAL_RCC_OscConfig+0x2f8>)
 8001be4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001be6:	f023 020f 	bic.w	r2, r3, #15
 8001bea:	1d3b      	adds	r3, r7, #4
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	689b      	ldr	r3, [r3, #8]
 8001bf0:	495d      	ldr	r1, [pc, #372]	; (8001d68 <HAL_RCC_OscConfig+0x2f8>)
 8001bf2:	4313      	orrs	r3, r2
 8001bf4:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001bf6:	1d3b      	adds	r3, r7, #4
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d059      	beq.n	8001cb4 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c00:	f7ff fa2e 	bl	8001060 <HAL_GetTick>
 8001c04:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c08:	e00a      	b.n	8001c20 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c0a:	f7ff fa29 	bl	8001060 <HAL_GetTick>
 8001c0e:	4602      	mov	r2, r0
 8001c10:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c14:	1ad3      	subs	r3, r2, r3
 8001c16:	2b64      	cmp	r3, #100	; 0x64
 8001c18:	d902      	bls.n	8001c20 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8001c1a:	2303      	movs	r3, #3
 8001c1c:	f000 be29 	b.w	8002872 <HAL_RCC_OscConfig+0xe02>
 8001c20:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c24:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c28:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001c2c:	fa93 f3a3 	rbit	r3, r3
 8001c30:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001c34:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c38:	fab3 f383 	clz	r3, r3
 8001c3c:	b2db      	uxtb	r3, r3
 8001c3e:	095b      	lsrs	r3, r3, #5
 8001c40:	b2db      	uxtb	r3, r3
 8001c42:	f043 0301 	orr.w	r3, r3, #1
 8001c46:	b2db      	uxtb	r3, r3
 8001c48:	2b01      	cmp	r3, #1
 8001c4a:	d102      	bne.n	8001c52 <HAL_RCC_OscConfig+0x1e2>
 8001c4c:	4b46      	ldr	r3, [pc, #280]	; (8001d68 <HAL_RCC_OscConfig+0x2f8>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	e015      	b.n	8001c7e <HAL_RCC_OscConfig+0x20e>
 8001c52:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c56:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c5a:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001c5e:	fa93 f3a3 	rbit	r3, r3
 8001c62:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001c66:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c6a:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001c6e:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001c72:	fa93 f3a3 	rbit	r3, r3
 8001c76:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001c7a:	4b3b      	ldr	r3, [pc, #236]	; (8001d68 <HAL_RCC_OscConfig+0x2f8>)
 8001c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c7e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001c82:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001c86:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001c8a:	fa92 f2a2 	rbit	r2, r2
 8001c8e:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001c92:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001c96:	fab2 f282 	clz	r2, r2
 8001c9a:	b2d2      	uxtb	r2, r2
 8001c9c:	f042 0220 	orr.w	r2, r2, #32
 8001ca0:	b2d2      	uxtb	r2, r2
 8001ca2:	f002 021f 	and.w	r2, r2, #31
 8001ca6:	2101      	movs	r1, #1
 8001ca8:	fa01 f202 	lsl.w	r2, r1, r2
 8001cac:	4013      	ands	r3, r2
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d0ab      	beq.n	8001c0a <HAL_RCC_OscConfig+0x19a>
 8001cb2:	e05c      	b.n	8001d6e <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cb4:	f7ff f9d4 	bl	8001060 <HAL_GetTick>
 8001cb8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cbc:	e00a      	b.n	8001cd4 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001cbe:	f7ff f9cf 	bl	8001060 <HAL_GetTick>
 8001cc2:	4602      	mov	r2, r0
 8001cc4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001cc8:	1ad3      	subs	r3, r2, r3
 8001cca:	2b64      	cmp	r3, #100	; 0x64
 8001ccc:	d902      	bls.n	8001cd4 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8001cce:	2303      	movs	r3, #3
 8001cd0:	f000 bdcf 	b.w	8002872 <HAL_RCC_OscConfig+0xe02>
 8001cd4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001cd8:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cdc:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001ce0:	fa93 f3a3 	rbit	r3, r3
 8001ce4:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001ce8:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cec:	fab3 f383 	clz	r3, r3
 8001cf0:	b2db      	uxtb	r3, r3
 8001cf2:	095b      	lsrs	r3, r3, #5
 8001cf4:	b2db      	uxtb	r3, r3
 8001cf6:	f043 0301 	orr.w	r3, r3, #1
 8001cfa:	b2db      	uxtb	r3, r3
 8001cfc:	2b01      	cmp	r3, #1
 8001cfe:	d102      	bne.n	8001d06 <HAL_RCC_OscConfig+0x296>
 8001d00:	4b19      	ldr	r3, [pc, #100]	; (8001d68 <HAL_RCC_OscConfig+0x2f8>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	e015      	b.n	8001d32 <HAL_RCC_OscConfig+0x2c2>
 8001d06:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d0a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d0e:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001d12:	fa93 f3a3 	rbit	r3, r3
 8001d16:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001d1a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d1e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001d22:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001d26:	fa93 f3a3 	rbit	r3, r3
 8001d2a:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001d2e:	4b0e      	ldr	r3, [pc, #56]	; (8001d68 <HAL_RCC_OscConfig+0x2f8>)
 8001d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d32:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001d36:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001d3a:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001d3e:	fa92 f2a2 	rbit	r2, r2
 8001d42:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001d46:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001d4a:	fab2 f282 	clz	r2, r2
 8001d4e:	b2d2      	uxtb	r2, r2
 8001d50:	f042 0220 	orr.w	r2, r2, #32
 8001d54:	b2d2      	uxtb	r2, r2
 8001d56:	f002 021f 	and.w	r2, r2, #31
 8001d5a:	2101      	movs	r1, #1
 8001d5c:	fa01 f202 	lsl.w	r2, r1, r2
 8001d60:	4013      	ands	r3, r2
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d1ab      	bne.n	8001cbe <HAL_RCC_OscConfig+0x24e>
 8001d66:	e002      	b.n	8001d6e <HAL_RCC_OscConfig+0x2fe>
 8001d68:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d6e:	1d3b      	adds	r3, r7, #4
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f003 0302 	and.w	r3, r3, #2
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	f000 816f 	beq.w	800205c <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001d7e:	4bd0      	ldr	r3, [pc, #832]	; (80020c0 <HAL_RCC_OscConfig+0x650>)
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	f003 030c 	and.w	r3, r3, #12
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d00b      	beq.n	8001da2 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001d8a:	4bcd      	ldr	r3, [pc, #820]	; (80020c0 <HAL_RCC_OscConfig+0x650>)
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	f003 030c 	and.w	r3, r3, #12
 8001d92:	2b08      	cmp	r3, #8
 8001d94:	d16c      	bne.n	8001e70 <HAL_RCC_OscConfig+0x400>
 8001d96:	4bca      	ldr	r3, [pc, #808]	; (80020c0 <HAL_RCC_OscConfig+0x650>)
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d166      	bne.n	8001e70 <HAL_RCC_OscConfig+0x400>
 8001da2:	2302      	movs	r3, #2
 8001da4:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001da8:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001dac:	fa93 f3a3 	rbit	r3, r3
 8001db0:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001db4:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001db8:	fab3 f383 	clz	r3, r3
 8001dbc:	b2db      	uxtb	r3, r3
 8001dbe:	095b      	lsrs	r3, r3, #5
 8001dc0:	b2db      	uxtb	r3, r3
 8001dc2:	f043 0301 	orr.w	r3, r3, #1
 8001dc6:	b2db      	uxtb	r3, r3
 8001dc8:	2b01      	cmp	r3, #1
 8001dca:	d102      	bne.n	8001dd2 <HAL_RCC_OscConfig+0x362>
 8001dcc:	4bbc      	ldr	r3, [pc, #752]	; (80020c0 <HAL_RCC_OscConfig+0x650>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	e013      	b.n	8001dfa <HAL_RCC_OscConfig+0x38a>
 8001dd2:	2302      	movs	r3, #2
 8001dd4:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dd8:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001ddc:	fa93 f3a3 	rbit	r3, r3
 8001de0:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001de4:	2302      	movs	r3, #2
 8001de6:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001dea:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001dee:	fa93 f3a3 	rbit	r3, r3
 8001df2:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001df6:	4bb2      	ldr	r3, [pc, #712]	; (80020c0 <HAL_RCC_OscConfig+0x650>)
 8001df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dfa:	2202      	movs	r2, #2
 8001dfc:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001e00:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001e04:	fa92 f2a2 	rbit	r2, r2
 8001e08:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001e0c:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001e10:	fab2 f282 	clz	r2, r2
 8001e14:	b2d2      	uxtb	r2, r2
 8001e16:	f042 0220 	orr.w	r2, r2, #32
 8001e1a:	b2d2      	uxtb	r2, r2
 8001e1c:	f002 021f 	and.w	r2, r2, #31
 8001e20:	2101      	movs	r1, #1
 8001e22:	fa01 f202 	lsl.w	r2, r1, r2
 8001e26:	4013      	ands	r3, r2
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d007      	beq.n	8001e3c <HAL_RCC_OscConfig+0x3cc>
 8001e2c:	1d3b      	adds	r3, r7, #4
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	691b      	ldr	r3, [r3, #16]
 8001e32:	2b01      	cmp	r3, #1
 8001e34:	d002      	beq.n	8001e3c <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
 8001e38:	f000 bd1b 	b.w	8002872 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e3c:	4ba0      	ldr	r3, [pc, #640]	; (80020c0 <HAL_RCC_OscConfig+0x650>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e44:	1d3b      	adds	r3, r7, #4
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	695b      	ldr	r3, [r3, #20]
 8001e4a:	21f8      	movs	r1, #248	; 0xf8
 8001e4c:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e50:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001e54:	fa91 f1a1 	rbit	r1, r1
 8001e58:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001e5c:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001e60:	fab1 f181 	clz	r1, r1
 8001e64:	b2c9      	uxtb	r1, r1
 8001e66:	408b      	lsls	r3, r1
 8001e68:	4995      	ldr	r1, [pc, #596]	; (80020c0 <HAL_RCC_OscConfig+0x650>)
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e6e:	e0f5      	b.n	800205c <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e70:	1d3b      	adds	r3, r7, #4
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	691b      	ldr	r3, [r3, #16]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	f000 8085 	beq.w	8001f86 <HAL_RCC_OscConfig+0x516>
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e82:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001e86:	fa93 f3a3 	rbit	r3, r3
 8001e8a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001e8e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e92:	fab3 f383 	clz	r3, r3
 8001e96:	b2db      	uxtb	r3, r3
 8001e98:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001e9c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001ea0:	009b      	lsls	r3, r3, #2
 8001ea2:	461a      	mov	r2, r3
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ea8:	f7ff f8da 	bl	8001060 <HAL_GetTick>
 8001eac:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001eb0:	e00a      	b.n	8001ec8 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001eb2:	f7ff f8d5 	bl	8001060 <HAL_GetTick>
 8001eb6:	4602      	mov	r2, r0
 8001eb8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001ebc:	1ad3      	subs	r3, r2, r3
 8001ebe:	2b02      	cmp	r3, #2
 8001ec0:	d902      	bls.n	8001ec8 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8001ec2:	2303      	movs	r3, #3
 8001ec4:	f000 bcd5 	b.w	8002872 <HAL_RCC_OscConfig+0xe02>
 8001ec8:	2302      	movs	r3, #2
 8001eca:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ece:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001ed2:	fa93 f3a3 	rbit	r3, r3
 8001ed6:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001eda:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ede:	fab3 f383 	clz	r3, r3
 8001ee2:	b2db      	uxtb	r3, r3
 8001ee4:	095b      	lsrs	r3, r3, #5
 8001ee6:	b2db      	uxtb	r3, r3
 8001ee8:	f043 0301 	orr.w	r3, r3, #1
 8001eec:	b2db      	uxtb	r3, r3
 8001eee:	2b01      	cmp	r3, #1
 8001ef0:	d102      	bne.n	8001ef8 <HAL_RCC_OscConfig+0x488>
 8001ef2:	4b73      	ldr	r3, [pc, #460]	; (80020c0 <HAL_RCC_OscConfig+0x650>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	e013      	b.n	8001f20 <HAL_RCC_OscConfig+0x4b0>
 8001ef8:	2302      	movs	r3, #2
 8001efa:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001efe:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001f02:	fa93 f3a3 	rbit	r3, r3
 8001f06:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001f0a:	2302      	movs	r3, #2
 8001f0c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001f10:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001f14:	fa93 f3a3 	rbit	r3, r3
 8001f18:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001f1c:	4b68      	ldr	r3, [pc, #416]	; (80020c0 <HAL_RCC_OscConfig+0x650>)
 8001f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f20:	2202      	movs	r2, #2
 8001f22:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001f26:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001f2a:	fa92 f2a2 	rbit	r2, r2
 8001f2e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001f32:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001f36:	fab2 f282 	clz	r2, r2
 8001f3a:	b2d2      	uxtb	r2, r2
 8001f3c:	f042 0220 	orr.w	r2, r2, #32
 8001f40:	b2d2      	uxtb	r2, r2
 8001f42:	f002 021f 	and.w	r2, r2, #31
 8001f46:	2101      	movs	r1, #1
 8001f48:	fa01 f202 	lsl.w	r2, r1, r2
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d0af      	beq.n	8001eb2 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f52:	4b5b      	ldr	r3, [pc, #364]	; (80020c0 <HAL_RCC_OscConfig+0x650>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f5a:	1d3b      	adds	r3, r7, #4
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	695b      	ldr	r3, [r3, #20]
 8001f60:	21f8      	movs	r1, #248	; 0xf8
 8001f62:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f66:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001f6a:	fa91 f1a1 	rbit	r1, r1
 8001f6e:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001f72:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001f76:	fab1 f181 	clz	r1, r1
 8001f7a:	b2c9      	uxtb	r1, r1
 8001f7c:	408b      	lsls	r3, r1
 8001f7e:	4950      	ldr	r1, [pc, #320]	; (80020c0 <HAL_RCC_OscConfig+0x650>)
 8001f80:	4313      	orrs	r3, r2
 8001f82:	600b      	str	r3, [r1, #0]
 8001f84:	e06a      	b.n	800205c <HAL_RCC_OscConfig+0x5ec>
 8001f86:	2301      	movs	r3, #1
 8001f88:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f8c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001f90:	fa93 f3a3 	rbit	r3, r3
 8001f94:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001f98:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f9c:	fab3 f383 	clz	r3, r3
 8001fa0:	b2db      	uxtb	r3, r3
 8001fa2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001fa6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001faa:	009b      	lsls	r3, r3, #2
 8001fac:	461a      	mov	r2, r3
 8001fae:	2300      	movs	r3, #0
 8001fb0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fb2:	f7ff f855 	bl	8001060 <HAL_GetTick>
 8001fb6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fba:	e00a      	b.n	8001fd2 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fbc:	f7ff f850 	bl	8001060 <HAL_GetTick>
 8001fc0:	4602      	mov	r2, r0
 8001fc2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001fc6:	1ad3      	subs	r3, r2, r3
 8001fc8:	2b02      	cmp	r3, #2
 8001fca:	d902      	bls.n	8001fd2 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8001fcc:	2303      	movs	r3, #3
 8001fce:	f000 bc50 	b.w	8002872 <HAL_RCC_OscConfig+0xe02>
 8001fd2:	2302      	movs	r3, #2
 8001fd4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fd8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001fdc:	fa93 f3a3 	rbit	r3, r3
 8001fe0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001fe4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fe8:	fab3 f383 	clz	r3, r3
 8001fec:	b2db      	uxtb	r3, r3
 8001fee:	095b      	lsrs	r3, r3, #5
 8001ff0:	b2db      	uxtb	r3, r3
 8001ff2:	f043 0301 	orr.w	r3, r3, #1
 8001ff6:	b2db      	uxtb	r3, r3
 8001ff8:	2b01      	cmp	r3, #1
 8001ffa:	d102      	bne.n	8002002 <HAL_RCC_OscConfig+0x592>
 8001ffc:	4b30      	ldr	r3, [pc, #192]	; (80020c0 <HAL_RCC_OscConfig+0x650>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	e013      	b.n	800202a <HAL_RCC_OscConfig+0x5ba>
 8002002:	2302      	movs	r3, #2
 8002004:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002008:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800200c:	fa93 f3a3 	rbit	r3, r3
 8002010:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002014:	2302      	movs	r3, #2
 8002016:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800201a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800201e:	fa93 f3a3 	rbit	r3, r3
 8002022:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002026:	4b26      	ldr	r3, [pc, #152]	; (80020c0 <HAL_RCC_OscConfig+0x650>)
 8002028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800202a:	2202      	movs	r2, #2
 800202c:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002030:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002034:	fa92 f2a2 	rbit	r2, r2
 8002038:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800203c:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002040:	fab2 f282 	clz	r2, r2
 8002044:	b2d2      	uxtb	r2, r2
 8002046:	f042 0220 	orr.w	r2, r2, #32
 800204a:	b2d2      	uxtb	r2, r2
 800204c:	f002 021f 	and.w	r2, r2, #31
 8002050:	2101      	movs	r1, #1
 8002052:	fa01 f202 	lsl.w	r2, r1, r2
 8002056:	4013      	ands	r3, r2
 8002058:	2b00      	cmp	r3, #0
 800205a:	d1af      	bne.n	8001fbc <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800205c:	1d3b      	adds	r3, r7, #4
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f003 0308 	and.w	r3, r3, #8
 8002066:	2b00      	cmp	r3, #0
 8002068:	f000 80da 	beq.w	8002220 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800206c:	1d3b      	adds	r3, r7, #4
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	699b      	ldr	r3, [r3, #24]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d069      	beq.n	800214a <HAL_RCC_OscConfig+0x6da>
 8002076:	2301      	movs	r3, #1
 8002078:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800207c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002080:	fa93 f3a3 	rbit	r3, r3
 8002084:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002088:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800208c:	fab3 f383 	clz	r3, r3
 8002090:	b2db      	uxtb	r3, r3
 8002092:	461a      	mov	r2, r3
 8002094:	4b0b      	ldr	r3, [pc, #44]	; (80020c4 <HAL_RCC_OscConfig+0x654>)
 8002096:	4413      	add	r3, r2
 8002098:	009b      	lsls	r3, r3, #2
 800209a:	461a      	mov	r2, r3
 800209c:	2301      	movs	r3, #1
 800209e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020a0:	f7fe ffde 	bl	8001060 <HAL_GetTick>
 80020a4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020a8:	e00e      	b.n	80020c8 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020aa:	f7fe ffd9 	bl	8001060 <HAL_GetTick>
 80020ae:	4602      	mov	r2, r0
 80020b0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80020b4:	1ad3      	subs	r3, r2, r3
 80020b6:	2b02      	cmp	r3, #2
 80020b8:	d906      	bls.n	80020c8 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 80020ba:	2303      	movs	r3, #3
 80020bc:	e3d9      	b.n	8002872 <HAL_RCC_OscConfig+0xe02>
 80020be:	bf00      	nop
 80020c0:	40021000 	.word	0x40021000
 80020c4:	10908120 	.word	0x10908120
 80020c8:	2302      	movs	r3, #2
 80020ca:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ce:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80020d2:	fa93 f3a3 	rbit	r3, r3
 80020d6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80020da:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80020de:	2202      	movs	r2, #2
 80020e0:	601a      	str	r2, [r3, #0]
 80020e2:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	fa93 f2a3 	rbit	r2, r3
 80020ec:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80020f0:	601a      	str	r2, [r3, #0]
 80020f2:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80020f6:	2202      	movs	r2, #2
 80020f8:	601a      	str	r2, [r3, #0]
 80020fa:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	fa93 f2a3 	rbit	r2, r3
 8002104:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002108:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800210a:	4ba5      	ldr	r3, [pc, #660]	; (80023a0 <HAL_RCC_OscConfig+0x930>)
 800210c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800210e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002112:	2102      	movs	r1, #2
 8002114:	6019      	str	r1, [r3, #0]
 8002116:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	fa93 f1a3 	rbit	r1, r3
 8002120:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002124:	6019      	str	r1, [r3, #0]
  return result;
 8002126:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	fab3 f383 	clz	r3, r3
 8002130:	b2db      	uxtb	r3, r3
 8002132:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002136:	b2db      	uxtb	r3, r3
 8002138:	f003 031f 	and.w	r3, r3, #31
 800213c:	2101      	movs	r1, #1
 800213e:	fa01 f303 	lsl.w	r3, r1, r3
 8002142:	4013      	ands	r3, r2
 8002144:	2b00      	cmp	r3, #0
 8002146:	d0b0      	beq.n	80020aa <HAL_RCC_OscConfig+0x63a>
 8002148:	e06a      	b.n	8002220 <HAL_RCC_OscConfig+0x7b0>
 800214a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800214e:	2201      	movs	r2, #1
 8002150:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002152:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	fa93 f2a3 	rbit	r2, r3
 800215c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002160:	601a      	str	r2, [r3, #0]
  return result;
 8002162:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002166:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002168:	fab3 f383 	clz	r3, r3
 800216c:	b2db      	uxtb	r3, r3
 800216e:	461a      	mov	r2, r3
 8002170:	4b8c      	ldr	r3, [pc, #560]	; (80023a4 <HAL_RCC_OscConfig+0x934>)
 8002172:	4413      	add	r3, r2
 8002174:	009b      	lsls	r3, r3, #2
 8002176:	461a      	mov	r2, r3
 8002178:	2300      	movs	r3, #0
 800217a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800217c:	f7fe ff70 	bl	8001060 <HAL_GetTick>
 8002180:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002184:	e009      	b.n	800219a <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002186:	f7fe ff6b 	bl	8001060 <HAL_GetTick>
 800218a:	4602      	mov	r2, r0
 800218c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002190:	1ad3      	subs	r3, r2, r3
 8002192:	2b02      	cmp	r3, #2
 8002194:	d901      	bls.n	800219a <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8002196:	2303      	movs	r3, #3
 8002198:	e36b      	b.n	8002872 <HAL_RCC_OscConfig+0xe02>
 800219a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800219e:	2202      	movs	r2, #2
 80021a0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021a2:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	fa93 f2a3 	rbit	r2, r3
 80021ac:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80021b0:	601a      	str	r2, [r3, #0]
 80021b2:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80021b6:	2202      	movs	r2, #2
 80021b8:	601a      	str	r2, [r3, #0]
 80021ba:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	fa93 f2a3 	rbit	r2, r3
 80021c4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80021c8:	601a      	str	r2, [r3, #0]
 80021ca:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80021ce:	2202      	movs	r2, #2
 80021d0:	601a      	str	r2, [r3, #0]
 80021d2:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	fa93 f2a3 	rbit	r2, r3
 80021dc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80021e0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021e2:	4b6f      	ldr	r3, [pc, #444]	; (80023a0 <HAL_RCC_OscConfig+0x930>)
 80021e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80021e6:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80021ea:	2102      	movs	r1, #2
 80021ec:	6019      	str	r1, [r3, #0]
 80021ee:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	fa93 f1a3 	rbit	r1, r3
 80021f8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80021fc:	6019      	str	r1, [r3, #0]
  return result;
 80021fe:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	fab3 f383 	clz	r3, r3
 8002208:	b2db      	uxtb	r3, r3
 800220a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800220e:	b2db      	uxtb	r3, r3
 8002210:	f003 031f 	and.w	r3, r3, #31
 8002214:	2101      	movs	r1, #1
 8002216:	fa01 f303 	lsl.w	r3, r1, r3
 800221a:	4013      	ands	r3, r2
 800221c:	2b00      	cmp	r3, #0
 800221e:	d1b2      	bne.n	8002186 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002220:	1d3b      	adds	r3, r7, #4
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f003 0304 	and.w	r3, r3, #4
 800222a:	2b00      	cmp	r3, #0
 800222c:	f000 8158 	beq.w	80024e0 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002230:	2300      	movs	r3, #0
 8002232:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002236:	4b5a      	ldr	r3, [pc, #360]	; (80023a0 <HAL_RCC_OscConfig+0x930>)
 8002238:	69db      	ldr	r3, [r3, #28]
 800223a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800223e:	2b00      	cmp	r3, #0
 8002240:	d112      	bne.n	8002268 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002242:	4b57      	ldr	r3, [pc, #348]	; (80023a0 <HAL_RCC_OscConfig+0x930>)
 8002244:	69db      	ldr	r3, [r3, #28]
 8002246:	4a56      	ldr	r2, [pc, #344]	; (80023a0 <HAL_RCC_OscConfig+0x930>)
 8002248:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800224c:	61d3      	str	r3, [r2, #28]
 800224e:	4b54      	ldr	r3, [pc, #336]	; (80023a0 <HAL_RCC_OscConfig+0x930>)
 8002250:	69db      	ldr	r3, [r3, #28]
 8002252:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002256:	f107 0308 	add.w	r3, r7, #8
 800225a:	601a      	str	r2, [r3, #0]
 800225c:	f107 0308 	add.w	r3, r7, #8
 8002260:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002262:	2301      	movs	r3, #1
 8002264:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002268:	4b4f      	ldr	r3, [pc, #316]	; (80023a8 <HAL_RCC_OscConfig+0x938>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002270:	2b00      	cmp	r3, #0
 8002272:	d11a      	bne.n	80022aa <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002274:	4b4c      	ldr	r3, [pc, #304]	; (80023a8 <HAL_RCC_OscConfig+0x938>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a4b      	ldr	r2, [pc, #300]	; (80023a8 <HAL_RCC_OscConfig+0x938>)
 800227a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800227e:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002280:	f7fe feee 	bl	8001060 <HAL_GetTick>
 8002284:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002288:	e009      	b.n	800229e <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800228a:	f7fe fee9 	bl	8001060 <HAL_GetTick>
 800228e:	4602      	mov	r2, r0
 8002290:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002294:	1ad3      	subs	r3, r2, r3
 8002296:	2b64      	cmp	r3, #100	; 0x64
 8002298:	d901      	bls.n	800229e <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 800229a:	2303      	movs	r3, #3
 800229c:	e2e9      	b.n	8002872 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800229e:	4b42      	ldr	r3, [pc, #264]	; (80023a8 <HAL_RCC_OscConfig+0x938>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d0ef      	beq.n	800228a <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022aa:	1d3b      	adds	r3, r7, #4
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	68db      	ldr	r3, [r3, #12]
 80022b0:	2b01      	cmp	r3, #1
 80022b2:	d106      	bne.n	80022c2 <HAL_RCC_OscConfig+0x852>
 80022b4:	4b3a      	ldr	r3, [pc, #232]	; (80023a0 <HAL_RCC_OscConfig+0x930>)
 80022b6:	6a1b      	ldr	r3, [r3, #32]
 80022b8:	4a39      	ldr	r2, [pc, #228]	; (80023a0 <HAL_RCC_OscConfig+0x930>)
 80022ba:	f043 0301 	orr.w	r3, r3, #1
 80022be:	6213      	str	r3, [r2, #32]
 80022c0:	e02f      	b.n	8002322 <HAL_RCC_OscConfig+0x8b2>
 80022c2:	1d3b      	adds	r3, r7, #4
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	68db      	ldr	r3, [r3, #12]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d10c      	bne.n	80022e6 <HAL_RCC_OscConfig+0x876>
 80022cc:	4b34      	ldr	r3, [pc, #208]	; (80023a0 <HAL_RCC_OscConfig+0x930>)
 80022ce:	6a1b      	ldr	r3, [r3, #32]
 80022d0:	4a33      	ldr	r2, [pc, #204]	; (80023a0 <HAL_RCC_OscConfig+0x930>)
 80022d2:	f023 0301 	bic.w	r3, r3, #1
 80022d6:	6213      	str	r3, [r2, #32]
 80022d8:	4b31      	ldr	r3, [pc, #196]	; (80023a0 <HAL_RCC_OscConfig+0x930>)
 80022da:	6a1b      	ldr	r3, [r3, #32]
 80022dc:	4a30      	ldr	r2, [pc, #192]	; (80023a0 <HAL_RCC_OscConfig+0x930>)
 80022de:	f023 0304 	bic.w	r3, r3, #4
 80022e2:	6213      	str	r3, [r2, #32]
 80022e4:	e01d      	b.n	8002322 <HAL_RCC_OscConfig+0x8b2>
 80022e6:	1d3b      	adds	r3, r7, #4
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	68db      	ldr	r3, [r3, #12]
 80022ec:	2b05      	cmp	r3, #5
 80022ee:	d10c      	bne.n	800230a <HAL_RCC_OscConfig+0x89a>
 80022f0:	4b2b      	ldr	r3, [pc, #172]	; (80023a0 <HAL_RCC_OscConfig+0x930>)
 80022f2:	6a1b      	ldr	r3, [r3, #32]
 80022f4:	4a2a      	ldr	r2, [pc, #168]	; (80023a0 <HAL_RCC_OscConfig+0x930>)
 80022f6:	f043 0304 	orr.w	r3, r3, #4
 80022fa:	6213      	str	r3, [r2, #32]
 80022fc:	4b28      	ldr	r3, [pc, #160]	; (80023a0 <HAL_RCC_OscConfig+0x930>)
 80022fe:	6a1b      	ldr	r3, [r3, #32]
 8002300:	4a27      	ldr	r2, [pc, #156]	; (80023a0 <HAL_RCC_OscConfig+0x930>)
 8002302:	f043 0301 	orr.w	r3, r3, #1
 8002306:	6213      	str	r3, [r2, #32]
 8002308:	e00b      	b.n	8002322 <HAL_RCC_OscConfig+0x8b2>
 800230a:	4b25      	ldr	r3, [pc, #148]	; (80023a0 <HAL_RCC_OscConfig+0x930>)
 800230c:	6a1b      	ldr	r3, [r3, #32]
 800230e:	4a24      	ldr	r2, [pc, #144]	; (80023a0 <HAL_RCC_OscConfig+0x930>)
 8002310:	f023 0301 	bic.w	r3, r3, #1
 8002314:	6213      	str	r3, [r2, #32]
 8002316:	4b22      	ldr	r3, [pc, #136]	; (80023a0 <HAL_RCC_OscConfig+0x930>)
 8002318:	6a1b      	ldr	r3, [r3, #32]
 800231a:	4a21      	ldr	r2, [pc, #132]	; (80023a0 <HAL_RCC_OscConfig+0x930>)
 800231c:	f023 0304 	bic.w	r3, r3, #4
 8002320:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002322:	1d3b      	adds	r3, r7, #4
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	68db      	ldr	r3, [r3, #12]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d06b      	beq.n	8002404 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800232c:	f7fe fe98 	bl	8001060 <HAL_GetTick>
 8002330:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002334:	e00b      	b.n	800234e <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002336:	f7fe fe93 	bl	8001060 <HAL_GetTick>
 800233a:	4602      	mov	r2, r0
 800233c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002340:	1ad3      	subs	r3, r2, r3
 8002342:	f241 3288 	movw	r2, #5000	; 0x1388
 8002346:	4293      	cmp	r3, r2
 8002348:	d901      	bls.n	800234e <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 800234a:	2303      	movs	r3, #3
 800234c:	e291      	b.n	8002872 <HAL_RCC_OscConfig+0xe02>
 800234e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002352:	2202      	movs	r2, #2
 8002354:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002356:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	fa93 f2a3 	rbit	r2, r3
 8002360:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002364:	601a      	str	r2, [r3, #0]
 8002366:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800236a:	2202      	movs	r2, #2
 800236c:	601a      	str	r2, [r3, #0]
 800236e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	fa93 f2a3 	rbit	r2, r3
 8002378:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800237c:	601a      	str	r2, [r3, #0]
  return result;
 800237e:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002382:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002384:	fab3 f383 	clz	r3, r3
 8002388:	b2db      	uxtb	r3, r3
 800238a:	095b      	lsrs	r3, r3, #5
 800238c:	b2db      	uxtb	r3, r3
 800238e:	f043 0302 	orr.w	r3, r3, #2
 8002392:	b2db      	uxtb	r3, r3
 8002394:	2b02      	cmp	r3, #2
 8002396:	d109      	bne.n	80023ac <HAL_RCC_OscConfig+0x93c>
 8002398:	4b01      	ldr	r3, [pc, #4]	; (80023a0 <HAL_RCC_OscConfig+0x930>)
 800239a:	6a1b      	ldr	r3, [r3, #32]
 800239c:	e014      	b.n	80023c8 <HAL_RCC_OscConfig+0x958>
 800239e:	bf00      	nop
 80023a0:	40021000 	.word	0x40021000
 80023a4:	10908120 	.word	0x10908120
 80023a8:	40007000 	.word	0x40007000
 80023ac:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80023b0:	2202      	movs	r2, #2
 80023b2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023b4:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	fa93 f2a3 	rbit	r2, r3
 80023be:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80023c2:	601a      	str	r2, [r3, #0]
 80023c4:	4bbb      	ldr	r3, [pc, #748]	; (80026b4 <HAL_RCC_OscConfig+0xc44>)
 80023c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c8:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80023cc:	2102      	movs	r1, #2
 80023ce:	6011      	str	r1, [r2, #0]
 80023d0:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80023d4:	6812      	ldr	r2, [r2, #0]
 80023d6:	fa92 f1a2 	rbit	r1, r2
 80023da:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80023de:	6011      	str	r1, [r2, #0]
  return result;
 80023e0:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80023e4:	6812      	ldr	r2, [r2, #0]
 80023e6:	fab2 f282 	clz	r2, r2
 80023ea:	b2d2      	uxtb	r2, r2
 80023ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80023f0:	b2d2      	uxtb	r2, r2
 80023f2:	f002 021f 	and.w	r2, r2, #31
 80023f6:	2101      	movs	r1, #1
 80023f8:	fa01 f202 	lsl.w	r2, r1, r2
 80023fc:	4013      	ands	r3, r2
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d099      	beq.n	8002336 <HAL_RCC_OscConfig+0x8c6>
 8002402:	e063      	b.n	80024cc <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002404:	f7fe fe2c 	bl	8001060 <HAL_GetTick>
 8002408:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800240c:	e00b      	b.n	8002426 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800240e:	f7fe fe27 	bl	8001060 <HAL_GetTick>
 8002412:	4602      	mov	r2, r0
 8002414:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002418:	1ad3      	subs	r3, r2, r3
 800241a:	f241 3288 	movw	r2, #5000	; 0x1388
 800241e:	4293      	cmp	r3, r2
 8002420:	d901      	bls.n	8002426 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8002422:	2303      	movs	r3, #3
 8002424:	e225      	b.n	8002872 <HAL_RCC_OscConfig+0xe02>
 8002426:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800242a:	2202      	movs	r2, #2
 800242c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800242e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	fa93 f2a3 	rbit	r2, r3
 8002438:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800243c:	601a      	str	r2, [r3, #0]
 800243e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002442:	2202      	movs	r2, #2
 8002444:	601a      	str	r2, [r3, #0]
 8002446:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	fa93 f2a3 	rbit	r2, r3
 8002450:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002454:	601a      	str	r2, [r3, #0]
  return result;
 8002456:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800245a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800245c:	fab3 f383 	clz	r3, r3
 8002460:	b2db      	uxtb	r3, r3
 8002462:	095b      	lsrs	r3, r3, #5
 8002464:	b2db      	uxtb	r3, r3
 8002466:	f043 0302 	orr.w	r3, r3, #2
 800246a:	b2db      	uxtb	r3, r3
 800246c:	2b02      	cmp	r3, #2
 800246e:	d102      	bne.n	8002476 <HAL_RCC_OscConfig+0xa06>
 8002470:	4b90      	ldr	r3, [pc, #576]	; (80026b4 <HAL_RCC_OscConfig+0xc44>)
 8002472:	6a1b      	ldr	r3, [r3, #32]
 8002474:	e00d      	b.n	8002492 <HAL_RCC_OscConfig+0xa22>
 8002476:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800247a:	2202      	movs	r2, #2
 800247c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800247e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	fa93 f2a3 	rbit	r2, r3
 8002488:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800248c:	601a      	str	r2, [r3, #0]
 800248e:	4b89      	ldr	r3, [pc, #548]	; (80026b4 <HAL_RCC_OscConfig+0xc44>)
 8002490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002492:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002496:	2102      	movs	r1, #2
 8002498:	6011      	str	r1, [r2, #0]
 800249a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800249e:	6812      	ldr	r2, [r2, #0]
 80024a0:	fa92 f1a2 	rbit	r1, r2
 80024a4:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80024a8:	6011      	str	r1, [r2, #0]
  return result;
 80024aa:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80024ae:	6812      	ldr	r2, [r2, #0]
 80024b0:	fab2 f282 	clz	r2, r2
 80024b4:	b2d2      	uxtb	r2, r2
 80024b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80024ba:	b2d2      	uxtb	r2, r2
 80024bc:	f002 021f 	and.w	r2, r2, #31
 80024c0:	2101      	movs	r1, #1
 80024c2:	fa01 f202 	lsl.w	r2, r1, r2
 80024c6:	4013      	ands	r3, r2
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d1a0      	bne.n	800240e <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80024cc:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80024d0:	2b01      	cmp	r3, #1
 80024d2:	d105      	bne.n	80024e0 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024d4:	4b77      	ldr	r3, [pc, #476]	; (80026b4 <HAL_RCC_OscConfig+0xc44>)
 80024d6:	69db      	ldr	r3, [r3, #28]
 80024d8:	4a76      	ldr	r2, [pc, #472]	; (80026b4 <HAL_RCC_OscConfig+0xc44>)
 80024da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024de:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024e0:	1d3b      	adds	r3, r7, #4
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	69db      	ldr	r3, [r3, #28]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	f000 81c2 	beq.w	8002870 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024ec:	4b71      	ldr	r3, [pc, #452]	; (80026b4 <HAL_RCC_OscConfig+0xc44>)
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	f003 030c 	and.w	r3, r3, #12
 80024f4:	2b08      	cmp	r3, #8
 80024f6:	f000 819c 	beq.w	8002832 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024fa:	1d3b      	adds	r3, r7, #4
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	69db      	ldr	r3, [r3, #28]
 8002500:	2b02      	cmp	r3, #2
 8002502:	f040 8114 	bne.w	800272e <HAL_RCC_OscConfig+0xcbe>
 8002506:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800250a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800250e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002510:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	fa93 f2a3 	rbit	r2, r3
 800251a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800251e:	601a      	str	r2, [r3, #0]
  return result;
 8002520:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002524:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002526:	fab3 f383 	clz	r3, r3
 800252a:	b2db      	uxtb	r3, r3
 800252c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002530:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002534:	009b      	lsls	r3, r3, #2
 8002536:	461a      	mov	r2, r3
 8002538:	2300      	movs	r3, #0
 800253a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800253c:	f7fe fd90 	bl	8001060 <HAL_GetTick>
 8002540:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002544:	e009      	b.n	800255a <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002546:	f7fe fd8b 	bl	8001060 <HAL_GetTick>
 800254a:	4602      	mov	r2, r0
 800254c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002550:	1ad3      	subs	r3, r2, r3
 8002552:	2b02      	cmp	r3, #2
 8002554:	d901      	bls.n	800255a <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8002556:	2303      	movs	r3, #3
 8002558:	e18b      	b.n	8002872 <HAL_RCC_OscConfig+0xe02>
 800255a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800255e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002562:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002564:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	fa93 f2a3 	rbit	r2, r3
 800256e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002572:	601a      	str	r2, [r3, #0]
  return result;
 8002574:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002578:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800257a:	fab3 f383 	clz	r3, r3
 800257e:	b2db      	uxtb	r3, r3
 8002580:	095b      	lsrs	r3, r3, #5
 8002582:	b2db      	uxtb	r3, r3
 8002584:	f043 0301 	orr.w	r3, r3, #1
 8002588:	b2db      	uxtb	r3, r3
 800258a:	2b01      	cmp	r3, #1
 800258c:	d102      	bne.n	8002594 <HAL_RCC_OscConfig+0xb24>
 800258e:	4b49      	ldr	r3, [pc, #292]	; (80026b4 <HAL_RCC_OscConfig+0xc44>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	e01b      	b.n	80025cc <HAL_RCC_OscConfig+0xb5c>
 8002594:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002598:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800259c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800259e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	fa93 f2a3 	rbit	r2, r3
 80025a8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80025ac:	601a      	str	r2, [r3, #0]
 80025ae:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80025b2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80025b6:	601a      	str	r2, [r3, #0]
 80025b8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	fa93 f2a3 	rbit	r2, r3
 80025c2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80025c6:	601a      	str	r2, [r3, #0]
 80025c8:	4b3a      	ldr	r3, [pc, #232]	; (80026b4 <HAL_RCC_OscConfig+0xc44>)
 80025ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025cc:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80025d0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80025d4:	6011      	str	r1, [r2, #0]
 80025d6:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80025da:	6812      	ldr	r2, [r2, #0]
 80025dc:	fa92 f1a2 	rbit	r1, r2
 80025e0:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80025e4:	6011      	str	r1, [r2, #0]
  return result;
 80025e6:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80025ea:	6812      	ldr	r2, [r2, #0]
 80025ec:	fab2 f282 	clz	r2, r2
 80025f0:	b2d2      	uxtb	r2, r2
 80025f2:	f042 0220 	orr.w	r2, r2, #32
 80025f6:	b2d2      	uxtb	r2, r2
 80025f8:	f002 021f 	and.w	r2, r2, #31
 80025fc:	2101      	movs	r1, #1
 80025fe:	fa01 f202 	lsl.w	r2, r1, r2
 8002602:	4013      	ands	r3, r2
 8002604:	2b00      	cmp	r3, #0
 8002606:	d19e      	bne.n	8002546 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002608:	4b2a      	ldr	r3, [pc, #168]	; (80026b4 <HAL_RCC_OscConfig+0xc44>)
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002610:	1d3b      	adds	r3, r7, #4
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002616:	1d3b      	adds	r3, r7, #4
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	6a1b      	ldr	r3, [r3, #32]
 800261c:	430b      	orrs	r3, r1
 800261e:	4925      	ldr	r1, [pc, #148]	; (80026b4 <HAL_RCC_OscConfig+0xc44>)
 8002620:	4313      	orrs	r3, r2
 8002622:	604b      	str	r3, [r1, #4]
 8002624:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002628:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800262c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800262e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	fa93 f2a3 	rbit	r2, r3
 8002638:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800263c:	601a      	str	r2, [r3, #0]
  return result;
 800263e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002642:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002644:	fab3 f383 	clz	r3, r3
 8002648:	b2db      	uxtb	r3, r3
 800264a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800264e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002652:	009b      	lsls	r3, r3, #2
 8002654:	461a      	mov	r2, r3
 8002656:	2301      	movs	r3, #1
 8002658:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800265a:	f7fe fd01 	bl	8001060 <HAL_GetTick>
 800265e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002662:	e009      	b.n	8002678 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002664:	f7fe fcfc 	bl	8001060 <HAL_GetTick>
 8002668:	4602      	mov	r2, r0
 800266a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800266e:	1ad3      	subs	r3, r2, r3
 8002670:	2b02      	cmp	r3, #2
 8002672:	d901      	bls.n	8002678 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8002674:	2303      	movs	r3, #3
 8002676:	e0fc      	b.n	8002872 <HAL_RCC_OscConfig+0xe02>
 8002678:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800267c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002680:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002682:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	fa93 f2a3 	rbit	r2, r3
 800268c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002690:	601a      	str	r2, [r3, #0]
  return result;
 8002692:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002696:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002698:	fab3 f383 	clz	r3, r3
 800269c:	b2db      	uxtb	r3, r3
 800269e:	095b      	lsrs	r3, r3, #5
 80026a0:	b2db      	uxtb	r3, r3
 80026a2:	f043 0301 	orr.w	r3, r3, #1
 80026a6:	b2db      	uxtb	r3, r3
 80026a8:	2b01      	cmp	r3, #1
 80026aa:	d105      	bne.n	80026b8 <HAL_RCC_OscConfig+0xc48>
 80026ac:	4b01      	ldr	r3, [pc, #4]	; (80026b4 <HAL_RCC_OscConfig+0xc44>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	e01e      	b.n	80026f0 <HAL_RCC_OscConfig+0xc80>
 80026b2:	bf00      	nop
 80026b4:	40021000 	.word	0x40021000
 80026b8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80026bc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80026c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026c2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	fa93 f2a3 	rbit	r2, r3
 80026cc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80026d0:	601a      	str	r2, [r3, #0]
 80026d2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80026d6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80026da:	601a      	str	r2, [r3, #0]
 80026dc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	fa93 f2a3 	rbit	r2, r3
 80026e6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80026ea:	601a      	str	r2, [r3, #0]
 80026ec:	4b63      	ldr	r3, [pc, #396]	; (800287c <HAL_RCC_OscConfig+0xe0c>)
 80026ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80026f4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80026f8:	6011      	str	r1, [r2, #0]
 80026fa:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80026fe:	6812      	ldr	r2, [r2, #0]
 8002700:	fa92 f1a2 	rbit	r1, r2
 8002704:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002708:	6011      	str	r1, [r2, #0]
  return result;
 800270a:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800270e:	6812      	ldr	r2, [r2, #0]
 8002710:	fab2 f282 	clz	r2, r2
 8002714:	b2d2      	uxtb	r2, r2
 8002716:	f042 0220 	orr.w	r2, r2, #32
 800271a:	b2d2      	uxtb	r2, r2
 800271c:	f002 021f 	and.w	r2, r2, #31
 8002720:	2101      	movs	r1, #1
 8002722:	fa01 f202 	lsl.w	r2, r1, r2
 8002726:	4013      	ands	r3, r2
 8002728:	2b00      	cmp	r3, #0
 800272a:	d09b      	beq.n	8002664 <HAL_RCC_OscConfig+0xbf4>
 800272c:	e0a0      	b.n	8002870 <HAL_RCC_OscConfig+0xe00>
 800272e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002732:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002736:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002738:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	fa93 f2a3 	rbit	r2, r3
 8002742:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002746:	601a      	str	r2, [r3, #0]
  return result;
 8002748:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800274c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800274e:	fab3 f383 	clz	r3, r3
 8002752:	b2db      	uxtb	r3, r3
 8002754:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002758:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800275c:	009b      	lsls	r3, r3, #2
 800275e:	461a      	mov	r2, r3
 8002760:	2300      	movs	r3, #0
 8002762:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002764:	f7fe fc7c 	bl	8001060 <HAL_GetTick>
 8002768:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800276c:	e009      	b.n	8002782 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800276e:	f7fe fc77 	bl	8001060 <HAL_GetTick>
 8002772:	4602      	mov	r2, r0
 8002774:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002778:	1ad3      	subs	r3, r2, r3
 800277a:	2b02      	cmp	r3, #2
 800277c:	d901      	bls.n	8002782 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 800277e:	2303      	movs	r3, #3
 8002780:	e077      	b.n	8002872 <HAL_RCC_OscConfig+0xe02>
 8002782:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002786:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800278a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800278c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	fa93 f2a3 	rbit	r2, r3
 8002796:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800279a:	601a      	str	r2, [r3, #0]
  return result;
 800279c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027a0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027a2:	fab3 f383 	clz	r3, r3
 80027a6:	b2db      	uxtb	r3, r3
 80027a8:	095b      	lsrs	r3, r3, #5
 80027aa:	b2db      	uxtb	r3, r3
 80027ac:	f043 0301 	orr.w	r3, r3, #1
 80027b0:	b2db      	uxtb	r3, r3
 80027b2:	2b01      	cmp	r3, #1
 80027b4:	d102      	bne.n	80027bc <HAL_RCC_OscConfig+0xd4c>
 80027b6:	4b31      	ldr	r3, [pc, #196]	; (800287c <HAL_RCC_OscConfig+0xe0c>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	e01b      	b.n	80027f4 <HAL_RCC_OscConfig+0xd84>
 80027bc:	f107 0320 	add.w	r3, r7, #32
 80027c0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80027c4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027c6:	f107 0320 	add.w	r3, r7, #32
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	fa93 f2a3 	rbit	r2, r3
 80027d0:	f107 031c 	add.w	r3, r7, #28
 80027d4:	601a      	str	r2, [r3, #0]
 80027d6:	f107 0318 	add.w	r3, r7, #24
 80027da:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80027de:	601a      	str	r2, [r3, #0]
 80027e0:	f107 0318 	add.w	r3, r7, #24
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	fa93 f2a3 	rbit	r2, r3
 80027ea:	f107 0314 	add.w	r3, r7, #20
 80027ee:	601a      	str	r2, [r3, #0]
 80027f0:	4b22      	ldr	r3, [pc, #136]	; (800287c <HAL_RCC_OscConfig+0xe0c>)
 80027f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f4:	f107 0210 	add.w	r2, r7, #16
 80027f8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80027fc:	6011      	str	r1, [r2, #0]
 80027fe:	f107 0210 	add.w	r2, r7, #16
 8002802:	6812      	ldr	r2, [r2, #0]
 8002804:	fa92 f1a2 	rbit	r1, r2
 8002808:	f107 020c 	add.w	r2, r7, #12
 800280c:	6011      	str	r1, [r2, #0]
  return result;
 800280e:	f107 020c 	add.w	r2, r7, #12
 8002812:	6812      	ldr	r2, [r2, #0]
 8002814:	fab2 f282 	clz	r2, r2
 8002818:	b2d2      	uxtb	r2, r2
 800281a:	f042 0220 	orr.w	r2, r2, #32
 800281e:	b2d2      	uxtb	r2, r2
 8002820:	f002 021f 	and.w	r2, r2, #31
 8002824:	2101      	movs	r1, #1
 8002826:	fa01 f202 	lsl.w	r2, r1, r2
 800282a:	4013      	ands	r3, r2
 800282c:	2b00      	cmp	r3, #0
 800282e:	d19e      	bne.n	800276e <HAL_RCC_OscConfig+0xcfe>
 8002830:	e01e      	b.n	8002870 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002832:	1d3b      	adds	r3, r7, #4
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	69db      	ldr	r3, [r3, #28]
 8002838:	2b01      	cmp	r3, #1
 800283a:	d101      	bne.n	8002840 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 800283c:	2301      	movs	r3, #1
 800283e:	e018      	b.n	8002872 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002840:	4b0e      	ldr	r3, [pc, #56]	; (800287c <HAL_RCC_OscConfig+0xe0c>)
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002848:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800284c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002850:	1d3b      	adds	r3, r7, #4
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	6a1b      	ldr	r3, [r3, #32]
 8002856:	429a      	cmp	r2, r3
 8002858:	d108      	bne.n	800286c <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800285a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800285e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002862:	1d3b      	adds	r3, r7, #4
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002868:	429a      	cmp	r2, r3
 800286a:	d001      	beq.n	8002870 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 800286c:	2301      	movs	r3, #1
 800286e:	e000      	b.n	8002872 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8002870:	2300      	movs	r3, #0
}
 8002872:	4618      	mov	r0, r3
 8002874:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}
 800287c:	40021000 	.word	0x40021000

08002880 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b09e      	sub	sp, #120	; 0x78
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
 8002888:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800288a:	2300      	movs	r3, #0
 800288c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d101      	bne.n	8002898 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002894:	2301      	movs	r3, #1
 8002896:	e162      	b.n	8002b5e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002898:	4b90      	ldr	r3, [pc, #576]	; (8002adc <HAL_RCC_ClockConfig+0x25c>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f003 0307 	and.w	r3, r3, #7
 80028a0:	683a      	ldr	r2, [r7, #0]
 80028a2:	429a      	cmp	r2, r3
 80028a4:	d910      	bls.n	80028c8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028a6:	4b8d      	ldr	r3, [pc, #564]	; (8002adc <HAL_RCC_ClockConfig+0x25c>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f023 0207 	bic.w	r2, r3, #7
 80028ae:	498b      	ldr	r1, [pc, #556]	; (8002adc <HAL_RCC_ClockConfig+0x25c>)
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	4313      	orrs	r3, r2
 80028b4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028b6:	4b89      	ldr	r3, [pc, #548]	; (8002adc <HAL_RCC_ClockConfig+0x25c>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f003 0307 	and.w	r3, r3, #7
 80028be:	683a      	ldr	r2, [r7, #0]
 80028c0:	429a      	cmp	r2, r3
 80028c2:	d001      	beq.n	80028c8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80028c4:	2301      	movs	r3, #1
 80028c6:	e14a      	b.n	8002b5e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f003 0302 	and.w	r3, r3, #2
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d008      	beq.n	80028e6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028d4:	4b82      	ldr	r3, [pc, #520]	; (8002ae0 <HAL_RCC_ClockConfig+0x260>)
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	689b      	ldr	r3, [r3, #8]
 80028e0:	497f      	ldr	r1, [pc, #508]	; (8002ae0 <HAL_RCC_ClockConfig+0x260>)
 80028e2:	4313      	orrs	r3, r2
 80028e4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f003 0301 	and.w	r3, r3, #1
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	f000 80dc 	beq.w	8002aac <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	2b01      	cmp	r3, #1
 80028fa:	d13c      	bne.n	8002976 <HAL_RCC_ClockConfig+0xf6>
 80028fc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002900:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002902:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002904:	fa93 f3a3 	rbit	r3, r3
 8002908:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800290a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800290c:	fab3 f383 	clz	r3, r3
 8002910:	b2db      	uxtb	r3, r3
 8002912:	095b      	lsrs	r3, r3, #5
 8002914:	b2db      	uxtb	r3, r3
 8002916:	f043 0301 	orr.w	r3, r3, #1
 800291a:	b2db      	uxtb	r3, r3
 800291c:	2b01      	cmp	r3, #1
 800291e:	d102      	bne.n	8002926 <HAL_RCC_ClockConfig+0xa6>
 8002920:	4b6f      	ldr	r3, [pc, #444]	; (8002ae0 <HAL_RCC_ClockConfig+0x260>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	e00f      	b.n	8002946 <HAL_RCC_ClockConfig+0xc6>
 8002926:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800292a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800292c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800292e:	fa93 f3a3 	rbit	r3, r3
 8002932:	667b      	str	r3, [r7, #100]	; 0x64
 8002934:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002938:	663b      	str	r3, [r7, #96]	; 0x60
 800293a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800293c:	fa93 f3a3 	rbit	r3, r3
 8002940:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002942:	4b67      	ldr	r3, [pc, #412]	; (8002ae0 <HAL_RCC_ClockConfig+0x260>)
 8002944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002946:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800294a:	65ba      	str	r2, [r7, #88]	; 0x58
 800294c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800294e:	fa92 f2a2 	rbit	r2, r2
 8002952:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002954:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002956:	fab2 f282 	clz	r2, r2
 800295a:	b2d2      	uxtb	r2, r2
 800295c:	f042 0220 	orr.w	r2, r2, #32
 8002960:	b2d2      	uxtb	r2, r2
 8002962:	f002 021f 	and.w	r2, r2, #31
 8002966:	2101      	movs	r1, #1
 8002968:	fa01 f202 	lsl.w	r2, r1, r2
 800296c:	4013      	ands	r3, r2
 800296e:	2b00      	cmp	r3, #0
 8002970:	d17b      	bne.n	8002a6a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002972:	2301      	movs	r3, #1
 8002974:	e0f3      	b.n	8002b5e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	2b02      	cmp	r3, #2
 800297c:	d13c      	bne.n	80029f8 <HAL_RCC_ClockConfig+0x178>
 800297e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002982:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002984:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002986:	fa93 f3a3 	rbit	r3, r3
 800298a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800298c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800298e:	fab3 f383 	clz	r3, r3
 8002992:	b2db      	uxtb	r3, r3
 8002994:	095b      	lsrs	r3, r3, #5
 8002996:	b2db      	uxtb	r3, r3
 8002998:	f043 0301 	orr.w	r3, r3, #1
 800299c:	b2db      	uxtb	r3, r3
 800299e:	2b01      	cmp	r3, #1
 80029a0:	d102      	bne.n	80029a8 <HAL_RCC_ClockConfig+0x128>
 80029a2:	4b4f      	ldr	r3, [pc, #316]	; (8002ae0 <HAL_RCC_ClockConfig+0x260>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	e00f      	b.n	80029c8 <HAL_RCC_ClockConfig+0x148>
 80029a8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80029ac:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80029b0:	fa93 f3a3 	rbit	r3, r3
 80029b4:	647b      	str	r3, [r7, #68]	; 0x44
 80029b6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80029ba:	643b      	str	r3, [r7, #64]	; 0x40
 80029bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80029be:	fa93 f3a3 	rbit	r3, r3
 80029c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80029c4:	4b46      	ldr	r3, [pc, #280]	; (8002ae0 <HAL_RCC_ClockConfig+0x260>)
 80029c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80029cc:	63ba      	str	r2, [r7, #56]	; 0x38
 80029ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80029d0:	fa92 f2a2 	rbit	r2, r2
 80029d4:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80029d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80029d8:	fab2 f282 	clz	r2, r2
 80029dc:	b2d2      	uxtb	r2, r2
 80029de:	f042 0220 	orr.w	r2, r2, #32
 80029e2:	b2d2      	uxtb	r2, r2
 80029e4:	f002 021f 	and.w	r2, r2, #31
 80029e8:	2101      	movs	r1, #1
 80029ea:	fa01 f202 	lsl.w	r2, r1, r2
 80029ee:	4013      	ands	r3, r2
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d13a      	bne.n	8002a6a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80029f4:	2301      	movs	r3, #1
 80029f6:	e0b2      	b.n	8002b5e <HAL_RCC_ClockConfig+0x2de>
 80029f8:	2302      	movs	r3, #2
 80029fa:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029fe:	fa93 f3a3 	rbit	r3, r3
 8002a02:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002a04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a06:	fab3 f383 	clz	r3, r3
 8002a0a:	b2db      	uxtb	r3, r3
 8002a0c:	095b      	lsrs	r3, r3, #5
 8002a0e:	b2db      	uxtb	r3, r3
 8002a10:	f043 0301 	orr.w	r3, r3, #1
 8002a14:	b2db      	uxtb	r3, r3
 8002a16:	2b01      	cmp	r3, #1
 8002a18:	d102      	bne.n	8002a20 <HAL_RCC_ClockConfig+0x1a0>
 8002a1a:	4b31      	ldr	r3, [pc, #196]	; (8002ae0 <HAL_RCC_ClockConfig+0x260>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	e00d      	b.n	8002a3c <HAL_RCC_ClockConfig+0x1bc>
 8002a20:	2302      	movs	r3, #2
 8002a22:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a26:	fa93 f3a3 	rbit	r3, r3
 8002a2a:	627b      	str	r3, [r7, #36]	; 0x24
 8002a2c:	2302      	movs	r3, #2
 8002a2e:	623b      	str	r3, [r7, #32]
 8002a30:	6a3b      	ldr	r3, [r7, #32]
 8002a32:	fa93 f3a3 	rbit	r3, r3
 8002a36:	61fb      	str	r3, [r7, #28]
 8002a38:	4b29      	ldr	r3, [pc, #164]	; (8002ae0 <HAL_RCC_ClockConfig+0x260>)
 8002a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a3c:	2202      	movs	r2, #2
 8002a3e:	61ba      	str	r2, [r7, #24]
 8002a40:	69ba      	ldr	r2, [r7, #24]
 8002a42:	fa92 f2a2 	rbit	r2, r2
 8002a46:	617a      	str	r2, [r7, #20]
  return result;
 8002a48:	697a      	ldr	r2, [r7, #20]
 8002a4a:	fab2 f282 	clz	r2, r2
 8002a4e:	b2d2      	uxtb	r2, r2
 8002a50:	f042 0220 	orr.w	r2, r2, #32
 8002a54:	b2d2      	uxtb	r2, r2
 8002a56:	f002 021f 	and.w	r2, r2, #31
 8002a5a:	2101      	movs	r1, #1
 8002a5c:	fa01 f202 	lsl.w	r2, r1, r2
 8002a60:	4013      	ands	r3, r2
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d101      	bne.n	8002a6a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	e079      	b.n	8002b5e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a6a:	4b1d      	ldr	r3, [pc, #116]	; (8002ae0 <HAL_RCC_ClockConfig+0x260>)
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	f023 0203 	bic.w	r2, r3, #3
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	491a      	ldr	r1, [pc, #104]	; (8002ae0 <HAL_RCC_ClockConfig+0x260>)
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a7c:	f7fe faf0 	bl	8001060 <HAL_GetTick>
 8002a80:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a82:	e00a      	b.n	8002a9a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a84:	f7fe faec 	bl	8001060 <HAL_GetTick>
 8002a88:	4602      	mov	r2, r0
 8002a8a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a8c:	1ad3      	subs	r3, r2, r3
 8002a8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d901      	bls.n	8002a9a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002a96:	2303      	movs	r3, #3
 8002a98:	e061      	b.n	8002b5e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a9a:	4b11      	ldr	r3, [pc, #68]	; (8002ae0 <HAL_RCC_ClockConfig+0x260>)
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	f003 020c 	and.w	r2, r3, #12
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	009b      	lsls	r3, r3, #2
 8002aa8:	429a      	cmp	r2, r3
 8002aaa:	d1eb      	bne.n	8002a84 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002aac:	4b0b      	ldr	r3, [pc, #44]	; (8002adc <HAL_RCC_ClockConfig+0x25c>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f003 0307 	and.w	r3, r3, #7
 8002ab4:	683a      	ldr	r2, [r7, #0]
 8002ab6:	429a      	cmp	r2, r3
 8002ab8:	d214      	bcs.n	8002ae4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aba:	4b08      	ldr	r3, [pc, #32]	; (8002adc <HAL_RCC_ClockConfig+0x25c>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f023 0207 	bic.w	r2, r3, #7
 8002ac2:	4906      	ldr	r1, [pc, #24]	; (8002adc <HAL_RCC_ClockConfig+0x25c>)
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002aca:	4b04      	ldr	r3, [pc, #16]	; (8002adc <HAL_RCC_ClockConfig+0x25c>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 0307 	and.w	r3, r3, #7
 8002ad2:	683a      	ldr	r2, [r7, #0]
 8002ad4:	429a      	cmp	r2, r3
 8002ad6:	d005      	beq.n	8002ae4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	e040      	b.n	8002b5e <HAL_RCC_ClockConfig+0x2de>
 8002adc:	40022000 	.word	0x40022000
 8002ae0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f003 0304 	and.w	r3, r3, #4
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d008      	beq.n	8002b02 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002af0:	4b1d      	ldr	r3, [pc, #116]	; (8002b68 <HAL_RCC_ClockConfig+0x2e8>)
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	68db      	ldr	r3, [r3, #12]
 8002afc:	491a      	ldr	r1, [pc, #104]	; (8002b68 <HAL_RCC_ClockConfig+0x2e8>)
 8002afe:	4313      	orrs	r3, r2
 8002b00:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f003 0308 	and.w	r3, r3, #8
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d009      	beq.n	8002b22 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b0e:	4b16      	ldr	r3, [pc, #88]	; (8002b68 <HAL_RCC_ClockConfig+0x2e8>)
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	691b      	ldr	r3, [r3, #16]
 8002b1a:	00db      	lsls	r3, r3, #3
 8002b1c:	4912      	ldr	r1, [pc, #72]	; (8002b68 <HAL_RCC_ClockConfig+0x2e8>)
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002b22:	f000 f829 	bl	8002b78 <HAL_RCC_GetSysClockFreq>
 8002b26:	4601      	mov	r1, r0
 8002b28:	4b0f      	ldr	r3, [pc, #60]	; (8002b68 <HAL_RCC_ClockConfig+0x2e8>)
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b30:	22f0      	movs	r2, #240	; 0xf0
 8002b32:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b34:	693a      	ldr	r2, [r7, #16]
 8002b36:	fa92 f2a2 	rbit	r2, r2
 8002b3a:	60fa      	str	r2, [r7, #12]
  return result;
 8002b3c:	68fa      	ldr	r2, [r7, #12]
 8002b3e:	fab2 f282 	clz	r2, r2
 8002b42:	b2d2      	uxtb	r2, r2
 8002b44:	40d3      	lsrs	r3, r2
 8002b46:	4a09      	ldr	r2, [pc, #36]	; (8002b6c <HAL_RCC_ClockConfig+0x2ec>)
 8002b48:	5cd3      	ldrb	r3, [r2, r3]
 8002b4a:	fa21 f303 	lsr.w	r3, r1, r3
 8002b4e:	4a08      	ldr	r2, [pc, #32]	; (8002b70 <HAL_RCC_ClockConfig+0x2f0>)
 8002b50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002b52:	4b08      	ldr	r3, [pc, #32]	; (8002b74 <HAL_RCC_ClockConfig+0x2f4>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4618      	mov	r0, r3
 8002b58:	f7fe fa3e 	bl	8000fd8 <HAL_InitTick>
  
  return HAL_OK;
 8002b5c:	2300      	movs	r3, #0
}
 8002b5e:	4618      	mov	r0, r3
 8002b60:	3778      	adds	r7, #120	; 0x78
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}
 8002b66:	bf00      	nop
 8002b68:	40021000 	.word	0x40021000
 8002b6c:	08006480 	.word	0x08006480
 8002b70:	20000004 	.word	0x20000004
 8002b74:	20000008 	.word	0x20000008

08002b78 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b08b      	sub	sp, #44	; 0x2c
 8002b7c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	61fb      	str	r3, [r7, #28]
 8002b82:	2300      	movs	r3, #0
 8002b84:	61bb      	str	r3, [r7, #24]
 8002b86:	2300      	movs	r3, #0
 8002b88:	627b      	str	r3, [r7, #36]	; 0x24
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002b92:	4b29      	ldr	r3, [pc, #164]	; (8002c38 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002b98:	69fb      	ldr	r3, [r7, #28]
 8002b9a:	f003 030c 	and.w	r3, r3, #12
 8002b9e:	2b04      	cmp	r3, #4
 8002ba0:	d002      	beq.n	8002ba8 <HAL_RCC_GetSysClockFreq+0x30>
 8002ba2:	2b08      	cmp	r3, #8
 8002ba4:	d003      	beq.n	8002bae <HAL_RCC_GetSysClockFreq+0x36>
 8002ba6:	e03c      	b.n	8002c22 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002ba8:	4b24      	ldr	r3, [pc, #144]	; (8002c3c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002baa:	623b      	str	r3, [r7, #32]
      break;
 8002bac:	e03c      	b.n	8002c28 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002bae:	69fb      	ldr	r3, [r7, #28]
 8002bb0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002bb4:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002bb8:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bba:	68ba      	ldr	r2, [r7, #8]
 8002bbc:	fa92 f2a2 	rbit	r2, r2
 8002bc0:	607a      	str	r2, [r7, #4]
  return result;
 8002bc2:	687a      	ldr	r2, [r7, #4]
 8002bc4:	fab2 f282 	clz	r2, r2
 8002bc8:	b2d2      	uxtb	r2, r2
 8002bca:	40d3      	lsrs	r3, r2
 8002bcc:	4a1c      	ldr	r2, [pc, #112]	; (8002c40 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002bce:	5cd3      	ldrb	r3, [r2, r3]
 8002bd0:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002bd2:	4b19      	ldr	r3, [pc, #100]	; (8002c38 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002bd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bd6:	f003 030f 	and.w	r3, r3, #15
 8002bda:	220f      	movs	r2, #15
 8002bdc:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bde:	693a      	ldr	r2, [r7, #16]
 8002be0:	fa92 f2a2 	rbit	r2, r2
 8002be4:	60fa      	str	r2, [r7, #12]
  return result;
 8002be6:	68fa      	ldr	r2, [r7, #12]
 8002be8:	fab2 f282 	clz	r2, r2
 8002bec:	b2d2      	uxtb	r2, r2
 8002bee:	40d3      	lsrs	r3, r2
 8002bf0:	4a14      	ldr	r2, [pc, #80]	; (8002c44 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002bf2:	5cd3      	ldrb	r3, [r2, r3]
 8002bf4:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002bf6:	69fb      	ldr	r3, [r7, #28]
 8002bf8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d008      	beq.n	8002c12 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002c00:	4a0e      	ldr	r2, [pc, #56]	; (8002c3c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002c02:	69bb      	ldr	r3, [r7, #24]
 8002c04:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c08:	697b      	ldr	r3, [r7, #20]
 8002c0a:	fb02 f303 	mul.w	r3, r2, r3
 8002c0e:	627b      	str	r3, [r7, #36]	; 0x24
 8002c10:	e004      	b.n	8002c1c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	4a0c      	ldr	r2, [pc, #48]	; (8002c48 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002c16:	fb02 f303 	mul.w	r3, r2, r3
 8002c1a:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c1e:	623b      	str	r3, [r7, #32]
      break;
 8002c20:	e002      	b.n	8002c28 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002c22:	4b06      	ldr	r3, [pc, #24]	; (8002c3c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002c24:	623b      	str	r3, [r7, #32]
      break;
 8002c26:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c28:	6a3b      	ldr	r3, [r7, #32]
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	372c      	adds	r7, #44	; 0x2c
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c34:	4770      	bx	lr
 8002c36:	bf00      	nop
 8002c38:	40021000 	.word	0x40021000
 8002c3c:	007a1200 	.word	0x007a1200
 8002c40:	08006498 	.word	0x08006498
 8002c44:	080064a8 	.word	0x080064a8
 8002c48:	003d0900 	.word	0x003d0900

08002c4c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c50:	4b03      	ldr	r3, [pc, #12]	; (8002c60 <HAL_RCC_GetHCLKFreq+0x14>)
 8002c52:	681b      	ldr	r3, [r3, #0]
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	46bd      	mov	sp, r7
 8002c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5c:	4770      	bx	lr
 8002c5e:	bf00      	nop
 8002c60:	20000004 	.word	0x20000004

08002c64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b082      	sub	sp, #8
 8002c68:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002c6a:	f7ff ffef 	bl	8002c4c <HAL_RCC_GetHCLKFreq>
 8002c6e:	4601      	mov	r1, r0
 8002c70:	4b0b      	ldr	r3, [pc, #44]	; (8002ca0 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002c78:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002c7c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c7e:	687a      	ldr	r2, [r7, #4]
 8002c80:	fa92 f2a2 	rbit	r2, r2
 8002c84:	603a      	str	r2, [r7, #0]
  return result;
 8002c86:	683a      	ldr	r2, [r7, #0]
 8002c88:	fab2 f282 	clz	r2, r2
 8002c8c:	b2d2      	uxtb	r2, r2
 8002c8e:	40d3      	lsrs	r3, r2
 8002c90:	4a04      	ldr	r2, [pc, #16]	; (8002ca4 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002c92:	5cd3      	ldrb	r3, [r2, r3]
 8002c94:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002c98:	4618      	mov	r0, r3
 8002c9a:	3708      	adds	r7, #8
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}
 8002ca0:	40021000 	.word	0x40021000
 8002ca4:	08006490 	.word	0x08006490

08002ca8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b082      	sub	sp, #8
 8002cac:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002cae:	f7ff ffcd 	bl	8002c4c <HAL_RCC_GetHCLKFreq>
 8002cb2:	4601      	mov	r1, r0
 8002cb4:	4b0b      	ldr	r3, [pc, #44]	; (8002ce4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002cbc:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002cc0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cc2:	687a      	ldr	r2, [r7, #4]
 8002cc4:	fa92 f2a2 	rbit	r2, r2
 8002cc8:	603a      	str	r2, [r7, #0]
  return result;
 8002cca:	683a      	ldr	r2, [r7, #0]
 8002ccc:	fab2 f282 	clz	r2, r2
 8002cd0:	b2d2      	uxtb	r2, r2
 8002cd2:	40d3      	lsrs	r3, r2
 8002cd4:	4a04      	ldr	r2, [pc, #16]	; (8002ce8 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002cd6:	5cd3      	ldrb	r3, [r2, r3]
 8002cd8:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002cdc:	4618      	mov	r0, r3
 8002cde:	3708      	adds	r7, #8
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bd80      	pop	{r7, pc}
 8002ce4:	40021000 	.word	0x40021000
 8002ce8:	08006490 	.word	0x08006490

08002cec <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b092      	sub	sp, #72	; 0x48
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	f000 80cd 	beq.w	8002eaa <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d10:	4b86      	ldr	r3, [pc, #536]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002d12:	69db      	ldr	r3, [r3, #28]
 8002d14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d10e      	bne.n	8002d3a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d1c:	4b83      	ldr	r3, [pc, #524]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002d1e:	69db      	ldr	r3, [r3, #28]
 8002d20:	4a82      	ldr	r2, [pc, #520]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002d22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d26:	61d3      	str	r3, [r2, #28]
 8002d28:	4b80      	ldr	r3, [pc, #512]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002d2a:	69db      	ldr	r3, [r3, #28]
 8002d2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d30:	60bb      	str	r3, [r7, #8]
 8002d32:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d34:	2301      	movs	r3, #1
 8002d36:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d3a:	4b7d      	ldr	r3, [pc, #500]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d118      	bne.n	8002d78 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d46:	4b7a      	ldr	r3, [pc, #488]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a79      	ldr	r2, [pc, #484]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002d4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d50:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d52:	f7fe f985 	bl	8001060 <HAL_GetTick>
 8002d56:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d58:	e008      	b.n	8002d6c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d5a:	f7fe f981 	bl	8001060 <HAL_GetTick>
 8002d5e:	4602      	mov	r2, r0
 8002d60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d62:	1ad3      	subs	r3, r2, r3
 8002d64:	2b64      	cmp	r3, #100	; 0x64
 8002d66:	d901      	bls.n	8002d6c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002d68:	2303      	movs	r3, #3
 8002d6a:	e0db      	b.n	8002f24 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d6c:	4b70      	ldr	r3, [pc, #448]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d0f0      	beq.n	8002d5a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002d78:	4b6c      	ldr	r3, [pc, #432]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002d7a:	6a1b      	ldr	r3, [r3, #32]
 8002d7c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d80:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002d82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d07d      	beq.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d90:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002d92:	429a      	cmp	r2, r3
 8002d94:	d076      	beq.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002d96:	4b65      	ldr	r3, [pc, #404]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002d98:	6a1b      	ldr	r3, [r3, #32]
 8002d9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002da0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002da4:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002da8:	fa93 f3a3 	rbit	r3, r3
 8002dac:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002dae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002db0:	fab3 f383 	clz	r3, r3
 8002db4:	b2db      	uxtb	r3, r3
 8002db6:	461a      	mov	r2, r3
 8002db8:	4b5e      	ldr	r3, [pc, #376]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002dba:	4413      	add	r3, r2
 8002dbc:	009b      	lsls	r3, r3, #2
 8002dbe:	461a      	mov	r2, r3
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	6013      	str	r3, [r2, #0]
 8002dc4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002dc8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dcc:	fa93 f3a3 	rbit	r3, r3
 8002dd0:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002dd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002dd4:	fab3 f383 	clz	r3, r3
 8002dd8:	b2db      	uxtb	r3, r3
 8002dda:	461a      	mov	r2, r3
 8002ddc:	4b55      	ldr	r3, [pc, #340]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002dde:	4413      	add	r3, r2
 8002de0:	009b      	lsls	r3, r3, #2
 8002de2:	461a      	mov	r2, r3
 8002de4:	2300      	movs	r3, #0
 8002de6:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002de8:	4a50      	ldr	r2, [pc, #320]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002dea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002dec:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002dee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002df0:	f003 0301 	and.w	r3, r3, #1
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d045      	beq.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002df8:	f7fe f932 	bl	8001060 <HAL_GetTick>
 8002dfc:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dfe:	e00a      	b.n	8002e16 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e00:	f7fe f92e 	bl	8001060 <HAL_GetTick>
 8002e04:	4602      	mov	r2, r0
 8002e06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e08:	1ad3      	subs	r3, r2, r3
 8002e0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d901      	bls.n	8002e16 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8002e12:	2303      	movs	r3, #3
 8002e14:	e086      	b.n	8002f24 <HAL_RCCEx_PeriphCLKConfig+0x238>
 8002e16:	2302      	movs	r3, #2
 8002e18:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e1c:	fa93 f3a3 	rbit	r3, r3
 8002e20:	627b      	str	r3, [r7, #36]	; 0x24
 8002e22:	2302      	movs	r3, #2
 8002e24:	623b      	str	r3, [r7, #32]
 8002e26:	6a3b      	ldr	r3, [r7, #32]
 8002e28:	fa93 f3a3 	rbit	r3, r3
 8002e2c:	61fb      	str	r3, [r7, #28]
  return result;
 8002e2e:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e30:	fab3 f383 	clz	r3, r3
 8002e34:	b2db      	uxtb	r3, r3
 8002e36:	095b      	lsrs	r3, r3, #5
 8002e38:	b2db      	uxtb	r3, r3
 8002e3a:	f043 0302 	orr.w	r3, r3, #2
 8002e3e:	b2db      	uxtb	r3, r3
 8002e40:	2b02      	cmp	r3, #2
 8002e42:	d102      	bne.n	8002e4a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8002e44:	4b39      	ldr	r3, [pc, #228]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002e46:	6a1b      	ldr	r3, [r3, #32]
 8002e48:	e007      	b.n	8002e5a <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8002e4a:	2302      	movs	r3, #2
 8002e4c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e4e:	69bb      	ldr	r3, [r7, #24]
 8002e50:	fa93 f3a3 	rbit	r3, r3
 8002e54:	617b      	str	r3, [r7, #20]
 8002e56:	4b35      	ldr	r3, [pc, #212]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e5a:	2202      	movs	r2, #2
 8002e5c:	613a      	str	r2, [r7, #16]
 8002e5e:	693a      	ldr	r2, [r7, #16]
 8002e60:	fa92 f2a2 	rbit	r2, r2
 8002e64:	60fa      	str	r2, [r7, #12]
  return result;
 8002e66:	68fa      	ldr	r2, [r7, #12]
 8002e68:	fab2 f282 	clz	r2, r2
 8002e6c:	b2d2      	uxtb	r2, r2
 8002e6e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e72:	b2d2      	uxtb	r2, r2
 8002e74:	f002 021f 	and.w	r2, r2, #31
 8002e78:	2101      	movs	r1, #1
 8002e7a:	fa01 f202 	lsl.w	r2, r1, r2
 8002e7e:	4013      	ands	r3, r2
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d0bd      	beq.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002e84:	4b29      	ldr	r3, [pc, #164]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002e86:	6a1b      	ldr	r3, [r3, #32]
 8002e88:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	4926      	ldr	r1, [pc, #152]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002e92:	4313      	orrs	r3, r2
 8002e94:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002e96:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002e9a:	2b01      	cmp	r3, #1
 8002e9c:	d105      	bne.n	8002eaa <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e9e:	4b23      	ldr	r3, [pc, #140]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002ea0:	69db      	ldr	r3, [r3, #28]
 8002ea2:	4a22      	ldr	r2, [pc, #136]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002ea4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ea8:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f003 0301 	and.w	r3, r3, #1
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d008      	beq.n	8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002eb6:	4b1d      	ldr	r3, [pc, #116]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eba:	f023 0203 	bic.w	r2, r3, #3
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	689b      	ldr	r3, [r3, #8]
 8002ec2:	491a      	ldr	r1, [pc, #104]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f003 0320 	and.w	r3, r3, #32
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d008      	beq.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002ed4:	4b15      	ldr	r3, [pc, #84]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002ed6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ed8:	f023 0210 	bic.w	r2, r3, #16
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	68db      	ldr	r3, [r3, #12]
 8002ee0:	4912      	ldr	r1, [pc, #72]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d008      	beq.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002ef2:	4b0e      	ldr	r3, [pc, #56]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002ef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ef6:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	691b      	ldr	r3, [r3, #16]
 8002efe:	490b      	ldr	r1, [pc, #44]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002f00:	4313      	orrs	r3, r2
 8002f02:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d008      	beq.n	8002f22 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002f10:	4b06      	ldr	r3, [pc, #24]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002f12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f14:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	695b      	ldr	r3, [r3, #20]
 8002f1c:	4903      	ldr	r1, [pc, #12]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002f22:	2300      	movs	r3, #0
}
 8002f24:	4618      	mov	r0, r3
 8002f26:	3748      	adds	r7, #72	; 0x48
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bd80      	pop	{r7, pc}
 8002f2c:	40021000 	.word	0x40021000
 8002f30:	40007000 	.word	0x40007000
 8002f34:	10908100 	.word	0x10908100

08002f38 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b082      	sub	sp, #8
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d101      	bne.n	8002f4a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	e049      	b.n	8002fde <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f50:	b2db      	uxtb	r3, r3
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d106      	bne.n	8002f64 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f5e:	6878      	ldr	r0, [r7, #4]
 8002f60:	f7fd fde2 	bl	8000b28 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2202      	movs	r2, #2
 8002f68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681a      	ldr	r2, [r3, #0]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	3304      	adds	r3, #4
 8002f74:	4619      	mov	r1, r3
 8002f76:	4610      	mov	r0, r2
 8002f78:	f000 fb54 	bl	8003624 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2201      	movs	r2, #1
 8002f80:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2201      	movs	r2, #1
 8002f88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2201      	movs	r2, #1
 8002f90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2201      	movs	r2, #1
 8002f98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2201      	movs	r2, #1
 8002fb0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2201      	movs	r2, #1
 8002fd0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002fdc:	2300      	movs	r3, #0
}
 8002fde:	4618      	mov	r0, r3
 8002fe0:	3708      	adds	r7, #8
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}

08002fe6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002fe6:	b580      	push	{r7, lr}
 8002fe8:	b082      	sub	sp, #8
 8002fea:	af00      	add	r7, sp, #0
 8002fec:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d101      	bne.n	8002ff8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	e049      	b.n	800308c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ffe:	b2db      	uxtb	r3, r3
 8003000:	2b00      	cmp	r3, #0
 8003002:	d106      	bne.n	8003012 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2200      	movs	r2, #0
 8003008:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800300c:	6878      	ldr	r0, [r7, #4]
 800300e:	f000 f841 	bl	8003094 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2202      	movs	r2, #2
 8003016:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681a      	ldr	r2, [r3, #0]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	3304      	adds	r3, #4
 8003022:	4619      	mov	r1, r3
 8003024:	4610      	mov	r0, r2
 8003026:	f000 fafd 	bl	8003624 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2201      	movs	r2, #1
 800302e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2201      	movs	r2, #1
 8003036:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2201      	movs	r2, #1
 800303e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2201      	movs	r2, #1
 8003046:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2201      	movs	r2, #1
 800304e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2201      	movs	r2, #1
 8003056:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2201      	movs	r2, #1
 800305e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2201      	movs	r2, #1
 8003066:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2201      	movs	r2, #1
 800306e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2201      	movs	r2, #1
 8003076:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2201      	movs	r2, #1
 800307e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2201      	movs	r2, #1
 8003086:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800308a:	2300      	movs	r3, #0
}
 800308c:	4618      	mov	r0, r3
 800308e:	3708      	adds	r7, #8
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}

08003094 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003094:	b480      	push	{r7}
 8003096:	b083      	sub	sp, #12
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800309c:	bf00      	nop
 800309e:	370c      	adds	r7, #12
 80030a0:	46bd      	mov	sp, r7
 80030a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a6:	4770      	bx	lr

080030a8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b084      	sub	sp, #16
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
 80030b0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d109      	bne.n	80030cc <HAL_TIM_PWM_Start+0x24>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80030be:	b2db      	uxtb	r3, r3
 80030c0:	2b01      	cmp	r3, #1
 80030c2:	bf14      	ite	ne
 80030c4:	2301      	movne	r3, #1
 80030c6:	2300      	moveq	r3, #0
 80030c8:	b2db      	uxtb	r3, r3
 80030ca:	e03c      	b.n	8003146 <HAL_TIM_PWM_Start+0x9e>
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	2b04      	cmp	r3, #4
 80030d0:	d109      	bne.n	80030e6 <HAL_TIM_PWM_Start+0x3e>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80030d8:	b2db      	uxtb	r3, r3
 80030da:	2b01      	cmp	r3, #1
 80030dc:	bf14      	ite	ne
 80030de:	2301      	movne	r3, #1
 80030e0:	2300      	moveq	r3, #0
 80030e2:	b2db      	uxtb	r3, r3
 80030e4:	e02f      	b.n	8003146 <HAL_TIM_PWM_Start+0x9e>
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	2b08      	cmp	r3, #8
 80030ea:	d109      	bne.n	8003100 <HAL_TIM_PWM_Start+0x58>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80030f2:	b2db      	uxtb	r3, r3
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	bf14      	ite	ne
 80030f8:	2301      	movne	r3, #1
 80030fa:	2300      	moveq	r3, #0
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	e022      	b.n	8003146 <HAL_TIM_PWM_Start+0x9e>
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	2b0c      	cmp	r3, #12
 8003104:	d109      	bne.n	800311a <HAL_TIM_PWM_Start+0x72>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800310c:	b2db      	uxtb	r3, r3
 800310e:	2b01      	cmp	r3, #1
 8003110:	bf14      	ite	ne
 8003112:	2301      	movne	r3, #1
 8003114:	2300      	moveq	r3, #0
 8003116:	b2db      	uxtb	r3, r3
 8003118:	e015      	b.n	8003146 <HAL_TIM_PWM_Start+0x9e>
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	2b10      	cmp	r3, #16
 800311e:	d109      	bne.n	8003134 <HAL_TIM_PWM_Start+0x8c>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003126:	b2db      	uxtb	r3, r3
 8003128:	2b01      	cmp	r3, #1
 800312a:	bf14      	ite	ne
 800312c:	2301      	movne	r3, #1
 800312e:	2300      	moveq	r3, #0
 8003130:	b2db      	uxtb	r3, r3
 8003132:	e008      	b.n	8003146 <HAL_TIM_PWM_Start+0x9e>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800313a:	b2db      	uxtb	r3, r3
 800313c:	2b01      	cmp	r3, #1
 800313e:	bf14      	ite	ne
 8003140:	2301      	movne	r3, #1
 8003142:	2300      	moveq	r3, #0
 8003144:	b2db      	uxtb	r3, r3
 8003146:	2b00      	cmp	r3, #0
 8003148:	d001      	beq.n	800314e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	e088      	b.n	8003260 <HAL_TIM_PWM_Start+0x1b8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d104      	bne.n	800315e <HAL_TIM_PWM_Start+0xb6>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2202      	movs	r2, #2
 8003158:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800315c:	e023      	b.n	80031a6 <HAL_TIM_PWM_Start+0xfe>
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	2b04      	cmp	r3, #4
 8003162:	d104      	bne.n	800316e <HAL_TIM_PWM_Start+0xc6>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2202      	movs	r2, #2
 8003168:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800316c:	e01b      	b.n	80031a6 <HAL_TIM_PWM_Start+0xfe>
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	2b08      	cmp	r3, #8
 8003172:	d104      	bne.n	800317e <HAL_TIM_PWM_Start+0xd6>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2202      	movs	r2, #2
 8003178:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800317c:	e013      	b.n	80031a6 <HAL_TIM_PWM_Start+0xfe>
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	2b0c      	cmp	r3, #12
 8003182:	d104      	bne.n	800318e <HAL_TIM_PWM_Start+0xe6>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2202      	movs	r2, #2
 8003188:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800318c:	e00b      	b.n	80031a6 <HAL_TIM_PWM_Start+0xfe>
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	2b10      	cmp	r3, #16
 8003192:	d104      	bne.n	800319e <HAL_TIM_PWM_Start+0xf6>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2202      	movs	r2, #2
 8003198:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800319c:	e003      	b.n	80031a6 <HAL_TIM_PWM_Start+0xfe>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2202      	movs	r2, #2
 80031a2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	2201      	movs	r2, #1
 80031ac:	6839      	ldr	r1, [r7, #0]
 80031ae:	4618      	mov	r0, r3
 80031b0:	f000 fdf0 	bl	8003d94 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a2b      	ldr	r2, [pc, #172]	; (8003268 <HAL_TIM_PWM_Start+0x1c0>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d00e      	beq.n	80031dc <HAL_TIM_PWM_Start+0x134>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a2a      	ldr	r2, [pc, #168]	; (800326c <HAL_TIM_PWM_Start+0x1c4>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d009      	beq.n	80031dc <HAL_TIM_PWM_Start+0x134>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a28      	ldr	r2, [pc, #160]	; (8003270 <HAL_TIM_PWM_Start+0x1c8>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d004      	beq.n	80031dc <HAL_TIM_PWM_Start+0x134>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a27      	ldr	r2, [pc, #156]	; (8003274 <HAL_TIM_PWM_Start+0x1cc>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d101      	bne.n	80031e0 <HAL_TIM_PWM_Start+0x138>
 80031dc:	2301      	movs	r3, #1
 80031de:	e000      	b.n	80031e2 <HAL_TIM_PWM_Start+0x13a>
 80031e0:	2300      	movs	r3, #0
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d007      	beq.n	80031f6 <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80031f4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a1b      	ldr	r2, [pc, #108]	; (8003268 <HAL_TIM_PWM_Start+0x1c0>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d00e      	beq.n	800321e <HAL_TIM_PWM_Start+0x176>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003208:	d009      	beq.n	800321e <HAL_TIM_PWM_Start+0x176>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a1a      	ldr	r2, [pc, #104]	; (8003278 <HAL_TIM_PWM_Start+0x1d0>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d004      	beq.n	800321e <HAL_TIM_PWM_Start+0x176>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a14      	ldr	r2, [pc, #80]	; (800326c <HAL_TIM_PWM_Start+0x1c4>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d115      	bne.n	800324a <HAL_TIM_PWM_Start+0x1a2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	689a      	ldr	r2, [r3, #8]
 8003224:	4b15      	ldr	r3, [pc, #84]	; (800327c <HAL_TIM_PWM_Start+0x1d4>)
 8003226:	4013      	ands	r3, r2
 8003228:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	2b06      	cmp	r3, #6
 800322e:	d015      	beq.n	800325c <HAL_TIM_PWM_Start+0x1b4>
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003236:	d011      	beq.n	800325c <HAL_TIM_PWM_Start+0x1b4>
    {
      __HAL_TIM_ENABLE(htim);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	681a      	ldr	r2, [r3, #0]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f042 0201 	orr.w	r2, r2, #1
 8003246:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003248:	e008      	b.n	800325c <HAL_TIM_PWM_Start+0x1b4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	681a      	ldr	r2, [r3, #0]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f042 0201 	orr.w	r2, r2, #1
 8003258:	601a      	str	r2, [r3, #0]
 800325a:	e000      	b.n	800325e <HAL_TIM_PWM_Start+0x1b6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800325c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800325e:	2300      	movs	r3, #0
}
 8003260:	4618      	mov	r0, r3
 8003262:	3710      	adds	r7, #16
 8003264:	46bd      	mov	sp, r7
 8003266:	bd80      	pop	{r7, pc}
 8003268:	40012c00 	.word	0x40012c00
 800326c:	40014000 	.word	0x40014000
 8003270:	40014400 	.word	0x40014400
 8003274:	40014800 	.word	0x40014800
 8003278:	40000400 	.word	0x40000400
 800327c:	00010007 	.word	0x00010007

08003280 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b086      	sub	sp, #24
 8003284:	af00      	add	r7, sp, #0
 8003286:	60f8      	str	r0, [r7, #12]
 8003288:	60b9      	str	r1, [r7, #8]
 800328a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800328c:	2300      	movs	r3, #0
 800328e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003296:	2b01      	cmp	r3, #1
 8003298:	d101      	bne.n	800329e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800329a:	2302      	movs	r3, #2
 800329c:	e0ff      	b.n	800349e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	2201      	movs	r2, #1
 80032a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2b14      	cmp	r3, #20
 80032aa:	f200 80f0 	bhi.w	800348e <HAL_TIM_PWM_ConfigChannel+0x20e>
 80032ae:	a201      	add	r2, pc, #4	; (adr r2, 80032b4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80032b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032b4:	08003309 	.word	0x08003309
 80032b8:	0800348f 	.word	0x0800348f
 80032bc:	0800348f 	.word	0x0800348f
 80032c0:	0800348f 	.word	0x0800348f
 80032c4:	08003349 	.word	0x08003349
 80032c8:	0800348f 	.word	0x0800348f
 80032cc:	0800348f 	.word	0x0800348f
 80032d0:	0800348f 	.word	0x0800348f
 80032d4:	0800338b 	.word	0x0800338b
 80032d8:	0800348f 	.word	0x0800348f
 80032dc:	0800348f 	.word	0x0800348f
 80032e0:	0800348f 	.word	0x0800348f
 80032e4:	080033cb 	.word	0x080033cb
 80032e8:	0800348f 	.word	0x0800348f
 80032ec:	0800348f 	.word	0x0800348f
 80032f0:	0800348f 	.word	0x0800348f
 80032f4:	0800340d 	.word	0x0800340d
 80032f8:	0800348f 	.word	0x0800348f
 80032fc:	0800348f 	.word	0x0800348f
 8003300:	0800348f 	.word	0x0800348f
 8003304:	0800344d 	.word	0x0800344d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	68b9      	ldr	r1, [r7, #8]
 800330e:	4618      	mov	r0, r3
 8003310:	f000 fa00 	bl	8003714 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	699a      	ldr	r2, [r3, #24]
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f042 0208 	orr.w	r2, r2, #8
 8003322:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	699a      	ldr	r2, [r3, #24]
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f022 0204 	bic.w	r2, r2, #4
 8003332:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	6999      	ldr	r1, [r3, #24]
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	691a      	ldr	r2, [r3, #16]
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	430a      	orrs	r2, r1
 8003344:	619a      	str	r2, [r3, #24]
      break;
 8003346:	e0a5      	b.n	8003494 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	68b9      	ldr	r1, [r7, #8]
 800334e:	4618      	mov	r0, r3
 8003350:	f000 fa66 	bl	8003820 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	699a      	ldr	r2, [r3, #24]
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003362:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	699a      	ldr	r2, [r3, #24]
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003372:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	6999      	ldr	r1, [r3, #24]
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	691b      	ldr	r3, [r3, #16]
 800337e:	021a      	lsls	r2, r3, #8
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	430a      	orrs	r2, r1
 8003386:	619a      	str	r2, [r3, #24]
      break;
 8003388:	e084      	b.n	8003494 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	68b9      	ldr	r1, [r7, #8]
 8003390:	4618      	mov	r0, r3
 8003392:	f000 fac5 	bl	8003920 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	69da      	ldr	r2, [r3, #28]
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f042 0208 	orr.w	r2, r2, #8
 80033a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	69da      	ldr	r2, [r3, #28]
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f022 0204 	bic.w	r2, r2, #4
 80033b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	69d9      	ldr	r1, [r3, #28]
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	691a      	ldr	r2, [r3, #16]
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	430a      	orrs	r2, r1
 80033c6:	61da      	str	r2, [r3, #28]
      break;
 80033c8:	e064      	b.n	8003494 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	68b9      	ldr	r1, [r7, #8]
 80033d0:	4618      	mov	r0, r3
 80033d2:	f000 fb23 	bl	8003a1c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	69da      	ldr	r2, [r3, #28]
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80033e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	69da      	ldr	r2, [r3, #28]
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	69d9      	ldr	r1, [r3, #28]
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	691b      	ldr	r3, [r3, #16]
 8003400:	021a      	lsls	r2, r3, #8
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	430a      	orrs	r2, r1
 8003408:	61da      	str	r2, [r3, #28]
      break;
 800340a:	e043      	b.n	8003494 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	68b9      	ldr	r1, [r7, #8]
 8003412:	4618      	mov	r0, r3
 8003414:	f000 fb66 	bl	8003ae4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f042 0208 	orr.w	r2, r2, #8
 8003426:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f022 0204 	bic.w	r2, r2, #4
 8003436:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800343e:	68bb      	ldr	r3, [r7, #8]
 8003440:	691a      	ldr	r2, [r3, #16]
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	430a      	orrs	r2, r1
 8003448:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800344a:	e023      	b.n	8003494 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	68b9      	ldr	r1, [r7, #8]
 8003452:	4618      	mov	r0, r3
 8003454:	f000 fba4 	bl	8003ba0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003466:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003476:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800347e:	68bb      	ldr	r3, [r7, #8]
 8003480:	691b      	ldr	r3, [r3, #16]
 8003482:	021a      	lsls	r2, r3, #8
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	430a      	orrs	r2, r1
 800348a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800348c:	e002      	b.n	8003494 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 800348e:	2301      	movs	r3, #1
 8003490:	75fb      	strb	r3, [r7, #23]
      break;
 8003492:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	2200      	movs	r2, #0
 8003498:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800349c:	7dfb      	ldrb	r3, [r7, #23]
}
 800349e:	4618      	mov	r0, r3
 80034a0:	3718      	adds	r7, #24
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}
 80034a6:	bf00      	nop

080034a8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b084      	sub	sp, #16
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
 80034b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80034b2:	2300      	movs	r3, #0
 80034b4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034bc:	2b01      	cmp	r3, #1
 80034be:	d101      	bne.n	80034c4 <HAL_TIM_ConfigClockSource+0x1c>
 80034c0:	2302      	movs	r3, #2
 80034c2:	e0ab      	b.n	800361c <HAL_TIM_ConfigClockSource+0x174>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2201      	movs	r2, #1
 80034c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2202      	movs	r2, #2
 80034d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	689b      	ldr	r3, [r3, #8]
 80034da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034e2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80034e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80034ee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	68ba      	ldr	r2, [r7, #8]
 80034f6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	2b40      	cmp	r3, #64	; 0x40
 80034fe:	d067      	beq.n	80035d0 <HAL_TIM_ConfigClockSource+0x128>
 8003500:	2b40      	cmp	r3, #64	; 0x40
 8003502:	d80b      	bhi.n	800351c <HAL_TIM_ConfigClockSource+0x74>
 8003504:	2b10      	cmp	r3, #16
 8003506:	d073      	beq.n	80035f0 <HAL_TIM_ConfigClockSource+0x148>
 8003508:	2b10      	cmp	r3, #16
 800350a:	d802      	bhi.n	8003512 <HAL_TIM_ConfigClockSource+0x6a>
 800350c:	2b00      	cmp	r3, #0
 800350e:	d06f      	beq.n	80035f0 <HAL_TIM_ConfigClockSource+0x148>
 8003510:	e077      	b.n	8003602 <HAL_TIM_ConfigClockSource+0x15a>
 8003512:	2b20      	cmp	r3, #32
 8003514:	d06c      	beq.n	80035f0 <HAL_TIM_ConfigClockSource+0x148>
 8003516:	2b30      	cmp	r3, #48	; 0x30
 8003518:	d06a      	beq.n	80035f0 <HAL_TIM_ConfigClockSource+0x148>
 800351a:	e072      	b.n	8003602 <HAL_TIM_ConfigClockSource+0x15a>
 800351c:	2b70      	cmp	r3, #112	; 0x70
 800351e:	d00d      	beq.n	800353c <HAL_TIM_ConfigClockSource+0x94>
 8003520:	2b70      	cmp	r3, #112	; 0x70
 8003522:	d804      	bhi.n	800352e <HAL_TIM_ConfigClockSource+0x86>
 8003524:	2b50      	cmp	r3, #80	; 0x50
 8003526:	d033      	beq.n	8003590 <HAL_TIM_ConfigClockSource+0xe8>
 8003528:	2b60      	cmp	r3, #96	; 0x60
 800352a:	d041      	beq.n	80035b0 <HAL_TIM_ConfigClockSource+0x108>
 800352c:	e069      	b.n	8003602 <HAL_TIM_ConfigClockSource+0x15a>
 800352e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003532:	d069      	beq.n	8003608 <HAL_TIM_ConfigClockSource+0x160>
 8003534:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003538:	d017      	beq.n	800356a <HAL_TIM_ConfigClockSource+0xc2>
 800353a:	e062      	b.n	8003602 <HAL_TIM_ConfigClockSource+0x15a>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6818      	ldr	r0, [r3, #0]
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	6899      	ldr	r1, [r3, #8]
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	685a      	ldr	r2, [r3, #4]
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	68db      	ldr	r3, [r3, #12]
 800354c:	f000 fc02 	bl	8003d54 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	689b      	ldr	r3, [r3, #8]
 8003556:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800355e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	68ba      	ldr	r2, [r7, #8]
 8003566:	609a      	str	r2, [r3, #8]
      break;
 8003568:	e04f      	b.n	800360a <HAL_TIM_ConfigClockSource+0x162>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6818      	ldr	r0, [r3, #0]
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	6899      	ldr	r1, [r3, #8]
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	685a      	ldr	r2, [r3, #4]
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	68db      	ldr	r3, [r3, #12]
 800357a:	f000 fbeb 	bl	8003d54 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	689a      	ldr	r2, [r3, #8]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800358c:	609a      	str	r2, [r3, #8]
      break;
 800358e:	e03c      	b.n	800360a <HAL_TIM_ConfigClockSource+0x162>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6818      	ldr	r0, [r3, #0]
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	6859      	ldr	r1, [r3, #4]
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	68db      	ldr	r3, [r3, #12]
 800359c:	461a      	mov	r2, r3
 800359e:	f000 fb5f 	bl	8003c60 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	2150      	movs	r1, #80	; 0x50
 80035a8:	4618      	mov	r0, r3
 80035aa:	f000 fbb8 	bl	8003d1e <TIM_ITRx_SetConfig>
      break;
 80035ae:	e02c      	b.n	800360a <HAL_TIM_ConfigClockSource+0x162>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6818      	ldr	r0, [r3, #0]
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	6859      	ldr	r1, [r3, #4]
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	68db      	ldr	r3, [r3, #12]
 80035bc:	461a      	mov	r2, r3
 80035be:	f000 fb7e 	bl	8003cbe <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	2160      	movs	r1, #96	; 0x60
 80035c8:	4618      	mov	r0, r3
 80035ca:	f000 fba8 	bl	8003d1e <TIM_ITRx_SetConfig>
      break;
 80035ce:	e01c      	b.n	800360a <HAL_TIM_ConfigClockSource+0x162>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6818      	ldr	r0, [r3, #0]
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	6859      	ldr	r1, [r3, #4]
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	68db      	ldr	r3, [r3, #12]
 80035dc:	461a      	mov	r2, r3
 80035de:	f000 fb3f 	bl	8003c60 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	2140      	movs	r1, #64	; 0x40
 80035e8:	4618      	mov	r0, r3
 80035ea:	f000 fb98 	bl	8003d1e <TIM_ITRx_SetConfig>
      break;
 80035ee:	e00c      	b.n	800360a <HAL_TIM_ConfigClockSource+0x162>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681a      	ldr	r2, [r3, #0]
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4619      	mov	r1, r3
 80035fa:	4610      	mov	r0, r2
 80035fc:	f000 fb8f 	bl	8003d1e <TIM_ITRx_SetConfig>
      break;
 8003600:	e003      	b.n	800360a <HAL_TIM_ConfigClockSource+0x162>
    }

    default:
      status = HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	73fb      	strb	r3, [r7, #15]
      break;
 8003606:	e000      	b.n	800360a <HAL_TIM_ConfigClockSource+0x162>
      break;
 8003608:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2201      	movs	r2, #1
 800360e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2200      	movs	r2, #0
 8003616:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800361a:	7bfb      	ldrb	r3, [r7, #15]
}
 800361c:	4618      	mov	r0, r3
 800361e:	3710      	adds	r7, #16
 8003620:	46bd      	mov	sp, r7
 8003622:	bd80      	pop	{r7, pc}

08003624 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003624:	b480      	push	{r7}
 8003626:	b085      	sub	sp, #20
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
 800362c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	4a32      	ldr	r2, [pc, #200]	; (8003700 <TIM_Base_SetConfig+0xdc>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d007      	beq.n	800364c <TIM_Base_SetConfig+0x28>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003642:	d003      	beq.n	800364c <TIM_Base_SetConfig+0x28>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	4a2f      	ldr	r2, [pc, #188]	; (8003704 <TIM_Base_SetConfig+0xe0>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d108      	bne.n	800365e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003652:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	68fa      	ldr	r2, [r7, #12]
 800365a:	4313      	orrs	r3, r2
 800365c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	4a27      	ldr	r2, [pc, #156]	; (8003700 <TIM_Base_SetConfig+0xdc>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d013      	beq.n	800368e <TIM_Base_SetConfig+0x6a>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800366c:	d00f      	beq.n	800368e <TIM_Base_SetConfig+0x6a>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	4a24      	ldr	r2, [pc, #144]	; (8003704 <TIM_Base_SetConfig+0xe0>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d00b      	beq.n	800368e <TIM_Base_SetConfig+0x6a>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	4a23      	ldr	r2, [pc, #140]	; (8003708 <TIM_Base_SetConfig+0xe4>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d007      	beq.n	800368e <TIM_Base_SetConfig+0x6a>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	4a22      	ldr	r2, [pc, #136]	; (800370c <TIM_Base_SetConfig+0xe8>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d003      	beq.n	800368e <TIM_Base_SetConfig+0x6a>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	4a21      	ldr	r2, [pc, #132]	; (8003710 <TIM_Base_SetConfig+0xec>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d108      	bne.n	80036a0 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003694:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	68db      	ldr	r3, [r3, #12]
 800369a:	68fa      	ldr	r2, [r7, #12]
 800369c:	4313      	orrs	r3, r2
 800369e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	695b      	ldr	r3, [r3, #20]
 80036aa:	4313      	orrs	r3, r2
 80036ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	68fa      	ldr	r2, [r7, #12]
 80036b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	689a      	ldr	r2, [r3, #8]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	681a      	ldr	r2, [r3, #0]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	4a0e      	ldr	r2, [pc, #56]	; (8003700 <TIM_Base_SetConfig+0xdc>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d00b      	beq.n	80036e4 <TIM_Base_SetConfig+0xc0>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	4a0e      	ldr	r2, [pc, #56]	; (8003708 <TIM_Base_SetConfig+0xe4>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d007      	beq.n	80036e4 <TIM_Base_SetConfig+0xc0>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	4a0d      	ldr	r2, [pc, #52]	; (800370c <TIM_Base_SetConfig+0xe8>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d003      	beq.n	80036e4 <TIM_Base_SetConfig+0xc0>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	4a0c      	ldr	r2, [pc, #48]	; (8003710 <TIM_Base_SetConfig+0xec>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d103      	bne.n	80036ec <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	691a      	ldr	r2, [r3, #16]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2201      	movs	r2, #1
 80036f0:	615a      	str	r2, [r3, #20]
}
 80036f2:	bf00      	nop
 80036f4:	3714      	adds	r7, #20
 80036f6:	46bd      	mov	sp, r7
 80036f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fc:	4770      	bx	lr
 80036fe:	bf00      	nop
 8003700:	40012c00 	.word	0x40012c00
 8003704:	40000400 	.word	0x40000400
 8003708:	40014000 	.word	0x40014000
 800370c:	40014400 	.word	0x40014400
 8003710:	40014800 	.word	0x40014800

08003714 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003714:	b480      	push	{r7}
 8003716:	b087      	sub	sp, #28
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
 800371c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6a1b      	ldr	r3, [r3, #32]
 8003722:	f023 0201 	bic.w	r2, r3, #1
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6a1b      	ldr	r3, [r3, #32]
 800372e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	699b      	ldr	r3, [r3, #24]
 800373a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003742:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003746:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	f023 0303 	bic.w	r3, r3, #3
 800374e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	68fa      	ldr	r2, [r7, #12]
 8003756:	4313      	orrs	r3, r2
 8003758:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	f023 0302 	bic.w	r3, r3, #2
 8003760:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	689b      	ldr	r3, [r3, #8]
 8003766:	697a      	ldr	r2, [r7, #20]
 8003768:	4313      	orrs	r3, r2
 800376a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	4a28      	ldr	r2, [pc, #160]	; (8003810 <TIM_OC1_SetConfig+0xfc>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d00b      	beq.n	800378c <TIM_OC1_SetConfig+0x78>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	4a27      	ldr	r2, [pc, #156]	; (8003814 <TIM_OC1_SetConfig+0x100>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d007      	beq.n	800378c <TIM_OC1_SetConfig+0x78>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	4a26      	ldr	r2, [pc, #152]	; (8003818 <TIM_OC1_SetConfig+0x104>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d003      	beq.n	800378c <TIM_OC1_SetConfig+0x78>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	4a25      	ldr	r2, [pc, #148]	; (800381c <TIM_OC1_SetConfig+0x108>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d10c      	bne.n	80037a6 <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	f023 0308 	bic.w	r3, r3, #8
 8003792:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	68db      	ldr	r3, [r3, #12]
 8003798:	697a      	ldr	r2, [r7, #20]
 800379a:	4313      	orrs	r3, r2
 800379c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	f023 0304 	bic.w	r3, r3, #4
 80037a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	4a19      	ldr	r2, [pc, #100]	; (8003810 <TIM_OC1_SetConfig+0xfc>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d00b      	beq.n	80037c6 <TIM_OC1_SetConfig+0xb2>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	4a18      	ldr	r2, [pc, #96]	; (8003814 <TIM_OC1_SetConfig+0x100>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d007      	beq.n	80037c6 <TIM_OC1_SetConfig+0xb2>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	4a17      	ldr	r2, [pc, #92]	; (8003818 <TIM_OC1_SetConfig+0x104>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d003      	beq.n	80037c6 <TIM_OC1_SetConfig+0xb2>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	4a16      	ldr	r2, [pc, #88]	; (800381c <TIM_OC1_SetConfig+0x108>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d111      	bne.n	80037ea <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80037cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80037ce:	693b      	ldr	r3, [r7, #16]
 80037d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80037d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	695b      	ldr	r3, [r3, #20]
 80037da:	693a      	ldr	r2, [r7, #16]
 80037dc:	4313      	orrs	r3, r2
 80037de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	699b      	ldr	r3, [r3, #24]
 80037e4:	693a      	ldr	r2, [r7, #16]
 80037e6:	4313      	orrs	r3, r2
 80037e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	693a      	ldr	r2, [r7, #16]
 80037ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	68fa      	ldr	r2, [r7, #12]
 80037f4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	685a      	ldr	r2, [r3, #4]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	697a      	ldr	r2, [r7, #20]
 8003802:	621a      	str	r2, [r3, #32]
}
 8003804:	bf00      	nop
 8003806:	371c      	adds	r7, #28
 8003808:	46bd      	mov	sp, r7
 800380a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380e:	4770      	bx	lr
 8003810:	40012c00 	.word	0x40012c00
 8003814:	40014000 	.word	0x40014000
 8003818:	40014400 	.word	0x40014400
 800381c:	40014800 	.word	0x40014800

08003820 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003820:	b480      	push	{r7}
 8003822:	b087      	sub	sp, #28
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
 8003828:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6a1b      	ldr	r3, [r3, #32]
 800382e:	f023 0210 	bic.w	r2, r3, #16
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6a1b      	ldr	r3, [r3, #32]
 800383a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	699b      	ldr	r3, [r3, #24]
 8003846:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800384e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003852:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800385a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	021b      	lsls	r3, r3, #8
 8003862:	68fa      	ldr	r2, [r7, #12]
 8003864:	4313      	orrs	r3, r2
 8003866:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003868:	697b      	ldr	r3, [r7, #20]
 800386a:	f023 0320 	bic.w	r3, r3, #32
 800386e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	011b      	lsls	r3, r3, #4
 8003876:	697a      	ldr	r2, [r7, #20]
 8003878:	4313      	orrs	r3, r2
 800387a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	4a24      	ldr	r2, [pc, #144]	; (8003910 <TIM_OC2_SetConfig+0xf0>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d10d      	bne.n	80038a0 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003884:	697b      	ldr	r3, [r7, #20]
 8003886:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800388a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	68db      	ldr	r3, [r3, #12]
 8003890:	011b      	lsls	r3, r3, #4
 8003892:	697a      	ldr	r2, [r7, #20]
 8003894:	4313      	orrs	r3, r2
 8003896:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003898:	697b      	ldr	r3, [r7, #20]
 800389a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800389e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	4a1b      	ldr	r2, [pc, #108]	; (8003910 <TIM_OC2_SetConfig+0xf0>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d00b      	beq.n	80038c0 <TIM_OC2_SetConfig+0xa0>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	4a1a      	ldr	r2, [pc, #104]	; (8003914 <TIM_OC2_SetConfig+0xf4>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d007      	beq.n	80038c0 <TIM_OC2_SetConfig+0xa0>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	4a19      	ldr	r2, [pc, #100]	; (8003918 <TIM_OC2_SetConfig+0xf8>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d003      	beq.n	80038c0 <TIM_OC2_SetConfig+0xa0>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	4a18      	ldr	r2, [pc, #96]	; (800391c <TIM_OC2_SetConfig+0xfc>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d113      	bne.n	80038e8 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80038c6:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80038c8:	693b      	ldr	r3, [r7, #16]
 80038ca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80038ce:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	695b      	ldr	r3, [r3, #20]
 80038d4:	009b      	lsls	r3, r3, #2
 80038d6:	693a      	ldr	r2, [r7, #16]
 80038d8:	4313      	orrs	r3, r2
 80038da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	699b      	ldr	r3, [r3, #24]
 80038e0:	009b      	lsls	r3, r3, #2
 80038e2:	693a      	ldr	r2, [r7, #16]
 80038e4:	4313      	orrs	r3, r2
 80038e6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	693a      	ldr	r2, [r7, #16]
 80038ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	68fa      	ldr	r2, [r7, #12]
 80038f2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	685a      	ldr	r2, [r3, #4]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	697a      	ldr	r2, [r7, #20]
 8003900:	621a      	str	r2, [r3, #32]
}
 8003902:	bf00      	nop
 8003904:	371c      	adds	r7, #28
 8003906:	46bd      	mov	sp, r7
 8003908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390c:	4770      	bx	lr
 800390e:	bf00      	nop
 8003910:	40012c00 	.word	0x40012c00
 8003914:	40014000 	.word	0x40014000
 8003918:	40014400 	.word	0x40014400
 800391c:	40014800 	.word	0x40014800

08003920 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003920:	b480      	push	{r7}
 8003922:	b087      	sub	sp, #28
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
 8003928:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6a1b      	ldr	r3, [r3, #32]
 800392e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6a1b      	ldr	r3, [r3, #32]
 800393a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	69db      	ldr	r3, [r3, #28]
 8003946:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800394e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003952:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	f023 0303 	bic.w	r3, r3, #3
 800395a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	68fa      	ldr	r2, [r7, #12]
 8003962:	4313      	orrs	r3, r2
 8003964:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003966:	697b      	ldr	r3, [r7, #20]
 8003968:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800396c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	689b      	ldr	r3, [r3, #8]
 8003972:	021b      	lsls	r3, r3, #8
 8003974:	697a      	ldr	r2, [r7, #20]
 8003976:	4313      	orrs	r3, r2
 8003978:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	4a23      	ldr	r2, [pc, #140]	; (8003a0c <TIM_OC3_SetConfig+0xec>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d10d      	bne.n	800399e <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003982:	697b      	ldr	r3, [r7, #20]
 8003984:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003988:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	68db      	ldr	r3, [r3, #12]
 800398e:	021b      	lsls	r3, r3, #8
 8003990:	697a      	ldr	r2, [r7, #20]
 8003992:	4313      	orrs	r3, r2
 8003994:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003996:	697b      	ldr	r3, [r7, #20]
 8003998:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800399c:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	4a1a      	ldr	r2, [pc, #104]	; (8003a0c <TIM_OC3_SetConfig+0xec>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d00b      	beq.n	80039be <TIM_OC3_SetConfig+0x9e>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	4a19      	ldr	r2, [pc, #100]	; (8003a10 <TIM_OC3_SetConfig+0xf0>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d007      	beq.n	80039be <TIM_OC3_SetConfig+0x9e>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	4a18      	ldr	r2, [pc, #96]	; (8003a14 <TIM_OC3_SetConfig+0xf4>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d003      	beq.n	80039be <TIM_OC3_SetConfig+0x9e>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	4a17      	ldr	r2, [pc, #92]	; (8003a18 <TIM_OC3_SetConfig+0xf8>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d113      	bne.n	80039e6 <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80039c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80039c6:	693b      	ldr	r3, [r7, #16]
 80039c8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80039cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	695b      	ldr	r3, [r3, #20]
 80039d2:	011b      	lsls	r3, r3, #4
 80039d4:	693a      	ldr	r2, [r7, #16]
 80039d6:	4313      	orrs	r3, r2
 80039d8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	699b      	ldr	r3, [r3, #24]
 80039de:	011b      	lsls	r3, r3, #4
 80039e0:	693a      	ldr	r2, [r7, #16]
 80039e2:	4313      	orrs	r3, r2
 80039e4:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	693a      	ldr	r2, [r7, #16]
 80039ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	68fa      	ldr	r2, [r7, #12]
 80039f0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	685a      	ldr	r2, [r3, #4]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	697a      	ldr	r2, [r7, #20]
 80039fe:	621a      	str	r2, [r3, #32]
}
 8003a00:	bf00      	nop
 8003a02:	371c      	adds	r7, #28
 8003a04:	46bd      	mov	sp, r7
 8003a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0a:	4770      	bx	lr
 8003a0c:	40012c00 	.word	0x40012c00
 8003a10:	40014000 	.word	0x40014000
 8003a14:	40014400 	.word	0x40014400
 8003a18:	40014800 	.word	0x40014800

08003a1c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b087      	sub	sp, #28
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
 8003a24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6a1b      	ldr	r3, [r3, #32]
 8003a2a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6a1b      	ldr	r3, [r3, #32]
 8003a36:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	69db      	ldr	r3, [r3, #28]
 8003a42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a56:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	021b      	lsls	r3, r3, #8
 8003a5e:	68fa      	ldr	r2, [r7, #12]
 8003a60:	4313      	orrs	r3, r2
 8003a62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003a64:	693b      	ldr	r3, [r7, #16]
 8003a66:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003a6a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	689b      	ldr	r3, [r3, #8]
 8003a70:	031b      	lsls	r3, r3, #12
 8003a72:	693a      	ldr	r2, [r7, #16]
 8003a74:	4313      	orrs	r3, r2
 8003a76:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	4a16      	ldr	r2, [pc, #88]	; (8003ad4 <TIM_OC4_SetConfig+0xb8>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d00b      	beq.n	8003a98 <TIM_OC4_SetConfig+0x7c>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	4a15      	ldr	r2, [pc, #84]	; (8003ad8 <TIM_OC4_SetConfig+0xbc>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d007      	beq.n	8003a98 <TIM_OC4_SetConfig+0x7c>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	4a14      	ldr	r2, [pc, #80]	; (8003adc <TIM_OC4_SetConfig+0xc0>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d003      	beq.n	8003a98 <TIM_OC4_SetConfig+0x7c>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	4a13      	ldr	r2, [pc, #76]	; (8003ae0 <TIM_OC4_SetConfig+0xc4>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d109      	bne.n	8003aac <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003a9e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	695b      	ldr	r3, [r3, #20]
 8003aa4:	019b      	lsls	r3, r3, #6
 8003aa6:	697a      	ldr	r2, [r7, #20]
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	697a      	ldr	r2, [r7, #20]
 8003ab0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	68fa      	ldr	r2, [r7, #12]
 8003ab6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	685a      	ldr	r2, [r3, #4]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	693a      	ldr	r2, [r7, #16]
 8003ac4:	621a      	str	r2, [r3, #32]
}
 8003ac6:	bf00      	nop
 8003ac8:	371c      	adds	r7, #28
 8003aca:	46bd      	mov	sp, r7
 8003acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad0:	4770      	bx	lr
 8003ad2:	bf00      	nop
 8003ad4:	40012c00 	.word	0x40012c00
 8003ad8:	40014000 	.word	0x40014000
 8003adc:	40014400 	.word	0x40014400
 8003ae0:	40014800 	.word	0x40014800

08003ae4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b087      	sub	sp, #28
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
 8003aec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6a1b      	ldr	r3, [r3, #32]
 8003af2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6a1b      	ldr	r3, [r3, #32]
 8003afe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	68fa      	ldr	r2, [r7, #12]
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003b22:	693b      	ldr	r3, [r7, #16]
 8003b24:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003b28:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	689b      	ldr	r3, [r3, #8]
 8003b2e:	041b      	lsls	r3, r3, #16
 8003b30:	693a      	ldr	r2, [r7, #16]
 8003b32:	4313      	orrs	r3, r2
 8003b34:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	4a15      	ldr	r2, [pc, #84]	; (8003b90 <TIM_OC5_SetConfig+0xac>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d00b      	beq.n	8003b56 <TIM_OC5_SetConfig+0x72>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	4a14      	ldr	r2, [pc, #80]	; (8003b94 <TIM_OC5_SetConfig+0xb0>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d007      	beq.n	8003b56 <TIM_OC5_SetConfig+0x72>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	4a13      	ldr	r2, [pc, #76]	; (8003b98 <TIM_OC5_SetConfig+0xb4>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d003      	beq.n	8003b56 <TIM_OC5_SetConfig+0x72>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	4a12      	ldr	r2, [pc, #72]	; (8003b9c <TIM_OC5_SetConfig+0xb8>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d109      	bne.n	8003b6a <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b5c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	695b      	ldr	r3, [r3, #20]
 8003b62:	021b      	lsls	r3, r3, #8
 8003b64:	697a      	ldr	r2, [r7, #20]
 8003b66:	4313      	orrs	r3, r2
 8003b68:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	697a      	ldr	r2, [r7, #20]
 8003b6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	68fa      	ldr	r2, [r7, #12]
 8003b74:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	685a      	ldr	r2, [r3, #4]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	693a      	ldr	r2, [r7, #16]
 8003b82:	621a      	str	r2, [r3, #32]
}
 8003b84:	bf00      	nop
 8003b86:	371c      	adds	r7, #28
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8e:	4770      	bx	lr
 8003b90:	40012c00 	.word	0x40012c00
 8003b94:	40014000 	.word	0x40014000
 8003b98:	40014400 	.word	0x40014400
 8003b9c:	40014800 	.word	0x40014800

08003ba0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	b087      	sub	sp, #28
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
 8003ba8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6a1b      	ldr	r3, [r3, #32]
 8003bae:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6a1b      	ldr	r3, [r3, #32]
 8003bba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003bce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003bd2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	021b      	lsls	r3, r3, #8
 8003bda:	68fa      	ldr	r2, [r7, #12]
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003be0:	693b      	ldr	r3, [r7, #16]
 8003be2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003be6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	689b      	ldr	r3, [r3, #8]
 8003bec:	051b      	lsls	r3, r3, #20
 8003bee:	693a      	ldr	r2, [r7, #16]
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	4a16      	ldr	r2, [pc, #88]	; (8003c50 <TIM_OC6_SetConfig+0xb0>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d00b      	beq.n	8003c14 <TIM_OC6_SetConfig+0x74>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	4a15      	ldr	r2, [pc, #84]	; (8003c54 <TIM_OC6_SetConfig+0xb4>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d007      	beq.n	8003c14 <TIM_OC6_SetConfig+0x74>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	4a14      	ldr	r2, [pc, #80]	; (8003c58 <TIM_OC6_SetConfig+0xb8>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d003      	beq.n	8003c14 <TIM_OC6_SetConfig+0x74>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	4a13      	ldr	r2, [pc, #76]	; (8003c5c <TIM_OC6_SetConfig+0xbc>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d109      	bne.n	8003c28 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003c14:	697b      	ldr	r3, [r7, #20]
 8003c16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c1a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	695b      	ldr	r3, [r3, #20]
 8003c20:	029b      	lsls	r3, r3, #10
 8003c22:	697a      	ldr	r2, [r7, #20]
 8003c24:	4313      	orrs	r3, r2
 8003c26:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	697a      	ldr	r2, [r7, #20]
 8003c2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	68fa      	ldr	r2, [r7, #12]
 8003c32:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	685a      	ldr	r2, [r3, #4]
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	693a      	ldr	r2, [r7, #16]
 8003c40:	621a      	str	r2, [r3, #32]
}
 8003c42:	bf00      	nop
 8003c44:	371c      	adds	r7, #28
 8003c46:	46bd      	mov	sp, r7
 8003c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4c:	4770      	bx	lr
 8003c4e:	bf00      	nop
 8003c50:	40012c00 	.word	0x40012c00
 8003c54:	40014000 	.word	0x40014000
 8003c58:	40014400 	.word	0x40014400
 8003c5c:	40014800 	.word	0x40014800

08003c60 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c60:	b480      	push	{r7}
 8003c62:	b087      	sub	sp, #28
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	60f8      	str	r0, [r7, #12]
 8003c68:	60b9      	str	r1, [r7, #8]
 8003c6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	6a1b      	ldr	r3, [r3, #32]
 8003c70:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	6a1b      	ldr	r3, [r3, #32]
 8003c76:	f023 0201 	bic.w	r2, r3, #1
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	699b      	ldr	r3, [r3, #24]
 8003c82:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003c84:	693b      	ldr	r3, [r7, #16]
 8003c86:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003c8a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	011b      	lsls	r3, r3, #4
 8003c90:	693a      	ldr	r2, [r7, #16]
 8003c92:	4313      	orrs	r3, r2
 8003c94:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	f023 030a 	bic.w	r3, r3, #10
 8003c9c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003c9e:	697a      	ldr	r2, [r7, #20]
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	693a      	ldr	r2, [r7, #16]
 8003caa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	697a      	ldr	r2, [r7, #20]
 8003cb0:	621a      	str	r2, [r3, #32]
}
 8003cb2:	bf00      	nop
 8003cb4:	371c      	adds	r7, #28
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbc:	4770      	bx	lr

08003cbe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003cbe:	b480      	push	{r7}
 8003cc0:	b087      	sub	sp, #28
 8003cc2:	af00      	add	r7, sp, #0
 8003cc4:	60f8      	str	r0, [r7, #12]
 8003cc6:	60b9      	str	r1, [r7, #8]
 8003cc8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	6a1b      	ldr	r3, [r3, #32]
 8003cce:	f023 0210 	bic.w	r2, r3, #16
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	699b      	ldr	r3, [r3, #24]
 8003cda:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	6a1b      	ldr	r3, [r3, #32]
 8003ce0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003ce8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	031b      	lsls	r3, r3, #12
 8003cee:	697a      	ldr	r2, [r7, #20]
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003cf4:	693b      	ldr	r3, [r7, #16]
 8003cf6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003cfa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	011b      	lsls	r3, r3, #4
 8003d00:	693a      	ldr	r2, [r7, #16]
 8003d02:	4313      	orrs	r3, r2
 8003d04:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	697a      	ldr	r2, [r7, #20]
 8003d0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	693a      	ldr	r2, [r7, #16]
 8003d10:	621a      	str	r2, [r3, #32]
}
 8003d12:	bf00      	nop
 8003d14:	371c      	adds	r7, #28
 8003d16:	46bd      	mov	sp, r7
 8003d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1c:	4770      	bx	lr

08003d1e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003d1e:	b480      	push	{r7}
 8003d20:	b085      	sub	sp, #20
 8003d22:	af00      	add	r7, sp, #0
 8003d24:	6078      	str	r0, [r7, #4]
 8003d26:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	689b      	ldr	r3, [r3, #8]
 8003d2c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d34:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003d36:	683a      	ldr	r2, [r7, #0]
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	f043 0307 	orr.w	r3, r3, #7
 8003d40:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	68fa      	ldr	r2, [r7, #12]
 8003d46:	609a      	str	r2, [r3, #8]
}
 8003d48:	bf00      	nop
 8003d4a:	3714      	adds	r7, #20
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d52:	4770      	bx	lr

08003d54 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003d54:	b480      	push	{r7}
 8003d56:	b087      	sub	sp, #28
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	60f8      	str	r0, [r7, #12]
 8003d5c:	60b9      	str	r1, [r7, #8]
 8003d5e:	607a      	str	r2, [r7, #4]
 8003d60:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	689b      	ldr	r3, [r3, #8]
 8003d66:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d68:	697b      	ldr	r3, [r7, #20]
 8003d6a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d6e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	021a      	lsls	r2, r3, #8
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	431a      	orrs	r2, r3
 8003d78:	68bb      	ldr	r3, [r7, #8]
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	697a      	ldr	r2, [r7, #20]
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	697a      	ldr	r2, [r7, #20]
 8003d86:	609a      	str	r2, [r3, #8]
}
 8003d88:	bf00      	nop
 8003d8a:	371c      	adds	r7, #28
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d92:	4770      	bx	lr

08003d94 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003d94:	b480      	push	{r7}
 8003d96:	b087      	sub	sp, #28
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	60f8      	str	r0, [r7, #12]
 8003d9c:	60b9      	str	r1, [r7, #8]
 8003d9e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	f003 031f 	and.w	r3, r3, #31
 8003da6:	2201      	movs	r2, #1
 8003da8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	6a1a      	ldr	r2, [r3, #32]
 8003db2:	697b      	ldr	r3, [r7, #20]
 8003db4:	43db      	mvns	r3, r3
 8003db6:	401a      	ands	r2, r3
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	6a1a      	ldr	r2, [r3, #32]
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	f003 031f 	and.w	r3, r3, #31
 8003dc6:	6879      	ldr	r1, [r7, #4]
 8003dc8:	fa01 f303 	lsl.w	r3, r1, r3
 8003dcc:	431a      	orrs	r2, r3
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	621a      	str	r2, [r3, #32]
}
 8003dd2:	bf00      	nop
 8003dd4:	371c      	adds	r7, #28
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ddc:	4770      	bx	lr
	...

08003de0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003de0:	b480      	push	{r7}
 8003de2:	b085      	sub	sp, #20
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
 8003de8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003df0:	2b01      	cmp	r3, #1
 8003df2:	d101      	bne.n	8003df8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003df4:	2302      	movs	r3, #2
 8003df6:	e054      	b.n	8003ea2 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2202      	movs	r2, #2
 8003e04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	689b      	ldr	r3, [r3, #8]
 8003e16:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a24      	ldr	r2, [pc, #144]	; (8003eb0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d108      	bne.n	8003e34 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003e28:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	68fa      	ldr	r2, [r7, #12]
 8003e30:	4313      	orrs	r3, r2
 8003e32:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e3a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	68fa      	ldr	r2, [r7, #12]
 8003e42:	4313      	orrs	r3, r2
 8003e44:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	68fa      	ldr	r2, [r7, #12]
 8003e4c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a17      	ldr	r2, [pc, #92]	; (8003eb0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d00e      	beq.n	8003e76 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e60:	d009      	beq.n	8003e76 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a13      	ldr	r2, [pc, #76]	; (8003eb4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d004      	beq.n	8003e76 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a11      	ldr	r2, [pc, #68]	; (8003eb8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d10c      	bne.n	8003e90 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003e76:	68bb      	ldr	r3, [r7, #8]
 8003e78:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e7c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	689b      	ldr	r3, [r3, #8]
 8003e82:	68ba      	ldr	r2, [r7, #8]
 8003e84:	4313      	orrs	r3, r2
 8003e86:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	68ba      	ldr	r2, [r7, #8]
 8003e8e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2201      	movs	r2, #1
 8003e94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003ea0:	2300      	movs	r3, #0
}
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	3714      	adds	r7, #20
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eac:	4770      	bx	lr
 8003eae:	bf00      	nop
 8003eb0:	40012c00 	.word	0x40012c00
 8003eb4:	40000400 	.word	0x40000400
 8003eb8:	40014000 	.word	0x40014000

08003ebc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	b085      	sub	sp, #20
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
 8003ec4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ed0:	2b01      	cmp	r3, #1
 8003ed2:	d101      	bne.n	8003ed8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003ed4:	2302      	movs	r3, #2
 8003ed6:	e060      	b.n	8003f9a <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2201      	movs	r2, #1
 8003edc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	68db      	ldr	r3, [r3, #12]
 8003eea:	4313      	orrs	r3, r2
 8003eec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	689b      	ldr	r3, [r3, #8]
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	4313      	orrs	r3, r2
 8003f08:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4313      	orrs	r3, r2
 8003f16:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	691b      	ldr	r3, [r3, #16]
 8003f22:	4313      	orrs	r3, r2
 8003f24:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	695b      	ldr	r3, [r3, #20]
 8003f30:	4313      	orrs	r3, r2
 8003f32:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	699b      	ldr	r3, [r3, #24]
 8003f4c:	041b      	lsls	r3, r3, #16
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4a14      	ldr	r2, [pc, #80]	; (8003fa8 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d115      	bne.n	8003f88 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f66:	051b      	lsls	r3, r3, #20
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	69db      	ldr	r3, [r3, #28]
 8003f76:	4313      	orrs	r3, r2
 8003f78:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	6a1b      	ldr	r3, [r3, #32]
 8003f84:	4313      	orrs	r3, r2
 8003f86:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	68fa      	ldr	r2, [r7, #12]
 8003f8e:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2200      	movs	r2, #0
 8003f94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f98:	2300      	movs	r3, #0
}
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	3714      	adds	r7, #20
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa4:	4770      	bx	lr
 8003fa6:	bf00      	nop
 8003fa8:	40012c00 	.word	0x40012c00

08003fac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b082      	sub	sp, #8
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d101      	bne.n	8003fbe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	e040      	b.n	8004040 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d106      	bne.n	8003fd4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003fce:	6878      	ldr	r0, [r7, #4]
 8003fd0:	f7fc fe28 	bl	8000c24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2224      	movs	r2, #36	; 0x24
 8003fd8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	681a      	ldr	r2, [r3, #0]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f022 0201 	bic.w	r2, r2, #1
 8003fe8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003fea:	6878      	ldr	r0, [r7, #4]
 8003fec:	f000 fc18 	bl	8004820 <UART_SetConfig>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	2b01      	cmp	r3, #1
 8003ff4:	d101      	bne.n	8003ffa <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	e022      	b.n	8004040 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d002      	beq.n	8004008 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004002:	6878      	ldr	r0, [r7, #4]
 8004004:	f000 fd44 	bl	8004a90 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	685a      	ldr	r2, [r3, #4]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004016:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	689a      	ldr	r2, [r3, #8]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004026:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	681a      	ldr	r2, [r3, #0]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f042 0201 	orr.w	r2, r2, #1
 8004036:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004038:	6878      	ldr	r0, [r7, #4]
 800403a:	f000 fdcb 	bl	8004bd4 <UART_CheckIdleState>
 800403e:	4603      	mov	r3, r0
}
 8004040:	4618      	mov	r0, r3
 8004042:	3708      	adds	r7, #8
 8004044:	46bd      	mov	sp, r7
 8004046:	bd80      	pop	{r7, pc}

08004048 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b08a      	sub	sp, #40	; 0x28
 800404c:	af02      	add	r7, sp, #8
 800404e:	60f8      	str	r0, [r7, #12]
 8004050:	60b9      	str	r1, [r7, #8]
 8004052:	603b      	str	r3, [r7, #0]
 8004054:	4613      	mov	r3, r2
 8004056:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800405c:	2b20      	cmp	r3, #32
 800405e:	f040 8082 	bne.w	8004166 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004062:	68bb      	ldr	r3, [r7, #8]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d002      	beq.n	800406e <HAL_UART_Transmit+0x26>
 8004068:	88fb      	ldrh	r3, [r7, #6]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d101      	bne.n	8004072 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800406e:	2301      	movs	r3, #1
 8004070:	e07a      	b.n	8004168 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004078:	2b01      	cmp	r3, #1
 800407a:	d101      	bne.n	8004080 <HAL_UART_Transmit+0x38>
 800407c:	2302      	movs	r3, #2
 800407e:	e073      	b.n	8004168 <HAL_UART_Transmit+0x120>
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	2201      	movs	r2, #1
 8004084:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	2200      	movs	r2, #0
 800408c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	2221      	movs	r2, #33	; 0x21
 8004094:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004096:	f7fc ffe3 	bl	8001060 <HAL_GetTick>
 800409a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	88fa      	ldrh	r2, [r7, #6]
 80040a0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	88fa      	ldrh	r2, [r7, #6]
 80040a8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	689b      	ldr	r3, [r3, #8]
 80040b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040b4:	d108      	bne.n	80040c8 <HAL_UART_Transmit+0x80>
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	691b      	ldr	r3, [r3, #16]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d104      	bne.n	80040c8 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80040be:	2300      	movs	r3, #0
 80040c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	61bb      	str	r3, [r7, #24]
 80040c6:	e003      	b.n	80040d0 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80040cc:	2300      	movs	r3, #0
 80040ce:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	2200      	movs	r2, #0
 80040d4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80040d8:	e02d      	b.n	8004136 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	9300      	str	r3, [sp, #0]
 80040de:	697b      	ldr	r3, [r7, #20]
 80040e0:	2200      	movs	r2, #0
 80040e2:	2180      	movs	r1, #128	; 0x80
 80040e4:	68f8      	ldr	r0, [r7, #12]
 80040e6:	f000 fdbe 	bl	8004c66 <UART_WaitOnFlagUntilTimeout>
 80040ea:	4603      	mov	r3, r0
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d001      	beq.n	80040f4 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80040f0:	2303      	movs	r3, #3
 80040f2:	e039      	b.n	8004168 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80040f4:	69fb      	ldr	r3, [r7, #28]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d10b      	bne.n	8004112 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80040fa:	69bb      	ldr	r3, [r7, #24]
 80040fc:	881a      	ldrh	r2, [r3, #0]
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004106:	b292      	uxth	r2, r2
 8004108:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800410a:	69bb      	ldr	r3, [r7, #24]
 800410c:	3302      	adds	r3, #2
 800410e:	61bb      	str	r3, [r7, #24]
 8004110:	e008      	b.n	8004124 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004112:	69fb      	ldr	r3, [r7, #28]
 8004114:	781a      	ldrb	r2, [r3, #0]
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	b292      	uxth	r2, r2
 800411c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800411e:	69fb      	ldr	r3, [r7, #28]
 8004120:	3301      	adds	r3, #1
 8004122:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800412a:	b29b      	uxth	r3, r3
 800412c:	3b01      	subs	r3, #1
 800412e:	b29a      	uxth	r2, r3
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800413c:	b29b      	uxth	r3, r3
 800413e:	2b00      	cmp	r3, #0
 8004140:	d1cb      	bne.n	80040da <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	9300      	str	r3, [sp, #0]
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	2200      	movs	r2, #0
 800414a:	2140      	movs	r1, #64	; 0x40
 800414c:	68f8      	ldr	r0, [r7, #12]
 800414e:	f000 fd8a 	bl	8004c66 <UART_WaitOnFlagUntilTimeout>
 8004152:	4603      	mov	r3, r0
 8004154:	2b00      	cmp	r3, #0
 8004156:	d001      	beq.n	800415c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004158:	2303      	movs	r3, #3
 800415a:	e005      	b.n	8004168 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	2220      	movs	r2, #32
 8004160:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004162:	2300      	movs	r3, #0
 8004164:	e000      	b.n	8004168 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8004166:	2302      	movs	r3, #2
  }
}
 8004168:	4618      	mov	r0, r3
 800416a:	3720      	adds	r7, #32
 800416c:	46bd      	mov	sp, r7
 800416e:	bd80      	pop	{r7, pc}

08004170 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b08a      	sub	sp, #40	; 0x28
 8004174:	af00      	add	r7, sp, #0
 8004176:	60f8      	str	r0, [r7, #12]
 8004178:	60b9      	str	r1, [r7, #8]
 800417a:	4613      	mov	r3, r2
 800417c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004182:	2b20      	cmp	r3, #32
 8004184:	d13d      	bne.n	8004202 <HAL_UART_Receive_DMA+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d002      	beq.n	8004192 <HAL_UART_Receive_DMA+0x22>
 800418c:	88fb      	ldrh	r3, [r7, #6]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d101      	bne.n	8004196 <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 8004192:	2301      	movs	r3, #1
 8004194:	e036      	b.n	8004204 <HAL_UART_Receive_DMA+0x94>
    }

    __HAL_LOCK(huart);
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800419c:	2b01      	cmp	r3, #1
 800419e:	d101      	bne.n	80041a4 <HAL_UART_Receive_DMA+0x34>
 80041a0:	2302      	movs	r3, #2
 80041a2:	e02f      	b.n	8004204 <HAL_UART_Receive_DMA+0x94>
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	2201      	movs	r2, #1
 80041a8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	2200      	movs	r2, #0
 80041b0:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d018      	beq.n	80041f2 <HAL_UART_Receive_DMA+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041c6:	697b      	ldr	r3, [r7, #20]
 80041c8:	e853 3f00 	ldrex	r3, [r3]
 80041cc:	613b      	str	r3, [r7, #16]
   return(result);
 80041ce:	693b      	ldr	r3, [r7, #16]
 80041d0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80041d4:	627b      	str	r3, [r7, #36]	; 0x24
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	461a      	mov	r2, r3
 80041dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041de:	623b      	str	r3, [r7, #32]
 80041e0:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041e2:	69f9      	ldr	r1, [r7, #28]
 80041e4:	6a3a      	ldr	r2, [r7, #32]
 80041e6:	e841 2300 	strex	r3, r2, [r1]
 80041ea:	61bb      	str	r3, [r7, #24]
   return(result);
 80041ec:	69bb      	ldr	r3, [r7, #24]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d1e6      	bne.n	80041c0 <HAL_UART_Receive_DMA+0x50>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80041f2:	88fb      	ldrh	r3, [r7, #6]
 80041f4:	461a      	mov	r2, r3
 80041f6:	68b9      	ldr	r1, [r7, #8]
 80041f8:	68f8      	ldr	r0, [r7, #12]
 80041fa:	f000 fdf9 	bl	8004df0 <UART_Start_Receive_DMA>
 80041fe:	4603      	mov	r3, r0
 8004200:	e000      	b.n	8004204 <HAL_UART_Receive_DMA+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004202:	2302      	movs	r3, #2
  }
}
 8004204:	4618      	mov	r0, r3
 8004206:	3728      	adds	r7, #40	; 0x28
 8004208:	46bd      	mov	sp, r7
 800420a:	bd80      	pop	{r7, pc}

0800420c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b0ba      	sub	sp, #232	; 0xe8
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	69db      	ldr	r3, [r3, #28]
 800421a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	689b      	ldr	r3, [r3, #8]
 800422e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004232:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004236:	f640 030f 	movw	r3, #2063	; 0x80f
 800423a:	4013      	ands	r3, r2
 800423c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004240:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004244:	2b00      	cmp	r3, #0
 8004246:	d115      	bne.n	8004274 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004248:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800424c:	f003 0320 	and.w	r3, r3, #32
 8004250:	2b00      	cmp	r3, #0
 8004252:	d00f      	beq.n	8004274 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004254:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004258:	f003 0320 	and.w	r3, r3, #32
 800425c:	2b00      	cmp	r3, #0
 800425e:	d009      	beq.n	8004274 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004264:	2b00      	cmp	r3, #0
 8004266:	f000 82a4 	beq.w	80047b2 <HAL_UART_IRQHandler+0x5a6>
      {
        huart->RxISR(huart);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800426e:	6878      	ldr	r0, [r7, #4]
 8004270:	4798      	blx	r3
      }
      return;
 8004272:	e29e      	b.n	80047b2 <HAL_UART_IRQHandler+0x5a6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004274:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004278:	2b00      	cmp	r3, #0
 800427a:	f000 8117 	beq.w	80044ac <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800427e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004282:	f003 0301 	and.w	r3, r3, #1
 8004286:	2b00      	cmp	r3, #0
 8004288:	d106      	bne.n	8004298 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800428a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800428e:	4b85      	ldr	r3, [pc, #532]	; (80044a4 <HAL_UART_IRQHandler+0x298>)
 8004290:	4013      	ands	r3, r2
 8004292:	2b00      	cmp	r3, #0
 8004294:	f000 810a 	beq.w	80044ac <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004298:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800429c:	f003 0301 	and.w	r3, r3, #1
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d011      	beq.n	80042c8 <HAL_UART_IRQHandler+0xbc>
 80042a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80042a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d00b      	beq.n	80042c8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	2201      	movs	r2, #1
 80042b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80042be:	f043 0201 	orr.w	r2, r3, #1
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80042c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042cc:	f003 0302 	and.w	r3, r3, #2
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d011      	beq.n	80042f8 <HAL_UART_IRQHandler+0xec>
 80042d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80042d8:	f003 0301 	and.w	r3, r3, #1
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d00b      	beq.n	80042f8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	2202      	movs	r2, #2
 80042e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80042ee:	f043 0204 	orr.w	r2, r3, #4
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80042f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042fc:	f003 0304 	and.w	r3, r3, #4
 8004300:	2b00      	cmp	r3, #0
 8004302:	d011      	beq.n	8004328 <HAL_UART_IRQHandler+0x11c>
 8004304:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004308:	f003 0301 	and.w	r3, r3, #1
 800430c:	2b00      	cmp	r3, #0
 800430e:	d00b      	beq.n	8004328 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	2204      	movs	r2, #4
 8004316:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800431e:	f043 0202 	orr.w	r2, r3, #2
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004328:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800432c:	f003 0308 	and.w	r3, r3, #8
 8004330:	2b00      	cmp	r3, #0
 8004332:	d017      	beq.n	8004364 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004334:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004338:	f003 0320 	and.w	r3, r3, #32
 800433c:	2b00      	cmp	r3, #0
 800433e:	d105      	bne.n	800434c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004340:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004344:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004348:	2b00      	cmp	r3, #0
 800434a:	d00b      	beq.n	8004364 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	2208      	movs	r2, #8
 8004352:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800435a:	f043 0208 	orr.w	r2, r3, #8
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004364:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004368:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800436c:	2b00      	cmp	r3, #0
 800436e:	d012      	beq.n	8004396 <HAL_UART_IRQHandler+0x18a>
 8004370:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004374:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004378:	2b00      	cmp	r3, #0
 800437a:	d00c      	beq.n	8004396 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004384:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800438c:	f043 0220 	orr.w	r2, r3, #32
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800439c:	2b00      	cmp	r3, #0
 800439e:	f000 820a 	beq.w	80047b6 <HAL_UART_IRQHandler+0x5aa>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80043a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043a6:	f003 0320 	and.w	r3, r3, #32
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d00d      	beq.n	80043ca <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80043ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043b2:	f003 0320 	and.w	r3, r3, #32
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d007      	beq.n	80043ca <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d003      	beq.n	80043ca <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80043c6:	6878      	ldr	r0, [r7, #4]
 80043c8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80043d0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	689b      	ldr	r3, [r3, #8]
 80043da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043de:	2b40      	cmp	r3, #64	; 0x40
 80043e0:	d005      	beq.n	80043ee <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80043e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80043e6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d04f      	beq.n	800448e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	f000 fdc6 	bl	8004f80 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	689b      	ldr	r3, [r3, #8]
 80043fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043fe:	2b40      	cmp	r3, #64	; 0x40
 8004400:	d141      	bne.n	8004486 <HAL_UART_IRQHandler+0x27a>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	3308      	adds	r3, #8
 8004408:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800440c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004410:	e853 3f00 	ldrex	r3, [r3]
 8004414:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004418:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800441c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004420:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	3308      	adds	r3, #8
 800442a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800442e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004432:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004436:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800443a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800443e:	e841 2300 	strex	r3, r2, [r1]
 8004442:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004446:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800444a:	2b00      	cmp	r3, #0
 800444c:	d1d9      	bne.n	8004402 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004452:	2b00      	cmp	r3, #0
 8004454:	d013      	beq.n	800447e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800445a:	4a13      	ldr	r2, [pc, #76]	; (80044a8 <HAL_UART_IRQHandler+0x29c>)
 800445c:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004462:	4618      	mov	r0, r3
 8004464:	f7fd f81a 	bl	800149c <HAL_DMA_Abort_IT>
 8004468:	4603      	mov	r3, r0
 800446a:	2b00      	cmp	r3, #0
 800446c:	d017      	beq.n	800449e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004472:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004474:	687a      	ldr	r2, [r7, #4]
 8004476:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8004478:	4610      	mov	r0, r2
 800447a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800447c:	e00f      	b.n	800449e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800447e:	6878      	ldr	r0, [r7, #4]
 8004480:	f000 f9b8 	bl	80047f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004484:	e00b      	b.n	800449e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004486:	6878      	ldr	r0, [r7, #4]
 8004488:	f000 f9b4 	bl	80047f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800448c:	e007      	b.n	800449e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800448e:	6878      	ldr	r0, [r7, #4]
 8004490:	f000 f9b0 	bl	80047f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2200      	movs	r2, #0
 8004498:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 800449c:	e18b      	b.n	80047b6 <HAL_UART_IRQHandler+0x5aa>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800449e:	bf00      	nop
    return;
 80044a0:	e189      	b.n	80047b6 <HAL_UART_IRQHandler+0x5aa>
 80044a2:	bf00      	nop
 80044a4:	04000120 	.word	0x04000120
 80044a8:	08005219 	.word	0x08005219

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044b0:	2b01      	cmp	r3, #1
 80044b2:	f040 8143 	bne.w	800473c <HAL_UART_IRQHandler+0x530>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80044b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044ba:	f003 0310 	and.w	r3, r3, #16
 80044be:	2b00      	cmp	r3, #0
 80044c0:	f000 813c 	beq.w	800473c <HAL_UART_IRQHandler+0x530>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80044c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80044c8:	f003 0310 	and.w	r3, r3, #16
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	f000 8135 	beq.w	800473c <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	2210      	movs	r2, #16
 80044d8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	689b      	ldr	r3, [r3, #8]
 80044e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044e4:	2b40      	cmp	r3, #64	; 0x40
 80044e6:	f040 80b1 	bne.w	800464c <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80044f6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	f000 815d 	beq.w	80047ba <HAL_UART_IRQHandler+0x5ae>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004506:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800450a:	429a      	cmp	r2, r3
 800450c:	f080 8155 	bcs.w	80047ba <HAL_UART_IRQHandler+0x5ae>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004516:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800451e:	699b      	ldr	r3, [r3, #24]
 8004520:	2b20      	cmp	r3, #32
 8004522:	f000 8085 	beq.w	8004630 <HAL_UART_IRQHandler+0x424>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800452e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004532:	e853 3f00 	ldrex	r3, [r3]
 8004536:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800453a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800453e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004542:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	461a      	mov	r2, r3
 800454c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004550:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004554:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004558:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800455c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004560:	e841 2300 	strex	r3, r2, [r1]
 8004564:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004568:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800456c:	2b00      	cmp	r3, #0
 800456e:	d1da      	bne.n	8004526 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	3308      	adds	r3, #8
 8004576:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004578:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800457a:	e853 3f00 	ldrex	r3, [r3]
 800457e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004580:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004582:	f023 0301 	bic.w	r3, r3, #1
 8004586:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	3308      	adds	r3, #8
 8004590:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004594:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004598:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800459a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800459c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80045a0:	e841 2300 	strex	r3, r2, [r1]
 80045a4:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80045a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d1e1      	bne.n	8004570 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	3308      	adds	r3, #8
 80045b2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045b4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80045b6:	e853 3f00 	ldrex	r3, [r3]
 80045ba:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80045bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80045be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80045c2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	3308      	adds	r3, #8
 80045cc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80045d0:	66fa      	str	r2, [r7, #108]	; 0x6c
 80045d2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045d4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80045d6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80045d8:	e841 2300 	strex	r3, r2, [r1]
 80045dc:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80045de:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d1e3      	bne.n	80045ac <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2220      	movs	r2, #32
 80045e8:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2200      	movs	r2, #0
 80045ee:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045f8:	e853 3f00 	ldrex	r3, [r3]
 80045fc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80045fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004600:	f023 0310 	bic.w	r3, r3, #16
 8004604:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	461a      	mov	r2, r3
 800460e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004612:	65bb      	str	r3, [r7, #88]	; 0x58
 8004614:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004616:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004618:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800461a:	e841 2300 	strex	r3, r2, [r1]
 800461e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004620:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004622:	2b00      	cmp	r3, #0
 8004624:	d1e4      	bne.n	80045f0 <HAL_UART_IRQHandler+0x3e4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800462a:	4618      	mov	r0, r3
 800462c:	f7fc fefd 	bl	800142a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800463c:	b29b      	uxth	r3, r3
 800463e:	1ad3      	subs	r3, r2, r3
 8004640:	b29b      	uxth	r3, r3
 8004642:	4619      	mov	r1, r3
 8004644:	6878      	ldr	r0, [r7, #4]
 8004646:	f000 f8df 	bl	8004808 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800464a:	e0b6      	b.n	80047ba <HAL_UART_IRQHandler+0x5ae>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004658:	b29b      	uxth	r3, r3
 800465a:	1ad3      	subs	r3, r2, r3
 800465c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004666:	b29b      	uxth	r3, r3
 8004668:	2b00      	cmp	r3, #0
 800466a:	f000 80a8 	beq.w	80047be <HAL_UART_IRQHandler+0x5b2>
          && (nb_rx_data > 0U))
 800466e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004672:	2b00      	cmp	r3, #0
 8004674:	f000 80a3 	beq.w	80047be <HAL_UART_IRQHandler+0x5b2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800467e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004680:	e853 3f00 	ldrex	r3, [r3]
 8004684:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004686:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004688:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800468c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	461a      	mov	r2, r3
 8004696:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800469a:	647b      	str	r3, [r7, #68]	; 0x44
 800469c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800469e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80046a0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80046a2:	e841 2300 	strex	r3, r2, [r1]
 80046a6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80046a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d1e4      	bne.n	8004678 <HAL_UART_IRQHandler+0x46c>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	3308      	adds	r3, #8
 80046b4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b8:	e853 3f00 	ldrex	r3, [r3]
 80046bc:	623b      	str	r3, [r7, #32]
   return(result);
 80046be:	6a3b      	ldr	r3, [r7, #32]
 80046c0:	f023 0301 	bic.w	r3, r3, #1
 80046c4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	3308      	adds	r3, #8
 80046ce:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80046d2:	633a      	str	r2, [r7, #48]	; 0x30
 80046d4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046d6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80046d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80046da:	e841 2300 	strex	r3, r2, [r1]
 80046de:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80046e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d1e3      	bne.n	80046ae <HAL_UART_IRQHandler+0x4a2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2220      	movs	r2, #32
 80046ea:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2200      	movs	r2, #0
 80046f0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2200      	movs	r2, #0
 80046f6:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046fe:	693b      	ldr	r3, [r7, #16]
 8004700:	e853 3f00 	ldrex	r3, [r3]
 8004704:	60fb      	str	r3, [r7, #12]
   return(result);
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	f023 0310 	bic.w	r3, r3, #16
 800470c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	461a      	mov	r2, r3
 8004716:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800471a:	61fb      	str	r3, [r7, #28]
 800471c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800471e:	69b9      	ldr	r1, [r7, #24]
 8004720:	69fa      	ldr	r2, [r7, #28]
 8004722:	e841 2300 	strex	r3, r2, [r1]
 8004726:	617b      	str	r3, [r7, #20]
   return(result);
 8004728:	697b      	ldr	r3, [r7, #20]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d1e4      	bne.n	80046f8 <HAL_UART_IRQHandler+0x4ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800472e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004732:	4619      	mov	r1, r3
 8004734:	6878      	ldr	r0, [r7, #4]
 8004736:	f000 f867 	bl	8004808 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800473a:	e040      	b.n	80047be <HAL_UART_IRQHandler+0x5b2>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800473c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004740:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004744:	2b00      	cmp	r3, #0
 8004746:	d00e      	beq.n	8004766 <HAL_UART_IRQHandler+0x55a>
 8004748:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800474c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004750:	2b00      	cmp	r3, #0
 8004752:	d008      	beq.n	8004766 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800475c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800475e:	6878      	ldr	r0, [r7, #4]
 8004760:	f000 fd9a 	bl	8005298 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004764:	e02e      	b.n	80047c4 <HAL_UART_IRQHandler+0x5b8>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004766:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800476a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800476e:	2b00      	cmp	r3, #0
 8004770:	d00e      	beq.n	8004790 <HAL_UART_IRQHandler+0x584>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004772:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004776:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800477a:	2b00      	cmp	r3, #0
 800477c:	d008      	beq.n	8004790 <HAL_UART_IRQHandler+0x584>
  {
    if (huart->TxISR != NULL)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004782:	2b00      	cmp	r3, #0
 8004784:	d01d      	beq.n	80047c2 <HAL_UART_IRQHandler+0x5b6>
    {
      huart->TxISR(huart);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800478a:	6878      	ldr	r0, [r7, #4]
 800478c:	4798      	blx	r3
    }
    return;
 800478e:	e018      	b.n	80047c2 <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004790:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004794:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004798:	2b00      	cmp	r3, #0
 800479a:	d013      	beq.n	80047c4 <HAL_UART_IRQHandler+0x5b8>
 800479c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d00d      	beq.n	80047c4 <HAL_UART_IRQHandler+0x5b8>
  {
    UART_EndTransmit_IT(huart);
 80047a8:	6878      	ldr	r0, [r7, #4]
 80047aa:	f000 fd4b 	bl	8005244 <UART_EndTransmit_IT>
    return;
 80047ae:	bf00      	nop
 80047b0:	e008      	b.n	80047c4 <HAL_UART_IRQHandler+0x5b8>
      return;
 80047b2:	bf00      	nop
 80047b4:	e006      	b.n	80047c4 <HAL_UART_IRQHandler+0x5b8>
    return;
 80047b6:	bf00      	nop
 80047b8:	e004      	b.n	80047c4 <HAL_UART_IRQHandler+0x5b8>
      return;
 80047ba:	bf00      	nop
 80047bc:	e002      	b.n	80047c4 <HAL_UART_IRQHandler+0x5b8>
      return;
 80047be:	bf00      	nop
 80047c0:	e000      	b.n	80047c4 <HAL_UART_IRQHandler+0x5b8>
    return;
 80047c2:	bf00      	nop
  }

}
 80047c4:	37e8      	adds	r7, #232	; 0xe8
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bd80      	pop	{r7, pc}
 80047ca:	bf00      	nop

080047cc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80047cc:	b480      	push	{r7}
 80047ce:	b083      	sub	sp, #12
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80047d4:	bf00      	nop
 80047d6:	370c      	adds	r7, #12
 80047d8:	46bd      	mov	sp, r7
 80047da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047de:	4770      	bx	lr

080047e0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80047e0:	b480      	push	{r7}
 80047e2:	b083      	sub	sp, #12
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80047e8:	bf00      	nop
 80047ea:	370c      	adds	r7, #12
 80047ec:	46bd      	mov	sp, r7
 80047ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f2:	4770      	bx	lr

080047f4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80047f4:	b480      	push	{r7}
 80047f6:	b083      	sub	sp, #12
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80047fc:	bf00      	nop
 80047fe:	370c      	adds	r7, #12
 8004800:	46bd      	mov	sp, r7
 8004802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004806:	4770      	bx	lr

08004808 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004808:	b480      	push	{r7}
 800480a:	b083      	sub	sp, #12
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
 8004810:	460b      	mov	r3, r1
 8004812:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004814:	bf00      	nop
 8004816:	370c      	adds	r7, #12
 8004818:	46bd      	mov	sp, r7
 800481a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481e:	4770      	bx	lr

08004820 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b088      	sub	sp, #32
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004828:	2300      	movs	r3, #0
 800482a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	689a      	ldr	r2, [r3, #8]
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	691b      	ldr	r3, [r3, #16]
 8004834:	431a      	orrs	r2, r3
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	695b      	ldr	r3, [r3, #20]
 800483a:	431a      	orrs	r2, r3
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	69db      	ldr	r3, [r3, #28]
 8004840:	4313      	orrs	r3, r2
 8004842:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	681a      	ldr	r2, [r3, #0]
 800484a:	4b8b      	ldr	r3, [pc, #556]	; (8004a78 <UART_SetConfig+0x258>)
 800484c:	4013      	ands	r3, r2
 800484e:	687a      	ldr	r2, [r7, #4]
 8004850:	6812      	ldr	r2, [r2, #0]
 8004852:	6979      	ldr	r1, [r7, #20]
 8004854:	430b      	orrs	r3, r1
 8004856:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	68da      	ldr	r2, [r3, #12]
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	430a      	orrs	r2, r1
 800486c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	699b      	ldr	r3, [r3, #24]
 8004872:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6a1b      	ldr	r3, [r3, #32]
 8004878:	697a      	ldr	r2, [r7, #20]
 800487a:	4313      	orrs	r3, r2
 800487c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	689b      	ldr	r3, [r3, #8]
 8004884:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	697a      	ldr	r2, [r7, #20]
 800488e:	430a      	orrs	r2, r1
 8004890:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a79      	ldr	r2, [pc, #484]	; (8004a7c <UART_SetConfig+0x25c>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d121      	bne.n	80048e0 <UART_SetConfig+0xc0>
 800489c:	4b78      	ldr	r3, [pc, #480]	; (8004a80 <UART_SetConfig+0x260>)
 800489e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048a0:	f003 0303 	and.w	r3, r3, #3
 80048a4:	2b03      	cmp	r3, #3
 80048a6:	d817      	bhi.n	80048d8 <UART_SetConfig+0xb8>
 80048a8:	a201      	add	r2, pc, #4	; (adr r2, 80048b0 <UART_SetConfig+0x90>)
 80048aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048ae:	bf00      	nop
 80048b0:	080048c1 	.word	0x080048c1
 80048b4:	080048cd 	.word	0x080048cd
 80048b8:	080048d3 	.word	0x080048d3
 80048bc:	080048c7 	.word	0x080048c7
 80048c0:	2300      	movs	r3, #0
 80048c2:	77fb      	strb	r3, [r7, #31]
 80048c4:	e01e      	b.n	8004904 <UART_SetConfig+0xe4>
 80048c6:	2302      	movs	r3, #2
 80048c8:	77fb      	strb	r3, [r7, #31]
 80048ca:	e01b      	b.n	8004904 <UART_SetConfig+0xe4>
 80048cc:	2304      	movs	r3, #4
 80048ce:	77fb      	strb	r3, [r7, #31]
 80048d0:	e018      	b.n	8004904 <UART_SetConfig+0xe4>
 80048d2:	2308      	movs	r3, #8
 80048d4:	77fb      	strb	r3, [r7, #31]
 80048d6:	e015      	b.n	8004904 <UART_SetConfig+0xe4>
 80048d8:	2310      	movs	r3, #16
 80048da:	77fb      	strb	r3, [r7, #31]
 80048dc:	bf00      	nop
 80048de:	e011      	b.n	8004904 <UART_SetConfig+0xe4>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4a67      	ldr	r2, [pc, #412]	; (8004a84 <UART_SetConfig+0x264>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d102      	bne.n	80048f0 <UART_SetConfig+0xd0>
 80048ea:	2300      	movs	r3, #0
 80048ec:	77fb      	strb	r3, [r7, #31]
 80048ee:	e009      	b.n	8004904 <UART_SetConfig+0xe4>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4a64      	ldr	r2, [pc, #400]	; (8004a88 <UART_SetConfig+0x268>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d102      	bne.n	8004900 <UART_SetConfig+0xe0>
 80048fa:	2300      	movs	r3, #0
 80048fc:	77fb      	strb	r3, [r7, #31]
 80048fe:	e001      	b.n	8004904 <UART_SetConfig+0xe4>
 8004900:	2310      	movs	r3, #16
 8004902:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	69db      	ldr	r3, [r3, #28]
 8004908:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800490c:	d15c      	bne.n	80049c8 <UART_SetConfig+0x1a8>
  {
    switch (clocksource)
 800490e:	7ffb      	ldrb	r3, [r7, #31]
 8004910:	2b08      	cmp	r3, #8
 8004912:	d828      	bhi.n	8004966 <UART_SetConfig+0x146>
 8004914:	a201      	add	r2, pc, #4	; (adr r2, 800491c <UART_SetConfig+0xfc>)
 8004916:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800491a:	bf00      	nop
 800491c:	08004941 	.word	0x08004941
 8004920:	08004949 	.word	0x08004949
 8004924:	08004951 	.word	0x08004951
 8004928:	08004967 	.word	0x08004967
 800492c:	08004957 	.word	0x08004957
 8004930:	08004967 	.word	0x08004967
 8004934:	08004967 	.word	0x08004967
 8004938:	08004967 	.word	0x08004967
 800493c:	0800495f 	.word	0x0800495f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004940:	f7fe f990 	bl	8002c64 <HAL_RCC_GetPCLK1Freq>
 8004944:	61b8      	str	r0, [r7, #24]
        break;
 8004946:	e013      	b.n	8004970 <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004948:	f7fe f9ae 	bl	8002ca8 <HAL_RCC_GetPCLK2Freq>
 800494c:	61b8      	str	r0, [r7, #24]
        break;
 800494e:	e00f      	b.n	8004970 <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004950:	4b4e      	ldr	r3, [pc, #312]	; (8004a8c <UART_SetConfig+0x26c>)
 8004952:	61bb      	str	r3, [r7, #24]
        break;
 8004954:	e00c      	b.n	8004970 <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004956:	f7fe f90f 	bl	8002b78 <HAL_RCC_GetSysClockFreq>
 800495a:	61b8      	str	r0, [r7, #24]
        break;
 800495c:	e008      	b.n	8004970 <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800495e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004962:	61bb      	str	r3, [r7, #24]
        break;
 8004964:	e004      	b.n	8004970 <UART_SetConfig+0x150>
      default:
        pclk = 0U;
 8004966:	2300      	movs	r3, #0
 8004968:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800496a:	2301      	movs	r3, #1
 800496c:	77bb      	strb	r3, [r7, #30]
        break;
 800496e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004970:	69bb      	ldr	r3, [r7, #24]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d074      	beq.n	8004a60 <UART_SetConfig+0x240>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004976:	69bb      	ldr	r3, [r7, #24]
 8004978:	005a      	lsls	r2, r3, #1
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	085b      	lsrs	r3, r3, #1
 8004980:	441a      	add	r2, r3
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	fbb2 f3f3 	udiv	r3, r2, r3
 800498a:	b29b      	uxth	r3, r3
 800498c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800498e:	693b      	ldr	r3, [r7, #16]
 8004990:	2b0f      	cmp	r3, #15
 8004992:	d916      	bls.n	80049c2 <UART_SetConfig+0x1a2>
 8004994:	693b      	ldr	r3, [r7, #16]
 8004996:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800499a:	d212      	bcs.n	80049c2 <UART_SetConfig+0x1a2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800499c:	693b      	ldr	r3, [r7, #16]
 800499e:	b29b      	uxth	r3, r3
 80049a0:	f023 030f 	bic.w	r3, r3, #15
 80049a4:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80049a6:	693b      	ldr	r3, [r7, #16]
 80049a8:	085b      	lsrs	r3, r3, #1
 80049aa:	b29b      	uxth	r3, r3
 80049ac:	f003 0307 	and.w	r3, r3, #7
 80049b0:	b29a      	uxth	r2, r3
 80049b2:	89fb      	ldrh	r3, [r7, #14]
 80049b4:	4313      	orrs	r3, r2
 80049b6:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	89fa      	ldrh	r2, [r7, #14]
 80049be:	60da      	str	r2, [r3, #12]
 80049c0:	e04e      	b.n	8004a60 <UART_SetConfig+0x240>
      }
      else
      {
        ret = HAL_ERROR;
 80049c2:	2301      	movs	r3, #1
 80049c4:	77bb      	strb	r3, [r7, #30]
 80049c6:	e04b      	b.n	8004a60 <UART_SetConfig+0x240>
      }
    }
  }
  else
  {
    switch (clocksource)
 80049c8:	7ffb      	ldrb	r3, [r7, #31]
 80049ca:	2b08      	cmp	r3, #8
 80049cc:	d827      	bhi.n	8004a1e <UART_SetConfig+0x1fe>
 80049ce:	a201      	add	r2, pc, #4	; (adr r2, 80049d4 <UART_SetConfig+0x1b4>)
 80049d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049d4:	080049f9 	.word	0x080049f9
 80049d8:	08004a01 	.word	0x08004a01
 80049dc:	08004a09 	.word	0x08004a09
 80049e0:	08004a1f 	.word	0x08004a1f
 80049e4:	08004a0f 	.word	0x08004a0f
 80049e8:	08004a1f 	.word	0x08004a1f
 80049ec:	08004a1f 	.word	0x08004a1f
 80049f0:	08004a1f 	.word	0x08004a1f
 80049f4:	08004a17 	.word	0x08004a17
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80049f8:	f7fe f934 	bl	8002c64 <HAL_RCC_GetPCLK1Freq>
 80049fc:	61b8      	str	r0, [r7, #24]
        break;
 80049fe:	e013      	b.n	8004a28 <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004a00:	f7fe f952 	bl	8002ca8 <HAL_RCC_GetPCLK2Freq>
 8004a04:	61b8      	str	r0, [r7, #24]
        break;
 8004a06:	e00f      	b.n	8004a28 <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a08:	4b20      	ldr	r3, [pc, #128]	; (8004a8c <UART_SetConfig+0x26c>)
 8004a0a:	61bb      	str	r3, [r7, #24]
        break;
 8004a0c:	e00c      	b.n	8004a28 <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a0e:	f7fe f8b3 	bl	8002b78 <HAL_RCC_GetSysClockFreq>
 8004a12:	61b8      	str	r0, [r7, #24]
        break;
 8004a14:	e008      	b.n	8004a28 <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a1a:	61bb      	str	r3, [r7, #24]
        break;
 8004a1c:	e004      	b.n	8004a28 <UART_SetConfig+0x208>
      default:
        pclk = 0U;
 8004a1e:	2300      	movs	r3, #0
 8004a20:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004a22:	2301      	movs	r3, #1
 8004a24:	77bb      	strb	r3, [r7, #30]
        break;
 8004a26:	bf00      	nop
    }

    if (pclk != 0U)
 8004a28:	69bb      	ldr	r3, [r7, #24]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d018      	beq.n	8004a60 <UART_SetConfig+0x240>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	685b      	ldr	r3, [r3, #4]
 8004a32:	085a      	lsrs	r2, r3, #1
 8004a34:	69bb      	ldr	r3, [r7, #24]
 8004a36:	441a      	add	r2, r3
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	685b      	ldr	r3, [r3, #4]
 8004a3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a40:	b29b      	uxth	r3, r3
 8004a42:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a44:	693b      	ldr	r3, [r7, #16]
 8004a46:	2b0f      	cmp	r3, #15
 8004a48:	d908      	bls.n	8004a5c <UART_SetConfig+0x23c>
 8004a4a:	693b      	ldr	r3, [r7, #16]
 8004a4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a50:	d204      	bcs.n	8004a5c <UART_SetConfig+0x23c>
      {
        huart->Instance->BRR = usartdiv;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	693a      	ldr	r2, [r7, #16]
 8004a58:	60da      	str	r2, [r3, #12]
 8004a5a:	e001      	b.n	8004a60 <UART_SetConfig+0x240>
      }
      else
      {
        ret = HAL_ERROR;
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2200      	movs	r2, #0
 8004a64:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2200      	movs	r2, #0
 8004a6a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004a6c:	7fbb      	ldrb	r3, [r7, #30]
}
 8004a6e:	4618      	mov	r0, r3
 8004a70:	3720      	adds	r7, #32
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bd80      	pop	{r7, pc}
 8004a76:	bf00      	nop
 8004a78:	efff69f3 	.word	0xefff69f3
 8004a7c:	40013800 	.word	0x40013800
 8004a80:	40021000 	.word	0x40021000
 8004a84:	40004400 	.word	0x40004400
 8004a88:	40004800 	.word	0x40004800
 8004a8c:	007a1200 	.word	0x007a1200

08004a90 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004a90:	b480      	push	{r7}
 8004a92:	b083      	sub	sp, #12
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a9c:	f003 0301 	and.w	r3, r3, #1
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d00a      	beq.n	8004aba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	430a      	orrs	r2, r1
 8004ab8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004abe:	f003 0302 	and.w	r3, r3, #2
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d00a      	beq.n	8004adc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	430a      	orrs	r2, r1
 8004ada:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae0:	f003 0304 	and.w	r3, r3, #4
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d00a      	beq.n	8004afe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	430a      	orrs	r2, r1
 8004afc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b02:	f003 0308 	and.w	r3, r3, #8
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d00a      	beq.n	8004b20 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	430a      	orrs	r2, r1
 8004b1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b24:	f003 0310 	and.w	r3, r3, #16
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d00a      	beq.n	8004b42 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	689b      	ldr	r3, [r3, #8]
 8004b32:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	430a      	orrs	r2, r1
 8004b40:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b46:	f003 0320 	and.w	r3, r3, #32
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d00a      	beq.n	8004b64 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	689b      	ldr	r3, [r3, #8]
 8004b54:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	430a      	orrs	r2, r1
 8004b62:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d01a      	beq.n	8004ba6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	685b      	ldr	r3, [r3, #4]
 8004b76:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	430a      	orrs	r2, r1
 8004b84:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b8a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b8e:	d10a      	bne.n	8004ba6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	430a      	orrs	r2, r1
 8004ba4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004baa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d00a      	beq.n	8004bc8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	430a      	orrs	r2, r1
 8004bc6:	605a      	str	r2, [r3, #4]
  }
}
 8004bc8:	bf00      	nop
 8004bca:	370c      	adds	r7, #12
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd2:	4770      	bx	lr

08004bd4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b086      	sub	sp, #24
 8004bd8:	af02      	add	r7, sp, #8
 8004bda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2200      	movs	r2, #0
 8004be0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004be4:	f7fc fa3c 	bl	8001060 <HAL_GetTick>
 8004be8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f003 0308 	and.w	r3, r3, #8
 8004bf4:	2b08      	cmp	r3, #8
 8004bf6:	d10e      	bne.n	8004c16 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004bf8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004bfc:	9300      	str	r3, [sp, #0]
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	2200      	movs	r2, #0
 8004c02:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004c06:	6878      	ldr	r0, [r7, #4]
 8004c08:	f000 f82d 	bl	8004c66 <UART_WaitOnFlagUntilTimeout>
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d001      	beq.n	8004c16 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c12:	2303      	movs	r3, #3
 8004c14:	e023      	b.n	8004c5e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f003 0304 	and.w	r3, r3, #4
 8004c20:	2b04      	cmp	r3, #4
 8004c22:	d10e      	bne.n	8004c42 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c24:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004c28:	9300      	str	r3, [sp, #0]
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004c32:	6878      	ldr	r0, [r7, #4]
 8004c34:	f000 f817 	bl	8004c66 <UART_WaitOnFlagUntilTimeout>
 8004c38:	4603      	mov	r3, r0
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d001      	beq.n	8004c42 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c3e:	2303      	movs	r3, #3
 8004c40:	e00d      	b.n	8004c5e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2220      	movs	r2, #32
 8004c46:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2220      	movs	r2, #32
 8004c4c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2200      	movs	r2, #0
 8004c52:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2200      	movs	r2, #0
 8004c58:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004c5c:	2300      	movs	r3, #0
}
 8004c5e:	4618      	mov	r0, r3
 8004c60:	3710      	adds	r7, #16
 8004c62:	46bd      	mov	sp, r7
 8004c64:	bd80      	pop	{r7, pc}

08004c66 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004c66:	b580      	push	{r7, lr}
 8004c68:	b09c      	sub	sp, #112	; 0x70
 8004c6a:	af00      	add	r7, sp, #0
 8004c6c:	60f8      	str	r0, [r7, #12]
 8004c6e:	60b9      	str	r1, [r7, #8]
 8004c70:	603b      	str	r3, [r7, #0]
 8004c72:	4613      	mov	r3, r2
 8004c74:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c76:	e0a5      	b.n	8004dc4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c78:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004c7a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c7e:	f000 80a1 	beq.w	8004dc4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c82:	f7fc f9ed 	bl	8001060 <HAL_GetTick>
 8004c86:	4602      	mov	r2, r0
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	1ad3      	subs	r3, r2, r3
 8004c8c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004c8e:	429a      	cmp	r2, r3
 8004c90:	d302      	bcc.n	8004c98 <UART_WaitOnFlagUntilTimeout+0x32>
 8004c92:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d13e      	bne.n	8004d16 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ca0:	e853 3f00 	ldrex	r3, [r3]
 8004ca4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004ca6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ca8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004cac:	667b      	str	r3, [r7, #100]	; 0x64
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	461a      	mov	r2, r3
 8004cb4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004cb6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004cb8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cba:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004cbc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004cbe:	e841 2300 	strex	r3, r2, [r1]
 8004cc2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004cc4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d1e6      	bne.n	8004c98 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	3308      	adds	r3, #8
 8004cd0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cd4:	e853 3f00 	ldrex	r3, [r3]
 8004cd8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004cda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cdc:	f023 0301 	bic.w	r3, r3, #1
 8004ce0:	663b      	str	r3, [r7, #96]	; 0x60
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	3308      	adds	r3, #8
 8004ce8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004cea:	64ba      	str	r2, [r7, #72]	; 0x48
 8004cec:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cee:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004cf0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004cf2:	e841 2300 	strex	r3, r2, [r1]
 8004cf6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004cf8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d1e5      	bne.n	8004cca <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	2220      	movs	r2, #32
 8004d02:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	2220      	movs	r2, #32
 8004d08:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004d12:	2303      	movs	r3, #3
 8004d14:	e067      	b.n	8004de6 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f003 0304 	and.w	r3, r3, #4
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d04f      	beq.n	8004dc4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	69db      	ldr	r3, [r3, #28]
 8004d2a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d2e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d32:	d147      	bne.n	8004dc4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004d3c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d46:	e853 3f00 	ldrex	r3, [r3]
 8004d4a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d4e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004d52:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	461a      	mov	r2, r3
 8004d5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d5c:	637b      	str	r3, [r7, #52]	; 0x34
 8004d5e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d60:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004d62:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004d64:	e841 2300 	strex	r3, r2, [r1]
 8004d68:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004d6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d1e6      	bne.n	8004d3e <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	3308      	adds	r3, #8
 8004d76:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d78:	697b      	ldr	r3, [r7, #20]
 8004d7a:	e853 3f00 	ldrex	r3, [r3]
 8004d7e:	613b      	str	r3, [r7, #16]
   return(result);
 8004d80:	693b      	ldr	r3, [r7, #16]
 8004d82:	f023 0301 	bic.w	r3, r3, #1
 8004d86:	66bb      	str	r3, [r7, #104]	; 0x68
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	3308      	adds	r3, #8
 8004d8e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004d90:	623a      	str	r2, [r7, #32]
 8004d92:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d94:	69f9      	ldr	r1, [r7, #28]
 8004d96:	6a3a      	ldr	r2, [r7, #32]
 8004d98:	e841 2300 	strex	r3, r2, [r1]
 8004d9c:	61bb      	str	r3, [r7, #24]
   return(result);
 8004d9e:	69bb      	ldr	r3, [r7, #24]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d1e5      	bne.n	8004d70 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	2220      	movs	r2, #32
 8004da8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	2220      	movs	r2, #32
 8004dae:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	2220      	movs	r2, #32
 8004db4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004dc0:	2303      	movs	r3, #3
 8004dc2:	e010      	b.n	8004de6 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	69da      	ldr	r2, [r3, #28]
 8004dca:	68bb      	ldr	r3, [r7, #8]
 8004dcc:	4013      	ands	r3, r2
 8004dce:	68ba      	ldr	r2, [r7, #8]
 8004dd0:	429a      	cmp	r2, r3
 8004dd2:	bf0c      	ite	eq
 8004dd4:	2301      	moveq	r3, #1
 8004dd6:	2300      	movne	r3, #0
 8004dd8:	b2db      	uxtb	r3, r3
 8004dda:	461a      	mov	r2, r3
 8004ddc:	79fb      	ldrb	r3, [r7, #7]
 8004dde:	429a      	cmp	r2, r3
 8004de0:	f43f af4a 	beq.w	8004c78 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004de4:	2300      	movs	r3, #0
}
 8004de6:	4618      	mov	r0, r3
 8004de8:	3770      	adds	r7, #112	; 0x70
 8004dea:	46bd      	mov	sp, r7
 8004dec:	bd80      	pop	{r7, pc}
	...

08004df0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b096      	sub	sp, #88	; 0x58
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	60f8      	str	r0, [r7, #12]
 8004df8:	60b9      	str	r1, [r7, #8]
 8004dfa:	4613      	mov	r3, r2
 8004dfc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	68ba      	ldr	r2, [r7, #8]
 8004e02:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	88fa      	ldrh	r2, [r7, #6]
 8004e08:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	2222      	movs	r2, #34	; 0x22
 8004e18:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d02b      	beq.n	8004e7a <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e26:	4a40      	ldr	r2, [pc, #256]	; (8004f28 <UART_Start_Receive_DMA+0x138>)
 8004e28:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e2e:	4a3f      	ldr	r2, [pc, #252]	; (8004f2c <UART_Start_Receive_DMA+0x13c>)
 8004e30:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e36:	4a3e      	ldr	r2, [pc, #248]	; (8004f30 <UART_Start_Receive_DMA+0x140>)
 8004e38:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e3e:	2200      	movs	r2, #0
 8004e40:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	3324      	adds	r3, #36	; 0x24
 8004e4c:	4619      	mov	r1, r3
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e52:	461a      	mov	r2, r3
 8004e54:	88fb      	ldrh	r3, [r7, #6]
 8004e56:	f7fc fa89 	bl	800136c <HAL_DMA_Start_IT>
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d00c      	beq.n	8004e7a <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	2210      	movs	r2, #16
 8004e64:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	2220      	movs	r2, #32
 8004e74:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_ERROR;
 8004e76:	2301      	movs	r3, #1
 8004e78:	e051      	b.n	8004f1e <UART_Start_Receive_DMA+0x12e>
    }
  }
  __HAL_UNLOCK(huart);
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e8a:	e853 3f00 	ldrex	r3, [r3]
 8004e8e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004e90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e96:	657b      	str	r3, [r7, #84]	; 0x54
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	461a      	mov	r2, r3
 8004e9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ea0:	64bb      	str	r3, [r7, #72]	; 0x48
 8004ea2:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ea4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004ea6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004ea8:	e841 2300 	strex	r3, r2, [r1]
 8004eac:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004eae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d1e6      	bne.n	8004e82 <UART_Start_Receive_DMA+0x92>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	3308      	adds	r3, #8
 8004eba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ebe:	e853 3f00 	ldrex	r3, [r3]
 8004ec2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec6:	f043 0301 	orr.w	r3, r3, #1
 8004eca:	653b      	str	r3, [r7, #80]	; 0x50
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	3308      	adds	r3, #8
 8004ed2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004ed4:	637a      	str	r2, [r7, #52]	; 0x34
 8004ed6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ed8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004eda:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004edc:	e841 2300 	strex	r3, r2, [r1]
 8004ee0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004ee2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d1e5      	bne.n	8004eb4 <UART_Start_Receive_DMA+0xc4>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	3308      	adds	r3, #8
 8004eee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ef0:	697b      	ldr	r3, [r7, #20]
 8004ef2:	e853 3f00 	ldrex	r3, [r3]
 8004ef6:	613b      	str	r3, [r7, #16]
   return(result);
 8004ef8:	693b      	ldr	r3, [r7, #16]
 8004efa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004efe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	3308      	adds	r3, #8
 8004f06:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004f08:	623a      	str	r2, [r7, #32]
 8004f0a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f0c:	69f9      	ldr	r1, [r7, #28]
 8004f0e:	6a3a      	ldr	r2, [r7, #32]
 8004f10:	e841 2300 	strex	r3, r2, [r1]
 8004f14:	61bb      	str	r3, [r7, #24]
   return(result);
 8004f16:	69bb      	ldr	r3, [r7, #24]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d1e5      	bne.n	8004ee8 <UART_Start_Receive_DMA+0xf8>

  return HAL_OK;
 8004f1c:	2300      	movs	r3, #0
}
 8004f1e:	4618      	mov	r0, r3
 8004f20:	3758      	adds	r7, #88	; 0x58
 8004f22:	46bd      	mov	sp, r7
 8004f24:	bd80      	pop	{r7, pc}
 8004f26:	bf00      	nop
 8004f28:	08005047 	.word	0x08005047
 8004f2c:	08005165 	.word	0x08005165
 8004f30:	0800519d 	.word	0x0800519d

08004f34 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004f34:	b480      	push	{r7}
 8004f36:	b089      	sub	sp, #36	; 0x24
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	e853 3f00 	ldrex	r3, [r3]
 8004f48:	60bb      	str	r3, [r7, #8]
   return(result);
 8004f4a:	68bb      	ldr	r3, [r7, #8]
 8004f4c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004f50:	61fb      	str	r3, [r7, #28]
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	461a      	mov	r2, r3
 8004f58:	69fb      	ldr	r3, [r7, #28]
 8004f5a:	61bb      	str	r3, [r7, #24]
 8004f5c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f5e:	6979      	ldr	r1, [r7, #20]
 8004f60:	69ba      	ldr	r2, [r7, #24]
 8004f62:	e841 2300 	strex	r3, r2, [r1]
 8004f66:	613b      	str	r3, [r7, #16]
   return(result);
 8004f68:	693b      	ldr	r3, [r7, #16]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d1e6      	bne.n	8004f3c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2220      	movs	r2, #32
 8004f72:	679a      	str	r2, [r3, #120]	; 0x78
}
 8004f74:	bf00      	nop
 8004f76:	3724      	adds	r7, #36	; 0x24
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7e:	4770      	bx	lr

08004f80 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004f80:	b480      	push	{r7}
 8004f82:	b095      	sub	sp, #84	; 0x54
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f90:	e853 3f00 	ldrex	r3, [r3]
 8004f94:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f98:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004f9c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	461a      	mov	r2, r3
 8004fa4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fa6:	643b      	str	r3, [r7, #64]	; 0x40
 8004fa8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004faa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004fac:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004fae:	e841 2300 	strex	r3, r2, [r1]
 8004fb2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004fb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d1e6      	bne.n	8004f88 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	3308      	adds	r3, #8
 8004fc0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fc2:	6a3b      	ldr	r3, [r7, #32]
 8004fc4:	e853 3f00 	ldrex	r3, [r3]
 8004fc8:	61fb      	str	r3, [r7, #28]
   return(result);
 8004fca:	69fb      	ldr	r3, [r7, #28]
 8004fcc:	f023 0301 	bic.w	r3, r3, #1
 8004fd0:	64bb      	str	r3, [r7, #72]	; 0x48
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	3308      	adds	r3, #8
 8004fd8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004fda:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004fdc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fde:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004fe0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004fe2:	e841 2300 	strex	r3, r2, [r1]
 8004fe6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d1e5      	bne.n	8004fba <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ff2:	2b01      	cmp	r3, #1
 8004ff4:	d118      	bne.n	8005028 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	e853 3f00 	ldrex	r3, [r3]
 8005002:	60bb      	str	r3, [r7, #8]
   return(result);
 8005004:	68bb      	ldr	r3, [r7, #8]
 8005006:	f023 0310 	bic.w	r3, r3, #16
 800500a:	647b      	str	r3, [r7, #68]	; 0x44
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	461a      	mov	r2, r3
 8005012:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005014:	61bb      	str	r3, [r7, #24]
 8005016:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005018:	6979      	ldr	r1, [r7, #20]
 800501a:	69ba      	ldr	r2, [r7, #24]
 800501c:	e841 2300 	strex	r3, r2, [r1]
 8005020:	613b      	str	r3, [r7, #16]
   return(result);
 8005022:	693b      	ldr	r3, [r7, #16]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d1e6      	bne.n	8004ff6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2220      	movs	r2, #32
 800502c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2200      	movs	r2, #0
 8005032:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2200      	movs	r2, #0
 8005038:	665a      	str	r2, [r3, #100]	; 0x64
}
 800503a:	bf00      	nop
 800503c:	3754      	adds	r7, #84	; 0x54
 800503e:	46bd      	mov	sp, r7
 8005040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005044:	4770      	bx	lr

08005046 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005046:	b580      	push	{r7, lr}
 8005048:	b09c      	sub	sp, #112	; 0x70
 800504a:	af00      	add	r7, sp, #0
 800504c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005052:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	699b      	ldr	r3, [r3, #24]
 8005058:	2b20      	cmp	r3, #32
 800505a:	d070      	beq.n	800513e <UART_DMAReceiveCplt+0xf8>
  {
    huart->RxXferCount = 0U;
 800505c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800505e:	2200      	movs	r2, #0
 8005060:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005064:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800506a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800506c:	e853 3f00 	ldrex	r3, [r3]
 8005070:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005072:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005074:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005078:	66bb      	str	r3, [r7, #104]	; 0x68
 800507a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	461a      	mov	r2, r3
 8005080:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005082:	65bb      	str	r3, [r7, #88]	; 0x58
 8005084:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005086:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005088:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800508a:	e841 2300 	strex	r3, r2, [r1]
 800508e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005090:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005092:	2b00      	cmp	r3, #0
 8005094:	d1e6      	bne.n	8005064 <UART_DMAReceiveCplt+0x1e>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005096:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	3308      	adds	r3, #8
 800509c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800509e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050a0:	e853 3f00 	ldrex	r3, [r3]
 80050a4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80050a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050a8:	f023 0301 	bic.w	r3, r3, #1
 80050ac:	667b      	str	r3, [r7, #100]	; 0x64
 80050ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	3308      	adds	r3, #8
 80050b4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80050b6:	647a      	str	r2, [r7, #68]	; 0x44
 80050b8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050ba:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80050bc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80050be:	e841 2300 	strex	r3, r2, [r1]
 80050c2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80050c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d1e5      	bne.n	8005096 <UART_DMAReceiveCplt+0x50>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80050ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	3308      	adds	r3, #8
 80050d0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050d4:	e853 3f00 	ldrex	r3, [r3]
 80050d8:	623b      	str	r3, [r7, #32]
   return(result);
 80050da:	6a3b      	ldr	r3, [r7, #32]
 80050dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050e0:	663b      	str	r3, [r7, #96]	; 0x60
 80050e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	3308      	adds	r3, #8
 80050e8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80050ea:	633a      	str	r2, [r7, #48]	; 0x30
 80050ec:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050ee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80050f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050f2:	e841 2300 	strex	r3, r2, [r1]
 80050f6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80050f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d1e5      	bne.n	80050ca <UART_DMAReceiveCplt+0x84>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80050fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005100:	2220      	movs	r2, #32
 8005102:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005104:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005106:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005108:	2b01      	cmp	r3, #1
 800510a:	d118      	bne.n	800513e <UART_DMAReceiveCplt+0xf8>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800510c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005112:	693b      	ldr	r3, [r7, #16]
 8005114:	e853 3f00 	ldrex	r3, [r3]
 8005118:	60fb      	str	r3, [r7, #12]
   return(result);
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	f023 0310 	bic.w	r3, r3, #16
 8005120:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005122:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	461a      	mov	r2, r3
 8005128:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800512a:	61fb      	str	r3, [r7, #28]
 800512c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800512e:	69b9      	ldr	r1, [r7, #24]
 8005130:	69fa      	ldr	r2, [r7, #28]
 8005132:	e841 2300 	strex	r3, r2, [r1]
 8005136:	617b      	str	r3, [r7, #20]
   return(result);
 8005138:	697b      	ldr	r3, [r7, #20]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d1e6      	bne.n	800510c <UART_DMAReceiveCplt+0xc6>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800513e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005140:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005142:	2b01      	cmp	r3, #1
 8005144:	d107      	bne.n	8005156 <UART_DMAReceiveCplt+0x110>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005146:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005148:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800514c:	4619      	mov	r1, r3
 800514e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005150:	f7ff fb5a 	bl	8004808 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005154:	e002      	b.n	800515c <UART_DMAReceiveCplt+0x116>
    HAL_UART_RxCpltCallback(huart);
 8005156:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005158:	f7fb f8b8 	bl	80002cc <HAL_UART_RxCpltCallback>
}
 800515c:	bf00      	nop
 800515e:	3770      	adds	r7, #112	; 0x70
 8005160:	46bd      	mov	sp, r7
 8005162:	bd80      	pop	{r7, pc}

08005164 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b084      	sub	sp, #16
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005170:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005176:	2b01      	cmp	r3, #1
 8005178:	d109      	bne.n	800518e <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005180:	085b      	lsrs	r3, r3, #1
 8005182:	b29b      	uxth	r3, r3
 8005184:	4619      	mov	r1, r3
 8005186:	68f8      	ldr	r0, [r7, #12]
 8005188:	f7ff fb3e 	bl	8004808 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800518c:	e002      	b.n	8005194 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800518e:	68f8      	ldr	r0, [r7, #12]
 8005190:	f7ff fb26 	bl	80047e0 <HAL_UART_RxHalfCpltCallback>
}
 8005194:	bf00      	nop
 8005196:	3710      	adds	r7, #16
 8005198:	46bd      	mov	sp, r7
 800519a:	bd80      	pop	{r7, pc}

0800519c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800519c:	b580      	push	{r7, lr}
 800519e:	b086      	sub	sp, #24
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051a8:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80051aa:	697b      	ldr	r3, [r7, #20]
 80051ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80051ae:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80051b0:	697b      	ldr	r3, [r7, #20]
 80051b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80051b4:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80051b6:	697b      	ldr	r3, [r7, #20]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	689b      	ldr	r3, [r3, #8]
 80051bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051c0:	2b80      	cmp	r3, #128	; 0x80
 80051c2:	d109      	bne.n	80051d8 <UART_DMAError+0x3c>
 80051c4:	693b      	ldr	r3, [r7, #16]
 80051c6:	2b21      	cmp	r3, #33	; 0x21
 80051c8:	d106      	bne.n	80051d8 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80051ca:	697b      	ldr	r3, [r7, #20]
 80051cc:	2200      	movs	r2, #0
 80051ce:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 80051d2:	6978      	ldr	r0, [r7, #20]
 80051d4:	f7ff feae 	bl	8004f34 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80051d8:	697b      	ldr	r3, [r7, #20]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	689b      	ldr	r3, [r3, #8]
 80051de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051e2:	2b40      	cmp	r3, #64	; 0x40
 80051e4:	d109      	bne.n	80051fa <UART_DMAError+0x5e>
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	2b22      	cmp	r3, #34	; 0x22
 80051ea:	d106      	bne.n	80051fa <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80051ec:	697b      	ldr	r3, [r7, #20]
 80051ee:	2200      	movs	r2, #0
 80051f0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 80051f4:	6978      	ldr	r0, [r7, #20]
 80051f6:	f7ff fec3 	bl	8004f80 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80051fa:	697b      	ldr	r3, [r7, #20]
 80051fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005200:	f043 0210 	orr.w	r2, r3, #16
 8005204:	697b      	ldr	r3, [r7, #20]
 8005206:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800520a:	6978      	ldr	r0, [r7, #20]
 800520c:	f7ff faf2 	bl	80047f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005210:	bf00      	nop
 8005212:	3718      	adds	r7, #24
 8005214:	46bd      	mov	sp, r7
 8005216:	bd80      	pop	{r7, pc}

08005218 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b084      	sub	sp, #16
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005224:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	2200      	movs	r2, #0
 800522a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	2200      	movs	r2, #0
 8005232:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005236:	68f8      	ldr	r0, [r7, #12]
 8005238:	f7ff fadc 	bl	80047f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800523c:	bf00      	nop
 800523e:	3710      	adds	r7, #16
 8005240:	46bd      	mov	sp, r7
 8005242:	bd80      	pop	{r7, pc}

08005244 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b088      	sub	sp, #32
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	e853 3f00 	ldrex	r3, [r3]
 8005258:	60bb      	str	r3, [r7, #8]
   return(result);
 800525a:	68bb      	ldr	r3, [r7, #8]
 800525c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005260:	61fb      	str	r3, [r7, #28]
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	461a      	mov	r2, r3
 8005268:	69fb      	ldr	r3, [r7, #28]
 800526a:	61bb      	str	r3, [r7, #24]
 800526c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800526e:	6979      	ldr	r1, [r7, #20]
 8005270:	69ba      	ldr	r2, [r7, #24]
 8005272:	e841 2300 	strex	r3, r2, [r1]
 8005276:	613b      	str	r3, [r7, #16]
   return(result);
 8005278:	693b      	ldr	r3, [r7, #16]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d1e6      	bne.n	800524c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2220      	movs	r2, #32
 8005282:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2200      	movs	r2, #0
 8005288:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800528a:	6878      	ldr	r0, [r7, #4]
 800528c:	f7ff fa9e 	bl	80047cc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005290:	bf00      	nop
 8005292:	3720      	adds	r7, #32
 8005294:	46bd      	mov	sp, r7
 8005296:	bd80      	pop	{r7, pc}

08005298 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005298:	b480      	push	{r7}
 800529a:	b083      	sub	sp, #12
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80052a0:	bf00      	nop
 80052a2:	370c      	adds	r7, #12
 80052a4:	46bd      	mov	sp, r7
 80052a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052aa:	4770      	bx	lr

080052ac <__errno>:
 80052ac:	4b01      	ldr	r3, [pc, #4]	; (80052b4 <__errno+0x8>)
 80052ae:	6818      	ldr	r0, [r3, #0]
 80052b0:	4770      	bx	lr
 80052b2:	bf00      	nop
 80052b4:	20000010 	.word	0x20000010

080052b8 <__libc_init_array>:
 80052b8:	b570      	push	{r4, r5, r6, lr}
 80052ba:	4e0d      	ldr	r6, [pc, #52]	; (80052f0 <__libc_init_array+0x38>)
 80052bc:	4c0d      	ldr	r4, [pc, #52]	; (80052f4 <__libc_init_array+0x3c>)
 80052be:	1ba4      	subs	r4, r4, r6
 80052c0:	10a4      	asrs	r4, r4, #2
 80052c2:	2500      	movs	r5, #0
 80052c4:	42a5      	cmp	r5, r4
 80052c6:	d109      	bne.n	80052dc <__libc_init_array+0x24>
 80052c8:	4e0b      	ldr	r6, [pc, #44]	; (80052f8 <__libc_init_array+0x40>)
 80052ca:	4c0c      	ldr	r4, [pc, #48]	; (80052fc <__libc_init_array+0x44>)
 80052cc:	f001 f8c8 	bl	8006460 <_init>
 80052d0:	1ba4      	subs	r4, r4, r6
 80052d2:	10a4      	asrs	r4, r4, #2
 80052d4:	2500      	movs	r5, #0
 80052d6:	42a5      	cmp	r5, r4
 80052d8:	d105      	bne.n	80052e6 <__libc_init_array+0x2e>
 80052da:	bd70      	pop	{r4, r5, r6, pc}
 80052dc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80052e0:	4798      	blx	r3
 80052e2:	3501      	adds	r5, #1
 80052e4:	e7ee      	b.n	80052c4 <__libc_init_array+0xc>
 80052e6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80052ea:	4798      	blx	r3
 80052ec:	3501      	adds	r5, #1
 80052ee:	e7f2      	b.n	80052d6 <__libc_init_array+0x1e>
 80052f0:	08006550 	.word	0x08006550
 80052f4:	08006550 	.word	0x08006550
 80052f8:	08006550 	.word	0x08006550
 80052fc:	08006554 	.word	0x08006554

08005300 <memset>:
 8005300:	4402      	add	r2, r0
 8005302:	4603      	mov	r3, r0
 8005304:	4293      	cmp	r3, r2
 8005306:	d100      	bne.n	800530a <memset+0xa>
 8005308:	4770      	bx	lr
 800530a:	f803 1b01 	strb.w	r1, [r3], #1
 800530e:	e7f9      	b.n	8005304 <memset+0x4>

08005310 <iprintf>:
 8005310:	b40f      	push	{r0, r1, r2, r3}
 8005312:	4b0a      	ldr	r3, [pc, #40]	; (800533c <iprintf+0x2c>)
 8005314:	b513      	push	{r0, r1, r4, lr}
 8005316:	681c      	ldr	r4, [r3, #0]
 8005318:	b124      	cbz	r4, 8005324 <iprintf+0x14>
 800531a:	69a3      	ldr	r3, [r4, #24]
 800531c:	b913      	cbnz	r3, 8005324 <iprintf+0x14>
 800531e:	4620      	mov	r0, r4
 8005320:	f000 f86e 	bl	8005400 <__sinit>
 8005324:	ab05      	add	r3, sp, #20
 8005326:	9a04      	ldr	r2, [sp, #16]
 8005328:	68a1      	ldr	r1, [r4, #8]
 800532a:	9301      	str	r3, [sp, #4]
 800532c:	4620      	mov	r0, r4
 800532e:	f000 fac7 	bl	80058c0 <_vfiprintf_r>
 8005332:	b002      	add	sp, #8
 8005334:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005338:	b004      	add	sp, #16
 800533a:	4770      	bx	lr
 800533c:	20000010 	.word	0x20000010

08005340 <siprintf>:
 8005340:	b40e      	push	{r1, r2, r3}
 8005342:	b500      	push	{lr}
 8005344:	b09c      	sub	sp, #112	; 0x70
 8005346:	ab1d      	add	r3, sp, #116	; 0x74
 8005348:	9002      	str	r0, [sp, #8]
 800534a:	9006      	str	r0, [sp, #24]
 800534c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005350:	4809      	ldr	r0, [pc, #36]	; (8005378 <siprintf+0x38>)
 8005352:	9107      	str	r1, [sp, #28]
 8005354:	9104      	str	r1, [sp, #16]
 8005356:	4909      	ldr	r1, [pc, #36]	; (800537c <siprintf+0x3c>)
 8005358:	f853 2b04 	ldr.w	r2, [r3], #4
 800535c:	9105      	str	r1, [sp, #20]
 800535e:	6800      	ldr	r0, [r0, #0]
 8005360:	9301      	str	r3, [sp, #4]
 8005362:	a902      	add	r1, sp, #8
 8005364:	f000 f98a 	bl	800567c <_svfiprintf_r>
 8005368:	9b02      	ldr	r3, [sp, #8]
 800536a:	2200      	movs	r2, #0
 800536c:	701a      	strb	r2, [r3, #0]
 800536e:	b01c      	add	sp, #112	; 0x70
 8005370:	f85d eb04 	ldr.w	lr, [sp], #4
 8005374:	b003      	add	sp, #12
 8005376:	4770      	bx	lr
 8005378:	20000010 	.word	0x20000010
 800537c:	ffff0208 	.word	0xffff0208

08005380 <std>:
 8005380:	2300      	movs	r3, #0
 8005382:	b510      	push	{r4, lr}
 8005384:	4604      	mov	r4, r0
 8005386:	e9c0 3300 	strd	r3, r3, [r0]
 800538a:	6083      	str	r3, [r0, #8]
 800538c:	8181      	strh	r1, [r0, #12]
 800538e:	6643      	str	r3, [r0, #100]	; 0x64
 8005390:	81c2      	strh	r2, [r0, #14]
 8005392:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005396:	6183      	str	r3, [r0, #24]
 8005398:	4619      	mov	r1, r3
 800539a:	2208      	movs	r2, #8
 800539c:	305c      	adds	r0, #92	; 0x5c
 800539e:	f7ff ffaf 	bl	8005300 <memset>
 80053a2:	4b05      	ldr	r3, [pc, #20]	; (80053b8 <std+0x38>)
 80053a4:	6263      	str	r3, [r4, #36]	; 0x24
 80053a6:	4b05      	ldr	r3, [pc, #20]	; (80053bc <std+0x3c>)
 80053a8:	62a3      	str	r3, [r4, #40]	; 0x28
 80053aa:	4b05      	ldr	r3, [pc, #20]	; (80053c0 <std+0x40>)
 80053ac:	62e3      	str	r3, [r4, #44]	; 0x2c
 80053ae:	4b05      	ldr	r3, [pc, #20]	; (80053c4 <std+0x44>)
 80053b0:	6224      	str	r4, [r4, #32]
 80053b2:	6323      	str	r3, [r4, #48]	; 0x30
 80053b4:	bd10      	pop	{r4, pc}
 80053b6:	bf00      	nop
 80053b8:	08005e1d 	.word	0x08005e1d
 80053bc:	08005e3f 	.word	0x08005e3f
 80053c0:	08005e77 	.word	0x08005e77
 80053c4:	08005e9b 	.word	0x08005e9b

080053c8 <_cleanup_r>:
 80053c8:	4901      	ldr	r1, [pc, #4]	; (80053d0 <_cleanup_r+0x8>)
 80053ca:	f000 b885 	b.w	80054d8 <_fwalk_reent>
 80053ce:	bf00      	nop
 80053d0:	08006175 	.word	0x08006175

080053d4 <__sfmoreglue>:
 80053d4:	b570      	push	{r4, r5, r6, lr}
 80053d6:	1e4a      	subs	r2, r1, #1
 80053d8:	2568      	movs	r5, #104	; 0x68
 80053da:	4355      	muls	r5, r2
 80053dc:	460e      	mov	r6, r1
 80053de:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80053e2:	f000 f897 	bl	8005514 <_malloc_r>
 80053e6:	4604      	mov	r4, r0
 80053e8:	b140      	cbz	r0, 80053fc <__sfmoreglue+0x28>
 80053ea:	2100      	movs	r1, #0
 80053ec:	e9c0 1600 	strd	r1, r6, [r0]
 80053f0:	300c      	adds	r0, #12
 80053f2:	60a0      	str	r0, [r4, #8]
 80053f4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80053f8:	f7ff ff82 	bl	8005300 <memset>
 80053fc:	4620      	mov	r0, r4
 80053fe:	bd70      	pop	{r4, r5, r6, pc}

08005400 <__sinit>:
 8005400:	6983      	ldr	r3, [r0, #24]
 8005402:	b510      	push	{r4, lr}
 8005404:	4604      	mov	r4, r0
 8005406:	bb33      	cbnz	r3, 8005456 <__sinit+0x56>
 8005408:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800540c:	6503      	str	r3, [r0, #80]	; 0x50
 800540e:	4b12      	ldr	r3, [pc, #72]	; (8005458 <__sinit+0x58>)
 8005410:	4a12      	ldr	r2, [pc, #72]	; (800545c <__sinit+0x5c>)
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	6282      	str	r2, [r0, #40]	; 0x28
 8005416:	4298      	cmp	r0, r3
 8005418:	bf04      	itt	eq
 800541a:	2301      	moveq	r3, #1
 800541c:	6183      	streq	r3, [r0, #24]
 800541e:	f000 f81f 	bl	8005460 <__sfp>
 8005422:	6060      	str	r0, [r4, #4]
 8005424:	4620      	mov	r0, r4
 8005426:	f000 f81b 	bl	8005460 <__sfp>
 800542a:	60a0      	str	r0, [r4, #8]
 800542c:	4620      	mov	r0, r4
 800542e:	f000 f817 	bl	8005460 <__sfp>
 8005432:	2200      	movs	r2, #0
 8005434:	60e0      	str	r0, [r4, #12]
 8005436:	2104      	movs	r1, #4
 8005438:	6860      	ldr	r0, [r4, #4]
 800543a:	f7ff ffa1 	bl	8005380 <std>
 800543e:	2201      	movs	r2, #1
 8005440:	2109      	movs	r1, #9
 8005442:	68a0      	ldr	r0, [r4, #8]
 8005444:	f7ff ff9c 	bl	8005380 <std>
 8005448:	2202      	movs	r2, #2
 800544a:	2112      	movs	r1, #18
 800544c:	68e0      	ldr	r0, [r4, #12]
 800544e:	f7ff ff97 	bl	8005380 <std>
 8005452:	2301      	movs	r3, #1
 8005454:	61a3      	str	r3, [r4, #24]
 8005456:	bd10      	pop	{r4, pc}
 8005458:	080064b8 	.word	0x080064b8
 800545c:	080053c9 	.word	0x080053c9

08005460 <__sfp>:
 8005460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005462:	4b1b      	ldr	r3, [pc, #108]	; (80054d0 <__sfp+0x70>)
 8005464:	681e      	ldr	r6, [r3, #0]
 8005466:	69b3      	ldr	r3, [r6, #24]
 8005468:	4607      	mov	r7, r0
 800546a:	b913      	cbnz	r3, 8005472 <__sfp+0x12>
 800546c:	4630      	mov	r0, r6
 800546e:	f7ff ffc7 	bl	8005400 <__sinit>
 8005472:	3648      	adds	r6, #72	; 0x48
 8005474:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005478:	3b01      	subs	r3, #1
 800547a:	d503      	bpl.n	8005484 <__sfp+0x24>
 800547c:	6833      	ldr	r3, [r6, #0]
 800547e:	b133      	cbz	r3, 800548e <__sfp+0x2e>
 8005480:	6836      	ldr	r6, [r6, #0]
 8005482:	e7f7      	b.n	8005474 <__sfp+0x14>
 8005484:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005488:	b16d      	cbz	r5, 80054a6 <__sfp+0x46>
 800548a:	3468      	adds	r4, #104	; 0x68
 800548c:	e7f4      	b.n	8005478 <__sfp+0x18>
 800548e:	2104      	movs	r1, #4
 8005490:	4638      	mov	r0, r7
 8005492:	f7ff ff9f 	bl	80053d4 <__sfmoreglue>
 8005496:	6030      	str	r0, [r6, #0]
 8005498:	2800      	cmp	r0, #0
 800549a:	d1f1      	bne.n	8005480 <__sfp+0x20>
 800549c:	230c      	movs	r3, #12
 800549e:	603b      	str	r3, [r7, #0]
 80054a0:	4604      	mov	r4, r0
 80054a2:	4620      	mov	r0, r4
 80054a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80054a6:	4b0b      	ldr	r3, [pc, #44]	; (80054d4 <__sfp+0x74>)
 80054a8:	6665      	str	r5, [r4, #100]	; 0x64
 80054aa:	e9c4 5500 	strd	r5, r5, [r4]
 80054ae:	60a5      	str	r5, [r4, #8]
 80054b0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80054b4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80054b8:	2208      	movs	r2, #8
 80054ba:	4629      	mov	r1, r5
 80054bc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80054c0:	f7ff ff1e 	bl	8005300 <memset>
 80054c4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80054c8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80054cc:	e7e9      	b.n	80054a2 <__sfp+0x42>
 80054ce:	bf00      	nop
 80054d0:	080064b8 	.word	0x080064b8
 80054d4:	ffff0001 	.word	0xffff0001

080054d8 <_fwalk_reent>:
 80054d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80054dc:	4680      	mov	r8, r0
 80054de:	4689      	mov	r9, r1
 80054e0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80054e4:	2600      	movs	r6, #0
 80054e6:	b914      	cbnz	r4, 80054ee <_fwalk_reent+0x16>
 80054e8:	4630      	mov	r0, r6
 80054ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80054ee:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80054f2:	3f01      	subs	r7, #1
 80054f4:	d501      	bpl.n	80054fa <_fwalk_reent+0x22>
 80054f6:	6824      	ldr	r4, [r4, #0]
 80054f8:	e7f5      	b.n	80054e6 <_fwalk_reent+0xe>
 80054fa:	89ab      	ldrh	r3, [r5, #12]
 80054fc:	2b01      	cmp	r3, #1
 80054fe:	d907      	bls.n	8005510 <_fwalk_reent+0x38>
 8005500:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005504:	3301      	adds	r3, #1
 8005506:	d003      	beq.n	8005510 <_fwalk_reent+0x38>
 8005508:	4629      	mov	r1, r5
 800550a:	4640      	mov	r0, r8
 800550c:	47c8      	blx	r9
 800550e:	4306      	orrs	r6, r0
 8005510:	3568      	adds	r5, #104	; 0x68
 8005512:	e7ee      	b.n	80054f2 <_fwalk_reent+0x1a>

08005514 <_malloc_r>:
 8005514:	b570      	push	{r4, r5, r6, lr}
 8005516:	1ccd      	adds	r5, r1, #3
 8005518:	f025 0503 	bic.w	r5, r5, #3
 800551c:	3508      	adds	r5, #8
 800551e:	2d0c      	cmp	r5, #12
 8005520:	bf38      	it	cc
 8005522:	250c      	movcc	r5, #12
 8005524:	2d00      	cmp	r5, #0
 8005526:	4606      	mov	r6, r0
 8005528:	db01      	blt.n	800552e <_malloc_r+0x1a>
 800552a:	42a9      	cmp	r1, r5
 800552c:	d903      	bls.n	8005536 <_malloc_r+0x22>
 800552e:	230c      	movs	r3, #12
 8005530:	6033      	str	r3, [r6, #0]
 8005532:	2000      	movs	r0, #0
 8005534:	bd70      	pop	{r4, r5, r6, pc}
 8005536:	f000 fee1 	bl	80062fc <__malloc_lock>
 800553a:	4a21      	ldr	r2, [pc, #132]	; (80055c0 <_malloc_r+0xac>)
 800553c:	6814      	ldr	r4, [r2, #0]
 800553e:	4621      	mov	r1, r4
 8005540:	b991      	cbnz	r1, 8005568 <_malloc_r+0x54>
 8005542:	4c20      	ldr	r4, [pc, #128]	; (80055c4 <_malloc_r+0xb0>)
 8005544:	6823      	ldr	r3, [r4, #0]
 8005546:	b91b      	cbnz	r3, 8005550 <_malloc_r+0x3c>
 8005548:	4630      	mov	r0, r6
 800554a:	f000 fc57 	bl	8005dfc <_sbrk_r>
 800554e:	6020      	str	r0, [r4, #0]
 8005550:	4629      	mov	r1, r5
 8005552:	4630      	mov	r0, r6
 8005554:	f000 fc52 	bl	8005dfc <_sbrk_r>
 8005558:	1c43      	adds	r3, r0, #1
 800555a:	d124      	bne.n	80055a6 <_malloc_r+0x92>
 800555c:	230c      	movs	r3, #12
 800555e:	6033      	str	r3, [r6, #0]
 8005560:	4630      	mov	r0, r6
 8005562:	f000 fecc 	bl	80062fe <__malloc_unlock>
 8005566:	e7e4      	b.n	8005532 <_malloc_r+0x1e>
 8005568:	680b      	ldr	r3, [r1, #0]
 800556a:	1b5b      	subs	r3, r3, r5
 800556c:	d418      	bmi.n	80055a0 <_malloc_r+0x8c>
 800556e:	2b0b      	cmp	r3, #11
 8005570:	d90f      	bls.n	8005592 <_malloc_r+0x7e>
 8005572:	600b      	str	r3, [r1, #0]
 8005574:	50cd      	str	r5, [r1, r3]
 8005576:	18cc      	adds	r4, r1, r3
 8005578:	4630      	mov	r0, r6
 800557a:	f000 fec0 	bl	80062fe <__malloc_unlock>
 800557e:	f104 000b 	add.w	r0, r4, #11
 8005582:	1d23      	adds	r3, r4, #4
 8005584:	f020 0007 	bic.w	r0, r0, #7
 8005588:	1ac3      	subs	r3, r0, r3
 800558a:	d0d3      	beq.n	8005534 <_malloc_r+0x20>
 800558c:	425a      	negs	r2, r3
 800558e:	50e2      	str	r2, [r4, r3]
 8005590:	e7d0      	b.n	8005534 <_malloc_r+0x20>
 8005592:	428c      	cmp	r4, r1
 8005594:	684b      	ldr	r3, [r1, #4]
 8005596:	bf16      	itet	ne
 8005598:	6063      	strne	r3, [r4, #4]
 800559a:	6013      	streq	r3, [r2, #0]
 800559c:	460c      	movne	r4, r1
 800559e:	e7eb      	b.n	8005578 <_malloc_r+0x64>
 80055a0:	460c      	mov	r4, r1
 80055a2:	6849      	ldr	r1, [r1, #4]
 80055a4:	e7cc      	b.n	8005540 <_malloc_r+0x2c>
 80055a6:	1cc4      	adds	r4, r0, #3
 80055a8:	f024 0403 	bic.w	r4, r4, #3
 80055ac:	42a0      	cmp	r0, r4
 80055ae:	d005      	beq.n	80055bc <_malloc_r+0xa8>
 80055b0:	1a21      	subs	r1, r4, r0
 80055b2:	4630      	mov	r0, r6
 80055b4:	f000 fc22 	bl	8005dfc <_sbrk_r>
 80055b8:	3001      	adds	r0, #1
 80055ba:	d0cf      	beq.n	800555c <_malloc_r+0x48>
 80055bc:	6025      	str	r5, [r4, #0]
 80055be:	e7db      	b.n	8005578 <_malloc_r+0x64>
 80055c0:	200000a8 	.word	0x200000a8
 80055c4:	200000ac 	.word	0x200000ac

080055c8 <__ssputs_r>:
 80055c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80055cc:	688e      	ldr	r6, [r1, #8]
 80055ce:	429e      	cmp	r6, r3
 80055d0:	4682      	mov	sl, r0
 80055d2:	460c      	mov	r4, r1
 80055d4:	4690      	mov	r8, r2
 80055d6:	4699      	mov	r9, r3
 80055d8:	d837      	bhi.n	800564a <__ssputs_r+0x82>
 80055da:	898a      	ldrh	r2, [r1, #12]
 80055dc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80055e0:	d031      	beq.n	8005646 <__ssputs_r+0x7e>
 80055e2:	6825      	ldr	r5, [r4, #0]
 80055e4:	6909      	ldr	r1, [r1, #16]
 80055e6:	1a6f      	subs	r7, r5, r1
 80055e8:	6965      	ldr	r5, [r4, #20]
 80055ea:	2302      	movs	r3, #2
 80055ec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80055f0:	fb95 f5f3 	sdiv	r5, r5, r3
 80055f4:	f109 0301 	add.w	r3, r9, #1
 80055f8:	443b      	add	r3, r7
 80055fa:	429d      	cmp	r5, r3
 80055fc:	bf38      	it	cc
 80055fe:	461d      	movcc	r5, r3
 8005600:	0553      	lsls	r3, r2, #21
 8005602:	d530      	bpl.n	8005666 <__ssputs_r+0x9e>
 8005604:	4629      	mov	r1, r5
 8005606:	f7ff ff85 	bl	8005514 <_malloc_r>
 800560a:	4606      	mov	r6, r0
 800560c:	b950      	cbnz	r0, 8005624 <__ssputs_r+0x5c>
 800560e:	230c      	movs	r3, #12
 8005610:	f8ca 3000 	str.w	r3, [sl]
 8005614:	89a3      	ldrh	r3, [r4, #12]
 8005616:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800561a:	81a3      	strh	r3, [r4, #12]
 800561c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005620:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005624:	463a      	mov	r2, r7
 8005626:	6921      	ldr	r1, [r4, #16]
 8005628:	f000 fe44 	bl	80062b4 <memcpy>
 800562c:	89a3      	ldrh	r3, [r4, #12]
 800562e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005632:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005636:	81a3      	strh	r3, [r4, #12]
 8005638:	6126      	str	r6, [r4, #16]
 800563a:	6165      	str	r5, [r4, #20]
 800563c:	443e      	add	r6, r7
 800563e:	1bed      	subs	r5, r5, r7
 8005640:	6026      	str	r6, [r4, #0]
 8005642:	60a5      	str	r5, [r4, #8]
 8005644:	464e      	mov	r6, r9
 8005646:	454e      	cmp	r6, r9
 8005648:	d900      	bls.n	800564c <__ssputs_r+0x84>
 800564a:	464e      	mov	r6, r9
 800564c:	4632      	mov	r2, r6
 800564e:	4641      	mov	r1, r8
 8005650:	6820      	ldr	r0, [r4, #0]
 8005652:	f000 fe3a 	bl	80062ca <memmove>
 8005656:	68a3      	ldr	r3, [r4, #8]
 8005658:	1b9b      	subs	r3, r3, r6
 800565a:	60a3      	str	r3, [r4, #8]
 800565c:	6823      	ldr	r3, [r4, #0]
 800565e:	441e      	add	r6, r3
 8005660:	6026      	str	r6, [r4, #0]
 8005662:	2000      	movs	r0, #0
 8005664:	e7dc      	b.n	8005620 <__ssputs_r+0x58>
 8005666:	462a      	mov	r2, r5
 8005668:	f000 fe98 	bl	800639c <_realloc_r>
 800566c:	4606      	mov	r6, r0
 800566e:	2800      	cmp	r0, #0
 8005670:	d1e2      	bne.n	8005638 <__ssputs_r+0x70>
 8005672:	6921      	ldr	r1, [r4, #16]
 8005674:	4650      	mov	r0, sl
 8005676:	f000 fe43 	bl	8006300 <_free_r>
 800567a:	e7c8      	b.n	800560e <__ssputs_r+0x46>

0800567c <_svfiprintf_r>:
 800567c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005680:	461d      	mov	r5, r3
 8005682:	898b      	ldrh	r3, [r1, #12]
 8005684:	061f      	lsls	r7, r3, #24
 8005686:	b09d      	sub	sp, #116	; 0x74
 8005688:	4680      	mov	r8, r0
 800568a:	460c      	mov	r4, r1
 800568c:	4616      	mov	r6, r2
 800568e:	d50f      	bpl.n	80056b0 <_svfiprintf_r+0x34>
 8005690:	690b      	ldr	r3, [r1, #16]
 8005692:	b96b      	cbnz	r3, 80056b0 <_svfiprintf_r+0x34>
 8005694:	2140      	movs	r1, #64	; 0x40
 8005696:	f7ff ff3d 	bl	8005514 <_malloc_r>
 800569a:	6020      	str	r0, [r4, #0]
 800569c:	6120      	str	r0, [r4, #16]
 800569e:	b928      	cbnz	r0, 80056ac <_svfiprintf_r+0x30>
 80056a0:	230c      	movs	r3, #12
 80056a2:	f8c8 3000 	str.w	r3, [r8]
 80056a6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80056aa:	e0c8      	b.n	800583e <_svfiprintf_r+0x1c2>
 80056ac:	2340      	movs	r3, #64	; 0x40
 80056ae:	6163      	str	r3, [r4, #20]
 80056b0:	2300      	movs	r3, #0
 80056b2:	9309      	str	r3, [sp, #36]	; 0x24
 80056b4:	2320      	movs	r3, #32
 80056b6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80056ba:	2330      	movs	r3, #48	; 0x30
 80056bc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80056c0:	9503      	str	r5, [sp, #12]
 80056c2:	f04f 0b01 	mov.w	fp, #1
 80056c6:	4637      	mov	r7, r6
 80056c8:	463d      	mov	r5, r7
 80056ca:	f815 3b01 	ldrb.w	r3, [r5], #1
 80056ce:	b10b      	cbz	r3, 80056d4 <_svfiprintf_r+0x58>
 80056d0:	2b25      	cmp	r3, #37	; 0x25
 80056d2:	d13e      	bne.n	8005752 <_svfiprintf_r+0xd6>
 80056d4:	ebb7 0a06 	subs.w	sl, r7, r6
 80056d8:	d00b      	beq.n	80056f2 <_svfiprintf_r+0x76>
 80056da:	4653      	mov	r3, sl
 80056dc:	4632      	mov	r2, r6
 80056de:	4621      	mov	r1, r4
 80056e0:	4640      	mov	r0, r8
 80056e2:	f7ff ff71 	bl	80055c8 <__ssputs_r>
 80056e6:	3001      	adds	r0, #1
 80056e8:	f000 80a4 	beq.w	8005834 <_svfiprintf_r+0x1b8>
 80056ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056ee:	4453      	add	r3, sl
 80056f0:	9309      	str	r3, [sp, #36]	; 0x24
 80056f2:	783b      	ldrb	r3, [r7, #0]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	f000 809d 	beq.w	8005834 <_svfiprintf_r+0x1b8>
 80056fa:	2300      	movs	r3, #0
 80056fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005700:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005704:	9304      	str	r3, [sp, #16]
 8005706:	9307      	str	r3, [sp, #28]
 8005708:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800570c:	931a      	str	r3, [sp, #104]	; 0x68
 800570e:	462f      	mov	r7, r5
 8005710:	2205      	movs	r2, #5
 8005712:	f817 1b01 	ldrb.w	r1, [r7], #1
 8005716:	4850      	ldr	r0, [pc, #320]	; (8005858 <_svfiprintf_r+0x1dc>)
 8005718:	f7fa fd5a 	bl	80001d0 <memchr>
 800571c:	9b04      	ldr	r3, [sp, #16]
 800571e:	b9d0      	cbnz	r0, 8005756 <_svfiprintf_r+0xda>
 8005720:	06d9      	lsls	r1, r3, #27
 8005722:	bf44      	itt	mi
 8005724:	2220      	movmi	r2, #32
 8005726:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800572a:	071a      	lsls	r2, r3, #28
 800572c:	bf44      	itt	mi
 800572e:	222b      	movmi	r2, #43	; 0x2b
 8005730:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005734:	782a      	ldrb	r2, [r5, #0]
 8005736:	2a2a      	cmp	r2, #42	; 0x2a
 8005738:	d015      	beq.n	8005766 <_svfiprintf_r+0xea>
 800573a:	9a07      	ldr	r2, [sp, #28]
 800573c:	462f      	mov	r7, r5
 800573e:	2000      	movs	r0, #0
 8005740:	250a      	movs	r5, #10
 8005742:	4639      	mov	r1, r7
 8005744:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005748:	3b30      	subs	r3, #48	; 0x30
 800574a:	2b09      	cmp	r3, #9
 800574c:	d94d      	bls.n	80057ea <_svfiprintf_r+0x16e>
 800574e:	b1b8      	cbz	r0, 8005780 <_svfiprintf_r+0x104>
 8005750:	e00f      	b.n	8005772 <_svfiprintf_r+0xf6>
 8005752:	462f      	mov	r7, r5
 8005754:	e7b8      	b.n	80056c8 <_svfiprintf_r+0x4c>
 8005756:	4a40      	ldr	r2, [pc, #256]	; (8005858 <_svfiprintf_r+0x1dc>)
 8005758:	1a80      	subs	r0, r0, r2
 800575a:	fa0b f000 	lsl.w	r0, fp, r0
 800575e:	4318      	orrs	r0, r3
 8005760:	9004      	str	r0, [sp, #16]
 8005762:	463d      	mov	r5, r7
 8005764:	e7d3      	b.n	800570e <_svfiprintf_r+0x92>
 8005766:	9a03      	ldr	r2, [sp, #12]
 8005768:	1d11      	adds	r1, r2, #4
 800576a:	6812      	ldr	r2, [r2, #0]
 800576c:	9103      	str	r1, [sp, #12]
 800576e:	2a00      	cmp	r2, #0
 8005770:	db01      	blt.n	8005776 <_svfiprintf_r+0xfa>
 8005772:	9207      	str	r2, [sp, #28]
 8005774:	e004      	b.n	8005780 <_svfiprintf_r+0x104>
 8005776:	4252      	negs	r2, r2
 8005778:	f043 0302 	orr.w	r3, r3, #2
 800577c:	9207      	str	r2, [sp, #28]
 800577e:	9304      	str	r3, [sp, #16]
 8005780:	783b      	ldrb	r3, [r7, #0]
 8005782:	2b2e      	cmp	r3, #46	; 0x2e
 8005784:	d10c      	bne.n	80057a0 <_svfiprintf_r+0x124>
 8005786:	787b      	ldrb	r3, [r7, #1]
 8005788:	2b2a      	cmp	r3, #42	; 0x2a
 800578a:	d133      	bne.n	80057f4 <_svfiprintf_r+0x178>
 800578c:	9b03      	ldr	r3, [sp, #12]
 800578e:	1d1a      	adds	r2, r3, #4
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	9203      	str	r2, [sp, #12]
 8005794:	2b00      	cmp	r3, #0
 8005796:	bfb8      	it	lt
 8005798:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800579c:	3702      	adds	r7, #2
 800579e:	9305      	str	r3, [sp, #20]
 80057a0:	4d2e      	ldr	r5, [pc, #184]	; (800585c <_svfiprintf_r+0x1e0>)
 80057a2:	7839      	ldrb	r1, [r7, #0]
 80057a4:	2203      	movs	r2, #3
 80057a6:	4628      	mov	r0, r5
 80057a8:	f7fa fd12 	bl	80001d0 <memchr>
 80057ac:	b138      	cbz	r0, 80057be <_svfiprintf_r+0x142>
 80057ae:	2340      	movs	r3, #64	; 0x40
 80057b0:	1b40      	subs	r0, r0, r5
 80057b2:	fa03 f000 	lsl.w	r0, r3, r0
 80057b6:	9b04      	ldr	r3, [sp, #16]
 80057b8:	4303      	orrs	r3, r0
 80057ba:	3701      	adds	r7, #1
 80057bc:	9304      	str	r3, [sp, #16]
 80057be:	7839      	ldrb	r1, [r7, #0]
 80057c0:	4827      	ldr	r0, [pc, #156]	; (8005860 <_svfiprintf_r+0x1e4>)
 80057c2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80057c6:	2206      	movs	r2, #6
 80057c8:	1c7e      	adds	r6, r7, #1
 80057ca:	f7fa fd01 	bl	80001d0 <memchr>
 80057ce:	2800      	cmp	r0, #0
 80057d0:	d038      	beq.n	8005844 <_svfiprintf_r+0x1c8>
 80057d2:	4b24      	ldr	r3, [pc, #144]	; (8005864 <_svfiprintf_r+0x1e8>)
 80057d4:	bb13      	cbnz	r3, 800581c <_svfiprintf_r+0x1a0>
 80057d6:	9b03      	ldr	r3, [sp, #12]
 80057d8:	3307      	adds	r3, #7
 80057da:	f023 0307 	bic.w	r3, r3, #7
 80057de:	3308      	adds	r3, #8
 80057e0:	9303      	str	r3, [sp, #12]
 80057e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057e4:	444b      	add	r3, r9
 80057e6:	9309      	str	r3, [sp, #36]	; 0x24
 80057e8:	e76d      	b.n	80056c6 <_svfiprintf_r+0x4a>
 80057ea:	fb05 3202 	mla	r2, r5, r2, r3
 80057ee:	2001      	movs	r0, #1
 80057f0:	460f      	mov	r7, r1
 80057f2:	e7a6      	b.n	8005742 <_svfiprintf_r+0xc6>
 80057f4:	2300      	movs	r3, #0
 80057f6:	3701      	adds	r7, #1
 80057f8:	9305      	str	r3, [sp, #20]
 80057fa:	4619      	mov	r1, r3
 80057fc:	250a      	movs	r5, #10
 80057fe:	4638      	mov	r0, r7
 8005800:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005804:	3a30      	subs	r2, #48	; 0x30
 8005806:	2a09      	cmp	r2, #9
 8005808:	d903      	bls.n	8005812 <_svfiprintf_r+0x196>
 800580a:	2b00      	cmp	r3, #0
 800580c:	d0c8      	beq.n	80057a0 <_svfiprintf_r+0x124>
 800580e:	9105      	str	r1, [sp, #20]
 8005810:	e7c6      	b.n	80057a0 <_svfiprintf_r+0x124>
 8005812:	fb05 2101 	mla	r1, r5, r1, r2
 8005816:	2301      	movs	r3, #1
 8005818:	4607      	mov	r7, r0
 800581a:	e7f0      	b.n	80057fe <_svfiprintf_r+0x182>
 800581c:	ab03      	add	r3, sp, #12
 800581e:	9300      	str	r3, [sp, #0]
 8005820:	4622      	mov	r2, r4
 8005822:	4b11      	ldr	r3, [pc, #68]	; (8005868 <_svfiprintf_r+0x1ec>)
 8005824:	a904      	add	r1, sp, #16
 8005826:	4640      	mov	r0, r8
 8005828:	f3af 8000 	nop.w
 800582c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8005830:	4681      	mov	r9, r0
 8005832:	d1d6      	bne.n	80057e2 <_svfiprintf_r+0x166>
 8005834:	89a3      	ldrh	r3, [r4, #12]
 8005836:	065b      	lsls	r3, r3, #25
 8005838:	f53f af35 	bmi.w	80056a6 <_svfiprintf_r+0x2a>
 800583c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800583e:	b01d      	add	sp, #116	; 0x74
 8005840:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005844:	ab03      	add	r3, sp, #12
 8005846:	9300      	str	r3, [sp, #0]
 8005848:	4622      	mov	r2, r4
 800584a:	4b07      	ldr	r3, [pc, #28]	; (8005868 <_svfiprintf_r+0x1ec>)
 800584c:	a904      	add	r1, sp, #16
 800584e:	4640      	mov	r0, r8
 8005850:	f000 f9c2 	bl	8005bd8 <_printf_i>
 8005854:	e7ea      	b.n	800582c <_svfiprintf_r+0x1b0>
 8005856:	bf00      	nop
 8005858:	0800651c 	.word	0x0800651c
 800585c:	08006522 	.word	0x08006522
 8005860:	08006526 	.word	0x08006526
 8005864:	00000000 	.word	0x00000000
 8005868:	080055c9 	.word	0x080055c9

0800586c <__sfputc_r>:
 800586c:	6893      	ldr	r3, [r2, #8]
 800586e:	3b01      	subs	r3, #1
 8005870:	2b00      	cmp	r3, #0
 8005872:	b410      	push	{r4}
 8005874:	6093      	str	r3, [r2, #8]
 8005876:	da08      	bge.n	800588a <__sfputc_r+0x1e>
 8005878:	6994      	ldr	r4, [r2, #24]
 800587a:	42a3      	cmp	r3, r4
 800587c:	db01      	blt.n	8005882 <__sfputc_r+0x16>
 800587e:	290a      	cmp	r1, #10
 8005880:	d103      	bne.n	800588a <__sfputc_r+0x1e>
 8005882:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005886:	f000 bb0d 	b.w	8005ea4 <__swbuf_r>
 800588a:	6813      	ldr	r3, [r2, #0]
 800588c:	1c58      	adds	r0, r3, #1
 800588e:	6010      	str	r0, [r2, #0]
 8005890:	7019      	strb	r1, [r3, #0]
 8005892:	4608      	mov	r0, r1
 8005894:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005898:	4770      	bx	lr

0800589a <__sfputs_r>:
 800589a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800589c:	4606      	mov	r6, r0
 800589e:	460f      	mov	r7, r1
 80058a0:	4614      	mov	r4, r2
 80058a2:	18d5      	adds	r5, r2, r3
 80058a4:	42ac      	cmp	r4, r5
 80058a6:	d101      	bne.n	80058ac <__sfputs_r+0x12>
 80058a8:	2000      	movs	r0, #0
 80058aa:	e007      	b.n	80058bc <__sfputs_r+0x22>
 80058ac:	463a      	mov	r2, r7
 80058ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80058b2:	4630      	mov	r0, r6
 80058b4:	f7ff ffda 	bl	800586c <__sfputc_r>
 80058b8:	1c43      	adds	r3, r0, #1
 80058ba:	d1f3      	bne.n	80058a4 <__sfputs_r+0xa>
 80058bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080058c0 <_vfiprintf_r>:
 80058c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058c4:	460c      	mov	r4, r1
 80058c6:	b09d      	sub	sp, #116	; 0x74
 80058c8:	4617      	mov	r7, r2
 80058ca:	461d      	mov	r5, r3
 80058cc:	4606      	mov	r6, r0
 80058ce:	b118      	cbz	r0, 80058d8 <_vfiprintf_r+0x18>
 80058d0:	6983      	ldr	r3, [r0, #24]
 80058d2:	b90b      	cbnz	r3, 80058d8 <_vfiprintf_r+0x18>
 80058d4:	f7ff fd94 	bl	8005400 <__sinit>
 80058d8:	4b7c      	ldr	r3, [pc, #496]	; (8005acc <_vfiprintf_r+0x20c>)
 80058da:	429c      	cmp	r4, r3
 80058dc:	d158      	bne.n	8005990 <_vfiprintf_r+0xd0>
 80058de:	6874      	ldr	r4, [r6, #4]
 80058e0:	89a3      	ldrh	r3, [r4, #12]
 80058e2:	0718      	lsls	r0, r3, #28
 80058e4:	d55e      	bpl.n	80059a4 <_vfiprintf_r+0xe4>
 80058e6:	6923      	ldr	r3, [r4, #16]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d05b      	beq.n	80059a4 <_vfiprintf_r+0xe4>
 80058ec:	2300      	movs	r3, #0
 80058ee:	9309      	str	r3, [sp, #36]	; 0x24
 80058f0:	2320      	movs	r3, #32
 80058f2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80058f6:	2330      	movs	r3, #48	; 0x30
 80058f8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80058fc:	9503      	str	r5, [sp, #12]
 80058fe:	f04f 0b01 	mov.w	fp, #1
 8005902:	46b8      	mov	r8, r7
 8005904:	4645      	mov	r5, r8
 8005906:	f815 3b01 	ldrb.w	r3, [r5], #1
 800590a:	b10b      	cbz	r3, 8005910 <_vfiprintf_r+0x50>
 800590c:	2b25      	cmp	r3, #37	; 0x25
 800590e:	d154      	bne.n	80059ba <_vfiprintf_r+0xfa>
 8005910:	ebb8 0a07 	subs.w	sl, r8, r7
 8005914:	d00b      	beq.n	800592e <_vfiprintf_r+0x6e>
 8005916:	4653      	mov	r3, sl
 8005918:	463a      	mov	r2, r7
 800591a:	4621      	mov	r1, r4
 800591c:	4630      	mov	r0, r6
 800591e:	f7ff ffbc 	bl	800589a <__sfputs_r>
 8005922:	3001      	adds	r0, #1
 8005924:	f000 80c2 	beq.w	8005aac <_vfiprintf_r+0x1ec>
 8005928:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800592a:	4453      	add	r3, sl
 800592c:	9309      	str	r3, [sp, #36]	; 0x24
 800592e:	f898 3000 	ldrb.w	r3, [r8]
 8005932:	2b00      	cmp	r3, #0
 8005934:	f000 80ba 	beq.w	8005aac <_vfiprintf_r+0x1ec>
 8005938:	2300      	movs	r3, #0
 800593a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800593e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005942:	9304      	str	r3, [sp, #16]
 8005944:	9307      	str	r3, [sp, #28]
 8005946:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800594a:	931a      	str	r3, [sp, #104]	; 0x68
 800594c:	46a8      	mov	r8, r5
 800594e:	2205      	movs	r2, #5
 8005950:	f818 1b01 	ldrb.w	r1, [r8], #1
 8005954:	485e      	ldr	r0, [pc, #376]	; (8005ad0 <_vfiprintf_r+0x210>)
 8005956:	f7fa fc3b 	bl	80001d0 <memchr>
 800595a:	9b04      	ldr	r3, [sp, #16]
 800595c:	bb78      	cbnz	r0, 80059be <_vfiprintf_r+0xfe>
 800595e:	06d9      	lsls	r1, r3, #27
 8005960:	bf44      	itt	mi
 8005962:	2220      	movmi	r2, #32
 8005964:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005968:	071a      	lsls	r2, r3, #28
 800596a:	bf44      	itt	mi
 800596c:	222b      	movmi	r2, #43	; 0x2b
 800596e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005972:	782a      	ldrb	r2, [r5, #0]
 8005974:	2a2a      	cmp	r2, #42	; 0x2a
 8005976:	d02a      	beq.n	80059ce <_vfiprintf_r+0x10e>
 8005978:	9a07      	ldr	r2, [sp, #28]
 800597a:	46a8      	mov	r8, r5
 800597c:	2000      	movs	r0, #0
 800597e:	250a      	movs	r5, #10
 8005980:	4641      	mov	r1, r8
 8005982:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005986:	3b30      	subs	r3, #48	; 0x30
 8005988:	2b09      	cmp	r3, #9
 800598a:	d969      	bls.n	8005a60 <_vfiprintf_r+0x1a0>
 800598c:	b360      	cbz	r0, 80059e8 <_vfiprintf_r+0x128>
 800598e:	e024      	b.n	80059da <_vfiprintf_r+0x11a>
 8005990:	4b50      	ldr	r3, [pc, #320]	; (8005ad4 <_vfiprintf_r+0x214>)
 8005992:	429c      	cmp	r4, r3
 8005994:	d101      	bne.n	800599a <_vfiprintf_r+0xda>
 8005996:	68b4      	ldr	r4, [r6, #8]
 8005998:	e7a2      	b.n	80058e0 <_vfiprintf_r+0x20>
 800599a:	4b4f      	ldr	r3, [pc, #316]	; (8005ad8 <_vfiprintf_r+0x218>)
 800599c:	429c      	cmp	r4, r3
 800599e:	bf08      	it	eq
 80059a0:	68f4      	ldreq	r4, [r6, #12]
 80059a2:	e79d      	b.n	80058e0 <_vfiprintf_r+0x20>
 80059a4:	4621      	mov	r1, r4
 80059a6:	4630      	mov	r0, r6
 80059a8:	f000 fae0 	bl	8005f6c <__swsetup_r>
 80059ac:	2800      	cmp	r0, #0
 80059ae:	d09d      	beq.n	80058ec <_vfiprintf_r+0x2c>
 80059b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80059b4:	b01d      	add	sp, #116	; 0x74
 80059b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059ba:	46a8      	mov	r8, r5
 80059bc:	e7a2      	b.n	8005904 <_vfiprintf_r+0x44>
 80059be:	4a44      	ldr	r2, [pc, #272]	; (8005ad0 <_vfiprintf_r+0x210>)
 80059c0:	1a80      	subs	r0, r0, r2
 80059c2:	fa0b f000 	lsl.w	r0, fp, r0
 80059c6:	4318      	orrs	r0, r3
 80059c8:	9004      	str	r0, [sp, #16]
 80059ca:	4645      	mov	r5, r8
 80059cc:	e7be      	b.n	800594c <_vfiprintf_r+0x8c>
 80059ce:	9a03      	ldr	r2, [sp, #12]
 80059d0:	1d11      	adds	r1, r2, #4
 80059d2:	6812      	ldr	r2, [r2, #0]
 80059d4:	9103      	str	r1, [sp, #12]
 80059d6:	2a00      	cmp	r2, #0
 80059d8:	db01      	blt.n	80059de <_vfiprintf_r+0x11e>
 80059da:	9207      	str	r2, [sp, #28]
 80059dc:	e004      	b.n	80059e8 <_vfiprintf_r+0x128>
 80059de:	4252      	negs	r2, r2
 80059e0:	f043 0302 	orr.w	r3, r3, #2
 80059e4:	9207      	str	r2, [sp, #28]
 80059e6:	9304      	str	r3, [sp, #16]
 80059e8:	f898 3000 	ldrb.w	r3, [r8]
 80059ec:	2b2e      	cmp	r3, #46	; 0x2e
 80059ee:	d10e      	bne.n	8005a0e <_vfiprintf_r+0x14e>
 80059f0:	f898 3001 	ldrb.w	r3, [r8, #1]
 80059f4:	2b2a      	cmp	r3, #42	; 0x2a
 80059f6:	d138      	bne.n	8005a6a <_vfiprintf_r+0x1aa>
 80059f8:	9b03      	ldr	r3, [sp, #12]
 80059fa:	1d1a      	adds	r2, r3, #4
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	9203      	str	r2, [sp, #12]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	bfb8      	it	lt
 8005a04:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005a08:	f108 0802 	add.w	r8, r8, #2
 8005a0c:	9305      	str	r3, [sp, #20]
 8005a0e:	4d33      	ldr	r5, [pc, #204]	; (8005adc <_vfiprintf_r+0x21c>)
 8005a10:	f898 1000 	ldrb.w	r1, [r8]
 8005a14:	2203      	movs	r2, #3
 8005a16:	4628      	mov	r0, r5
 8005a18:	f7fa fbda 	bl	80001d0 <memchr>
 8005a1c:	b140      	cbz	r0, 8005a30 <_vfiprintf_r+0x170>
 8005a1e:	2340      	movs	r3, #64	; 0x40
 8005a20:	1b40      	subs	r0, r0, r5
 8005a22:	fa03 f000 	lsl.w	r0, r3, r0
 8005a26:	9b04      	ldr	r3, [sp, #16]
 8005a28:	4303      	orrs	r3, r0
 8005a2a:	f108 0801 	add.w	r8, r8, #1
 8005a2e:	9304      	str	r3, [sp, #16]
 8005a30:	f898 1000 	ldrb.w	r1, [r8]
 8005a34:	482a      	ldr	r0, [pc, #168]	; (8005ae0 <_vfiprintf_r+0x220>)
 8005a36:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005a3a:	2206      	movs	r2, #6
 8005a3c:	f108 0701 	add.w	r7, r8, #1
 8005a40:	f7fa fbc6 	bl	80001d0 <memchr>
 8005a44:	2800      	cmp	r0, #0
 8005a46:	d037      	beq.n	8005ab8 <_vfiprintf_r+0x1f8>
 8005a48:	4b26      	ldr	r3, [pc, #152]	; (8005ae4 <_vfiprintf_r+0x224>)
 8005a4a:	bb1b      	cbnz	r3, 8005a94 <_vfiprintf_r+0x1d4>
 8005a4c:	9b03      	ldr	r3, [sp, #12]
 8005a4e:	3307      	adds	r3, #7
 8005a50:	f023 0307 	bic.w	r3, r3, #7
 8005a54:	3308      	adds	r3, #8
 8005a56:	9303      	str	r3, [sp, #12]
 8005a58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a5a:	444b      	add	r3, r9
 8005a5c:	9309      	str	r3, [sp, #36]	; 0x24
 8005a5e:	e750      	b.n	8005902 <_vfiprintf_r+0x42>
 8005a60:	fb05 3202 	mla	r2, r5, r2, r3
 8005a64:	2001      	movs	r0, #1
 8005a66:	4688      	mov	r8, r1
 8005a68:	e78a      	b.n	8005980 <_vfiprintf_r+0xc0>
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	f108 0801 	add.w	r8, r8, #1
 8005a70:	9305      	str	r3, [sp, #20]
 8005a72:	4619      	mov	r1, r3
 8005a74:	250a      	movs	r5, #10
 8005a76:	4640      	mov	r0, r8
 8005a78:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005a7c:	3a30      	subs	r2, #48	; 0x30
 8005a7e:	2a09      	cmp	r2, #9
 8005a80:	d903      	bls.n	8005a8a <_vfiprintf_r+0x1ca>
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d0c3      	beq.n	8005a0e <_vfiprintf_r+0x14e>
 8005a86:	9105      	str	r1, [sp, #20]
 8005a88:	e7c1      	b.n	8005a0e <_vfiprintf_r+0x14e>
 8005a8a:	fb05 2101 	mla	r1, r5, r1, r2
 8005a8e:	2301      	movs	r3, #1
 8005a90:	4680      	mov	r8, r0
 8005a92:	e7f0      	b.n	8005a76 <_vfiprintf_r+0x1b6>
 8005a94:	ab03      	add	r3, sp, #12
 8005a96:	9300      	str	r3, [sp, #0]
 8005a98:	4622      	mov	r2, r4
 8005a9a:	4b13      	ldr	r3, [pc, #76]	; (8005ae8 <_vfiprintf_r+0x228>)
 8005a9c:	a904      	add	r1, sp, #16
 8005a9e:	4630      	mov	r0, r6
 8005aa0:	f3af 8000 	nop.w
 8005aa4:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8005aa8:	4681      	mov	r9, r0
 8005aaa:	d1d5      	bne.n	8005a58 <_vfiprintf_r+0x198>
 8005aac:	89a3      	ldrh	r3, [r4, #12]
 8005aae:	065b      	lsls	r3, r3, #25
 8005ab0:	f53f af7e 	bmi.w	80059b0 <_vfiprintf_r+0xf0>
 8005ab4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005ab6:	e77d      	b.n	80059b4 <_vfiprintf_r+0xf4>
 8005ab8:	ab03      	add	r3, sp, #12
 8005aba:	9300      	str	r3, [sp, #0]
 8005abc:	4622      	mov	r2, r4
 8005abe:	4b0a      	ldr	r3, [pc, #40]	; (8005ae8 <_vfiprintf_r+0x228>)
 8005ac0:	a904      	add	r1, sp, #16
 8005ac2:	4630      	mov	r0, r6
 8005ac4:	f000 f888 	bl	8005bd8 <_printf_i>
 8005ac8:	e7ec      	b.n	8005aa4 <_vfiprintf_r+0x1e4>
 8005aca:	bf00      	nop
 8005acc:	080064dc 	.word	0x080064dc
 8005ad0:	0800651c 	.word	0x0800651c
 8005ad4:	080064fc 	.word	0x080064fc
 8005ad8:	080064bc 	.word	0x080064bc
 8005adc:	08006522 	.word	0x08006522
 8005ae0:	08006526 	.word	0x08006526
 8005ae4:	00000000 	.word	0x00000000
 8005ae8:	0800589b 	.word	0x0800589b

08005aec <_printf_common>:
 8005aec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005af0:	4691      	mov	r9, r2
 8005af2:	461f      	mov	r7, r3
 8005af4:	688a      	ldr	r2, [r1, #8]
 8005af6:	690b      	ldr	r3, [r1, #16]
 8005af8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005afc:	4293      	cmp	r3, r2
 8005afe:	bfb8      	it	lt
 8005b00:	4613      	movlt	r3, r2
 8005b02:	f8c9 3000 	str.w	r3, [r9]
 8005b06:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005b0a:	4606      	mov	r6, r0
 8005b0c:	460c      	mov	r4, r1
 8005b0e:	b112      	cbz	r2, 8005b16 <_printf_common+0x2a>
 8005b10:	3301      	adds	r3, #1
 8005b12:	f8c9 3000 	str.w	r3, [r9]
 8005b16:	6823      	ldr	r3, [r4, #0]
 8005b18:	0699      	lsls	r1, r3, #26
 8005b1a:	bf42      	ittt	mi
 8005b1c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005b20:	3302      	addmi	r3, #2
 8005b22:	f8c9 3000 	strmi.w	r3, [r9]
 8005b26:	6825      	ldr	r5, [r4, #0]
 8005b28:	f015 0506 	ands.w	r5, r5, #6
 8005b2c:	d107      	bne.n	8005b3e <_printf_common+0x52>
 8005b2e:	f104 0a19 	add.w	sl, r4, #25
 8005b32:	68e3      	ldr	r3, [r4, #12]
 8005b34:	f8d9 2000 	ldr.w	r2, [r9]
 8005b38:	1a9b      	subs	r3, r3, r2
 8005b3a:	42ab      	cmp	r3, r5
 8005b3c:	dc28      	bgt.n	8005b90 <_printf_common+0xa4>
 8005b3e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005b42:	6822      	ldr	r2, [r4, #0]
 8005b44:	3300      	adds	r3, #0
 8005b46:	bf18      	it	ne
 8005b48:	2301      	movne	r3, #1
 8005b4a:	0692      	lsls	r2, r2, #26
 8005b4c:	d42d      	bmi.n	8005baa <_printf_common+0xbe>
 8005b4e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005b52:	4639      	mov	r1, r7
 8005b54:	4630      	mov	r0, r6
 8005b56:	47c0      	blx	r8
 8005b58:	3001      	adds	r0, #1
 8005b5a:	d020      	beq.n	8005b9e <_printf_common+0xb2>
 8005b5c:	6823      	ldr	r3, [r4, #0]
 8005b5e:	68e5      	ldr	r5, [r4, #12]
 8005b60:	f8d9 2000 	ldr.w	r2, [r9]
 8005b64:	f003 0306 	and.w	r3, r3, #6
 8005b68:	2b04      	cmp	r3, #4
 8005b6a:	bf08      	it	eq
 8005b6c:	1aad      	subeq	r5, r5, r2
 8005b6e:	68a3      	ldr	r3, [r4, #8]
 8005b70:	6922      	ldr	r2, [r4, #16]
 8005b72:	bf0c      	ite	eq
 8005b74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005b78:	2500      	movne	r5, #0
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	bfc4      	itt	gt
 8005b7e:	1a9b      	subgt	r3, r3, r2
 8005b80:	18ed      	addgt	r5, r5, r3
 8005b82:	f04f 0900 	mov.w	r9, #0
 8005b86:	341a      	adds	r4, #26
 8005b88:	454d      	cmp	r5, r9
 8005b8a:	d11a      	bne.n	8005bc2 <_printf_common+0xd6>
 8005b8c:	2000      	movs	r0, #0
 8005b8e:	e008      	b.n	8005ba2 <_printf_common+0xb6>
 8005b90:	2301      	movs	r3, #1
 8005b92:	4652      	mov	r2, sl
 8005b94:	4639      	mov	r1, r7
 8005b96:	4630      	mov	r0, r6
 8005b98:	47c0      	blx	r8
 8005b9a:	3001      	adds	r0, #1
 8005b9c:	d103      	bne.n	8005ba6 <_printf_common+0xba>
 8005b9e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005ba2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ba6:	3501      	adds	r5, #1
 8005ba8:	e7c3      	b.n	8005b32 <_printf_common+0x46>
 8005baa:	18e1      	adds	r1, r4, r3
 8005bac:	1c5a      	adds	r2, r3, #1
 8005bae:	2030      	movs	r0, #48	; 0x30
 8005bb0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005bb4:	4422      	add	r2, r4
 8005bb6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005bba:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005bbe:	3302      	adds	r3, #2
 8005bc0:	e7c5      	b.n	8005b4e <_printf_common+0x62>
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	4622      	mov	r2, r4
 8005bc6:	4639      	mov	r1, r7
 8005bc8:	4630      	mov	r0, r6
 8005bca:	47c0      	blx	r8
 8005bcc:	3001      	adds	r0, #1
 8005bce:	d0e6      	beq.n	8005b9e <_printf_common+0xb2>
 8005bd0:	f109 0901 	add.w	r9, r9, #1
 8005bd4:	e7d8      	b.n	8005b88 <_printf_common+0x9c>
	...

08005bd8 <_printf_i>:
 8005bd8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005bdc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005be0:	460c      	mov	r4, r1
 8005be2:	7e09      	ldrb	r1, [r1, #24]
 8005be4:	b085      	sub	sp, #20
 8005be6:	296e      	cmp	r1, #110	; 0x6e
 8005be8:	4617      	mov	r7, r2
 8005bea:	4606      	mov	r6, r0
 8005bec:	4698      	mov	r8, r3
 8005bee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005bf0:	f000 80b3 	beq.w	8005d5a <_printf_i+0x182>
 8005bf4:	d822      	bhi.n	8005c3c <_printf_i+0x64>
 8005bf6:	2963      	cmp	r1, #99	; 0x63
 8005bf8:	d036      	beq.n	8005c68 <_printf_i+0x90>
 8005bfa:	d80a      	bhi.n	8005c12 <_printf_i+0x3a>
 8005bfc:	2900      	cmp	r1, #0
 8005bfe:	f000 80b9 	beq.w	8005d74 <_printf_i+0x19c>
 8005c02:	2958      	cmp	r1, #88	; 0x58
 8005c04:	f000 8083 	beq.w	8005d0e <_printf_i+0x136>
 8005c08:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005c0c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005c10:	e032      	b.n	8005c78 <_printf_i+0xa0>
 8005c12:	2964      	cmp	r1, #100	; 0x64
 8005c14:	d001      	beq.n	8005c1a <_printf_i+0x42>
 8005c16:	2969      	cmp	r1, #105	; 0x69
 8005c18:	d1f6      	bne.n	8005c08 <_printf_i+0x30>
 8005c1a:	6820      	ldr	r0, [r4, #0]
 8005c1c:	6813      	ldr	r3, [r2, #0]
 8005c1e:	0605      	lsls	r5, r0, #24
 8005c20:	f103 0104 	add.w	r1, r3, #4
 8005c24:	d52a      	bpl.n	8005c7c <_printf_i+0xa4>
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	6011      	str	r1, [r2, #0]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	da03      	bge.n	8005c36 <_printf_i+0x5e>
 8005c2e:	222d      	movs	r2, #45	; 0x2d
 8005c30:	425b      	negs	r3, r3
 8005c32:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005c36:	486f      	ldr	r0, [pc, #444]	; (8005df4 <_printf_i+0x21c>)
 8005c38:	220a      	movs	r2, #10
 8005c3a:	e039      	b.n	8005cb0 <_printf_i+0xd8>
 8005c3c:	2973      	cmp	r1, #115	; 0x73
 8005c3e:	f000 809d 	beq.w	8005d7c <_printf_i+0x1a4>
 8005c42:	d808      	bhi.n	8005c56 <_printf_i+0x7e>
 8005c44:	296f      	cmp	r1, #111	; 0x6f
 8005c46:	d020      	beq.n	8005c8a <_printf_i+0xb2>
 8005c48:	2970      	cmp	r1, #112	; 0x70
 8005c4a:	d1dd      	bne.n	8005c08 <_printf_i+0x30>
 8005c4c:	6823      	ldr	r3, [r4, #0]
 8005c4e:	f043 0320 	orr.w	r3, r3, #32
 8005c52:	6023      	str	r3, [r4, #0]
 8005c54:	e003      	b.n	8005c5e <_printf_i+0x86>
 8005c56:	2975      	cmp	r1, #117	; 0x75
 8005c58:	d017      	beq.n	8005c8a <_printf_i+0xb2>
 8005c5a:	2978      	cmp	r1, #120	; 0x78
 8005c5c:	d1d4      	bne.n	8005c08 <_printf_i+0x30>
 8005c5e:	2378      	movs	r3, #120	; 0x78
 8005c60:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005c64:	4864      	ldr	r0, [pc, #400]	; (8005df8 <_printf_i+0x220>)
 8005c66:	e055      	b.n	8005d14 <_printf_i+0x13c>
 8005c68:	6813      	ldr	r3, [r2, #0]
 8005c6a:	1d19      	adds	r1, r3, #4
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	6011      	str	r1, [r2, #0]
 8005c70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005c74:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005c78:	2301      	movs	r3, #1
 8005c7a:	e08c      	b.n	8005d96 <_printf_i+0x1be>
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	6011      	str	r1, [r2, #0]
 8005c80:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005c84:	bf18      	it	ne
 8005c86:	b21b      	sxthne	r3, r3
 8005c88:	e7cf      	b.n	8005c2a <_printf_i+0x52>
 8005c8a:	6813      	ldr	r3, [r2, #0]
 8005c8c:	6825      	ldr	r5, [r4, #0]
 8005c8e:	1d18      	adds	r0, r3, #4
 8005c90:	6010      	str	r0, [r2, #0]
 8005c92:	0628      	lsls	r0, r5, #24
 8005c94:	d501      	bpl.n	8005c9a <_printf_i+0xc2>
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	e002      	b.n	8005ca0 <_printf_i+0xc8>
 8005c9a:	0668      	lsls	r0, r5, #25
 8005c9c:	d5fb      	bpl.n	8005c96 <_printf_i+0xbe>
 8005c9e:	881b      	ldrh	r3, [r3, #0]
 8005ca0:	4854      	ldr	r0, [pc, #336]	; (8005df4 <_printf_i+0x21c>)
 8005ca2:	296f      	cmp	r1, #111	; 0x6f
 8005ca4:	bf14      	ite	ne
 8005ca6:	220a      	movne	r2, #10
 8005ca8:	2208      	moveq	r2, #8
 8005caa:	2100      	movs	r1, #0
 8005cac:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005cb0:	6865      	ldr	r5, [r4, #4]
 8005cb2:	60a5      	str	r5, [r4, #8]
 8005cb4:	2d00      	cmp	r5, #0
 8005cb6:	f2c0 8095 	blt.w	8005de4 <_printf_i+0x20c>
 8005cba:	6821      	ldr	r1, [r4, #0]
 8005cbc:	f021 0104 	bic.w	r1, r1, #4
 8005cc0:	6021      	str	r1, [r4, #0]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d13d      	bne.n	8005d42 <_printf_i+0x16a>
 8005cc6:	2d00      	cmp	r5, #0
 8005cc8:	f040 808e 	bne.w	8005de8 <_printf_i+0x210>
 8005ccc:	4665      	mov	r5, ip
 8005cce:	2a08      	cmp	r2, #8
 8005cd0:	d10b      	bne.n	8005cea <_printf_i+0x112>
 8005cd2:	6823      	ldr	r3, [r4, #0]
 8005cd4:	07db      	lsls	r3, r3, #31
 8005cd6:	d508      	bpl.n	8005cea <_printf_i+0x112>
 8005cd8:	6923      	ldr	r3, [r4, #16]
 8005cda:	6862      	ldr	r2, [r4, #4]
 8005cdc:	429a      	cmp	r2, r3
 8005cde:	bfde      	ittt	le
 8005ce0:	2330      	movle	r3, #48	; 0x30
 8005ce2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005ce6:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005cea:	ebac 0305 	sub.w	r3, ip, r5
 8005cee:	6123      	str	r3, [r4, #16]
 8005cf0:	f8cd 8000 	str.w	r8, [sp]
 8005cf4:	463b      	mov	r3, r7
 8005cf6:	aa03      	add	r2, sp, #12
 8005cf8:	4621      	mov	r1, r4
 8005cfa:	4630      	mov	r0, r6
 8005cfc:	f7ff fef6 	bl	8005aec <_printf_common>
 8005d00:	3001      	adds	r0, #1
 8005d02:	d14d      	bne.n	8005da0 <_printf_i+0x1c8>
 8005d04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005d08:	b005      	add	sp, #20
 8005d0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005d0e:	4839      	ldr	r0, [pc, #228]	; (8005df4 <_printf_i+0x21c>)
 8005d10:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005d14:	6813      	ldr	r3, [r2, #0]
 8005d16:	6821      	ldr	r1, [r4, #0]
 8005d18:	1d1d      	adds	r5, r3, #4
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	6015      	str	r5, [r2, #0]
 8005d1e:	060a      	lsls	r2, r1, #24
 8005d20:	d50b      	bpl.n	8005d3a <_printf_i+0x162>
 8005d22:	07ca      	lsls	r2, r1, #31
 8005d24:	bf44      	itt	mi
 8005d26:	f041 0120 	orrmi.w	r1, r1, #32
 8005d2a:	6021      	strmi	r1, [r4, #0]
 8005d2c:	b91b      	cbnz	r3, 8005d36 <_printf_i+0x15e>
 8005d2e:	6822      	ldr	r2, [r4, #0]
 8005d30:	f022 0220 	bic.w	r2, r2, #32
 8005d34:	6022      	str	r2, [r4, #0]
 8005d36:	2210      	movs	r2, #16
 8005d38:	e7b7      	b.n	8005caa <_printf_i+0xd2>
 8005d3a:	064d      	lsls	r5, r1, #25
 8005d3c:	bf48      	it	mi
 8005d3e:	b29b      	uxthmi	r3, r3
 8005d40:	e7ef      	b.n	8005d22 <_printf_i+0x14a>
 8005d42:	4665      	mov	r5, ip
 8005d44:	fbb3 f1f2 	udiv	r1, r3, r2
 8005d48:	fb02 3311 	mls	r3, r2, r1, r3
 8005d4c:	5cc3      	ldrb	r3, [r0, r3]
 8005d4e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005d52:	460b      	mov	r3, r1
 8005d54:	2900      	cmp	r1, #0
 8005d56:	d1f5      	bne.n	8005d44 <_printf_i+0x16c>
 8005d58:	e7b9      	b.n	8005cce <_printf_i+0xf6>
 8005d5a:	6813      	ldr	r3, [r2, #0]
 8005d5c:	6825      	ldr	r5, [r4, #0]
 8005d5e:	6961      	ldr	r1, [r4, #20]
 8005d60:	1d18      	adds	r0, r3, #4
 8005d62:	6010      	str	r0, [r2, #0]
 8005d64:	0628      	lsls	r0, r5, #24
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	d501      	bpl.n	8005d6e <_printf_i+0x196>
 8005d6a:	6019      	str	r1, [r3, #0]
 8005d6c:	e002      	b.n	8005d74 <_printf_i+0x19c>
 8005d6e:	066a      	lsls	r2, r5, #25
 8005d70:	d5fb      	bpl.n	8005d6a <_printf_i+0x192>
 8005d72:	8019      	strh	r1, [r3, #0]
 8005d74:	2300      	movs	r3, #0
 8005d76:	6123      	str	r3, [r4, #16]
 8005d78:	4665      	mov	r5, ip
 8005d7a:	e7b9      	b.n	8005cf0 <_printf_i+0x118>
 8005d7c:	6813      	ldr	r3, [r2, #0]
 8005d7e:	1d19      	adds	r1, r3, #4
 8005d80:	6011      	str	r1, [r2, #0]
 8005d82:	681d      	ldr	r5, [r3, #0]
 8005d84:	6862      	ldr	r2, [r4, #4]
 8005d86:	2100      	movs	r1, #0
 8005d88:	4628      	mov	r0, r5
 8005d8a:	f7fa fa21 	bl	80001d0 <memchr>
 8005d8e:	b108      	cbz	r0, 8005d94 <_printf_i+0x1bc>
 8005d90:	1b40      	subs	r0, r0, r5
 8005d92:	6060      	str	r0, [r4, #4]
 8005d94:	6863      	ldr	r3, [r4, #4]
 8005d96:	6123      	str	r3, [r4, #16]
 8005d98:	2300      	movs	r3, #0
 8005d9a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d9e:	e7a7      	b.n	8005cf0 <_printf_i+0x118>
 8005da0:	6923      	ldr	r3, [r4, #16]
 8005da2:	462a      	mov	r2, r5
 8005da4:	4639      	mov	r1, r7
 8005da6:	4630      	mov	r0, r6
 8005da8:	47c0      	blx	r8
 8005daa:	3001      	adds	r0, #1
 8005dac:	d0aa      	beq.n	8005d04 <_printf_i+0x12c>
 8005dae:	6823      	ldr	r3, [r4, #0]
 8005db0:	079b      	lsls	r3, r3, #30
 8005db2:	d413      	bmi.n	8005ddc <_printf_i+0x204>
 8005db4:	68e0      	ldr	r0, [r4, #12]
 8005db6:	9b03      	ldr	r3, [sp, #12]
 8005db8:	4298      	cmp	r0, r3
 8005dba:	bfb8      	it	lt
 8005dbc:	4618      	movlt	r0, r3
 8005dbe:	e7a3      	b.n	8005d08 <_printf_i+0x130>
 8005dc0:	2301      	movs	r3, #1
 8005dc2:	464a      	mov	r2, r9
 8005dc4:	4639      	mov	r1, r7
 8005dc6:	4630      	mov	r0, r6
 8005dc8:	47c0      	blx	r8
 8005dca:	3001      	adds	r0, #1
 8005dcc:	d09a      	beq.n	8005d04 <_printf_i+0x12c>
 8005dce:	3501      	adds	r5, #1
 8005dd0:	68e3      	ldr	r3, [r4, #12]
 8005dd2:	9a03      	ldr	r2, [sp, #12]
 8005dd4:	1a9b      	subs	r3, r3, r2
 8005dd6:	42ab      	cmp	r3, r5
 8005dd8:	dcf2      	bgt.n	8005dc0 <_printf_i+0x1e8>
 8005dda:	e7eb      	b.n	8005db4 <_printf_i+0x1dc>
 8005ddc:	2500      	movs	r5, #0
 8005dde:	f104 0919 	add.w	r9, r4, #25
 8005de2:	e7f5      	b.n	8005dd0 <_printf_i+0x1f8>
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d1ac      	bne.n	8005d42 <_printf_i+0x16a>
 8005de8:	7803      	ldrb	r3, [r0, #0]
 8005dea:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005dee:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005df2:	e76c      	b.n	8005cce <_printf_i+0xf6>
 8005df4:	0800652d 	.word	0x0800652d
 8005df8:	0800653e 	.word	0x0800653e

08005dfc <_sbrk_r>:
 8005dfc:	b538      	push	{r3, r4, r5, lr}
 8005dfe:	4c06      	ldr	r4, [pc, #24]	; (8005e18 <_sbrk_r+0x1c>)
 8005e00:	2300      	movs	r3, #0
 8005e02:	4605      	mov	r5, r0
 8005e04:	4608      	mov	r0, r1
 8005e06:	6023      	str	r3, [r4, #0]
 8005e08:	f7fb f85e 	bl	8000ec8 <_sbrk>
 8005e0c:	1c43      	adds	r3, r0, #1
 8005e0e:	d102      	bne.n	8005e16 <_sbrk_r+0x1a>
 8005e10:	6823      	ldr	r3, [r4, #0]
 8005e12:	b103      	cbz	r3, 8005e16 <_sbrk_r+0x1a>
 8005e14:	602b      	str	r3, [r5, #0]
 8005e16:	bd38      	pop	{r3, r4, r5, pc}
 8005e18:	2000029c 	.word	0x2000029c

08005e1c <__sread>:
 8005e1c:	b510      	push	{r4, lr}
 8005e1e:	460c      	mov	r4, r1
 8005e20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e24:	f000 fae0 	bl	80063e8 <_read_r>
 8005e28:	2800      	cmp	r0, #0
 8005e2a:	bfab      	itete	ge
 8005e2c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005e2e:	89a3      	ldrhlt	r3, [r4, #12]
 8005e30:	181b      	addge	r3, r3, r0
 8005e32:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005e36:	bfac      	ite	ge
 8005e38:	6563      	strge	r3, [r4, #84]	; 0x54
 8005e3a:	81a3      	strhlt	r3, [r4, #12]
 8005e3c:	bd10      	pop	{r4, pc}

08005e3e <__swrite>:
 8005e3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e42:	461f      	mov	r7, r3
 8005e44:	898b      	ldrh	r3, [r1, #12]
 8005e46:	05db      	lsls	r3, r3, #23
 8005e48:	4605      	mov	r5, r0
 8005e4a:	460c      	mov	r4, r1
 8005e4c:	4616      	mov	r6, r2
 8005e4e:	d505      	bpl.n	8005e5c <__swrite+0x1e>
 8005e50:	2302      	movs	r3, #2
 8005e52:	2200      	movs	r2, #0
 8005e54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e58:	f000 f9b6 	bl	80061c8 <_lseek_r>
 8005e5c:	89a3      	ldrh	r3, [r4, #12]
 8005e5e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005e62:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005e66:	81a3      	strh	r3, [r4, #12]
 8005e68:	4632      	mov	r2, r6
 8005e6a:	463b      	mov	r3, r7
 8005e6c:	4628      	mov	r0, r5
 8005e6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005e72:	f000 b869 	b.w	8005f48 <_write_r>

08005e76 <__sseek>:
 8005e76:	b510      	push	{r4, lr}
 8005e78:	460c      	mov	r4, r1
 8005e7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e7e:	f000 f9a3 	bl	80061c8 <_lseek_r>
 8005e82:	1c43      	adds	r3, r0, #1
 8005e84:	89a3      	ldrh	r3, [r4, #12]
 8005e86:	bf15      	itete	ne
 8005e88:	6560      	strne	r0, [r4, #84]	; 0x54
 8005e8a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005e8e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005e92:	81a3      	strheq	r3, [r4, #12]
 8005e94:	bf18      	it	ne
 8005e96:	81a3      	strhne	r3, [r4, #12]
 8005e98:	bd10      	pop	{r4, pc}

08005e9a <__sclose>:
 8005e9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e9e:	f000 b8d3 	b.w	8006048 <_close_r>
	...

08005ea4 <__swbuf_r>:
 8005ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ea6:	460e      	mov	r6, r1
 8005ea8:	4614      	mov	r4, r2
 8005eaa:	4605      	mov	r5, r0
 8005eac:	b118      	cbz	r0, 8005eb6 <__swbuf_r+0x12>
 8005eae:	6983      	ldr	r3, [r0, #24]
 8005eb0:	b90b      	cbnz	r3, 8005eb6 <__swbuf_r+0x12>
 8005eb2:	f7ff faa5 	bl	8005400 <__sinit>
 8005eb6:	4b21      	ldr	r3, [pc, #132]	; (8005f3c <__swbuf_r+0x98>)
 8005eb8:	429c      	cmp	r4, r3
 8005eba:	d12a      	bne.n	8005f12 <__swbuf_r+0x6e>
 8005ebc:	686c      	ldr	r4, [r5, #4]
 8005ebe:	69a3      	ldr	r3, [r4, #24]
 8005ec0:	60a3      	str	r3, [r4, #8]
 8005ec2:	89a3      	ldrh	r3, [r4, #12]
 8005ec4:	071a      	lsls	r2, r3, #28
 8005ec6:	d52e      	bpl.n	8005f26 <__swbuf_r+0x82>
 8005ec8:	6923      	ldr	r3, [r4, #16]
 8005eca:	b363      	cbz	r3, 8005f26 <__swbuf_r+0x82>
 8005ecc:	6923      	ldr	r3, [r4, #16]
 8005ece:	6820      	ldr	r0, [r4, #0]
 8005ed0:	1ac0      	subs	r0, r0, r3
 8005ed2:	6963      	ldr	r3, [r4, #20]
 8005ed4:	b2f6      	uxtb	r6, r6
 8005ed6:	4283      	cmp	r3, r0
 8005ed8:	4637      	mov	r7, r6
 8005eda:	dc04      	bgt.n	8005ee6 <__swbuf_r+0x42>
 8005edc:	4621      	mov	r1, r4
 8005ede:	4628      	mov	r0, r5
 8005ee0:	f000 f948 	bl	8006174 <_fflush_r>
 8005ee4:	bb28      	cbnz	r0, 8005f32 <__swbuf_r+0x8e>
 8005ee6:	68a3      	ldr	r3, [r4, #8]
 8005ee8:	3b01      	subs	r3, #1
 8005eea:	60a3      	str	r3, [r4, #8]
 8005eec:	6823      	ldr	r3, [r4, #0]
 8005eee:	1c5a      	adds	r2, r3, #1
 8005ef0:	6022      	str	r2, [r4, #0]
 8005ef2:	701e      	strb	r6, [r3, #0]
 8005ef4:	6963      	ldr	r3, [r4, #20]
 8005ef6:	3001      	adds	r0, #1
 8005ef8:	4283      	cmp	r3, r0
 8005efa:	d004      	beq.n	8005f06 <__swbuf_r+0x62>
 8005efc:	89a3      	ldrh	r3, [r4, #12]
 8005efe:	07db      	lsls	r3, r3, #31
 8005f00:	d519      	bpl.n	8005f36 <__swbuf_r+0x92>
 8005f02:	2e0a      	cmp	r6, #10
 8005f04:	d117      	bne.n	8005f36 <__swbuf_r+0x92>
 8005f06:	4621      	mov	r1, r4
 8005f08:	4628      	mov	r0, r5
 8005f0a:	f000 f933 	bl	8006174 <_fflush_r>
 8005f0e:	b190      	cbz	r0, 8005f36 <__swbuf_r+0x92>
 8005f10:	e00f      	b.n	8005f32 <__swbuf_r+0x8e>
 8005f12:	4b0b      	ldr	r3, [pc, #44]	; (8005f40 <__swbuf_r+0x9c>)
 8005f14:	429c      	cmp	r4, r3
 8005f16:	d101      	bne.n	8005f1c <__swbuf_r+0x78>
 8005f18:	68ac      	ldr	r4, [r5, #8]
 8005f1a:	e7d0      	b.n	8005ebe <__swbuf_r+0x1a>
 8005f1c:	4b09      	ldr	r3, [pc, #36]	; (8005f44 <__swbuf_r+0xa0>)
 8005f1e:	429c      	cmp	r4, r3
 8005f20:	bf08      	it	eq
 8005f22:	68ec      	ldreq	r4, [r5, #12]
 8005f24:	e7cb      	b.n	8005ebe <__swbuf_r+0x1a>
 8005f26:	4621      	mov	r1, r4
 8005f28:	4628      	mov	r0, r5
 8005f2a:	f000 f81f 	bl	8005f6c <__swsetup_r>
 8005f2e:	2800      	cmp	r0, #0
 8005f30:	d0cc      	beq.n	8005ecc <__swbuf_r+0x28>
 8005f32:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8005f36:	4638      	mov	r0, r7
 8005f38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005f3a:	bf00      	nop
 8005f3c:	080064dc 	.word	0x080064dc
 8005f40:	080064fc 	.word	0x080064fc
 8005f44:	080064bc 	.word	0x080064bc

08005f48 <_write_r>:
 8005f48:	b538      	push	{r3, r4, r5, lr}
 8005f4a:	4c07      	ldr	r4, [pc, #28]	; (8005f68 <_write_r+0x20>)
 8005f4c:	4605      	mov	r5, r0
 8005f4e:	4608      	mov	r0, r1
 8005f50:	4611      	mov	r1, r2
 8005f52:	2200      	movs	r2, #0
 8005f54:	6022      	str	r2, [r4, #0]
 8005f56:	461a      	mov	r2, r3
 8005f58:	f7fa f98a 	bl	8000270 <_write>
 8005f5c:	1c43      	adds	r3, r0, #1
 8005f5e:	d102      	bne.n	8005f66 <_write_r+0x1e>
 8005f60:	6823      	ldr	r3, [r4, #0]
 8005f62:	b103      	cbz	r3, 8005f66 <_write_r+0x1e>
 8005f64:	602b      	str	r3, [r5, #0]
 8005f66:	bd38      	pop	{r3, r4, r5, pc}
 8005f68:	2000029c 	.word	0x2000029c

08005f6c <__swsetup_r>:
 8005f6c:	4b32      	ldr	r3, [pc, #200]	; (8006038 <__swsetup_r+0xcc>)
 8005f6e:	b570      	push	{r4, r5, r6, lr}
 8005f70:	681d      	ldr	r5, [r3, #0]
 8005f72:	4606      	mov	r6, r0
 8005f74:	460c      	mov	r4, r1
 8005f76:	b125      	cbz	r5, 8005f82 <__swsetup_r+0x16>
 8005f78:	69ab      	ldr	r3, [r5, #24]
 8005f7a:	b913      	cbnz	r3, 8005f82 <__swsetup_r+0x16>
 8005f7c:	4628      	mov	r0, r5
 8005f7e:	f7ff fa3f 	bl	8005400 <__sinit>
 8005f82:	4b2e      	ldr	r3, [pc, #184]	; (800603c <__swsetup_r+0xd0>)
 8005f84:	429c      	cmp	r4, r3
 8005f86:	d10f      	bne.n	8005fa8 <__swsetup_r+0x3c>
 8005f88:	686c      	ldr	r4, [r5, #4]
 8005f8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005f8e:	b29a      	uxth	r2, r3
 8005f90:	0715      	lsls	r5, r2, #28
 8005f92:	d42c      	bmi.n	8005fee <__swsetup_r+0x82>
 8005f94:	06d0      	lsls	r0, r2, #27
 8005f96:	d411      	bmi.n	8005fbc <__swsetup_r+0x50>
 8005f98:	2209      	movs	r2, #9
 8005f9a:	6032      	str	r2, [r6, #0]
 8005f9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005fa0:	81a3      	strh	r3, [r4, #12]
 8005fa2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005fa6:	e03e      	b.n	8006026 <__swsetup_r+0xba>
 8005fa8:	4b25      	ldr	r3, [pc, #148]	; (8006040 <__swsetup_r+0xd4>)
 8005faa:	429c      	cmp	r4, r3
 8005fac:	d101      	bne.n	8005fb2 <__swsetup_r+0x46>
 8005fae:	68ac      	ldr	r4, [r5, #8]
 8005fb0:	e7eb      	b.n	8005f8a <__swsetup_r+0x1e>
 8005fb2:	4b24      	ldr	r3, [pc, #144]	; (8006044 <__swsetup_r+0xd8>)
 8005fb4:	429c      	cmp	r4, r3
 8005fb6:	bf08      	it	eq
 8005fb8:	68ec      	ldreq	r4, [r5, #12]
 8005fba:	e7e6      	b.n	8005f8a <__swsetup_r+0x1e>
 8005fbc:	0751      	lsls	r1, r2, #29
 8005fbe:	d512      	bpl.n	8005fe6 <__swsetup_r+0x7a>
 8005fc0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005fc2:	b141      	cbz	r1, 8005fd6 <__swsetup_r+0x6a>
 8005fc4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005fc8:	4299      	cmp	r1, r3
 8005fca:	d002      	beq.n	8005fd2 <__swsetup_r+0x66>
 8005fcc:	4630      	mov	r0, r6
 8005fce:	f000 f997 	bl	8006300 <_free_r>
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	6363      	str	r3, [r4, #52]	; 0x34
 8005fd6:	89a3      	ldrh	r3, [r4, #12]
 8005fd8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005fdc:	81a3      	strh	r3, [r4, #12]
 8005fde:	2300      	movs	r3, #0
 8005fe0:	6063      	str	r3, [r4, #4]
 8005fe2:	6923      	ldr	r3, [r4, #16]
 8005fe4:	6023      	str	r3, [r4, #0]
 8005fe6:	89a3      	ldrh	r3, [r4, #12]
 8005fe8:	f043 0308 	orr.w	r3, r3, #8
 8005fec:	81a3      	strh	r3, [r4, #12]
 8005fee:	6923      	ldr	r3, [r4, #16]
 8005ff0:	b94b      	cbnz	r3, 8006006 <__swsetup_r+0x9a>
 8005ff2:	89a3      	ldrh	r3, [r4, #12]
 8005ff4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005ff8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ffc:	d003      	beq.n	8006006 <__swsetup_r+0x9a>
 8005ffe:	4621      	mov	r1, r4
 8006000:	4630      	mov	r0, r6
 8006002:	f000 f917 	bl	8006234 <__smakebuf_r>
 8006006:	89a2      	ldrh	r2, [r4, #12]
 8006008:	f012 0301 	ands.w	r3, r2, #1
 800600c:	d00c      	beq.n	8006028 <__swsetup_r+0xbc>
 800600e:	2300      	movs	r3, #0
 8006010:	60a3      	str	r3, [r4, #8]
 8006012:	6963      	ldr	r3, [r4, #20]
 8006014:	425b      	negs	r3, r3
 8006016:	61a3      	str	r3, [r4, #24]
 8006018:	6923      	ldr	r3, [r4, #16]
 800601a:	b953      	cbnz	r3, 8006032 <__swsetup_r+0xc6>
 800601c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006020:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8006024:	d1ba      	bne.n	8005f9c <__swsetup_r+0x30>
 8006026:	bd70      	pop	{r4, r5, r6, pc}
 8006028:	0792      	lsls	r2, r2, #30
 800602a:	bf58      	it	pl
 800602c:	6963      	ldrpl	r3, [r4, #20]
 800602e:	60a3      	str	r3, [r4, #8]
 8006030:	e7f2      	b.n	8006018 <__swsetup_r+0xac>
 8006032:	2000      	movs	r0, #0
 8006034:	e7f7      	b.n	8006026 <__swsetup_r+0xba>
 8006036:	bf00      	nop
 8006038:	20000010 	.word	0x20000010
 800603c:	080064dc 	.word	0x080064dc
 8006040:	080064fc 	.word	0x080064fc
 8006044:	080064bc 	.word	0x080064bc

08006048 <_close_r>:
 8006048:	b538      	push	{r3, r4, r5, lr}
 800604a:	4c06      	ldr	r4, [pc, #24]	; (8006064 <_close_r+0x1c>)
 800604c:	2300      	movs	r3, #0
 800604e:	4605      	mov	r5, r0
 8006050:	4608      	mov	r0, r1
 8006052:	6023      	str	r3, [r4, #0]
 8006054:	f7fa ff03 	bl	8000e5e <_close>
 8006058:	1c43      	adds	r3, r0, #1
 800605a:	d102      	bne.n	8006062 <_close_r+0x1a>
 800605c:	6823      	ldr	r3, [r4, #0]
 800605e:	b103      	cbz	r3, 8006062 <_close_r+0x1a>
 8006060:	602b      	str	r3, [r5, #0]
 8006062:	bd38      	pop	{r3, r4, r5, pc}
 8006064:	2000029c 	.word	0x2000029c

08006068 <__sflush_r>:
 8006068:	898a      	ldrh	r2, [r1, #12]
 800606a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800606e:	4605      	mov	r5, r0
 8006070:	0710      	lsls	r0, r2, #28
 8006072:	460c      	mov	r4, r1
 8006074:	d458      	bmi.n	8006128 <__sflush_r+0xc0>
 8006076:	684b      	ldr	r3, [r1, #4]
 8006078:	2b00      	cmp	r3, #0
 800607a:	dc05      	bgt.n	8006088 <__sflush_r+0x20>
 800607c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800607e:	2b00      	cmp	r3, #0
 8006080:	dc02      	bgt.n	8006088 <__sflush_r+0x20>
 8006082:	2000      	movs	r0, #0
 8006084:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006088:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800608a:	2e00      	cmp	r6, #0
 800608c:	d0f9      	beq.n	8006082 <__sflush_r+0x1a>
 800608e:	2300      	movs	r3, #0
 8006090:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006094:	682f      	ldr	r7, [r5, #0]
 8006096:	6a21      	ldr	r1, [r4, #32]
 8006098:	602b      	str	r3, [r5, #0]
 800609a:	d032      	beq.n	8006102 <__sflush_r+0x9a>
 800609c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800609e:	89a3      	ldrh	r3, [r4, #12]
 80060a0:	075a      	lsls	r2, r3, #29
 80060a2:	d505      	bpl.n	80060b0 <__sflush_r+0x48>
 80060a4:	6863      	ldr	r3, [r4, #4]
 80060a6:	1ac0      	subs	r0, r0, r3
 80060a8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80060aa:	b10b      	cbz	r3, 80060b0 <__sflush_r+0x48>
 80060ac:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80060ae:	1ac0      	subs	r0, r0, r3
 80060b0:	2300      	movs	r3, #0
 80060b2:	4602      	mov	r2, r0
 80060b4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80060b6:	6a21      	ldr	r1, [r4, #32]
 80060b8:	4628      	mov	r0, r5
 80060ba:	47b0      	blx	r6
 80060bc:	1c43      	adds	r3, r0, #1
 80060be:	89a3      	ldrh	r3, [r4, #12]
 80060c0:	d106      	bne.n	80060d0 <__sflush_r+0x68>
 80060c2:	6829      	ldr	r1, [r5, #0]
 80060c4:	291d      	cmp	r1, #29
 80060c6:	d848      	bhi.n	800615a <__sflush_r+0xf2>
 80060c8:	4a29      	ldr	r2, [pc, #164]	; (8006170 <__sflush_r+0x108>)
 80060ca:	40ca      	lsrs	r2, r1
 80060cc:	07d6      	lsls	r6, r2, #31
 80060ce:	d544      	bpl.n	800615a <__sflush_r+0xf2>
 80060d0:	2200      	movs	r2, #0
 80060d2:	6062      	str	r2, [r4, #4]
 80060d4:	04d9      	lsls	r1, r3, #19
 80060d6:	6922      	ldr	r2, [r4, #16]
 80060d8:	6022      	str	r2, [r4, #0]
 80060da:	d504      	bpl.n	80060e6 <__sflush_r+0x7e>
 80060dc:	1c42      	adds	r2, r0, #1
 80060de:	d101      	bne.n	80060e4 <__sflush_r+0x7c>
 80060e0:	682b      	ldr	r3, [r5, #0]
 80060e2:	b903      	cbnz	r3, 80060e6 <__sflush_r+0x7e>
 80060e4:	6560      	str	r0, [r4, #84]	; 0x54
 80060e6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80060e8:	602f      	str	r7, [r5, #0]
 80060ea:	2900      	cmp	r1, #0
 80060ec:	d0c9      	beq.n	8006082 <__sflush_r+0x1a>
 80060ee:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80060f2:	4299      	cmp	r1, r3
 80060f4:	d002      	beq.n	80060fc <__sflush_r+0x94>
 80060f6:	4628      	mov	r0, r5
 80060f8:	f000 f902 	bl	8006300 <_free_r>
 80060fc:	2000      	movs	r0, #0
 80060fe:	6360      	str	r0, [r4, #52]	; 0x34
 8006100:	e7c0      	b.n	8006084 <__sflush_r+0x1c>
 8006102:	2301      	movs	r3, #1
 8006104:	4628      	mov	r0, r5
 8006106:	47b0      	blx	r6
 8006108:	1c41      	adds	r1, r0, #1
 800610a:	d1c8      	bne.n	800609e <__sflush_r+0x36>
 800610c:	682b      	ldr	r3, [r5, #0]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d0c5      	beq.n	800609e <__sflush_r+0x36>
 8006112:	2b1d      	cmp	r3, #29
 8006114:	d001      	beq.n	800611a <__sflush_r+0xb2>
 8006116:	2b16      	cmp	r3, #22
 8006118:	d101      	bne.n	800611e <__sflush_r+0xb6>
 800611a:	602f      	str	r7, [r5, #0]
 800611c:	e7b1      	b.n	8006082 <__sflush_r+0x1a>
 800611e:	89a3      	ldrh	r3, [r4, #12]
 8006120:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006124:	81a3      	strh	r3, [r4, #12]
 8006126:	e7ad      	b.n	8006084 <__sflush_r+0x1c>
 8006128:	690f      	ldr	r7, [r1, #16]
 800612a:	2f00      	cmp	r7, #0
 800612c:	d0a9      	beq.n	8006082 <__sflush_r+0x1a>
 800612e:	0793      	lsls	r3, r2, #30
 8006130:	680e      	ldr	r6, [r1, #0]
 8006132:	bf08      	it	eq
 8006134:	694b      	ldreq	r3, [r1, #20]
 8006136:	600f      	str	r7, [r1, #0]
 8006138:	bf18      	it	ne
 800613a:	2300      	movne	r3, #0
 800613c:	eba6 0807 	sub.w	r8, r6, r7
 8006140:	608b      	str	r3, [r1, #8]
 8006142:	f1b8 0f00 	cmp.w	r8, #0
 8006146:	dd9c      	ble.n	8006082 <__sflush_r+0x1a>
 8006148:	4643      	mov	r3, r8
 800614a:	463a      	mov	r2, r7
 800614c:	6a21      	ldr	r1, [r4, #32]
 800614e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006150:	4628      	mov	r0, r5
 8006152:	47b0      	blx	r6
 8006154:	2800      	cmp	r0, #0
 8006156:	dc06      	bgt.n	8006166 <__sflush_r+0xfe>
 8006158:	89a3      	ldrh	r3, [r4, #12]
 800615a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800615e:	81a3      	strh	r3, [r4, #12]
 8006160:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006164:	e78e      	b.n	8006084 <__sflush_r+0x1c>
 8006166:	4407      	add	r7, r0
 8006168:	eba8 0800 	sub.w	r8, r8, r0
 800616c:	e7e9      	b.n	8006142 <__sflush_r+0xda>
 800616e:	bf00      	nop
 8006170:	20400001 	.word	0x20400001

08006174 <_fflush_r>:
 8006174:	b538      	push	{r3, r4, r5, lr}
 8006176:	690b      	ldr	r3, [r1, #16]
 8006178:	4605      	mov	r5, r0
 800617a:	460c      	mov	r4, r1
 800617c:	b1db      	cbz	r3, 80061b6 <_fflush_r+0x42>
 800617e:	b118      	cbz	r0, 8006188 <_fflush_r+0x14>
 8006180:	6983      	ldr	r3, [r0, #24]
 8006182:	b90b      	cbnz	r3, 8006188 <_fflush_r+0x14>
 8006184:	f7ff f93c 	bl	8005400 <__sinit>
 8006188:	4b0c      	ldr	r3, [pc, #48]	; (80061bc <_fflush_r+0x48>)
 800618a:	429c      	cmp	r4, r3
 800618c:	d109      	bne.n	80061a2 <_fflush_r+0x2e>
 800618e:	686c      	ldr	r4, [r5, #4]
 8006190:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006194:	b17b      	cbz	r3, 80061b6 <_fflush_r+0x42>
 8006196:	4621      	mov	r1, r4
 8006198:	4628      	mov	r0, r5
 800619a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800619e:	f7ff bf63 	b.w	8006068 <__sflush_r>
 80061a2:	4b07      	ldr	r3, [pc, #28]	; (80061c0 <_fflush_r+0x4c>)
 80061a4:	429c      	cmp	r4, r3
 80061a6:	d101      	bne.n	80061ac <_fflush_r+0x38>
 80061a8:	68ac      	ldr	r4, [r5, #8]
 80061aa:	e7f1      	b.n	8006190 <_fflush_r+0x1c>
 80061ac:	4b05      	ldr	r3, [pc, #20]	; (80061c4 <_fflush_r+0x50>)
 80061ae:	429c      	cmp	r4, r3
 80061b0:	bf08      	it	eq
 80061b2:	68ec      	ldreq	r4, [r5, #12]
 80061b4:	e7ec      	b.n	8006190 <_fflush_r+0x1c>
 80061b6:	2000      	movs	r0, #0
 80061b8:	bd38      	pop	{r3, r4, r5, pc}
 80061ba:	bf00      	nop
 80061bc:	080064dc 	.word	0x080064dc
 80061c0:	080064fc 	.word	0x080064fc
 80061c4:	080064bc 	.word	0x080064bc

080061c8 <_lseek_r>:
 80061c8:	b538      	push	{r3, r4, r5, lr}
 80061ca:	4c07      	ldr	r4, [pc, #28]	; (80061e8 <_lseek_r+0x20>)
 80061cc:	4605      	mov	r5, r0
 80061ce:	4608      	mov	r0, r1
 80061d0:	4611      	mov	r1, r2
 80061d2:	2200      	movs	r2, #0
 80061d4:	6022      	str	r2, [r4, #0]
 80061d6:	461a      	mov	r2, r3
 80061d8:	f7fa fe68 	bl	8000eac <_lseek>
 80061dc:	1c43      	adds	r3, r0, #1
 80061de:	d102      	bne.n	80061e6 <_lseek_r+0x1e>
 80061e0:	6823      	ldr	r3, [r4, #0]
 80061e2:	b103      	cbz	r3, 80061e6 <_lseek_r+0x1e>
 80061e4:	602b      	str	r3, [r5, #0]
 80061e6:	bd38      	pop	{r3, r4, r5, pc}
 80061e8:	2000029c 	.word	0x2000029c

080061ec <__swhatbuf_r>:
 80061ec:	b570      	push	{r4, r5, r6, lr}
 80061ee:	460e      	mov	r6, r1
 80061f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061f4:	2900      	cmp	r1, #0
 80061f6:	b096      	sub	sp, #88	; 0x58
 80061f8:	4614      	mov	r4, r2
 80061fa:	461d      	mov	r5, r3
 80061fc:	da07      	bge.n	800620e <__swhatbuf_r+0x22>
 80061fe:	2300      	movs	r3, #0
 8006200:	602b      	str	r3, [r5, #0]
 8006202:	89b3      	ldrh	r3, [r6, #12]
 8006204:	061a      	lsls	r2, r3, #24
 8006206:	d410      	bmi.n	800622a <__swhatbuf_r+0x3e>
 8006208:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800620c:	e00e      	b.n	800622c <__swhatbuf_r+0x40>
 800620e:	466a      	mov	r2, sp
 8006210:	f000 f8fc 	bl	800640c <_fstat_r>
 8006214:	2800      	cmp	r0, #0
 8006216:	dbf2      	blt.n	80061fe <__swhatbuf_r+0x12>
 8006218:	9a01      	ldr	r2, [sp, #4]
 800621a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800621e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006222:	425a      	negs	r2, r3
 8006224:	415a      	adcs	r2, r3
 8006226:	602a      	str	r2, [r5, #0]
 8006228:	e7ee      	b.n	8006208 <__swhatbuf_r+0x1c>
 800622a:	2340      	movs	r3, #64	; 0x40
 800622c:	2000      	movs	r0, #0
 800622e:	6023      	str	r3, [r4, #0]
 8006230:	b016      	add	sp, #88	; 0x58
 8006232:	bd70      	pop	{r4, r5, r6, pc}

08006234 <__smakebuf_r>:
 8006234:	898b      	ldrh	r3, [r1, #12]
 8006236:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006238:	079d      	lsls	r5, r3, #30
 800623a:	4606      	mov	r6, r0
 800623c:	460c      	mov	r4, r1
 800623e:	d507      	bpl.n	8006250 <__smakebuf_r+0x1c>
 8006240:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006244:	6023      	str	r3, [r4, #0]
 8006246:	6123      	str	r3, [r4, #16]
 8006248:	2301      	movs	r3, #1
 800624a:	6163      	str	r3, [r4, #20]
 800624c:	b002      	add	sp, #8
 800624e:	bd70      	pop	{r4, r5, r6, pc}
 8006250:	ab01      	add	r3, sp, #4
 8006252:	466a      	mov	r2, sp
 8006254:	f7ff ffca 	bl	80061ec <__swhatbuf_r>
 8006258:	9900      	ldr	r1, [sp, #0]
 800625a:	4605      	mov	r5, r0
 800625c:	4630      	mov	r0, r6
 800625e:	f7ff f959 	bl	8005514 <_malloc_r>
 8006262:	b948      	cbnz	r0, 8006278 <__smakebuf_r+0x44>
 8006264:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006268:	059a      	lsls	r2, r3, #22
 800626a:	d4ef      	bmi.n	800624c <__smakebuf_r+0x18>
 800626c:	f023 0303 	bic.w	r3, r3, #3
 8006270:	f043 0302 	orr.w	r3, r3, #2
 8006274:	81a3      	strh	r3, [r4, #12]
 8006276:	e7e3      	b.n	8006240 <__smakebuf_r+0xc>
 8006278:	4b0d      	ldr	r3, [pc, #52]	; (80062b0 <__smakebuf_r+0x7c>)
 800627a:	62b3      	str	r3, [r6, #40]	; 0x28
 800627c:	89a3      	ldrh	r3, [r4, #12]
 800627e:	6020      	str	r0, [r4, #0]
 8006280:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006284:	81a3      	strh	r3, [r4, #12]
 8006286:	9b00      	ldr	r3, [sp, #0]
 8006288:	6163      	str	r3, [r4, #20]
 800628a:	9b01      	ldr	r3, [sp, #4]
 800628c:	6120      	str	r0, [r4, #16]
 800628e:	b15b      	cbz	r3, 80062a8 <__smakebuf_r+0x74>
 8006290:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006294:	4630      	mov	r0, r6
 8006296:	f000 f8cb 	bl	8006430 <_isatty_r>
 800629a:	b128      	cbz	r0, 80062a8 <__smakebuf_r+0x74>
 800629c:	89a3      	ldrh	r3, [r4, #12]
 800629e:	f023 0303 	bic.w	r3, r3, #3
 80062a2:	f043 0301 	orr.w	r3, r3, #1
 80062a6:	81a3      	strh	r3, [r4, #12]
 80062a8:	89a3      	ldrh	r3, [r4, #12]
 80062aa:	431d      	orrs	r5, r3
 80062ac:	81a5      	strh	r5, [r4, #12]
 80062ae:	e7cd      	b.n	800624c <__smakebuf_r+0x18>
 80062b0:	080053c9 	.word	0x080053c9

080062b4 <memcpy>:
 80062b4:	b510      	push	{r4, lr}
 80062b6:	1e43      	subs	r3, r0, #1
 80062b8:	440a      	add	r2, r1
 80062ba:	4291      	cmp	r1, r2
 80062bc:	d100      	bne.n	80062c0 <memcpy+0xc>
 80062be:	bd10      	pop	{r4, pc}
 80062c0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80062c4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80062c8:	e7f7      	b.n	80062ba <memcpy+0x6>

080062ca <memmove>:
 80062ca:	4288      	cmp	r0, r1
 80062cc:	b510      	push	{r4, lr}
 80062ce:	eb01 0302 	add.w	r3, r1, r2
 80062d2:	d807      	bhi.n	80062e4 <memmove+0x1a>
 80062d4:	1e42      	subs	r2, r0, #1
 80062d6:	4299      	cmp	r1, r3
 80062d8:	d00a      	beq.n	80062f0 <memmove+0x26>
 80062da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80062de:	f802 4f01 	strb.w	r4, [r2, #1]!
 80062e2:	e7f8      	b.n	80062d6 <memmove+0xc>
 80062e4:	4283      	cmp	r3, r0
 80062e6:	d9f5      	bls.n	80062d4 <memmove+0xa>
 80062e8:	1881      	adds	r1, r0, r2
 80062ea:	1ad2      	subs	r2, r2, r3
 80062ec:	42d3      	cmn	r3, r2
 80062ee:	d100      	bne.n	80062f2 <memmove+0x28>
 80062f0:	bd10      	pop	{r4, pc}
 80062f2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80062f6:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80062fa:	e7f7      	b.n	80062ec <memmove+0x22>

080062fc <__malloc_lock>:
 80062fc:	4770      	bx	lr

080062fe <__malloc_unlock>:
 80062fe:	4770      	bx	lr

08006300 <_free_r>:
 8006300:	b538      	push	{r3, r4, r5, lr}
 8006302:	4605      	mov	r5, r0
 8006304:	2900      	cmp	r1, #0
 8006306:	d045      	beq.n	8006394 <_free_r+0x94>
 8006308:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800630c:	1f0c      	subs	r4, r1, #4
 800630e:	2b00      	cmp	r3, #0
 8006310:	bfb8      	it	lt
 8006312:	18e4      	addlt	r4, r4, r3
 8006314:	f7ff fff2 	bl	80062fc <__malloc_lock>
 8006318:	4a1f      	ldr	r2, [pc, #124]	; (8006398 <_free_r+0x98>)
 800631a:	6813      	ldr	r3, [r2, #0]
 800631c:	4610      	mov	r0, r2
 800631e:	b933      	cbnz	r3, 800632e <_free_r+0x2e>
 8006320:	6063      	str	r3, [r4, #4]
 8006322:	6014      	str	r4, [r2, #0]
 8006324:	4628      	mov	r0, r5
 8006326:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800632a:	f7ff bfe8 	b.w	80062fe <__malloc_unlock>
 800632e:	42a3      	cmp	r3, r4
 8006330:	d90c      	bls.n	800634c <_free_r+0x4c>
 8006332:	6821      	ldr	r1, [r4, #0]
 8006334:	1862      	adds	r2, r4, r1
 8006336:	4293      	cmp	r3, r2
 8006338:	bf04      	itt	eq
 800633a:	681a      	ldreq	r2, [r3, #0]
 800633c:	685b      	ldreq	r3, [r3, #4]
 800633e:	6063      	str	r3, [r4, #4]
 8006340:	bf04      	itt	eq
 8006342:	1852      	addeq	r2, r2, r1
 8006344:	6022      	streq	r2, [r4, #0]
 8006346:	6004      	str	r4, [r0, #0]
 8006348:	e7ec      	b.n	8006324 <_free_r+0x24>
 800634a:	4613      	mov	r3, r2
 800634c:	685a      	ldr	r2, [r3, #4]
 800634e:	b10a      	cbz	r2, 8006354 <_free_r+0x54>
 8006350:	42a2      	cmp	r2, r4
 8006352:	d9fa      	bls.n	800634a <_free_r+0x4a>
 8006354:	6819      	ldr	r1, [r3, #0]
 8006356:	1858      	adds	r0, r3, r1
 8006358:	42a0      	cmp	r0, r4
 800635a:	d10b      	bne.n	8006374 <_free_r+0x74>
 800635c:	6820      	ldr	r0, [r4, #0]
 800635e:	4401      	add	r1, r0
 8006360:	1858      	adds	r0, r3, r1
 8006362:	4282      	cmp	r2, r0
 8006364:	6019      	str	r1, [r3, #0]
 8006366:	d1dd      	bne.n	8006324 <_free_r+0x24>
 8006368:	6810      	ldr	r0, [r2, #0]
 800636a:	6852      	ldr	r2, [r2, #4]
 800636c:	605a      	str	r2, [r3, #4]
 800636e:	4401      	add	r1, r0
 8006370:	6019      	str	r1, [r3, #0]
 8006372:	e7d7      	b.n	8006324 <_free_r+0x24>
 8006374:	d902      	bls.n	800637c <_free_r+0x7c>
 8006376:	230c      	movs	r3, #12
 8006378:	602b      	str	r3, [r5, #0]
 800637a:	e7d3      	b.n	8006324 <_free_r+0x24>
 800637c:	6820      	ldr	r0, [r4, #0]
 800637e:	1821      	adds	r1, r4, r0
 8006380:	428a      	cmp	r2, r1
 8006382:	bf04      	itt	eq
 8006384:	6811      	ldreq	r1, [r2, #0]
 8006386:	6852      	ldreq	r2, [r2, #4]
 8006388:	6062      	str	r2, [r4, #4]
 800638a:	bf04      	itt	eq
 800638c:	1809      	addeq	r1, r1, r0
 800638e:	6021      	streq	r1, [r4, #0]
 8006390:	605c      	str	r4, [r3, #4]
 8006392:	e7c7      	b.n	8006324 <_free_r+0x24>
 8006394:	bd38      	pop	{r3, r4, r5, pc}
 8006396:	bf00      	nop
 8006398:	200000a8 	.word	0x200000a8

0800639c <_realloc_r>:
 800639c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800639e:	4607      	mov	r7, r0
 80063a0:	4614      	mov	r4, r2
 80063a2:	460e      	mov	r6, r1
 80063a4:	b921      	cbnz	r1, 80063b0 <_realloc_r+0x14>
 80063a6:	4611      	mov	r1, r2
 80063a8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80063ac:	f7ff b8b2 	b.w	8005514 <_malloc_r>
 80063b0:	b922      	cbnz	r2, 80063bc <_realloc_r+0x20>
 80063b2:	f7ff ffa5 	bl	8006300 <_free_r>
 80063b6:	4625      	mov	r5, r4
 80063b8:	4628      	mov	r0, r5
 80063ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80063bc:	f000 f848 	bl	8006450 <_malloc_usable_size_r>
 80063c0:	42a0      	cmp	r0, r4
 80063c2:	d20f      	bcs.n	80063e4 <_realloc_r+0x48>
 80063c4:	4621      	mov	r1, r4
 80063c6:	4638      	mov	r0, r7
 80063c8:	f7ff f8a4 	bl	8005514 <_malloc_r>
 80063cc:	4605      	mov	r5, r0
 80063ce:	2800      	cmp	r0, #0
 80063d0:	d0f2      	beq.n	80063b8 <_realloc_r+0x1c>
 80063d2:	4631      	mov	r1, r6
 80063d4:	4622      	mov	r2, r4
 80063d6:	f7ff ff6d 	bl	80062b4 <memcpy>
 80063da:	4631      	mov	r1, r6
 80063dc:	4638      	mov	r0, r7
 80063de:	f7ff ff8f 	bl	8006300 <_free_r>
 80063e2:	e7e9      	b.n	80063b8 <_realloc_r+0x1c>
 80063e4:	4635      	mov	r5, r6
 80063e6:	e7e7      	b.n	80063b8 <_realloc_r+0x1c>

080063e8 <_read_r>:
 80063e8:	b538      	push	{r3, r4, r5, lr}
 80063ea:	4c07      	ldr	r4, [pc, #28]	; (8006408 <_read_r+0x20>)
 80063ec:	4605      	mov	r5, r0
 80063ee:	4608      	mov	r0, r1
 80063f0:	4611      	mov	r1, r2
 80063f2:	2200      	movs	r2, #0
 80063f4:	6022      	str	r2, [r4, #0]
 80063f6:	461a      	mov	r2, r3
 80063f8:	f7fa fd14 	bl	8000e24 <_read>
 80063fc:	1c43      	adds	r3, r0, #1
 80063fe:	d102      	bne.n	8006406 <_read_r+0x1e>
 8006400:	6823      	ldr	r3, [r4, #0]
 8006402:	b103      	cbz	r3, 8006406 <_read_r+0x1e>
 8006404:	602b      	str	r3, [r5, #0]
 8006406:	bd38      	pop	{r3, r4, r5, pc}
 8006408:	2000029c 	.word	0x2000029c

0800640c <_fstat_r>:
 800640c:	b538      	push	{r3, r4, r5, lr}
 800640e:	4c07      	ldr	r4, [pc, #28]	; (800642c <_fstat_r+0x20>)
 8006410:	2300      	movs	r3, #0
 8006412:	4605      	mov	r5, r0
 8006414:	4608      	mov	r0, r1
 8006416:	4611      	mov	r1, r2
 8006418:	6023      	str	r3, [r4, #0]
 800641a:	f7fa fd2c 	bl	8000e76 <_fstat>
 800641e:	1c43      	adds	r3, r0, #1
 8006420:	d102      	bne.n	8006428 <_fstat_r+0x1c>
 8006422:	6823      	ldr	r3, [r4, #0]
 8006424:	b103      	cbz	r3, 8006428 <_fstat_r+0x1c>
 8006426:	602b      	str	r3, [r5, #0]
 8006428:	bd38      	pop	{r3, r4, r5, pc}
 800642a:	bf00      	nop
 800642c:	2000029c 	.word	0x2000029c

08006430 <_isatty_r>:
 8006430:	b538      	push	{r3, r4, r5, lr}
 8006432:	4c06      	ldr	r4, [pc, #24]	; (800644c <_isatty_r+0x1c>)
 8006434:	2300      	movs	r3, #0
 8006436:	4605      	mov	r5, r0
 8006438:	4608      	mov	r0, r1
 800643a:	6023      	str	r3, [r4, #0]
 800643c:	f7fa fd2b 	bl	8000e96 <_isatty>
 8006440:	1c43      	adds	r3, r0, #1
 8006442:	d102      	bne.n	800644a <_isatty_r+0x1a>
 8006444:	6823      	ldr	r3, [r4, #0]
 8006446:	b103      	cbz	r3, 800644a <_isatty_r+0x1a>
 8006448:	602b      	str	r3, [r5, #0]
 800644a:	bd38      	pop	{r3, r4, r5, pc}
 800644c:	2000029c 	.word	0x2000029c

08006450 <_malloc_usable_size_r>:
 8006450:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006454:	1f18      	subs	r0, r3, #4
 8006456:	2b00      	cmp	r3, #0
 8006458:	bfbc      	itt	lt
 800645a:	580b      	ldrlt	r3, [r1, r0]
 800645c:	18c0      	addlt	r0, r0, r3
 800645e:	4770      	bx	lr

08006460 <_init>:
 8006460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006462:	bf00      	nop
 8006464:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006466:	bc08      	pop	{r3}
 8006468:	469e      	mov	lr, r3
 800646a:	4770      	bx	lr

0800646c <_fini>:
 800646c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800646e:	bf00      	nop
 8006470:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006472:	bc08      	pop	{r3}
 8006474:	469e      	mov	lr, r3
 8006476:	4770      	bx	lr
