
stm32-robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000021fc  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08002384  08002384  00012384  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080023bc  080023bc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080023bc  080023bc  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080023bc  080023bc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080023bc  080023bc  000123bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080023c0  080023c0  000123c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080023c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a4  2000000c  080023d0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000b0  080023d0  000200b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008e4b  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001289  00000000  00000000  00028e87  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000638  00000000  00000000  0002a110  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000005b0  00000000  00000000  0002a748  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000199ff  00000000  00000000  0002acf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000072a9  00000000  00000000  000446f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000968a1  00000000  00000000  0004b9a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e2241  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000017a8  00000000  00000000  000e22bc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800236c 	.word	0x0800236c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	0800236c 	.word	0x0800236c

080001c8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80001ce:	4b0f      	ldr	r3, [pc, #60]	; (800020c <MX_GPIO_Init+0x44>)
 80001d0:	695b      	ldr	r3, [r3, #20]
 80001d2:	4a0e      	ldr	r2, [pc, #56]	; (800020c <MX_GPIO_Init+0x44>)
 80001d4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80001d8:	6153      	str	r3, [r2, #20]
 80001da:	4b0c      	ldr	r3, [pc, #48]	; (800020c <MX_GPIO_Init+0x44>)
 80001dc:	695b      	ldr	r3, [r3, #20]
 80001de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80001e2:	607b      	str	r3, [r7, #4]
 80001e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80001e6:	4b09      	ldr	r3, [pc, #36]	; (800020c <MX_GPIO_Init+0x44>)
 80001e8:	695b      	ldr	r3, [r3, #20]
 80001ea:	4a08      	ldr	r2, [pc, #32]	; (800020c <MX_GPIO_Init+0x44>)
 80001ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80001f0:	6153      	str	r3, [r2, #20]
 80001f2:	4b06      	ldr	r3, [pc, #24]	; (800020c <MX_GPIO_Init+0x44>)
 80001f4:	695b      	ldr	r3, [r3, #20]
 80001f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80001fa:	603b      	str	r3, [r7, #0]
 80001fc:	683b      	ldr	r3, [r7, #0]

}
 80001fe:	bf00      	nop
 8000200:	370c      	adds	r7, #12
 8000202:	46bd      	mov	sp, r7
 8000204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000208:	4770      	bx	lr
 800020a:	bf00      	nop
 800020c:	40021000 	.word	0x40021000

08000210 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000214:	f000 f94c 	bl	80004b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000218:	f000 f805 	bl	8000226 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800021c:	f7ff ffd4 	bl	80001c8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000220:	f000 f8a8 	bl	8000374 <MX_USART2_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000224:	e7fe      	b.n	8000224 <main+0x14>

08000226 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000226:	b580      	push	{r7, lr}
 8000228:	b090      	sub	sp, #64	; 0x40
 800022a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800022c:	f107 0318 	add.w	r3, r7, #24
 8000230:	2228      	movs	r2, #40	; 0x28
 8000232:	2100      	movs	r1, #0
 8000234:	4618      	mov	r0, r3
 8000236:	f002 f891 	bl	800235c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800023a:	1d3b      	adds	r3, r7, #4
 800023c:	2200      	movs	r2, #0
 800023e:	601a      	str	r2, [r3, #0]
 8000240:	605a      	str	r2, [r3, #4]
 8000242:	609a      	str	r2, [r3, #8]
 8000244:	60da      	str	r2, [r3, #12]
 8000246:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000248:	2302      	movs	r3, #2
 800024a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800024c:	2301      	movs	r3, #1
 800024e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000250:	2310      	movs	r3, #16
 8000252:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000254:	2300      	movs	r3, #0
 8000256:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000258:	f107 0318 	add.w	r3, r7, #24
 800025c:	4618      	mov	r0, r3
 800025e:	f000 fbe5 	bl	8000a2c <HAL_RCC_OscConfig>
 8000262:	4603      	mov	r3, r0
 8000264:	2b00      	cmp	r3, #0
 8000266:	d001      	beq.n	800026c <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000268:	f000 f818 	bl	800029c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800026c:	230f      	movs	r3, #15
 800026e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000270:	2300      	movs	r3, #0
 8000272:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000274:	2300      	movs	r3, #0
 8000276:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000278:	2300      	movs	r3, #0
 800027a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800027c:	2300      	movs	r3, #0
 800027e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000280:	1d3b      	adds	r3, r7, #4
 8000282:	2100      	movs	r1, #0
 8000284:	4618      	mov	r0, r3
 8000286:	f001 fad9 	bl	800183c <HAL_RCC_ClockConfig>
 800028a:	4603      	mov	r3, r0
 800028c:	2b00      	cmp	r3, #0
 800028e:	d001      	beq.n	8000294 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000290:	f000 f804 	bl	800029c <Error_Handler>
  }
}
 8000294:	bf00      	nop
 8000296:	3740      	adds	r7, #64	; 0x40
 8000298:	46bd      	mov	sp, r7
 800029a:	bd80      	pop	{r7, pc}

0800029c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800029c:	b480      	push	{r7}
 800029e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80002a0:	bf00      	nop
 80002a2:	46bd      	mov	sp, r7
 80002a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a8:	4770      	bx	lr
	...

080002ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80002ac:	b480      	push	{r7}
 80002ae:	b083      	sub	sp, #12
 80002b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80002b2:	4b0f      	ldr	r3, [pc, #60]	; (80002f0 <HAL_MspInit+0x44>)
 80002b4:	699b      	ldr	r3, [r3, #24]
 80002b6:	4a0e      	ldr	r2, [pc, #56]	; (80002f0 <HAL_MspInit+0x44>)
 80002b8:	f043 0301 	orr.w	r3, r3, #1
 80002bc:	6193      	str	r3, [r2, #24]
 80002be:	4b0c      	ldr	r3, [pc, #48]	; (80002f0 <HAL_MspInit+0x44>)
 80002c0:	699b      	ldr	r3, [r3, #24]
 80002c2:	f003 0301 	and.w	r3, r3, #1
 80002c6:	607b      	str	r3, [r7, #4]
 80002c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80002ca:	4b09      	ldr	r3, [pc, #36]	; (80002f0 <HAL_MspInit+0x44>)
 80002cc:	69db      	ldr	r3, [r3, #28]
 80002ce:	4a08      	ldr	r2, [pc, #32]	; (80002f0 <HAL_MspInit+0x44>)
 80002d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80002d4:	61d3      	str	r3, [r2, #28]
 80002d6:	4b06      	ldr	r3, [pc, #24]	; (80002f0 <HAL_MspInit+0x44>)
 80002d8:	69db      	ldr	r3, [r3, #28]
 80002da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80002de:	603b      	str	r3, [r7, #0]
 80002e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80002e2:	bf00      	nop
 80002e4:	370c      	adds	r7, #12
 80002e6:	46bd      	mov	sp, r7
 80002e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop
 80002f0:	40021000 	.word	0x40021000

080002f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80002f4:	b480      	push	{r7}
 80002f6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80002f8:	bf00      	nop
 80002fa:	46bd      	mov	sp, r7
 80002fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000300:	4770      	bx	lr

08000302 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000302:	b480      	push	{r7}
 8000304:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000306:	e7fe      	b.n	8000306 <HardFault_Handler+0x4>

08000308 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000308:	b480      	push	{r7}
 800030a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800030c:	e7fe      	b.n	800030c <MemManage_Handler+0x4>

0800030e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800030e:	b480      	push	{r7}
 8000310:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000312:	e7fe      	b.n	8000312 <BusFault_Handler+0x4>

08000314 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000314:	b480      	push	{r7}
 8000316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000318:	e7fe      	b.n	8000318 <UsageFault_Handler+0x4>

0800031a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800031a:	b480      	push	{r7}
 800031c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800031e:	bf00      	nop
 8000320:	46bd      	mov	sp, r7
 8000322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000326:	4770      	bx	lr

08000328 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000328:	b480      	push	{r7}
 800032a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800032c:	bf00      	nop
 800032e:	46bd      	mov	sp, r7
 8000330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000334:	4770      	bx	lr

08000336 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000336:	b480      	push	{r7}
 8000338:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800033a:	bf00      	nop
 800033c:	46bd      	mov	sp, r7
 800033e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000342:	4770      	bx	lr

08000344 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000348:	f000 f8f8 	bl	800053c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800034c:	bf00      	nop
 800034e:	bd80      	pop	{r7, pc}

08000350 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000350:	b480      	push	{r7}
 8000352:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000354:	4b06      	ldr	r3, [pc, #24]	; (8000370 <SystemInit+0x20>)
 8000356:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800035a:	4a05      	ldr	r2, [pc, #20]	; (8000370 <SystemInit+0x20>)
 800035c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000360:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000364:	bf00      	nop
 8000366:	46bd      	mov	sp, r7
 8000368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800036c:	4770      	bx	lr
 800036e:	bf00      	nop
 8000370:	e000ed00 	.word	0xe000ed00

08000374 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000374:	b580      	push	{r7, lr}
 8000376:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8000378:	4b14      	ldr	r3, [pc, #80]	; (80003cc <MX_USART2_UART_Init+0x58>)
 800037a:	4a15      	ldr	r2, [pc, #84]	; (80003d0 <MX_USART2_UART_Init+0x5c>)
 800037c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800037e:	4b13      	ldr	r3, [pc, #76]	; (80003cc <MX_USART2_UART_Init+0x58>)
 8000380:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000384:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000386:	4b11      	ldr	r3, [pc, #68]	; (80003cc <MX_USART2_UART_Init+0x58>)
 8000388:	2200      	movs	r2, #0
 800038a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800038c:	4b0f      	ldr	r3, [pc, #60]	; (80003cc <MX_USART2_UART_Init+0x58>)
 800038e:	2200      	movs	r2, #0
 8000390:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000392:	4b0e      	ldr	r3, [pc, #56]	; (80003cc <MX_USART2_UART_Init+0x58>)
 8000394:	2200      	movs	r2, #0
 8000396:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000398:	4b0c      	ldr	r3, [pc, #48]	; (80003cc <MX_USART2_UART_Init+0x58>)
 800039a:	220c      	movs	r2, #12
 800039c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800039e:	4b0b      	ldr	r3, [pc, #44]	; (80003cc <MX_USART2_UART_Init+0x58>)
 80003a0:	2200      	movs	r2, #0
 80003a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80003a4:	4b09      	ldr	r3, [pc, #36]	; (80003cc <MX_USART2_UART_Init+0x58>)
 80003a6:	2200      	movs	r2, #0
 80003a8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80003aa:	4b08      	ldr	r3, [pc, #32]	; (80003cc <MX_USART2_UART_Init+0x58>)
 80003ac:	2200      	movs	r2, #0
 80003ae:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80003b0:	4b06      	ldr	r3, [pc, #24]	; (80003cc <MX_USART2_UART_Init+0x58>)
 80003b2:	2200      	movs	r2, #0
 80003b4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80003b6:	4805      	ldr	r0, [pc, #20]	; (80003cc <MX_USART2_UART_Init+0x58>)
 80003b8:	f001 fc76 	bl	8001ca8 <HAL_UART_Init>
 80003bc:	4603      	mov	r3, r0
 80003be:	2b00      	cmp	r3, #0
 80003c0:	d001      	beq.n	80003c6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80003c2:	f7ff ff6b 	bl	800029c <Error_Handler>
  }

}
 80003c6:	bf00      	nop
 80003c8:	bd80      	pop	{r7, pc}
 80003ca:	bf00      	nop
 80003cc:	20000028 	.word	0x20000028
 80003d0:	40004400 	.word	0x40004400

080003d4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80003d4:	b580      	push	{r7, lr}
 80003d6:	b08a      	sub	sp, #40	; 0x28
 80003d8:	af00      	add	r7, sp, #0
 80003da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003dc:	f107 0314 	add.w	r3, r7, #20
 80003e0:	2200      	movs	r2, #0
 80003e2:	601a      	str	r2, [r3, #0]
 80003e4:	605a      	str	r2, [r3, #4]
 80003e6:	609a      	str	r2, [r3, #8]
 80003e8:	60da      	str	r2, [r3, #12]
 80003ea:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	681b      	ldr	r3, [r3, #0]
 80003f0:	4a18      	ldr	r2, [pc, #96]	; (8000454 <HAL_UART_MspInit+0x80>)
 80003f2:	4293      	cmp	r3, r2
 80003f4:	d129      	bne.n	800044a <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80003f6:	4b18      	ldr	r3, [pc, #96]	; (8000458 <HAL_UART_MspInit+0x84>)
 80003f8:	69db      	ldr	r3, [r3, #28]
 80003fa:	4a17      	ldr	r2, [pc, #92]	; (8000458 <HAL_UART_MspInit+0x84>)
 80003fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000400:	61d3      	str	r3, [r2, #28]
 8000402:	4b15      	ldr	r3, [pc, #84]	; (8000458 <HAL_UART_MspInit+0x84>)
 8000404:	69db      	ldr	r3, [r3, #28]
 8000406:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800040a:	613b      	str	r3, [r7, #16]
 800040c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800040e:	4b12      	ldr	r3, [pc, #72]	; (8000458 <HAL_UART_MspInit+0x84>)
 8000410:	695b      	ldr	r3, [r3, #20]
 8000412:	4a11      	ldr	r2, [pc, #68]	; (8000458 <HAL_UART_MspInit+0x84>)
 8000414:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000418:	6153      	str	r3, [r2, #20]
 800041a:	4b0f      	ldr	r3, [pc, #60]	; (8000458 <HAL_UART_MspInit+0x84>)
 800041c:	695b      	ldr	r3, [r3, #20]
 800041e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000422:	60fb      	str	r3, [r7, #12]
 8000424:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8000426:	f248 0304 	movw	r3, #32772	; 0x8004
 800042a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800042c:	2302      	movs	r3, #2
 800042e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000430:	2300      	movs	r3, #0
 8000432:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000434:	2303      	movs	r3, #3
 8000436:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000438:	2307      	movs	r3, #7
 800043a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800043c:	f107 0314 	add.w	r3, r7, #20
 8000440:	4619      	mov	r1, r3
 8000442:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000446:	f000 f97f 	bl	8000748 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800044a:	bf00      	nop
 800044c:	3728      	adds	r7, #40	; 0x28
 800044e:	46bd      	mov	sp, r7
 8000450:	bd80      	pop	{r7, pc}
 8000452:	bf00      	nop
 8000454:	40004400 	.word	0x40004400
 8000458:	40021000 	.word	0x40021000

0800045c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800045c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000494 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000460:	480d      	ldr	r0, [pc, #52]	; (8000498 <LoopForever+0x6>)
  ldr r1, =_edata
 8000462:	490e      	ldr	r1, [pc, #56]	; (800049c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000464:	4a0e      	ldr	r2, [pc, #56]	; (80004a0 <LoopForever+0xe>)
  movs r3, #0
 8000466:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000468:	e002      	b.n	8000470 <LoopCopyDataInit>

0800046a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800046a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800046c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800046e:	3304      	adds	r3, #4

08000470 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000470:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000472:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000474:	d3f9      	bcc.n	800046a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000476:	4a0b      	ldr	r2, [pc, #44]	; (80004a4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000478:	4c0b      	ldr	r4, [pc, #44]	; (80004a8 <LoopForever+0x16>)
  movs r3, #0
 800047a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800047c:	e001      	b.n	8000482 <LoopFillZerobss>

0800047e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800047e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000480:	3204      	adds	r2, #4

08000482 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000482:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000484:	d3fb      	bcc.n	800047e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000486:	f7ff ff63 	bl	8000350 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800048a:	f001 ff43 	bl	8002314 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800048e:	f7ff febf 	bl	8000210 <main>

08000492 <LoopForever>:

LoopForever:
    b LoopForever
 8000492:	e7fe      	b.n	8000492 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000494:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000498:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800049c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80004a0:	080023c4 	.word	0x080023c4
  ldr r2, =_sbss
 80004a4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80004a8:	200000b0 	.word	0x200000b0

080004ac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80004ac:	e7fe      	b.n	80004ac <ADC1_2_IRQHandler>
	...

080004b0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004b4:	4b08      	ldr	r3, [pc, #32]	; (80004d8 <HAL_Init+0x28>)
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	4a07      	ldr	r2, [pc, #28]	; (80004d8 <HAL_Init+0x28>)
 80004ba:	f043 0310 	orr.w	r3, r3, #16
 80004be:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004c0:	2003      	movs	r0, #3
 80004c2:	f000 f90d 	bl	80006e0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80004c6:	2000      	movs	r0, #0
 80004c8:	f000 f808 	bl	80004dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80004cc:	f7ff feee 	bl	80002ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80004d0:	2300      	movs	r3, #0
}
 80004d2:	4618      	mov	r0, r3
 80004d4:	bd80      	pop	{r7, pc}
 80004d6:	bf00      	nop
 80004d8:	40022000 	.word	0x40022000

080004dc <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b082      	sub	sp, #8
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80004e4:	4b12      	ldr	r3, [pc, #72]	; (8000530 <HAL_InitTick+0x54>)
 80004e6:	681a      	ldr	r2, [r3, #0]
 80004e8:	4b12      	ldr	r3, [pc, #72]	; (8000534 <HAL_InitTick+0x58>)
 80004ea:	781b      	ldrb	r3, [r3, #0]
 80004ec:	4619      	mov	r1, r3
 80004ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80004f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80004fa:	4618      	mov	r0, r3
 80004fc:	f000 f917 	bl	800072e <HAL_SYSTICK_Config>
 8000500:	4603      	mov	r3, r0
 8000502:	2b00      	cmp	r3, #0
 8000504:	d001      	beq.n	800050a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000506:	2301      	movs	r3, #1
 8000508:	e00e      	b.n	8000528 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	2b0f      	cmp	r3, #15
 800050e:	d80a      	bhi.n	8000526 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000510:	2200      	movs	r2, #0
 8000512:	6879      	ldr	r1, [r7, #4]
 8000514:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000518:	f000 f8ed 	bl	80006f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800051c:	4a06      	ldr	r2, [pc, #24]	; (8000538 <HAL_InitTick+0x5c>)
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000522:	2300      	movs	r3, #0
 8000524:	e000      	b.n	8000528 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000526:	2301      	movs	r3, #1
}
 8000528:	4618      	mov	r0, r3
 800052a:	3708      	adds	r7, #8
 800052c:	46bd      	mov	sp, r7
 800052e:	bd80      	pop	{r7, pc}
 8000530:	20000000 	.word	0x20000000
 8000534:	20000008 	.word	0x20000008
 8000538:	20000004 	.word	0x20000004

0800053c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800053c:	b480      	push	{r7}
 800053e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000540:	4b06      	ldr	r3, [pc, #24]	; (800055c <HAL_IncTick+0x20>)
 8000542:	781b      	ldrb	r3, [r3, #0]
 8000544:	461a      	mov	r2, r3
 8000546:	4b06      	ldr	r3, [pc, #24]	; (8000560 <HAL_IncTick+0x24>)
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	4413      	add	r3, r2
 800054c:	4a04      	ldr	r2, [pc, #16]	; (8000560 <HAL_IncTick+0x24>)
 800054e:	6013      	str	r3, [r2, #0]
}
 8000550:	bf00      	nop
 8000552:	46bd      	mov	sp, r7
 8000554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000558:	4770      	bx	lr
 800055a:	bf00      	nop
 800055c:	20000008 	.word	0x20000008
 8000560:	200000ac 	.word	0x200000ac

08000564 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000564:	b480      	push	{r7}
 8000566:	af00      	add	r7, sp, #0
  return uwTick;  
 8000568:	4b03      	ldr	r3, [pc, #12]	; (8000578 <HAL_GetTick+0x14>)
 800056a:	681b      	ldr	r3, [r3, #0]
}
 800056c:	4618      	mov	r0, r3
 800056e:	46bd      	mov	sp, r7
 8000570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop
 8000578:	200000ac 	.word	0x200000ac

0800057c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800057c:	b480      	push	{r7}
 800057e:	b085      	sub	sp, #20
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	f003 0307 	and.w	r3, r3, #7
 800058a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800058c:	4b0c      	ldr	r3, [pc, #48]	; (80005c0 <__NVIC_SetPriorityGrouping+0x44>)
 800058e:	68db      	ldr	r3, [r3, #12]
 8000590:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000592:	68ba      	ldr	r2, [r7, #8]
 8000594:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000598:	4013      	ands	r3, r2
 800059a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800059c:	68fb      	ldr	r3, [r7, #12]
 800059e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80005a0:	68bb      	ldr	r3, [r7, #8]
 80005a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80005a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80005a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80005ae:	4a04      	ldr	r2, [pc, #16]	; (80005c0 <__NVIC_SetPriorityGrouping+0x44>)
 80005b0:	68bb      	ldr	r3, [r7, #8]
 80005b2:	60d3      	str	r3, [r2, #12]
}
 80005b4:	bf00      	nop
 80005b6:	3714      	adds	r7, #20
 80005b8:	46bd      	mov	sp, r7
 80005ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005be:	4770      	bx	lr
 80005c0:	e000ed00 	.word	0xe000ed00

080005c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80005c4:	b480      	push	{r7}
 80005c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005c8:	4b04      	ldr	r3, [pc, #16]	; (80005dc <__NVIC_GetPriorityGrouping+0x18>)
 80005ca:	68db      	ldr	r3, [r3, #12]
 80005cc:	0a1b      	lsrs	r3, r3, #8
 80005ce:	f003 0307 	and.w	r3, r3, #7
}
 80005d2:	4618      	mov	r0, r3
 80005d4:	46bd      	mov	sp, r7
 80005d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005da:	4770      	bx	lr
 80005dc:	e000ed00 	.word	0xe000ed00

080005e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80005e0:	b480      	push	{r7}
 80005e2:	b083      	sub	sp, #12
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	4603      	mov	r3, r0
 80005e8:	6039      	str	r1, [r7, #0]
 80005ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	db0a      	blt.n	800060a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005f4:	683b      	ldr	r3, [r7, #0]
 80005f6:	b2da      	uxtb	r2, r3
 80005f8:	490c      	ldr	r1, [pc, #48]	; (800062c <__NVIC_SetPriority+0x4c>)
 80005fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005fe:	0112      	lsls	r2, r2, #4
 8000600:	b2d2      	uxtb	r2, r2
 8000602:	440b      	add	r3, r1
 8000604:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000608:	e00a      	b.n	8000620 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800060a:	683b      	ldr	r3, [r7, #0]
 800060c:	b2da      	uxtb	r2, r3
 800060e:	4908      	ldr	r1, [pc, #32]	; (8000630 <__NVIC_SetPriority+0x50>)
 8000610:	79fb      	ldrb	r3, [r7, #7]
 8000612:	f003 030f 	and.w	r3, r3, #15
 8000616:	3b04      	subs	r3, #4
 8000618:	0112      	lsls	r2, r2, #4
 800061a:	b2d2      	uxtb	r2, r2
 800061c:	440b      	add	r3, r1
 800061e:	761a      	strb	r2, [r3, #24]
}
 8000620:	bf00      	nop
 8000622:	370c      	adds	r7, #12
 8000624:	46bd      	mov	sp, r7
 8000626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062a:	4770      	bx	lr
 800062c:	e000e100 	.word	0xe000e100
 8000630:	e000ed00 	.word	0xe000ed00

08000634 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000634:	b480      	push	{r7}
 8000636:	b089      	sub	sp, #36	; 0x24
 8000638:	af00      	add	r7, sp, #0
 800063a:	60f8      	str	r0, [r7, #12]
 800063c:	60b9      	str	r1, [r7, #8]
 800063e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000640:	68fb      	ldr	r3, [r7, #12]
 8000642:	f003 0307 	and.w	r3, r3, #7
 8000646:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000648:	69fb      	ldr	r3, [r7, #28]
 800064a:	f1c3 0307 	rsb	r3, r3, #7
 800064e:	2b04      	cmp	r3, #4
 8000650:	bf28      	it	cs
 8000652:	2304      	movcs	r3, #4
 8000654:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000656:	69fb      	ldr	r3, [r7, #28]
 8000658:	3304      	adds	r3, #4
 800065a:	2b06      	cmp	r3, #6
 800065c:	d902      	bls.n	8000664 <NVIC_EncodePriority+0x30>
 800065e:	69fb      	ldr	r3, [r7, #28]
 8000660:	3b03      	subs	r3, #3
 8000662:	e000      	b.n	8000666 <NVIC_EncodePriority+0x32>
 8000664:	2300      	movs	r3, #0
 8000666:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000668:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800066c:	69bb      	ldr	r3, [r7, #24]
 800066e:	fa02 f303 	lsl.w	r3, r2, r3
 8000672:	43da      	mvns	r2, r3
 8000674:	68bb      	ldr	r3, [r7, #8]
 8000676:	401a      	ands	r2, r3
 8000678:	697b      	ldr	r3, [r7, #20]
 800067a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800067c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000680:	697b      	ldr	r3, [r7, #20]
 8000682:	fa01 f303 	lsl.w	r3, r1, r3
 8000686:	43d9      	mvns	r1, r3
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800068c:	4313      	orrs	r3, r2
         );
}
 800068e:	4618      	mov	r0, r3
 8000690:	3724      	adds	r7, #36	; 0x24
 8000692:	46bd      	mov	sp, r7
 8000694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000698:	4770      	bx	lr
	...

0800069c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b082      	sub	sp, #8
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	3b01      	subs	r3, #1
 80006a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80006ac:	d301      	bcc.n	80006b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80006ae:	2301      	movs	r3, #1
 80006b0:	e00f      	b.n	80006d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006b2:	4a0a      	ldr	r2, [pc, #40]	; (80006dc <SysTick_Config+0x40>)
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	3b01      	subs	r3, #1
 80006b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80006ba:	210f      	movs	r1, #15
 80006bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80006c0:	f7ff ff8e 	bl	80005e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006c4:	4b05      	ldr	r3, [pc, #20]	; (80006dc <SysTick_Config+0x40>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006ca:	4b04      	ldr	r3, [pc, #16]	; (80006dc <SysTick_Config+0x40>)
 80006cc:	2207      	movs	r2, #7
 80006ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80006d0:	2300      	movs	r3, #0
}
 80006d2:	4618      	mov	r0, r3
 80006d4:	3708      	adds	r7, #8
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	e000e010 	.word	0xe000e010

080006e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b082      	sub	sp, #8
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80006e8:	6878      	ldr	r0, [r7, #4]
 80006ea:	f7ff ff47 	bl	800057c <__NVIC_SetPriorityGrouping>
}
 80006ee:	bf00      	nop
 80006f0:	3708      	adds	r7, #8
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}

080006f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006f6:	b580      	push	{r7, lr}
 80006f8:	b086      	sub	sp, #24
 80006fa:	af00      	add	r7, sp, #0
 80006fc:	4603      	mov	r3, r0
 80006fe:	60b9      	str	r1, [r7, #8]
 8000700:	607a      	str	r2, [r7, #4]
 8000702:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000704:	2300      	movs	r3, #0
 8000706:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000708:	f7ff ff5c 	bl	80005c4 <__NVIC_GetPriorityGrouping>
 800070c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800070e:	687a      	ldr	r2, [r7, #4]
 8000710:	68b9      	ldr	r1, [r7, #8]
 8000712:	6978      	ldr	r0, [r7, #20]
 8000714:	f7ff ff8e 	bl	8000634 <NVIC_EncodePriority>
 8000718:	4602      	mov	r2, r0
 800071a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800071e:	4611      	mov	r1, r2
 8000720:	4618      	mov	r0, r3
 8000722:	f7ff ff5d 	bl	80005e0 <__NVIC_SetPriority>
}
 8000726:	bf00      	nop
 8000728:	3718      	adds	r7, #24
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}

0800072e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800072e:	b580      	push	{r7, lr}
 8000730:	b082      	sub	sp, #8
 8000732:	af00      	add	r7, sp, #0
 8000734:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000736:	6878      	ldr	r0, [r7, #4]
 8000738:	f7ff ffb0 	bl	800069c <SysTick_Config>
 800073c:	4603      	mov	r3, r0
}
 800073e:	4618      	mov	r0, r3
 8000740:	3708      	adds	r7, #8
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
	...

08000748 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000748:	b480      	push	{r7}
 800074a:	b087      	sub	sp, #28
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
 8000750:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000752:	2300      	movs	r3, #0
 8000754:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000756:	e14e      	b.n	80009f6 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000758:	683b      	ldr	r3, [r7, #0]
 800075a:	681a      	ldr	r2, [r3, #0]
 800075c:	2101      	movs	r1, #1
 800075e:	697b      	ldr	r3, [r7, #20]
 8000760:	fa01 f303 	lsl.w	r3, r1, r3
 8000764:	4013      	ands	r3, r2
 8000766:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	2b00      	cmp	r3, #0
 800076c:	f000 8140 	beq.w	80009f0 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000770:	683b      	ldr	r3, [r7, #0]
 8000772:	685b      	ldr	r3, [r3, #4]
 8000774:	f003 0303 	and.w	r3, r3, #3
 8000778:	2b01      	cmp	r3, #1
 800077a:	d005      	beq.n	8000788 <HAL_GPIO_Init+0x40>
 800077c:	683b      	ldr	r3, [r7, #0]
 800077e:	685b      	ldr	r3, [r3, #4]
 8000780:	f003 0303 	and.w	r3, r3, #3
 8000784:	2b02      	cmp	r3, #2
 8000786:	d130      	bne.n	80007ea <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	689b      	ldr	r3, [r3, #8]
 800078c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800078e:	697b      	ldr	r3, [r7, #20]
 8000790:	005b      	lsls	r3, r3, #1
 8000792:	2203      	movs	r2, #3
 8000794:	fa02 f303 	lsl.w	r3, r2, r3
 8000798:	43db      	mvns	r3, r3
 800079a:	693a      	ldr	r2, [r7, #16]
 800079c:	4013      	ands	r3, r2
 800079e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80007a0:	683b      	ldr	r3, [r7, #0]
 80007a2:	68da      	ldr	r2, [r3, #12]
 80007a4:	697b      	ldr	r3, [r7, #20]
 80007a6:	005b      	lsls	r3, r3, #1
 80007a8:	fa02 f303 	lsl.w	r3, r2, r3
 80007ac:	693a      	ldr	r2, [r7, #16]
 80007ae:	4313      	orrs	r3, r2
 80007b0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	693a      	ldr	r2, [r7, #16]
 80007b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	685b      	ldr	r3, [r3, #4]
 80007bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80007be:	2201      	movs	r2, #1
 80007c0:	697b      	ldr	r3, [r7, #20]
 80007c2:	fa02 f303 	lsl.w	r3, r2, r3
 80007c6:	43db      	mvns	r3, r3
 80007c8:	693a      	ldr	r2, [r7, #16]
 80007ca:	4013      	ands	r3, r2
 80007cc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80007ce:	683b      	ldr	r3, [r7, #0]
 80007d0:	685b      	ldr	r3, [r3, #4]
 80007d2:	091b      	lsrs	r3, r3, #4
 80007d4:	f003 0201 	and.w	r2, r3, #1
 80007d8:	697b      	ldr	r3, [r7, #20]
 80007da:	fa02 f303 	lsl.w	r3, r2, r3
 80007de:	693a      	ldr	r2, [r7, #16]
 80007e0:	4313      	orrs	r3, r2
 80007e2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	693a      	ldr	r2, [r7, #16]
 80007e8:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80007ea:	683b      	ldr	r3, [r7, #0]
 80007ec:	685b      	ldr	r3, [r3, #4]
 80007ee:	f003 0303 	and.w	r3, r3, #3
 80007f2:	2b03      	cmp	r3, #3
 80007f4:	d017      	beq.n	8000826 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	68db      	ldr	r3, [r3, #12]
 80007fa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80007fc:	697b      	ldr	r3, [r7, #20]
 80007fe:	005b      	lsls	r3, r3, #1
 8000800:	2203      	movs	r2, #3
 8000802:	fa02 f303 	lsl.w	r3, r2, r3
 8000806:	43db      	mvns	r3, r3
 8000808:	693a      	ldr	r2, [r7, #16]
 800080a:	4013      	ands	r3, r2
 800080c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800080e:	683b      	ldr	r3, [r7, #0]
 8000810:	689a      	ldr	r2, [r3, #8]
 8000812:	697b      	ldr	r3, [r7, #20]
 8000814:	005b      	lsls	r3, r3, #1
 8000816:	fa02 f303 	lsl.w	r3, r2, r3
 800081a:	693a      	ldr	r2, [r7, #16]
 800081c:	4313      	orrs	r3, r2
 800081e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	693a      	ldr	r2, [r7, #16]
 8000824:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000826:	683b      	ldr	r3, [r7, #0]
 8000828:	685b      	ldr	r3, [r3, #4]
 800082a:	f003 0303 	and.w	r3, r3, #3
 800082e:	2b02      	cmp	r3, #2
 8000830:	d123      	bne.n	800087a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000832:	697b      	ldr	r3, [r7, #20]
 8000834:	08da      	lsrs	r2, r3, #3
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	3208      	adds	r2, #8
 800083a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800083e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000840:	697b      	ldr	r3, [r7, #20]
 8000842:	f003 0307 	and.w	r3, r3, #7
 8000846:	009b      	lsls	r3, r3, #2
 8000848:	220f      	movs	r2, #15
 800084a:	fa02 f303 	lsl.w	r3, r2, r3
 800084e:	43db      	mvns	r3, r3
 8000850:	693a      	ldr	r2, [r7, #16]
 8000852:	4013      	ands	r3, r2
 8000854:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000856:	683b      	ldr	r3, [r7, #0]
 8000858:	691a      	ldr	r2, [r3, #16]
 800085a:	697b      	ldr	r3, [r7, #20]
 800085c:	f003 0307 	and.w	r3, r3, #7
 8000860:	009b      	lsls	r3, r3, #2
 8000862:	fa02 f303 	lsl.w	r3, r2, r3
 8000866:	693a      	ldr	r2, [r7, #16]
 8000868:	4313      	orrs	r3, r2
 800086a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800086c:	697b      	ldr	r3, [r7, #20]
 800086e:	08da      	lsrs	r2, r3, #3
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	3208      	adds	r2, #8
 8000874:	6939      	ldr	r1, [r7, #16]
 8000876:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000880:	697b      	ldr	r3, [r7, #20]
 8000882:	005b      	lsls	r3, r3, #1
 8000884:	2203      	movs	r2, #3
 8000886:	fa02 f303 	lsl.w	r3, r2, r3
 800088a:	43db      	mvns	r3, r3
 800088c:	693a      	ldr	r2, [r7, #16]
 800088e:	4013      	ands	r3, r2
 8000890:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000892:	683b      	ldr	r3, [r7, #0]
 8000894:	685b      	ldr	r3, [r3, #4]
 8000896:	f003 0203 	and.w	r2, r3, #3
 800089a:	697b      	ldr	r3, [r7, #20]
 800089c:	005b      	lsls	r3, r3, #1
 800089e:	fa02 f303 	lsl.w	r3, r2, r3
 80008a2:	693a      	ldr	r2, [r7, #16]
 80008a4:	4313      	orrs	r3, r2
 80008a6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	693a      	ldr	r2, [r7, #16]
 80008ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80008ae:	683b      	ldr	r3, [r7, #0]
 80008b0:	685b      	ldr	r3, [r3, #4]
 80008b2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	f000 809a 	beq.w	80009f0 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008bc:	4b55      	ldr	r3, [pc, #340]	; (8000a14 <HAL_GPIO_Init+0x2cc>)
 80008be:	699b      	ldr	r3, [r3, #24]
 80008c0:	4a54      	ldr	r2, [pc, #336]	; (8000a14 <HAL_GPIO_Init+0x2cc>)
 80008c2:	f043 0301 	orr.w	r3, r3, #1
 80008c6:	6193      	str	r3, [r2, #24]
 80008c8:	4b52      	ldr	r3, [pc, #328]	; (8000a14 <HAL_GPIO_Init+0x2cc>)
 80008ca:	699b      	ldr	r3, [r3, #24]
 80008cc:	f003 0301 	and.w	r3, r3, #1
 80008d0:	60bb      	str	r3, [r7, #8]
 80008d2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80008d4:	4a50      	ldr	r2, [pc, #320]	; (8000a18 <HAL_GPIO_Init+0x2d0>)
 80008d6:	697b      	ldr	r3, [r7, #20]
 80008d8:	089b      	lsrs	r3, r3, #2
 80008da:	3302      	adds	r3, #2
 80008dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008e0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80008e2:	697b      	ldr	r3, [r7, #20]
 80008e4:	f003 0303 	and.w	r3, r3, #3
 80008e8:	009b      	lsls	r3, r3, #2
 80008ea:	220f      	movs	r2, #15
 80008ec:	fa02 f303 	lsl.w	r3, r2, r3
 80008f0:	43db      	mvns	r3, r3
 80008f2:	693a      	ldr	r2, [r7, #16]
 80008f4:	4013      	ands	r3, r2
 80008f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80008fe:	d013      	beq.n	8000928 <HAL_GPIO_Init+0x1e0>
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	4a46      	ldr	r2, [pc, #280]	; (8000a1c <HAL_GPIO_Init+0x2d4>)
 8000904:	4293      	cmp	r3, r2
 8000906:	d00d      	beq.n	8000924 <HAL_GPIO_Init+0x1dc>
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	4a45      	ldr	r2, [pc, #276]	; (8000a20 <HAL_GPIO_Init+0x2d8>)
 800090c:	4293      	cmp	r3, r2
 800090e:	d007      	beq.n	8000920 <HAL_GPIO_Init+0x1d8>
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	4a44      	ldr	r2, [pc, #272]	; (8000a24 <HAL_GPIO_Init+0x2dc>)
 8000914:	4293      	cmp	r3, r2
 8000916:	d101      	bne.n	800091c <HAL_GPIO_Init+0x1d4>
 8000918:	2303      	movs	r3, #3
 800091a:	e006      	b.n	800092a <HAL_GPIO_Init+0x1e2>
 800091c:	2305      	movs	r3, #5
 800091e:	e004      	b.n	800092a <HAL_GPIO_Init+0x1e2>
 8000920:	2302      	movs	r3, #2
 8000922:	e002      	b.n	800092a <HAL_GPIO_Init+0x1e2>
 8000924:	2301      	movs	r3, #1
 8000926:	e000      	b.n	800092a <HAL_GPIO_Init+0x1e2>
 8000928:	2300      	movs	r3, #0
 800092a:	697a      	ldr	r2, [r7, #20]
 800092c:	f002 0203 	and.w	r2, r2, #3
 8000930:	0092      	lsls	r2, r2, #2
 8000932:	4093      	lsls	r3, r2
 8000934:	693a      	ldr	r2, [r7, #16]
 8000936:	4313      	orrs	r3, r2
 8000938:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800093a:	4937      	ldr	r1, [pc, #220]	; (8000a18 <HAL_GPIO_Init+0x2d0>)
 800093c:	697b      	ldr	r3, [r7, #20]
 800093e:	089b      	lsrs	r3, r3, #2
 8000940:	3302      	adds	r3, #2
 8000942:	693a      	ldr	r2, [r7, #16]
 8000944:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000948:	4b37      	ldr	r3, [pc, #220]	; (8000a28 <HAL_GPIO_Init+0x2e0>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800094e:	68fb      	ldr	r3, [r7, #12]
 8000950:	43db      	mvns	r3, r3
 8000952:	693a      	ldr	r2, [r7, #16]
 8000954:	4013      	ands	r3, r2
 8000956:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000958:	683b      	ldr	r3, [r7, #0]
 800095a:	685b      	ldr	r3, [r3, #4]
 800095c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000960:	2b00      	cmp	r3, #0
 8000962:	d003      	beq.n	800096c <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8000964:	693a      	ldr	r2, [r7, #16]
 8000966:	68fb      	ldr	r3, [r7, #12]
 8000968:	4313      	orrs	r3, r2
 800096a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800096c:	4a2e      	ldr	r2, [pc, #184]	; (8000a28 <HAL_GPIO_Init+0x2e0>)
 800096e:	693b      	ldr	r3, [r7, #16]
 8000970:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000972:	4b2d      	ldr	r3, [pc, #180]	; (8000a28 <HAL_GPIO_Init+0x2e0>)
 8000974:	685b      	ldr	r3, [r3, #4]
 8000976:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000978:	68fb      	ldr	r3, [r7, #12]
 800097a:	43db      	mvns	r3, r3
 800097c:	693a      	ldr	r2, [r7, #16]
 800097e:	4013      	ands	r3, r2
 8000980:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000982:	683b      	ldr	r3, [r7, #0]
 8000984:	685b      	ldr	r3, [r3, #4]
 8000986:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800098a:	2b00      	cmp	r3, #0
 800098c:	d003      	beq.n	8000996 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800098e:	693a      	ldr	r2, [r7, #16]
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	4313      	orrs	r3, r2
 8000994:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000996:	4a24      	ldr	r2, [pc, #144]	; (8000a28 <HAL_GPIO_Init+0x2e0>)
 8000998:	693b      	ldr	r3, [r7, #16]
 800099a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800099c:	4b22      	ldr	r3, [pc, #136]	; (8000a28 <HAL_GPIO_Init+0x2e0>)
 800099e:	689b      	ldr	r3, [r3, #8]
 80009a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80009a2:	68fb      	ldr	r3, [r7, #12]
 80009a4:	43db      	mvns	r3, r3
 80009a6:	693a      	ldr	r2, [r7, #16]
 80009a8:	4013      	ands	r3, r2
 80009aa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80009ac:	683b      	ldr	r3, [r7, #0]
 80009ae:	685b      	ldr	r3, [r3, #4]
 80009b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d003      	beq.n	80009c0 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80009b8:	693a      	ldr	r2, [r7, #16]
 80009ba:	68fb      	ldr	r3, [r7, #12]
 80009bc:	4313      	orrs	r3, r2
 80009be:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80009c0:	4a19      	ldr	r2, [pc, #100]	; (8000a28 <HAL_GPIO_Init+0x2e0>)
 80009c2:	693b      	ldr	r3, [r7, #16]
 80009c4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80009c6:	4b18      	ldr	r3, [pc, #96]	; (8000a28 <HAL_GPIO_Init+0x2e0>)
 80009c8:	68db      	ldr	r3, [r3, #12]
 80009ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	43db      	mvns	r3, r3
 80009d0:	693a      	ldr	r2, [r7, #16]
 80009d2:	4013      	ands	r3, r2
 80009d4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80009d6:	683b      	ldr	r3, [r7, #0]
 80009d8:	685b      	ldr	r3, [r3, #4]
 80009da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d003      	beq.n	80009ea <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80009e2:	693a      	ldr	r2, [r7, #16]
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	4313      	orrs	r3, r2
 80009e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80009ea:	4a0f      	ldr	r2, [pc, #60]	; (8000a28 <HAL_GPIO_Init+0x2e0>)
 80009ec:	693b      	ldr	r3, [r7, #16]
 80009ee:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80009f0:	697b      	ldr	r3, [r7, #20]
 80009f2:	3301      	adds	r3, #1
 80009f4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80009f6:	683b      	ldr	r3, [r7, #0]
 80009f8:	681a      	ldr	r2, [r3, #0]
 80009fa:	697b      	ldr	r3, [r7, #20]
 80009fc:	fa22 f303 	lsr.w	r3, r2, r3
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	f47f aea9 	bne.w	8000758 <HAL_GPIO_Init+0x10>
  }
}
 8000a06:	bf00      	nop
 8000a08:	371c      	adds	r7, #28
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop
 8000a14:	40021000 	.word	0x40021000
 8000a18:	40010000 	.word	0x40010000
 8000a1c:	48000400 	.word	0x48000400
 8000a20:	48000800 	.word	0x48000800
 8000a24:	48000c00 	.word	0x48000c00
 8000a28:	40010400 	.word	0x40010400

08000a2c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8000a32:	af00      	add	r7, sp, #0
 8000a34:	1d3b      	adds	r3, r7, #4
 8000a36:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000a38:	1d3b      	adds	r3, r7, #4
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d102      	bne.n	8000a46 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8000a40:	2301      	movs	r3, #1
 8000a42:	f000 bef4 	b.w	800182e <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000a46:	1d3b      	adds	r3, r7, #4
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	f003 0301 	and.w	r3, r3, #1
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	f000 816a 	beq.w	8000d2a <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000a56:	4bb3      	ldr	r3, [pc, #716]	; (8000d24 <HAL_RCC_OscConfig+0x2f8>)
 8000a58:	685b      	ldr	r3, [r3, #4]
 8000a5a:	f003 030c 	and.w	r3, r3, #12
 8000a5e:	2b04      	cmp	r3, #4
 8000a60:	d00c      	beq.n	8000a7c <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000a62:	4bb0      	ldr	r3, [pc, #704]	; (8000d24 <HAL_RCC_OscConfig+0x2f8>)
 8000a64:	685b      	ldr	r3, [r3, #4]
 8000a66:	f003 030c 	and.w	r3, r3, #12
 8000a6a:	2b08      	cmp	r3, #8
 8000a6c:	d159      	bne.n	8000b22 <HAL_RCC_OscConfig+0xf6>
 8000a6e:	4bad      	ldr	r3, [pc, #692]	; (8000d24 <HAL_RCC_OscConfig+0x2f8>)
 8000a70:	685b      	ldr	r3, [r3, #4]
 8000a72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000a7a:	d152      	bne.n	8000b22 <HAL_RCC_OscConfig+0xf6>
 8000a7c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000a80:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a84:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8000a88:	fa93 f3a3 	rbit	r3, r3
 8000a8c:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000a90:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000a94:	fab3 f383 	clz	r3, r3
 8000a98:	b2db      	uxtb	r3, r3
 8000a9a:	095b      	lsrs	r3, r3, #5
 8000a9c:	b2db      	uxtb	r3, r3
 8000a9e:	f043 0301 	orr.w	r3, r3, #1
 8000aa2:	b2db      	uxtb	r3, r3
 8000aa4:	2b01      	cmp	r3, #1
 8000aa6:	d102      	bne.n	8000aae <HAL_RCC_OscConfig+0x82>
 8000aa8:	4b9e      	ldr	r3, [pc, #632]	; (8000d24 <HAL_RCC_OscConfig+0x2f8>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	e015      	b.n	8000ada <HAL_RCC_OscConfig+0xae>
 8000aae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ab2:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ab6:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8000aba:	fa93 f3a3 	rbit	r3, r3
 8000abe:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000ac2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ac6:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000aca:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8000ace:	fa93 f3a3 	rbit	r3, r3
 8000ad2:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8000ad6:	4b93      	ldr	r3, [pc, #588]	; (8000d24 <HAL_RCC_OscConfig+0x2f8>)
 8000ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ada:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000ade:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8000ae2:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000ae6:	fa92 f2a2 	rbit	r2, r2
 8000aea:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8000aee:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8000af2:	fab2 f282 	clz	r2, r2
 8000af6:	b2d2      	uxtb	r2, r2
 8000af8:	f042 0220 	orr.w	r2, r2, #32
 8000afc:	b2d2      	uxtb	r2, r2
 8000afe:	f002 021f 	and.w	r2, r2, #31
 8000b02:	2101      	movs	r1, #1
 8000b04:	fa01 f202 	lsl.w	r2, r1, r2
 8000b08:	4013      	ands	r3, r2
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	f000 810c 	beq.w	8000d28 <HAL_RCC_OscConfig+0x2fc>
 8000b10:	1d3b      	adds	r3, r7, #4
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	685b      	ldr	r3, [r3, #4]
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	f040 8106 	bne.w	8000d28 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8000b1c:	2301      	movs	r3, #1
 8000b1e:	f000 be86 	b.w	800182e <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b22:	1d3b      	adds	r3, r7, #4
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	685b      	ldr	r3, [r3, #4]
 8000b28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b2c:	d106      	bne.n	8000b3c <HAL_RCC_OscConfig+0x110>
 8000b2e:	4b7d      	ldr	r3, [pc, #500]	; (8000d24 <HAL_RCC_OscConfig+0x2f8>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	4a7c      	ldr	r2, [pc, #496]	; (8000d24 <HAL_RCC_OscConfig+0x2f8>)
 8000b34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b38:	6013      	str	r3, [r2, #0]
 8000b3a:	e030      	b.n	8000b9e <HAL_RCC_OscConfig+0x172>
 8000b3c:	1d3b      	adds	r3, r7, #4
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	685b      	ldr	r3, [r3, #4]
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d10c      	bne.n	8000b60 <HAL_RCC_OscConfig+0x134>
 8000b46:	4b77      	ldr	r3, [pc, #476]	; (8000d24 <HAL_RCC_OscConfig+0x2f8>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	4a76      	ldr	r2, [pc, #472]	; (8000d24 <HAL_RCC_OscConfig+0x2f8>)
 8000b4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b50:	6013      	str	r3, [r2, #0]
 8000b52:	4b74      	ldr	r3, [pc, #464]	; (8000d24 <HAL_RCC_OscConfig+0x2f8>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	4a73      	ldr	r2, [pc, #460]	; (8000d24 <HAL_RCC_OscConfig+0x2f8>)
 8000b58:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b5c:	6013      	str	r3, [r2, #0]
 8000b5e:	e01e      	b.n	8000b9e <HAL_RCC_OscConfig+0x172>
 8000b60:	1d3b      	adds	r3, r7, #4
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	685b      	ldr	r3, [r3, #4]
 8000b66:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000b6a:	d10c      	bne.n	8000b86 <HAL_RCC_OscConfig+0x15a>
 8000b6c:	4b6d      	ldr	r3, [pc, #436]	; (8000d24 <HAL_RCC_OscConfig+0x2f8>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4a6c      	ldr	r2, [pc, #432]	; (8000d24 <HAL_RCC_OscConfig+0x2f8>)
 8000b72:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b76:	6013      	str	r3, [r2, #0]
 8000b78:	4b6a      	ldr	r3, [pc, #424]	; (8000d24 <HAL_RCC_OscConfig+0x2f8>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	4a69      	ldr	r2, [pc, #420]	; (8000d24 <HAL_RCC_OscConfig+0x2f8>)
 8000b7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b82:	6013      	str	r3, [r2, #0]
 8000b84:	e00b      	b.n	8000b9e <HAL_RCC_OscConfig+0x172>
 8000b86:	4b67      	ldr	r3, [pc, #412]	; (8000d24 <HAL_RCC_OscConfig+0x2f8>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	4a66      	ldr	r2, [pc, #408]	; (8000d24 <HAL_RCC_OscConfig+0x2f8>)
 8000b8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b90:	6013      	str	r3, [r2, #0]
 8000b92:	4b64      	ldr	r3, [pc, #400]	; (8000d24 <HAL_RCC_OscConfig+0x2f8>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	4a63      	ldr	r2, [pc, #396]	; (8000d24 <HAL_RCC_OscConfig+0x2f8>)
 8000b98:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b9c:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000b9e:	4b61      	ldr	r3, [pc, #388]	; (8000d24 <HAL_RCC_OscConfig+0x2f8>)
 8000ba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ba2:	f023 020f 	bic.w	r2, r3, #15
 8000ba6:	1d3b      	adds	r3, r7, #4
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	689b      	ldr	r3, [r3, #8]
 8000bac:	495d      	ldr	r1, [pc, #372]	; (8000d24 <HAL_RCC_OscConfig+0x2f8>)
 8000bae:	4313      	orrs	r3, r2
 8000bb0:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000bb2:	1d3b      	adds	r3, r7, #4
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	685b      	ldr	r3, [r3, #4]
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d059      	beq.n	8000c70 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000bbc:	f7ff fcd2 	bl	8000564 <HAL_GetTick>
 8000bc0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000bc4:	e00a      	b.n	8000bdc <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000bc6:	f7ff fccd 	bl	8000564 <HAL_GetTick>
 8000bca:	4602      	mov	r2, r0
 8000bcc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000bd0:	1ad3      	subs	r3, r2, r3
 8000bd2:	2b64      	cmp	r3, #100	; 0x64
 8000bd4:	d902      	bls.n	8000bdc <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8000bd6:	2303      	movs	r3, #3
 8000bd8:	f000 be29 	b.w	800182e <HAL_RCC_OscConfig+0xe02>
 8000bdc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000be0:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000be4:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8000be8:	fa93 f3a3 	rbit	r3, r3
 8000bec:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8000bf0:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000bf4:	fab3 f383 	clz	r3, r3
 8000bf8:	b2db      	uxtb	r3, r3
 8000bfa:	095b      	lsrs	r3, r3, #5
 8000bfc:	b2db      	uxtb	r3, r3
 8000bfe:	f043 0301 	orr.w	r3, r3, #1
 8000c02:	b2db      	uxtb	r3, r3
 8000c04:	2b01      	cmp	r3, #1
 8000c06:	d102      	bne.n	8000c0e <HAL_RCC_OscConfig+0x1e2>
 8000c08:	4b46      	ldr	r3, [pc, #280]	; (8000d24 <HAL_RCC_OscConfig+0x2f8>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	e015      	b.n	8000c3a <HAL_RCC_OscConfig+0x20e>
 8000c0e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000c12:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c16:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8000c1a:	fa93 f3a3 	rbit	r3, r3
 8000c1e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8000c22:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000c26:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8000c2a:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8000c2e:	fa93 f3a3 	rbit	r3, r3
 8000c32:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8000c36:	4b3b      	ldr	r3, [pc, #236]	; (8000d24 <HAL_RCC_OscConfig+0x2f8>)
 8000c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c3a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000c3e:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8000c42:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8000c46:	fa92 f2a2 	rbit	r2, r2
 8000c4a:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8000c4e:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8000c52:	fab2 f282 	clz	r2, r2
 8000c56:	b2d2      	uxtb	r2, r2
 8000c58:	f042 0220 	orr.w	r2, r2, #32
 8000c5c:	b2d2      	uxtb	r2, r2
 8000c5e:	f002 021f 	and.w	r2, r2, #31
 8000c62:	2101      	movs	r1, #1
 8000c64:	fa01 f202 	lsl.w	r2, r1, r2
 8000c68:	4013      	ands	r3, r2
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d0ab      	beq.n	8000bc6 <HAL_RCC_OscConfig+0x19a>
 8000c6e:	e05c      	b.n	8000d2a <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c70:	f7ff fc78 	bl	8000564 <HAL_GetTick>
 8000c74:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c78:	e00a      	b.n	8000c90 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c7a:	f7ff fc73 	bl	8000564 <HAL_GetTick>
 8000c7e:	4602      	mov	r2, r0
 8000c80:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000c84:	1ad3      	subs	r3, r2, r3
 8000c86:	2b64      	cmp	r3, #100	; 0x64
 8000c88:	d902      	bls.n	8000c90 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8000c8a:	2303      	movs	r3, #3
 8000c8c:	f000 bdcf 	b.w	800182e <HAL_RCC_OscConfig+0xe02>
 8000c90:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000c94:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c98:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8000c9c:	fa93 f3a3 	rbit	r3, r3
 8000ca0:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8000ca4:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ca8:	fab3 f383 	clz	r3, r3
 8000cac:	b2db      	uxtb	r3, r3
 8000cae:	095b      	lsrs	r3, r3, #5
 8000cb0:	b2db      	uxtb	r3, r3
 8000cb2:	f043 0301 	orr.w	r3, r3, #1
 8000cb6:	b2db      	uxtb	r3, r3
 8000cb8:	2b01      	cmp	r3, #1
 8000cba:	d102      	bne.n	8000cc2 <HAL_RCC_OscConfig+0x296>
 8000cbc:	4b19      	ldr	r3, [pc, #100]	; (8000d24 <HAL_RCC_OscConfig+0x2f8>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	e015      	b.n	8000cee <HAL_RCC_OscConfig+0x2c2>
 8000cc2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000cc6:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cca:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8000cce:	fa93 f3a3 	rbit	r3, r3
 8000cd2:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8000cd6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000cda:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8000cde:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8000ce2:	fa93 f3a3 	rbit	r3, r3
 8000ce6:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8000cea:	4b0e      	ldr	r3, [pc, #56]	; (8000d24 <HAL_RCC_OscConfig+0x2f8>)
 8000cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cee:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000cf2:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8000cf6:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8000cfa:	fa92 f2a2 	rbit	r2, r2
 8000cfe:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8000d02:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8000d06:	fab2 f282 	clz	r2, r2
 8000d0a:	b2d2      	uxtb	r2, r2
 8000d0c:	f042 0220 	orr.w	r2, r2, #32
 8000d10:	b2d2      	uxtb	r2, r2
 8000d12:	f002 021f 	and.w	r2, r2, #31
 8000d16:	2101      	movs	r1, #1
 8000d18:	fa01 f202 	lsl.w	r2, r1, r2
 8000d1c:	4013      	ands	r3, r2
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d1ab      	bne.n	8000c7a <HAL_RCC_OscConfig+0x24e>
 8000d22:	e002      	b.n	8000d2a <HAL_RCC_OscConfig+0x2fe>
 8000d24:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d2a:	1d3b      	adds	r3, r7, #4
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	f003 0302 	and.w	r3, r3, #2
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	f000 816f 	beq.w	8001018 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000d3a:	4bd0      	ldr	r3, [pc, #832]	; (800107c <HAL_RCC_OscConfig+0x650>)
 8000d3c:	685b      	ldr	r3, [r3, #4]
 8000d3e:	f003 030c 	and.w	r3, r3, #12
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d00b      	beq.n	8000d5e <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000d46:	4bcd      	ldr	r3, [pc, #820]	; (800107c <HAL_RCC_OscConfig+0x650>)
 8000d48:	685b      	ldr	r3, [r3, #4]
 8000d4a:	f003 030c 	and.w	r3, r3, #12
 8000d4e:	2b08      	cmp	r3, #8
 8000d50:	d16c      	bne.n	8000e2c <HAL_RCC_OscConfig+0x400>
 8000d52:	4bca      	ldr	r3, [pc, #808]	; (800107c <HAL_RCC_OscConfig+0x650>)
 8000d54:	685b      	ldr	r3, [r3, #4]
 8000d56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d166      	bne.n	8000e2c <HAL_RCC_OscConfig+0x400>
 8000d5e:	2302      	movs	r3, #2
 8000d60:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d64:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8000d68:	fa93 f3a3 	rbit	r3, r3
 8000d6c:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8000d70:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d74:	fab3 f383 	clz	r3, r3
 8000d78:	b2db      	uxtb	r3, r3
 8000d7a:	095b      	lsrs	r3, r3, #5
 8000d7c:	b2db      	uxtb	r3, r3
 8000d7e:	f043 0301 	orr.w	r3, r3, #1
 8000d82:	b2db      	uxtb	r3, r3
 8000d84:	2b01      	cmp	r3, #1
 8000d86:	d102      	bne.n	8000d8e <HAL_RCC_OscConfig+0x362>
 8000d88:	4bbc      	ldr	r3, [pc, #752]	; (800107c <HAL_RCC_OscConfig+0x650>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	e013      	b.n	8000db6 <HAL_RCC_OscConfig+0x38a>
 8000d8e:	2302      	movs	r3, #2
 8000d90:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d94:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8000d98:	fa93 f3a3 	rbit	r3, r3
 8000d9c:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8000da0:	2302      	movs	r3, #2
 8000da2:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8000da6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8000daa:	fa93 f3a3 	rbit	r3, r3
 8000dae:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8000db2:	4bb2      	ldr	r3, [pc, #712]	; (800107c <HAL_RCC_OscConfig+0x650>)
 8000db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000db6:	2202      	movs	r2, #2
 8000db8:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8000dbc:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8000dc0:	fa92 f2a2 	rbit	r2, r2
 8000dc4:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8000dc8:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8000dcc:	fab2 f282 	clz	r2, r2
 8000dd0:	b2d2      	uxtb	r2, r2
 8000dd2:	f042 0220 	orr.w	r2, r2, #32
 8000dd6:	b2d2      	uxtb	r2, r2
 8000dd8:	f002 021f 	and.w	r2, r2, #31
 8000ddc:	2101      	movs	r1, #1
 8000dde:	fa01 f202 	lsl.w	r2, r1, r2
 8000de2:	4013      	ands	r3, r2
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d007      	beq.n	8000df8 <HAL_RCC_OscConfig+0x3cc>
 8000de8:	1d3b      	adds	r3, r7, #4
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	691b      	ldr	r3, [r3, #16]
 8000dee:	2b01      	cmp	r3, #1
 8000df0:	d002      	beq.n	8000df8 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8000df2:	2301      	movs	r3, #1
 8000df4:	f000 bd1b 	b.w	800182e <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000df8:	4ba0      	ldr	r3, [pc, #640]	; (800107c <HAL_RCC_OscConfig+0x650>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000e00:	1d3b      	adds	r3, r7, #4
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	695b      	ldr	r3, [r3, #20]
 8000e06:	21f8      	movs	r1, #248	; 0xf8
 8000e08:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e0c:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8000e10:	fa91 f1a1 	rbit	r1, r1
 8000e14:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8000e18:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8000e1c:	fab1 f181 	clz	r1, r1
 8000e20:	b2c9      	uxtb	r1, r1
 8000e22:	408b      	lsls	r3, r1
 8000e24:	4995      	ldr	r1, [pc, #596]	; (800107c <HAL_RCC_OscConfig+0x650>)
 8000e26:	4313      	orrs	r3, r2
 8000e28:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e2a:	e0f5      	b.n	8001018 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000e2c:	1d3b      	adds	r3, r7, #4
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	691b      	ldr	r3, [r3, #16]
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	f000 8085 	beq.w	8000f42 <HAL_RCC_OscConfig+0x516>
 8000e38:	2301      	movs	r3, #1
 8000e3a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e3e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8000e42:	fa93 f3a3 	rbit	r3, r3
 8000e46:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8000e4a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000e4e:	fab3 f383 	clz	r3, r3
 8000e52:	b2db      	uxtb	r3, r3
 8000e54:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000e58:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000e5c:	009b      	lsls	r3, r3, #2
 8000e5e:	461a      	mov	r2, r3
 8000e60:	2301      	movs	r3, #1
 8000e62:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e64:	f7ff fb7e 	bl	8000564 <HAL_GetTick>
 8000e68:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e6c:	e00a      	b.n	8000e84 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e6e:	f7ff fb79 	bl	8000564 <HAL_GetTick>
 8000e72:	4602      	mov	r2, r0
 8000e74:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000e78:	1ad3      	subs	r3, r2, r3
 8000e7a:	2b02      	cmp	r3, #2
 8000e7c:	d902      	bls.n	8000e84 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8000e7e:	2303      	movs	r3, #3
 8000e80:	f000 bcd5 	b.w	800182e <HAL_RCC_OscConfig+0xe02>
 8000e84:	2302      	movs	r3, #2
 8000e86:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e8a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8000e8e:	fa93 f3a3 	rbit	r3, r3
 8000e92:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8000e96:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e9a:	fab3 f383 	clz	r3, r3
 8000e9e:	b2db      	uxtb	r3, r3
 8000ea0:	095b      	lsrs	r3, r3, #5
 8000ea2:	b2db      	uxtb	r3, r3
 8000ea4:	f043 0301 	orr.w	r3, r3, #1
 8000ea8:	b2db      	uxtb	r3, r3
 8000eaa:	2b01      	cmp	r3, #1
 8000eac:	d102      	bne.n	8000eb4 <HAL_RCC_OscConfig+0x488>
 8000eae:	4b73      	ldr	r3, [pc, #460]	; (800107c <HAL_RCC_OscConfig+0x650>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	e013      	b.n	8000edc <HAL_RCC_OscConfig+0x4b0>
 8000eb4:	2302      	movs	r3, #2
 8000eb6:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000eba:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8000ebe:	fa93 f3a3 	rbit	r3, r3
 8000ec2:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8000ec6:	2302      	movs	r3, #2
 8000ec8:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8000ecc:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8000ed0:	fa93 f3a3 	rbit	r3, r3
 8000ed4:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8000ed8:	4b68      	ldr	r3, [pc, #416]	; (800107c <HAL_RCC_OscConfig+0x650>)
 8000eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000edc:	2202      	movs	r2, #2
 8000ede:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8000ee2:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8000ee6:	fa92 f2a2 	rbit	r2, r2
 8000eea:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8000eee:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8000ef2:	fab2 f282 	clz	r2, r2
 8000ef6:	b2d2      	uxtb	r2, r2
 8000ef8:	f042 0220 	orr.w	r2, r2, #32
 8000efc:	b2d2      	uxtb	r2, r2
 8000efe:	f002 021f 	and.w	r2, r2, #31
 8000f02:	2101      	movs	r1, #1
 8000f04:	fa01 f202 	lsl.w	r2, r1, r2
 8000f08:	4013      	ands	r3, r2
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d0af      	beq.n	8000e6e <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f0e:	4b5b      	ldr	r3, [pc, #364]	; (800107c <HAL_RCC_OscConfig+0x650>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000f16:	1d3b      	adds	r3, r7, #4
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	695b      	ldr	r3, [r3, #20]
 8000f1c:	21f8      	movs	r1, #248	; 0xf8
 8000f1e:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f22:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8000f26:	fa91 f1a1 	rbit	r1, r1
 8000f2a:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8000f2e:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8000f32:	fab1 f181 	clz	r1, r1
 8000f36:	b2c9      	uxtb	r1, r1
 8000f38:	408b      	lsls	r3, r1
 8000f3a:	4950      	ldr	r1, [pc, #320]	; (800107c <HAL_RCC_OscConfig+0x650>)
 8000f3c:	4313      	orrs	r3, r2
 8000f3e:	600b      	str	r3, [r1, #0]
 8000f40:	e06a      	b.n	8001018 <HAL_RCC_OscConfig+0x5ec>
 8000f42:	2301      	movs	r3, #1
 8000f44:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f48:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8000f4c:	fa93 f3a3 	rbit	r3, r3
 8000f50:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8000f54:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000f58:	fab3 f383 	clz	r3, r3
 8000f5c:	b2db      	uxtb	r3, r3
 8000f5e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000f62:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000f66:	009b      	lsls	r3, r3, #2
 8000f68:	461a      	mov	r2, r3
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f6e:	f7ff faf9 	bl	8000564 <HAL_GetTick>
 8000f72:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f76:	e00a      	b.n	8000f8e <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f78:	f7ff faf4 	bl	8000564 <HAL_GetTick>
 8000f7c:	4602      	mov	r2, r0
 8000f7e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000f82:	1ad3      	subs	r3, r2, r3
 8000f84:	2b02      	cmp	r3, #2
 8000f86:	d902      	bls.n	8000f8e <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8000f88:	2303      	movs	r3, #3
 8000f8a:	f000 bc50 	b.w	800182e <HAL_RCC_OscConfig+0xe02>
 8000f8e:	2302      	movs	r3, #2
 8000f90:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f94:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8000f98:	fa93 f3a3 	rbit	r3, r3
 8000f9c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8000fa0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000fa4:	fab3 f383 	clz	r3, r3
 8000fa8:	b2db      	uxtb	r3, r3
 8000faa:	095b      	lsrs	r3, r3, #5
 8000fac:	b2db      	uxtb	r3, r3
 8000fae:	f043 0301 	orr.w	r3, r3, #1
 8000fb2:	b2db      	uxtb	r3, r3
 8000fb4:	2b01      	cmp	r3, #1
 8000fb6:	d102      	bne.n	8000fbe <HAL_RCC_OscConfig+0x592>
 8000fb8:	4b30      	ldr	r3, [pc, #192]	; (800107c <HAL_RCC_OscConfig+0x650>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	e013      	b.n	8000fe6 <HAL_RCC_OscConfig+0x5ba>
 8000fbe:	2302      	movs	r3, #2
 8000fc0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fc4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8000fc8:	fa93 f3a3 	rbit	r3, r3
 8000fcc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8000fd0:	2302      	movs	r3, #2
 8000fd2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8000fd6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000fda:	fa93 f3a3 	rbit	r3, r3
 8000fde:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8000fe2:	4b26      	ldr	r3, [pc, #152]	; (800107c <HAL_RCC_OscConfig+0x650>)
 8000fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fe6:	2202      	movs	r2, #2
 8000fe8:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8000fec:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8000ff0:	fa92 f2a2 	rbit	r2, r2
 8000ff4:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8000ff8:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8000ffc:	fab2 f282 	clz	r2, r2
 8001000:	b2d2      	uxtb	r2, r2
 8001002:	f042 0220 	orr.w	r2, r2, #32
 8001006:	b2d2      	uxtb	r2, r2
 8001008:	f002 021f 	and.w	r2, r2, #31
 800100c:	2101      	movs	r1, #1
 800100e:	fa01 f202 	lsl.w	r2, r1, r2
 8001012:	4013      	ands	r3, r2
 8001014:	2b00      	cmp	r3, #0
 8001016:	d1af      	bne.n	8000f78 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001018:	1d3b      	adds	r3, r7, #4
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	f003 0308 	and.w	r3, r3, #8
 8001022:	2b00      	cmp	r3, #0
 8001024:	f000 80da 	beq.w	80011dc <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001028:	1d3b      	adds	r3, r7, #4
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	699b      	ldr	r3, [r3, #24]
 800102e:	2b00      	cmp	r3, #0
 8001030:	d069      	beq.n	8001106 <HAL_RCC_OscConfig+0x6da>
 8001032:	2301      	movs	r3, #1
 8001034:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001038:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800103c:	fa93 f3a3 	rbit	r3, r3
 8001040:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001044:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001048:	fab3 f383 	clz	r3, r3
 800104c:	b2db      	uxtb	r3, r3
 800104e:	461a      	mov	r2, r3
 8001050:	4b0b      	ldr	r3, [pc, #44]	; (8001080 <HAL_RCC_OscConfig+0x654>)
 8001052:	4413      	add	r3, r2
 8001054:	009b      	lsls	r3, r3, #2
 8001056:	461a      	mov	r2, r3
 8001058:	2301      	movs	r3, #1
 800105a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800105c:	f7ff fa82 	bl	8000564 <HAL_GetTick>
 8001060:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001064:	e00e      	b.n	8001084 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001066:	f7ff fa7d 	bl	8000564 <HAL_GetTick>
 800106a:	4602      	mov	r2, r0
 800106c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001070:	1ad3      	subs	r3, r2, r3
 8001072:	2b02      	cmp	r3, #2
 8001074:	d906      	bls.n	8001084 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8001076:	2303      	movs	r3, #3
 8001078:	e3d9      	b.n	800182e <HAL_RCC_OscConfig+0xe02>
 800107a:	bf00      	nop
 800107c:	40021000 	.word	0x40021000
 8001080:	10908120 	.word	0x10908120
 8001084:	2302      	movs	r3, #2
 8001086:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800108a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800108e:	fa93 f3a3 	rbit	r3, r3
 8001092:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001096:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800109a:	2202      	movs	r2, #2
 800109c:	601a      	str	r2, [r3, #0]
 800109e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	fa93 f2a3 	rbit	r2, r3
 80010a8:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80010ac:	601a      	str	r2, [r3, #0]
 80010ae:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80010b2:	2202      	movs	r2, #2
 80010b4:	601a      	str	r2, [r3, #0]
 80010b6:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	fa93 f2a3 	rbit	r2, r3
 80010c0:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80010c4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010c6:	4ba5      	ldr	r3, [pc, #660]	; (800135c <HAL_RCC_OscConfig+0x930>)
 80010c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80010ca:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80010ce:	2102      	movs	r1, #2
 80010d0:	6019      	str	r1, [r3, #0]
 80010d2:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	fa93 f1a3 	rbit	r1, r3
 80010dc:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80010e0:	6019      	str	r1, [r3, #0]
  return result;
 80010e2:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	fab3 f383 	clz	r3, r3
 80010ec:	b2db      	uxtb	r3, r3
 80010ee:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80010f2:	b2db      	uxtb	r3, r3
 80010f4:	f003 031f 	and.w	r3, r3, #31
 80010f8:	2101      	movs	r1, #1
 80010fa:	fa01 f303 	lsl.w	r3, r1, r3
 80010fe:	4013      	ands	r3, r2
 8001100:	2b00      	cmp	r3, #0
 8001102:	d0b0      	beq.n	8001066 <HAL_RCC_OscConfig+0x63a>
 8001104:	e06a      	b.n	80011dc <HAL_RCC_OscConfig+0x7b0>
 8001106:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800110a:	2201      	movs	r2, #1
 800110c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800110e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	fa93 f2a3 	rbit	r2, r3
 8001118:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800111c:	601a      	str	r2, [r3, #0]
  return result;
 800111e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001122:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001124:	fab3 f383 	clz	r3, r3
 8001128:	b2db      	uxtb	r3, r3
 800112a:	461a      	mov	r2, r3
 800112c:	4b8c      	ldr	r3, [pc, #560]	; (8001360 <HAL_RCC_OscConfig+0x934>)
 800112e:	4413      	add	r3, r2
 8001130:	009b      	lsls	r3, r3, #2
 8001132:	461a      	mov	r2, r3
 8001134:	2300      	movs	r3, #0
 8001136:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001138:	f7ff fa14 	bl	8000564 <HAL_GetTick>
 800113c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001140:	e009      	b.n	8001156 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001142:	f7ff fa0f 	bl	8000564 <HAL_GetTick>
 8001146:	4602      	mov	r2, r0
 8001148:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800114c:	1ad3      	subs	r3, r2, r3
 800114e:	2b02      	cmp	r3, #2
 8001150:	d901      	bls.n	8001156 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8001152:	2303      	movs	r3, #3
 8001154:	e36b      	b.n	800182e <HAL_RCC_OscConfig+0xe02>
 8001156:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800115a:	2202      	movs	r2, #2
 800115c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800115e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	fa93 f2a3 	rbit	r2, r3
 8001168:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800116c:	601a      	str	r2, [r3, #0]
 800116e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001172:	2202      	movs	r2, #2
 8001174:	601a      	str	r2, [r3, #0]
 8001176:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	fa93 f2a3 	rbit	r2, r3
 8001180:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001184:	601a      	str	r2, [r3, #0]
 8001186:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800118a:	2202      	movs	r2, #2
 800118c:	601a      	str	r2, [r3, #0]
 800118e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	fa93 f2a3 	rbit	r2, r3
 8001198:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800119c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800119e:	4b6f      	ldr	r3, [pc, #444]	; (800135c <HAL_RCC_OscConfig+0x930>)
 80011a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80011a2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80011a6:	2102      	movs	r1, #2
 80011a8:	6019      	str	r1, [r3, #0]
 80011aa:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	fa93 f1a3 	rbit	r1, r3
 80011b4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80011b8:	6019      	str	r1, [r3, #0]
  return result;
 80011ba:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	fab3 f383 	clz	r3, r3
 80011c4:	b2db      	uxtb	r3, r3
 80011c6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80011ca:	b2db      	uxtb	r3, r3
 80011cc:	f003 031f 	and.w	r3, r3, #31
 80011d0:	2101      	movs	r1, #1
 80011d2:	fa01 f303 	lsl.w	r3, r1, r3
 80011d6:	4013      	ands	r3, r2
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d1b2      	bne.n	8001142 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011dc:	1d3b      	adds	r3, r7, #4
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f003 0304 	and.w	r3, r3, #4
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	f000 8158 	beq.w	800149c <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 80011ec:	2300      	movs	r3, #0
 80011ee:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80011f2:	4b5a      	ldr	r3, [pc, #360]	; (800135c <HAL_RCC_OscConfig+0x930>)
 80011f4:	69db      	ldr	r3, [r3, #28]
 80011f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d112      	bne.n	8001224 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80011fe:	4b57      	ldr	r3, [pc, #348]	; (800135c <HAL_RCC_OscConfig+0x930>)
 8001200:	69db      	ldr	r3, [r3, #28]
 8001202:	4a56      	ldr	r2, [pc, #344]	; (800135c <HAL_RCC_OscConfig+0x930>)
 8001204:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001208:	61d3      	str	r3, [r2, #28]
 800120a:	4b54      	ldr	r3, [pc, #336]	; (800135c <HAL_RCC_OscConfig+0x930>)
 800120c:	69db      	ldr	r3, [r3, #28]
 800120e:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001212:	f107 0308 	add.w	r3, r7, #8
 8001216:	601a      	str	r2, [r3, #0]
 8001218:	f107 0308 	add.w	r3, r7, #8
 800121c:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800121e:	2301      	movs	r3, #1
 8001220:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001224:	4b4f      	ldr	r3, [pc, #316]	; (8001364 <HAL_RCC_OscConfig+0x938>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800122c:	2b00      	cmp	r3, #0
 800122e:	d11a      	bne.n	8001266 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001230:	4b4c      	ldr	r3, [pc, #304]	; (8001364 <HAL_RCC_OscConfig+0x938>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a4b      	ldr	r2, [pc, #300]	; (8001364 <HAL_RCC_OscConfig+0x938>)
 8001236:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800123a:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800123c:	f7ff f992 	bl	8000564 <HAL_GetTick>
 8001240:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001244:	e009      	b.n	800125a <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001246:	f7ff f98d 	bl	8000564 <HAL_GetTick>
 800124a:	4602      	mov	r2, r0
 800124c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001250:	1ad3      	subs	r3, r2, r3
 8001252:	2b64      	cmp	r3, #100	; 0x64
 8001254:	d901      	bls.n	800125a <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8001256:	2303      	movs	r3, #3
 8001258:	e2e9      	b.n	800182e <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800125a:	4b42      	ldr	r3, [pc, #264]	; (8001364 <HAL_RCC_OscConfig+0x938>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001262:	2b00      	cmp	r3, #0
 8001264:	d0ef      	beq.n	8001246 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001266:	1d3b      	adds	r3, r7, #4
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	68db      	ldr	r3, [r3, #12]
 800126c:	2b01      	cmp	r3, #1
 800126e:	d106      	bne.n	800127e <HAL_RCC_OscConfig+0x852>
 8001270:	4b3a      	ldr	r3, [pc, #232]	; (800135c <HAL_RCC_OscConfig+0x930>)
 8001272:	6a1b      	ldr	r3, [r3, #32]
 8001274:	4a39      	ldr	r2, [pc, #228]	; (800135c <HAL_RCC_OscConfig+0x930>)
 8001276:	f043 0301 	orr.w	r3, r3, #1
 800127a:	6213      	str	r3, [r2, #32]
 800127c:	e02f      	b.n	80012de <HAL_RCC_OscConfig+0x8b2>
 800127e:	1d3b      	adds	r3, r7, #4
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	68db      	ldr	r3, [r3, #12]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d10c      	bne.n	80012a2 <HAL_RCC_OscConfig+0x876>
 8001288:	4b34      	ldr	r3, [pc, #208]	; (800135c <HAL_RCC_OscConfig+0x930>)
 800128a:	6a1b      	ldr	r3, [r3, #32]
 800128c:	4a33      	ldr	r2, [pc, #204]	; (800135c <HAL_RCC_OscConfig+0x930>)
 800128e:	f023 0301 	bic.w	r3, r3, #1
 8001292:	6213      	str	r3, [r2, #32]
 8001294:	4b31      	ldr	r3, [pc, #196]	; (800135c <HAL_RCC_OscConfig+0x930>)
 8001296:	6a1b      	ldr	r3, [r3, #32]
 8001298:	4a30      	ldr	r2, [pc, #192]	; (800135c <HAL_RCC_OscConfig+0x930>)
 800129a:	f023 0304 	bic.w	r3, r3, #4
 800129e:	6213      	str	r3, [r2, #32]
 80012a0:	e01d      	b.n	80012de <HAL_RCC_OscConfig+0x8b2>
 80012a2:	1d3b      	adds	r3, r7, #4
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	68db      	ldr	r3, [r3, #12]
 80012a8:	2b05      	cmp	r3, #5
 80012aa:	d10c      	bne.n	80012c6 <HAL_RCC_OscConfig+0x89a>
 80012ac:	4b2b      	ldr	r3, [pc, #172]	; (800135c <HAL_RCC_OscConfig+0x930>)
 80012ae:	6a1b      	ldr	r3, [r3, #32]
 80012b0:	4a2a      	ldr	r2, [pc, #168]	; (800135c <HAL_RCC_OscConfig+0x930>)
 80012b2:	f043 0304 	orr.w	r3, r3, #4
 80012b6:	6213      	str	r3, [r2, #32]
 80012b8:	4b28      	ldr	r3, [pc, #160]	; (800135c <HAL_RCC_OscConfig+0x930>)
 80012ba:	6a1b      	ldr	r3, [r3, #32]
 80012bc:	4a27      	ldr	r2, [pc, #156]	; (800135c <HAL_RCC_OscConfig+0x930>)
 80012be:	f043 0301 	orr.w	r3, r3, #1
 80012c2:	6213      	str	r3, [r2, #32]
 80012c4:	e00b      	b.n	80012de <HAL_RCC_OscConfig+0x8b2>
 80012c6:	4b25      	ldr	r3, [pc, #148]	; (800135c <HAL_RCC_OscConfig+0x930>)
 80012c8:	6a1b      	ldr	r3, [r3, #32]
 80012ca:	4a24      	ldr	r2, [pc, #144]	; (800135c <HAL_RCC_OscConfig+0x930>)
 80012cc:	f023 0301 	bic.w	r3, r3, #1
 80012d0:	6213      	str	r3, [r2, #32]
 80012d2:	4b22      	ldr	r3, [pc, #136]	; (800135c <HAL_RCC_OscConfig+0x930>)
 80012d4:	6a1b      	ldr	r3, [r3, #32]
 80012d6:	4a21      	ldr	r2, [pc, #132]	; (800135c <HAL_RCC_OscConfig+0x930>)
 80012d8:	f023 0304 	bic.w	r3, r3, #4
 80012dc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80012de:	1d3b      	adds	r3, r7, #4
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	68db      	ldr	r3, [r3, #12]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d06b      	beq.n	80013c0 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012e8:	f7ff f93c 	bl	8000564 <HAL_GetTick>
 80012ec:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012f0:	e00b      	b.n	800130a <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012f2:	f7ff f937 	bl	8000564 <HAL_GetTick>
 80012f6:	4602      	mov	r2, r0
 80012f8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80012fc:	1ad3      	subs	r3, r2, r3
 80012fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001302:	4293      	cmp	r3, r2
 8001304:	d901      	bls.n	800130a <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8001306:	2303      	movs	r3, #3
 8001308:	e291      	b.n	800182e <HAL_RCC_OscConfig+0xe02>
 800130a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800130e:	2202      	movs	r2, #2
 8001310:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001312:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	fa93 f2a3 	rbit	r2, r3
 800131c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001320:	601a      	str	r2, [r3, #0]
 8001322:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001326:	2202      	movs	r2, #2
 8001328:	601a      	str	r2, [r3, #0]
 800132a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	fa93 f2a3 	rbit	r2, r3
 8001334:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001338:	601a      	str	r2, [r3, #0]
  return result;
 800133a:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800133e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001340:	fab3 f383 	clz	r3, r3
 8001344:	b2db      	uxtb	r3, r3
 8001346:	095b      	lsrs	r3, r3, #5
 8001348:	b2db      	uxtb	r3, r3
 800134a:	f043 0302 	orr.w	r3, r3, #2
 800134e:	b2db      	uxtb	r3, r3
 8001350:	2b02      	cmp	r3, #2
 8001352:	d109      	bne.n	8001368 <HAL_RCC_OscConfig+0x93c>
 8001354:	4b01      	ldr	r3, [pc, #4]	; (800135c <HAL_RCC_OscConfig+0x930>)
 8001356:	6a1b      	ldr	r3, [r3, #32]
 8001358:	e014      	b.n	8001384 <HAL_RCC_OscConfig+0x958>
 800135a:	bf00      	nop
 800135c:	40021000 	.word	0x40021000
 8001360:	10908120 	.word	0x10908120
 8001364:	40007000 	.word	0x40007000
 8001368:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800136c:	2202      	movs	r2, #2
 800136e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001370:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	fa93 f2a3 	rbit	r2, r3
 800137a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800137e:	601a      	str	r2, [r3, #0]
 8001380:	4bbb      	ldr	r3, [pc, #748]	; (8001670 <HAL_RCC_OscConfig+0xc44>)
 8001382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001384:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001388:	2102      	movs	r1, #2
 800138a:	6011      	str	r1, [r2, #0]
 800138c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001390:	6812      	ldr	r2, [r2, #0]
 8001392:	fa92 f1a2 	rbit	r1, r2
 8001396:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800139a:	6011      	str	r1, [r2, #0]
  return result;
 800139c:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80013a0:	6812      	ldr	r2, [r2, #0]
 80013a2:	fab2 f282 	clz	r2, r2
 80013a6:	b2d2      	uxtb	r2, r2
 80013a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80013ac:	b2d2      	uxtb	r2, r2
 80013ae:	f002 021f 	and.w	r2, r2, #31
 80013b2:	2101      	movs	r1, #1
 80013b4:	fa01 f202 	lsl.w	r2, r1, r2
 80013b8:	4013      	ands	r3, r2
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d099      	beq.n	80012f2 <HAL_RCC_OscConfig+0x8c6>
 80013be:	e063      	b.n	8001488 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013c0:	f7ff f8d0 	bl	8000564 <HAL_GetTick>
 80013c4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013c8:	e00b      	b.n	80013e2 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013ca:	f7ff f8cb 	bl	8000564 <HAL_GetTick>
 80013ce:	4602      	mov	r2, r0
 80013d0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80013d4:	1ad3      	subs	r3, r2, r3
 80013d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80013da:	4293      	cmp	r3, r2
 80013dc:	d901      	bls.n	80013e2 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 80013de:	2303      	movs	r3, #3
 80013e0:	e225      	b.n	800182e <HAL_RCC_OscConfig+0xe02>
 80013e2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80013e6:	2202      	movs	r2, #2
 80013e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013ea:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	fa93 f2a3 	rbit	r2, r3
 80013f4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80013f8:	601a      	str	r2, [r3, #0]
 80013fa:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80013fe:	2202      	movs	r2, #2
 8001400:	601a      	str	r2, [r3, #0]
 8001402:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	fa93 f2a3 	rbit	r2, r3
 800140c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001410:	601a      	str	r2, [r3, #0]
  return result;
 8001412:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001416:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001418:	fab3 f383 	clz	r3, r3
 800141c:	b2db      	uxtb	r3, r3
 800141e:	095b      	lsrs	r3, r3, #5
 8001420:	b2db      	uxtb	r3, r3
 8001422:	f043 0302 	orr.w	r3, r3, #2
 8001426:	b2db      	uxtb	r3, r3
 8001428:	2b02      	cmp	r3, #2
 800142a:	d102      	bne.n	8001432 <HAL_RCC_OscConfig+0xa06>
 800142c:	4b90      	ldr	r3, [pc, #576]	; (8001670 <HAL_RCC_OscConfig+0xc44>)
 800142e:	6a1b      	ldr	r3, [r3, #32]
 8001430:	e00d      	b.n	800144e <HAL_RCC_OscConfig+0xa22>
 8001432:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001436:	2202      	movs	r2, #2
 8001438:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800143a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	fa93 f2a3 	rbit	r2, r3
 8001444:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001448:	601a      	str	r2, [r3, #0]
 800144a:	4b89      	ldr	r3, [pc, #548]	; (8001670 <HAL_RCC_OscConfig+0xc44>)
 800144c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800144e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001452:	2102      	movs	r1, #2
 8001454:	6011      	str	r1, [r2, #0]
 8001456:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800145a:	6812      	ldr	r2, [r2, #0]
 800145c:	fa92 f1a2 	rbit	r1, r2
 8001460:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001464:	6011      	str	r1, [r2, #0]
  return result;
 8001466:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800146a:	6812      	ldr	r2, [r2, #0]
 800146c:	fab2 f282 	clz	r2, r2
 8001470:	b2d2      	uxtb	r2, r2
 8001472:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001476:	b2d2      	uxtb	r2, r2
 8001478:	f002 021f 	and.w	r2, r2, #31
 800147c:	2101      	movs	r1, #1
 800147e:	fa01 f202 	lsl.w	r2, r1, r2
 8001482:	4013      	ands	r3, r2
 8001484:	2b00      	cmp	r3, #0
 8001486:	d1a0      	bne.n	80013ca <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001488:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 800148c:	2b01      	cmp	r3, #1
 800148e:	d105      	bne.n	800149c <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001490:	4b77      	ldr	r3, [pc, #476]	; (8001670 <HAL_RCC_OscConfig+0xc44>)
 8001492:	69db      	ldr	r3, [r3, #28]
 8001494:	4a76      	ldr	r2, [pc, #472]	; (8001670 <HAL_RCC_OscConfig+0xc44>)
 8001496:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800149a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800149c:	1d3b      	adds	r3, r7, #4
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	69db      	ldr	r3, [r3, #28]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	f000 81c2 	beq.w	800182c <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80014a8:	4b71      	ldr	r3, [pc, #452]	; (8001670 <HAL_RCC_OscConfig+0xc44>)
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	f003 030c 	and.w	r3, r3, #12
 80014b0:	2b08      	cmp	r3, #8
 80014b2:	f000 819c 	beq.w	80017ee <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014b6:	1d3b      	adds	r3, r7, #4
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	69db      	ldr	r3, [r3, #28]
 80014bc:	2b02      	cmp	r3, #2
 80014be:	f040 8114 	bne.w	80016ea <HAL_RCC_OscConfig+0xcbe>
 80014c2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80014c6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80014ca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014cc:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	fa93 f2a3 	rbit	r2, r3
 80014d6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80014da:	601a      	str	r2, [r3, #0]
  return result;
 80014dc:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80014e0:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014e2:	fab3 f383 	clz	r3, r3
 80014e6:	b2db      	uxtb	r3, r3
 80014e8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80014ec:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80014f0:	009b      	lsls	r3, r3, #2
 80014f2:	461a      	mov	r2, r3
 80014f4:	2300      	movs	r3, #0
 80014f6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014f8:	f7ff f834 	bl	8000564 <HAL_GetTick>
 80014fc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001500:	e009      	b.n	8001516 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001502:	f7ff f82f 	bl	8000564 <HAL_GetTick>
 8001506:	4602      	mov	r2, r0
 8001508:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800150c:	1ad3      	subs	r3, r2, r3
 800150e:	2b02      	cmp	r3, #2
 8001510:	d901      	bls.n	8001516 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8001512:	2303      	movs	r3, #3
 8001514:	e18b      	b.n	800182e <HAL_RCC_OscConfig+0xe02>
 8001516:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800151a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800151e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001520:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	fa93 f2a3 	rbit	r2, r3
 800152a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800152e:	601a      	str	r2, [r3, #0]
  return result;
 8001530:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001534:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001536:	fab3 f383 	clz	r3, r3
 800153a:	b2db      	uxtb	r3, r3
 800153c:	095b      	lsrs	r3, r3, #5
 800153e:	b2db      	uxtb	r3, r3
 8001540:	f043 0301 	orr.w	r3, r3, #1
 8001544:	b2db      	uxtb	r3, r3
 8001546:	2b01      	cmp	r3, #1
 8001548:	d102      	bne.n	8001550 <HAL_RCC_OscConfig+0xb24>
 800154a:	4b49      	ldr	r3, [pc, #292]	; (8001670 <HAL_RCC_OscConfig+0xc44>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	e01b      	b.n	8001588 <HAL_RCC_OscConfig+0xb5c>
 8001550:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001554:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001558:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800155a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	fa93 f2a3 	rbit	r2, r3
 8001564:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001568:	601a      	str	r2, [r3, #0]
 800156a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800156e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001572:	601a      	str	r2, [r3, #0]
 8001574:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	fa93 f2a3 	rbit	r2, r3
 800157e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001582:	601a      	str	r2, [r3, #0]
 8001584:	4b3a      	ldr	r3, [pc, #232]	; (8001670 <HAL_RCC_OscConfig+0xc44>)
 8001586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001588:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800158c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001590:	6011      	str	r1, [r2, #0]
 8001592:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001596:	6812      	ldr	r2, [r2, #0]
 8001598:	fa92 f1a2 	rbit	r1, r2
 800159c:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80015a0:	6011      	str	r1, [r2, #0]
  return result;
 80015a2:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80015a6:	6812      	ldr	r2, [r2, #0]
 80015a8:	fab2 f282 	clz	r2, r2
 80015ac:	b2d2      	uxtb	r2, r2
 80015ae:	f042 0220 	orr.w	r2, r2, #32
 80015b2:	b2d2      	uxtb	r2, r2
 80015b4:	f002 021f 	and.w	r2, r2, #31
 80015b8:	2101      	movs	r1, #1
 80015ba:	fa01 f202 	lsl.w	r2, r1, r2
 80015be:	4013      	ands	r3, r2
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d19e      	bne.n	8001502 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80015c4:	4b2a      	ldr	r3, [pc, #168]	; (8001670 <HAL_RCC_OscConfig+0xc44>)
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80015cc:	1d3b      	adds	r3, r7, #4
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80015d2:	1d3b      	adds	r3, r7, #4
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	6a1b      	ldr	r3, [r3, #32]
 80015d8:	430b      	orrs	r3, r1
 80015da:	4925      	ldr	r1, [pc, #148]	; (8001670 <HAL_RCC_OscConfig+0xc44>)
 80015dc:	4313      	orrs	r3, r2
 80015de:	604b      	str	r3, [r1, #4]
 80015e0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80015e4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80015e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015ea:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	fa93 f2a3 	rbit	r2, r3
 80015f4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80015f8:	601a      	str	r2, [r3, #0]
  return result;
 80015fa:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80015fe:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001600:	fab3 f383 	clz	r3, r3
 8001604:	b2db      	uxtb	r3, r3
 8001606:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800160a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800160e:	009b      	lsls	r3, r3, #2
 8001610:	461a      	mov	r2, r3
 8001612:	2301      	movs	r3, #1
 8001614:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001616:	f7fe ffa5 	bl	8000564 <HAL_GetTick>
 800161a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800161e:	e009      	b.n	8001634 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001620:	f7fe ffa0 	bl	8000564 <HAL_GetTick>
 8001624:	4602      	mov	r2, r0
 8001626:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800162a:	1ad3      	subs	r3, r2, r3
 800162c:	2b02      	cmp	r3, #2
 800162e:	d901      	bls.n	8001634 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8001630:	2303      	movs	r3, #3
 8001632:	e0fc      	b.n	800182e <HAL_RCC_OscConfig+0xe02>
 8001634:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001638:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800163c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800163e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	fa93 f2a3 	rbit	r2, r3
 8001648:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800164c:	601a      	str	r2, [r3, #0]
  return result;
 800164e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001652:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001654:	fab3 f383 	clz	r3, r3
 8001658:	b2db      	uxtb	r3, r3
 800165a:	095b      	lsrs	r3, r3, #5
 800165c:	b2db      	uxtb	r3, r3
 800165e:	f043 0301 	orr.w	r3, r3, #1
 8001662:	b2db      	uxtb	r3, r3
 8001664:	2b01      	cmp	r3, #1
 8001666:	d105      	bne.n	8001674 <HAL_RCC_OscConfig+0xc48>
 8001668:	4b01      	ldr	r3, [pc, #4]	; (8001670 <HAL_RCC_OscConfig+0xc44>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	e01e      	b.n	80016ac <HAL_RCC_OscConfig+0xc80>
 800166e:	bf00      	nop
 8001670:	40021000 	.word	0x40021000
 8001674:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001678:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800167c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800167e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	fa93 f2a3 	rbit	r2, r3
 8001688:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800168c:	601a      	str	r2, [r3, #0]
 800168e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001692:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001696:	601a      	str	r2, [r3, #0]
 8001698:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	fa93 f2a3 	rbit	r2, r3
 80016a2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80016a6:	601a      	str	r2, [r3, #0]
 80016a8:	4b63      	ldr	r3, [pc, #396]	; (8001838 <HAL_RCC_OscConfig+0xe0c>)
 80016aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ac:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80016b0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80016b4:	6011      	str	r1, [r2, #0]
 80016b6:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80016ba:	6812      	ldr	r2, [r2, #0]
 80016bc:	fa92 f1a2 	rbit	r1, r2
 80016c0:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80016c4:	6011      	str	r1, [r2, #0]
  return result;
 80016c6:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80016ca:	6812      	ldr	r2, [r2, #0]
 80016cc:	fab2 f282 	clz	r2, r2
 80016d0:	b2d2      	uxtb	r2, r2
 80016d2:	f042 0220 	orr.w	r2, r2, #32
 80016d6:	b2d2      	uxtb	r2, r2
 80016d8:	f002 021f 	and.w	r2, r2, #31
 80016dc:	2101      	movs	r1, #1
 80016de:	fa01 f202 	lsl.w	r2, r1, r2
 80016e2:	4013      	ands	r3, r2
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d09b      	beq.n	8001620 <HAL_RCC_OscConfig+0xbf4>
 80016e8:	e0a0      	b.n	800182c <HAL_RCC_OscConfig+0xe00>
 80016ea:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80016ee:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80016f2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016f4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	fa93 f2a3 	rbit	r2, r3
 80016fe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001702:	601a      	str	r2, [r3, #0]
  return result;
 8001704:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001708:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800170a:	fab3 f383 	clz	r3, r3
 800170e:	b2db      	uxtb	r3, r3
 8001710:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001714:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001718:	009b      	lsls	r3, r3, #2
 800171a:	461a      	mov	r2, r3
 800171c:	2300      	movs	r3, #0
 800171e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001720:	f7fe ff20 	bl	8000564 <HAL_GetTick>
 8001724:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001728:	e009      	b.n	800173e <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800172a:	f7fe ff1b 	bl	8000564 <HAL_GetTick>
 800172e:	4602      	mov	r2, r0
 8001730:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001734:	1ad3      	subs	r3, r2, r3
 8001736:	2b02      	cmp	r3, #2
 8001738:	d901      	bls.n	800173e <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 800173a:	2303      	movs	r3, #3
 800173c:	e077      	b.n	800182e <HAL_RCC_OscConfig+0xe02>
 800173e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001742:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001746:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001748:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	fa93 f2a3 	rbit	r2, r3
 8001752:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001756:	601a      	str	r2, [r3, #0]
  return result;
 8001758:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800175c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800175e:	fab3 f383 	clz	r3, r3
 8001762:	b2db      	uxtb	r3, r3
 8001764:	095b      	lsrs	r3, r3, #5
 8001766:	b2db      	uxtb	r3, r3
 8001768:	f043 0301 	orr.w	r3, r3, #1
 800176c:	b2db      	uxtb	r3, r3
 800176e:	2b01      	cmp	r3, #1
 8001770:	d102      	bne.n	8001778 <HAL_RCC_OscConfig+0xd4c>
 8001772:	4b31      	ldr	r3, [pc, #196]	; (8001838 <HAL_RCC_OscConfig+0xe0c>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	e01b      	b.n	80017b0 <HAL_RCC_OscConfig+0xd84>
 8001778:	f107 0320 	add.w	r3, r7, #32
 800177c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001780:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001782:	f107 0320 	add.w	r3, r7, #32
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	fa93 f2a3 	rbit	r2, r3
 800178c:	f107 031c 	add.w	r3, r7, #28
 8001790:	601a      	str	r2, [r3, #0]
 8001792:	f107 0318 	add.w	r3, r7, #24
 8001796:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800179a:	601a      	str	r2, [r3, #0]
 800179c:	f107 0318 	add.w	r3, r7, #24
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	fa93 f2a3 	rbit	r2, r3
 80017a6:	f107 0314 	add.w	r3, r7, #20
 80017aa:	601a      	str	r2, [r3, #0]
 80017ac:	4b22      	ldr	r3, [pc, #136]	; (8001838 <HAL_RCC_OscConfig+0xe0c>)
 80017ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017b0:	f107 0210 	add.w	r2, r7, #16
 80017b4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80017b8:	6011      	str	r1, [r2, #0]
 80017ba:	f107 0210 	add.w	r2, r7, #16
 80017be:	6812      	ldr	r2, [r2, #0]
 80017c0:	fa92 f1a2 	rbit	r1, r2
 80017c4:	f107 020c 	add.w	r2, r7, #12
 80017c8:	6011      	str	r1, [r2, #0]
  return result;
 80017ca:	f107 020c 	add.w	r2, r7, #12
 80017ce:	6812      	ldr	r2, [r2, #0]
 80017d0:	fab2 f282 	clz	r2, r2
 80017d4:	b2d2      	uxtb	r2, r2
 80017d6:	f042 0220 	orr.w	r2, r2, #32
 80017da:	b2d2      	uxtb	r2, r2
 80017dc:	f002 021f 	and.w	r2, r2, #31
 80017e0:	2101      	movs	r1, #1
 80017e2:	fa01 f202 	lsl.w	r2, r1, r2
 80017e6:	4013      	ands	r3, r2
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d19e      	bne.n	800172a <HAL_RCC_OscConfig+0xcfe>
 80017ec:	e01e      	b.n	800182c <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80017ee:	1d3b      	adds	r3, r7, #4
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	69db      	ldr	r3, [r3, #28]
 80017f4:	2b01      	cmp	r3, #1
 80017f6:	d101      	bne.n	80017fc <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 80017f8:	2301      	movs	r3, #1
 80017fa:	e018      	b.n	800182e <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80017fc:	4b0e      	ldr	r3, [pc, #56]	; (8001838 <HAL_RCC_OscConfig+0xe0c>)
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001804:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001808:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800180c:	1d3b      	adds	r3, r7, #4
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	6a1b      	ldr	r3, [r3, #32]
 8001812:	429a      	cmp	r2, r3
 8001814:	d108      	bne.n	8001828 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001816:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800181a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800181e:	1d3b      	adds	r3, r7, #4
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001824:	429a      	cmp	r2, r3
 8001826:	d001      	beq.n	800182c <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8001828:	2301      	movs	r3, #1
 800182a:	e000      	b.n	800182e <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 800182c:	2300      	movs	r3, #0
}
 800182e:	4618      	mov	r0, r3
 8001830:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}
 8001838:	40021000 	.word	0x40021000

0800183c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b09e      	sub	sp, #120	; 0x78
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
 8001844:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001846:	2300      	movs	r3, #0
 8001848:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d101      	bne.n	8001854 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001850:	2301      	movs	r3, #1
 8001852:	e162      	b.n	8001b1a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001854:	4b90      	ldr	r3, [pc, #576]	; (8001a98 <HAL_RCC_ClockConfig+0x25c>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f003 0307 	and.w	r3, r3, #7
 800185c:	683a      	ldr	r2, [r7, #0]
 800185e:	429a      	cmp	r2, r3
 8001860:	d910      	bls.n	8001884 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001862:	4b8d      	ldr	r3, [pc, #564]	; (8001a98 <HAL_RCC_ClockConfig+0x25c>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f023 0207 	bic.w	r2, r3, #7
 800186a:	498b      	ldr	r1, [pc, #556]	; (8001a98 <HAL_RCC_ClockConfig+0x25c>)
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	4313      	orrs	r3, r2
 8001870:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001872:	4b89      	ldr	r3, [pc, #548]	; (8001a98 <HAL_RCC_ClockConfig+0x25c>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f003 0307 	and.w	r3, r3, #7
 800187a:	683a      	ldr	r2, [r7, #0]
 800187c:	429a      	cmp	r2, r3
 800187e:	d001      	beq.n	8001884 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001880:	2301      	movs	r3, #1
 8001882:	e14a      	b.n	8001b1a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f003 0302 	and.w	r3, r3, #2
 800188c:	2b00      	cmp	r3, #0
 800188e:	d008      	beq.n	80018a2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001890:	4b82      	ldr	r3, [pc, #520]	; (8001a9c <HAL_RCC_ClockConfig+0x260>)
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	689b      	ldr	r3, [r3, #8]
 800189c:	497f      	ldr	r1, [pc, #508]	; (8001a9c <HAL_RCC_ClockConfig+0x260>)
 800189e:	4313      	orrs	r3, r2
 80018a0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f003 0301 	and.w	r3, r3, #1
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	f000 80dc 	beq.w	8001a68 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	2b01      	cmp	r3, #1
 80018b6:	d13c      	bne.n	8001932 <HAL_RCC_ClockConfig+0xf6>
 80018b8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80018bc:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80018c0:	fa93 f3a3 	rbit	r3, r3
 80018c4:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80018c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018c8:	fab3 f383 	clz	r3, r3
 80018cc:	b2db      	uxtb	r3, r3
 80018ce:	095b      	lsrs	r3, r3, #5
 80018d0:	b2db      	uxtb	r3, r3
 80018d2:	f043 0301 	orr.w	r3, r3, #1
 80018d6:	b2db      	uxtb	r3, r3
 80018d8:	2b01      	cmp	r3, #1
 80018da:	d102      	bne.n	80018e2 <HAL_RCC_ClockConfig+0xa6>
 80018dc:	4b6f      	ldr	r3, [pc, #444]	; (8001a9c <HAL_RCC_ClockConfig+0x260>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	e00f      	b.n	8001902 <HAL_RCC_ClockConfig+0xc6>
 80018e2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80018e6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018e8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80018ea:	fa93 f3a3 	rbit	r3, r3
 80018ee:	667b      	str	r3, [r7, #100]	; 0x64
 80018f0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80018f4:	663b      	str	r3, [r7, #96]	; 0x60
 80018f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80018f8:	fa93 f3a3 	rbit	r3, r3
 80018fc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80018fe:	4b67      	ldr	r3, [pc, #412]	; (8001a9c <HAL_RCC_ClockConfig+0x260>)
 8001900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001902:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001906:	65ba      	str	r2, [r7, #88]	; 0x58
 8001908:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800190a:	fa92 f2a2 	rbit	r2, r2
 800190e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001910:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001912:	fab2 f282 	clz	r2, r2
 8001916:	b2d2      	uxtb	r2, r2
 8001918:	f042 0220 	orr.w	r2, r2, #32
 800191c:	b2d2      	uxtb	r2, r2
 800191e:	f002 021f 	and.w	r2, r2, #31
 8001922:	2101      	movs	r1, #1
 8001924:	fa01 f202 	lsl.w	r2, r1, r2
 8001928:	4013      	ands	r3, r2
 800192a:	2b00      	cmp	r3, #0
 800192c:	d17b      	bne.n	8001a26 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800192e:	2301      	movs	r3, #1
 8001930:	e0f3      	b.n	8001b1a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	2b02      	cmp	r3, #2
 8001938:	d13c      	bne.n	80019b4 <HAL_RCC_ClockConfig+0x178>
 800193a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800193e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001940:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001942:	fa93 f3a3 	rbit	r3, r3
 8001946:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001948:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800194a:	fab3 f383 	clz	r3, r3
 800194e:	b2db      	uxtb	r3, r3
 8001950:	095b      	lsrs	r3, r3, #5
 8001952:	b2db      	uxtb	r3, r3
 8001954:	f043 0301 	orr.w	r3, r3, #1
 8001958:	b2db      	uxtb	r3, r3
 800195a:	2b01      	cmp	r3, #1
 800195c:	d102      	bne.n	8001964 <HAL_RCC_ClockConfig+0x128>
 800195e:	4b4f      	ldr	r3, [pc, #316]	; (8001a9c <HAL_RCC_ClockConfig+0x260>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	e00f      	b.n	8001984 <HAL_RCC_ClockConfig+0x148>
 8001964:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001968:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800196a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800196c:	fa93 f3a3 	rbit	r3, r3
 8001970:	647b      	str	r3, [r7, #68]	; 0x44
 8001972:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001976:	643b      	str	r3, [r7, #64]	; 0x40
 8001978:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800197a:	fa93 f3a3 	rbit	r3, r3
 800197e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001980:	4b46      	ldr	r3, [pc, #280]	; (8001a9c <HAL_RCC_ClockConfig+0x260>)
 8001982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001984:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001988:	63ba      	str	r2, [r7, #56]	; 0x38
 800198a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800198c:	fa92 f2a2 	rbit	r2, r2
 8001990:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001992:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001994:	fab2 f282 	clz	r2, r2
 8001998:	b2d2      	uxtb	r2, r2
 800199a:	f042 0220 	orr.w	r2, r2, #32
 800199e:	b2d2      	uxtb	r2, r2
 80019a0:	f002 021f 	and.w	r2, r2, #31
 80019a4:	2101      	movs	r1, #1
 80019a6:	fa01 f202 	lsl.w	r2, r1, r2
 80019aa:	4013      	ands	r3, r2
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d13a      	bne.n	8001a26 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80019b0:	2301      	movs	r3, #1
 80019b2:	e0b2      	b.n	8001b1a <HAL_RCC_ClockConfig+0x2de>
 80019b4:	2302      	movs	r3, #2
 80019b6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019ba:	fa93 f3a3 	rbit	r3, r3
 80019be:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80019c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019c2:	fab3 f383 	clz	r3, r3
 80019c6:	b2db      	uxtb	r3, r3
 80019c8:	095b      	lsrs	r3, r3, #5
 80019ca:	b2db      	uxtb	r3, r3
 80019cc:	f043 0301 	orr.w	r3, r3, #1
 80019d0:	b2db      	uxtb	r3, r3
 80019d2:	2b01      	cmp	r3, #1
 80019d4:	d102      	bne.n	80019dc <HAL_RCC_ClockConfig+0x1a0>
 80019d6:	4b31      	ldr	r3, [pc, #196]	; (8001a9c <HAL_RCC_ClockConfig+0x260>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	e00d      	b.n	80019f8 <HAL_RCC_ClockConfig+0x1bc>
 80019dc:	2302      	movs	r3, #2
 80019de:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019e2:	fa93 f3a3 	rbit	r3, r3
 80019e6:	627b      	str	r3, [r7, #36]	; 0x24
 80019e8:	2302      	movs	r3, #2
 80019ea:	623b      	str	r3, [r7, #32]
 80019ec:	6a3b      	ldr	r3, [r7, #32]
 80019ee:	fa93 f3a3 	rbit	r3, r3
 80019f2:	61fb      	str	r3, [r7, #28]
 80019f4:	4b29      	ldr	r3, [pc, #164]	; (8001a9c <HAL_RCC_ClockConfig+0x260>)
 80019f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019f8:	2202      	movs	r2, #2
 80019fa:	61ba      	str	r2, [r7, #24]
 80019fc:	69ba      	ldr	r2, [r7, #24]
 80019fe:	fa92 f2a2 	rbit	r2, r2
 8001a02:	617a      	str	r2, [r7, #20]
  return result;
 8001a04:	697a      	ldr	r2, [r7, #20]
 8001a06:	fab2 f282 	clz	r2, r2
 8001a0a:	b2d2      	uxtb	r2, r2
 8001a0c:	f042 0220 	orr.w	r2, r2, #32
 8001a10:	b2d2      	uxtb	r2, r2
 8001a12:	f002 021f 	and.w	r2, r2, #31
 8001a16:	2101      	movs	r1, #1
 8001a18:	fa01 f202 	lsl.w	r2, r1, r2
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d101      	bne.n	8001a26 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001a22:	2301      	movs	r3, #1
 8001a24:	e079      	b.n	8001b1a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a26:	4b1d      	ldr	r3, [pc, #116]	; (8001a9c <HAL_RCC_ClockConfig+0x260>)
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	f023 0203 	bic.w	r2, r3, #3
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	491a      	ldr	r1, [pc, #104]	; (8001a9c <HAL_RCC_ClockConfig+0x260>)
 8001a34:	4313      	orrs	r3, r2
 8001a36:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a38:	f7fe fd94 	bl	8000564 <HAL_GetTick>
 8001a3c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a3e:	e00a      	b.n	8001a56 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a40:	f7fe fd90 	bl	8000564 <HAL_GetTick>
 8001a44:	4602      	mov	r2, r0
 8001a46:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001a48:	1ad3      	subs	r3, r2, r3
 8001a4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d901      	bls.n	8001a56 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8001a52:	2303      	movs	r3, #3
 8001a54:	e061      	b.n	8001b1a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a56:	4b11      	ldr	r3, [pc, #68]	; (8001a9c <HAL_RCC_ClockConfig+0x260>)
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	f003 020c 	and.w	r2, r3, #12
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	009b      	lsls	r3, r3, #2
 8001a64:	429a      	cmp	r2, r3
 8001a66:	d1eb      	bne.n	8001a40 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a68:	4b0b      	ldr	r3, [pc, #44]	; (8001a98 <HAL_RCC_ClockConfig+0x25c>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f003 0307 	and.w	r3, r3, #7
 8001a70:	683a      	ldr	r2, [r7, #0]
 8001a72:	429a      	cmp	r2, r3
 8001a74:	d214      	bcs.n	8001aa0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a76:	4b08      	ldr	r3, [pc, #32]	; (8001a98 <HAL_RCC_ClockConfig+0x25c>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f023 0207 	bic.w	r2, r3, #7
 8001a7e:	4906      	ldr	r1, [pc, #24]	; (8001a98 <HAL_RCC_ClockConfig+0x25c>)
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	4313      	orrs	r3, r2
 8001a84:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a86:	4b04      	ldr	r3, [pc, #16]	; (8001a98 <HAL_RCC_ClockConfig+0x25c>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f003 0307 	and.w	r3, r3, #7
 8001a8e:	683a      	ldr	r2, [r7, #0]
 8001a90:	429a      	cmp	r2, r3
 8001a92:	d005      	beq.n	8001aa0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8001a94:	2301      	movs	r3, #1
 8001a96:	e040      	b.n	8001b1a <HAL_RCC_ClockConfig+0x2de>
 8001a98:	40022000 	.word	0x40022000
 8001a9c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f003 0304 	and.w	r3, r3, #4
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d008      	beq.n	8001abe <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001aac:	4b1d      	ldr	r3, [pc, #116]	; (8001b24 <HAL_RCC_ClockConfig+0x2e8>)
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	68db      	ldr	r3, [r3, #12]
 8001ab8:	491a      	ldr	r1, [pc, #104]	; (8001b24 <HAL_RCC_ClockConfig+0x2e8>)
 8001aba:	4313      	orrs	r3, r2
 8001abc:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f003 0308 	and.w	r3, r3, #8
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d009      	beq.n	8001ade <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001aca:	4b16      	ldr	r3, [pc, #88]	; (8001b24 <HAL_RCC_ClockConfig+0x2e8>)
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	691b      	ldr	r3, [r3, #16]
 8001ad6:	00db      	lsls	r3, r3, #3
 8001ad8:	4912      	ldr	r1, [pc, #72]	; (8001b24 <HAL_RCC_ClockConfig+0x2e8>)
 8001ada:	4313      	orrs	r3, r2
 8001adc:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001ade:	f000 f829 	bl	8001b34 <HAL_RCC_GetSysClockFreq>
 8001ae2:	4601      	mov	r1, r0
 8001ae4:	4b0f      	ldr	r3, [pc, #60]	; (8001b24 <HAL_RCC_ClockConfig+0x2e8>)
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001aec:	22f0      	movs	r2, #240	; 0xf0
 8001aee:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001af0:	693a      	ldr	r2, [r7, #16]
 8001af2:	fa92 f2a2 	rbit	r2, r2
 8001af6:	60fa      	str	r2, [r7, #12]
  return result;
 8001af8:	68fa      	ldr	r2, [r7, #12]
 8001afa:	fab2 f282 	clz	r2, r2
 8001afe:	b2d2      	uxtb	r2, r2
 8001b00:	40d3      	lsrs	r3, r2
 8001b02:	4a09      	ldr	r2, [pc, #36]	; (8001b28 <HAL_RCC_ClockConfig+0x2ec>)
 8001b04:	5cd3      	ldrb	r3, [r2, r3]
 8001b06:	fa21 f303 	lsr.w	r3, r1, r3
 8001b0a:	4a08      	ldr	r2, [pc, #32]	; (8001b2c <HAL_RCC_ClockConfig+0x2f0>)
 8001b0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8001b0e:	4b08      	ldr	r3, [pc, #32]	; (8001b30 <HAL_RCC_ClockConfig+0x2f4>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4618      	mov	r0, r3
 8001b14:	f7fe fce2 	bl	80004dc <HAL_InitTick>
  
  return HAL_OK;
 8001b18:	2300      	movs	r3, #0
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	3778      	adds	r7, #120	; 0x78
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	40021000 	.word	0x40021000
 8001b28:	08002384 	.word	0x08002384
 8001b2c:	20000000 	.word	0x20000000
 8001b30:	20000004 	.word	0x20000004

08001b34 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b08b      	sub	sp, #44	; 0x2c
 8001b38:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	61fb      	str	r3, [r7, #28]
 8001b3e:	2300      	movs	r3, #0
 8001b40:	61bb      	str	r3, [r7, #24]
 8001b42:	2300      	movs	r3, #0
 8001b44:	627b      	str	r3, [r7, #36]	; 0x24
 8001b46:	2300      	movs	r3, #0
 8001b48:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8001b4e:	4b29      	ldr	r3, [pc, #164]	; (8001bf4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001b54:	69fb      	ldr	r3, [r7, #28]
 8001b56:	f003 030c 	and.w	r3, r3, #12
 8001b5a:	2b04      	cmp	r3, #4
 8001b5c:	d002      	beq.n	8001b64 <HAL_RCC_GetSysClockFreq+0x30>
 8001b5e:	2b08      	cmp	r3, #8
 8001b60:	d003      	beq.n	8001b6a <HAL_RCC_GetSysClockFreq+0x36>
 8001b62:	e03c      	b.n	8001bde <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001b64:	4b24      	ldr	r3, [pc, #144]	; (8001bf8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001b66:	623b      	str	r3, [r7, #32]
      break;
 8001b68:	e03c      	b.n	8001be4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001b6a:	69fb      	ldr	r3, [r7, #28]
 8001b6c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001b70:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8001b74:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b76:	68ba      	ldr	r2, [r7, #8]
 8001b78:	fa92 f2a2 	rbit	r2, r2
 8001b7c:	607a      	str	r2, [r7, #4]
  return result;
 8001b7e:	687a      	ldr	r2, [r7, #4]
 8001b80:	fab2 f282 	clz	r2, r2
 8001b84:	b2d2      	uxtb	r2, r2
 8001b86:	40d3      	lsrs	r3, r2
 8001b88:	4a1c      	ldr	r2, [pc, #112]	; (8001bfc <HAL_RCC_GetSysClockFreq+0xc8>)
 8001b8a:	5cd3      	ldrb	r3, [r2, r3]
 8001b8c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8001b8e:	4b19      	ldr	r3, [pc, #100]	; (8001bf4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001b90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b92:	f003 030f 	and.w	r3, r3, #15
 8001b96:	220f      	movs	r2, #15
 8001b98:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b9a:	693a      	ldr	r2, [r7, #16]
 8001b9c:	fa92 f2a2 	rbit	r2, r2
 8001ba0:	60fa      	str	r2, [r7, #12]
  return result;
 8001ba2:	68fa      	ldr	r2, [r7, #12]
 8001ba4:	fab2 f282 	clz	r2, r2
 8001ba8:	b2d2      	uxtb	r2, r2
 8001baa:	40d3      	lsrs	r3, r2
 8001bac:	4a14      	ldr	r2, [pc, #80]	; (8001c00 <HAL_RCC_GetSysClockFreq+0xcc>)
 8001bae:	5cd3      	ldrb	r3, [r2, r3]
 8001bb0:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8001bb2:	69fb      	ldr	r3, [r7, #28]
 8001bb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d008      	beq.n	8001bce <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001bbc:	4a0e      	ldr	r2, [pc, #56]	; (8001bf8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001bbe:	69bb      	ldr	r3, [r7, #24]
 8001bc0:	fbb2 f2f3 	udiv	r2, r2, r3
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	fb02 f303 	mul.w	r3, r2, r3
 8001bca:	627b      	str	r3, [r7, #36]	; 0x24
 8001bcc:	e004      	b.n	8001bd8 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001bce:	697b      	ldr	r3, [r7, #20]
 8001bd0:	4a0c      	ldr	r2, [pc, #48]	; (8001c04 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001bd2:	fb02 f303 	mul.w	r3, r2, r3
 8001bd6:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8001bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bda:	623b      	str	r3, [r7, #32]
      break;
 8001bdc:	e002      	b.n	8001be4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001bde:	4b06      	ldr	r3, [pc, #24]	; (8001bf8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001be0:	623b      	str	r3, [r7, #32]
      break;
 8001be2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001be4:	6a3b      	ldr	r3, [r7, #32]
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	372c      	adds	r7, #44	; 0x2c
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr
 8001bf2:	bf00      	nop
 8001bf4:	40021000 	.word	0x40021000
 8001bf8:	007a1200 	.word	0x007a1200
 8001bfc:	0800239c 	.word	0x0800239c
 8001c00:	080023ac 	.word	0x080023ac
 8001c04:	003d0900 	.word	0x003d0900

08001c08 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c0c:	4b03      	ldr	r3, [pc, #12]	; (8001c1c <HAL_RCC_GetHCLKFreq+0x14>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr
 8001c1a:	bf00      	nop
 8001c1c:	20000000 	.word	0x20000000

08001c20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b082      	sub	sp, #8
 8001c24:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8001c26:	f7ff ffef 	bl	8001c08 <HAL_RCC_GetHCLKFreq>
 8001c2a:	4601      	mov	r1, r0
 8001c2c:	4b0b      	ldr	r3, [pc, #44]	; (8001c5c <HAL_RCC_GetPCLK1Freq+0x3c>)
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001c34:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001c38:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c3a:	687a      	ldr	r2, [r7, #4]
 8001c3c:	fa92 f2a2 	rbit	r2, r2
 8001c40:	603a      	str	r2, [r7, #0]
  return result;
 8001c42:	683a      	ldr	r2, [r7, #0]
 8001c44:	fab2 f282 	clz	r2, r2
 8001c48:	b2d2      	uxtb	r2, r2
 8001c4a:	40d3      	lsrs	r3, r2
 8001c4c:	4a04      	ldr	r2, [pc, #16]	; (8001c60 <HAL_RCC_GetPCLK1Freq+0x40>)
 8001c4e:	5cd3      	ldrb	r3, [r2, r3]
 8001c50:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8001c54:	4618      	mov	r0, r3
 8001c56:	3708      	adds	r7, #8
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	40021000 	.word	0x40021000
 8001c60:	08002394 	.word	0x08002394

08001c64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b082      	sub	sp, #8
 8001c68:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8001c6a:	f7ff ffcd 	bl	8001c08 <HAL_RCC_GetHCLKFreq>
 8001c6e:	4601      	mov	r1, r0
 8001c70:	4b0b      	ldr	r3, [pc, #44]	; (8001ca0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8001c78:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001c7c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c7e:	687a      	ldr	r2, [r7, #4]
 8001c80:	fa92 f2a2 	rbit	r2, r2
 8001c84:	603a      	str	r2, [r7, #0]
  return result;
 8001c86:	683a      	ldr	r2, [r7, #0]
 8001c88:	fab2 f282 	clz	r2, r2
 8001c8c:	b2d2      	uxtb	r2, r2
 8001c8e:	40d3      	lsrs	r3, r2
 8001c90:	4a04      	ldr	r2, [pc, #16]	; (8001ca4 <HAL_RCC_GetPCLK2Freq+0x40>)
 8001c92:	5cd3      	ldrb	r3, [r2, r3]
 8001c94:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8001c98:	4618      	mov	r0, r3
 8001c9a:	3708      	adds	r7, #8
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	40021000 	.word	0x40021000
 8001ca4:	08002394 	.word	0x08002394

08001ca8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b082      	sub	sp, #8
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d101      	bne.n	8001cba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	e040      	b.n	8001d3c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d106      	bne.n	8001cd0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001cca:	6878      	ldr	r0, [r7, #4]
 8001ccc:	f7fe fb82 	bl	80003d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2224      	movs	r2, #36	; 0x24
 8001cd4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	681a      	ldr	r2, [r3, #0]
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f022 0201 	bic.w	r2, r2, #1
 8001ce4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001ce6:	6878      	ldr	r0, [r7, #4]
 8001ce8:	f000 f82c 	bl	8001d44 <UART_SetConfig>
 8001cec:	4603      	mov	r3, r0
 8001cee:	2b01      	cmp	r3, #1
 8001cf0:	d101      	bne.n	8001cf6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e022      	b.n	8001d3c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d002      	beq.n	8001d04 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8001cfe:	6878      	ldr	r0, [r7, #4]
 8001d00:	f000 f958 	bl	8001fb4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	685a      	ldr	r2, [r3, #4]
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001d12:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	689a      	ldr	r2, [r3, #8]
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001d22:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	681a      	ldr	r2, [r3, #0]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f042 0201 	orr.w	r2, r2, #1
 8001d32:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001d34:	6878      	ldr	r0, [r7, #4]
 8001d36:	f000 f9df 	bl	80020f8 <UART_CheckIdleState>
 8001d3a:	4603      	mov	r3, r0
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	3708      	adds	r7, #8
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}

08001d44 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b088      	sub	sp, #32
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	689a      	ldr	r2, [r3, #8]
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	691b      	ldr	r3, [r3, #16]
 8001d58:	431a      	orrs	r2, r3
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	695b      	ldr	r3, [r3, #20]
 8001d5e:	431a      	orrs	r2, r3
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	69db      	ldr	r3, [r3, #28]
 8001d64:	4313      	orrs	r3, r2
 8001d66:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	4b8b      	ldr	r3, [pc, #556]	; (8001f9c <UART_SetConfig+0x258>)
 8001d70:	4013      	ands	r3, r2
 8001d72:	687a      	ldr	r2, [r7, #4]
 8001d74:	6812      	ldr	r2, [r2, #0]
 8001d76:	6979      	ldr	r1, [r7, #20]
 8001d78:	430b      	orrs	r3, r1
 8001d7a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	68da      	ldr	r2, [r3, #12]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	430a      	orrs	r2, r1
 8001d90:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	699b      	ldr	r3, [r3, #24]
 8001d96:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6a1b      	ldr	r3, [r3, #32]
 8001d9c:	697a      	ldr	r2, [r7, #20]
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	689b      	ldr	r3, [r3, #8]
 8001da8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	697a      	ldr	r2, [r7, #20]
 8001db2:	430a      	orrs	r2, r1
 8001db4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a79      	ldr	r2, [pc, #484]	; (8001fa0 <UART_SetConfig+0x25c>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d121      	bne.n	8001e04 <UART_SetConfig+0xc0>
 8001dc0:	4b78      	ldr	r3, [pc, #480]	; (8001fa4 <UART_SetConfig+0x260>)
 8001dc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc4:	f003 0303 	and.w	r3, r3, #3
 8001dc8:	2b03      	cmp	r3, #3
 8001dca:	d817      	bhi.n	8001dfc <UART_SetConfig+0xb8>
 8001dcc:	a201      	add	r2, pc, #4	; (adr r2, 8001dd4 <UART_SetConfig+0x90>)
 8001dce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dd2:	bf00      	nop
 8001dd4:	08001de5 	.word	0x08001de5
 8001dd8:	08001df1 	.word	0x08001df1
 8001ddc:	08001df7 	.word	0x08001df7
 8001de0:	08001deb 	.word	0x08001deb
 8001de4:	2300      	movs	r3, #0
 8001de6:	77fb      	strb	r3, [r7, #31]
 8001de8:	e01e      	b.n	8001e28 <UART_SetConfig+0xe4>
 8001dea:	2302      	movs	r3, #2
 8001dec:	77fb      	strb	r3, [r7, #31]
 8001dee:	e01b      	b.n	8001e28 <UART_SetConfig+0xe4>
 8001df0:	2304      	movs	r3, #4
 8001df2:	77fb      	strb	r3, [r7, #31]
 8001df4:	e018      	b.n	8001e28 <UART_SetConfig+0xe4>
 8001df6:	2308      	movs	r3, #8
 8001df8:	77fb      	strb	r3, [r7, #31]
 8001dfa:	e015      	b.n	8001e28 <UART_SetConfig+0xe4>
 8001dfc:	2310      	movs	r3, #16
 8001dfe:	77fb      	strb	r3, [r7, #31]
 8001e00:	bf00      	nop
 8001e02:	e011      	b.n	8001e28 <UART_SetConfig+0xe4>
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a67      	ldr	r2, [pc, #412]	; (8001fa8 <UART_SetConfig+0x264>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d102      	bne.n	8001e14 <UART_SetConfig+0xd0>
 8001e0e:	2300      	movs	r3, #0
 8001e10:	77fb      	strb	r3, [r7, #31]
 8001e12:	e009      	b.n	8001e28 <UART_SetConfig+0xe4>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a64      	ldr	r2, [pc, #400]	; (8001fac <UART_SetConfig+0x268>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d102      	bne.n	8001e24 <UART_SetConfig+0xe0>
 8001e1e:	2300      	movs	r3, #0
 8001e20:	77fb      	strb	r3, [r7, #31]
 8001e22:	e001      	b.n	8001e28 <UART_SetConfig+0xe4>
 8001e24:	2310      	movs	r3, #16
 8001e26:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	69db      	ldr	r3, [r3, #28]
 8001e2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001e30:	d15c      	bne.n	8001eec <UART_SetConfig+0x1a8>
  {
    switch (clocksource)
 8001e32:	7ffb      	ldrb	r3, [r7, #31]
 8001e34:	2b08      	cmp	r3, #8
 8001e36:	d828      	bhi.n	8001e8a <UART_SetConfig+0x146>
 8001e38:	a201      	add	r2, pc, #4	; (adr r2, 8001e40 <UART_SetConfig+0xfc>)
 8001e3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e3e:	bf00      	nop
 8001e40:	08001e65 	.word	0x08001e65
 8001e44:	08001e6d 	.word	0x08001e6d
 8001e48:	08001e75 	.word	0x08001e75
 8001e4c:	08001e8b 	.word	0x08001e8b
 8001e50:	08001e7b 	.word	0x08001e7b
 8001e54:	08001e8b 	.word	0x08001e8b
 8001e58:	08001e8b 	.word	0x08001e8b
 8001e5c:	08001e8b 	.word	0x08001e8b
 8001e60:	08001e83 	.word	0x08001e83
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001e64:	f7ff fedc 	bl	8001c20 <HAL_RCC_GetPCLK1Freq>
 8001e68:	61b8      	str	r0, [r7, #24]
        break;
 8001e6a:	e013      	b.n	8001e94 <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8001e6c:	f7ff fefa 	bl	8001c64 <HAL_RCC_GetPCLK2Freq>
 8001e70:	61b8      	str	r0, [r7, #24]
        break;
 8001e72:	e00f      	b.n	8001e94 <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8001e74:	4b4e      	ldr	r3, [pc, #312]	; (8001fb0 <UART_SetConfig+0x26c>)
 8001e76:	61bb      	str	r3, [r7, #24]
        break;
 8001e78:	e00c      	b.n	8001e94 <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001e7a:	f7ff fe5b 	bl	8001b34 <HAL_RCC_GetSysClockFreq>
 8001e7e:	61b8      	str	r0, [r7, #24]
        break;
 8001e80:	e008      	b.n	8001e94 <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8001e82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001e86:	61bb      	str	r3, [r7, #24]
        break;
 8001e88:	e004      	b.n	8001e94 <UART_SetConfig+0x150>
      default:
        pclk = 0U;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	77bb      	strb	r3, [r7, #30]
        break;
 8001e92:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8001e94:	69bb      	ldr	r3, [r7, #24]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d074      	beq.n	8001f84 <UART_SetConfig+0x240>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8001e9a:	69bb      	ldr	r3, [r7, #24]
 8001e9c:	005a      	lsls	r2, r3, #1
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	085b      	lsrs	r3, r3, #1
 8001ea4:	441a      	add	r2, r3
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eae:	b29b      	uxth	r3, r3
 8001eb0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	2b0f      	cmp	r3, #15
 8001eb6:	d916      	bls.n	8001ee6 <UART_SetConfig+0x1a2>
 8001eb8:	693b      	ldr	r3, [r7, #16]
 8001eba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ebe:	d212      	bcs.n	8001ee6 <UART_SetConfig+0x1a2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	b29b      	uxth	r3, r3
 8001ec4:	f023 030f 	bic.w	r3, r3, #15
 8001ec8:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	085b      	lsrs	r3, r3, #1
 8001ece:	b29b      	uxth	r3, r3
 8001ed0:	f003 0307 	and.w	r3, r3, #7
 8001ed4:	b29a      	uxth	r2, r3
 8001ed6:	89fb      	ldrh	r3, [r7, #14]
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	89fa      	ldrh	r2, [r7, #14]
 8001ee2:	60da      	str	r2, [r3, #12]
 8001ee4:	e04e      	b.n	8001f84 <UART_SetConfig+0x240>
      }
      else
      {
        ret = HAL_ERROR;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	77bb      	strb	r3, [r7, #30]
 8001eea:	e04b      	b.n	8001f84 <UART_SetConfig+0x240>
      }
    }
  }
  else
  {
    switch (clocksource)
 8001eec:	7ffb      	ldrb	r3, [r7, #31]
 8001eee:	2b08      	cmp	r3, #8
 8001ef0:	d827      	bhi.n	8001f42 <UART_SetConfig+0x1fe>
 8001ef2:	a201      	add	r2, pc, #4	; (adr r2, 8001ef8 <UART_SetConfig+0x1b4>)
 8001ef4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ef8:	08001f1d 	.word	0x08001f1d
 8001efc:	08001f25 	.word	0x08001f25
 8001f00:	08001f2d 	.word	0x08001f2d
 8001f04:	08001f43 	.word	0x08001f43
 8001f08:	08001f33 	.word	0x08001f33
 8001f0c:	08001f43 	.word	0x08001f43
 8001f10:	08001f43 	.word	0x08001f43
 8001f14:	08001f43 	.word	0x08001f43
 8001f18:	08001f3b 	.word	0x08001f3b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001f1c:	f7ff fe80 	bl	8001c20 <HAL_RCC_GetPCLK1Freq>
 8001f20:	61b8      	str	r0, [r7, #24]
        break;
 8001f22:	e013      	b.n	8001f4c <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8001f24:	f7ff fe9e 	bl	8001c64 <HAL_RCC_GetPCLK2Freq>
 8001f28:	61b8      	str	r0, [r7, #24]
        break;
 8001f2a:	e00f      	b.n	8001f4c <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8001f2c:	4b20      	ldr	r3, [pc, #128]	; (8001fb0 <UART_SetConfig+0x26c>)
 8001f2e:	61bb      	str	r3, [r7, #24]
        break;
 8001f30:	e00c      	b.n	8001f4c <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001f32:	f7ff fdff 	bl	8001b34 <HAL_RCC_GetSysClockFreq>
 8001f36:	61b8      	str	r0, [r7, #24]
        break;
 8001f38:	e008      	b.n	8001f4c <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8001f3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001f3e:	61bb      	str	r3, [r7, #24]
        break;
 8001f40:	e004      	b.n	8001f4c <UART_SetConfig+0x208>
      default:
        pclk = 0U;
 8001f42:	2300      	movs	r3, #0
 8001f44:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
 8001f48:	77bb      	strb	r3, [r7, #30]
        break;
 8001f4a:	bf00      	nop
    }

    if (pclk != 0U)
 8001f4c:	69bb      	ldr	r3, [r7, #24]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d018      	beq.n	8001f84 <UART_SetConfig+0x240>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	085a      	lsrs	r2, r3, #1
 8001f58:	69bb      	ldr	r3, [r7, #24]
 8001f5a:	441a      	add	r2, r3
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f64:	b29b      	uxth	r3, r3
 8001f66:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	2b0f      	cmp	r3, #15
 8001f6c:	d908      	bls.n	8001f80 <UART_SetConfig+0x23c>
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f74:	d204      	bcs.n	8001f80 <UART_SetConfig+0x23c>
      {
        huart->Instance->BRR = usartdiv;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	693a      	ldr	r2, [r7, #16]
 8001f7c:	60da      	str	r2, [r3, #12]
 8001f7e:	e001      	b.n	8001f84 <UART_SetConfig+0x240>
      }
      else
      {
        ret = HAL_ERROR;
 8001f80:	2301      	movs	r3, #1
 8001f82:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2200      	movs	r2, #0
 8001f88:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8001f90:	7fbb      	ldrb	r3, [r7, #30]
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	3720      	adds	r7, #32
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	efff69f3 	.word	0xefff69f3
 8001fa0:	40013800 	.word	0x40013800
 8001fa4:	40021000 	.word	0x40021000
 8001fa8:	40004400 	.word	0x40004400
 8001fac:	40004800 	.word	0x40004800
 8001fb0:	007a1200 	.word	0x007a1200

08001fb4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b083      	sub	sp, #12
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc0:	f003 0301 	and.w	r3, r3, #1
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d00a      	beq.n	8001fde <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	430a      	orrs	r2, r1
 8001fdc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fe2:	f003 0302 	and.w	r3, r3, #2
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d00a      	beq.n	8002000 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	430a      	orrs	r2, r1
 8001ffe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002004:	f003 0304 	and.w	r3, r3, #4
 8002008:	2b00      	cmp	r3, #0
 800200a:	d00a      	beq.n	8002022 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	430a      	orrs	r2, r1
 8002020:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002026:	f003 0308 	and.w	r3, r3, #8
 800202a:	2b00      	cmp	r3, #0
 800202c:	d00a      	beq.n	8002044 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	430a      	orrs	r2, r1
 8002042:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002048:	f003 0310 	and.w	r3, r3, #16
 800204c:	2b00      	cmp	r3, #0
 800204e:	d00a      	beq.n	8002066 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	689b      	ldr	r3, [r3, #8]
 8002056:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	430a      	orrs	r2, r1
 8002064:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800206a:	f003 0320 	and.w	r3, r3, #32
 800206e:	2b00      	cmp	r3, #0
 8002070:	d00a      	beq.n	8002088 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	689b      	ldr	r3, [r3, #8]
 8002078:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	430a      	orrs	r2, r1
 8002086:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800208c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002090:	2b00      	cmp	r3, #0
 8002092:	d01a      	beq.n	80020ca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	430a      	orrs	r2, r1
 80020a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80020b2:	d10a      	bne.n	80020ca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	430a      	orrs	r2, r1
 80020c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d00a      	beq.n	80020ec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	430a      	orrs	r2, r1
 80020ea:	605a      	str	r2, [r3, #4]
  }
}
 80020ec:	bf00      	nop
 80020ee:	370c      	adds	r7, #12
 80020f0:	46bd      	mov	sp, r7
 80020f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f6:	4770      	bx	lr

080020f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b086      	sub	sp, #24
 80020fc:	af02      	add	r7, sp, #8
 80020fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2200      	movs	r2, #0
 8002104:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002108:	f7fe fa2c 	bl	8000564 <HAL_GetTick>
 800210c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f003 0308 	and.w	r3, r3, #8
 8002118:	2b08      	cmp	r3, #8
 800211a:	d10e      	bne.n	800213a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800211c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002120:	9300      	str	r3, [sp, #0]
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	2200      	movs	r2, #0
 8002126:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800212a:	6878      	ldr	r0, [r7, #4]
 800212c:	f000 f82d 	bl	800218a <UART_WaitOnFlagUntilTimeout>
 8002130:	4603      	mov	r3, r0
 8002132:	2b00      	cmp	r3, #0
 8002134:	d001      	beq.n	800213a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002136:	2303      	movs	r3, #3
 8002138:	e023      	b.n	8002182 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f003 0304 	and.w	r3, r3, #4
 8002144:	2b04      	cmp	r3, #4
 8002146:	d10e      	bne.n	8002166 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002148:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800214c:	9300      	str	r3, [sp, #0]
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	2200      	movs	r2, #0
 8002152:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002156:	6878      	ldr	r0, [r7, #4]
 8002158:	f000 f817 	bl	800218a <UART_WaitOnFlagUntilTimeout>
 800215c:	4603      	mov	r3, r0
 800215e:	2b00      	cmp	r3, #0
 8002160:	d001      	beq.n	8002166 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002162:	2303      	movs	r3, #3
 8002164:	e00d      	b.n	8002182 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2220      	movs	r2, #32
 800216a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2220      	movs	r2, #32
 8002170:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2200      	movs	r2, #0
 8002176:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2200      	movs	r2, #0
 800217c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8002180:	2300      	movs	r3, #0
}
 8002182:	4618      	mov	r0, r3
 8002184:	3710      	adds	r7, #16
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}

0800218a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800218a:	b580      	push	{r7, lr}
 800218c:	b09c      	sub	sp, #112	; 0x70
 800218e:	af00      	add	r7, sp, #0
 8002190:	60f8      	str	r0, [r7, #12]
 8002192:	60b9      	str	r1, [r7, #8]
 8002194:	603b      	str	r3, [r7, #0]
 8002196:	4613      	mov	r3, r2
 8002198:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800219a:	e0a5      	b.n	80022e8 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800219c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800219e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80021a2:	f000 80a1 	beq.w	80022e8 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021a6:	f7fe f9dd 	bl	8000564 <HAL_GetTick>
 80021aa:	4602      	mov	r2, r0
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	1ad3      	subs	r3, r2, r3
 80021b0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80021b2:	429a      	cmp	r2, r3
 80021b4:	d302      	bcc.n	80021bc <UART_WaitOnFlagUntilTimeout+0x32>
 80021b6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d13e      	bne.n	800223a <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80021c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80021c4:	e853 3f00 	ldrex	r3, [r3]
 80021c8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80021ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80021cc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80021d0:	667b      	str	r3, [r7, #100]	; 0x64
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	461a      	mov	r2, r3
 80021d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80021da:	65fb      	str	r3, [r7, #92]	; 0x5c
 80021dc:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80021de:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80021e0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80021e2:	e841 2300 	strex	r3, r2, [r1]
 80021e6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80021e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d1e6      	bne.n	80021bc <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	3308      	adds	r3, #8
 80021f4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80021f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80021f8:	e853 3f00 	ldrex	r3, [r3]
 80021fc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80021fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002200:	f023 0301 	bic.w	r3, r3, #1
 8002204:	663b      	str	r3, [r7, #96]	; 0x60
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	3308      	adds	r3, #8
 800220c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800220e:	64ba      	str	r2, [r7, #72]	; 0x48
 8002210:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002212:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002214:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002216:	e841 2300 	strex	r3, r2, [r1]
 800221a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800221c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800221e:	2b00      	cmp	r3, #0
 8002220:	d1e5      	bne.n	80021ee <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	2220      	movs	r2, #32
 8002226:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	2220      	movs	r2, #32
 800222c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	2200      	movs	r2, #0
 8002232:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8002236:	2303      	movs	r3, #3
 8002238:	e067      	b.n	800230a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f003 0304 	and.w	r3, r3, #4
 8002244:	2b00      	cmp	r3, #0
 8002246:	d04f      	beq.n	80022e8 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	69db      	ldr	r3, [r3, #28]
 800224e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002252:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002256:	d147      	bne.n	80022e8 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002260:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800226a:	e853 3f00 	ldrex	r3, [r3]
 800226e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002272:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002276:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	461a      	mov	r2, r3
 800227e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002280:	637b      	str	r3, [r7, #52]	; 0x34
 8002282:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002284:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002286:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002288:	e841 2300 	strex	r3, r2, [r1]
 800228c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800228e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002290:	2b00      	cmp	r3, #0
 8002292:	d1e6      	bne.n	8002262 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	3308      	adds	r3, #8
 800229a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800229c:	697b      	ldr	r3, [r7, #20]
 800229e:	e853 3f00 	ldrex	r3, [r3]
 80022a2:	613b      	str	r3, [r7, #16]
   return(result);
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	f023 0301 	bic.w	r3, r3, #1
 80022aa:	66bb      	str	r3, [r7, #104]	; 0x68
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	3308      	adds	r3, #8
 80022b2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80022b4:	623a      	str	r2, [r7, #32]
 80022b6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022b8:	69f9      	ldr	r1, [r7, #28]
 80022ba:	6a3a      	ldr	r2, [r7, #32]
 80022bc:	e841 2300 	strex	r3, r2, [r1]
 80022c0:	61bb      	str	r3, [r7, #24]
   return(result);
 80022c2:	69bb      	ldr	r3, [r7, #24]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d1e5      	bne.n	8002294 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	2220      	movs	r2, #32
 80022cc:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	2220      	movs	r2, #32
 80022d2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	2220      	movs	r2, #32
 80022d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	2200      	movs	r2, #0
 80022e0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80022e4:	2303      	movs	r3, #3
 80022e6:	e010      	b.n	800230a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	69da      	ldr	r2, [r3, #28]
 80022ee:	68bb      	ldr	r3, [r7, #8]
 80022f0:	4013      	ands	r3, r2
 80022f2:	68ba      	ldr	r2, [r7, #8]
 80022f4:	429a      	cmp	r2, r3
 80022f6:	bf0c      	ite	eq
 80022f8:	2301      	moveq	r3, #1
 80022fa:	2300      	movne	r3, #0
 80022fc:	b2db      	uxtb	r3, r3
 80022fe:	461a      	mov	r2, r3
 8002300:	79fb      	ldrb	r3, [r7, #7]
 8002302:	429a      	cmp	r2, r3
 8002304:	f43f af4a 	beq.w	800219c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002308:	2300      	movs	r3, #0
}
 800230a:	4618      	mov	r0, r3
 800230c:	3770      	adds	r7, #112	; 0x70
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}
	...

08002314 <__libc_init_array>:
 8002314:	b570      	push	{r4, r5, r6, lr}
 8002316:	4e0d      	ldr	r6, [pc, #52]	; (800234c <__libc_init_array+0x38>)
 8002318:	4c0d      	ldr	r4, [pc, #52]	; (8002350 <__libc_init_array+0x3c>)
 800231a:	1ba4      	subs	r4, r4, r6
 800231c:	10a4      	asrs	r4, r4, #2
 800231e:	2500      	movs	r5, #0
 8002320:	42a5      	cmp	r5, r4
 8002322:	d109      	bne.n	8002338 <__libc_init_array+0x24>
 8002324:	4e0b      	ldr	r6, [pc, #44]	; (8002354 <__libc_init_array+0x40>)
 8002326:	4c0c      	ldr	r4, [pc, #48]	; (8002358 <__libc_init_array+0x44>)
 8002328:	f000 f820 	bl	800236c <_init>
 800232c:	1ba4      	subs	r4, r4, r6
 800232e:	10a4      	asrs	r4, r4, #2
 8002330:	2500      	movs	r5, #0
 8002332:	42a5      	cmp	r5, r4
 8002334:	d105      	bne.n	8002342 <__libc_init_array+0x2e>
 8002336:	bd70      	pop	{r4, r5, r6, pc}
 8002338:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800233c:	4798      	blx	r3
 800233e:	3501      	adds	r5, #1
 8002340:	e7ee      	b.n	8002320 <__libc_init_array+0xc>
 8002342:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002346:	4798      	blx	r3
 8002348:	3501      	adds	r5, #1
 800234a:	e7f2      	b.n	8002332 <__libc_init_array+0x1e>
 800234c:	080023bc 	.word	0x080023bc
 8002350:	080023bc 	.word	0x080023bc
 8002354:	080023bc 	.word	0x080023bc
 8002358:	080023c0 	.word	0x080023c0

0800235c <memset>:
 800235c:	4402      	add	r2, r0
 800235e:	4603      	mov	r3, r0
 8002360:	4293      	cmp	r3, r2
 8002362:	d100      	bne.n	8002366 <memset+0xa>
 8002364:	4770      	bx	lr
 8002366:	f803 1b01 	strb.w	r1, [r3], #1
 800236a:	e7f9      	b.n	8002360 <memset+0x4>

0800236c <_init>:
 800236c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800236e:	bf00      	nop
 8002370:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002372:	bc08      	pop	{r3}
 8002374:	469e      	mov	lr, r3
 8002376:	4770      	bx	lr

08002378 <_fini>:
 8002378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800237a:	bf00      	nop
 800237c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800237e:	bc08      	pop	{r3}
 8002380:	469e      	mov	lr, r3
 8002382:	4770      	bx	lr
