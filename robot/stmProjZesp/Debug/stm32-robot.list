
stm32-robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000361c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080037a4  080037a4  000137a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080037dc  080037dc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080037dc  080037dc  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080037dc  080037dc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080037dc  080037dc  000137dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080037e0  080037e0  000137e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080037e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000174  2000000c  080037f0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000180  080037f0  00020180  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e444  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001b13  00000000  00000000  0002e480  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c10  00000000  00000000  0002ff98  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b48  00000000  00000000  00030ba8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001a295  00000000  00000000  000316f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000bccd  00000000  00000000  0004b985  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000a0738  00000000  00000000  00057652  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f7d8a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000031dc  00000000  00000000  000f7e08  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800378c 	.word	0x0800378c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	0800378c 	.word	0x0800378c

080001c8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b088      	sub	sp, #32
 80001cc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001ce:	f107 030c 	add.w	r3, r7, #12
 80001d2:	2200      	movs	r2, #0
 80001d4:	601a      	str	r2, [r3, #0]
 80001d6:	605a      	str	r2, [r3, #4]
 80001d8:	609a      	str	r2, [r3, #8]
 80001da:	60da      	str	r2, [r3, #12]
 80001dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80001de:	4b23      	ldr	r3, [pc, #140]	; (800026c <MX_GPIO_Init+0xa4>)
 80001e0:	695b      	ldr	r3, [r3, #20]
 80001e2:	4a22      	ldr	r2, [pc, #136]	; (800026c <MX_GPIO_Init+0xa4>)
 80001e4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80001e8:	6153      	str	r3, [r2, #20]
 80001ea:	4b20      	ldr	r3, [pc, #128]	; (800026c <MX_GPIO_Init+0xa4>)
 80001ec:	695b      	ldr	r3, [r3, #20]
 80001ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80001f2:	60bb      	str	r3, [r7, #8]
 80001f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80001f6:	4b1d      	ldr	r3, [pc, #116]	; (800026c <MX_GPIO_Init+0xa4>)
 80001f8:	695b      	ldr	r3, [r3, #20]
 80001fa:	4a1c      	ldr	r2, [pc, #112]	; (800026c <MX_GPIO_Init+0xa4>)
 80001fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000200:	6153      	str	r3, [r2, #20]
 8000202:	4b1a      	ldr	r3, [pc, #104]	; (800026c <MX_GPIO_Init+0xa4>)
 8000204:	695b      	ldr	r3, [r3, #20]
 8000206:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800020a:	607b      	str	r3, [r7, #4]
 800020c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800020e:	4b17      	ldr	r3, [pc, #92]	; (800026c <MX_GPIO_Init+0xa4>)
 8000210:	695b      	ldr	r3, [r3, #20]
 8000212:	4a16      	ldr	r2, [pc, #88]	; (800026c <MX_GPIO_Init+0xa4>)
 8000214:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000218:	6153      	str	r3, [r2, #20]
 800021a:	4b14      	ldr	r3, [pc, #80]	; (800026c <MX_GPIO_Init+0xa4>)
 800021c:	695b      	ldr	r3, [r3, #20]
 800021e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000222:	603b      	str	r3, [r7, #0]
 8000224:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DS_GPIO_Port, DS_Pin, GPIO_PIN_SET);
 8000226:	2201      	movs	r2, #1
 8000228:	2140      	movs	r1, #64	; 0x40
 800022a:	4811      	ldr	r0, [pc, #68]	; (8000270 <MX_GPIO_Init+0xa8>)
 800022c:	f000 fdca 	bl	8000dc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DS_Pin;
 8000230:	2340      	movs	r3, #64	; 0x40
 8000232:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000234:	2311      	movs	r3, #17
 8000236:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000238:	2300      	movs	r3, #0
 800023a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800023c:	2300      	movs	r3, #0
 800023e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DS_GPIO_Port, &GPIO_InitStruct);
 8000240:	f107 030c 	add.w	r3, r7, #12
 8000244:	4619      	mov	r1, r3
 8000246:	480a      	ldr	r0, [pc, #40]	; (8000270 <MX_GPIO_Init+0xa8>)
 8000248:	f000 fc32 	bl	8000ab0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GAZ_IN_Pin;
 800024c:	2380      	movs	r3, #128	; 0x80
 800024e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000250:	2300      	movs	r3, #0
 8000252:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000254:	2300      	movs	r3, #0
 8000256:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GAZ_IN_GPIO_Port, &GPIO_InitStruct);
 8000258:	f107 030c 	add.w	r3, r7, #12
 800025c:	4619      	mov	r1, r3
 800025e:	4804      	ldr	r0, [pc, #16]	; (8000270 <MX_GPIO_Init+0xa8>)
 8000260:	f000 fc26 	bl	8000ab0 <HAL_GPIO_Init>

}
 8000264:	bf00      	nop
 8000266:	3720      	adds	r7, #32
 8000268:	46bd      	mov	sp, r7
 800026a:	bd80      	pop	{r7, pc}
 800026c:	40021000 	.word	0x40021000
 8000270:	48000400 	.word	0x48000400

08000274 <checkGas>:

/* USER CODE BEGIN 2 */
uint8_t checkGas(){
 8000274:	b580      	push	{r7, lr}
 8000276:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(GAZ_IN_GPIO_Port, GAZ_IN_Pin)==GPIO_PIN_SET)
 8000278:	2180      	movs	r1, #128	; 0x80
 800027a:	4805      	ldr	r0, [pc, #20]	; (8000290 <checkGas+0x1c>)
 800027c:	f000 fd8a 	bl	8000d94 <HAL_GPIO_ReadPin>
 8000280:	4603      	mov	r3, r0
 8000282:	2b01      	cmp	r3, #1
 8000284:	d101      	bne.n	800028a <checkGas+0x16>
		return 1;
 8000286:	2301      	movs	r3, #1
 8000288:	e000      	b.n	800028c <checkGas+0x18>
	else
		return 0;
 800028a:	2300      	movs	r3, #0
}
 800028c:	4618      	mov	r0, r3
 800028e:	bd80      	pop	{r7, pc}
 8000290:	48000400 	.word	0x48000400

08000294 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	b082      	sub	sp, #8
 8000298:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800029a:	f000 fabd 	bl	8000818 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800029e:	f000 f812 	bl	80002c6 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002a2:	f7ff ff91 	bl	80001c8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80002a6:	f000 f9d7 	bl	8000658 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 80002aa:	f000 f8c9 	bl	8000440 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 80002ae:	f000 f99f 	bl	80005f0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  uint8_t gaz=0;
 80002b2:	2300      	movs	r3, #0
 80002b4:	71fb      	strb	r3, [r7, #7]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(checkGas())
 80002b6:	f7ff ffdd 	bl	8000274 <checkGas>
 80002ba:	4603      	mov	r3, r0
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d0fa      	beq.n	80002b6 <main+0x22>
		gaz=1;  //Jest w powietrzu gaz
 80002c0:	2301      	movs	r3, #1
 80002c2:	71fb      	strb	r3, [r7, #7]
	  if(checkGas())
 80002c4:	e7f7      	b.n	80002b6 <main+0x22>

080002c6 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002c6:	b580      	push	{r7, lr}
 80002c8:	b096      	sub	sp, #88	; 0x58
 80002ca:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002cc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80002d0:	2228      	movs	r2, #40	; 0x28
 80002d2:	2100      	movs	r1, #0
 80002d4:	4618      	mov	r0, r3
 80002d6:	f003 fa51 	bl	800377c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002da:	f107 031c 	add.w	r3, r7, #28
 80002de:	2200      	movs	r2, #0
 80002e0:	601a      	str	r2, [r3, #0]
 80002e2:	605a      	str	r2, [r3, #4]
 80002e4:	609a      	str	r2, [r3, #8]
 80002e6:	60da      	str	r2, [r3, #12]
 80002e8:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002ea:	1d3b      	adds	r3, r7, #4
 80002ec:	2200      	movs	r2, #0
 80002ee:	601a      	str	r2, [r3, #0]
 80002f0:	605a      	str	r2, [r3, #4]
 80002f2:	609a      	str	r2, [r3, #8]
 80002f4:	60da      	str	r2, [r3, #12]
 80002f6:	611a      	str	r2, [r3, #16]
 80002f8:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002fa:	2302      	movs	r3, #2
 80002fc:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002fe:	2301      	movs	r3, #1
 8000300:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000302:	2310      	movs	r3, #16
 8000304:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000306:	2300      	movs	r3, #0
 8000308:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800030a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800030e:	4618      	mov	r0, r3
 8000310:	f000 fd70 	bl	8000df4 <HAL_RCC_OscConfig>
 8000314:	4603      	mov	r3, r0
 8000316:	2b00      	cmp	r3, #0
 8000318:	d001      	beq.n	800031e <SystemClock_Config+0x58>
  {
    Error_Handler();
 800031a:	f000 f826 	bl	800036a <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800031e:	230f      	movs	r3, #15
 8000320:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000322:	2300      	movs	r3, #0
 8000324:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000326:	2300      	movs	r3, #0
 8000328:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800032a:	2300      	movs	r3, #0
 800032c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800032e:	2300      	movs	r3, #0
 8000330:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000332:	f107 031c 	add.w	r3, r7, #28
 8000336:	2100      	movs	r1, #0
 8000338:	4618      	mov	r0, r3
 800033a:	f001 fc63 	bl	8001c04 <HAL_RCC_ClockConfig>
 800033e:	4603      	mov	r3, r0
 8000340:	2b00      	cmp	r3, #0
 8000342:	d001      	beq.n	8000348 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000344:	f000 f811 	bl	800036a <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000348:	2301      	movs	r3, #1
 800034a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800034c:	2300      	movs	r3, #0
 800034e:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000350:	1d3b      	adds	r3, r7, #4
 8000352:	4618      	mov	r0, r3
 8000354:	f001 fe8c 	bl	8002070 <HAL_RCCEx_PeriphCLKConfig>
 8000358:	4603      	mov	r3, r0
 800035a:	2b00      	cmp	r3, #0
 800035c:	d001      	beq.n	8000362 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 800035e:	f000 f804 	bl	800036a <Error_Handler>
  }
}
 8000362:	bf00      	nop
 8000364:	3758      	adds	r7, #88	; 0x58
 8000366:	46bd      	mov	sp, r7
 8000368:	bd80      	pop	{r7, pc}

0800036a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800036a:	b480      	push	{r7}
 800036c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800036e:	bf00      	nop
 8000370:	46bd      	mov	sp, r7
 8000372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000376:	4770      	bx	lr

08000378 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000378:	b480      	push	{r7}
 800037a:	b083      	sub	sp, #12
 800037c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800037e:	4b0f      	ldr	r3, [pc, #60]	; (80003bc <HAL_MspInit+0x44>)
 8000380:	699b      	ldr	r3, [r3, #24]
 8000382:	4a0e      	ldr	r2, [pc, #56]	; (80003bc <HAL_MspInit+0x44>)
 8000384:	f043 0301 	orr.w	r3, r3, #1
 8000388:	6193      	str	r3, [r2, #24]
 800038a:	4b0c      	ldr	r3, [pc, #48]	; (80003bc <HAL_MspInit+0x44>)
 800038c:	699b      	ldr	r3, [r3, #24]
 800038e:	f003 0301 	and.w	r3, r3, #1
 8000392:	607b      	str	r3, [r7, #4]
 8000394:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000396:	4b09      	ldr	r3, [pc, #36]	; (80003bc <HAL_MspInit+0x44>)
 8000398:	69db      	ldr	r3, [r3, #28]
 800039a:	4a08      	ldr	r2, [pc, #32]	; (80003bc <HAL_MspInit+0x44>)
 800039c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003a0:	61d3      	str	r3, [r2, #28]
 80003a2:	4b06      	ldr	r3, [pc, #24]	; (80003bc <HAL_MspInit+0x44>)
 80003a4:	69db      	ldr	r3, [r3, #28]
 80003a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003aa:	603b      	str	r3, [r7, #0]
 80003ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003ae:	bf00      	nop
 80003b0:	370c      	adds	r7, #12
 80003b2:	46bd      	mov	sp, r7
 80003b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b8:	4770      	bx	lr
 80003ba:	bf00      	nop
 80003bc:	40021000 	.word	0x40021000

080003c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80003c0:	b480      	push	{r7}
 80003c2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80003c4:	bf00      	nop
 80003c6:	46bd      	mov	sp, r7
 80003c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003cc:	4770      	bx	lr

080003ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80003ce:	b480      	push	{r7}
 80003d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80003d2:	e7fe      	b.n	80003d2 <HardFault_Handler+0x4>

080003d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80003d4:	b480      	push	{r7}
 80003d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80003d8:	e7fe      	b.n	80003d8 <MemManage_Handler+0x4>

080003da <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80003da:	b480      	push	{r7}
 80003dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80003de:	e7fe      	b.n	80003de <BusFault_Handler+0x4>

080003e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80003e0:	b480      	push	{r7}
 80003e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80003e4:	e7fe      	b.n	80003e4 <UsageFault_Handler+0x4>

080003e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80003e6:	b480      	push	{r7}
 80003e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80003ea:	bf00      	nop
 80003ec:	46bd      	mov	sp, r7
 80003ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f2:	4770      	bx	lr

080003f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80003f4:	b480      	push	{r7}
 80003f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80003f8:	bf00      	nop
 80003fa:	46bd      	mov	sp, r7
 80003fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000400:	4770      	bx	lr

08000402 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000402:	b480      	push	{r7}
 8000404:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000406:	bf00      	nop
 8000408:	46bd      	mov	sp, r7
 800040a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800040e:	4770      	bx	lr

08000410 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000410:	b580      	push	{r7, lr}
 8000412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000414:	f000 fa46 	bl	80008a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000418:	bf00      	nop
 800041a:	bd80      	pop	{r7, pc}

0800041c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800041c:	b480      	push	{r7}
 800041e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000420:	4b06      	ldr	r3, [pc, #24]	; (800043c <SystemInit+0x20>)
 8000422:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000426:	4a05      	ldr	r2, [pc, #20]	; (800043c <SystemInit+0x20>)
 8000428:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800042c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000430:	bf00      	nop
 8000432:	46bd      	mov	sp, r7
 8000434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000438:	4770      	bx	lr
 800043a:	bf00      	nop
 800043c:	e000ed00 	.word	0xe000ed00

08000440 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000440:	b580      	push	{r7, lr}
 8000442:	b08e      	sub	sp, #56	; 0x38
 8000444:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000446:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800044a:	2200      	movs	r2, #0
 800044c:	601a      	str	r2, [r3, #0]
 800044e:	605a      	str	r2, [r3, #4]
 8000450:	609a      	str	r2, [r3, #8]
 8000452:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000454:	f107 031c 	add.w	r3, r7, #28
 8000458:	2200      	movs	r2, #0
 800045a:	601a      	str	r2, [r3, #0]
 800045c:	605a      	str	r2, [r3, #4]
 800045e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000460:	463b      	mov	r3, r7
 8000462:	2200      	movs	r2, #0
 8000464:	601a      	str	r2, [r3, #0]
 8000466:	605a      	str	r2, [r3, #4]
 8000468:	609a      	str	r2, [r3, #8]
 800046a:	60da      	str	r2, [r3, #12]
 800046c:	611a      	str	r2, [r3, #16]
 800046e:	615a      	str	r2, [r3, #20]
 8000470:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 8000472:	4b32      	ldr	r3, [pc, #200]	; (800053c <MX_TIM3_Init+0xfc>)
 8000474:	4a32      	ldr	r2, [pc, #200]	; (8000540 <MX_TIM3_Init+0x100>)
 8000476:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000478:	4b30      	ldr	r3, [pc, #192]	; (800053c <MX_TIM3_Init+0xfc>)
 800047a:	2200      	movs	r2, #0
 800047c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800047e:	4b2f      	ldr	r3, [pc, #188]	; (800053c <MX_TIM3_Init+0xfc>)
 8000480:	2200      	movs	r2, #0
 8000482:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000484:	4b2d      	ldr	r3, [pc, #180]	; (800053c <MX_TIM3_Init+0xfc>)
 8000486:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800048a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800048c:	4b2b      	ldr	r3, [pc, #172]	; (800053c <MX_TIM3_Init+0xfc>)
 800048e:	2200      	movs	r2, #0
 8000490:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000492:	4b2a      	ldr	r3, [pc, #168]	; (800053c <MX_TIM3_Init+0xfc>)
 8000494:	2200      	movs	r2, #0
 8000496:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000498:	4828      	ldr	r0, [pc, #160]	; (800053c <MX_TIM3_Init+0xfc>)
 800049a:	f001 ff0f 	bl	80022bc <HAL_TIM_Base_Init>
 800049e:	4603      	mov	r3, r0
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	d001      	beq.n	80004a8 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80004a4:	f7ff ff61 	bl	800036a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80004a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80004ac:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80004ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80004b2:	4619      	mov	r1, r3
 80004b4:	4821      	ldr	r0, [pc, #132]	; (800053c <MX_TIM3_Init+0xfc>)
 80004b6:	f002 f8cd 	bl	8002654 <HAL_TIM_ConfigClockSource>
 80004ba:	4603      	mov	r3, r0
 80004bc:	2b00      	cmp	r3, #0
 80004be:	d001      	beq.n	80004c4 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80004c0:	f7ff ff53 	bl	800036a <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80004c4:	481d      	ldr	r0, [pc, #116]	; (800053c <MX_TIM3_Init+0xfc>)
 80004c6:	f001 ff50 	bl	800236a <HAL_TIM_PWM_Init>
 80004ca:	4603      	mov	r3, r0
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	d001      	beq.n	80004d4 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80004d0:	f7ff ff4b 	bl	800036a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004d4:	2300      	movs	r3, #0
 80004d6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004d8:	2300      	movs	r3, #0
 80004da:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80004dc:	f107 031c 	add.w	r3, r7, #28
 80004e0:	4619      	mov	r1, r3
 80004e2:	4816      	ldr	r0, [pc, #88]	; (800053c <MX_TIM3_Init+0xfc>)
 80004e4:	f002 fd2c 	bl	8002f40 <HAL_TIMEx_MasterConfigSynchronization>
 80004e8:	4603      	mov	r3, r0
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d001      	beq.n	80004f2 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80004ee:	f7ff ff3c 	bl	800036a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80004f2:	2360      	movs	r3, #96	; 0x60
 80004f4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80004f6:	2300      	movs	r3, #0
 80004f8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80004fa:	2300      	movs	r3, #0
 80004fc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80004fe:	2300      	movs	r3, #0
 8000500:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000502:	463b      	mov	r3, r7
 8000504:	2200      	movs	r2, #0
 8000506:	4619      	mov	r1, r3
 8000508:	480c      	ldr	r0, [pc, #48]	; (800053c <MX_TIM3_Init+0xfc>)
 800050a:	f001 ff8f 	bl	800242c <HAL_TIM_PWM_ConfigChannel>
 800050e:	4603      	mov	r3, r0
 8000510:	2b00      	cmp	r3, #0
 8000512:	d001      	beq.n	8000518 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000514:	f7ff ff29 	bl	800036a <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000518:	463b      	mov	r3, r7
 800051a:	2204      	movs	r2, #4
 800051c:	4619      	mov	r1, r3
 800051e:	4807      	ldr	r0, [pc, #28]	; (800053c <MX_TIM3_Init+0xfc>)
 8000520:	f001 ff84 	bl	800242c <HAL_TIM_PWM_ConfigChannel>
 8000524:	4603      	mov	r3, r0
 8000526:	2b00      	cmp	r3, #0
 8000528:	d001      	beq.n	800052e <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 800052a:	f7ff ff1e 	bl	800036a <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 800052e:	4803      	ldr	r0, [pc, #12]	; (800053c <MX_TIM3_Init+0xfc>)
 8000530:	f000 f828 	bl	8000584 <HAL_TIM_MspPostInit>

}
 8000534:	bf00      	nop
 8000536:	3738      	adds	r7, #56	; 0x38
 8000538:	46bd      	mov	sp, r7
 800053a:	bd80      	pop	{r7, pc}
 800053c:	20000028 	.word	0x20000028
 8000540:	40000400 	.word	0x40000400

08000544 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000544:	b480      	push	{r7}
 8000546:	b085      	sub	sp, #20
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	4a0a      	ldr	r2, [pc, #40]	; (800057c <HAL_TIM_Base_MspInit+0x38>)
 8000552:	4293      	cmp	r3, r2
 8000554:	d10b      	bne.n	800056e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000556:	4b0a      	ldr	r3, [pc, #40]	; (8000580 <HAL_TIM_Base_MspInit+0x3c>)
 8000558:	69db      	ldr	r3, [r3, #28]
 800055a:	4a09      	ldr	r2, [pc, #36]	; (8000580 <HAL_TIM_Base_MspInit+0x3c>)
 800055c:	f043 0302 	orr.w	r3, r3, #2
 8000560:	61d3      	str	r3, [r2, #28]
 8000562:	4b07      	ldr	r3, [pc, #28]	; (8000580 <HAL_TIM_Base_MspInit+0x3c>)
 8000564:	69db      	ldr	r3, [r3, #28]
 8000566:	f003 0302 	and.w	r3, r3, #2
 800056a:	60fb      	str	r3, [r7, #12]
 800056c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800056e:	bf00      	nop
 8000570:	3714      	adds	r7, #20
 8000572:	46bd      	mov	sp, r7
 8000574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop
 800057c:	40000400 	.word	0x40000400
 8000580:	40021000 	.word	0x40021000

08000584 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b088      	sub	sp, #32
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800058c:	f107 030c 	add.w	r3, r7, #12
 8000590:	2200      	movs	r2, #0
 8000592:	601a      	str	r2, [r3, #0]
 8000594:	605a      	str	r2, [r3, #4]
 8000596:	609a      	str	r2, [r3, #8]
 8000598:	60da      	str	r2, [r3, #12]
 800059a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	4a11      	ldr	r2, [pc, #68]	; (80005e8 <HAL_TIM_MspPostInit+0x64>)
 80005a2:	4293      	cmp	r3, r2
 80005a4:	d11c      	bne.n	80005e0 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005a6:	4b11      	ldr	r3, [pc, #68]	; (80005ec <HAL_TIM_MspPostInit+0x68>)
 80005a8:	695b      	ldr	r3, [r3, #20]
 80005aa:	4a10      	ldr	r2, [pc, #64]	; (80005ec <HAL_TIM_MspPostInit+0x68>)
 80005ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005b0:	6153      	str	r3, [r2, #20]
 80005b2:	4b0e      	ldr	r3, [pc, #56]	; (80005ec <HAL_TIM_MspPostInit+0x68>)
 80005b4:	695b      	ldr	r3, [r3, #20]
 80005b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005ba:	60bb      	str	r3, [r7, #8]
 80005bc:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = PWM1_Pin|PWM2_Pin;
 80005be:	2350      	movs	r3, #80	; 0x50
 80005c0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005c2:	2302      	movs	r3, #2
 80005c4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c6:	2300      	movs	r3, #0
 80005c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005ca:	2300      	movs	r3, #0
 80005cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80005ce:	2302      	movs	r3, #2
 80005d0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005d2:	f107 030c 	add.w	r3, r7, #12
 80005d6:	4619      	mov	r1, r3
 80005d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005dc:	f000 fa68 	bl	8000ab0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80005e0:	bf00      	nop
 80005e2:	3720      	adds	r7, #32
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	40000400 	.word	0x40000400
 80005ec:	40021000 	.word	0x40021000

080005f0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 80005f4:	4b16      	ldr	r3, [pc, #88]	; (8000650 <MX_USART1_UART_Init+0x60>)
 80005f6:	4a17      	ldr	r2, [pc, #92]	; (8000654 <MX_USART1_UART_Init+0x64>)
 80005f8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80005fa:	4b15      	ldr	r3, [pc, #84]	; (8000650 <MX_USART1_UART_Init+0x60>)
 80005fc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000600:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000602:	4b13      	ldr	r3, [pc, #76]	; (8000650 <MX_USART1_UART_Init+0x60>)
 8000604:	2200      	movs	r2, #0
 8000606:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000608:	4b11      	ldr	r3, [pc, #68]	; (8000650 <MX_USART1_UART_Init+0x60>)
 800060a:	2200      	movs	r2, #0
 800060c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800060e:	4b10      	ldr	r3, [pc, #64]	; (8000650 <MX_USART1_UART_Init+0x60>)
 8000610:	2200      	movs	r2, #0
 8000612:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000614:	4b0e      	ldr	r3, [pc, #56]	; (8000650 <MX_USART1_UART_Init+0x60>)
 8000616:	220c      	movs	r2, #12
 8000618:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800061a:	4b0d      	ldr	r3, [pc, #52]	; (8000650 <MX_USART1_UART_Init+0x60>)
 800061c:	2200      	movs	r2, #0
 800061e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000620:	4b0b      	ldr	r3, [pc, #44]	; (8000650 <MX_USART1_UART_Init+0x60>)
 8000622:	2200      	movs	r2, #0
 8000624:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000626:	4b0a      	ldr	r3, [pc, #40]	; (8000650 <MX_USART1_UART_Init+0x60>)
 8000628:	2200      	movs	r2, #0
 800062a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 800062c:	4b08      	ldr	r3, [pc, #32]	; (8000650 <MX_USART1_UART_Init+0x60>)
 800062e:	2210      	movs	r2, #16
 8000630:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8000632:	4b07      	ldr	r3, [pc, #28]	; (8000650 <MX_USART1_UART_Init+0x60>)
 8000634:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000638:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 800063a:	4805      	ldr	r0, [pc, #20]	; (8000650 <MX_USART1_UART_Init+0x60>)
 800063c:	f002 fd3c 	bl	80030b8 <HAL_HalfDuplex_Init>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d001      	beq.n	800064a <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8000646:	f7ff fe90 	bl	800036a <Error_Handler>
  }

}
 800064a:	bf00      	nop
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	20000074 	.word	0x20000074
 8000654:	40013800 	.word	0x40013800

08000658 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 800065c:	4b14      	ldr	r3, [pc, #80]	; (80006b0 <MX_USART2_UART_Init+0x58>)
 800065e:	4a15      	ldr	r2, [pc, #84]	; (80006b4 <MX_USART2_UART_Init+0x5c>)
 8000660:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000662:	4b13      	ldr	r3, [pc, #76]	; (80006b0 <MX_USART2_UART_Init+0x58>)
 8000664:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000668:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800066a:	4b11      	ldr	r3, [pc, #68]	; (80006b0 <MX_USART2_UART_Init+0x58>)
 800066c:	2200      	movs	r2, #0
 800066e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000670:	4b0f      	ldr	r3, [pc, #60]	; (80006b0 <MX_USART2_UART_Init+0x58>)
 8000672:	2200      	movs	r2, #0
 8000674:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000676:	4b0e      	ldr	r3, [pc, #56]	; (80006b0 <MX_USART2_UART_Init+0x58>)
 8000678:	2200      	movs	r2, #0
 800067a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800067c:	4b0c      	ldr	r3, [pc, #48]	; (80006b0 <MX_USART2_UART_Init+0x58>)
 800067e:	220c      	movs	r2, #12
 8000680:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000682:	4b0b      	ldr	r3, [pc, #44]	; (80006b0 <MX_USART2_UART_Init+0x58>)
 8000684:	2200      	movs	r2, #0
 8000686:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000688:	4b09      	ldr	r3, [pc, #36]	; (80006b0 <MX_USART2_UART_Init+0x58>)
 800068a:	2200      	movs	r2, #0
 800068c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800068e:	4b08      	ldr	r3, [pc, #32]	; (80006b0 <MX_USART2_UART_Init+0x58>)
 8000690:	2200      	movs	r2, #0
 8000692:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000694:	4b06      	ldr	r3, [pc, #24]	; (80006b0 <MX_USART2_UART_Init+0x58>)
 8000696:	2200      	movs	r2, #0
 8000698:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800069a:	4805      	ldr	r0, [pc, #20]	; (80006b0 <MX_USART2_UART_Init+0x58>)
 800069c:	f002 fcbe 	bl	800301c <HAL_UART_Init>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80006a6:	f7ff fe60 	bl	800036a <Error_Handler>
  }

}
 80006aa:	bf00      	nop
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	200000f8 	.word	0x200000f8
 80006b4:	40004400 	.word	0x40004400

080006b8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b08c      	sub	sp, #48	; 0x30
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006c0:	f107 031c 	add.w	r3, r7, #28
 80006c4:	2200      	movs	r2, #0
 80006c6:	601a      	str	r2, [r3, #0]
 80006c8:	605a      	str	r2, [r3, #4]
 80006ca:	609a      	str	r2, [r3, #8]
 80006cc:	60da      	str	r2, [r3, #12]
 80006ce:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	4a38      	ldr	r2, [pc, #224]	; (80007b8 <HAL_UART_MspInit+0x100>)
 80006d6:	4293      	cmp	r3, r2
 80006d8:	d12a      	bne.n	8000730 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80006da:	4b38      	ldr	r3, [pc, #224]	; (80007bc <HAL_UART_MspInit+0x104>)
 80006dc:	699b      	ldr	r3, [r3, #24]
 80006de:	4a37      	ldr	r2, [pc, #220]	; (80007bc <HAL_UART_MspInit+0x104>)
 80006e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006e4:	6193      	str	r3, [r2, #24]
 80006e6:	4b35      	ldr	r3, [pc, #212]	; (80007bc <HAL_UART_MspInit+0x104>)
 80006e8:	699b      	ldr	r3, [r3, #24]
 80006ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006ee:	61bb      	str	r3, [r7, #24]
 80006f0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006f2:	4b32      	ldr	r3, [pc, #200]	; (80007bc <HAL_UART_MspInit+0x104>)
 80006f4:	695b      	ldr	r3, [r3, #20]
 80006f6:	4a31      	ldr	r2, [pc, #196]	; (80007bc <HAL_UART_MspInit+0x104>)
 80006f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006fc:	6153      	str	r3, [r2, #20]
 80006fe:	4b2f      	ldr	r3, [pc, #188]	; (80007bc <HAL_UART_MspInit+0x104>)
 8000700:	695b      	ldr	r3, [r3, #20]
 8000702:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000706:	617b      	str	r3, [r7, #20]
 8000708:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = OWIRE_Pin;
 800070a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800070e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000710:	2312      	movs	r3, #18
 8000712:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000714:	2300      	movs	r3, #0
 8000716:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000718:	2303      	movs	r3, #3
 800071a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800071c:	2307      	movs	r3, #7
 800071e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(OWIRE_GPIO_Port, &GPIO_InitStruct);
 8000720:	f107 031c 	add.w	r3, r7, #28
 8000724:	4619      	mov	r1, r3
 8000726:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800072a:	f000 f9c1 	bl	8000ab0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800072e:	e03f      	b.n	80007b0 <HAL_UART_MspInit+0xf8>
  else if(uartHandle->Instance==USART2)
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	4a22      	ldr	r2, [pc, #136]	; (80007c0 <HAL_UART_MspInit+0x108>)
 8000736:	4293      	cmp	r3, r2
 8000738:	d13a      	bne.n	80007b0 <HAL_UART_MspInit+0xf8>
    __HAL_RCC_USART2_CLK_ENABLE();
 800073a:	4b20      	ldr	r3, [pc, #128]	; (80007bc <HAL_UART_MspInit+0x104>)
 800073c:	69db      	ldr	r3, [r3, #28]
 800073e:	4a1f      	ldr	r2, [pc, #124]	; (80007bc <HAL_UART_MspInit+0x104>)
 8000740:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000744:	61d3      	str	r3, [r2, #28]
 8000746:	4b1d      	ldr	r3, [pc, #116]	; (80007bc <HAL_UART_MspInit+0x104>)
 8000748:	69db      	ldr	r3, [r3, #28]
 800074a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800074e:	613b      	str	r3, [r7, #16]
 8000750:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000752:	4b1a      	ldr	r3, [pc, #104]	; (80007bc <HAL_UART_MspInit+0x104>)
 8000754:	695b      	ldr	r3, [r3, #20]
 8000756:	4a19      	ldr	r2, [pc, #100]	; (80007bc <HAL_UART_MspInit+0x104>)
 8000758:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800075c:	6153      	str	r3, [r2, #20]
 800075e:	4b17      	ldr	r3, [pc, #92]	; (80007bc <HAL_UART_MspInit+0x104>)
 8000760:	695b      	ldr	r3, [r3, #20]
 8000762:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000766:	60fb      	str	r3, [r7, #12]
 8000768:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 800076a:	2304      	movs	r3, #4
 800076c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800076e:	2312      	movs	r3, #18
 8000770:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000772:	2300      	movs	r3, #0
 8000774:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000776:	2303      	movs	r3, #3
 8000778:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800077a:	2307      	movs	r3, #7
 800077c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 800077e:	f107 031c 	add.w	r3, r7, #28
 8000782:	4619      	mov	r1, r3
 8000784:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000788:	f000 f992 	bl	8000ab0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 800078c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000790:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000792:	2302      	movs	r3, #2
 8000794:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000796:	2300      	movs	r3, #0
 8000798:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800079a:	2303      	movs	r3, #3
 800079c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800079e:	2307      	movs	r3, #7
 80007a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80007a2:	f107 031c 	add.w	r3, r7, #28
 80007a6:	4619      	mov	r1, r3
 80007a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007ac:	f000 f980 	bl	8000ab0 <HAL_GPIO_Init>
}
 80007b0:	bf00      	nop
 80007b2:	3730      	adds	r7, #48	; 0x30
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	40013800 	.word	0x40013800
 80007bc:	40021000 	.word	0x40021000
 80007c0:	40004400 	.word	0x40004400

080007c4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80007c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80007fc <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007c8:	480d      	ldr	r0, [pc, #52]	; (8000800 <LoopForever+0x6>)
  ldr r1, =_edata
 80007ca:	490e      	ldr	r1, [pc, #56]	; (8000804 <LoopForever+0xa>)
  ldr r2, =_sidata
 80007cc:	4a0e      	ldr	r2, [pc, #56]	; (8000808 <LoopForever+0xe>)
  movs r3, #0
 80007ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007d0:	e002      	b.n	80007d8 <LoopCopyDataInit>

080007d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007d6:	3304      	adds	r3, #4

080007d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007dc:	d3f9      	bcc.n	80007d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007de:	4a0b      	ldr	r2, [pc, #44]	; (800080c <LoopForever+0x12>)
  ldr r4, =_ebss
 80007e0:	4c0b      	ldr	r4, [pc, #44]	; (8000810 <LoopForever+0x16>)
  movs r3, #0
 80007e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007e4:	e001      	b.n	80007ea <LoopFillZerobss>

080007e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007e8:	3204      	adds	r2, #4

080007ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007ec:	d3fb      	bcc.n	80007e6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80007ee:	f7ff fe15 	bl	800041c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80007f2:	f002 ff9f 	bl	8003734 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80007f6:	f7ff fd4d 	bl	8000294 <main>

080007fa <LoopForever>:

LoopForever:
    b LoopForever
 80007fa:	e7fe      	b.n	80007fa <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80007fc:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000800:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000804:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000808:	080037e4 	.word	0x080037e4
  ldr r2, =_sbss
 800080c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000810:	20000180 	.word	0x20000180

08000814 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000814:	e7fe      	b.n	8000814 <ADC1_2_IRQHandler>
	...

08000818 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800081c:	4b08      	ldr	r3, [pc, #32]	; (8000840 <HAL_Init+0x28>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	4a07      	ldr	r2, [pc, #28]	; (8000840 <HAL_Init+0x28>)
 8000822:	f043 0310 	orr.w	r3, r3, #16
 8000826:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000828:	2003      	movs	r0, #3
 800082a:	f000 f90d 	bl	8000a48 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800082e:	2000      	movs	r0, #0
 8000830:	f000 f808 	bl	8000844 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000834:	f7ff fda0 	bl	8000378 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000838:	2300      	movs	r3, #0
}
 800083a:	4618      	mov	r0, r3
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	40022000 	.word	0x40022000

08000844 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800084c:	4b12      	ldr	r3, [pc, #72]	; (8000898 <HAL_InitTick+0x54>)
 800084e:	681a      	ldr	r2, [r3, #0]
 8000850:	4b12      	ldr	r3, [pc, #72]	; (800089c <HAL_InitTick+0x58>)
 8000852:	781b      	ldrb	r3, [r3, #0]
 8000854:	4619      	mov	r1, r3
 8000856:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800085a:	fbb3 f3f1 	udiv	r3, r3, r1
 800085e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000862:	4618      	mov	r0, r3
 8000864:	f000 f917 	bl	8000a96 <HAL_SYSTICK_Config>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800086e:	2301      	movs	r3, #1
 8000870:	e00e      	b.n	8000890 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	2b0f      	cmp	r3, #15
 8000876:	d80a      	bhi.n	800088e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000878:	2200      	movs	r2, #0
 800087a:	6879      	ldr	r1, [r7, #4]
 800087c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000880:	f000 f8ed 	bl	8000a5e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000884:	4a06      	ldr	r2, [pc, #24]	; (80008a0 <HAL_InitTick+0x5c>)
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800088a:	2300      	movs	r3, #0
 800088c:	e000      	b.n	8000890 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800088e:	2301      	movs	r3, #1
}
 8000890:	4618      	mov	r0, r3
 8000892:	3708      	adds	r7, #8
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	20000000 	.word	0x20000000
 800089c:	20000008 	.word	0x20000008
 80008a0:	20000004 	.word	0x20000004

080008a4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008a8:	4b06      	ldr	r3, [pc, #24]	; (80008c4 <HAL_IncTick+0x20>)
 80008aa:	781b      	ldrb	r3, [r3, #0]
 80008ac:	461a      	mov	r2, r3
 80008ae:	4b06      	ldr	r3, [pc, #24]	; (80008c8 <HAL_IncTick+0x24>)
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	4413      	add	r3, r2
 80008b4:	4a04      	ldr	r2, [pc, #16]	; (80008c8 <HAL_IncTick+0x24>)
 80008b6:	6013      	str	r3, [r2, #0]
}
 80008b8:	bf00      	nop
 80008ba:	46bd      	mov	sp, r7
 80008bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c0:	4770      	bx	lr
 80008c2:	bf00      	nop
 80008c4:	20000008 	.word	0x20000008
 80008c8:	2000017c 	.word	0x2000017c

080008cc <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0
  return uwTick;  
 80008d0:	4b03      	ldr	r3, [pc, #12]	; (80008e0 <HAL_GetTick+0x14>)
 80008d2:	681b      	ldr	r3, [r3, #0]
}
 80008d4:	4618      	mov	r0, r3
 80008d6:	46bd      	mov	sp, r7
 80008d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008dc:	4770      	bx	lr
 80008de:	bf00      	nop
 80008e0:	2000017c 	.word	0x2000017c

080008e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008e4:	b480      	push	{r7}
 80008e6:	b085      	sub	sp, #20
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	f003 0307 	and.w	r3, r3, #7
 80008f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008f4:	4b0c      	ldr	r3, [pc, #48]	; (8000928 <__NVIC_SetPriorityGrouping+0x44>)
 80008f6:	68db      	ldr	r3, [r3, #12]
 80008f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008fa:	68ba      	ldr	r2, [r7, #8]
 80008fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000900:	4013      	ands	r3, r2
 8000902:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000904:	68fb      	ldr	r3, [r7, #12]
 8000906:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000908:	68bb      	ldr	r3, [r7, #8]
 800090a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800090c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000910:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000914:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000916:	4a04      	ldr	r2, [pc, #16]	; (8000928 <__NVIC_SetPriorityGrouping+0x44>)
 8000918:	68bb      	ldr	r3, [r7, #8]
 800091a:	60d3      	str	r3, [r2, #12]
}
 800091c:	bf00      	nop
 800091e:	3714      	adds	r7, #20
 8000920:	46bd      	mov	sp, r7
 8000922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000926:	4770      	bx	lr
 8000928:	e000ed00 	.word	0xe000ed00

0800092c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000930:	4b04      	ldr	r3, [pc, #16]	; (8000944 <__NVIC_GetPriorityGrouping+0x18>)
 8000932:	68db      	ldr	r3, [r3, #12]
 8000934:	0a1b      	lsrs	r3, r3, #8
 8000936:	f003 0307 	and.w	r3, r3, #7
}
 800093a:	4618      	mov	r0, r3
 800093c:	46bd      	mov	sp, r7
 800093e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000942:	4770      	bx	lr
 8000944:	e000ed00 	.word	0xe000ed00

08000948 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000948:	b480      	push	{r7}
 800094a:	b083      	sub	sp, #12
 800094c:	af00      	add	r7, sp, #0
 800094e:	4603      	mov	r3, r0
 8000950:	6039      	str	r1, [r7, #0]
 8000952:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000954:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000958:	2b00      	cmp	r3, #0
 800095a:	db0a      	blt.n	8000972 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800095c:	683b      	ldr	r3, [r7, #0]
 800095e:	b2da      	uxtb	r2, r3
 8000960:	490c      	ldr	r1, [pc, #48]	; (8000994 <__NVIC_SetPriority+0x4c>)
 8000962:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000966:	0112      	lsls	r2, r2, #4
 8000968:	b2d2      	uxtb	r2, r2
 800096a:	440b      	add	r3, r1
 800096c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000970:	e00a      	b.n	8000988 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000972:	683b      	ldr	r3, [r7, #0]
 8000974:	b2da      	uxtb	r2, r3
 8000976:	4908      	ldr	r1, [pc, #32]	; (8000998 <__NVIC_SetPriority+0x50>)
 8000978:	79fb      	ldrb	r3, [r7, #7]
 800097a:	f003 030f 	and.w	r3, r3, #15
 800097e:	3b04      	subs	r3, #4
 8000980:	0112      	lsls	r2, r2, #4
 8000982:	b2d2      	uxtb	r2, r2
 8000984:	440b      	add	r3, r1
 8000986:	761a      	strb	r2, [r3, #24]
}
 8000988:	bf00      	nop
 800098a:	370c      	adds	r7, #12
 800098c:	46bd      	mov	sp, r7
 800098e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000992:	4770      	bx	lr
 8000994:	e000e100 	.word	0xe000e100
 8000998:	e000ed00 	.word	0xe000ed00

0800099c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800099c:	b480      	push	{r7}
 800099e:	b089      	sub	sp, #36	; 0x24
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	60f8      	str	r0, [r7, #12]
 80009a4:	60b9      	str	r1, [r7, #8]
 80009a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009a8:	68fb      	ldr	r3, [r7, #12]
 80009aa:	f003 0307 	and.w	r3, r3, #7
 80009ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009b0:	69fb      	ldr	r3, [r7, #28]
 80009b2:	f1c3 0307 	rsb	r3, r3, #7
 80009b6:	2b04      	cmp	r3, #4
 80009b8:	bf28      	it	cs
 80009ba:	2304      	movcs	r3, #4
 80009bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009be:	69fb      	ldr	r3, [r7, #28]
 80009c0:	3304      	adds	r3, #4
 80009c2:	2b06      	cmp	r3, #6
 80009c4:	d902      	bls.n	80009cc <NVIC_EncodePriority+0x30>
 80009c6:	69fb      	ldr	r3, [r7, #28]
 80009c8:	3b03      	subs	r3, #3
 80009ca:	e000      	b.n	80009ce <NVIC_EncodePriority+0x32>
 80009cc:	2300      	movs	r3, #0
 80009ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80009d4:	69bb      	ldr	r3, [r7, #24]
 80009d6:	fa02 f303 	lsl.w	r3, r2, r3
 80009da:	43da      	mvns	r2, r3
 80009dc:	68bb      	ldr	r3, [r7, #8]
 80009de:	401a      	ands	r2, r3
 80009e0:	697b      	ldr	r3, [r7, #20]
 80009e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009e4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80009e8:	697b      	ldr	r3, [r7, #20]
 80009ea:	fa01 f303 	lsl.w	r3, r1, r3
 80009ee:	43d9      	mvns	r1, r3
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009f4:	4313      	orrs	r3, r2
         );
}
 80009f6:	4618      	mov	r0, r3
 80009f8:	3724      	adds	r7, #36	; 0x24
 80009fa:	46bd      	mov	sp, r7
 80009fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a00:	4770      	bx	lr
	...

08000a04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b082      	sub	sp, #8
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	3b01      	subs	r3, #1
 8000a10:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a14:	d301      	bcc.n	8000a1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a16:	2301      	movs	r3, #1
 8000a18:	e00f      	b.n	8000a3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a1a:	4a0a      	ldr	r2, [pc, #40]	; (8000a44 <SysTick_Config+0x40>)
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	3b01      	subs	r3, #1
 8000a20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a22:	210f      	movs	r1, #15
 8000a24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a28:	f7ff ff8e 	bl	8000948 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a2c:	4b05      	ldr	r3, [pc, #20]	; (8000a44 <SysTick_Config+0x40>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a32:	4b04      	ldr	r3, [pc, #16]	; (8000a44 <SysTick_Config+0x40>)
 8000a34:	2207      	movs	r2, #7
 8000a36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a38:	2300      	movs	r3, #0
}
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	3708      	adds	r7, #8
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	e000e010 	.word	0xe000e010

08000a48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b082      	sub	sp, #8
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a50:	6878      	ldr	r0, [r7, #4]
 8000a52:	f7ff ff47 	bl	80008e4 <__NVIC_SetPriorityGrouping>
}
 8000a56:	bf00      	nop
 8000a58:	3708      	adds	r7, #8
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}

08000a5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a5e:	b580      	push	{r7, lr}
 8000a60:	b086      	sub	sp, #24
 8000a62:	af00      	add	r7, sp, #0
 8000a64:	4603      	mov	r3, r0
 8000a66:	60b9      	str	r1, [r7, #8]
 8000a68:	607a      	str	r2, [r7, #4]
 8000a6a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a70:	f7ff ff5c 	bl	800092c <__NVIC_GetPriorityGrouping>
 8000a74:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a76:	687a      	ldr	r2, [r7, #4]
 8000a78:	68b9      	ldr	r1, [r7, #8]
 8000a7a:	6978      	ldr	r0, [r7, #20]
 8000a7c:	f7ff ff8e 	bl	800099c <NVIC_EncodePriority>
 8000a80:	4602      	mov	r2, r0
 8000a82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a86:	4611      	mov	r1, r2
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f7ff ff5d 	bl	8000948 <__NVIC_SetPriority>
}
 8000a8e:	bf00      	nop
 8000a90:	3718      	adds	r7, #24
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}

08000a96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a96:	b580      	push	{r7, lr}
 8000a98:	b082      	sub	sp, #8
 8000a9a:	af00      	add	r7, sp, #0
 8000a9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a9e:	6878      	ldr	r0, [r7, #4]
 8000aa0:	f7ff ffb0 	bl	8000a04 <SysTick_Config>
 8000aa4:	4603      	mov	r3, r0
}
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	3708      	adds	r7, #8
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
	...

08000ab0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	b087      	sub	sp, #28
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
 8000ab8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000aba:	2300      	movs	r3, #0
 8000abc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000abe:	e14e      	b.n	8000d5e <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ac0:	683b      	ldr	r3, [r7, #0]
 8000ac2:	681a      	ldr	r2, [r3, #0]
 8000ac4:	2101      	movs	r1, #1
 8000ac6:	697b      	ldr	r3, [r7, #20]
 8000ac8:	fa01 f303 	lsl.w	r3, r1, r3
 8000acc:	4013      	ands	r3, r2
 8000ace:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	f000 8140 	beq.w	8000d58 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ad8:	683b      	ldr	r3, [r7, #0]
 8000ada:	685b      	ldr	r3, [r3, #4]
 8000adc:	f003 0303 	and.w	r3, r3, #3
 8000ae0:	2b01      	cmp	r3, #1
 8000ae2:	d005      	beq.n	8000af0 <HAL_GPIO_Init+0x40>
 8000ae4:	683b      	ldr	r3, [r7, #0]
 8000ae6:	685b      	ldr	r3, [r3, #4]
 8000ae8:	f003 0303 	and.w	r3, r3, #3
 8000aec:	2b02      	cmp	r3, #2
 8000aee:	d130      	bne.n	8000b52 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	689b      	ldr	r3, [r3, #8]
 8000af4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000af6:	697b      	ldr	r3, [r7, #20]
 8000af8:	005b      	lsls	r3, r3, #1
 8000afa:	2203      	movs	r2, #3
 8000afc:	fa02 f303 	lsl.w	r3, r2, r3
 8000b00:	43db      	mvns	r3, r3
 8000b02:	693a      	ldr	r2, [r7, #16]
 8000b04:	4013      	ands	r3, r2
 8000b06:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000b08:	683b      	ldr	r3, [r7, #0]
 8000b0a:	68da      	ldr	r2, [r3, #12]
 8000b0c:	697b      	ldr	r3, [r7, #20]
 8000b0e:	005b      	lsls	r3, r3, #1
 8000b10:	fa02 f303 	lsl.w	r3, r2, r3
 8000b14:	693a      	ldr	r2, [r7, #16]
 8000b16:	4313      	orrs	r3, r2
 8000b18:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	693a      	ldr	r2, [r7, #16]
 8000b1e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	685b      	ldr	r3, [r3, #4]
 8000b24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b26:	2201      	movs	r2, #1
 8000b28:	697b      	ldr	r3, [r7, #20]
 8000b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b2e:	43db      	mvns	r3, r3
 8000b30:	693a      	ldr	r2, [r7, #16]
 8000b32:	4013      	ands	r3, r2
 8000b34:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b36:	683b      	ldr	r3, [r7, #0]
 8000b38:	685b      	ldr	r3, [r3, #4]
 8000b3a:	091b      	lsrs	r3, r3, #4
 8000b3c:	f003 0201 	and.w	r2, r3, #1
 8000b40:	697b      	ldr	r3, [r7, #20]
 8000b42:	fa02 f303 	lsl.w	r3, r2, r3
 8000b46:	693a      	ldr	r2, [r7, #16]
 8000b48:	4313      	orrs	r3, r2
 8000b4a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	693a      	ldr	r2, [r7, #16]
 8000b50:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b52:	683b      	ldr	r3, [r7, #0]
 8000b54:	685b      	ldr	r3, [r3, #4]
 8000b56:	f003 0303 	and.w	r3, r3, #3
 8000b5a:	2b03      	cmp	r3, #3
 8000b5c:	d017      	beq.n	8000b8e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	68db      	ldr	r3, [r3, #12]
 8000b62:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000b64:	697b      	ldr	r3, [r7, #20]
 8000b66:	005b      	lsls	r3, r3, #1
 8000b68:	2203      	movs	r2, #3
 8000b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b6e:	43db      	mvns	r3, r3
 8000b70:	693a      	ldr	r2, [r7, #16]
 8000b72:	4013      	ands	r3, r2
 8000b74:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000b76:	683b      	ldr	r3, [r7, #0]
 8000b78:	689a      	ldr	r2, [r3, #8]
 8000b7a:	697b      	ldr	r3, [r7, #20]
 8000b7c:	005b      	lsls	r3, r3, #1
 8000b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b82:	693a      	ldr	r2, [r7, #16]
 8000b84:	4313      	orrs	r3, r2
 8000b86:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	693a      	ldr	r2, [r7, #16]
 8000b8c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b8e:	683b      	ldr	r3, [r7, #0]
 8000b90:	685b      	ldr	r3, [r3, #4]
 8000b92:	f003 0303 	and.w	r3, r3, #3
 8000b96:	2b02      	cmp	r3, #2
 8000b98:	d123      	bne.n	8000be2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000b9a:	697b      	ldr	r3, [r7, #20]
 8000b9c:	08da      	lsrs	r2, r3, #3
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	3208      	adds	r2, #8
 8000ba2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ba6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000ba8:	697b      	ldr	r3, [r7, #20]
 8000baa:	f003 0307 	and.w	r3, r3, #7
 8000bae:	009b      	lsls	r3, r3, #2
 8000bb0:	220f      	movs	r2, #15
 8000bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb6:	43db      	mvns	r3, r3
 8000bb8:	693a      	ldr	r2, [r7, #16]
 8000bba:	4013      	ands	r3, r2
 8000bbc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000bbe:	683b      	ldr	r3, [r7, #0]
 8000bc0:	691a      	ldr	r2, [r3, #16]
 8000bc2:	697b      	ldr	r3, [r7, #20]
 8000bc4:	f003 0307 	and.w	r3, r3, #7
 8000bc8:	009b      	lsls	r3, r3, #2
 8000bca:	fa02 f303 	lsl.w	r3, r2, r3
 8000bce:	693a      	ldr	r2, [r7, #16]
 8000bd0:	4313      	orrs	r3, r2
 8000bd2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000bd4:	697b      	ldr	r3, [r7, #20]
 8000bd6:	08da      	lsrs	r2, r3, #3
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	3208      	adds	r2, #8
 8000bdc:	6939      	ldr	r1, [r7, #16]
 8000bde:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000be8:	697b      	ldr	r3, [r7, #20]
 8000bea:	005b      	lsls	r3, r3, #1
 8000bec:	2203      	movs	r2, #3
 8000bee:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf2:	43db      	mvns	r3, r3
 8000bf4:	693a      	ldr	r2, [r7, #16]
 8000bf6:	4013      	ands	r3, r2
 8000bf8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	685b      	ldr	r3, [r3, #4]
 8000bfe:	f003 0203 	and.w	r2, r3, #3
 8000c02:	697b      	ldr	r3, [r7, #20]
 8000c04:	005b      	lsls	r3, r3, #1
 8000c06:	fa02 f303 	lsl.w	r3, r2, r3
 8000c0a:	693a      	ldr	r2, [r7, #16]
 8000c0c:	4313      	orrs	r3, r2
 8000c0e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	693a      	ldr	r2, [r7, #16]
 8000c14:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000c16:	683b      	ldr	r3, [r7, #0]
 8000c18:	685b      	ldr	r3, [r3, #4]
 8000c1a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	f000 809a 	beq.w	8000d58 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c24:	4b55      	ldr	r3, [pc, #340]	; (8000d7c <HAL_GPIO_Init+0x2cc>)
 8000c26:	699b      	ldr	r3, [r3, #24]
 8000c28:	4a54      	ldr	r2, [pc, #336]	; (8000d7c <HAL_GPIO_Init+0x2cc>)
 8000c2a:	f043 0301 	orr.w	r3, r3, #1
 8000c2e:	6193      	str	r3, [r2, #24]
 8000c30:	4b52      	ldr	r3, [pc, #328]	; (8000d7c <HAL_GPIO_Init+0x2cc>)
 8000c32:	699b      	ldr	r3, [r3, #24]
 8000c34:	f003 0301 	and.w	r3, r3, #1
 8000c38:	60bb      	str	r3, [r7, #8]
 8000c3a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000c3c:	4a50      	ldr	r2, [pc, #320]	; (8000d80 <HAL_GPIO_Init+0x2d0>)
 8000c3e:	697b      	ldr	r3, [r7, #20]
 8000c40:	089b      	lsrs	r3, r3, #2
 8000c42:	3302      	adds	r3, #2
 8000c44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c48:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000c4a:	697b      	ldr	r3, [r7, #20]
 8000c4c:	f003 0303 	and.w	r3, r3, #3
 8000c50:	009b      	lsls	r3, r3, #2
 8000c52:	220f      	movs	r2, #15
 8000c54:	fa02 f303 	lsl.w	r3, r2, r3
 8000c58:	43db      	mvns	r3, r3
 8000c5a:	693a      	ldr	r2, [r7, #16]
 8000c5c:	4013      	ands	r3, r2
 8000c5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000c66:	d013      	beq.n	8000c90 <HAL_GPIO_Init+0x1e0>
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	4a46      	ldr	r2, [pc, #280]	; (8000d84 <HAL_GPIO_Init+0x2d4>)
 8000c6c:	4293      	cmp	r3, r2
 8000c6e:	d00d      	beq.n	8000c8c <HAL_GPIO_Init+0x1dc>
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	4a45      	ldr	r2, [pc, #276]	; (8000d88 <HAL_GPIO_Init+0x2d8>)
 8000c74:	4293      	cmp	r3, r2
 8000c76:	d007      	beq.n	8000c88 <HAL_GPIO_Init+0x1d8>
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	4a44      	ldr	r2, [pc, #272]	; (8000d8c <HAL_GPIO_Init+0x2dc>)
 8000c7c:	4293      	cmp	r3, r2
 8000c7e:	d101      	bne.n	8000c84 <HAL_GPIO_Init+0x1d4>
 8000c80:	2303      	movs	r3, #3
 8000c82:	e006      	b.n	8000c92 <HAL_GPIO_Init+0x1e2>
 8000c84:	2305      	movs	r3, #5
 8000c86:	e004      	b.n	8000c92 <HAL_GPIO_Init+0x1e2>
 8000c88:	2302      	movs	r3, #2
 8000c8a:	e002      	b.n	8000c92 <HAL_GPIO_Init+0x1e2>
 8000c8c:	2301      	movs	r3, #1
 8000c8e:	e000      	b.n	8000c92 <HAL_GPIO_Init+0x1e2>
 8000c90:	2300      	movs	r3, #0
 8000c92:	697a      	ldr	r2, [r7, #20]
 8000c94:	f002 0203 	and.w	r2, r2, #3
 8000c98:	0092      	lsls	r2, r2, #2
 8000c9a:	4093      	lsls	r3, r2
 8000c9c:	693a      	ldr	r2, [r7, #16]
 8000c9e:	4313      	orrs	r3, r2
 8000ca0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000ca2:	4937      	ldr	r1, [pc, #220]	; (8000d80 <HAL_GPIO_Init+0x2d0>)
 8000ca4:	697b      	ldr	r3, [r7, #20]
 8000ca6:	089b      	lsrs	r3, r3, #2
 8000ca8:	3302      	adds	r3, #2
 8000caa:	693a      	ldr	r2, [r7, #16]
 8000cac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000cb0:	4b37      	ldr	r3, [pc, #220]	; (8000d90 <HAL_GPIO_Init+0x2e0>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	43db      	mvns	r3, r3
 8000cba:	693a      	ldr	r2, [r7, #16]
 8000cbc:	4013      	ands	r3, r2
 8000cbe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	685b      	ldr	r3, [r3, #4]
 8000cc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d003      	beq.n	8000cd4 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8000ccc:	693a      	ldr	r2, [r7, #16]
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	4313      	orrs	r3, r2
 8000cd2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000cd4:	4a2e      	ldr	r2, [pc, #184]	; (8000d90 <HAL_GPIO_Init+0x2e0>)
 8000cd6:	693b      	ldr	r3, [r7, #16]
 8000cd8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000cda:	4b2d      	ldr	r3, [pc, #180]	; (8000d90 <HAL_GPIO_Init+0x2e0>)
 8000cdc:	685b      	ldr	r3, [r3, #4]
 8000cde:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	43db      	mvns	r3, r3
 8000ce4:	693a      	ldr	r2, [r7, #16]
 8000ce6:	4013      	ands	r3, r2
 8000ce8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	685b      	ldr	r3, [r3, #4]
 8000cee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d003      	beq.n	8000cfe <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8000cf6:	693a      	ldr	r2, [r7, #16]
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	4313      	orrs	r3, r2
 8000cfc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000cfe:	4a24      	ldr	r2, [pc, #144]	; (8000d90 <HAL_GPIO_Init+0x2e0>)
 8000d00:	693b      	ldr	r3, [r7, #16]
 8000d02:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d04:	4b22      	ldr	r3, [pc, #136]	; (8000d90 <HAL_GPIO_Init+0x2e0>)
 8000d06:	689b      	ldr	r3, [r3, #8]
 8000d08:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	43db      	mvns	r3, r3
 8000d0e:	693a      	ldr	r2, [r7, #16]
 8000d10:	4013      	ands	r3, r2
 8000d12:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	685b      	ldr	r3, [r3, #4]
 8000d18:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d003      	beq.n	8000d28 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8000d20:	693a      	ldr	r2, [r7, #16]
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	4313      	orrs	r3, r2
 8000d26:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000d28:	4a19      	ldr	r2, [pc, #100]	; (8000d90 <HAL_GPIO_Init+0x2e0>)
 8000d2a:	693b      	ldr	r3, [r7, #16]
 8000d2c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000d2e:	4b18      	ldr	r3, [pc, #96]	; (8000d90 <HAL_GPIO_Init+0x2e0>)
 8000d30:	68db      	ldr	r3, [r3, #12]
 8000d32:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	43db      	mvns	r3, r3
 8000d38:	693a      	ldr	r2, [r7, #16]
 8000d3a:	4013      	ands	r3, r2
 8000d3c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	685b      	ldr	r3, [r3, #4]
 8000d42:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d003      	beq.n	8000d52 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8000d4a:	693a      	ldr	r2, [r7, #16]
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	4313      	orrs	r3, r2
 8000d50:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000d52:	4a0f      	ldr	r2, [pc, #60]	; (8000d90 <HAL_GPIO_Init+0x2e0>)
 8000d54:	693b      	ldr	r3, [r7, #16]
 8000d56:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000d58:	697b      	ldr	r3, [r7, #20]
 8000d5a:	3301      	adds	r3, #1
 8000d5c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	681a      	ldr	r2, [r3, #0]
 8000d62:	697b      	ldr	r3, [r7, #20]
 8000d64:	fa22 f303 	lsr.w	r3, r2, r3
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	f47f aea9 	bne.w	8000ac0 <HAL_GPIO_Init+0x10>
  }
}
 8000d6e:	bf00      	nop
 8000d70:	371c      	adds	r7, #28
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop
 8000d7c:	40021000 	.word	0x40021000
 8000d80:	40010000 	.word	0x40010000
 8000d84:	48000400 	.word	0x48000400
 8000d88:	48000800 	.word	0x48000800
 8000d8c:	48000c00 	.word	0x48000c00
 8000d90:	40010400 	.word	0x40010400

08000d94 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000d94:	b480      	push	{r7}
 8000d96:	b085      	sub	sp, #20
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
 8000d9c:	460b      	mov	r3, r1
 8000d9e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	691a      	ldr	r2, [r3, #16]
 8000da4:	887b      	ldrh	r3, [r7, #2]
 8000da6:	4013      	ands	r3, r2
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d002      	beq.n	8000db2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000dac:	2301      	movs	r3, #1
 8000dae:	73fb      	strb	r3, [r7, #15]
 8000db0:	e001      	b.n	8000db6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000db2:	2300      	movs	r3, #0
 8000db4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000db6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000db8:	4618      	mov	r0, r3
 8000dba:	3714      	adds	r7, #20
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc2:	4770      	bx	lr

08000dc4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b083      	sub	sp, #12
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
 8000dcc:	460b      	mov	r3, r1
 8000dce:	807b      	strh	r3, [r7, #2]
 8000dd0:	4613      	mov	r3, r2
 8000dd2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000dd4:	787b      	ldrb	r3, [r7, #1]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d003      	beq.n	8000de2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000dda:	887a      	ldrh	r2, [r7, #2]
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000de0:	e002      	b.n	8000de8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000de2:	887a      	ldrh	r2, [r7, #2]
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000de8:	bf00      	nop
 8000dea:	370c      	adds	r7, #12
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr

08000df4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8000dfa:	af00      	add	r7, sp, #0
 8000dfc:	1d3b      	adds	r3, r7, #4
 8000dfe:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000e00:	1d3b      	adds	r3, r7, #4
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d102      	bne.n	8000e0e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8000e08:	2301      	movs	r3, #1
 8000e0a:	f000 bef4 	b.w	8001bf6 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e0e:	1d3b      	adds	r3, r7, #4
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	f003 0301 	and.w	r3, r3, #1
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	f000 816a 	beq.w	80010f2 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000e1e:	4bb3      	ldr	r3, [pc, #716]	; (80010ec <HAL_RCC_OscConfig+0x2f8>)
 8000e20:	685b      	ldr	r3, [r3, #4]
 8000e22:	f003 030c 	and.w	r3, r3, #12
 8000e26:	2b04      	cmp	r3, #4
 8000e28:	d00c      	beq.n	8000e44 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000e2a:	4bb0      	ldr	r3, [pc, #704]	; (80010ec <HAL_RCC_OscConfig+0x2f8>)
 8000e2c:	685b      	ldr	r3, [r3, #4]
 8000e2e:	f003 030c 	and.w	r3, r3, #12
 8000e32:	2b08      	cmp	r3, #8
 8000e34:	d159      	bne.n	8000eea <HAL_RCC_OscConfig+0xf6>
 8000e36:	4bad      	ldr	r3, [pc, #692]	; (80010ec <HAL_RCC_OscConfig+0x2f8>)
 8000e38:	685b      	ldr	r3, [r3, #4]
 8000e3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e42:	d152      	bne.n	8000eea <HAL_RCC_OscConfig+0xf6>
 8000e44:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e48:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e4c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8000e50:	fa93 f3a3 	rbit	r3, r3
 8000e54:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000e58:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e5c:	fab3 f383 	clz	r3, r3
 8000e60:	b2db      	uxtb	r3, r3
 8000e62:	095b      	lsrs	r3, r3, #5
 8000e64:	b2db      	uxtb	r3, r3
 8000e66:	f043 0301 	orr.w	r3, r3, #1
 8000e6a:	b2db      	uxtb	r3, r3
 8000e6c:	2b01      	cmp	r3, #1
 8000e6e:	d102      	bne.n	8000e76 <HAL_RCC_OscConfig+0x82>
 8000e70:	4b9e      	ldr	r3, [pc, #632]	; (80010ec <HAL_RCC_OscConfig+0x2f8>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	e015      	b.n	8000ea2 <HAL_RCC_OscConfig+0xae>
 8000e76:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e7a:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e7e:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8000e82:	fa93 f3a3 	rbit	r3, r3
 8000e86:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000e8a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e8e:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000e92:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8000e96:	fa93 f3a3 	rbit	r3, r3
 8000e9a:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8000e9e:	4b93      	ldr	r3, [pc, #588]	; (80010ec <HAL_RCC_OscConfig+0x2f8>)
 8000ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ea2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000ea6:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8000eaa:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000eae:	fa92 f2a2 	rbit	r2, r2
 8000eb2:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8000eb6:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8000eba:	fab2 f282 	clz	r2, r2
 8000ebe:	b2d2      	uxtb	r2, r2
 8000ec0:	f042 0220 	orr.w	r2, r2, #32
 8000ec4:	b2d2      	uxtb	r2, r2
 8000ec6:	f002 021f 	and.w	r2, r2, #31
 8000eca:	2101      	movs	r1, #1
 8000ecc:	fa01 f202 	lsl.w	r2, r1, r2
 8000ed0:	4013      	ands	r3, r2
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	f000 810c 	beq.w	80010f0 <HAL_RCC_OscConfig+0x2fc>
 8000ed8:	1d3b      	adds	r3, r7, #4
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	685b      	ldr	r3, [r3, #4]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	f040 8106 	bne.w	80010f0 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	f000 be86 	b.w	8001bf6 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000eea:	1d3b      	adds	r3, r7, #4
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ef4:	d106      	bne.n	8000f04 <HAL_RCC_OscConfig+0x110>
 8000ef6:	4b7d      	ldr	r3, [pc, #500]	; (80010ec <HAL_RCC_OscConfig+0x2f8>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	4a7c      	ldr	r2, [pc, #496]	; (80010ec <HAL_RCC_OscConfig+0x2f8>)
 8000efc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f00:	6013      	str	r3, [r2, #0]
 8000f02:	e030      	b.n	8000f66 <HAL_RCC_OscConfig+0x172>
 8000f04:	1d3b      	adds	r3, r7, #4
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	685b      	ldr	r3, [r3, #4]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d10c      	bne.n	8000f28 <HAL_RCC_OscConfig+0x134>
 8000f0e:	4b77      	ldr	r3, [pc, #476]	; (80010ec <HAL_RCC_OscConfig+0x2f8>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	4a76      	ldr	r2, [pc, #472]	; (80010ec <HAL_RCC_OscConfig+0x2f8>)
 8000f14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f18:	6013      	str	r3, [r2, #0]
 8000f1a:	4b74      	ldr	r3, [pc, #464]	; (80010ec <HAL_RCC_OscConfig+0x2f8>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	4a73      	ldr	r2, [pc, #460]	; (80010ec <HAL_RCC_OscConfig+0x2f8>)
 8000f20:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f24:	6013      	str	r3, [r2, #0]
 8000f26:	e01e      	b.n	8000f66 <HAL_RCC_OscConfig+0x172>
 8000f28:	1d3b      	adds	r3, r7, #4
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	685b      	ldr	r3, [r3, #4]
 8000f2e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f32:	d10c      	bne.n	8000f4e <HAL_RCC_OscConfig+0x15a>
 8000f34:	4b6d      	ldr	r3, [pc, #436]	; (80010ec <HAL_RCC_OscConfig+0x2f8>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	4a6c      	ldr	r2, [pc, #432]	; (80010ec <HAL_RCC_OscConfig+0x2f8>)
 8000f3a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f3e:	6013      	str	r3, [r2, #0]
 8000f40:	4b6a      	ldr	r3, [pc, #424]	; (80010ec <HAL_RCC_OscConfig+0x2f8>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	4a69      	ldr	r2, [pc, #420]	; (80010ec <HAL_RCC_OscConfig+0x2f8>)
 8000f46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f4a:	6013      	str	r3, [r2, #0]
 8000f4c:	e00b      	b.n	8000f66 <HAL_RCC_OscConfig+0x172>
 8000f4e:	4b67      	ldr	r3, [pc, #412]	; (80010ec <HAL_RCC_OscConfig+0x2f8>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	4a66      	ldr	r2, [pc, #408]	; (80010ec <HAL_RCC_OscConfig+0x2f8>)
 8000f54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f58:	6013      	str	r3, [r2, #0]
 8000f5a:	4b64      	ldr	r3, [pc, #400]	; (80010ec <HAL_RCC_OscConfig+0x2f8>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	4a63      	ldr	r2, [pc, #396]	; (80010ec <HAL_RCC_OscConfig+0x2f8>)
 8000f60:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f64:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000f66:	4b61      	ldr	r3, [pc, #388]	; (80010ec <HAL_RCC_OscConfig+0x2f8>)
 8000f68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f6a:	f023 020f 	bic.w	r2, r3, #15
 8000f6e:	1d3b      	adds	r3, r7, #4
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	689b      	ldr	r3, [r3, #8]
 8000f74:	495d      	ldr	r1, [pc, #372]	; (80010ec <HAL_RCC_OscConfig+0x2f8>)
 8000f76:	4313      	orrs	r3, r2
 8000f78:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f7a:	1d3b      	adds	r3, r7, #4
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d059      	beq.n	8001038 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f84:	f7ff fca2 	bl	80008cc <HAL_GetTick>
 8000f88:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f8c:	e00a      	b.n	8000fa4 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f8e:	f7ff fc9d 	bl	80008cc <HAL_GetTick>
 8000f92:	4602      	mov	r2, r0
 8000f94:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000f98:	1ad3      	subs	r3, r2, r3
 8000f9a:	2b64      	cmp	r3, #100	; 0x64
 8000f9c:	d902      	bls.n	8000fa4 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8000f9e:	2303      	movs	r3, #3
 8000fa0:	f000 be29 	b.w	8001bf6 <HAL_RCC_OscConfig+0xe02>
 8000fa4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000fa8:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fac:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8000fb0:	fa93 f3a3 	rbit	r3, r3
 8000fb4:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8000fb8:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fbc:	fab3 f383 	clz	r3, r3
 8000fc0:	b2db      	uxtb	r3, r3
 8000fc2:	095b      	lsrs	r3, r3, #5
 8000fc4:	b2db      	uxtb	r3, r3
 8000fc6:	f043 0301 	orr.w	r3, r3, #1
 8000fca:	b2db      	uxtb	r3, r3
 8000fcc:	2b01      	cmp	r3, #1
 8000fce:	d102      	bne.n	8000fd6 <HAL_RCC_OscConfig+0x1e2>
 8000fd0:	4b46      	ldr	r3, [pc, #280]	; (80010ec <HAL_RCC_OscConfig+0x2f8>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	e015      	b.n	8001002 <HAL_RCC_OscConfig+0x20e>
 8000fd6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000fda:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fde:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8000fe2:	fa93 f3a3 	rbit	r3, r3
 8000fe6:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8000fea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000fee:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8000ff2:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8000ff6:	fa93 f3a3 	rbit	r3, r3
 8000ffa:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8000ffe:	4b3b      	ldr	r3, [pc, #236]	; (80010ec <HAL_RCC_OscConfig+0x2f8>)
 8001000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001002:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001006:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 800100a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800100e:	fa92 f2a2 	rbit	r2, r2
 8001012:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001016:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800101a:	fab2 f282 	clz	r2, r2
 800101e:	b2d2      	uxtb	r2, r2
 8001020:	f042 0220 	orr.w	r2, r2, #32
 8001024:	b2d2      	uxtb	r2, r2
 8001026:	f002 021f 	and.w	r2, r2, #31
 800102a:	2101      	movs	r1, #1
 800102c:	fa01 f202 	lsl.w	r2, r1, r2
 8001030:	4013      	ands	r3, r2
 8001032:	2b00      	cmp	r3, #0
 8001034:	d0ab      	beq.n	8000f8e <HAL_RCC_OscConfig+0x19a>
 8001036:	e05c      	b.n	80010f2 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001038:	f7ff fc48 	bl	80008cc <HAL_GetTick>
 800103c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001040:	e00a      	b.n	8001058 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001042:	f7ff fc43 	bl	80008cc <HAL_GetTick>
 8001046:	4602      	mov	r2, r0
 8001048:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800104c:	1ad3      	subs	r3, r2, r3
 800104e:	2b64      	cmp	r3, #100	; 0x64
 8001050:	d902      	bls.n	8001058 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8001052:	2303      	movs	r3, #3
 8001054:	f000 bdcf 	b.w	8001bf6 <HAL_RCC_OscConfig+0xe02>
 8001058:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800105c:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001060:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001064:	fa93 f3a3 	rbit	r3, r3
 8001068:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800106c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001070:	fab3 f383 	clz	r3, r3
 8001074:	b2db      	uxtb	r3, r3
 8001076:	095b      	lsrs	r3, r3, #5
 8001078:	b2db      	uxtb	r3, r3
 800107a:	f043 0301 	orr.w	r3, r3, #1
 800107e:	b2db      	uxtb	r3, r3
 8001080:	2b01      	cmp	r3, #1
 8001082:	d102      	bne.n	800108a <HAL_RCC_OscConfig+0x296>
 8001084:	4b19      	ldr	r3, [pc, #100]	; (80010ec <HAL_RCC_OscConfig+0x2f8>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	e015      	b.n	80010b6 <HAL_RCC_OscConfig+0x2c2>
 800108a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800108e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001092:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001096:	fa93 f3a3 	rbit	r3, r3
 800109a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800109e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010a2:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80010a6:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80010aa:	fa93 f3a3 	rbit	r3, r3
 80010ae:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80010b2:	4b0e      	ldr	r3, [pc, #56]	; (80010ec <HAL_RCC_OscConfig+0x2f8>)
 80010b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010b6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80010ba:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80010be:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80010c2:	fa92 f2a2 	rbit	r2, r2
 80010c6:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80010ca:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80010ce:	fab2 f282 	clz	r2, r2
 80010d2:	b2d2      	uxtb	r2, r2
 80010d4:	f042 0220 	orr.w	r2, r2, #32
 80010d8:	b2d2      	uxtb	r2, r2
 80010da:	f002 021f 	and.w	r2, r2, #31
 80010de:	2101      	movs	r1, #1
 80010e0:	fa01 f202 	lsl.w	r2, r1, r2
 80010e4:	4013      	ands	r3, r2
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d1ab      	bne.n	8001042 <HAL_RCC_OscConfig+0x24e>
 80010ea:	e002      	b.n	80010f2 <HAL_RCC_OscConfig+0x2fe>
 80010ec:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010f2:	1d3b      	adds	r3, r7, #4
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f003 0302 	and.w	r3, r3, #2
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	f000 816f 	beq.w	80013e0 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001102:	4bd0      	ldr	r3, [pc, #832]	; (8001444 <HAL_RCC_OscConfig+0x650>)
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	f003 030c 	and.w	r3, r3, #12
 800110a:	2b00      	cmp	r3, #0
 800110c:	d00b      	beq.n	8001126 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800110e:	4bcd      	ldr	r3, [pc, #820]	; (8001444 <HAL_RCC_OscConfig+0x650>)
 8001110:	685b      	ldr	r3, [r3, #4]
 8001112:	f003 030c 	and.w	r3, r3, #12
 8001116:	2b08      	cmp	r3, #8
 8001118:	d16c      	bne.n	80011f4 <HAL_RCC_OscConfig+0x400>
 800111a:	4bca      	ldr	r3, [pc, #808]	; (8001444 <HAL_RCC_OscConfig+0x650>)
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001122:	2b00      	cmp	r3, #0
 8001124:	d166      	bne.n	80011f4 <HAL_RCC_OscConfig+0x400>
 8001126:	2302      	movs	r3, #2
 8001128:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800112c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001130:	fa93 f3a3 	rbit	r3, r3
 8001134:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001138:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800113c:	fab3 f383 	clz	r3, r3
 8001140:	b2db      	uxtb	r3, r3
 8001142:	095b      	lsrs	r3, r3, #5
 8001144:	b2db      	uxtb	r3, r3
 8001146:	f043 0301 	orr.w	r3, r3, #1
 800114a:	b2db      	uxtb	r3, r3
 800114c:	2b01      	cmp	r3, #1
 800114e:	d102      	bne.n	8001156 <HAL_RCC_OscConfig+0x362>
 8001150:	4bbc      	ldr	r3, [pc, #752]	; (8001444 <HAL_RCC_OscConfig+0x650>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	e013      	b.n	800117e <HAL_RCC_OscConfig+0x38a>
 8001156:	2302      	movs	r3, #2
 8001158:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800115c:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001160:	fa93 f3a3 	rbit	r3, r3
 8001164:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001168:	2302      	movs	r3, #2
 800116a:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800116e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001172:	fa93 f3a3 	rbit	r3, r3
 8001176:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800117a:	4bb2      	ldr	r3, [pc, #712]	; (8001444 <HAL_RCC_OscConfig+0x650>)
 800117c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800117e:	2202      	movs	r2, #2
 8001180:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001184:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001188:	fa92 f2a2 	rbit	r2, r2
 800118c:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001190:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001194:	fab2 f282 	clz	r2, r2
 8001198:	b2d2      	uxtb	r2, r2
 800119a:	f042 0220 	orr.w	r2, r2, #32
 800119e:	b2d2      	uxtb	r2, r2
 80011a0:	f002 021f 	and.w	r2, r2, #31
 80011a4:	2101      	movs	r1, #1
 80011a6:	fa01 f202 	lsl.w	r2, r1, r2
 80011aa:	4013      	ands	r3, r2
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d007      	beq.n	80011c0 <HAL_RCC_OscConfig+0x3cc>
 80011b0:	1d3b      	adds	r3, r7, #4
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	691b      	ldr	r3, [r3, #16]
 80011b6:	2b01      	cmp	r3, #1
 80011b8:	d002      	beq.n	80011c0 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 80011ba:	2301      	movs	r3, #1
 80011bc:	f000 bd1b 	b.w	8001bf6 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011c0:	4ba0      	ldr	r3, [pc, #640]	; (8001444 <HAL_RCC_OscConfig+0x650>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011c8:	1d3b      	adds	r3, r7, #4
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	695b      	ldr	r3, [r3, #20]
 80011ce:	21f8      	movs	r1, #248	; 0xf8
 80011d0:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011d4:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80011d8:	fa91 f1a1 	rbit	r1, r1
 80011dc:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80011e0:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80011e4:	fab1 f181 	clz	r1, r1
 80011e8:	b2c9      	uxtb	r1, r1
 80011ea:	408b      	lsls	r3, r1
 80011ec:	4995      	ldr	r1, [pc, #596]	; (8001444 <HAL_RCC_OscConfig+0x650>)
 80011ee:	4313      	orrs	r3, r2
 80011f0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011f2:	e0f5      	b.n	80013e0 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80011f4:	1d3b      	adds	r3, r7, #4
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	691b      	ldr	r3, [r3, #16]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	f000 8085 	beq.w	800130a <HAL_RCC_OscConfig+0x516>
 8001200:	2301      	movs	r3, #1
 8001202:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001206:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800120a:	fa93 f3a3 	rbit	r3, r3
 800120e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001212:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001216:	fab3 f383 	clz	r3, r3
 800121a:	b2db      	uxtb	r3, r3
 800121c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001220:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001224:	009b      	lsls	r3, r3, #2
 8001226:	461a      	mov	r2, r3
 8001228:	2301      	movs	r3, #1
 800122a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800122c:	f7ff fb4e 	bl	80008cc <HAL_GetTick>
 8001230:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001234:	e00a      	b.n	800124c <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001236:	f7ff fb49 	bl	80008cc <HAL_GetTick>
 800123a:	4602      	mov	r2, r0
 800123c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001240:	1ad3      	subs	r3, r2, r3
 8001242:	2b02      	cmp	r3, #2
 8001244:	d902      	bls.n	800124c <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8001246:	2303      	movs	r3, #3
 8001248:	f000 bcd5 	b.w	8001bf6 <HAL_RCC_OscConfig+0xe02>
 800124c:	2302      	movs	r3, #2
 800124e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001252:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001256:	fa93 f3a3 	rbit	r3, r3
 800125a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800125e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001262:	fab3 f383 	clz	r3, r3
 8001266:	b2db      	uxtb	r3, r3
 8001268:	095b      	lsrs	r3, r3, #5
 800126a:	b2db      	uxtb	r3, r3
 800126c:	f043 0301 	orr.w	r3, r3, #1
 8001270:	b2db      	uxtb	r3, r3
 8001272:	2b01      	cmp	r3, #1
 8001274:	d102      	bne.n	800127c <HAL_RCC_OscConfig+0x488>
 8001276:	4b73      	ldr	r3, [pc, #460]	; (8001444 <HAL_RCC_OscConfig+0x650>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	e013      	b.n	80012a4 <HAL_RCC_OscConfig+0x4b0>
 800127c:	2302      	movs	r3, #2
 800127e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001282:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001286:	fa93 f3a3 	rbit	r3, r3
 800128a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800128e:	2302      	movs	r3, #2
 8001290:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001294:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001298:	fa93 f3a3 	rbit	r3, r3
 800129c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80012a0:	4b68      	ldr	r3, [pc, #416]	; (8001444 <HAL_RCC_OscConfig+0x650>)
 80012a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012a4:	2202      	movs	r2, #2
 80012a6:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80012aa:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80012ae:	fa92 f2a2 	rbit	r2, r2
 80012b2:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80012b6:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80012ba:	fab2 f282 	clz	r2, r2
 80012be:	b2d2      	uxtb	r2, r2
 80012c0:	f042 0220 	orr.w	r2, r2, #32
 80012c4:	b2d2      	uxtb	r2, r2
 80012c6:	f002 021f 	and.w	r2, r2, #31
 80012ca:	2101      	movs	r1, #1
 80012cc:	fa01 f202 	lsl.w	r2, r1, r2
 80012d0:	4013      	ands	r3, r2
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d0af      	beq.n	8001236 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012d6:	4b5b      	ldr	r3, [pc, #364]	; (8001444 <HAL_RCC_OscConfig+0x650>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012de:	1d3b      	adds	r3, r7, #4
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	695b      	ldr	r3, [r3, #20]
 80012e4:	21f8      	movs	r1, #248	; 0xf8
 80012e6:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012ea:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80012ee:	fa91 f1a1 	rbit	r1, r1
 80012f2:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80012f6:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80012fa:	fab1 f181 	clz	r1, r1
 80012fe:	b2c9      	uxtb	r1, r1
 8001300:	408b      	lsls	r3, r1
 8001302:	4950      	ldr	r1, [pc, #320]	; (8001444 <HAL_RCC_OscConfig+0x650>)
 8001304:	4313      	orrs	r3, r2
 8001306:	600b      	str	r3, [r1, #0]
 8001308:	e06a      	b.n	80013e0 <HAL_RCC_OscConfig+0x5ec>
 800130a:	2301      	movs	r3, #1
 800130c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001310:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001314:	fa93 f3a3 	rbit	r3, r3
 8001318:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800131c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001320:	fab3 f383 	clz	r3, r3
 8001324:	b2db      	uxtb	r3, r3
 8001326:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800132a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800132e:	009b      	lsls	r3, r3, #2
 8001330:	461a      	mov	r2, r3
 8001332:	2300      	movs	r3, #0
 8001334:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001336:	f7ff fac9 	bl	80008cc <HAL_GetTick>
 800133a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800133e:	e00a      	b.n	8001356 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001340:	f7ff fac4 	bl	80008cc <HAL_GetTick>
 8001344:	4602      	mov	r2, r0
 8001346:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800134a:	1ad3      	subs	r3, r2, r3
 800134c:	2b02      	cmp	r3, #2
 800134e:	d902      	bls.n	8001356 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8001350:	2303      	movs	r3, #3
 8001352:	f000 bc50 	b.w	8001bf6 <HAL_RCC_OscConfig+0xe02>
 8001356:	2302      	movs	r3, #2
 8001358:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800135c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001360:	fa93 f3a3 	rbit	r3, r3
 8001364:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001368:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800136c:	fab3 f383 	clz	r3, r3
 8001370:	b2db      	uxtb	r3, r3
 8001372:	095b      	lsrs	r3, r3, #5
 8001374:	b2db      	uxtb	r3, r3
 8001376:	f043 0301 	orr.w	r3, r3, #1
 800137a:	b2db      	uxtb	r3, r3
 800137c:	2b01      	cmp	r3, #1
 800137e:	d102      	bne.n	8001386 <HAL_RCC_OscConfig+0x592>
 8001380:	4b30      	ldr	r3, [pc, #192]	; (8001444 <HAL_RCC_OscConfig+0x650>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	e013      	b.n	80013ae <HAL_RCC_OscConfig+0x5ba>
 8001386:	2302      	movs	r3, #2
 8001388:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800138c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001390:	fa93 f3a3 	rbit	r3, r3
 8001394:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001398:	2302      	movs	r3, #2
 800139a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800139e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80013a2:	fa93 f3a3 	rbit	r3, r3
 80013a6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80013aa:	4b26      	ldr	r3, [pc, #152]	; (8001444 <HAL_RCC_OscConfig+0x650>)
 80013ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ae:	2202      	movs	r2, #2
 80013b0:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80013b4:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80013b8:	fa92 f2a2 	rbit	r2, r2
 80013bc:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80013c0:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80013c4:	fab2 f282 	clz	r2, r2
 80013c8:	b2d2      	uxtb	r2, r2
 80013ca:	f042 0220 	orr.w	r2, r2, #32
 80013ce:	b2d2      	uxtb	r2, r2
 80013d0:	f002 021f 	and.w	r2, r2, #31
 80013d4:	2101      	movs	r1, #1
 80013d6:	fa01 f202 	lsl.w	r2, r1, r2
 80013da:	4013      	ands	r3, r2
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d1af      	bne.n	8001340 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013e0:	1d3b      	adds	r3, r7, #4
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f003 0308 	and.w	r3, r3, #8
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	f000 80da 	beq.w	80015a4 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80013f0:	1d3b      	adds	r3, r7, #4
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	699b      	ldr	r3, [r3, #24]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d069      	beq.n	80014ce <HAL_RCC_OscConfig+0x6da>
 80013fa:	2301      	movs	r3, #1
 80013fc:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001400:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001404:	fa93 f3a3 	rbit	r3, r3
 8001408:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800140c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001410:	fab3 f383 	clz	r3, r3
 8001414:	b2db      	uxtb	r3, r3
 8001416:	461a      	mov	r2, r3
 8001418:	4b0b      	ldr	r3, [pc, #44]	; (8001448 <HAL_RCC_OscConfig+0x654>)
 800141a:	4413      	add	r3, r2
 800141c:	009b      	lsls	r3, r3, #2
 800141e:	461a      	mov	r2, r3
 8001420:	2301      	movs	r3, #1
 8001422:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001424:	f7ff fa52 	bl	80008cc <HAL_GetTick>
 8001428:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800142c:	e00e      	b.n	800144c <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800142e:	f7ff fa4d 	bl	80008cc <HAL_GetTick>
 8001432:	4602      	mov	r2, r0
 8001434:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001438:	1ad3      	subs	r3, r2, r3
 800143a:	2b02      	cmp	r3, #2
 800143c:	d906      	bls.n	800144c <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 800143e:	2303      	movs	r3, #3
 8001440:	e3d9      	b.n	8001bf6 <HAL_RCC_OscConfig+0xe02>
 8001442:	bf00      	nop
 8001444:	40021000 	.word	0x40021000
 8001448:	10908120 	.word	0x10908120
 800144c:	2302      	movs	r3, #2
 800144e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001452:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001456:	fa93 f3a3 	rbit	r3, r3
 800145a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800145e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001462:	2202      	movs	r2, #2
 8001464:	601a      	str	r2, [r3, #0]
 8001466:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	fa93 f2a3 	rbit	r2, r3
 8001470:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001474:	601a      	str	r2, [r3, #0]
 8001476:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800147a:	2202      	movs	r2, #2
 800147c:	601a      	str	r2, [r3, #0]
 800147e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	fa93 f2a3 	rbit	r2, r3
 8001488:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800148c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800148e:	4ba5      	ldr	r3, [pc, #660]	; (8001724 <HAL_RCC_OscConfig+0x930>)
 8001490:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001492:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001496:	2102      	movs	r1, #2
 8001498:	6019      	str	r1, [r3, #0]
 800149a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	fa93 f1a3 	rbit	r1, r3
 80014a4:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80014a8:	6019      	str	r1, [r3, #0]
  return result;
 80014aa:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	fab3 f383 	clz	r3, r3
 80014b4:	b2db      	uxtb	r3, r3
 80014b6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80014ba:	b2db      	uxtb	r3, r3
 80014bc:	f003 031f 	and.w	r3, r3, #31
 80014c0:	2101      	movs	r1, #1
 80014c2:	fa01 f303 	lsl.w	r3, r1, r3
 80014c6:	4013      	ands	r3, r2
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d0b0      	beq.n	800142e <HAL_RCC_OscConfig+0x63a>
 80014cc:	e06a      	b.n	80015a4 <HAL_RCC_OscConfig+0x7b0>
 80014ce:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80014d2:	2201      	movs	r2, #1
 80014d4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014d6:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	fa93 f2a3 	rbit	r2, r3
 80014e0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80014e4:	601a      	str	r2, [r3, #0]
  return result;
 80014e6:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80014ea:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014ec:	fab3 f383 	clz	r3, r3
 80014f0:	b2db      	uxtb	r3, r3
 80014f2:	461a      	mov	r2, r3
 80014f4:	4b8c      	ldr	r3, [pc, #560]	; (8001728 <HAL_RCC_OscConfig+0x934>)
 80014f6:	4413      	add	r3, r2
 80014f8:	009b      	lsls	r3, r3, #2
 80014fa:	461a      	mov	r2, r3
 80014fc:	2300      	movs	r3, #0
 80014fe:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001500:	f7ff f9e4 	bl	80008cc <HAL_GetTick>
 8001504:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001508:	e009      	b.n	800151e <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800150a:	f7ff f9df 	bl	80008cc <HAL_GetTick>
 800150e:	4602      	mov	r2, r0
 8001510:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001514:	1ad3      	subs	r3, r2, r3
 8001516:	2b02      	cmp	r3, #2
 8001518:	d901      	bls.n	800151e <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 800151a:	2303      	movs	r3, #3
 800151c:	e36b      	b.n	8001bf6 <HAL_RCC_OscConfig+0xe02>
 800151e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001522:	2202      	movs	r2, #2
 8001524:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001526:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	fa93 f2a3 	rbit	r2, r3
 8001530:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001534:	601a      	str	r2, [r3, #0]
 8001536:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800153a:	2202      	movs	r2, #2
 800153c:	601a      	str	r2, [r3, #0]
 800153e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	fa93 f2a3 	rbit	r2, r3
 8001548:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800154c:	601a      	str	r2, [r3, #0]
 800154e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001552:	2202      	movs	r2, #2
 8001554:	601a      	str	r2, [r3, #0]
 8001556:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	fa93 f2a3 	rbit	r2, r3
 8001560:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001564:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001566:	4b6f      	ldr	r3, [pc, #444]	; (8001724 <HAL_RCC_OscConfig+0x930>)
 8001568:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800156a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800156e:	2102      	movs	r1, #2
 8001570:	6019      	str	r1, [r3, #0]
 8001572:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	fa93 f1a3 	rbit	r1, r3
 800157c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001580:	6019      	str	r1, [r3, #0]
  return result;
 8001582:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	fab3 f383 	clz	r3, r3
 800158c:	b2db      	uxtb	r3, r3
 800158e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001592:	b2db      	uxtb	r3, r3
 8001594:	f003 031f 	and.w	r3, r3, #31
 8001598:	2101      	movs	r1, #1
 800159a:	fa01 f303 	lsl.w	r3, r1, r3
 800159e:	4013      	ands	r3, r2
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d1b2      	bne.n	800150a <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015a4:	1d3b      	adds	r3, r7, #4
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f003 0304 	and.w	r3, r3, #4
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	f000 8158 	beq.w	8001864 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015b4:	2300      	movs	r3, #0
 80015b6:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015ba:	4b5a      	ldr	r3, [pc, #360]	; (8001724 <HAL_RCC_OscConfig+0x930>)
 80015bc:	69db      	ldr	r3, [r3, #28]
 80015be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d112      	bne.n	80015ec <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015c6:	4b57      	ldr	r3, [pc, #348]	; (8001724 <HAL_RCC_OscConfig+0x930>)
 80015c8:	69db      	ldr	r3, [r3, #28]
 80015ca:	4a56      	ldr	r2, [pc, #344]	; (8001724 <HAL_RCC_OscConfig+0x930>)
 80015cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015d0:	61d3      	str	r3, [r2, #28]
 80015d2:	4b54      	ldr	r3, [pc, #336]	; (8001724 <HAL_RCC_OscConfig+0x930>)
 80015d4:	69db      	ldr	r3, [r3, #28]
 80015d6:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80015da:	f107 0308 	add.w	r3, r7, #8
 80015de:	601a      	str	r2, [r3, #0]
 80015e0:	f107 0308 	add.w	r3, r7, #8
 80015e4:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80015e6:	2301      	movs	r3, #1
 80015e8:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015ec:	4b4f      	ldr	r3, [pc, #316]	; (800172c <HAL_RCC_OscConfig+0x938>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d11a      	bne.n	800162e <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015f8:	4b4c      	ldr	r3, [pc, #304]	; (800172c <HAL_RCC_OscConfig+0x938>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a4b      	ldr	r2, [pc, #300]	; (800172c <HAL_RCC_OscConfig+0x938>)
 80015fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001602:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001604:	f7ff f962 	bl	80008cc <HAL_GetTick>
 8001608:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800160c:	e009      	b.n	8001622 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800160e:	f7ff f95d 	bl	80008cc <HAL_GetTick>
 8001612:	4602      	mov	r2, r0
 8001614:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001618:	1ad3      	subs	r3, r2, r3
 800161a:	2b64      	cmp	r3, #100	; 0x64
 800161c:	d901      	bls.n	8001622 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 800161e:	2303      	movs	r3, #3
 8001620:	e2e9      	b.n	8001bf6 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001622:	4b42      	ldr	r3, [pc, #264]	; (800172c <HAL_RCC_OscConfig+0x938>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800162a:	2b00      	cmp	r3, #0
 800162c:	d0ef      	beq.n	800160e <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800162e:	1d3b      	adds	r3, r7, #4
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	68db      	ldr	r3, [r3, #12]
 8001634:	2b01      	cmp	r3, #1
 8001636:	d106      	bne.n	8001646 <HAL_RCC_OscConfig+0x852>
 8001638:	4b3a      	ldr	r3, [pc, #232]	; (8001724 <HAL_RCC_OscConfig+0x930>)
 800163a:	6a1b      	ldr	r3, [r3, #32]
 800163c:	4a39      	ldr	r2, [pc, #228]	; (8001724 <HAL_RCC_OscConfig+0x930>)
 800163e:	f043 0301 	orr.w	r3, r3, #1
 8001642:	6213      	str	r3, [r2, #32]
 8001644:	e02f      	b.n	80016a6 <HAL_RCC_OscConfig+0x8b2>
 8001646:	1d3b      	adds	r3, r7, #4
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	68db      	ldr	r3, [r3, #12]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d10c      	bne.n	800166a <HAL_RCC_OscConfig+0x876>
 8001650:	4b34      	ldr	r3, [pc, #208]	; (8001724 <HAL_RCC_OscConfig+0x930>)
 8001652:	6a1b      	ldr	r3, [r3, #32]
 8001654:	4a33      	ldr	r2, [pc, #204]	; (8001724 <HAL_RCC_OscConfig+0x930>)
 8001656:	f023 0301 	bic.w	r3, r3, #1
 800165a:	6213      	str	r3, [r2, #32]
 800165c:	4b31      	ldr	r3, [pc, #196]	; (8001724 <HAL_RCC_OscConfig+0x930>)
 800165e:	6a1b      	ldr	r3, [r3, #32]
 8001660:	4a30      	ldr	r2, [pc, #192]	; (8001724 <HAL_RCC_OscConfig+0x930>)
 8001662:	f023 0304 	bic.w	r3, r3, #4
 8001666:	6213      	str	r3, [r2, #32]
 8001668:	e01d      	b.n	80016a6 <HAL_RCC_OscConfig+0x8b2>
 800166a:	1d3b      	adds	r3, r7, #4
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	68db      	ldr	r3, [r3, #12]
 8001670:	2b05      	cmp	r3, #5
 8001672:	d10c      	bne.n	800168e <HAL_RCC_OscConfig+0x89a>
 8001674:	4b2b      	ldr	r3, [pc, #172]	; (8001724 <HAL_RCC_OscConfig+0x930>)
 8001676:	6a1b      	ldr	r3, [r3, #32]
 8001678:	4a2a      	ldr	r2, [pc, #168]	; (8001724 <HAL_RCC_OscConfig+0x930>)
 800167a:	f043 0304 	orr.w	r3, r3, #4
 800167e:	6213      	str	r3, [r2, #32]
 8001680:	4b28      	ldr	r3, [pc, #160]	; (8001724 <HAL_RCC_OscConfig+0x930>)
 8001682:	6a1b      	ldr	r3, [r3, #32]
 8001684:	4a27      	ldr	r2, [pc, #156]	; (8001724 <HAL_RCC_OscConfig+0x930>)
 8001686:	f043 0301 	orr.w	r3, r3, #1
 800168a:	6213      	str	r3, [r2, #32]
 800168c:	e00b      	b.n	80016a6 <HAL_RCC_OscConfig+0x8b2>
 800168e:	4b25      	ldr	r3, [pc, #148]	; (8001724 <HAL_RCC_OscConfig+0x930>)
 8001690:	6a1b      	ldr	r3, [r3, #32]
 8001692:	4a24      	ldr	r2, [pc, #144]	; (8001724 <HAL_RCC_OscConfig+0x930>)
 8001694:	f023 0301 	bic.w	r3, r3, #1
 8001698:	6213      	str	r3, [r2, #32]
 800169a:	4b22      	ldr	r3, [pc, #136]	; (8001724 <HAL_RCC_OscConfig+0x930>)
 800169c:	6a1b      	ldr	r3, [r3, #32]
 800169e:	4a21      	ldr	r2, [pc, #132]	; (8001724 <HAL_RCC_OscConfig+0x930>)
 80016a0:	f023 0304 	bic.w	r3, r3, #4
 80016a4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016a6:	1d3b      	adds	r3, r7, #4
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	68db      	ldr	r3, [r3, #12]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d06b      	beq.n	8001788 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016b0:	f7ff f90c 	bl	80008cc <HAL_GetTick>
 80016b4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016b8:	e00b      	b.n	80016d2 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016ba:	f7ff f907 	bl	80008cc <HAL_GetTick>
 80016be:	4602      	mov	r2, r0
 80016c0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80016c4:	1ad3      	subs	r3, r2, r3
 80016c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d901      	bls.n	80016d2 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 80016ce:	2303      	movs	r3, #3
 80016d0:	e291      	b.n	8001bf6 <HAL_RCC_OscConfig+0xe02>
 80016d2:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80016d6:	2202      	movs	r2, #2
 80016d8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016da:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	fa93 f2a3 	rbit	r2, r3
 80016e4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80016e8:	601a      	str	r2, [r3, #0]
 80016ea:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80016ee:	2202      	movs	r2, #2
 80016f0:	601a      	str	r2, [r3, #0]
 80016f2:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	fa93 f2a3 	rbit	r2, r3
 80016fc:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001700:	601a      	str	r2, [r3, #0]
  return result;
 8001702:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001706:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001708:	fab3 f383 	clz	r3, r3
 800170c:	b2db      	uxtb	r3, r3
 800170e:	095b      	lsrs	r3, r3, #5
 8001710:	b2db      	uxtb	r3, r3
 8001712:	f043 0302 	orr.w	r3, r3, #2
 8001716:	b2db      	uxtb	r3, r3
 8001718:	2b02      	cmp	r3, #2
 800171a:	d109      	bne.n	8001730 <HAL_RCC_OscConfig+0x93c>
 800171c:	4b01      	ldr	r3, [pc, #4]	; (8001724 <HAL_RCC_OscConfig+0x930>)
 800171e:	6a1b      	ldr	r3, [r3, #32]
 8001720:	e014      	b.n	800174c <HAL_RCC_OscConfig+0x958>
 8001722:	bf00      	nop
 8001724:	40021000 	.word	0x40021000
 8001728:	10908120 	.word	0x10908120
 800172c:	40007000 	.word	0x40007000
 8001730:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001734:	2202      	movs	r2, #2
 8001736:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001738:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	fa93 f2a3 	rbit	r2, r3
 8001742:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001746:	601a      	str	r2, [r3, #0]
 8001748:	4bbb      	ldr	r3, [pc, #748]	; (8001a38 <HAL_RCC_OscConfig+0xc44>)
 800174a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800174c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001750:	2102      	movs	r1, #2
 8001752:	6011      	str	r1, [r2, #0]
 8001754:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001758:	6812      	ldr	r2, [r2, #0]
 800175a:	fa92 f1a2 	rbit	r1, r2
 800175e:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8001762:	6011      	str	r1, [r2, #0]
  return result;
 8001764:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8001768:	6812      	ldr	r2, [r2, #0]
 800176a:	fab2 f282 	clz	r2, r2
 800176e:	b2d2      	uxtb	r2, r2
 8001770:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001774:	b2d2      	uxtb	r2, r2
 8001776:	f002 021f 	and.w	r2, r2, #31
 800177a:	2101      	movs	r1, #1
 800177c:	fa01 f202 	lsl.w	r2, r1, r2
 8001780:	4013      	ands	r3, r2
 8001782:	2b00      	cmp	r3, #0
 8001784:	d099      	beq.n	80016ba <HAL_RCC_OscConfig+0x8c6>
 8001786:	e063      	b.n	8001850 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001788:	f7ff f8a0 	bl	80008cc <HAL_GetTick>
 800178c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001790:	e00b      	b.n	80017aa <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001792:	f7ff f89b 	bl	80008cc <HAL_GetTick>
 8001796:	4602      	mov	r2, r0
 8001798:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800179c:	1ad3      	subs	r3, r2, r3
 800179e:	f241 3288 	movw	r2, #5000	; 0x1388
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d901      	bls.n	80017aa <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 80017a6:	2303      	movs	r3, #3
 80017a8:	e225      	b.n	8001bf6 <HAL_RCC_OscConfig+0xe02>
 80017aa:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80017ae:	2202      	movs	r2, #2
 80017b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017b2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	fa93 f2a3 	rbit	r2, r3
 80017bc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80017c0:	601a      	str	r2, [r3, #0]
 80017c2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80017c6:	2202      	movs	r2, #2
 80017c8:	601a      	str	r2, [r3, #0]
 80017ca:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	fa93 f2a3 	rbit	r2, r3
 80017d4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80017d8:	601a      	str	r2, [r3, #0]
  return result;
 80017da:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80017de:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017e0:	fab3 f383 	clz	r3, r3
 80017e4:	b2db      	uxtb	r3, r3
 80017e6:	095b      	lsrs	r3, r3, #5
 80017e8:	b2db      	uxtb	r3, r3
 80017ea:	f043 0302 	orr.w	r3, r3, #2
 80017ee:	b2db      	uxtb	r3, r3
 80017f0:	2b02      	cmp	r3, #2
 80017f2:	d102      	bne.n	80017fa <HAL_RCC_OscConfig+0xa06>
 80017f4:	4b90      	ldr	r3, [pc, #576]	; (8001a38 <HAL_RCC_OscConfig+0xc44>)
 80017f6:	6a1b      	ldr	r3, [r3, #32]
 80017f8:	e00d      	b.n	8001816 <HAL_RCC_OscConfig+0xa22>
 80017fa:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80017fe:	2202      	movs	r2, #2
 8001800:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001802:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	fa93 f2a3 	rbit	r2, r3
 800180c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001810:	601a      	str	r2, [r3, #0]
 8001812:	4b89      	ldr	r3, [pc, #548]	; (8001a38 <HAL_RCC_OscConfig+0xc44>)
 8001814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001816:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800181a:	2102      	movs	r1, #2
 800181c:	6011      	str	r1, [r2, #0]
 800181e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001822:	6812      	ldr	r2, [r2, #0]
 8001824:	fa92 f1a2 	rbit	r1, r2
 8001828:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800182c:	6011      	str	r1, [r2, #0]
  return result;
 800182e:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001832:	6812      	ldr	r2, [r2, #0]
 8001834:	fab2 f282 	clz	r2, r2
 8001838:	b2d2      	uxtb	r2, r2
 800183a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800183e:	b2d2      	uxtb	r2, r2
 8001840:	f002 021f 	and.w	r2, r2, #31
 8001844:	2101      	movs	r1, #1
 8001846:	fa01 f202 	lsl.w	r2, r1, r2
 800184a:	4013      	ands	r3, r2
 800184c:	2b00      	cmp	r3, #0
 800184e:	d1a0      	bne.n	8001792 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001850:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001854:	2b01      	cmp	r3, #1
 8001856:	d105      	bne.n	8001864 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001858:	4b77      	ldr	r3, [pc, #476]	; (8001a38 <HAL_RCC_OscConfig+0xc44>)
 800185a:	69db      	ldr	r3, [r3, #28]
 800185c:	4a76      	ldr	r2, [pc, #472]	; (8001a38 <HAL_RCC_OscConfig+0xc44>)
 800185e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001862:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001864:	1d3b      	adds	r3, r7, #4
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	69db      	ldr	r3, [r3, #28]
 800186a:	2b00      	cmp	r3, #0
 800186c:	f000 81c2 	beq.w	8001bf4 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001870:	4b71      	ldr	r3, [pc, #452]	; (8001a38 <HAL_RCC_OscConfig+0xc44>)
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	f003 030c 	and.w	r3, r3, #12
 8001878:	2b08      	cmp	r3, #8
 800187a:	f000 819c 	beq.w	8001bb6 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800187e:	1d3b      	adds	r3, r7, #4
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	69db      	ldr	r3, [r3, #28]
 8001884:	2b02      	cmp	r3, #2
 8001886:	f040 8114 	bne.w	8001ab2 <HAL_RCC_OscConfig+0xcbe>
 800188a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800188e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001892:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001894:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	fa93 f2a3 	rbit	r2, r3
 800189e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80018a2:	601a      	str	r2, [r3, #0]
  return result;
 80018a4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80018a8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018aa:	fab3 f383 	clz	r3, r3
 80018ae:	b2db      	uxtb	r3, r3
 80018b0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80018b4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80018b8:	009b      	lsls	r3, r3, #2
 80018ba:	461a      	mov	r2, r3
 80018bc:	2300      	movs	r3, #0
 80018be:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018c0:	f7ff f804 	bl	80008cc <HAL_GetTick>
 80018c4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018c8:	e009      	b.n	80018de <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018ca:	f7fe ffff 	bl	80008cc <HAL_GetTick>
 80018ce:	4602      	mov	r2, r0
 80018d0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80018d4:	1ad3      	subs	r3, r2, r3
 80018d6:	2b02      	cmp	r3, #2
 80018d8:	d901      	bls.n	80018de <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 80018da:	2303      	movs	r3, #3
 80018dc:	e18b      	b.n	8001bf6 <HAL_RCC_OscConfig+0xe02>
 80018de:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80018e2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80018e6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018e8:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	fa93 f2a3 	rbit	r2, r3
 80018f2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80018f6:	601a      	str	r2, [r3, #0]
  return result;
 80018f8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80018fc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018fe:	fab3 f383 	clz	r3, r3
 8001902:	b2db      	uxtb	r3, r3
 8001904:	095b      	lsrs	r3, r3, #5
 8001906:	b2db      	uxtb	r3, r3
 8001908:	f043 0301 	orr.w	r3, r3, #1
 800190c:	b2db      	uxtb	r3, r3
 800190e:	2b01      	cmp	r3, #1
 8001910:	d102      	bne.n	8001918 <HAL_RCC_OscConfig+0xb24>
 8001912:	4b49      	ldr	r3, [pc, #292]	; (8001a38 <HAL_RCC_OscConfig+0xc44>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	e01b      	b.n	8001950 <HAL_RCC_OscConfig+0xb5c>
 8001918:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800191c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001920:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001922:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	fa93 f2a3 	rbit	r2, r3
 800192c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001930:	601a      	str	r2, [r3, #0]
 8001932:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001936:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800193a:	601a      	str	r2, [r3, #0]
 800193c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	fa93 f2a3 	rbit	r2, r3
 8001946:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800194a:	601a      	str	r2, [r3, #0]
 800194c:	4b3a      	ldr	r3, [pc, #232]	; (8001a38 <HAL_RCC_OscConfig+0xc44>)
 800194e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001950:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001954:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001958:	6011      	str	r1, [r2, #0]
 800195a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800195e:	6812      	ldr	r2, [r2, #0]
 8001960:	fa92 f1a2 	rbit	r1, r2
 8001964:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001968:	6011      	str	r1, [r2, #0]
  return result;
 800196a:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800196e:	6812      	ldr	r2, [r2, #0]
 8001970:	fab2 f282 	clz	r2, r2
 8001974:	b2d2      	uxtb	r2, r2
 8001976:	f042 0220 	orr.w	r2, r2, #32
 800197a:	b2d2      	uxtb	r2, r2
 800197c:	f002 021f 	and.w	r2, r2, #31
 8001980:	2101      	movs	r1, #1
 8001982:	fa01 f202 	lsl.w	r2, r1, r2
 8001986:	4013      	ands	r3, r2
 8001988:	2b00      	cmp	r3, #0
 800198a:	d19e      	bne.n	80018ca <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800198c:	4b2a      	ldr	r3, [pc, #168]	; (8001a38 <HAL_RCC_OscConfig+0xc44>)
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001994:	1d3b      	adds	r3, r7, #4
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800199a:	1d3b      	adds	r3, r7, #4
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	6a1b      	ldr	r3, [r3, #32]
 80019a0:	430b      	orrs	r3, r1
 80019a2:	4925      	ldr	r1, [pc, #148]	; (8001a38 <HAL_RCC_OscConfig+0xc44>)
 80019a4:	4313      	orrs	r3, r2
 80019a6:	604b      	str	r3, [r1, #4]
 80019a8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80019ac:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80019b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019b2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	fa93 f2a3 	rbit	r2, r3
 80019bc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80019c0:	601a      	str	r2, [r3, #0]
  return result;
 80019c2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80019c6:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019c8:	fab3 f383 	clz	r3, r3
 80019cc:	b2db      	uxtb	r3, r3
 80019ce:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80019d2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80019d6:	009b      	lsls	r3, r3, #2
 80019d8:	461a      	mov	r2, r3
 80019da:	2301      	movs	r3, #1
 80019dc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019de:	f7fe ff75 	bl	80008cc <HAL_GetTick>
 80019e2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80019e6:	e009      	b.n	80019fc <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019e8:	f7fe ff70 	bl	80008cc <HAL_GetTick>
 80019ec:	4602      	mov	r2, r0
 80019ee:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80019f2:	1ad3      	subs	r3, r2, r3
 80019f4:	2b02      	cmp	r3, #2
 80019f6:	d901      	bls.n	80019fc <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 80019f8:	2303      	movs	r3, #3
 80019fa:	e0fc      	b.n	8001bf6 <HAL_RCC_OscConfig+0xe02>
 80019fc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001a00:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a04:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a06:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	fa93 f2a3 	rbit	r2, r3
 8001a10:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001a14:	601a      	str	r2, [r3, #0]
  return result;
 8001a16:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001a1a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a1c:	fab3 f383 	clz	r3, r3
 8001a20:	b2db      	uxtb	r3, r3
 8001a22:	095b      	lsrs	r3, r3, #5
 8001a24:	b2db      	uxtb	r3, r3
 8001a26:	f043 0301 	orr.w	r3, r3, #1
 8001a2a:	b2db      	uxtb	r3, r3
 8001a2c:	2b01      	cmp	r3, #1
 8001a2e:	d105      	bne.n	8001a3c <HAL_RCC_OscConfig+0xc48>
 8001a30:	4b01      	ldr	r3, [pc, #4]	; (8001a38 <HAL_RCC_OscConfig+0xc44>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	e01e      	b.n	8001a74 <HAL_RCC_OscConfig+0xc80>
 8001a36:	bf00      	nop
 8001a38:	40021000 	.word	0x40021000
 8001a3c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001a40:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a44:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a46:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	fa93 f2a3 	rbit	r2, r3
 8001a50:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001a54:	601a      	str	r2, [r3, #0]
 8001a56:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001a5a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a5e:	601a      	str	r2, [r3, #0]
 8001a60:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	fa93 f2a3 	rbit	r2, r3
 8001a6a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001a6e:	601a      	str	r2, [r3, #0]
 8001a70:	4b63      	ldr	r3, [pc, #396]	; (8001c00 <HAL_RCC_OscConfig+0xe0c>)
 8001a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a74:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001a78:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001a7c:	6011      	str	r1, [r2, #0]
 8001a7e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001a82:	6812      	ldr	r2, [r2, #0]
 8001a84:	fa92 f1a2 	rbit	r1, r2
 8001a88:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001a8c:	6011      	str	r1, [r2, #0]
  return result;
 8001a8e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001a92:	6812      	ldr	r2, [r2, #0]
 8001a94:	fab2 f282 	clz	r2, r2
 8001a98:	b2d2      	uxtb	r2, r2
 8001a9a:	f042 0220 	orr.w	r2, r2, #32
 8001a9e:	b2d2      	uxtb	r2, r2
 8001aa0:	f002 021f 	and.w	r2, r2, #31
 8001aa4:	2101      	movs	r1, #1
 8001aa6:	fa01 f202 	lsl.w	r2, r1, r2
 8001aaa:	4013      	ands	r3, r2
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d09b      	beq.n	80019e8 <HAL_RCC_OscConfig+0xbf4>
 8001ab0:	e0a0      	b.n	8001bf4 <HAL_RCC_OscConfig+0xe00>
 8001ab2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001ab6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001aba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001abc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	fa93 f2a3 	rbit	r2, r3
 8001ac6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001aca:	601a      	str	r2, [r3, #0]
  return result;
 8001acc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ad0:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ad2:	fab3 f383 	clz	r3, r3
 8001ad6:	b2db      	uxtb	r3, r3
 8001ad8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001adc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001ae0:	009b      	lsls	r3, r3, #2
 8001ae2:	461a      	mov	r2, r3
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ae8:	f7fe fef0 	bl	80008cc <HAL_GetTick>
 8001aec:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001af0:	e009      	b.n	8001b06 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001af2:	f7fe feeb 	bl	80008cc <HAL_GetTick>
 8001af6:	4602      	mov	r2, r0
 8001af8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001afc:	1ad3      	subs	r3, r2, r3
 8001afe:	2b02      	cmp	r3, #2
 8001b00:	d901      	bls.n	8001b06 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8001b02:	2303      	movs	r3, #3
 8001b04:	e077      	b.n	8001bf6 <HAL_RCC_OscConfig+0xe02>
 8001b06:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b0a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b0e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b10:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	fa93 f2a3 	rbit	r2, r3
 8001b1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b1e:	601a      	str	r2, [r3, #0]
  return result;
 8001b20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b24:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b26:	fab3 f383 	clz	r3, r3
 8001b2a:	b2db      	uxtb	r3, r3
 8001b2c:	095b      	lsrs	r3, r3, #5
 8001b2e:	b2db      	uxtb	r3, r3
 8001b30:	f043 0301 	orr.w	r3, r3, #1
 8001b34:	b2db      	uxtb	r3, r3
 8001b36:	2b01      	cmp	r3, #1
 8001b38:	d102      	bne.n	8001b40 <HAL_RCC_OscConfig+0xd4c>
 8001b3a:	4b31      	ldr	r3, [pc, #196]	; (8001c00 <HAL_RCC_OscConfig+0xe0c>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	e01b      	b.n	8001b78 <HAL_RCC_OscConfig+0xd84>
 8001b40:	f107 0320 	add.w	r3, r7, #32
 8001b44:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b48:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b4a:	f107 0320 	add.w	r3, r7, #32
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	fa93 f2a3 	rbit	r2, r3
 8001b54:	f107 031c 	add.w	r3, r7, #28
 8001b58:	601a      	str	r2, [r3, #0]
 8001b5a:	f107 0318 	add.w	r3, r7, #24
 8001b5e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b62:	601a      	str	r2, [r3, #0]
 8001b64:	f107 0318 	add.w	r3, r7, #24
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	fa93 f2a3 	rbit	r2, r3
 8001b6e:	f107 0314 	add.w	r3, r7, #20
 8001b72:	601a      	str	r2, [r3, #0]
 8001b74:	4b22      	ldr	r3, [pc, #136]	; (8001c00 <HAL_RCC_OscConfig+0xe0c>)
 8001b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b78:	f107 0210 	add.w	r2, r7, #16
 8001b7c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001b80:	6011      	str	r1, [r2, #0]
 8001b82:	f107 0210 	add.w	r2, r7, #16
 8001b86:	6812      	ldr	r2, [r2, #0]
 8001b88:	fa92 f1a2 	rbit	r1, r2
 8001b8c:	f107 020c 	add.w	r2, r7, #12
 8001b90:	6011      	str	r1, [r2, #0]
  return result;
 8001b92:	f107 020c 	add.w	r2, r7, #12
 8001b96:	6812      	ldr	r2, [r2, #0]
 8001b98:	fab2 f282 	clz	r2, r2
 8001b9c:	b2d2      	uxtb	r2, r2
 8001b9e:	f042 0220 	orr.w	r2, r2, #32
 8001ba2:	b2d2      	uxtb	r2, r2
 8001ba4:	f002 021f 	and.w	r2, r2, #31
 8001ba8:	2101      	movs	r1, #1
 8001baa:	fa01 f202 	lsl.w	r2, r1, r2
 8001bae:	4013      	ands	r3, r2
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d19e      	bne.n	8001af2 <HAL_RCC_OscConfig+0xcfe>
 8001bb4:	e01e      	b.n	8001bf4 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001bb6:	1d3b      	adds	r3, r7, #4
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	69db      	ldr	r3, [r3, #28]
 8001bbc:	2b01      	cmp	r3, #1
 8001bbe:	d101      	bne.n	8001bc4 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	e018      	b.n	8001bf6 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001bc4:	4b0e      	ldr	r3, [pc, #56]	; (8001c00 <HAL_RCC_OscConfig+0xe0c>)
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001bcc:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001bd0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001bd4:	1d3b      	adds	r3, r7, #4
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	6a1b      	ldr	r3, [r3, #32]
 8001bda:	429a      	cmp	r2, r3
 8001bdc:	d108      	bne.n	8001bf0 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001bde:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001be2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001be6:	1d3b      	adds	r3, r7, #4
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001bec:	429a      	cmp	r2, r3
 8001bee:	d001      	beq.n	8001bf4 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	e000      	b.n	8001bf6 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8001bf4:	2300      	movs	r3, #0
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}
 8001c00:	40021000 	.word	0x40021000

08001c04 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b09e      	sub	sp, #120	; 0x78
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
 8001c0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d101      	bne.n	8001c1c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	e162      	b.n	8001ee2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c1c:	4b90      	ldr	r3, [pc, #576]	; (8001e60 <HAL_RCC_ClockConfig+0x25c>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f003 0307 	and.w	r3, r3, #7
 8001c24:	683a      	ldr	r2, [r7, #0]
 8001c26:	429a      	cmp	r2, r3
 8001c28:	d910      	bls.n	8001c4c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c2a:	4b8d      	ldr	r3, [pc, #564]	; (8001e60 <HAL_RCC_ClockConfig+0x25c>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f023 0207 	bic.w	r2, r3, #7
 8001c32:	498b      	ldr	r1, [pc, #556]	; (8001e60 <HAL_RCC_ClockConfig+0x25c>)
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	4313      	orrs	r3, r2
 8001c38:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c3a:	4b89      	ldr	r3, [pc, #548]	; (8001e60 <HAL_RCC_ClockConfig+0x25c>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f003 0307 	and.w	r3, r3, #7
 8001c42:	683a      	ldr	r2, [r7, #0]
 8001c44:	429a      	cmp	r2, r3
 8001c46:	d001      	beq.n	8001c4c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	e14a      	b.n	8001ee2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f003 0302 	and.w	r3, r3, #2
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d008      	beq.n	8001c6a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c58:	4b82      	ldr	r3, [pc, #520]	; (8001e64 <HAL_RCC_ClockConfig+0x260>)
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	497f      	ldr	r1, [pc, #508]	; (8001e64 <HAL_RCC_ClockConfig+0x260>)
 8001c66:	4313      	orrs	r3, r2
 8001c68:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f003 0301 	and.w	r3, r3, #1
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	f000 80dc 	beq.w	8001e30 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	2b01      	cmp	r3, #1
 8001c7e:	d13c      	bne.n	8001cfa <HAL_RCC_ClockConfig+0xf6>
 8001c80:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c84:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c86:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001c88:	fa93 f3a3 	rbit	r3, r3
 8001c8c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001c8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c90:	fab3 f383 	clz	r3, r3
 8001c94:	b2db      	uxtb	r3, r3
 8001c96:	095b      	lsrs	r3, r3, #5
 8001c98:	b2db      	uxtb	r3, r3
 8001c9a:	f043 0301 	orr.w	r3, r3, #1
 8001c9e:	b2db      	uxtb	r3, r3
 8001ca0:	2b01      	cmp	r3, #1
 8001ca2:	d102      	bne.n	8001caa <HAL_RCC_ClockConfig+0xa6>
 8001ca4:	4b6f      	ldr	r3, [pc, #444]	; (8001e64 <HAL_RCC_ClockConfig+0x260>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	e00f      	b.n	8001cca <HAL_RCC_ClockConfig+0xc6>
 8001caa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001cae:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cb0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001cb2:	fa93 f3a3 	rbit	r3, r3
 8001cb6:	667b      	str	r3, [r7, #100]	; 0x64
 8001cb8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001cbc:	663b      	str	r3, [r7, #96]	; 0x60
 8001cbe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001cc0:	fa93 f3a3 	rbit	r3, r3
 8001cc4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001cc6:	4b67      	ldr	r3, [pc, #412]	; (8001e64 <HAL_RCC_ClockConfig+0x260>)
 8001cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cca:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001cce:	65ba      	str	r2, [r7, #88]	; 0x58
 8001cd0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001cd2:	fa92 f2a2 	rbit	r2, r2
 8001cd6:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001cd8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001cda:	fab2 f282 	clz	r2, r2
 8001cde:	b2d2      	uxtb	r2, r2
 8001ce0:	f042 0220 	orr.w	r2, r2, #32
 8001ce4:	b2d2      	uxtb	r2, r2
 8001ce6:	f002 021f 	and.w	r2, r2, #31
 8001cea:	2101      	movs	r1, #1
 8001cec:	fa01 f202 	lsl.w	r2, r1, r2
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d17b      	bne.n	8001dee <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e0f3      	b.n	8001ee2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	2b02      	cmp	r3, #2
 8001d00:	d13c      	bne.n	8001d7c <HAL_RCC_ClockConfig+0x178>
 8001d02:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d06:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001d0a:	fa93 f3a3 	rbit	r3, r3
 8001d0e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001d10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d12:	fab3 f383 	clz	r3, r3
 8001d16:	b2db      	uxtb	r3, r3
 8001d18:	095b      	lsrs	r3, r3, #5
 8001d1a:	b2db      	uxtb	r3, r3
 8001d1c:	f043 0301 	orr.w	r3, r3, #1
 8001d20:	b2db      	uxtb	r3, r3
 8001d22:	2b01      	cmp	r3, #1
 8001d24:	d102      	bne.n	8001d2c <HAL_RCC_ClockConfig+0x128>
 8001d26:	4b4f      	ldr	r3, [pc, #316]	; (8001e64 <HAL_RCC_ClockConfig+0x260>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	e00f      	b.n	8001d4c <HAL_RCC_ClockConfig+0x148>
 8001d2c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d30:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001d34:	fa93 f3a3 	rbit	r3, r3
 8001d38:	647b      	str	r3, [r7, #68]	; 0x44
 8001d3a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d3e:	643b      	str	r3, [r7, #64]	; 0x40
 8001d40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d42:	fa93 f3a3 	rbit	r3, r3
 8001d46:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001d48:	4b46      	ldr	r3, [pc, #280]	; (8001e64 <HAL_RCC_ClockConfig+0x260>)
 8001d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d4c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d50:	63ba      	str	r2, [r7, #56]	; 0x38
 8001d52:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001d54:	fa92 f2a2 	rbit	r2, r2
 8001d58:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001d5a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001d5c:	fab2 f282 	clz	r2, r2
 8001d60:	b2d2      	uxtb	r2, r2
 8001d62:	f042 0220 	orr.w	r2, r2, #32
 8001d66:	b2d2      	uxtb	r2, r2
 8001d68:	f002 021f 	and.w	r2, r2, #31
 8001d6c:	2101      	movs	r1, #1
 8001d6e:	fa01 f202 	lsl.w	r2, r1, r2
 8001d72:	4013      	ands	r3, r2
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d13a      	bne.n	8001dee <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	e0b2      	b.n	8001ee2 <HAL_RCC_ClockConfig+0x2de>
 8001d7c:	2302      	movs	r3, #2
 8001d7e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d82:	fa93 f3a3 	rbit	r3, r3
 8001d86:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001d88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d8a:	fab3 f383 	clz	r3, r3
 8001d8e:	b2db      	uxtb	r3, r3
 8001d90:	095b      	lsrs	r3, r3, #5
 8001d92:	b2db      	uxtb	r3, r3
 8001d94:	f043 0301 	orr.w	r3, r3, #1
 8001d98:	b2db      	uxtb	r3, r3
 8001d9a:	2b01      	cmp	r3, #1
 8001d9c:	d102      	bne.n	8001da4 <HAL_RCC_ClockConfig+0x1a0>
 8001d9e:	4b31      	ldr	r3, [pc, #196]	; (8001e64 <HAL_RCC_ClockConfig+0x260>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	e00d      	b.n	8001dc0 <HAL_RCC_ClockConfig+0x1bc>
 8001da4:	2302      	movs	r3, #2
 8001da6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001daa:	fa93 f3a3 	rbit	r3, r3
 8001dae:	627b      	str	r3, [r7, #36]	; 0x24
 8001db0:	2302      	movs	r3, #2
 8001db2:	623b      	str	r3, [r7, #32]
 8001db4:	6a3b      	ldr	r3, [r7, #32]
 8001db6:	fa93 f3a3 	rbit	r3, r3
 8001dba:	61fb      	str	r3, [r7, #28]
 8001dbc:	4b29      	ldr	r3, [pc, #164]	; (8001e64 <HAL_RCC_ClockConfig+0x260>)
 8001dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dc0:	2202      	movs	r2, #2
 8001dc2:	61ba      	str	r2, [r7, #24]
 8001dc4:	69ba      	ldr	r2, [r7, #24]
 8001dc6:	fa92 f2a2 	rbit	r2, r2
 8001dca:	617a      	str	r2, [r7, #20]
  return result;
 8001dcc:	697a      	ldr	r2, [r7, #20]
 8001dce:	fab2 f282 	clz	r2, r2
 8001dd2:	b2d2      	uxtb	r2, r2
 8001dd4:	f042 0220 	orr.w	r2, r2, #32
 8001dd8:	b2d2      	uxtb	r2, r2
 8001dda:	f002 021f 	and.w	r2, r2, #31
 8001dde:	2101      	movs	r1, #1
 8001de0:	fa01 f202 	lsl.w	r2, r1, r2
 8001de4:	4013      	ands	r3, r2
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d101      	bne.n	8001dee <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	e079      	b.n	8001ee2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001dee:	4b1d      	ldr	r3, [pc, #116]	; (8001e64 <HAL_RCC_ClockConfig+0x260>)
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	f023 0203 	bic.w	r2, r3, #3
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	491a      	ldr	r1, [pc, #104]	; (8001e64 <HAL_RCC_ClockConfig+0x260>)
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e00:	f7fe fd64 	bl	80008cc <HAL_GetTick>
 8001e04:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e06:	e00a      	b.n	8001e1e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e08:	f7fe fd60 	bl	80008cc <HAL_GetTick>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001e10:	1ad3      	subs	r3, r2, r3
 8001e12:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d901      	bls.n	8001e1e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	e061      	b.n	8001ee2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e1e:	4b11      	ldr	r3, [pc, #68]	; (8001e64 <HAL_RCC_ClockConfig+0x260>)
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	f003 020c 	and.w	r2, r3, #12
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	009b      	lsls	r3, r3, #2
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	d1eb      	bne.n	8001e08 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e30:	4b0b      	ldr	r3, [pc, #44]	; (8001e60 <HAL_RCC_ClockConfig+0x25c>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f003 0307 	and.w	r3, r3, #7
 8001e38:	683a      	ldr	r2, [r7, #0]
 8001e3a:	429a      	cmp	r2, r3
 8001e3c:	d214      	bcs.n	8001e68 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e3e:	4b08      	ldr	r3, [pc, #32]	; (8001e60 <HAL_RCC_ClockConfig+0x25c>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f023 0207 	bic.w	r2, r3, #7
 8001e46:	4906      	ldr	r1, [pc, #24]	; (8001e60 <HAL_RCC_ClockConfig+0x25c>)
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e4e:	4b04      	ldr	r3, [pc, #16]	; (8001e60 <HAL_RCC_ClockConfig+0x25c>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f003 0307 	and.w	r3, r3, #7
 8001e56:	683a      	ldr	r2, [r7, #0]
 8001e58:	429a      	cmp	r2, r3
 8001e5a:	d005      	beq.n	8001e68 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	e040      	b.n	8001ee2 <HAL_RCC_ClockConfig+0x2de>
 8001e60:	40022000 	.word	0x40022000
 8001e64:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f003 0304 	and.w	r3, r3, #4
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d008      	beq.n	8001e86 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e74:	4b1d      	ldr	r3, [pc, #116]	; (8001eec <HAL_RCC_ClockConfig+0x2e8>)
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	68db      	ldr	r3, [r3, #12]
 8001e80:	491a      	ldr	r1, [pc, #104]	; (8001eec <HAL_RCC_ClockConfig+0x2e8>)
 8001e82:	4313      	orrs	r3, r2
 8001e84:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f003 0308 	and.w	r3, r3, #8
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d009      	beq.n	8001ea6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e92:	4b16      	ldr	r3, [pc, #88]	; (8001eec <HAL_RCC_ClockConfig+0x2e8>)
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	691b      	ldr	r3, [r3, #16]
 8001e9e:	00db      	lsls	r3, r3, #3
 8001ea0:	4912      	ldr	r1, [pc, #72]	; (8001eec <HAL_RCC_ClockConfig+0x2e8>)
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001ea6:	f000 f829 	bl	8001efc <HAL_RCC_GetSysClockFreq>
 8001eaa:	4601      	mov	r1, r0
 8001eac:	4b0f      	ldr	r3, [pc, #60]	; (8001eec <HAL_RCC_ClockConfig+0x2e8>)
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001eb4:	22f0      	movs	r2, #240	; 0xf0
 8001eb6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eb8:	693a      	ldr	r2, [r7, #16]
 8001eba:	fa92 f2a2 	rbit	r2, r2
 8001ebe:	60fa      	str	r2, [r7, #12]
  return result;
 8001ec0:	68fa      	ldr	r2, [r7, #12]
 8001ec2:	fab2 f282 	clz	r2, r2
 8001ec6:	b2d2      	uxtb	r2, r2
 8001ec8:	40d3      	lsrs	r3, r2
 8001eca:	4a09      	ldr	r2, [pc, #36]	; (8001ef0 <HAL_RCC_ClockConfig+0x2ec>)
 8001ecc:	5cd3      	ldrb	r3, [r2, r3]
 8001ece:	fa21 f303 	lsr.w	r3, r1, r3
 8001ed2:	4a08      	ldr	r2, [pc, #32]	; (8001ef4 <HAL_RCC_ClockConfig+0x2f0>)
 8001ed4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8001ed6:	4b08      	ldr	r3, [pc, #32]	; (8001ef8 <HAL_RCC_ClockConfig+0x2f4>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4618      	mov	r0, r3
 8001edc:	f7fe fcb2 	bl	8000844 <HAL_InitTick>
  
  return HAL_OK;
 8001ee0:	2300      	movs	r3, #0
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	3778      	adds	r7, #120	; 0x78
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	40021000 	.word	0x40021000
 8001ef0:	080037a4 	.word	0x080037a4
 8001ef4:	20000000 	.word	0x20000000
 8001ef8:	20000004 	.word	0x20000004

08001efc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b08b      	sub	sp, #44	; 0x2c
 8001f00:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001f02:	2300      	movs	r3, #0
 8001f04:	61fb      	str	r3, [r7, #28]
 8001f06:	2300      	movs	r3, #0
 8001f08:	61bb      	str	r3, [r7, #24]
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	627b      	str	r3, [r7, #36]	; 0x24
 8001f0e:	2300      	movs	r3, #0
 8001f10:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001f12:	2300      	movs	r3, #0
 8001f14:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8001f16:	4b29      	ldr	r3, [pc, #164]	; (8001fbc <HAL_RCC_GetSysClockFreq+0xc0>)
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001f1c:	69fb      	ldr	r3, [r7, #28]
 8001f1e:	f003 030c 	and.w	r3, r3, #12
 8001f22:	2b04      	cmp	r3, #4
 8001f24:	d002      	beq.n	8001f2c <HAL_RCC_GetSysClockFreq+0x30>
 8001f26:	2b08      	cmp	r3, #8
 8001f28:	d003      	beq.n	8001f32 <HAL_RCC_GetSysClockFreq+0x36>
 8001f2a:	e03c      	b.n	8001fa6 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001f2c:	4b24      	ldr	r3, [pc, #144]	; (8001fc0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001f2e:	623b      	str	r3, [r7, #32]
      break;
 8001f30:	e03c      	b.n	8001fac <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001f32:	69fb      	ldr	r3, [r7, #28]
 8001f34:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001f38:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8001f3c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f3e:	68ba      	ldr	r2, [r7, #8]
 8001f40:	fa92 f2a2 	rbit	r2, r2
 8001f44:	607a      	str	r2, [r7, #4]
  return result;
 8001f46:	687a      	ldr	r2, [r7, #4]
 8001f48:	fab2 f282 	clz	r2, r2
 8001f4c:	b2d2      	uxtb	r2, r2
 8001f4e:	40d3      	lsrs	r3, r2
 8001f50:	4a1c      	ldr	r2, [pc, #112]	; (8001fc4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001f52:	5cd3      	ldrb	r3, [r2, r3]
 8001f54:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8001f56:	4b19      	ldr	r3, [pc, #100]	; (8001fbc <HAL_RCC_GetSysClockFreq+0xc0>)
 8001f58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f5a:	f003 030f 	and.w	r3, r3, #15
 8001f5e:	220f      	movs	r2, #15
 8001f60:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f62:	693a      	ldr	r2, [r7, #16]
 8001f64:	fa92 f2a2 	rbit	r2, r2
 8001f68:	60fa      	str	r2, [r7, #12]
  return result;
 8001f6a:	68fa      	ldr	r2, [r7, #12]
 8001f6c:	fab2 f282 	clz	r2, r2
 8001f70:	b2d2      	uxtb	r2, r2
 8001f72:	40d3      	lsrs	r3, r2
 8001f74:	4a14      	ldr	r2, [pc, #80]	; (8001fc8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8001f76:	5cd3      	ldrb	r3, [r2, r3]
 8001f78:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8001f7a:	69fb      	ldr	r3, [r7, #28]
 8001f7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d008      	beq.n	8001f96 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001f84:	4a0e      	ldr	r2, [pc, #56]	; (8001fc0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001f86:	69bb      	ldr	r3, [r7, #24]
 8001f88:	fbb2 f2f3 	udiv	r2, r2, r3
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	fb02 f303 	mul.w	r3, r2, r3
 8001f92:	627b      	str	r3, [r7, #36]	; 0x24
 8001f94:	e004      	b.n	8001fa0 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001f96:	697b      	ldr	r3, [r7, #20]
 8001f98:	4a0c      	ldr	r2, [pc, #48]	; (8001fcc <HAL_RCC_GetSysClockFreq+0xd0>)
 8001f9a:	fb02 f303 	mul.w	r3, r2, r3
 8001f9e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8001fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa2:	623b      	str	r3, [r7, #32]
      break;
 8001fa4:	e002      	b.n	8001fac <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001fa6:	4b06      	ldr	r3, [pc, #24]	; (8001fc0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001fa8:	623b      	str	r3, [r7, #32]
      break;
 8001faa:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001fac:	6a3b      	ldr	r3, [r7, #32]
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	372c      	adds	r7, #44	; 0x2c
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr
 8001fba:	bf00      	nop
 8001fbc:	40021000 	.word	0x40021000
 8001fc0:	007a1200 	.word	0x007a1200
 8001fc4:	080037bc 	.word	0x080037bc
 8001fc8:	080037cc 	.word	0x080037cc
 8001fcc:	003d0900 	.word	0x003d0900

08001fd0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001fd4:	4b03      	ldr	r3, [pc, #12]	; (8001fe4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr
 8001fe2:	bf00      	nop
 8001fe4:	20000000 	.word	0x20000000

08001fe8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b082      	sub	sp, #8
 8001fec:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8001fee:	f7ff ffef 	bl	8001fd0 <HAL_RCC_GetHCLKFreq>
 8001ff2:	4601      	mov	r1, r0
 8001ff4:	4b0b      	ldr	r3, [pc, #44]	; (8002024 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001ffc:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002000:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002002:	687a      	ldr	r2, [r7, #4]
 8002004:	fa92 f2a2 	rbit	r2, r2
 8002008:	603a      	str	r2, [r7, #0]
  return result;
 800200a:	683a      	ldr	r2, [r7, #0]
 800200c:	fab2 f282 	clz	r2, r2
 8002010:	b2d2      	uxtb	r2, r2
 8002012:	40d3      	lsrs	r3, r2
 8002014:	4a04      	ldr	r2, [pc, #16]	; (8002028 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002016:	5cd3      	ldrb	r3, [r2, r3]
 8002018:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800201c:	4618      	mov	r0, r3
 800201e:	3708      	adds	r7, #8
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}
 8002024:	40021000 	.word	0x40021000
 8002028:	080037b4 	.word	0x080037b4

0800202c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b082      	sub	sp, #8
 8002030:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002032:	f7ff ffcd 	bl	8001fd0 <HAL_RCC_GetHCLKFreq>
 8002036:	4601      	mov	r1, r0
 8002038:	4b0b      	ldr	r3, [pc, #44]	; (8002068 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002040:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002044:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002046:	687a      	ldr	r2, [r7, #4]
 8002048:	fa92 f2a2 	rbit	r2, r2
 800204c:	603a      	str	r2, [r7, #0]
  return result;
 800204e:	683a      	ldr	r2, [r7, #0]
 8002050:	fab2 f282 	clz	r2, r2
 8002054:	b2d2      	uxtb	r2, r2
 8002056:	40d3      	lsrs	r3, r2
 8002058:	4a04      	ldr	r2, [pc, #16]	; (800206c <HAL_RCC_GetPCLK2Freq+0x40>)
 800205a:	5cd3      	ldrb	r3, [r2, r3]
 800205c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002060:	4618      	mov	r0, r3
 8002062:	3708      	adds	r7, #8
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}
 8002068:	40021000 	.word	0x40021000
 800206c:	080037b4 	.word	0x080037b4

08002070 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b092      	sub	sp, #72	; 0x48
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002078:	2300      	movs	r3, #0
 800207a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 800207c:	2300      	movs	r3, #0
 800207e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002080:	2300      	movs	r3, #0
 8002082:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800208e:	2b00      	cmp	r3, #0
 8002090:	f000 80cd 	beq.w	800222e <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002094:	4b86      	ldr	r3, [pc, #536]	; (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002096:	69db      	ldr	r3, [r3, #28]
 8002098:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800209c:	2b00      	cmp	r3, #0
 800209e:	d10e      	bne.n	80020be <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020a0:	4b83      	ldr	r3, [pc, #524]	; (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80020a2:	69db      	ldr	r3, [r3, #28]
 80020a4:	4a82      	ldr	r2, [pc, #520]	; (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80020a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020aa:	61d3      	str	r3, [r2, #28]
 80020ac:	4b80      	ldr	r3, [pc, #512]	; (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80020ae:	69db      	ldr	r3, [r3, #28]
 80020b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020b4:	60bb      	str	r3, [r7, #8]
 80020b6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020b8:	2301      	movs	r3, #1
 80020ba:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020be:	4b7d      	ldr	r3, [pc, #500]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d118      	bne.n	80020fc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020ca:	4b7a      	ldr	r3, [pc, #488]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4a79      	ldr	r2, [pc, #484]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80020d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020d4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020d6:	f7fe fbf9 	bl	80008cc <HAL_GetTick>
 80020da:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020dc:	e008      	b.n	80020f0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020de:	f7fe fbf5 	bl	80008cc <HAL_GetTick>
 80020e2:	4602      	mov	r2, r0
 80020e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020e6:	1ad3      	subs	r3, r2, r3
 80020e8:	2b64      	cmp	r3, #100	; 0x64
 80020ea:	d901      	bls.n	80020f0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80020ec:	2303      	movs	r3, #3
 80020ee:	e0db      	b.n	80022a8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020f0:	4b70      	ldr	r3, [pc, #448]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d0f0      	beq.n	80020de <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80020fc:	4b6c      	ldr	r3, [pc, #432]	; (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80020fe:	6a1b      	ldr	r3, [r3, #32]
 8002100:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002104:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002106:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002108:	2b00      	cmp	r3, #0
 800210a:	d07d      	beq.n	8002208 <HAL_RCCEx_PeriphCLKConfig+0x198>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002114:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002116:	429a      	cmp	r2, r3
 8002118:	d076      	beq.n	8002208 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800211a:	4b65      	ldr	r3, [pc, #404]	; (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800211c:	6a1b      	ldr	r3, [r3, #32]
 800211e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002122:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002124:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002128:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800212a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800212c:	fa93 f3a3 	rbit	r3, r3
 8002130:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002132:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002134:	fab3 f383 	clz	r3, r3
 8002138:	b2db      	uxtb	r3, r3
 800213a:	461a      	mov	r2, r3
 800213c:	4b5e      	ldr	r3, [pc, #376]	; (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800213e:	4413      	add	r3, r2
 8002140:	009b      	lsls	r3, r3, #2
 8002142:	461a      	mov	r2, r3
 8002144:	2301      	movs	r3, #1
 8002146:	6013      	str	r3, [r2, #0]
 8002148:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800214c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800214e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002150:	fa93 f3a3 	rbit	r3, r3
 8002154:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002156:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002158:	fab3 f383 	clz	r3, r3
 800215c:	b2db      	uxtb	r3, r3
 800215e:	461a      	mov	r2, r3
 8002160:	4b55      	ldr	r3, [pc, #340]	; (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002162:	4413      	add	r3, r2
 8002164:	009b      	lsls	r3, r3, #2
 8002166:	461a      	mov	r2, r3
 8002168:	2300      	movs	r3, #0
 800216a:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800216c:	4a50      	ldr	r2, [pc, #320]	; (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800216e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002170:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002172:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002174:	f003 0301 	and.w	r3, r3, #1
 8002178:	2b00      	cmp	r3, #0
 800217a:	d045      	beq.n	8002208 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800217c:	f7fe fba6 	bl	80008cc <HAL_GetTick>
 8002180:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002182:	e00a      	b.n	800219a <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002184:	f7fe fba2 	bl	80008cc <HAL_GetTick>
 8002188:	4602      	mov	r2, r0
 800218a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800218c:	1ad3      	subs	r3, r2, r3
 800218e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002192:	4293      	cmp	r3, r2
 8002194:	d901      	bls.n	800219a <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8002196:	2303      	movs	r3, #3
 8002198:	e086      	b.n	80022a8 <HAL_RCCEx_PeriphCLKConfig+0x238>
 800219a:	2302      	movs	r3, #2
 800219c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800219e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021a0:	fa93 f3a3 	rbit	r3, r3
 80021a4:	627b      	str	r3, [r7, #36]	; 0x24
 80021a6:	2302      	movs	r3, #2
 80021a8:	623b      	str	r3, [r7, #32]
 80021aa:	6a3b      	ldr	r3, [r7, #32]
 80021ac:	fa93 f3a3 	rbit	r3, r3
 80021b0:	61fb      	str	r3, [r7, #28]
  return result;
 80021b2:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021b4:	fab3 f383 	clz	r3, r3
 80021b8:	b2db      	uxtb	r3, r3
 80021ba:	095b      	lsrs	r3, r3, #5
 80021bc:	b2db      	uxtb	r3, r3
 80021be:	f043 0302 	orr.w	r3, r3, #2
 80021c2:	b2db      	uxtb	r3, r3
 80021c4:	2b02      	cmp	r3, #2
 80021c6:	d102      	bne.n	80021ce <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80021c8:	4b39      	ldr	r3, [pc, #228]	; (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80021ca:	6a1b      	ldr	r3, [r3, #32]
 80021cc:	e007      	b.n	80021de <HAL_RCCEx_PeriphCLKConfig+0x16e>
 80021ce:	2302      	movs	r3, #2
 80021d0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021d2:	69bb      	ldr	r3, [r7, #24]
 80021d4:	fa93 f3a3 	rbit	r3, r3
 80021d8:	617b      	str	r3, [r7, #20]
 80021da:	4b35      	ldr	r3, [pc, #212]	; (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80021dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021de:	2202      	movs	r2, #2
 80021e0:	613a      	str	r2, [r7, #16]
 80021e2:	693a      	ldr	r2, [r7, #16]
 80021e4:	fa92 f2a2 	rbit	r2, r2
 80021e8:	60fa      	str	r2, [r7, #12]
  return result;
 80021ea:	68fa      	ldr	r2, [r7, #12]
 80021ec:	fab2 f282 	clz	r2, r2
 80021f0:	b2d2      	uxtb	r2, r2
 80021f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80021f6:	b2d2      	uxtb	r2, r2
 80021f8:	f002 021f 	and.w	r2, r2, #31
 80021fc:	2101      	movs	r1, #1
 80021fe:	fa01 f202 	lsl.w	r2, r1, r2
 8002202:	4013      	ands	r3, r2
 8002204:	2b00      	cmp	r3, #0
 8002206:	d0bd      	beq.n	8002184 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002208:	4b29      	ldr	r3, [pc, #164]	; (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800220a:	6a1b      	ldr	r3, [r3, #32]
 800220c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	4926      	ldr	r1, [pc, #152]	; (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002216:	4313      	orrs	r3, r2
 8002218:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800221a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800221e:	2b01      	cmp	r3, #1
 8002220:	d105      	bne.n	800222e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002222:	4b23      	ldr	r3, [pc, #140]	; (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002224:	69db      	ldr	r3, [r3, #28]
 8002226:	4a22      	ldr	r2, [pc, #136]	; (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002228:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800222c:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f003 0301 	and.w	r3, r3, #1
 8002236:	2b00      	cmp	r3, #0
 8002238:	d008      	beq.n	800224c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800223a:	4b1d      	ldr	r3, [pc, #116]	; (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800223c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800223e:	f023 0203 	bic.w	r2, r3, #3
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	689b      	ldr	r3, [r3, #8]
 8002246:	491a      	ldr	r1, [pc, #104]	; (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002248:	4313      	orrs	r3, r2
 800224a:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f003 0320 	and.w	r3, r3, #32
 8002254:	2b00      	cmp	r3, #0
 8002256:	d008      	beq.n	800226a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002258:	4b15      	ldr	r3, [pc, #84]	; (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800225a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800225c:	f023 0210 	bic.w	r2, r3, #16
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	68db      	ldr	r3, [r3, #12]
 8002264:	4912      	ldr	r1, [pc, #72]	; (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002266:	4313      	orrs	r3, r2
 8002268:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002272:	2b00      	cmp	r3, #0
 8002274:	d008      	beq.n	8002288 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002276:	4b0e      	ldr	r3, [pc, #56]	; (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800227a:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	691b      	ldr	r3, [r3, #16]
 8002282:	490b      	ldr	r1, [pc, #44]	; (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002284:	4313      	orrs	r3, r2
 8002286:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002290:	2b00      	cmp	r3, #0
 8002292:	d008      	beq.n	80022a6 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002294:	4b06      	ldr	r3, [pc, #24]	; (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002298:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	695b      	ldr	r3, [r3, #20]
 80022a0:	4903      	ldr	r1, [pc, #12]	; (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80022a2:	4313      	orrs	r3, r2
 80022a4:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80022a6:	2300      	movs	r3, #0
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	3748      	adds	r7, #72	; 0x48
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}
 80022b0:	40021000 	.word	0x40021000
 80022b4:	40007000 	.word	0x40007000
 80022b8:	10908100 	.word	0x10908100

080022bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b082      	sub	sp, #8
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d101      	bne.n	80022ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	e049      	b.n	8002362 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022d4:	b2db      	uxtb	r3, r3
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d106      	bne.n	80022e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2200      	movs	r2, #0
 80022de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80022e2:	6878      	ldr	r0, [r7, #4]
 80022e4:	f7fe f92e 	bl	8000544 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2202      	movs	r2, #2
 80022ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681a      	ldr	r2, [r3, #0]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	3304      	adds	r3, #4
 80022f8:	4619      	mov	r1, r3
 80022fa:	4610      	mov	r0, r2
 80022fc:	f000 fa68 	bl	80027d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2201      	movs	r2, #1
 8002304:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2201      	movs	r2, #1
 800230c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2201      	movs	r2, #1
 8002314:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2201      	movs	r2, #1
 800231c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2201      	movs	r2, #1
 8002324:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2201      	movs	r2, #1
 800232c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2201      	movs	r2, #1
 8002334:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2201      	movs	r2, #1
 800233c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2201      	movs	r2, #1
 8002344:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2201      	movs	r2, #1
 800234c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2201      	movs	r2, #1
 8002354:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2201      	movs	r2, #1
 800235c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002360:	2300      	movs	r3, #0
}
 8002362:	4618      	mov	r0, r3
 8002364:	3708      	adds	r7, #8
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}

0800236a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800236a:	b580      	push	{r7, lr}
 800236c:	b082      	sub	sp, #8
 800236e:	af00      	add	r7, sp, #0
 8002370:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d101      	bne.n	800237c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002378:	2301      	movs	r3, #1
 800237a:	e049      	b.n	8002410 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002382:	b2db      	uxtb	r3, r3
 8002384:	2b00      	cmp	r3, #0
 8002386:	d106      	bne.n	8002396 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2200      	movs	r2, #0
 800238c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002390:	6878      	ldr	r0, [r7, #4]
 8002392:	f000 f841 	bl	8002418 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2202      	movs	r2, #2
 800239a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681a      	ldr	r2, [r3, #0]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	3304      	adds	r3, #4
 80023a6:	4619      	mov	r1, r3
 80023a8:	4610      	mov	r0, r2
 80023aa:	f000 fa11 	bl	80027d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2201      	movs	r2, #1
 80023b2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2201      	movs	r2, #1
 80023ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2201      	movs	r2, #1
 80023c2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2201      	movs	r2, #1
 80023ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2201      	movs	r2, #1
 80023d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2201      	movs	r2, #1
 80023da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2201      	movs	r2, #1
 80023e2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2201      	movs	r2, #1
 80023ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2201      	movs	r2, #1
 80023f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2201      	movs	r2, #1
 80023fa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2201      	movs	r2, #1
 8002402:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2201      	movs	r2, #1
 800240a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800240e:	2300      	movs	r3, #0
}
 8002410:	4618      	mov	r0, r3
 8002412:	3708      	adds	r7, #8
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}

08002418 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002418:	b480      	push	{r7}
 800241a:	b083      	sub	sp, #12
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002420:	bf00      	nop
 8002422:	370c      	adds	r7, #12
 8002424:	46bd      	mov	sp, r7
 8002426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242a:	4770      	bx	lr

0800242c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b086      	sub	sp, #24
 8002430:	af00      	add	r7, sp, #0
 8002432:	60f8      	str	r0, [r7, #12]
 8002434:	60b9      	str	r1, [r7, #8]
 8002436:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002438:	2300      	movs	r3, #0
 800243a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002442:	2b01      	cmp	r3, #1
 8002444:	d101      	bne.n	800244a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002446:	2302      	movs	r3, #2
 8002448:	e0ff      	b.n	800264a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	2201      	movs	r2, #1
 800244e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2b14      	cmp	r3, #20
 8002456:	f200 80f0 	bhi.w	800263a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800245a:	a201      	add	r2, pc, #4	; (adr r2, 8002460 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800245c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002460:	080024b5 	.word	0x080024b5
 8002464:	0800263b 	.word	0x0800263b
 8002468:	0800263b 	.word	0x0800263b
 800246c:	0800263b 	.word	0x0800263b
 8002470:	080024f5 	.word	0x080024f5
 8002474:	0800263b 	.word	0x0800263b
 8002478:	0800263b 	.word	0x0800263b
 800247c:	0800263b 	.word	0x0800263b
 8002480:	08002537 	.word	0x08002537
 8002484:	0800263b 	.word	0x0800263b
 8002488:	0800263b 	.word	0x0800263b
 800248c:	0800263b 	.word	0x0800263b
 8002490:	08002577 	.word	0x08002577
 8002494:	0800263b 	.word	0x0800263b
 8002498:	0800263b 	.word	0x0800263b
 800249c:	0800263b 	.word	0x0800263b
 80024a0:	080025b9 	.word	0x080025b9
 80024a4:	0800263b 	.word	0x0800263b
 80024a8:	0800263b 	.word	0x0800263b
 80024ac:	0800263b 	.word	0x0800263b
 80024b0:	080025f9 	.word	0x080025f9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	68b9      	ldr	r1, [r7, #8]
 80024ba:	4618      	mov	r0, r3
 80024bc:	f000 fa00 	bl	80028c0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	699a      	ldr	r2, [r3, #24]
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f042 0208 	orr.w	r2, r2, #8
 80024ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	699a      	ldr	r2, [r3, #24]
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f022 0204 	bic.w	r2, r2, #4
 80024de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	6999      	ldr	r1, [r3, #24]
 80024e6:	68bb      	ldr	r3, [r7, #8]
 80024e8:	691a      	ldr	r2, [r3, #16]
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	430a      	orrs	r2, r1
 80024f0:	619a      	str	r2, [r3, #24]
      break;
 80024f2:	e0a5      	b.n	8002640 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	68b9      	ldr	r1, [r7, #8]
 80024fa:	4618      	mov	r0, r3
 80024fc:	f000 fa66 	bl	80029cc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	699a      	ldr	r2, [r3, #24]
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800250e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	699a      	ldr	r2, [r3, #24]
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800251e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	6999      	ldr	r1, [r3, #24]
 8002526:	68bb      	ldr	r3, [r7, #8]
 8002528:	691b      	ldr	r3, [r3, #16]
 800252a:	021a      	lsls	r2, r3, #8
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	430a      	orrs	r2, r1
 8002532:	619a      	str	r2, [r3, #24]
      break;
 8002534:	e084      	b.n	8002640 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	68b9      	ldr	r1, [r7, #8]
 800253c:	4618      	mov	r0, r3
 800253e:	f000 fac5 	bl	8002acc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	69da      	ldr	r2, [r3, #28]
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f042 0208 	orr.w	r2, r2, #8
 8002550:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	69da      	ldr	r2, [r3, #28]
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f022 0204 	bic.w	r2, r2, #4
 8002560:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	69d9      	ldr	r1, [r3, #28]
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	691a      	ldr	r2, [r3, #16]
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	430a      	orrs	r2, r1
 8002572:	61da      	str	r2, [r3, #28]
      break;
 8002574:	e064      	b.n	8002640 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	68b9      	ldr	r1, [r7, #8]
 800257c:	4618      	mov	r0, r3
 800257e:	f000 fb23 	bl	8002bc8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	69da      	ldr	r2, [r3, #28]
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002590:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	69da      	ldr	r2, [r3, #28]
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	69d9      	ldr	r1, [r3, #28]
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	691b      	ldr	r3, [r3, #16]
 80025ac:	021a      	lsls	r2, r3, #8
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	430a      	orrs	r2, r1
 80025b4:	61da      	str	r2, [r3, #28]
      break;
 80025b6:	e043      	b.n	8002640 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	68b9      	ldr	r1, [r7, #8]
 80025be:	4618      	mov	r0, r3
 80025c0:	f000 fb66 	bl	8002c90 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f042 0208 	orr.w	r2, r2, #8
 80025d2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f022 0204 	bic.w	r2, r2, #4
 80025e2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	691a      	ldr	r2, [r3, #16]
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	430a      	orrs	r2, r1
 80025f4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80025f6:	e023      	b.n	8002640 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	68b9      	ldr	r1, [r7, #8]
 80025fe:	4618      	mov	r0, r3
 8002600:	f000 fba4 	bl	8002d4c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002612:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002622:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800262a:	68bb      	ldr	r3, [r7, #8]
 800262c:	691b      	ldr	r3, [r3, #16]
 800262e:	021a      	lsls	r2, r3, #8
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	430a      	orrs	r2, r1
 8002636:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002638:	e002      	b.n	8002640 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	75fb      	strb	r3, [r7, #23]
      break;
 800263e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	2200      	movs	r2, #0
 8002644:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002648:	7dfb      	ldrb	r3, [r7, #23]
}
 800264a:	4618      	mov	r0, r3
 800264c:	3718      	adds	r7, #24
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}
 8002652:	bf00      	nop

08002654 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b084      	sub	sp, #16
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
 800265c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800265e:	2300      	movs	r3, #0
 8002660:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002668:	2b01      	cmp	r3, #1
 800266a:	d101      	bne.n	8002670 <HAL_TIM_ConfigClockSource+0x1c>
 800266c:	2302      	movs	r3, #2
 800266e:	e0ab      	b.n	80027c8 <HAL_TIM_ConfigClockSource+0x174>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2201      	movs	r2, #1
 8002674:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2202      	movs	r2, #2
 800267c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800268e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002692:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800269a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	68ba      	ldr	r2, [r7, #8]
 80026a2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	2b40      	cmp	r3, #64	; 0x40
 80026aa:	d067      	beq.n	800277c <HAL_TIM_ConfigClockSource+0x128>
 80026ac:	2b40      	cmp	r3, #64	; 0x40
 80026ae:	d80b      	bhi.n	80026c8 <HAL_TIM_ConfigClockSource+0x74>
 80026b0:	2b10      	cmp	r3, #16
 80026b2:	d073      	beq.n	800279c <HAL_TIM_ConfigClockSource+0x148>
 80026b4:	2b10      	cmp	r3, #16
 80026b6:	d802      	bhi.n	80026be <HAL_TIM_ConfigClockSource+0x6a>
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d06f      	beq.n	800279c <HAL_TIM_ConfigClockSource+0x148>
 80026bc:	e077      	b.n	80027ae <HAL_TIM_ConfigClockSource+0x15a>
 80026be:	2b20      	cmp	r3, #32
 80026c0:	d06c      	beq.n	800279c <HAL_TIM_ConfigClockSource+0x148>
 80026c2:	2b30      	cmp	r3, #48	; 0x30
 80026c4:	d06a      	beq.n	800279c <HAL_TIM_ConfigClockSource+0x148>
 80026c6:	e072      	b.n	80027ae <HAL_TIM_ConfigClockSource+0x15a>
 80026c8:	2b70      	cmp	r3, #112	; 0x70
 80026ca:	d00d      	beq.n	80026e8 <HAL_TIM_ConfigClockSource+0x94>
 80026cc:	2b70      	cmp	r3, #112	; 0x70
 80026ce:	d804      	bhi.n	80026da <HAL_TIM_ConfigClockSource+0x86>
 80026d0:	2b50      	cmp	r3, #80	; 0x50
 80026d2:	d033      	beq.n	800273c <HAL_TIM_ConfigClockSource+0xe8>
 80026d4:	2b60      	cmp	r3, #96	; 0x60
 80026d6:	d041      	beq.n	800275c <HAL_TIM_ConfigClockSource+0x108>
 80026d8:	e069      	b.n	80027ae <HAL_TIM_ConfigClockSource+0x15a>
 80026da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026de:	d069      	beq.n	80027b4 <HAL_TIM_ConfigClockSource+0x160>
 80026e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80026e4:	d017      	beq.n	8002716 <HAL_TIM_ConfigClockSource+0xc2>
 80026e6:	e062      	b.n	80027ae <HAL_TIM_ConfigClockSource+0x15a>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6818      	ldr	r0, [r3, #0]
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	6899      	ldr	r1, [r3, #8]
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	685a      	ldr	r2, [r3, #4]
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	68db      	ldr	r3, [r3, #12]
 80026f8:	f000 fc02 	bl	8002f00 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800270a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	68ba      	ldr	r2, [r7, #8]
 8002712:	609a      	str	r2, [r3, #8]
      break;
 8002714:	e04f      	b.n	80027b6 <HAL_TIM_ConfigClockSource+0x162>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6818      	ldr	r0, [r3, #0]
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	6899      	ldr	r1, [r3, #8]
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	685a      	ldr	r2, [r3, #4]
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	68db      	ldr	r3, [r3, #12]
 8002726:	f000 fbeb 	bl	8002f00 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	689a      	ldr	r2, [r3, #8]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002738:	609a      	str	r2, [r3, #8]
      break;
 800273a:	e03c      	b.n	80027b6 <HAL_TIM_ConfigClockSource+0x162>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6818      	ldr	r0, [r3, #0]
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	6859      	ldr	r1, [r3, #4]
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	68db      	ldr	r3, [r3, #12]
 8002748:	461a      	mov	r2, r3
 800274a:	f000 fb5f 	bl	8002e0c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	2150      	movs	r1, #80	; 0x50
 8002754:	4618      	mov	r0, r3
 8002756:	f000 fbb8 	bl	8002eca <TIM_ITRx_SetConfig>
      break;
 800275a:	e02c      	b.n	80027b6 <HAL_TIM_ConfigClockSource+0x162>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6818      	ldr	r0, [r3, #0]
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	6859      	ldr	r1, [r3, #4]
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	68db      	ldr	r3, [r3, #12]
 8002768:	461a      	mov	r2, r3
 800276a:	f000 fb7e 	bl	8002e6a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	2160      	movs	r1, #96	; 0x60
 8002774:	4618      	mov	r0, r3
 8002776:	f000 fba8 	bl	8002eca <TIM_ITRx_SetConfig>
      break;
 800277a:	e01c      	b.n	80027b6 <HAL_TIM_ConfigClockSource+0x162>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6818      	ldr	r0, [r3, #0]
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	6859      	ldr	r1, [r3, #4]
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	68db      	ldr	r3, [r3, #12]
 8002788:	461a      	mov	r2, r3
 800278a:	f000 fb3f 	bl	8002e0c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	2140      	movs	r1, #64	; 0x40
 8002794:	4618      	mov	r0, r3
 8002796:	f000 fb98 	bl	8002eca <TIM_ITRx_SetConfig>
      break;
 800279a:	e00c      	b.n	80027b6 <HAL_TIM_ConfigClockSource+0x162>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681a      	ldr	r2, [r3, #0]
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4619      	mov	r1, r3
 80027a6:	4610      	mov	r0, r2
 80027a8:	f000 fb8f 	bl	8002eca <TIM_ITRx_SetConfig>
      break;
 80027ac:	e003      	b.n	80027b6 <HAL_TIM_ConfigClockSource+0x162>
    }

    default:
      status = HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	73fb      	strb	r3, [r7, #15]
      break;
 80027b2:	e000      	b.n	80027b6 <HAL_TIM_ConfigClockSource+0x162>
      break;
 80027b4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2201      	movs	r2, #1
 80027ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2200      	movs	r2, #0
 80027c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80027c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	3710      	adds	r7, #16
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}

080027d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b085      	sub	sp, #20
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
 80027d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	4a32      	ldr	r2, [pc, #200]	; (80028ac <TIM_Base_SetConfig+0xdc>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d007      	beq.n	80027f8 <TIM_Base_SetConfig+0x28>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027ee:	d003      	beq.n	80027f8 <TIM_Base_SetConfig+0x28>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	4a2f      	ldr	r2, [pc, #188]	; (80028b0 <TIM_Base_SetConfig+0xe0>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d108      	bne.n	800280a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	68fa      	ldr	r2, [r7, #12]
 8002806:	4313      	orrs	r3, r2
 8002808:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	4a27      	ldr	r2, [pc, #156]	; (80028ac <TIM_Base_SetConfig+0xdc>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d013      	beq.n	800283a <TIM_Base_SetConfig+0x6a>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002818:	d00f      	beq.n	800283a <TIM_Base_SetConfig+0x6a>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	4a24      	ldr	r2, [pc, #144]	; (80028b0 <TIM_Base_SetConfig+0xe0>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d00b      	beq.n	800283a <TIM_Base_SetConfig+0x6a>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	4a23      	ldr	r2, [pc, #140]	; (80028b4 <TIM_Base_SetConfig+0xe4>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d007      	beq.n	800283a <TIM_Base_SetConfig+0x6a>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	4a22      	ldr	r2, [pc, #136]	; (80028b8 <TIM_Base_SetConfig+0xe8>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d003      	beq.n	800283a <TIM_Base_SetConfig+0x6a>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	4a21      	ldr	r2, [pc, #132]	; (80028bc <TIM_Base_SetConfig+0xec>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d108      	bne.n	800284c <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002840:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	68db      	ldr	r3, [r3, #12]
 8002846:	68fa      	ldr	r2, [r7, #12]
 8002848:	4313      	orrs	r3, r2
 800284a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	695b      	ldr	r3, [r3, #20]
 8002856:	4313      	orrs	r3, r2
 8002858:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	68fa      	ldr	r2, [r7, #12]
 800285e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	689a      	ldr	r2, [r3, #8]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	681a      	ldr	r2, [r3, #0]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	4a0e      	ldr	r2, [pc, #56]	; (80028ac <TIM_Base_SetConfig+0xdc>)
 8002874:	4293      	cmp	r3, r2
 8002876:	d00b      	beq.n	8002890 <TIM_Base_SetConfig+0xc0>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	4a0e      	ldr	r2, [pc, #56]	; (80028b4 <TIM_Base_SetConfig+0xe4>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d007      	beq.n	8002890 <TIM_Base_SetConfig+0xc0>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	4a0d      	ldr	r2, [pc, #52]	; (80028b8 <TIM_Base_SetConfig+0xe8>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d003      	beq.n	8002890 <TIM_Base_SetConfig+0xc0>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	4a0c      	ldr	r2, [pc, #48]	; (80028bc <TIM_Base_SetConfig+0xec>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d103      	bne.n	8002898 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	691a      	ldr	r2, [r3, #16]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2201      	movs	r2, #1
 800289c:	615a      	str	r2, [r3, #20]
}
 800289e:	bf00      	nop
 80028a0:	3714      	adds	r7, #20
 80028a2:	46bd      	mov	sp, r7
 80028a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a8:	4770      	bx	lr
 80028aa:	bf00      	nop
 80028ac:	40012c00 	.word	0x40012c00
 80028b0:	40000400 	.word	0x40000400
 80028b4:	40014000 	.word	0x40014000
 80028b8:	40014400 	.word	0x40014400
 80028bc:	40014800 	.word	0x40014800

080028c0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b087      	sub	sp, #28
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
 80028c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6a1b      	ldr	r3, [r3, #32]
 80028ce:	f023 0201 	bic.w	r2, r3, #1
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6a1b      	ldr	r3, [r3, #32]
 80028da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	699b      	ldr	r3, [r3, #24]
 80028e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	f023 0303 	bic.w	r3, r3, #3
 80028fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	68fa      	ldr	r2, [r7, #12]
 8002902:	4313      	orrs	r3, r2
 8002904:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	f023 0302 	bic.w	r3, r3, #2
 800290c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	697a      	ldr	r2, [r7, #20]
 8002914:	4313      	orrs	r3, r2
 8002916:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	4a28      	ldr	r2, [pc, #160]	; (80029bc <TIM_OC1_SetConfig+0xfc>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d00b      	beq.n	8002938 <TIM_OC1_SetConfig+0x78>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	4a27      	ldr	r2, [pc, #156]	; (80029c0 <TIM_OC1_SetConfig+0x100>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d007      	beq.n	8002938 <TIM_OC1_SetConfig+0x78>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	4a26      	ldr	r2, [pc, #152]	; (80029c4 <TIM_OC1_SetConfig+0x104>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d003      	beq.n	8002938 <TIM_OC1_SetConfig+0x78>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	4a25      	ldr	r2, [pc, #148]	; (80029c8 <TIM_OC1_SetConfig+0x108>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d10c      	bne.n	8002952 <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	f023 0308 	bic.w	r3, r3, #8
 800293e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	68db      	ldr	r3, [r3, #12]
 8002944:	697a      	ldr	r2, [r7, #20]
 8002946:	4313      	orrs	r3, r2
 8002948:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	f023 0304 	bic.w	r3, r3, #4
 8002950:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	4a19      	ldr	r2, [pc, #100]	; (80029bc <TIM_OC1_SetConfig+0xfc>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d00b      	beq.n	8002972 <TIM_OC1_SetConfig+0xb2>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	4a18      	ldr	r2, [pc, #96]	; (80029c0 <TIM_OC1_SetConfig+0x100>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d007      	beq.n	8002972 <TIM_OC1_SetConfig+0xb2>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	4a17      	ldr	r2, [pc, #92]	; (80029c4 <TIM_OC1_SetConfig+0x104>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d003      	beq.n	8002972 <TIM_OC1_SetConfig+0xb2>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	4a16      	ldr	r2, [pc, #88]	; (80029c8 <TIM_OC1_SetConfig+0x108>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d111      	bne.n	8002996 <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002978:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002980:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	695b      	ldr	r3, [r3, #20]
 8002986:	693a      	ldr	r2, [r7, #16]
 8002988:	4313      	orrs	r3, r2
 800298a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	699b      	ldr	r3, [r3, #24]
 8002990:	693a      	ldr	r2, [r7, #16]
 8002992:	4313      	orrs	r3, r2
 8002994:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	693a      	ldr	r2, [r7, #16]
 800299a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	68fa      	ldr	r2, [r7, #12]
 80029a0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	685a      	ldr	r2, [r3, #4]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	697a      	ldr	r2, [r7, #20]
 80029ae:	621a      	str	r2, [r3, #32]
}
 80029b0:	bf00      	nop
 80029b2:	371c      	adds	r7, #28
 80029b4:	46bd      	mov	sp, r7
 80029b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ba:	4770      	bx	lr
 80029bc:	40012c00 	.word	0x40012c00
 80029c0:	40014000 	.word	0x40014000
 80029c4:	40014400 	.word	0x40014400
 80029c8:	40014800 	.word	0x40014800

080029cc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b087      	sub	sp, #28
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
 80029d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6a1b      	ldr	r3, [r3, #32]
 80029da:	f023 0210 	bic.w	r2, r3, #16
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6a1b      	ldr	r3, [r3, #32]
 80029e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	699b      	ldr	r3, [r3, #24]
 80029f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80029fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80029fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a06:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	021b      	lsls	r3, r3, #8
 8002a0e:	68fa      	ldr	r2, [r7, #12]
 8002a10:	4313      	orrs	r3, r2
 8002a12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	f023 0320 	bic.w	r3, r3, #32
 8002a1a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	689b      	ldr	r3, [r3, #8]
 8002a20:	011b      	lsls	r3, r3, #4
 8002a22:	697a      	ldr	r2, [r7, #20]
 8002a24:	4313      	orrs	r3, r2
 8002a26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	4a24      	ldr	r2, [pc, #144]	; (8002abc <TIM_OC2_SetConfig+0xf0>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d10d      	bne.n	8002a4c <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002a30:	697b      	ldr	r3, [r7, #20]
 8002a32:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a36:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	68db      	ldr	r3, [r3, #12]
 8002a3c:	011b      	lsls	r3, r3, #4
 8002a3e:	697a      	ldr	r2, [r7, #20]
 8002a40:	4313      	orrs	r3, r2
 8002a42:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002a4a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	4a1b      	ldr	r2, [pc, #108]	; (8002abc <TIM_OC2_SetConfig+0xf0>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d00b      	beq.n	8002a6c <TIM_OC2_SetConfig+0xa0>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	4a1a      	ldr	r2, [pc, #104]	; (8002ac0 <TIM_OC2_SetConfig+0xf4>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d007      	beq.n	8002a6c <TIM_OC2_SetConfig+0xa0>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	4a19      	ldr	r2, [pc, #100]	; (8002ac4 <TIM_OC2_SetConfig+0xf8>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d003      	beq.n	8002a6c <TIM_OC2_SetConfig+0xa0>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	4a18      	ldr	r2, [pc, #96]	; (8002ac8 <TIM_OC2_SetConfig+0xfc>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d113      	bne.n	8002a94 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002a6c:	693b      	ldr	r3, [r7, #16]
 8002a6e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002a72:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002a74:	693b      	ldr	r3, [r7, #16]
 8002a76:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002a7a:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	695b      	ldr	r3, [r3, #20]
 8002a80:	009b      	lsls	r3, r3, #2
 8002a82:	693a      	ldr	r2, [r7, #16]
 8002a84:	4313      	orrs	r3, r2
 8002a86:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	699b      	ldr	r3, [r3, #24]
 8002a8c:	009b      	lsls	r3, r3, #2
 8002a8e:	693a      	ldr	r2, [r7, #16]
 8002a90:	4313      	orrs	r3, r2
 8002a92:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	693a      	ldr	r2, [r7, #16]
 8002a98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	68fa      	ldr	r2, [r7, #12]
 8002a9e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	685a      	ldr	r2, [r3, #4]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	697a      	ldr	r2, [r7, #20]
 8002aac:	621a      	str	r2, [r3, #32]
}
 8002aae:	bf00      	nop
 8002ab0:	371c      	adds	r7, #28
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab8:	4770      	bx	lr
 8002aba:	bf00      	nop
 8002abc:	40012c00 	.word	0x40012c00
 8002ac0:	40014000 	.word	0x40014000
 8002ac4:	40014400 	.word	0x40014400
 8002ac8:	40014800 	.word	0x40014800

08002acc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b087      	sub	sp, #28
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
 8002ad4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6a1b      	ldr	r3, [r3, #32]
 8002ada:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6a1b      	ldr	r3, [r3, #32]
 8002ae6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	69db      	ldr	r3, [r3, #28]
 8002af2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002afa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002afe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	f023 0303 	bic.w	r3, r3, #3
 8002b06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	68fa      	ldr	r2, [r7, #12]
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002b18:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	689b      	ldr	r3, [r3, #8]
 8002b1e:	021b      	lsls	r3, r3, #8
 8002b20:	697a      	ldr	r2, [r7, #20]
 8002b22:	4313      	orrs	r3, r2
 8002b24:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	4a23      	ldr	r2, [pc, #140]	; (8002bb8 <TIM_OC3_SetConfig+0xec>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d10d      	bne.n	8002b4a <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002b34:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	68db      	ldr	r3, [r3, #12]
 8002b3a:	021b      	lsls	r3, r3, #8
 8002b3c:	697a      	ldr	r2, [r7, #20]
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002b48:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	4a1a      	ldr	r2, [pc, #104]	; (8002bb8 <TIM_OC3_SetConfig+0xec>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d00b      	beq.n	8002b6a <TIM_OC3_SetConfig+0x9e>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	4a19      	ldr	r2, [pc, #100]	; (8002bbc <TIM_OC3_SetConfig+0xf0>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d007      	beq.n	8002b6a <TIM_OC3_SetConfig+0x9e>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	4a18      	ldr	r2, [pc, #96]	; (8002bc0 <TIM_OC3_SetConfig+0xf4>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d003      	beq.n	8002b6a <TIM_OC3_SetConfig+0x9e>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	4a17      	ldr	r2, [pc, #92]	; (8002bc4 <TIM_OC3_SetConfig+0xf8>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d113      	bne.n	8002b92 <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002b6a:	693b      	ldr	r3, [r7, #16]
 8002b6c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002b70:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002b78:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	695b      	ldr	r3, [r3, #20]
 8002b7e:	011b      	lsls	r3, r3, #4
 8002b80:	693a      	ldr	r2, [r7, #16]
 8002b82:	4313      	orrs	r3, r2
 8002b84:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	699b      	ldr	r3, [r3, #24]
 8002b8a:	011b      	lsls	r3, r3, #4
 8002b8c:	693a      	ldr	r2, [r7, #16]
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	693a      	ldr	r2, [r7, #16]
 8002b96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	68fa      	ldr	r2, [r7, #12]
 8002b9c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	685a      	ldr	r2, [r3, #4]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	697a      	ldr	r2, [r7, #20]
 8002baa:	621a      	str	r2, [r3, #32]
}
 8002bac:	bf00      	nop
 8002bae:	371c      	adds	r7, #28
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb6:	4770      	bx	lr
 8002bb8:	40012c00 	.word	0x40012c00
 8002bbc:	40014000 	.word	0x40014000
 8002bc0:	40014400 	.word	0x40014400
 8002bc4:	40014800 	.word	0x40014800

08002bc8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b087      	sub	sp, #28
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
 8002bd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6a1b      	ldr	r3, [r3, #32]
 8002bd6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6a1b      	ldr	r3, [r3, #32]
 8002be2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	69db      	ldr	r3, [r3, #28]
 8002bee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002bf6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002bfa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c02:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	021b      	lsls	r3, r3, #8
 8002c0a:	68fa      	ldr	r2, [r7, #12]
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002c10:	693b      	ldr	r3, [r7, #16]
 8002c12:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002c16:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	031b      	lsls	r3, r3, #12
 8002c1e:	693a      	ldr	r2, [r7, #16]
 8002c20:	4313      	orrs	r3, r2
 8002c22:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	4a16      	ldr	r2, [pc, #88]	; (8002c80 <TIM_OC4_SetConfig+0xb8>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d00b      	beq.n	8002c44 <TIM_OC4_SetConfig+0x7c>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	4a15      	ldr	r2, [pc, #84]	; (8002c84 <TIM_OC4_SetConfig+0xbc>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d007      	beq.n	8002c44 <TIM_OC4_SetConfig+0x7c>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	4a14      	ldr	r2, [pc, #80]	; (8002c88 <TIM_OC4_SetConfig+0xc0>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d003      	beq.n	8002c44 <TIM_OC4_SetConfig+0x7c>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	4a13      	ldr	r2, [pc, #76]	; (8002c8c <TIM_OC4_SetConfig+0xc4>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d109      	bne.n	8002c58 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002c4a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	695b      	ldr	r3, [r3, #20]
 8002c50:	019b      	lsls	r3, r3, #6
 8002c52:	697a      	ldr	r2, [r7, #20]
 8002c54:	4313      	orrs	r3, r2
 8002c56:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	697a      	ldr	r2, [r7, #20]
 8002c5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	68fa      	ldr	r2, [r7, #12]
 8002c62:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	685a      	ldr	r2, [r3, #4]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	693a      	ldr	r2, [r7, #16]
 8002c70:	621a      	str	r2, [r3, #32]
}
 8002c72:	bf00      	nop
 8002c74:	371c      	adds	r7, #28
 8002c76:	46bd      	mov	sp, r7
 8002c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7c:	4770      	bx	lr
 8002c7e:	bf00      	nop
 8002c80:	40012c00 	.word	0x40012c00
 8002c84:	40014000 	.word	0x40014000
 8002c88:	40014400 	.word	0x40014400
 8002c8c:	40014800 	.word	0x40014800

08002c90 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b087      	sub	sp, #28
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
 8002c98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6a1b      	ldr	r3, [r3, #32]
 8002c9e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6a1b      	ldr	r3, [r3, #32]
 8002caa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cc2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	68fa      	ldr	r2, [r7, #12]
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002cd4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	689b      	ldr	r3, [r3, #8]
 8002cda:	041b      	lsls	r3, r3, #16
 8002cdc:	693a      	ldr	r2, [r7, #16]
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	4a15      	ldr	r2, [pc, #84]	; (8002d3c <TIM_OC5_SetConfig+0xac>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d00b      	beq.n	8002d02 <TIM_OC5_SetConfig+0x72>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	4a14      	ldr	r2, [pc, #80]	; (8002d40 <TIM_OC5_SetConfig+0xb0>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d007      	beq.n	8002d02 <TIM_OC5_SetConfig+0x72>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	4a13      	ldr	r2, [pc, #76]	; (8002d44 <TIM_OC5_SetConfig+0xb4>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d003      	beq.n	8002d02 <TIM_OC5_SetConfig+0x72>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	4a12      	ldr	r2, [pc, #72]	; (8002d48 <TIM_OC5_SetConfig+0xb8>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d109      	bne.n	8002d16 <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d08:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	695b      	ldr	r3, [r3, #20]
 8002d0e:	021b      	lsls	r3, r3, #8
 8002d10:	697a      	ldr	r2, [r7, #20]
 8002d12:	4313      	orrs	r3, r2
 8002d14:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	697a      	ldr	r2, [r7, #20]
 8002d1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	68fa      	ldr	r2, [r7, #12]
 8002d20:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	685a      	ldr	r2, [r3, #4]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	693a      	ldr	r2, [r7, #16]
 8002d2e:	621a      	str	r2, [r3, #32]
}
 8002d30:	bf00      	nop
 8002d32:	371c      	adds	r7, #28
 8002d34:	46bd      	mov	sp, r7
 8002d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3a:	4770      	bx	lr
 8002d3c:	40012c00 	.word	0x40012c00
 8002d40:	40014000 	.word	0x40014000
 8002d44:	40014400 	.word	0x40014400
 8002d48:	40014800 	.word	0x40014800

08002d4c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b087      	sub	sp, #28
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
 8002d54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6a1b      	ldr	r3, [r3, #32]
 8002d5a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6a1b      	ldr	r3, [r3, #32]
 8002d66:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	021b      	lsls	r3, r3, #8
 8002d86:	68fa      	ldr	r2, [r7, #12]
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8002d8c:	693b      	ldr	r3, [r7, #16]
 8002d8e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002d92:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	689b      	ldr	r3, [r3, #8]
 8002d98:	051b      	lsls	r3, r3, #20
 8002d9a:	693a      	ldr	r2, [r7, #16]
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	4a16      	ldr	r2, [pc, #88]	; (8002dfc <TIM_OC6_SetConfig+0xb0>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d00b      	beq.n	8002dc0 <TIM_OC6_SetConfig+0x74>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	4a15      	ldr	r2, [pc, #84]	; (8002e00 <TIM_OC6_SetConfig+0xb4>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d007      	beq.n	8002dc0 <TIM_OC6_SetConfig+0x74>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	4a14      	ldr	r2, [pc, #80]	; (8002e04 <TIM_OC6_SetConfig+0xb8>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d003      	beq.n	8002dc0 <TIM_OC6_SetConfig+0x74>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	4a13      	ldr	r2, [pc, #76]	; (8002e08 <TIM_OC6_SetConfig+0xbc>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d109      	bne.n	8002dd4 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8002dc0:	697b      	ldr	r3, [r7, #20]
 8002dc2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002dc6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	695b      	ldr	r3, [r3, #20]
 8002dcc:	029b      	lsls	r3, r3, #10
 8002dce:	697a      	ldr	r2, [r7, #20]
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	697a      	ldr	r2, [r7, #20]
 8002dd8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	68fa      	ldr	r2, [r7, #12]
 8002dde:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	685a      	ldr	r2, [r3, #4]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	693a      	ldr	r2, [r7, #16]
 8002dec:	621a      	str	r2, [r3, #32]
}
 8002dee:	bf00      	nop
 8002df0:	371c      	adds	r7, #28
 8002df2:	46bd      	mov	sp, r7
 8002df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df8:	4770      	bx	lr
 8002dfa:	bf00      	nop
 8002dfc:	40012c00 	.word	0x40012c00
 8002e00:	40014000 	.word	0x40014000
 8002e04:	40014400 	.word	0x40014400
 8002e08:	40014800 	.word	0x40014800

08002e0c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b087      	sub	sp, #28
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	60f8      	str	r0, [r7, #12]
 8002e14:	60b9      	str	r1, [r7, #8]
 8002e16:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	6a1b      	ldr	r3, [r3, #32]
 8002e1c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	6a1b      	ldr	r3, [r3, #32]
 8002e22:	f023 0201 	bic.w	r2, r3, #1
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	699b      	ldr	r3, [r3, #24]
 8002e2e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002e30:	693b      	ldr	r3, [r7, #16]
 8002e32:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002e36:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	011b      	lsls	r3, r3, #4
 8002e3c:	693a      	ldr	r2, [r7, #16]
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	f023 030a 	bic.w	r3, r3, #10
 8002e48:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002e4a:	697a      	ldr	r2, [r7, #20]
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	693a      	ldr	r2, [r7, #16]
 8002e56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	697a      	ldr	r2, [r7, #20]
 8002e5c:	621a      	str	r2, [r3, #32]
}
 8002e5e:	bf00      	nop
 8002e60:	371c      	adds	r7, #28
 8002e62:	46bd      	mov	sp, r7
 8002e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e68:	4770      	bx	lr

08002e6a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e6a:	b480      	push	{r7}
 8002e6c:	b087      	sub	sp, #28
 8002e6e:	af00      	add	r7, sp, #0
 8002e70:	60f8      	str	r0, [r7, #12]
 8002e72:	60b9      	str	r1, [r7, #8]
 8002e74:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	6a1b      	ldr	r3, [r3, #32]
 8002e7a:	f023 0210 	bic.w	r2, r3, #16
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	699b      	ldr	r3, [r3, #24]
 8002e86:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	6a1b      	ldr	r3, [r3, #32]
 8002e8c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002e94:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	031b      	lsls	r3, r3, #12
 8002e9a:	697a      	ldr	r2, [r7, #20]
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002ea0:	693b      	ldr	r3, [r7, #16]
 8002ea2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002ea6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	011b      	lsls	r3, r3, #4
 8002eac:	693a      	ldr	r2, [r7, #16]
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	697a      	ldr	r2, [r7, #20]
 8002eb6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	693a      	ldr	r2, [r7, #16]
 8002ebc:	621a      	str	r2, [r3, #32]
}
 8002ebe:	bf00      	nop
 8002ec0:	371c      	adds	r7, #28
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec8:	4770      	bx	lr

08002eca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002eca:	b480      	push	{r7}
 8002ecc:	b085      	sub	sp, #20
 8002ece:	af00      	add	r7, sp, #0
 8002ed0:	6078      	str	r0, [r7, #4]
 8002ed2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	689b      	ldr	r3, [r3, #8]
 8002ed8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ee0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002ee2:	683a      	ldr	r2, [r7, #0]
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	f043 0307 	orr.w	r3, r3, #7
 8002eec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	68fa      	ldr	r2, [r7, #12]
 8002ef2:	609a      	str	r2, [r3, #8]
}
 8002ef4:	bf00      	nop
 8002ef6:	3714      	adds	r7, #20
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efe:	4770      	bx	lr

08002f00 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002f00:	b480      	push	{r7}
 8002f02:	b087      	sub	sp, #28
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	60f8      	str	r0, [r7, #12]
 8002f08:	60b9      	str	r1, [r7, #8]
 8002f0a:	607a      	str	r2, [r7, #4]
 8002f0c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	689b      	ldr	r3, [r3, #8]
 8002f12:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002f1a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	021a      	lsls	r2, r3, #8
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	431a      	orrs	r2, r3
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	4313      	orrs	r3, r2
 8002f28:	697a      	ldr	r2, [r7, #20]
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	697a      	ldr	r2, [r7, #20]
 8002f32:	609a      	str	r2, [r3, #8]
}
 8002f34:	bf00      	nop
 8002f36:	371c      	adds	r7, #28
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3e:	4770      	bx	lr

08002f40 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b085      	sub	sp, #20
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
 8002f48:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f50:	2b01      	cmp	r3, #1
 8002f52:	d101      	bne.n	8002f58 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002f54:	2302      	movs	r3, #2
 8002f56:	e054      	b.n	8003002 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2202      	movs	r2, #2
 8002f64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	689b      	ldr	r3, [r3, #8]
 8002f76:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a24      	ldr	r2, [pc, #144]	; (8003010 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d108      	bne.n	8002f94 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002f88:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	68fa      	ldr	r2, [r7, #12]
 8002f90:	4313      	orrs	r3, r2
 8002f92:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f9a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	68fa      	ldr	r2, [r7, #12]
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	68fa      	ldr	r2, [r7, #12]
 8002fac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a17      	ldr	r2, [pc, #92]	; (8003010 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d00e      	beq.n	8002fd6 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fc0:	d009      	beq.n	8002fd6 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a13      	ldr	r2, [pc, #76]	; (8003014 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d004      	beq.n	8002fd6 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a11      	ldr	r2, [pc, #68]	; (8003018 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d10c      	bne.n	8002ff0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002fdc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	689b      	ldr	r3, [r3, #8]
 8002fe2:	68ba      	ldr	r2, [r7, #8]
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	68ba      	ldr	r2, [r7, #8]
 8002fee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003000:	2300      	movs	r3, #0
}
 8003002:	4618      	mov	r0, r3
 8003004:	3714      	adds	r7, #20
 8003006:	46bd      	mov	sp, r7
 8003008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300c:	4770      	bx	lr
 800300e:	bf00      	nop
 8003010:	40012c00 	.word	0x40012c00
 8003014:	40000400 	.word	0x40000400
 8003018:	40014000 	.word	0x40014000

0800301c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b082      	sub	sp, #8
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d101      	bne.n	800302e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800302a:	2301      	movs	r3, #1
 800302c:	e040      	b.n	80030b0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003032:	2b00      	cmp	r3, #0
 8003034:	d106      	bne.n	8003044 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2200      	movs	r2, #0
 800303a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800303e:	6878      	ldr	r0, [r7, #4]
 8003040:	f7fd fb3a 	bl	80006b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2224      	movs	r2, #36	; 0x24
 8003048:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	681a      	ldr	r2, [r3, #0]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f022 0201 	bic.w	r2, r2, #1
 8003058:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800305a:	6878      	ldr	r0, [r7, #4]
 800305c:	f000 f882 	bl	8003164 <UART_SetConfig>
 8003060:	4603      	mov	r3, r0
 8003062:	2b01      	cmp	r3, #1
 8003064:	d101      	bne.n	800306a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003066:	2301      	movs	r3, #1
 8003068:	e022      	b.n	80030b0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800306e:	2b00      	cmp	r3, #0
 8003070:	d002      	beq.n	8003078 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	f000 f9ae 	bl	80033d4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	685a      	ldr	r2, [r3, #4]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003086:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	689a      	ldr	r2, [r3, #8]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003096:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	681a      	ldr	r2, [r3, #0]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f042 0201 	orr.w	r2, r2, #1
 80030a6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80030a8:	6878      	ldr	r0, [r7, #4]
 80030aa:	f000 fa35 	bl	8003518 <UART_CheckIdleState>
 80030ae:	4603      	mov	r3, r0
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	3708      	adds	r7, #8
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bd80      	pop	{r7, pc}

080030b8 <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b082      	sub	sp, #8
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d101      	bne.n	80030ca <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	e048      	b.n	800315c <HAL_HalfDuplex_Init+0xa4>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d106      	bne.n	80030e0 <HAL_HalfDuplex_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2200      	movs	r2, #0
 80030d6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	f7fd faec 	bl	80006b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2224      	movs	r2, #36	; 0x24
 80030e4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	681a      	ldr	r2, [r3, #0]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f022 0201 	bic.w	r2, r2, #1
 80030f4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80030f6:	6878      	ldr	r0, [r7, #4]
 80030f8:	f000 f834 	bl	8003164 <UART_SetConfig>
 80030fc:	4603      	mov	r3, r0
 80030fe:	2b01      	cmp	r3, #1
 8003100:	d101      	bne.n	8003106 <HAL_HalfDuplex_Init+0x4e>
  {
    return HAL_ERROR;
 8003102:	2301      	movs	r3, #1
 8003104:	e02a      	b.n	800315c <HAL_HalfDuplex_Init+0xa4>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800310a:	2b00      	cmp	r3, #0
 800310c:	d002      	beq.n	8003114 <HAL_HalfDuplex_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	f000 f960 	bl	80033d4 <UART_AdvFeatureConfig>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	685a      	ldr	r2, [r3, #4]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003122:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	689a      	ldr	r2, [r3, #8]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 8003132:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	689a      	ldr	r2, [r3, #8]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f042 0208 	orr.w	r2, r2, #8
 8003142:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	681a      	ldr	r2, [r3, #0]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f042 0201 	orr.w	r2, r2, #1
 8003152:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003154:	6878      	ldr	r0, [r7, #4]
 8003156:	f000 f9df 	bl	8003518 <UART_CheckIdleState>
 800315a:	4603      	mov	r3, r0
}
 800315c:	4618      	mov	r0, r3
 800315e:	3708      	adds	r7, #8
 8003160:	46bd      	mov	sp, r7
 8003162:	bd80      	pop	{r7, pc}

08003164 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b088      	sub	sp, #32
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800316c:	2300      	movs	r3, #0
 800316e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	689a      	ldr	r2, [r3, #8]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	691b      	ldr	r3, [r3, #16]
 8003178:	431a      	orrs	r2, r3
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	695b      	ldr	r3, [r3, #20]
 800317e:	431a      	orrs	r2, r3
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	69db      	ldr	r3, [r3, #28]
 8003184:	4313      	orrs	r3, r2
 8003186:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	681a      	ldr	r2, [r3, #0]
 800318e:	4b8b      	ldr	r3, [pc, #556]	; (80033bc <UART_SetConfig+0x258>)
 8003190:	4013      	ands	r3, r2
 8003192:	687a      	ldr	r2, [r7, #4]
 8003194:	6812      	ldr	r2, [r2, #0]
 8003196:	6979      	ldr	r1, [r7, #20]
 8003198:	430b      	orrs	r3, r1
 800319a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	68da      	ldr	r2, [r3, #12]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	430a      	orrs	r2, r1
 80031b0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	699b      	ldr	r3, [r3, #24]
 80031b6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6a1b      	ldr	r3, [r3, #32]
 80031bc:	697a      	ldr	r2, [r7, #20]
 80031be:	4313      	orrs	r3, r2
 80031c0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	689b      	ldr	r3, [r3, #8]
 80031c8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	697a      	ldr	r2, [r7, #20]
 80031d2:	430a      	orrs	r2, r1
 80031d4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4a79      	ldr	r2, [pc, #484]	; (80033c0 <UART_SetConfig+0x25c>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d121      	bne.n	8003224 <UART_SetConfig+0xc0>
 80031e0:	4b78      	ldr	r3, [pc, #480]	; (80033c4 <UART_SetConfig+0x260>)
 80031e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031e4:	f003 0303 	and.w	r3, r3, #3
 80031e8:	2b03      	cmp	r3, #3
 80031ea:	d817      	bhi.n	800321c <UART_SetConfig+0xb8>
 80031ec:	a201      	add	r2, pc, #4	; (adr r2, 80031f4 <UART_SetConfig+0x90>)
 80031ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031f2:	bf00      	nop
 80031f4:	08003205 	.word	0x08003205
 80031f8:	08003211 	.word	0x08003211
 80031fc:	08003217 	.word	0x08003217
 8003200:	0800320b 	.word	0x0800320b
 8003204:	2300      	movs	r3, #0
 8003206:	77fb      	strb	r3, [r7, #31]
 8003208:	e01e      	b.n	8003248 <UART_SetConfig+0xe4>
 800320a:	2302      	movs	r3, #2
 800320c:	77fb      	strb	r3, [r7, #31]
 800320e:	e01b      	b.n	8003248 <UART_SetConfig+0xe4>
 8003210:	2304      	movs	r3, #4
 8003212:	77fb      	strb	r3, [r7, #31]
 8003214:	e018      	b.n	8003248 <UART_SetConfig+0xe4>
 8003216:	2308      	movs	r3, #8
 8003218:	77fb      	strb	r3, [r7, #31]
 800321a:	e015      	b.n	8003248 <UART_SetConfig+0xe4>
 800321c:	2310      	movs	r3, #16
 800321e:	77fb      	strb	r3, [r7, #31]
 8003220:	bf00      	nop
 8003222:	e011      	b.n	8003248 <UART_SetConfig+0xe4>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a67      	ldr	r2, [pc, #412]	; (80033c8 <UART_SetConfig+0x264>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d102      	bne.n	8003234 <UART_SetConfig+0xd0>
 800322e:	2300      	movs	r3, #0
 8003230:	77fb      	strb	r3, [r7, #31]
 8003232:	e009      	b.n	8003248 <UART_SetConfig+0xe4>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a64      	ldr	r2, [pc, #400]	; (80033cc <UART_SetConfig+0x268>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d102      	bne.n	8003244 <UART_SetConfig+0xe0>
 800323e:	2300      	movs	r3, #0
 8003240:	77fb      	strb	r3, [r7, #31]
 8003242:	e001      	b.n	8003248 <UART_SetConfig+0xe4>
 8003244:	2310      	movs	r3, #16
 8003246:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	69db      	ldr	r3, [r3, #28]
 800324c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003250:	d15c      	bne.n	800330c <UART_SetConfig+0x1a8>
  {
    switch (clocksource)
 8003252:	7ffb      	ldrb	r3, [r7, #31]
 8003254:	2b08      	cmp	r3, #8
 8003256:	d828      	bhi.n	80032aa <UART_SetConfig+0x146>
 8003258:	a201      	add	r2, pc, #4	; (adr r2, 8003260 <UART_SetConfig+0xfc>)
 800325a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800325e:	bf00      	nop
 8003260:	08003285 	.word	0x08003285
 8003264:	0800328d 	.word	0x0800328d
 8003268:	08003295 	.word	0x08003295
 800326c:	080032ab 	.word	0x080032ab
 8003270:	0800329b 	.word	0x0800329b
 8003274:	080032ab 	.word	0x080032ab
 8003278:	080032ab 	.word	0x080032ab
 800327c:	080032ab 	.word	0x080032ab
 8003280:	080032a3 	.word	0x080032a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003284:	f7fe feb0 	bl	8001fe8 <HAL_RCC_GetPCLK1Freq>
 8003288:	61b8      	str	r0, [r7, #24]
        break;
 800328a:	e013      	b.n	80032b4 <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800328c:	f7fe fece 	bl	800202c <HAL_RCC_GetPCLK2Freq>
 8003290:	61b8      	str	r0, [r7, #24]
        break;
 8003292:	e00f      	b.n	80032b4 <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003294:	4b4e      	ldr	r3, [pc, #312]	; (80033d0 <UART_SetConfig+0x26c>)
 8003296:	61bb      	str	r3, [r7, #24]
        break;
 8003298:	e00c      	b.n	80032b4 <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800329a:	f7fe fe2f 	bl	8001efc <HAL_RCC_GetSysClockFreq>
 800329e:	61b8      	str	r0, [r7, #24]
        break;
 80032a0:	e008      	b.n	80032b4 <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80032a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80032a6:	61bb      	str	r3, [r7, #24]
        break;
 80032a8:	e004      	b.n	80032b4 <UART_SetConfig+0x150>
      default:
        pclk = 0U;
 80032aa:	2300      	movs	r3, #0
 80032ac:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	77bb      	strb	r3, [r7, #30]
        break;
 80032b2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80032b4:	69bb      	ldr	r3, [r7, #24]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d074      	beq.n	80033a4 <UART_SetConfig+0x240>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80032ba:	69bb      	ldr	r3, [r7, #24]
 80032bc:	005a      	lsls	r2, r3, #1
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	085b      	lsrs	r3, r3, #1
 80032c4:	441a      	add	r2, r3
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80032ce:	b29b      	uxth	r3, r3
 80032d0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80032d2:	693b      	ldr	r3, [r7, #16]
 80032d4:	2b0f      	cmp	r3, #15
 80032d6:	d916      	bls.n	8003306 <UART_SetConfig+0x1a2>
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032de:	d212      	bcs.n	8003306 <UART_SetConfig+0x1a2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80032e0:	693b      	ldr	r3, [r7, #16]
 80032e2:	b29b      	uxth	r3, r3
 80032e4:	f023 030f 	bic.w	r3, r3, #15
 80032e8:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	085b      	lsrs	r3, r3, #1
 80032ee:	b29b      	uxth	r3, r3
 80032f0:	f003 0307 	and.w	r3, r3, #7
 80032f4:	b29a      	uxth	r2, r3
 80032f6:	89fb      	ldrh	r3, [r7, #14]
 80032f8:	4313      	orrs	r3, r2
 80032fa:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	89fa      	ldrh	r2, [r7, #14]
 8003302:	60da      	str	r2, [r3, #12]
 8003304:	e04e      	b.n	80033a4 <UART_SetConfig+0x240>
      }
      else
      {
        ret = HAL_ERROR;
 8003306:	2301      	movs	r3, #1
 8003308:	77bb      	strb	r3, [r7, #30]
 800330a:	e04b      	b.n	80033a4 <UART_SetConfig+0x240>
      }
    }
  }
  else
  {
    switch (clocksource)
 800330c:	7ffb      	ldrb	r3, [r7, #31]
 800330e:	2b08      	cmp	r3, #8
 8003310:	d827      	bhi.n	8003362 <UART_SetConfig+0x1fe>
 8003312:	a201      	add	r2, pc, #4	; (adr r2, 8003318 <UART_SetConfig+0x1b4>)
 8003314:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003318:	0800333d 	.word	0x0800333d
 800331c:	08003345 	.word	0x08003345
 8003320:	0800334d 	.word	0x0800334d
 8003324:	08003363 	.word	0x08003363
 8003328:	08003353 	.word	0x08003353
 800332c:	08003363 	.word	0x08003363
 8003330:	08003363 	.word	0x08003363
 8003334:	08003363 	.word	0x08003363
 8003338:	0800335b 	.word	0x0800335b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800333c:	f7fe fe54 	bl	8001fe8 <HAL_RCC_GetPCLK1Freq>
 8003340:	61b8      	str	r0, [r7, #24]
        break;
 8003342:	e013      	b.n	800336c <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003344:	f7fe fe72 	bl	800202c <HAL_RCC_GetPCLK2Freq>
 8003348:	61b8      	str	r0, [r7, #24]
        break;
 800334a:	e00f      	b.n	800336c <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800334c:	4b20      	ldr	r3, [pc, #128]	; (80033d0 <UART_SetConfig+0x26c>)
 800334e:	61bb      	str	r3, [r7, #24]
        break;
 8003350:	e00c      	b.n	800336c <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003352:	f7fe fdd3 	bl	8001efc <HAL_RCC_GetSysClockFreq>
 8003356:	61b8      	str	r0, [r7, #24]
        break;
 8003358:	e008      	b.n	800336c <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800335a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800335e:	61bb      	str	r3, [r7, #24]
        break;
 8003360:	e004      	b.n	800336c <UART_SetConfig+0x208>
      default:
        pclk = 0U;
 8003362:	2300      	movs	r3, #0
 8003364:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003366:	2301      	movs	r3, #1
 8003368:	77bb      	strb	r3, [r7, #30]
        break;
 800336a:	bf00      	nop
    }

    if (pclk != 0U)
 800336c:	69bb      	ldr	r3, [r7, #24]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d018      	beq.n	80033a4 <UART_SetConfig+0x240>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	085a      	lsrs	r2, r3, #1
 8003378:	69bb      	ldr	r3, [r7, #24]
 800337a:	441a      	add	r2, r3
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	fbb2 f3f3 	udiv	r3, r2, r3
 8003384:	b29b      	uxth	r3, r3
 8003386:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	2b0f      	cmp	r3, #15
 800338c:	d908      	bls.n	80033a0 <UART_SetConfig+0x23c>
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003394:	d204      	bcs.n	80033a0 <UART_SetConfig+0x23c>
      {
        huart->Instance->BRR = usartdiv;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	693a      	ldr	r2, [r7, #16]
 800339c:	60da      	str	r2, [r3, #12]
 800339e:	e001      	b.n	80033a4 <UART_SetConfig+0x240>
      }
      else
      {
        ret = HAL_ERROR;
 80033a0:	2301      	movs	r3, #1
 80033a2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2200      	movs	r2, #0
 80033a8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2200      	movs	r2, #0
 80033ae:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80033b0:	7fbb      	ldrb	r3, [r7, #30]
}
 80033b2:	4618      	mov	r0, r3
 80033b4:	3720      	adds	r7, #32
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}
 80033ba:	bf00      	nop
 80033bc:	efff69f3 	.word	0xefff69f3
 80033c0:	40013800 	.word	0x40013800
 80033c4:	40021000 	.word	0x40021000
 80033c8:	40004400 	.word	0x40004400
 80033cc:	40004800 	.word	0x40004800
 80033d0:	007a1200 	.word	0x007a1200

080033d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80033d4:	b480      	push	{r7}
 80033d6:	b083      	sub	sp, #12
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e0:	f003 0301 	and.w	r3, r3, #1
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d00a      	beq.n	80033fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	430a      	orrs	r2, r1
 80033fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003402:	f003 0302 	and.w	r3, r3, #2
 8003406:	2b00      	cmp	r3, #0
 8003408:	d00a      	beq.n	8003420 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	430a      	orrs	r2, r1
 800341e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003424:	f003 0304 	and.w	r3, r3, #4
 8003428:	2b00      	cmp	r3, #0
 800342a:	d00a      	beq.n	8003442 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	430a      	orrs	r2, r1
 8003440:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003446:	f003 0308 	and.w	r3, r3, #8
 800344a:	2b00      	cmp	r3, #0
 800344c:	d00a      	beq.n	8003464 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	430a      	orrs	r2, r1
 8003462:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003468:	f003 0310 	and.w	r3, r3, #16
 800346c:	2b00      	cmp	r3, #0
 800346e:	d00a      	beq.n	8003486 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	689b      	ldr	r3, [r3, #8]
 8003476:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	430a      	orrs	r2, r1
 8003484:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800348a:	f003 0320 	and.w	r3, r3, #32
 800348e:	2b00      	cmp	r3, #0
 8003490:	d00a      	beq.n	80034a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	430a      	orrs	r2, r1
 80034a6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d01a      	beq.n	80034ea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	430a      	orrs	r2, r1
 80034c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80034d2:	d10a      	bne.n	80034ea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	430a      	orrs	r2, r1
 80034e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d00a      	beq.n	800350c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	430a      	orrs	r2, r1
 800350a:	605a      	str	r2, [r3, #4]
  }
}
 800350c:	bf00      	nop
 800350e:	370c      	adds	r7, #12
 8003510:	46bd      	mov	sp, r7
 8003512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003516:	4770      	bx	lr

08003518 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b086      	sub	sp, #24
 800351c:	af02      	add	r7, sp, #8
 800351e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2200      	movs	r2, #0
 8003524:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003528:	f7fd f9d0 	bl	80008cc <HAL_GetTick>
 800352c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f003 0308 	and.w	r3, r3, #8
 8003538:	2b08      	cmp	r3, #8
 800353a:	d10e      	bne.n	800355a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800353c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003540:	9300      	str	r3, [sp, #0]
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	2200      	movs	r2, #0
 8003546:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	f000 f82d 	bl	80035aa <UART_WaitOnFlagUntilTimeout>
 8003550:	4603      	mov	r3, r0
 8003552:	2b00      	cmp	r3, #0
 8003554:	d001      	beq.n	800355a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003556:	2303      	movs	r3, #3
 8003558:	e023      	b.n	80035a2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f003 0304 	and.w	r3, r3, #4
 8003564:	2b04      	cmp	r3, #4
 8003566:	d10e      	bne.n	8003586 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003568:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800356c:	9300      	str	r3, [sp, #0]
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	2200      	movs	r2, #0
 8003572:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003576:	6878      	ldr	r0, [r7, #4]
 8003578:	f000 f817 	bl	80035aa <UART_WaitOnFlagUntilTimeout>
 800357c:	4603      	mov	r3, r0
 800357e:	2b00      	cmp	r3, #0
 8003580:	d001      	beq.n	8003586 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003582:	2303      	movs	r3, #3
 8003584:	e00d      	b.n	80035a2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2220      	movs	r2, #32
 800358a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2220      	movs	r2, #32
 8003590:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2200      	movs	r2, #0
 8003596:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2200      	movs	r2, #0
 800359c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80035a0:	2300      	movs	r3, #0
}
 80035a2:	4618      	mov	r0, r3
 80035a4:	3710      	adds	r7, #16
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}

080035aa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80035aa:	b580      	push	{r7, lr}
 80035ac:	b09c      	sub	sp, #112	; 0x70
 80035ae:	af00      	add	r7, sp, #0
 80035b0:	60f8      	str	r0, [r7, #12]
 80035b2:	60b9      	str	r1, [r7, #8]
 80035b4:	603b      	str	r3, [r7, #0]
 80035b6:	4613      	mov	r3, r2
 80035b8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035ba:	e0a5      	b.n	8003708 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80035be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80035c2:	f000 80a1 	beq.w	8003708 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035c6:	f7fd f981 	bl	80008cc <HAL_GetTick>
 80035ca:	4602      	mov	r2, r0
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	1ad3      	subs	r3, r2, r3
 80035d0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80035d2:	429a      	cmp	r2, r3
 80035d4:	d302      	bcc.n	80035dc <UART_WaitOnFlagUntilTimeout+0x32>
 80035d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d13e      	bne.n	800365a <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80035e4:	e853 3f00 	ldrex	r3, [r3]
 80035e8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80035ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035ec:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80035f0:	667b      	str	r3, [r7, #100]	; 0x64
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	461a      	mov	r2, r3
 80035f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80035fa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80035fc:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035fe:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003600:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003602:	e841 2300 	strex	r3, r2, [r1]
 8003606:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003608:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800360a:	2b00      	cmp	r3, #0
 800360c:	d1e6      	bne.n	80035dc <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	3308      	adds	r3, #8
 8003614:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003616:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003618:	e853 3f00 	ldrex	r3, [r3]
 800361c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800361e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003620:	f023 0301 	bic.w	r3, r3, #1
 8003624:	663b      	str	r3, [r7, #96]	; 0x60
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	3308      	adds	r3, #8
 800362c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800362e:	64ba      	str	r2, [r7, #72]	; 0x48
 8003630:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003632:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003634:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003636:	e841 2300 	strex	r3, r2, [r1]
 800363a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800363c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800363e:	2b00      	cmp	r3, #0
 8003640:	d1e5      	bne.n	800360e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	2220      	movs	r2, #32
 8003646:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	2220      	movs	r2, #32
 800364c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	2200      	movs	r2, #0
 8003652:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003656:	2303      	movs	r3, #3
 8003658:	e067      	b.n	800372a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f003 0304 	and.w	r3, r3, #4
 8003664:	2b00      	cmp	r3, #0
 8003666:	d04f      	beq.n	8003708 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	69db      	ldr	r3, [r3, #28]
 800366e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003672:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003676:	d147      	bne.n	8003708 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003680:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800368a:	e853 3f00 	ldrex	r3, [r3]
 800368e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003692:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003696:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	461a      	mov	r2, r3
 800369e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036a0:	637b      	str	r3, [r7, #52]	; 0x34
 80036a2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036a4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80036a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80036a8:	e841 2300 	strex	r3, r2, [r1]
 80036ac:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80036ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d1e6      	bne.n	8003682 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	3308      	adds	r3, #8
 80036ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036bc:	697b      	ldr	r3, [r7, #20]
 80036be:	e853 3f00 	ldrex	r3, [r3]
 80036c2:	613b      	str	r3, [r7, #16]
   return(result);
 80036c4:	693b      	ldr	r3, [r7, #16]
 80036c6:	f023 0301 	bic.w	r3, r3, #1
 80036ca:	66bb      	str	r3, [r7, #104]	; 0x68
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	3308      	adds	r3, #8
 80036d2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80036d4:	623a      	str	r2, [r7, #32]
 80036d6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036d8:	69f9      	ldr	r1, [r7, #28]
 80036da:	6a3a      	ldr	r2, [r7, #32]
 80036dc:	e841 2300 	strex	r3, r2, [r1]
 80036e0:	61bb      	str	r3, [r7, #24]
   return(result);
 80036e2:	69bb      	ldr	r3, [r7, #24]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d1e5      	bne.n	80036b4 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	2220      	movs	r2, #32
 80036ec:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	2220      	movs	r2, #32
 80036f2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	2220      	movs	r2, #32
 80036f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	2200      	movs	r2, #0
 8003700:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003704:	2303      	movs	r3, #3
 8003706:	e010      	b.n	800372a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	69da      	ldr	r2, [r3, #28]
 800370e:	68bb      	ldr	r3, [r7, #8]
 8003710:	4013      	ands	r3, r2
 8003712:	68ba      	ldr	r2, [r7, #8]
 8003714:	429a      	cmp	r2, r3
 8003716:	bf0c      	ite	eq
 8003718:	2301      	moveq	r3, #1
 800371a:	2300      	movne	r3, #0
 800371c:	b2db      	uxtb	r3, r3
 800371e:	461a      	mov	r2, r3
 8003720:	79fb      	ldrb	r3, [r7, #7]
 8003722:	429a      	cmp	r2, r3
 8003724:	f43f af4a 	beq.w	80035bc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003728:	2300      	movs	r3, #0
}
 800372a:	4618      	mov	r0, r3
 800372c:	3770      	adds	r7, #112	; 0x70
 800372e:	46bd      	mov	sp, r7
 8003730:	bd80      	pop	{r7, pc}
	...

08003734 <__libc_init_array>:
 8003734:	b570      	push	{r4, r5, r6, lr}
 8003736:	4e0d      	ldr	r6, [pc, #52]	; (800376c <__libc_init_array+0x38>)
 8003738:	4c0d      	ldr	r4, [pc, #52]	; (8003770 <__libc_init_array+0x3c>)
 800373a:	1ba4      	subs	r4, r4, r6
 800373c:	10a4      	asrs	r4, r4, #2
 800373e:	2500      	movs	r5, #0
 8003740:	42a5      	cmp	r5, r4
 8003742:	d109      	bne.n	8003758 <__libc_init_array+0x24>
 8003744:	4e0b      	ldr	r6, [pc, #44]	; (8003774 <__libc_init_array+0x40>)
 8003746:	4c0c      	ldr	r4, [pc, #48]	; (8003778 <__libc_init_array+0x44>)
 8003748:	f000 f820 	bl	800378c <_init>
 800374c:	1ba4      	subs	r4, r4, r6
 800374e:	10a4      	asrs	r4, r4, #2
 8003750:	2500      	movs	r5, #0
 8003752:	42a5      	cmp	r5, r4
 8003754:	d105      	bne.n	8003762 <__libc_init_array+0x2e>
 8003756:	bd70      	pop	{r4, r5, r6, pc}
 8003758:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800375c:	4798      	blx	r3
 800375e:	3501      	adds	r5, #1
 8003760:	e7ee      	b.n	8003740 <__libc_init_array+0xc>
 8003762:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003766:	4798      	blx	r3
 8003768:	3501      	adds	r5, #1
 800376a:	e7f2      	b.n	8003752 <__libc_init_array+0x1e>
 800376c:	080037dc 	.word	0x080037dc
 8003770:	080037dc 	.word	0x080037dc
 8003774:	080037dc 	.word	0x080037dc
 8003778:	080037e0 	.word	0x080037e0

0800377c <memset>:
 800377c:	4402      	add	r2, r0
 800377e:	4603      	mov	r3, r0
 8003780:	4293      	cmp	r3, r2
 8003782:	d100      	bne.n	8003786 <memset+0xa>
 8003784:	4770      	bx	lr
 8003786:	f803 1b01 	strb.w	r1, [r3], #1
 800378a:	e7f9      	b.n	8003780 <memset+0x4>

0800378c <_init>:
 800378c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800378e:	bf00      	nop
 8003790:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003792:	bc08      	pop	{r3}
 8003794:	469e      	mov	lr, r3
 8003796:	4770      	bx	lr

08003798 <_fini>:
 8003798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800379a:	bf00      	nop
 800379c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800379e:	bc08      	pop	{r3}
 80037a0:	469e      	mov	lr, r3
 80037a2:	4770      	bx	lr
