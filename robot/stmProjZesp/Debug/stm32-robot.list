
stm32-robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003184  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  0800330c  0800330c  0001330c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003344  08003344  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003344  08003344  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003344  08003344  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003344  08003344  00013344  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003348  08003348  00013348  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800334c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f0  2000000c  08003358  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000fc  08003358  000200fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e3fc  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001aec  00000000  00000000  0002e438  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c00  00000000  00000000  0002ff28  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b38  00000000  00000000  00030b28  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001acbf  00000000  00000000  00031660  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000bc84  00000000  00000000  0004c31f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000a0671  00000000  00000000  00057fa3  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f8614  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000031a0  00000000  00000000  000f8690  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080032f4 	.word	0x080032f4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080032f4 	.word	0x080032f4

080001c8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b088      	sub	sp, #32
 80001cc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001ce:	f107 030c 	add.w	r3, r7, #12
 80001d2:	2200      	movs	r2, #0
 80001d4:	601a      	str	r2, [r3, #0]
 80001d6:	605a      	str	r2, [r3, #4]
 80001d8:	609a      	str	r2, [r3, #8]
 80001da:	60da      	str	r2, [r3, #12]
 80001dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80001de:	4b1a      	ldr	r3, [pc, #104]	; (8000248 <MX_GPIO_Init+0x80>)
 80001e0:	695b      	ldr	r3, [r3, #20]
 80001e2:	4a19      	ldr	r2, [pc, #100]	; (8000248 <MX_GPIO_Init+0x80>)
 80001e4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80001e8:	6153      	str	r3, [r2, #20]
 80001ea:	4b17      	ldr	r3, [pc, #92]	; (8000248 <MX_GPIO_Init+0x80>)
 80001ec:	695b      	ldr	r3, [r3, #20]
 80001ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80001f2:	60bb      	str	r3, [r7, #8]
 80001f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80001f6:	4b14      	ldr	r3, [pc, #80]	; (8000248 <MX_GPIO_Init+0x80>)
 80001f8:	695b      	ldr	r3, [r3, #20]
 80001fa:	4a13      	ldr	r2, [pc, #76]	; (8000248 <MX_GPIO_Init+0x80>)
 80001fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000200:	6153      	str	r3, [r2, #20]
 8000202:	4b11      	ldr	r3, [pc, #68]	; (8000248 <MX_GPIO_Init+0x80>)
 8000204:	695b      	ldr	r3, [r3, #20]
 8000206:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800020a:	607b      	str	r3, [r7, #4]
 800020c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800020e:	4b0e      	ldr	r3, [pc, #56]	; (8000248 <MX_GPIO_Init+0x80>)
 8000210:	695b      	ldr	r3, [r3, #20]
 8000212:	4a0d      	ldr	r2, [pc, #52]	; (8000248 <MX_GPIO_Init+0x80>)
 8000214:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000218:	6153      	str	r3, [r2, #20]
 800021a:	4b0b      	ldr	r3, [pc, #44]	; (8000248 <MX_GPIO_Init+0x80>)
 800021c:	695b      	ldr	r3, [r3, #20]
 800021e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000222:	603b      	str	r3, [r7, #0]
 8000224:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GAZ_IN_Pin;
 8000226:	2380      	movs	r3, #128	; 0x80
 8000228:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800022a:	2300      	movs	r3, #0
 800022c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800022e:	2300      	movs	r3, #0
 8000230:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GAZ_IN_GPIO_Port, &GPIO_InitStruct);
 8000232:	f107 030c 	add.w	r3, r7, #12
 8000236:	4619      	mov	r1, r3
 8000238:	4804      	ldr	r0, [pc, #16]	; (800024c <MX_GPIO_Init+0x84>)
 800023a:	f000 fbb3 	bl	80009a4 <HAL_GPIO_Init>

}
 800023e:	bf00      	nop
 8000240:	3720      	adds	r7, #32
 8000242:	46bd      	mov	sp, r7
 8000244:	bd80      	pop	{r7, pc}
 8000246:	bf00      	nop
 8000248:	40021000 	.word	0x40021000
 800024c:	48000400 	.word	0x48000400

08000250 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000250:	b580      	push	{r7, lr}
 8000252:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000254:	f000 fa5a 	bl	800070c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000258:	f000 f807 	bl	800026a <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800025c:	f7ff ffb4 	bl	80001c8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000260:	f000 f9b6 	bl	80005d0 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000264:	f000 f8c0 	bl	80003e8 <MX_TIM1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000268:	e7fe      	b.n	8000268 <main+0x18>

0800026a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800026a:	b580      	push	{r7, lr}
 800026c:	b096      	sub	sp, #88	; 0x58
 800026e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000270:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000274:	2228      	movs	r2, #40	; 0x28
 8000276:	2100      	movs	r1, #0
 8000278:	4618      	mov	r0, r3
 800027a:	f003 f833 	bl	80032e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800027e:	f107 031c 	add.w	r3, r7, #28
 8000282:	2200      	movs	r2, #0
 8000284:	601a      	str	r2, [r3, #0]
 8000286:	605a      	str	r2, [r3, #4]
 8000288:	609a      	str	r2, [r3, #8]
 800028a:	60da      	str	r2, [r3, #12]
 800028c:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800028e:	1d3b      	adds	r3, r7, #4
 8000290:	2200      	movs	r2, #0
 8000292:	601a      	str	r2, [r3, #0]
 8000294:	605a      	str	r2, [r3, #4]
 8000296:	609a      	str	r2, [r3, #8]
 8000298:	60da      	str	r2, [r3, #12]
 800029a:	611a      	str	r2, [r3, #16]
 800029c:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800029e:	2302      	movs	r3, #2
 80002a0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002a2:	2301      	movs	r3, #1
 80002a4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002a6:	2310      	movs	r3, #16
 80002a8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002aa:	2300      	movs	r3, #0
 80002ac:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002ae:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80002b2:	4618      	mov	r0, r3
 80002b4:	f000 fce8 	bl	8000c88 <HAL_RCC_OscConfig>
 80002b8:	4603      	mov	r3, r0
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d001      	beq.n	80002c2 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80002be:	f000 f827 	bl	8000310 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002c2:	230f      	movs	r3, #15
 80002c4:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002c6:	2300      	movs	r3, #0
 80002c8:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002ca:	2300      	movs	r3, #0
 80002cc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002ce:	2300      	movs	r3, #0
 80002d0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002d2:	2300      	movs	r3, #0
 80002d4:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002d6:	f107 031c 	add.w	r3, r7, #28
 80002da:	2100      	movs	r1, #0
 80002dc:	4618      	mov	r0, r3
 80002de:	f001 fbdb 	bl	8001a98 <HAL_RCC_ClockConfig>
 80002e2:	4603      	mov	r3, r0
 80002e4:	2b00      	cmp	r3, #0
 80002e6:	d001      	beq.n	80002ec <SystemClock_Config+0x82>
  {
    Error_Handler();
 80002e8:	f000 f812 	bl	8000310 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 80002ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80002f0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 80002f2:	2300      	movs	r3, #0
 80002f4:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002f6:	1d3b      	adds	r3, r7, #4
 80002f8:	4618      	mov	r0, r3
 80002fa:	f001 fe03 	bl	8001f04 <HAL_RCCEx_PeriphCLKConfig>
 80002fe:	4603      	mov	r3, r0
 8000300:	2b00      	cmp	r3, #0
 8000302:	d001      	beq.n	8000308 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000304:	f000 f804 	bl	8000310 <Error_Handler>
  }
}
 8000308:	bf00      	nop
 800030a:	3758      	adds	r7, #88	; 0x58
 800030c:	46bd      	mov	sp, r7
 800030e:	bd80      	pop	{r7, pc}

08000310 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000310:	b480      	push	{r7}
 8000312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000314:	bf00      	nop
 8000316:	46bd      	mov	sp, r7
 8000318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800031c:	4770      	bx	lr
	...

08000320 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000320:	b480      	push	{r7}
 8000322:	b083      	sub	sp, #12
 8000324:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000326:	4b0f      	ldr	r3, [pc, #60]	; (8000364 <HAL_MspInit+0x44>)
 8000328:	699b      	ldr	r3, [r3, #24]
 800032a:	4a0e      	ldr	r2, [pc, #56]	; (8000364 <HAL_MspInit+0x44>)
 800032c:	f043 0301 	orr.w	r3, r3, #1
 8000330:	6193      	str	r3, [r2, #24]
 8000332:	4b0c      	ldr	r3, [pc, #48]	; (8000364 <HAL_MspInit+0x44>)
 8000334:	699b      	ldr	r3, [r3, #24]
 8000336:	f003 0301 	and.w	r3, r3, #1
 800033a:	607b      	str	r3, [r7, #4]
 800033c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800033e:	4b09      	ldr	r3, [pc, #36]	; (8000364 <HAL_MspInit+0x44>)
 8000340:	69db      	ldr	r3, [r3, #28]
 8000342:	4a08      	ldr	r2, [pc, #32]	; (8000364 <HAL_MspInit+0x44>)
 8000344:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000348:	61d3      	str	r3, [r2, #28]
 800034a:	4b06      	ldr	r3, [pc, #24]	; (8000364 <HAL_MspInit+0x44>)
 800034c:	69db      	ldr	r3, [r3, #28]
 800034e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000352:	603b      	str	r3, [r7, #0]
 8000354:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000356:	bf00      	nop
 8000358:	370c      	adds	r7, #12
 800035a:	46bd      	mov	sp, r7
 800035c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000360:	4770      	bx	lr
 8000362:	bf00      	nop
 8000364:	40021000 	.word	0x40021000

08000368 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000368:	b480      	push	{r7}
 800036a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800036c:	bf00      	nop
 800036e:	46bd      	mov	sp, r7
 8000370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000374:	4770      	bx	lr

08000376 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000376:	b480      	push	{r7}
 8000378:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800037a:	e7fe      	b.n	800037a <HardFault_Handler+0x4>

0800037c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800037c:	b480      	push	{r7}
 800037e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000380:	e7fe      	b.n	8000380 <MemManage_Handler+0x4>

08000382 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000382:	b480      	push	{r7}
 8000384:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000386:	e7fe      	b.n	8000386 <BusFault_Handler+0x4>

08000388 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000388:	b480      	push	{r7}
 800038a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800038c:	e7fe      	b.n	800038c <UsageFault_Handler+0x4>

0800038e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800038e:	b480      	push	{r7}
 8000390:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000392:	bf00      	nop
 8000394:	46bd      	mov	sp, r7
 8000396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800039a:	4770      	bx	lr

0800039c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800039c:	b480      	push	{r7}
 800039e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80003a0:	bf00      	nop
 80003a2:	46bd      	mov	sp, r7
 80003a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a8:	4770      	bx	lr

080003aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80003aa:	b480      	push	{r7}
 80003ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80003ae:	bf00      	nop
 80003b0:	46bd      	mov	sp, r7
 80003b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b6:	4770      	bx	lr

080003b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80003bc:	f000 f9ec 	bl	8000798 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80003c0:	bf00      	nop
 80003c2:	bd80      	pop	{r7, pc}

080003c4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80003c4:	b480      	push	{r7}
 80003c6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80003c8:	4b06      	ldr	r3, [pc, #24]	; (80003e4 <SystemInit+0x20>)
 80003ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80003ce:	4a05      	ldr	r2, [pc, #20]	; (80003e4 <SystemInit+0x20>)
 80003d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80003d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80003d8:	bf00      	nop
 80003da:	46bd      	mov	sp, r7
 80003dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e0:	4770      	bx	lr
 80003e2:	bf00      	nop
 80003e4:	e000ed00 	.word	0xe000ed00

080003e8 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b096      	sub	sp, #88	; 0x58
 80003ec:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003ee:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80003f2:	2200      	movs	r2, #0
 80003f4:	601a      	str	r2, [r3, #0]
 80003f6:	605a      	str	r2, [r3, #4]
 80003f8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80003fa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80003fe:	2200      	movs	r2, #0
 8000400:	601a      	str	r2, [r3, #0]
 8000402:	605a      	str	r2, [r3, #4]
 8000404:	609a      	str	r2, [r3, #8]
 8000406:	60da      	str	r2, [r3, #12]
 8000408:	611a      	str	r2, [r3, #16]
 800040a:	615a      	str	r2, [r3, #20]
 800040c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800040e:	1d3b      	adds	r3, r7, #4
 8000410:	222c      	movs	r2, #44	; 0x2c
 8000412:	2100      	movs	r1, #0
 8000414:	4618      	mov	r0, r3
 8000416:	f002 ff65 	bl	80032e4 <memset>

  htim1.Instance = TIM1;
 800041a:	4b3f      	ldr	r3, [pc, #252]	; (8000518 <MX_TIM1_Init+0x130>)
 800041c:	4a3f      	ldr	r2, [pc, #252]	; (800051c <MX_TIM1_Init+0x134>)
 800041e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000420:	4b3d      	ldr	r3, [pc, #244]	; (8000518 <MX_TIM1_Init+0x130>)
 8000422:	2200      	movs	r2, #0
 8000424:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000426:	4b3c      	ldr	r3, [pc, #240]	; (8000518 <MX_TIM1_Init+0x130>)
 8000428:	2200      	movs	r2, #0
 800042a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800042c:	4b3a      	ldr	r3, [pc, #232]	; (8000518 <MX_TIM1_Init+0x130>)
 800042e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000432:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000434:	4b38      	ldr	r3, [pc, #224]	; (8000518 <MX_TIM1_Init+0x130>)
 8000436:	2200      	movs	r2, #0
 8000438:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800043a:	4b37      	ldr	r3, [pc, #220]	; (8000518 <MX_TIM1_Init+0x130>)
 800043c:	2200      	movs	r2, #0
 800043e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000440:	4b35      	ldr	r3, [pc, #212]	; (8000518 <MX_TIM1_Init+0x130>)
 8000442:	2200      	movs	r2, #0
 8000444:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000446:	4834      	ldr	r0, [pc, #208]	; (8000518 <MX_TIM1_Init+0x130>)
 8000448:	f001 fe82 	bl	8002150 <HAL_TIM_PWM_Init>
 800044c:	4603      	mov	r3, r0
 800044e:	2b00      	cmp	r3, #0
 8000450:	d001      	beq.n	8000456 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000452:	f7ff ff5d 	bl	8000310 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000456:	2300      	movs	r3, #0
 8000458:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800045a:	2300      	movs	r3, #0
 800045c:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800045e:	2300      	movs	r3, #0
 8000460:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000462:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000466:	4619      	mov	r1, r3
 8000468:	482b      	ldr	r0, [pc, #172]	; (8000518 <MX_TIM1_Init+0x130>)
 800046a:	f002 fafb 	bl	8002a64 <HAL_TIMEx_MasterConfigSynchronization>
 800046e:	4603      	mov	r3, r0
 8000470:	2b00      	cmp	r3, #0
 8000472:	d001      	beq.n	8000478 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000474:	f7ff ff4c 	bl	8000310 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000478:	2360      	movs	r3, #96	; 0x60
 800047a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 800047c:	2300      	movs	r3, #0
 800047e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000480:	2300      	movs	r3, #0
 8000482:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000484:	2300      	movs	r3, #0
 8000486:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000488:	2300      	movs	r3, #0
 800048a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800048c:	2300      	movs	r3, #0
 800048e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000490:	2300      	movs	r3, #0
 8000492:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000494:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000498:	2200      	movs	r2, #0
 800049a:	4619      	mov	r1, r3
 800049c:	481e      	ldr	r0, [pc, #120]	; (8000518 <MX_TIM1_Init+0x130>)
 800049e:	f001 feaf 	bl	8002200 <HAL_TIM_PWM_ConfigChannel>
 80004a2:	4603      	mov	r3, r0
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d001      	beq.n	80004ac <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80004a8:	f7ff ff32 	bl	8000310 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80004ac:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80004b0:	2204      	movs	r2, #4
 80004b2:	4619      	mov	r1, r3
 80004b4:	4818      	ldr	r0, [pc, #96]	; (8000518 <MX_TIM1_Init+0x130>)
 80004b6:	f001 fea3 	bl	8002200 <HAL_TIM_PWM_ConfigChannel>
 80004ba:	4603      	mov	r3, r0
 80004bc:	2b00      	cmp	r3, #0
 80004be:	d001      	beq.n	80004c4 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 80004c0:	f7ff ff26 	bl	8000310 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80004c4:	2300      	movs	r3, #0
 80004c6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80004c8:	2300      	movs	r3, #0
 80004ca:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80004cc:	2300      	movs	r3, #0
 80004ce:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80004d0:	2300      	movs	r3, #0
 80004d2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80004d4:	2300      	movs	r3, #0
 80004d6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80004d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80004dc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80004de:	2300      	movs	r3, #0
 80004e0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80004e2:	2300      	movs	r3, #0
 80004e4:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80004e6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80004ea:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80004ec:	2300      	movs	r3, #0
 80004ee:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80004f0:	2300      	movs	r3, #0
 80004f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80004f4:	1d3b      	adds	r3, r7, #4
 80004f6:	4619      	mov	r1, r3
 80004f8:	4807      	ldr	r0, [pc, #28]	; (8000518 <MX_TIM1_Init+0x130>)
 80004fa:	f002 fb21 	bl	8002b40 <HAL_TIMEx_ConfigBreakDeadTime>
 80004fe:	4603      	mov	r3, r0
 8000500:	2b00      	cmp	r3, #0
 8000502:	d001      	beq.n	8000508 <MX_TIM1_Init+0x120>
  {
    Error_Handler();
 8000504:	f7ff ff04 	bl	8000310 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 8000508:	4803      	ldr	r0, [pc, #12]	; (8000518 <MX_TIM1_Init+0x130>)
 800050a:	f000 f829 	bl	8000560 <HAL_TIM_MspPostInit>

}
 800050e:	bf00      	nop
 8000510:	3758      	adds	r7, #88	; 0x58
 8000512:	46bd      	mov	sp, r7
 8000514:	bd80      	pop	{r7, pc}
 8000516:	bf00      	nop
 8000518:	20000028 	.word	0x20000028
 800051c:	40012c00 	.word	0x40012c00

08000520 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000520:	b480      	push	{r7}
 8000522:	b085      	sub	sp, #20
 8000524:	af00      	add	r7, sp, #0
 8000526:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	4a0a      	ldr	r2, [pc, #40]	; (8000558 <HAL_TIM_PWM_MspInit+0x38>)
 800052e:	4293      	cmp	r3, r2
 8000530:	d10b      	bne.n	800054a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000532:	4b0a      	ldr	r3, [pc, #40]	; (800055c <HAL_TIM_PWM_MspInit+0x3c>)
 8000534:	699b      	ldr	r3, [r3, #24]
 8000536:	4a09      	ldr	r2, [pc, #36]	; (800055c <HAL_TIM_PWM_MspInit+0x3c>)
 8000538:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800053c:	6193      	str	r3, [r2, #24]
 800053e:	4b07      	ldr	r3, [pc, #28]	; (800055c <HAL_TIM_PWM_MspInit+0x3c>)
 8000540:	699b      	ldr	r3, [r3, #24]
 8000542:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000546:	60fb      	str	r3, [r7, #12]
 8000548:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800054a:	bf00      	nop
 800054c:	3714      	adds	r7, #20
 800054e:	46bd      	mov	sp, r7
 8000550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000554:	4770      	bx	lr
 8000556:	bf00      	nop
 8000558:	40012c00 	.word	0x40012c00
 800055c:	40021000 	.word	0x40021000

08000560 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b088      	sub	sp, #32
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000568:	f107 030c 	add.w	r3, r7, #12
 800056c:	2200      	movs	r2, #0
 800056e:	601a      	str	r2, [r3, #0]
 8000570:	605a      	str	r2, [r3, #4]
 8000572:	609a      	str	r2, [r3, #8]
 8000574:	60da      	str	r2, [r3, #12]
 8000576:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	4a12      	ldr	r2, [pc, #72]	; (80005c8 <HAL_TIM_MspPostInit+0x68>)
 800057e:	4293      	cmp	r3, r2
 8000580:	d11d      	bne.n	80005be <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000582:	4b12      	ldr	r3, [pc, #72]	; (80005cc <HAL_TIM_MspPostInit+0x6c>)
 8000584:	695b      	ldr	r3, [r3, #20]
 8000586:	4a11      	ldr	r2, [pc, #68]	; (80005cc <HAL_TIM_MspPostInit+0x6c>)
 8000588:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800058c:	6153      	str	r3, [r2, #20]
 800058e:	4b0f      	ldr	r3, [pc, #60]	; (80005cc <HAL_TIM_MspPostInit+0x6c>)
 8000590:	695b      	ldr	r3, [r3, #20]
 8000592:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000596:	60bb      	str	r3, [r7, #8]
 8000598:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800059a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800059e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005a0:	2302      	movs	r3, #2
 80005a2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a4:	2300      	movs	r3, #0
 80005a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005a8:	2300      	movs	r3, #0
 80005aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80005ac:	2306      	movs	r3, #6
 80005ae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005b0:	f107 030c 	add.w	r3, r7, #12
 80005b4:	4619      	mov	r1, r3
 80005b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005ba:	f000 f9f3 	bl	80009a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80005be:	bf00      	nop
 80005c0:	3720      	adds	r7, #32
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	bf00      	nop
 80005c8:	40012c00 	.word	0x40012c00
 80005cc:	40021000 	.word	0x40021000

080005d0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 80005d4:	4b14      	ldr	r3, [pc, #80]	; (8000628 <MX_USART2_UART_Init+0x58>)
 80005d6:	4a15      	ldr	r2, [pc, #84]	; (800062c <MX_USART2_UART_Init+0x5c>)
 80005d8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80005da:	4b13      	ldr	r3, [pc, #76]	; (8000628 <MX_USART2_UART_Init+0x58>)
 80005dc:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80005e0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80005e2:	4b11      	ldr	r3, [pc, #68]	; (8000628 <MX_USART2_UART_Init+0x58>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80005e8:	4b0f      	ldr	r3, [pc, #60]	; (8000628 <MX_USART2_UART_Init+0x58>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80005ee:	4b0e      	ldr	r3, [pc, #56]	; (8000628 <MX_USART2_UART_Init+0x58>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80005f4:	4b0c      	ldr	r3, [pc, #48]	; (8000628 <MX_USART2_UART_Init+0x58>)
 80005f6:	220c      	movs	r2, #12
 80005f8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005fa:	4b0b      	ldr	r3, [pc, #44]	; (8000628 <MX_USART2_UART_Init+0x58>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000600:	4b09      	ldr	r3, [pc, #36]	; (8000628 <MX_USART2_UART_Init+0x58>)
 8000602:	2200      	movs	r2, #0
 8000604:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000606:	4b08      	ldr	r3, [pc, #32]	; (8000628 <MX_USART2_UART_Init+0x58>)
 8000608:	2200      	movs	r2, #0
 800060a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800060c:	4b06      	ldr	r3, [pc, #24]	; (8000628 <MX_USART2_UART_Init+0x58>)
 800060e:	2200      	movs	r2, #0
 8000610:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000612:	4805      	ldr	r0, [pc, #20]	; (8000628 <MX_USART2_UART_Init+0x58>)
 8000614:	f002 fb0c 	bl	8002c30 <HAL_UART_Init>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800061e:	f7ff fe77 	bl	8000310 <Error_Handler>
  }

}
 8000622:	bf00      	nop
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	20000074 	.word	0x20000074
 800062c:	40004400 	.word	0x40004400

08000630 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b08a      	sub	sp, #40	; 0x28
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000638:	f107 0314 	add.w	r3, r7, #20
 800063c:	2200      	movs	r2, #0
 800063e:	601a      	str	r2, [r3, #0]
 8000640:	605a      	str	r2, [r3, #4]
 8000642:	609a      	str	r2, [r3, #8]
 8000644:	60da      	str	r2, [r3, #12]
 8000646:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	4a18      	ldr	r2, [pc, #96]	; (80006b0 <HAL_UART_MspInit+0x80>)
 800064e:	4293      	cmp	r3, r2
 8000650:	d129      	bne.n	80006a6 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000652:	4b18      	ldr	r3, [pc, #96]	; (80006b4 <HAL_UART_MspInit+0x84>)
 8000654:	69db      	ldr	r3, [r3, #28]
 8000656:	4a17      	ldr	r2, [pc, #92]	; (80006b4 <HAL_UART_MspInit+0x84>)
 8000658:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800065c:	61d3      	str	r3, [r2, #28]
 800065e:	4b15      	ldr	r3, [pc, #84]	; (80006b4 <HAL_UART_MspInit+0x84>)
 8000660:	69db      	ldr	r3, [r3, #28]
 8000662:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000666:	613b      	str	r3, [r7, #16]
 8000668:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800066a:	4b12      	ldr	r3, [pc, #72]	; (80006b4 <HAL_UART_MspInit+0x84>)
 800066c:	695b      	ldr	r3, [r3, #20]
 800066e:	4a11      	ldr	r2, [pc, #68]	; (80006b4 <HAL_UART_MspInit+0x84>)
 8000670:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000674:	6153      	str	r3, [r2, #20]
 8000676:	4b0f      	ldr	r3, [pc, #60]	; (80006b4 <HAL_UART_MspInit+0x84>)
 8000678:	695b      	ldr	r3, [r3, #20]
 800067a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800067e:	60fb      	str	r3, [r7, #12]
 8000680:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8000682:	f248 0304 	movw	r3, #32772	; 0x8004
 8000686:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000688:	2302      	movs	r3, #2
 800068a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068c:	2300      	movs	r3, #0
 800068e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000690:	2303      	movs	r3, #3
 8000692:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000694:	2307      	movs	r3, #7
 8000696:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000698:	f107 0314 	add.w	r3, r7, #20
 800069c:	4619      	mov	r1, r3
 800069e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006a2:	f000 f97f 	bl	80009a4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80006a6:	bf00      	nop
 80006a8:	3728      	adds	r7, #40	; 0x28
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	40004400 	.word	0x40004400
 80006b4:	40021000 	.word	0x40021000

080006b8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80006b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80006f0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006bc:	480d      	ldr	r0, [pc, #52]	; (80006f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80006be:	490e      	ldr	r1, [pc, #56]	; (80006f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80006c0:	4a0e      	ldr	r2, [pc, #56]	; (80006fc <LoopForever+0xe>)
  movs r3, #0
 80006c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006c4:	e002      	b.n	80006cc <LoopCopyDataInit>

080006c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006ca:	3304      	adds	r3, #4

080006cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006d0:	d3f9      	bcc.n	80006c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006d2:	4a0b      	ldr	r2, [pc, #44]	; (8000700 <LoopForever+0x12>)
  ldr r4, =_ebss
 80006d4:	4c0b      	ldr	r4, [pc, #44]	; (8000704 <LoopForever+0x16>)
  movs r3, #0
 80006d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006d8:	e001      	b.n	80006de <LoopFillZerobss>

080006da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006dc:	3204      	adds	r2, #4

080006de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006e0:	d3fb      	bcc.n	80006da <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80006e2:	f7ff fe6f 	bl	80003c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80006e6:	f002 fdd9 	bl	800329c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80006ea:	f7ff fdb1 	bl	8000250 <main>

080006ee <LoopForever>:

LoopForever:
    b LoopForever
 80006ee:	e7fe      	b.n	80006ee <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80006f0:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 80006f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006f8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80006fc:	0800334c 	.word	0x0800334c
  ldr r2, =_sbss
 8000700:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000704:	200000fc 	.word	0x200000fc

08000708 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000708:	e7fe      	b.n	8000708 <ADC1_2_IRQHandler>
	...

0800070c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000710:	4b08      	ldr	r3, [pc, #32]	; (8000734 <HAL_Init+0x28>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	4a07      	ldr	r2, [pc, #28]	; (8000734 <HAL_Init+0x28>)
 8000716:	f043 0310 	orr.w	r3, r3, #16
 800071a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800071c:	2003      	movs	r0, #3
 800071e:	f000 f90d 	bl	800093c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000722:	2000      	movs	r0, #0
 8000724:	f000 f808 	bl	8000738 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000728:	f7ff fdfa 	bl	8000320 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800072c:	2300      	movs	r3, #0
}
 800072e:	4618      	mov	r0, r3
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	40022000 	.word	0x40022000

08000738 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b082      	sub	sp, #8
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000740:	4b12      	ldr	r3, [pc, #72]	; (800078c <HAL_InitTick+0x54>)
 8000742:	681a      	ldr	r2, [r3, #0]
 8000744:	4b12      	ldr	r3, [pc, #72]	; (8000790 <HAL_InitTick+0x58>)
 8000746:	781b      	ldrb	r3, [r3, #0]
 8000748:	4619      	mov	r1, r3
 800074a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800074e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000752:	fbb2 f3f3 	udiv	r3, r2, r3
 8000756:	4618      	mov	r0, r3
 8000758:	f000 f917 	bl	800098a <HAL_SYSTICK_Config>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000762:	2301      	movs	r3, #1
 8000764:	e00e      	b.n	8000784 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	2b0f      	cmp	r3, #15
 800076a:	d80a      	bhi.n	8000782 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800076c:	2200      	movs	r2, #0
 800076e:	6879      	ldr	r1, [r7, #4]
 8000770:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000774:	f000 f8ed 	bl	8000952 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000778:	4a06      	ldr	r2, [pc, #24]	; (8000794 <HAL_InitTick+0x5c>)
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800077e:	2300      	movs	r3, #0
 8000780:	e000      	b.n	8000784 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000782:	2301      	movs	r3, #1
}
 8000784:	4618      	mov	r0, r3
 8000786:	3708      	adds	r7, #8
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}
 800078c:	20000000 	.word	0x20000000
 8000790:	20000008 	.word	0x20000008
 8000794:	20000004 	.word	0x20000004

08000798 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800079c:	4b06      	ldr	r3, [pc, #24]	; (80007b8 <HAL_IncTick+0x20>)
 800079e:	781b      	ldrb	r3, [r3, #0]
 80007a0:	461a      	mov	r2, r3
 80007a2:	4b06      	ldr	r3, [pc, #24]	; (80007bc <HAL_IncTick+0x24>)
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	4413      	add	r3, r2
 80007a8:	4a04      	ldr	r2, [pc, #16]	; (80007bc <HAL_IncTick+0x24>)
 80007aa:	6013      	str	r3, [r2, #0]
}
 80007ac:	bf00      	nop
 80007ae:	46bd      	mov	sp, r7
 80007b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b4:	4770      	bx	lr
 80007b6:	bf00      	nop
 80007b8:	20000008 	.word	0x20000008
 80007bc:	200000f8 	.word	0x200000f8

080007c0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0
  return uwTick;  
 80007c4:	4b03      	ldr	r3, [pc, #12]	; (80007d4 <HAL_GetTick+0x14>)
 80007c6:	681b      	ldr	r3, [r3, #0]
}
 80007c8:	4618      	mov	r0, r3
 80007ca:	46bd      	mov	sp, r7
 80007cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d0:	4770      	bx	lr
 80007d2:	bf00      	nop
 80007d4:	200000f8 	.word	0x200000f8

080007d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007d8:	b480      	push	{r7}
 80007da:	b085      	sub	sp, #20
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	f003 0307 	and.w	r3, r3, #7
 80007e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007e8:	4b0c      	ldr	r3, [pc, #48]	; (800081c <__NVIC_SetPriorityGrouping+0x44>)
 80007ea:	68db      	ldr	r3, [r3, #12]
 80007ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007ee:	68ba      	ldr	r2, [r7, #8]
 80007f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80007f4:	4013      	ands	r3, r2
 80007f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80007f8:	68fb      	ldr	r3, [r7, #12]
 80007fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007fc:	68bb      	ldr	r3, [r7, #8]
 80007fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000800:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000804:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000808:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800080a:	4a04      	ldr	r2, [pc, #16]	; (800081c <__NVIC_SetPriorityGrouping+0x44>)
 800080c:	68bb      	ldr	r3, [r7, #8]
 800080e:	60d3      	str	r3, [r2, #12]
}
 8000810:	bf00      	nop
 8000812:	3714      	adds	r7, #20
 8000814:	46bd      	mov	sp, r7
 8000816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081a:	4770      	bx	lr
 800081c:	e000ed00 	.word	0xe000ed00

08000820 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000824:	4b04      	ldr	r3, [pc, #16]	; (8000838 <__NVIC_GetPriorityGrouping+0x18>)
 8000826:	68db      	ldr	r3, [r3, #12]
 8000828:	0a1b      	lsrs	r3, r3, #8
 800082a:	f003 0307 	and.w	r3, r3, #7
}
 800082e:	4618      	mov	r0, r3
 8000830:	46bd      	mov	sp, r7
 8000832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000836:	4770      	bx	lr
 8000838:	e000ed00 	.word	0xe000ed00

0800083c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800083c:	b480      	push	{r7}
 800083e:	b083      	sub	sp, #12
 8000840:	af00      	add	r7, sp, #0
 8000842:	4603      	mov	r3, r0
 8000844:	6039      	str	r1, [r7, #0]
 8000846:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000848:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800084c:	2b00      	cmp	r3, #0
 800084e:	db0a      	blt.n	8000866 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000850:	683b      	ldr	r3, [r7, #0]
 8000852:	b2da      	uxtb	r2, r3
 8000854:	490c      	ldr	r1, [pc, #48]	; (8000888 <__NVIC_SetPriority+0x4c>)
 8000856:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800085a:	0112      	lsls	r2, r2, #4
 800085c:	b2d2      	uxtb	r2, r2
 800085e:	440b      	add	r3, r1
 8000860:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000864:	e00a      	b.n	800087c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000866:	683b      	ldr	r3, [r7, #0]
 8000868:	b2da      	uxtb	r2, r3
 800086a:	4908      	ldr	r1, [pc, #32]	; (800088c <__NVIC_SetPriority+0x50>)
 800086c:	79fb      	ldrb	r3, [r7, #7]
 800086e:	f003 030f 	and.w	r3, r3, #15
 8000872:	3b04      	subs	r3, #4
 8000874:	0112      	lsls	r2, r2, #4
 8000876:	b2d2      	uxtb	r2, r2
 8000878:	440b      	add	r3, r1
 800087a:	761a      	strb	r2, [r3, #24]
}
 800087c:	bf00      	nop
 800087e:	370c      	adds	r7, #12
 8000880:	46bd      	mov	sp, r7
 8000882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000886:	4770      	bx	lr
 8000888:	e000e100 	.word	0xe000e100
 800088c:	e000ed00 	.word	0xe000ed00

08000890 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000890:	b480      	push	{r7}
 8000892:	b089      	sub	sp, #36	; 0x24
 8000894:	af00      	add	r7, sp, #0
 8000896:	60f8      	str	r0, [r7, #12]
 8000898:	60b9      	str	r1, [r7, #8]
 800089a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800089c:	68fb      	ldr	r3, [r7, #12]
 800089e:	f003 0307 	and.w	r3, r3, #7
 80008a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008a4:	69fb      	ldr	r3, [r7, #28]
 80008a6:	f1c3 0307 	rsb	r3, r3, #7
 80008aa:	2b04      	cmp	r3, #4
 80008ac:	bf28      	it	cs
 80008ae:	2304      	movcs	r3, #4
 80008b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008b2:	69fb      	ldr	r3, [r7, #28]
 80008b4:	3304      	adds	r3, #4
 80008b6:	2b06      	cmp	r3, #6
 80008b8:	d902      	bls.n	80008c0 <NVIC_EncodePriority+0x30>
 80008ba:	69fb      	ldr	r3, [r7, #28]
 80008bc:	3b03      	subs	r3, #3
 80008be:	e000      	b.n	80008c2 <NVIC_EncodePriority+0x32>
 80008c0:	2300      	movs	r3, #0
 80008c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80008c8:	69bb      	ldr	r3, [r7, #24]
 80008ca:	fa02 f303 	lsl.w	r3, r2, r3
 80008ce:	43da      	mvns	r2, r3
 80008d0:	68bb      	ldr	r3, [r7, #8]
 80008d2:	401a      	ands	r2, r3
 80008d4:	697b      	ldr	r3, [r7, #20]
 80008d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008d8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80008dc:	697b      	ldr	r3, [r7, #20]
 80008de:	fa01 f303 	lsl.w	r3, r1, r3
 80008e2:	43d9      	mvns	r1, r3
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008e8:	4313      	orrs	r3, r2
         );
}
 80008ea:	4618      	mov	r0, r3
 80008ec:	3724      	adds	r7, #36	; 0x24
 80008ee:	46bd      	mov	sp, r7
 80008f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f4:	4770      	bx	lr
	...

080008f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b082      	sub	sp, #8
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	3b01      	subs	r3, #1
 8000904:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000908:	d301      	bcc.n	800090e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800090a:	2301      	movs	r3, #1
 800090c:	e00f      	b.n	800092e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800090e:	4a0a      	ldr	r2, [pc, #40]	; (8000938 <SysTick_Config+0x40>)
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	3b01      	subs	r3, #1
 8000914:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000916:	210f      	movs	r1, #15
 8000918:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800091c:	f7ff ff8e 	bl	800083c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000920:	4b05      	ldr	r3, [pc, #20]	; (8000938 <SysTick_Config+0x40>)
 8000922:	2200      	movs	r2, #0
 8000924:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000926:	4b04      	ldr	r3, [pc, #16]	; (8000938 <SysTick_Config+0x40>)
 8000928:	2207      	movs	r2, #7
 800092a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800092c:	2300      	movs	r3, #0
}
 800092e:	4618      	mov	r0, r3
 8000930:	3708      	adds	r7, #8
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	e000e010 	.word	0xe000e010

0800093c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b082      	sub	sp, #8
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000944:	6878      	ldr	r0, [r7, #4]
 8000946:	f7ff ff47 	bl	80007d8 <__NVIC_SetPriorityGrouping>
}
 800094a:	bf00      	nop
 800094c:	3708      	adds	r7, #8
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}

08000952 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000952:	b580      	push	{r7, lr}
 8000954:	b086      	sub	sp, #24
 8000956:	af00      	add	r7, sp, #0
 8000958:	4603      	mov	r3, r0
 800095a:	60b9      	str	r1, [r7, #8]
 800095c:	607a      	str	r2, [r7, #4]
 800095e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000960:	2300      	movs	r3, #0
 8000962:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000964:	f7ff ff5c 	bl	8000820 <__NVIC_GetPriorityGrouping>
 8000968:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800096a:	687a      	ldr	r2, [r7, #4]
 800096c:	68b9      	ldr	r1, [r7, #8]
 800096e:	6978      	ldr	r0, [r7, #20]
 8000970:	f7ff ff8e 	bl	8000890 <NVIC_EncodePriority>
 8000974:	4602      	mov	r2, r0
 8000976:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800097a:	4611      	mov	r1, r2
 800097c:	4618      	mov	r0, r3
 800097e:	f7ff ff5d 	bl	800083c <__NVIC_SetPriority>
}
 8000982:	bf00      	nop
 8000984:	3718      	adds	r7, #24
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}

0800098a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800098a:	b580      	push	{r7, lr}
 800098c:	b082      	sub	sp, #8
 800098e:	af00      	add	r7, sp, #0
 8000990:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000992:	6878      	ldr	r0, [r7, #4]
 8000994:	f7ff ffb0 	bl	80008f8 <SysTick_Config>
 8000998:	4603      	mov	r3, r0
}
 800099a:	4618      	mov	r0, r3
 800099c:	3708      	adds	r7, #8
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
	...

080009a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80009a4:	b480      	push	{r7}
 80009a6:	b087      	sub	sp, #28
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
 80009ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80009ae:	2300      	movs	r3, #0
 80009b0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80009b2:	e14e      	b.n	8000c52 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80009b4:	683b      	ldr	r3, [r7, #0]
 80009b6:	681a      	ldr	r2, [r3, #0]
 80009b8:	2101      	movs	r1, #1
 80009ba:	697b      	ldr	r3, [r7, #20]
 80009bc:	fa01 f303 	lsl.w	r3, r1, r3
 80009c0:	4013      	ands	r3, r2
 80009c2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	f000 8140 	beq.w	8000c4c <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80009cc:	683b      	ldr	r3, [r7, #0]
 80009ce:	685b      	ldr	r3, [r3, #4]
 80009d0:	f003 0303 	and.w	r3, r3, #3
 80009d4:	2b01      	cmp	r3, #1
 80009d6:	d005      	beq.n	80009e4 <HAL_GPIO_Init+0x40>
 80009d8:	683b      	ldr	r3, [r7, #0]
 80009da:	685b      	ldr	r3, [r3, #4]
 80009dc:	f003 0303 	and.w	r3, r3, #3
 80009e0:	2b02      	cmp	r3, #2
 80009e2:	d130      	bne.n	8000a46 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	689b      	ldr	r3, [r3, #8]
 80009e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80009ea:	697b      	ldr	r3, [r7, #20]
 80009ec:	005b      	lsls	r3, r3, #1
 80009ee:	2203      	movs	r2, #3
 80009f0:	fa02 f303 	lsl.w	r3, r2, r3
 80009f4:	43db      	mvns	r3, r3
 80009f6:	693a      	ldr	r2, [r7, #16]
 80009f8:	4013      	ands	r3, r2
 80009fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80009fc:	683b      	ldr	r3, [r7, #0]
 80009fe:	68da      	ldr	r2, [r3, #12]
 8000a00:	697b      	ldr	r3, [r7, #20]
 8000a02:	005b      	lsls	r3, r3, #1
 8000a04:	fa02 f303 	lsl.w	r3, r2, r3
 8000a08:	693a      	ldr	r2, [r7, #16]
 8000a0a:	4313      	orrs	r3, r2
 8000a0c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	693a      	ldr	r2, [r7, #16]
 8000a12:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	685b      	ldr	r3, [r3, #4]
 8000a18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000a1a:	2201      	movs	r2, #1
 8000a1c:	697b      	ldr	r3, [r7, #20]
 8000a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a22:	43db      	mvns	r3, r3
 8000a24:	693a      	ldr	r2, [r7, #16]
 8000a26:	4013      	ands	r3, r2
 8000a28:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000a2a:	683b      	ldr	r3, [r7, #0]
 8000a2c:	685b      	ldr	r3, [r3, #4]
 8000a2e:	091b      	lsrs	r3, r3, #4
 8000a30:	f003 0201 	and.w	r2, r3, #1
 8000a34:	697b      	ldr	r3, [r7, #20]
 8000a36:	fa02 f303 	lsl.w	r3, r2, r3
 8000a3a:	693a      	ldr	r2, [r7, #16]
 8000a3c:	4313      	orrs	r3, r2
 8000a3e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	693a      	ldr	r2, [r7, #16]
 8000a44:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000a46:	683b      	ldr	r3, [r7, #0]
 8000a48:	685b      	ldr	r3, [r3, #4]
 8000a4a:	f003 0303 	and.w	r3, r3, #3
 8000a4e:	2b03      	cmp	r3, #3
 8000a50:	d017      	beq.n	8000a82 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	68db      	ldr	r3, [r3, #12]
 8000a56:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000a58:	697b      	ldr	r3, [r7, #20]
 8000a5a:	005b      	lsls	r3, r3, #1
 8000a5c:	2203      	movs	r2, #3
 8000a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a62:	43db      	mvns	r3, r3
 8000a64:	693a      	ldr	r2, [r7, #16]
 8000a66:	4013      	ands	r3, r2
 8000a68:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000a6a:	683b      	ldr	r3, [r7, #0]
 8000a6c:	689a      	ldr	r2, [r3, #8]
 8000a6e:	697b      	ldr	r3, [r7, #20]
 8000a70:	005b      	lsls	r3, r3, #1
 8000a72:	fa02 f303 	lsl.w	r3, r2, r3
 8000a76:	693a      	ldr	r2, [r7, #16]
 8000a78:	4313      	orrs	r3, r2
 8000a7a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	693a      	ldr	r2, [r7, #16]
 8000a80:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000a82:	683b      	ldr	r3, [r7, #0]
 8000a84:	685b      	ldr	r3, [r3, #4]
 8000a86:	f003 0303 	and.w	r3, r3, #3
 8000a8a:	2b02      	cmp	r3, #2
 8000a8c:	d123      	bne.n	8000ad6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000a8e:	697b      	ldr	r3, [r7, #20]
 8000a90:	08da      	lsrs	r2, r3, #3
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	3208      	adds	r2, #8
 8000a96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a9a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000a9c:	697b      	ldr	r3, [r7, #20]
 8000a9e:	f003 0307 	and.w	r3, r3, #7
 8000aa2:	009b      	lsls	r3, r3, #2
 8000aa4:	220f      	movs	r2, #15
 8000aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aaa:	43db      	mvns	r3, r3
 8000aac:	693a      	ldr	r2, [r7, #16]
 8000aae:	4013      	ands	r3, r2
 8000ab0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000ab2:	683b      	ldr	r3, [r7, #0]
 8000ab4:	691a      	ldr	r2, [r3, #16]
 8000ab6:	697b      	ldr	r3, [r7, #20]
 8000ab8:	f003 0307 	and.w	r3, r3, #7
 8000abc:	009b      	lsls	r3, r3, #2
 8000abe:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac2:	693a      	ldr	r2, [r7, #16]
 8000ac4:	4313      	orrs	r3, r2
 8000ac6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000ac8:	697b      	ldr	r3, [r7, #20]
 8000aca:	08da      	lsrs	r2, r3, #3
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	3208      	adds	r2, #8
 8000ad0:	6939      	ldr	r1, [r7, #16]
 8000ad2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000adc:	697b      	ldr	r3, [r7, #20]
 8000ade:	005b      	lsls	r3, r3, #1
 8000ae0:	2203      	movs	r2, #3
 8000ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ae6:	43db      	mvns	r3, r3
 8000ae8:	693a      	ldr	r2, [r7, #16]
 8000aea:	4013      	ands	r3, r2
 8000aec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000aee:	683b      	ldr	r3, [r7, #0]
 8000af0:	685b      	ldr	r3, [r3, #4]
 8000af2:	f003 0203 	and.w	r2, r3, #3
 8000af6:	697b      	ldr	r3, [r7, #20]
 8000af8:	005b      	lsls	r3, r3, #1
 8000afa:	fa02 f303 	lsl.w	r3, r2, r3
 8000afe:	693a      	ldr	r2, [r7, #16]
 8000b00:	4313      	orrs	r3, r2
 8000b02:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	693a      	ldr	r2, [r7, #16]
 8000b08:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000b0a:	683b      	ldr	r3, [r7, #0]
 8000b0c:	685b      	ldr	r3, [r3, #4]
 8000b0e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	f000 809a 	beq.w	8000c4c <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b18:	4b55      	ldr	r3, [pc, #340]	; (8000c70 <HAL_GPIO_Init+0x2cc>)
 8000b1a:	699b      	ldr	r3, [r3, #24]
 8000b1c:	4a54      	ldr	r2, [pc, #336]	; (8000c70 <HAL_GPIO_Init+0x2cc>)
 8000b1e:	f043 0301 	orr.w	r3, r3, #1
 8000b22:	6193      	str	r3, [r2, #24]
 8000b24:	4b52      	ldr	r3, [pc, #328]	; (8000c70 <HAL_GPIO_Init+0x2cc>)
 8000b26:	699b      	ldr	r3, [r3, #24]
 8000b28:	f003 0301 	and.w	r3, r3, #1
 8000b2c:	60bb      	str	r3, [r7, #8]
 8000b2e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000b30:	4a50      	ldr	r2, [pc, #320]	; (8000c74 <HAL_GPIO_Init+0x2d0>)
 8000b32:	697b      	ldr	r3, [r7, #20]
 8000b34:	089b      	lsrs	r3, r3, #2
 8000b36:	3302      	adds	r3, #2
 8000b38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b3c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000b3e:	697b      	ldr	r3, [r7, #20]
 8000b40:	f003 0303 	and.w	r3, r3, #3
 8000b44:	009b      	lsls	r3, r3, #2
 8000b46:	220f      	movs	r2, #15
 8000b48:	fa02 f303 	lsl.w	r3, r2, r3
 8000b4c:	43db      	mvns	r3, r3
 8000b4e:	693a      	ldr	r2, [r7, #16]
 8000b50:	4013      	ands	r3, r2
 8000b52:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000b5a:	d013      	beq.n	8000b84 <HAL_GPIO_Init+0x1e0>
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	4a46      	ldr	r2, [pc, #280]	; (8000c78 <HAL_GPIO_Init+0x2d4>)
 8000b60:	4293      	cmp	r3, r2
 8000b62:	d00d      	beq.n	8000b80 <HAL_GPIO_Init+0x1dc>
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	4a45      	ldr	r2, [pc, #276]	; (8000c7c <HAL_GPIO_Init+0x2d8>)
 8000b68:	4293      	cmp	r3, r2
 8000b6a:	d007      	beq.n	8000b7c <HAL_GPIO_Init+0x1d8>
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	4a44      	ldr	r2, [pc, #272]	; (8000c80 <HAL_GPIO_Init+0x2dc>)
 8000b70:	4293      	cmp	r3, r2
 8000b72:	d101      	bne.n	8000b78 <HAL_GPIO_Init+0x1d4>
 8000b74:	2303      	movs	r3, #3
 8000b76:	e006      	b.n	8000b86 <HAL_GPIO_Init+0x1e2>
 8000b78:	2305      	movs	r3, #5
 8000b7a:	e004      	b.n	8000b86 <HAL_GPIO_Init+0x1e2>
 8000b7c:	2302      	movs	r3, #2
 8000b7e:	e002      	b.n	8000b86 <HAL_GPIO_Init+0x1e2>
 8000b80:	2301      	movs	r3, #1
 8000b82:	e000      	b.n	8000b86 <HAL_GPIO_Init+0x1e2>
 8000b84:	2300      	movs	r3, #0
 8000b86:	697a      	ldr	r2, [r7, #20]
 8000b88:	f002 0203 	and.w	r2, r2, #3
 8000b8c:	0092      	lsls	r2, r2, #2
 8000b8e:	4093      	lsls	r3, r2
 8000b90:	693a      	ldr	r2, [r7, #16]
 8000b92:	4313      	orrs	r3, r2
 8000b94:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000b96:	4937      	ldr	r1, [pc, #220]	; (8000c74 <HAL_GPIO_Init+0x2d0>)
 8000b98:	697b      	ldr	r3, [r7, #20]
 8000b9a:	089b      	lsrs	r3, r3, #2
 8000b9c:	3302      	adds	r3, #2
 8000b9e:	693a      	ldr	r2, [r7, #16]
 8000ba0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ba4:	4b37      	ldr	r3, [pc, #220]	; (8000c84 <HAL_GPIO_Init+0x2e0>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000baa:	68fb      	ldr	r3, [r7, #12]
 8000bac:	43db      	mvns	r3, r3
 8000bae:	693a      	ldr	r2, [r7, #16]
 8000bb0:	4013      	ands	r3, r2
 8000bb2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000bb4:	683b      	ldr	r3, [r7, #0]
 8000bb6:	685b      	ldr	r3, [r3, #4]
 8000bb8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d003      	beq.n	8000bc8 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8000bc0:	693a      	ldr	r2, [r7, #16]
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	4313      	orrs	r3, r2
 8000bc6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000bc8:	4a2e      	ldr	r2, [pc, #184]	; (8000c84 <HAL_GPIO_Init+0x2e0>)
 8000bca:	693b      	ldr	r3, [r7, #16]
 8000bcc:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000bce:	4b2d      	ldr	r3, [pc, #180]	; (8000c84 <HAL_GPIO_Init+0x2e0>)
 8000bd0:	685b      	ldr	r3, [r3, #4]
 8000bd2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	43db      	mvns	r3, r3
 8000bd8:	693a      	ldr	r2, [r7, #16]
 8000bda:	4013      	ands	r3, r2
 8000bdc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000bde:	683b      	ldr	r3, [r7, #0]
 8000be0:	685b      	ldr	r3, [r3, #4]
 8000be2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d003      	beq.n	8000bf2 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8000bea:	693a      	ldr	r2, [r7, #16]
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	4313      	orrs	r3, r2
 8000bf0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000bf2:	4a24      	ldr	r2, [pc, #144]	; (8000c84 <HAL_GPIO_Init+0x2e0>)
 8000bf4:	693b      	ldr	r3, [r7, #16]
 8000bf6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000bf8:	4b22      	ldr	r3, [pc, #136]	; (8000c84 <HAL_GPIO_Init+0x2e0>)
 8000bfa:	689b      	ldr	r3, [r3, #8]
 8000bfc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	43db      	mvns	r3, r3
 8000c02:	693a      	ldr	r2, [r7, #16]
 8000c04:	4013      	ands	r3, r2
 8000c06:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000c08:	683b      	ldr	r3, [r7, #0]
 8000c0a:	685b      	ldr	r3, [r3, #4]
 8000c0c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d003      	beq.n	8000c1c <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8000c14:	693a      	ldr	r2, [r7, #16]
 8000c16:	68fb      	ldr	r3, [r7, #12]
 8000c18:	4313      	orrs	r3, r2
 8000c1a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000c1c:	4a19      	ldr	r2, [pc, #100]	; (8000c84 <HAL_GPIO_Init+0x2e0>)
 8000c1e:	693b      	ldr	r3, [r7, #16]
 8000c20:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000c22:	4b18      	ldr	r3, [pc, #96]	; (8000c84 <HAL_GPIO_Init+0x2e0>)
 8000c24:	68db      	ldr	r3, [r3, #12]
 8000c26:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	43db      	mvns	r3, r3
 8000c2c:	693a      	ldr	r2, [r7, #16]
 8000c2e:	4013      	ands	r3, r2
 8000c30:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000c32:	683b      	ldr	r3, [r7, #0]
 8000c34:	685b      	ldr	r3, [r3, #4]
 8000c36:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d003      	beq.n	8000c46 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8000c3e:	693a      	ldr	r2, [r7, #16]
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	4313      	orrs	r3, r2
 8000c44:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000c46:	4a0f      	ldr	r2, [pc, #60]	; (8000c84 <HAL_GPIO_Init+0x2e0>)
 8000c48:	693b      	ldr	r3, [r7, #16]
 8000c4a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000c4c:	697b      	ldr	r3, [r7, #20]
 8000c4e:	3301      	adds	r3, #1
 8000c50:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	681a      	ldr	r2, [r3, #0]
 8000c56:	697b      	ldr	r3, [r7, #20]
 8000c58:	fa22 f303 	lsr.w	r3, r2, r3
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	f47f aea9 	bne.w	80009b4 <HAL_GPIO_Init+0x10>
  }
}
 8000c62:	bf00      	nop
 8000c64:	371c      	adds	r7, #28
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr
 8000c6e:	bf00      	nop
 8000c70:	40021000 	.word	0x40021000
 8000c74:	40010000 	.word	0x40010000
 8000c78:	48000400 	.word	0x48000400
 8000c7c:	48000800 	.word	0x48000800
 8000c80:	48000c00 	.word	0x48000c00
 8000c84:	40010400 	.word	0x40010400

08000c88 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8000c8e:	af00      	add	r7, sp, #0
 8000c90:	1d3b      	adds	r3, r7, #4
 8000c92:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000c94:	1d3b      	adds	r3, r7, #4
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d102      	bne.n	8000ca2 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	f000 bef4 	b.w	8001a8a <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ca2:	1d3b      	adds	r3, r7, #4
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	f003 0301 	and.w	r3, r3, #1
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	f000 816a 	beq.w	8000f86 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000cb2:	4bb3      	ldr	r3, [pc, #716]	; (8000f80 <HAL_RCC_OscConfig+0x2f8>)
 8000cb4:	685b      	ldr	r3, [r3, #4]
 8000cb6:	f003 030c 	and.w	r3, r3, #12
 8000cba:	2b04      	cmp	r3, #4
 8000cbc:	d00c      	beq.n	8000cd8 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000cbe:	4bb0      	ldr	r3, [pc, #704]	; (8000f80 <HAL_RCC_OscConfig+0x2f8>)
 8000cc0:	685b      	ldr	r3, [r3, #4]
 8000cc2:	f003 030c 	and.w	r3, r3, #12
 8000cc6:	2b08      	cmp	r3, #8
 8000cc8:	d159      	bne.n	8000d7e <HAL_RCC_OscConfig+0xf6>
 8000cca:	4bad      	ldr	r3, [pc, #692]	; (8000f80 <HAL_RCC_OscConfig+0x2f8>)
 8000ccc:	685b      	ldr	r3, [r3, #4]
 8000cce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cd2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000cd6:	d152      	bne.n	8000d7e <HAL_RCC_OscConfig+0xf6>
 8000cd8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000cdc:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ce0:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8000ce4:	fa93 f3a3 	rbit	r3, r3
 8000ce8:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000cec:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cf0:	fab3 f383 	clz	r3, r3
 8000cf4:	b2db      	uxtb	r3, r3
 8000cf6:	095b      	lsrs	r3, r3, #5
 8000cf8:	b2db      	uxtb	r3, r3
 8000cfa:	f043 0301 	orr.w	r3, r3, #1
 8000cfe:	b2db      	uxtb	r3, r3
 8000d00:	2b01      	cmp	r3, #1
 8000d02:	d102      	bne.n	8000d0a <HAL_RCC_OscConfig+0x82>
 8000d04:	4b9e      	ldr	r3, [pc, #632]	; (8000f80 <HAL_RCC_OscConfig+0x2f8>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	e015      	b.n	8000d36 <HAL_RCC_OscConfig+0xae>
 8000d0a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d0e:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d12:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8000d16:	fa93 f3a3 	rbit	r3, r3
 8000d1a:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000d1e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d22:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000d26:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8000d2a:	fa93 f3a3 	rbit	r3, r3
 8000d2e:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8000d32:	4b93      	ldr	r3, [pc, #588]	; (8000f80 <HAL_RCC_OscConfig+0x2f8>)
 8000d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d36:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000d3a:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8000d3e:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000d42:	fa92 f2a2 	rbit	r2, r2
 8000d46:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8000d4a:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8000d4e:	fab2 f282 	clz	r2, r2
 8000d52:	b2d2      	uxtb	r2, r2
 8000d54:	f042 0220 	orr.w	r2, r2, #32
 8000d58:	b2d2      	uxtb	r2, r2
 8000d5a:	f002 021f 	and.w	r2, r2, #31
 8000d5e:	2101      	movs	r1, #1
 8000d60:	fa01 f202 	lsl.w	r2, r1, r2
 8000d64:	4013      	ands	r3, r2
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	f000 810c 	beq.w	8000f84 <HAL_RCC_OscConfig+0x2fc>
 8000d6c:	1d3b      	adds	r3, r7, #4
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	685b      	ldr	r3, [r3, #4]
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	f040 8106 	bne.w	8000f84 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8000d78:	2301      	movs	r3, #1
 8000d7a:	f000 be86 	b.w	8001a8a <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d7e:	1d3b      	adds	r3, r7, #4
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	685b      	ldr	r3, [r3, #4]
 8000d84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d88:	d106      	bne.n	8000d98 <HAL_RCC_OscConfig+0x110>
 8000d8a:	4b7d      	ldr	r3, [pc, #500]	; (8000f80 <HAL_RCC_OscConfig+0x2f8>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	4a7c      	ldr	r2, [pc, #496]	; (8000f80 <HAL_RCC_OscConfig+0x2f8>)
 8000d90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d94:	6013      	str	r3, [r2, #0]
 8000d96:	e030      	b.n	8000dfa <HAL_RCC_OscConfig+0x172>
 8000d98:	1d3b      	adds	r3, r7, #4
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	685b      	ldr	r3, [r3, #4]
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d10c      	bne.n	8000dbc <HAL_RCC_OscConfig+0x134>
 8000da2:	4b77      	ldr	r3, [pc, #476]	; (8000f80 <HAL_RCC_OscConfig+0x2f8>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	4a76      	ldr	r2, [pc, #472]	; (8000f80 <HAL_RCC_OscConfig+0x2f8>)
 8000da8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000dac:	6013      	str	r3, [r2, #0]
 8000dae:	4b74      	ldr	r3, [pc, #464]	; (8000f80 <HAL_RCC_OscConfig+0x2f8>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	4a73      	ldr	r2, [pc, #460]	; (8000f80 <HAL_RCC_OscConfig+0x2f8>)
 8000db4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000db8:	6013      	str	r3, [r2, #0]
 8000dba:	e01e      	b.n	8000dfa <HAL_RCC_OscConfig+0x172>
 8000dbc:	1d3b      	adds	r3, r7, #4
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	685b      	ldr	r3, [r3, #4]
 8000dc2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000dc6:	d10c      	bne.n	8000de2 <HAL_RCC_OscConfig+0x15a>
 8000dc8:	4b6d      	ldr	r3, [pc, #436]	; (8000f80 <HAL_RCC_OscConfig+0x2f8>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4a6c      	ldr	r2, [pc, #432]	; (8000f80 <HAL_RCC_OscConfig+0x2f8>)
 8000dce:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000dd2:	6013      	str	r3, [r2, #0]
 8000dd4:	4b6a      	ldr	r3, [pc, #424]	; (8000f80 <HAL_RCC_OscConfig+0x2f8>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a69      	ldr	r2, [pc, #420]	; (8000f80 <HAL_RCC_OscConfig+0x2f8>)
 8000dda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000dde:	6013      	str	r3, [r2, #0]
 8000de0:	e00b      	b.n	8000dfa <HAL_RCC_OscConfig+0x172>
 8000de2:	4b67      	ldr	r3, [pc, #412]	; (8000f80 <HAL_RCC_OscConfig+0x2f8>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	4a66      	ldr	r2, [pc, #408]	; (8000f80 <HAL_RCC_OscConfig+0x2f8>)
 8000de8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000dec:	6013      	str	r3, [r2, #0]
 8000dee:	4b64      	ldr	r3, [pc, #400]	; (8000f80 <HAL_RCC_OscConfig+0x2f8>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	4a63      	ldr	r2, [pc, #396]	; (8000f80 <HAL_RCC_OscConfig+0x2f8>)
 8000df4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000df8:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000dfa:	4b61      	ldr	r3, [pc, #388]	; (8000f80 <HAL_RCC_OscConfig+0x2f8>)
 8000dfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dfe:	f023 020f 	bic.w	r2, r3, #15
 8000e02:	1d3b      	adds	r3, r7, #4
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	689b      	ldr	r3, [r3, #8]
 8000e08:	495d      	ldr	r1, [pc, #372]	; (8000f80 <HAL_RCC_OscConfig+0x2f8>)
 8000e0a:	4313      	orrs	r3, r2
 8000e0c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e0e:	1d3b      	adds	r3, r7, #4
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	685b      	ldr	r3, [r3, #4]
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d059      	beq.n	8000ecc <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e18:	f7ff fcd2 	bl	80007c0 <HAL_GetTick>
 8000e1c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e20:	e00a      	b.n	8000e38 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e22:	f7ff fccd 	bl	80007c0 <HAL_GetTick>
 8000e26:	4602      	mov	r2, r0
 8000e28:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000e2c:	1ad3      	subs	r3, r2, r3
 8000e2e:	2b64      	cmp	r3, #100	; 0x64
 8000e30:	d902      	bls.n	8000e38 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8000e32:	2303      	movs	r3, #3
 8000e34:	f000 be29 	b.w	8001a8a <HAL_RCC_OscConfig+0xe02>
 8000e38:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e3c:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e40:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8000e44:	fa93 f3a3 	rbit	r3, r3
 8000e48:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8000e4c:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e50:	fab3 f383 	clz	r3, r3
 8000e54:	b2db      	uxtb	r3, r3
 8000e56:	095b      	lsrs	r3, r3, #5
 8000e58:	b2db      	uxtb	r3, r3
 8000e5a:	f043 0301 	orr.w	r3, r3, #1
 8000e5e:	b2db      	uxtb	r3, r3
 8000e60:	2b01      	cmp	r3, #1
 8000e62:	d102      	bne.n	8000e6a <HAL_RCC_OscConfig+0x1e2>
 8000e64:	4b46      	ldr	r3, [pc, #280]	; (8000f80 <HAL_RCC_OscConfig+0x2f8>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	e015      	b.n	8000e96 <HAL_RCC_OscConfig+0x20e>
 8000e6a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e6e:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e72:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8000e76:	fa93 f3a3 	rbit	r3, r3
 8000e7a:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8000e7e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e82:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8000e86:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8000e8a:	fa93 f3a3 	rbit	r3, r3
 8000e8e:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8000e92:	4b3b      	ldr	r3, [pc, #236]	; (8000f80 <HAL_RCC_OscConfig+0x2f8>)
 8000e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e96:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000e9a:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8000e9e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8000ea2:	fa92 f2a2 	rbit	r2, r2
 8000ea6:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8000eaa:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8000eae:	fab2 f282 	clz	r2, r2
 8000eb2:	b2d2      	uxtb	r2, r2
 8000eb4:	f042 0220 	orr.w	r2, r2, #32
 8000eb8:	b2d2      	uxtb	r2, r2
 8000eba:	f002 021f 	and.w	r2, r2, #31
 8000ebe:	2101      	movs	r1, #1
 8000ec0:	fa01 f202 	lsl.w	r2, r1, r2
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d0ab      	beq.n	8000e22 <HAL_RCC_OscConfig+0x19a>
 8000eca:	e05c      	b.n	8000f86 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ecc:	f7ff fc78 	bl	80007c0 <HAL_GetTick>
 8000ed0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ed4:	e00a      	b.n	8000eec <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ed6:	f7ff fc73 	bl	80007c0 <HAL_GetTick>
 8000eda:	4602      	mov	r2, r0
 8000edc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000ee0:	1ad3      	subs	r3, r2, r3
 8000ee2:	2b64      	cmp	r3, #100	; 0x64
 8000ee4:	d902      	bls.n	8000eec <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8000ee6:	2303      	movs	r3, #3
 8000ee8:	f000 bdcf 	b.w	8001a8a <HAL_RCC_OscConfig+0xe02>
 8000eec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ef0:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ef4:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8000ef8:	fa93 f3a3 	rbit	r3, r3
 8000efc:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8000f00:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f04:	fab3 f383 	clz	r3, r3
 8000f08:	b2db      	uxtb	r3, r3
 8000f0a:	095b      	lsrs	r3, r3, #5
 8000f0c:	b2db      	uxtb	r3, r3
 8000f0e:	f043 0301 	orr.w	r3, r3, #1
 8000f12:	b2db      	uxtb	r3, r3
 8000f14:	2b01      	cmp	r3, #1
 8000f16:	d102      	bne.n	8000f1e <HAL_RCC_OscConfig+0x296>
 8000f18:	4b19      	ldr	r3, [pc, #100]	; (8000f80 <HAL_RCC_OscConfig+0x2f8>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	e015      	b.n	8000f4a <HAL_RCC_OscConfig+0x2c2>
 8000f1e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f22:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f26:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8000f2a:	fa93 f3a3 	rbit	r3, r3
 8000f2e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8000f32:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f36:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8000f3a:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8000f3e:	fa93 f3a3 	rbit	r3, r3
 8000f42:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8000f46:	4b0e      	ldr	r3, [pc, #56]	; (8000f80 <HAL_RCC_OscConfig+0x2f8>)
 8000f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f4a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000f4e:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8000f52:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8000f56:	fa92 f2a2 	rbit	r2, r2
 8000f5a:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8000f5e:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8000f62:	fab2 f282 	clz	r2, r2
 8000f66:	b2d2      	uxtb	r2, r2
 8000f68:	f042 0220 	orr.w	r2, r2, #32
 8000f6c:	b2d2      	uxtb	r2, r2
 8000f6e:	f002 021f 	and.w	r2, r2, #31
 8000f72:	2101      	movs	r1, #1
 8000f74:	fa01 f202 	lsl.w	r2, r1, r2
 8000f78:	4013      	ands	r3, r2
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d1ab      	bne.n	8000ed6 <HAL_RCC_OscConfig+0x24e>
 8000f7e:	e002      	b.n	8000f86 <HAL_RCC_OscConfig+0x2fe>
 8000f80:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f86:	1d3b      	adds	r3, r7, #4
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	f003 0302 	and.w	r3, r3, #2
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	f000 816f 	beq.w	8001274 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000f96:	4bd0      	ldr	r3, [pc, #832]	; (80012d8 <HAL_RCC_OscConfig+0x650>)
 8000f98:	685b      	ldr	r3, [r3, #4]
 8000f9a:	f003 030c 	and.w	r3, r3, #12
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d00b      	beq.n	8000fba <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000fa2:	4bcd      	ldr	r3, [pc, #820]	; (80012d8 <HAL_RCC_OscConfig+0x650>)
 8000fa4:	685b      	ldr	r3, [r3, #4]
 8000fa6:	f003 030c 	and.w	r3, r3, #12
 8000faa:	2b08      	cmp	r3, #8
 8000fac:	d16c      	bne.n	8001088 <HAL_RCC_OscConfig+0x400>
 8000fae:	4bca      	ldr	r3, [pc, #808]	; (80012d8 <HAL_RCC_OscConfig+0x650>)
 8000fb0:	685b      	ldr	r3, [r3, #4]
 8000fb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d166      	bne.n	8001088 <HAL_RCC_OscConfig+0x400>
 8000fba:	2302      	movs	r3, #2
 8000fbc:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fc0:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8000fc4:	fa93 f3a3 	rbit	r3, r3
 8000fc8:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8000fcc:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fd0:	fab3 f383 	clz	r3, r3
 8000fd4:	b2db      	uxtb	r3, r3
 8000fd6:	095b      	lsrs	r3, r3, #5
 8000fd8:	b2db      	uxtb	r3, r3
 8000fda:	f043 0301 	orr.w	r3, r3, #1
 8000fde:	b2db      	uxtb	r3, r3
 8000fe0:	2b01      	cmp	r3, #1
 8000fe2:	d102      	bne.n	8000fea <HAL_RCC_OscConfig+0x362>
 8000fe4:	4bbc      	ldr	r3, [pc, #752]	; (80012d8 <HAL_RCC_OscConfig+0x650>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	e013      	b.n	8001012 <HAL_RCC_OscConfig+0x38a>
 8000fea:	2302      	movs	r3, #2
 8000fec:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ff0:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8000ff4:	fa93 f3a3 	rbit	r3, r3
 8000ff8:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8000ffc:	2302      	movs	r3, #2
 8000ffe:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001002:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001006:	fa93 f3a3 	rbit	r3, r3
 800100a:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800100e:	4bb2      	ldr	r3, [pc, #712]	; (80012d8 <HAL_RCC_OscConfig+0x650>)
 8001010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001012:	2202      	movs	r2, #2
 8001014:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001018:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800101c:	fa92 f2a2 	rbit	r2, r2
 8001020:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001024:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001028:	fab2 f282 	clz	r2, r2
 800102c:	b2d2      	uxtb	r2, r2
 800102e:	f042 0220 	orr.w	r2, r2, #32
 8001032:	b2d2      	uxtb	r2, r2
 8001034:	f002 021f 	and.w	r2, r2, #31
 8001038:	2101      	movs	r1, #1
 800103a:	fa01 f202 	lsl.w	r2, r1, r2
 800103e:	4013      	ands	r3, r2
 8001040:	2b00      	cmp	r3, #0
 8001042:	d007      	beq.n	8001054 <HAL_RCC_OscConfig+0x3cc>
 8001044:	1d3b      	adds	r3, r7, #4
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	691b      	ldr	r3, [r3, #16]
 800104a:	2b01      	cmp	r3, #1
 800104c:	d002      	beq.n	8001054 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 800104e:	2301      	movs	r3, #1
 8001050:	f000 bd1b 	b.w	8001a8a <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001054:	4ba0      	ldr	r3, [pc, #640]	; (80012d8 <HAL_RCC_OscConfig+0x650>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800105c:	1d3b      	adds	r3, r7, #4
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	695b      	ldr	r3, [r3, #20]
 8001062:	21f8      	movs	r1, #248	; 0xf8
 8001064:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001068:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800106c:	fa91 f1a1 	rbit	r1, r1
 8001070:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001074:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001078:	fab1 f181 	clz	r1, r1
 800107c:	b2c9      	uxtb	r1, r1
 800107e:	408b      	lsls	r3, r1
 8001080:	4995      	ldr	r1, [pc, #596]	; (80012d8 <HAL_RCC_OscConfig+0x650>)
 8001082:	4313      	orrs	r3, r2
 8001084:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001086:	e0f5      	b.n	8001274 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001088:	1d3b      	adds	r3, r7, #4
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	691b      	ldr	r3, [r3, #16]
 800108e:	2b00      	cmp	r3, #0
 8001090:	f000 8085 	beq.w	800119e <HAL_RCC_OscConfig+0x516>
 8001094:	2301      	movs	r3, #1
 8001096:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800109a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800109e:	fa93 f3a3 	rbit	r3, r3
 80010a2:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80010a6:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80010aa:	fab3 f383 	clz	r3, r3
 80010ae:	b2db      	uxtb	r3, r3
 80010b0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80010b4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80010b8:	009b      	lsls	r3, r3, #2
 80010ba:	461a      	mov	r2, r3
 80010bc:	2301      	movs	r3, #1
 80010be:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010c0:	f7ff fb7e 	bl	80007c0 <HAL_GetTick>
 80010c4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010c8:	e00a      	b.n	80010e0 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010ca:	f7ff fb79 	bl	80007c0 <HAL_GetTick>
 80010ce:	4602      	mov	r2, r0
 80010d0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80010d4:	1ad3      	subs	r3, r2, r3
 80010d6:	2b02      	cmp	r3, #2
 80010d8:	d902      	bls.n	80010e0 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 80010da:	2303      	movs	r3, #3
 80010dc:	f000 bcd5 	b.w	8001a8a <HAL_RCC_OscConfig+0xe02>
 80010e0:	2302      	movs	r3, #2
 80010e2:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010e6:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80010ea:	fa93 f3a3 	rbit	r3, r3
 80010ee:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80010f2:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010f6:	fab3 f383 	clz	r3, r3
 80010fa:	b2db      	uxtb	r3, r3
 80010fc:	095b      	lsrs	r3, r3, #5
 80010fe:	b2db      	uxtb	r3, r3
 8001100:	f043 0301 	orr.w	r3, r3, #1
 8001104:	b2db      	uxtb	r3, r3
 8001106:	2b01      	cmp	r3, #1
 8001108:	d102      	bne.n	8001110 <HAL_RCC_OscConfig+0x488>
 800110a:	4b73      	ldr	r3, [pc, #460]	; (80012d8 <HAL_RCC_OscConfig+0x650>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	e013      	b.n	8001138 <HAL_RCC_OscConfig+0x4b0>
 8001110:	2302      	movs	r3, #2
 8001112:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001116:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800111a:	fa93 f3a3 	rbit	r3, r3
 800111e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001122:	2302      	movs	r3, #2
 8001124:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001128:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800112c:	fa93 f3a3 	rbit	r3, r3
 8001130:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001134:	4b68      	ldr	r3, [pc, #416]	; (80012d8 <HAL_RCC_OscConfig+0x650>)
 8001136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001138:	2202      	movs	r2, #2
 800113a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800113e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001142:	fa92 f2a2 	rbit	r2, r2
 8001146:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800114a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800114e:	fab2 f282 	clz	r2, r2
 8001152:	b2d2      	uxtb	r2, r2
 8001154:	f042 0220 	orr.w	r2, r2, #32
 8001158:	b2d2      	uxtb	r2, r2
 800115a:	f002 021f 	and.w	r2, r2, #31
 800115e:	2101      	movs	r1, #1
 8001160:	fa01 f202 	lsl.w	r2, r1, r2
 8001164:	4013      	ands	r3, r2
 8001166:	2b00      	cmp	r3, #0
 8001168:	d0af      	beq.n	80010ca <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800116a:	4b5b      	ldr	r3, [pc, #364]	; (80012d8 <HAL_RCC_OscConfig+0x650>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001172:	1d3b      	adds	r3, r7, #4
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	695b      	ldr	r3, [r3, #20]
 8001178:	21f8      	movs	r1, #248	; 0xf8
 800117a:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800117e:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001182:	fa91 f1a1 	rbit	r1, r1
 8001186:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 800118a:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800118e:	fab1 f181 	clz	r1, r1
 8001192:	b2c9      	uxtb	r1, r1
 8001194:	408b      	lsls	r3, r1
 8001196:	4950      	ldr	r1, [pc, #320]	; (80012d8 <HAL_RCC_OscConfig+0x650>)
 8001198:	4313      	orrs	r3, r2
 800119a:	600b      	str	r3, [r1, #0]
 800119c:	e06a      	b.n	8001274 <HAL_RCC_OscConfig+0x5ec>
 800119e:	2301      	movs	r3, #1
 80011a0:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011a4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80011a8:	fa93 f3a3 	rbit	r3, r3
 80011ac:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80011b0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011b4:	fab3 f383 	clz	r3, r3
 80011b8:	b2db      	uxtb	r3, r3
 80011ba:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80011be:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80011c2:	009b      	lsls	r3, r3, #2
 80011c4:	461a      	mov	r2, r3
 80011c6:	2300      	movs	r3, #0
 80011c8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011ca:	f7ff faf9 	bl	80007c0 <HAL_GetTick>
 80011ce:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011d2:	e00a      	b.n	80011ea <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011d4:	f7ff faf4 	bl	80007c0 <HAL_GetTick>
 80011d8:	4602      	mov	r2, r0
 80011da:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80011de:	1ad3      	subs	r3, r2, r3
 80011e0:	2b02      	cmp	r3, #2
 80011e2:	d902      	bls.n	80011ea <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 80011e4:	2303      	movs	r3, #3
 80011e6:	f000 bc50 	b.w	8001a8a <HAL_RCC_OscConfig+0xe02>
 80011ea:	2302      	movs	r3, #2
 80011ec:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011f0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80011f4:	fa93 f3a3 	rbit	r3, r3
 80011f8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80011fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001200:	fab3 f383 	clz	r3, r3
 8001204:	b2db      	uxtb	r3, r3
 8001206:	095b      	lsrs	r3, r3, #5
 8001208:	b2db      	uxtb	r3, r3
 800120a:	f043 0301 	orr.w	r3, r3, #1
 800120e:	b2db      	uxtb	r3, r3
 8001210:	2b01      	cmp	r3, #1
 8001212:	d102      	bne.n	800121a <HAL_RCC_OscConfig+0x592>
 8001214:	4b30      	ldr	r3, [pc, #192]	; (80012d8 <HAL_RCC_OscConfig+0x650>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	e013      	b.n	8001242 <HAL_RCC_OscConfig+0x5ba>
 800121a:	2302      	movs	r3, #2
 800121c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001220:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001224:	fa93 f3a3 	rbit	r3, r3
 8001228:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800122c:	2302      	movs	r3, #2
 800122e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001232:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001236:	fa93 f3a3 	rbit	r3, r3
 800123a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800123e:	4b26      	ldr	r3, [pc, #152]	; (80012d8 <HAL_RCC_OscConfig+0x650>)
 8001240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001242:	2202      	movs	r2, #2
 8001244:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001248:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800124c:	fa92 f2a2 	rbit	r2, r2
 8001250:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001254:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001258:	fab2 f282 	clz	r2, r2
 800125c:	b2d2      	uxtb	r2, r2
 800125e:	f042 0220 	orr.w	r2, r2, #32
 8001262:	b2d2      	uxtb	r2, r2
 8001264:	f002 021f 	and.w	r2, r2, #31
 8001268:	2101      	movs	r1, #1
 800126a:	fa01 f202 	lsl.w	r2, r1, r2
 800126e:	4013      	ands	r3, r2
 8001270:	2b00      	cmp	r3, #0
 8001272:	d1af      	bne.n	80011d4 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001274:	1d3b      	adds	r3, r7, #4
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f003 0308 	and.w	r3, r3, #8
 800127e:	2b00      	cmp	r3, #0
 8001280:	f000 80da 	beq.w	8001438 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001284:	1d3b      	adds	r3, r7, #4
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	699b      	ldr	r3, [r3, #24]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d069      	beq.n	8001362 <HAL_RCC_OscConfig+0x6da>
 800128e:	2301      	movs	r3, #1
 8001290:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001294:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001298:	fa93 f3a3 	rbit	r3, r3
 800129c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80012a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012a4:	fab3 f383 	clz	r3, r3
 80012a8:	b2db      	uxtb	r3, r3
 80012aa:	461a      	mov	r2, r3
 80012ac:	4b0b      	ldr	r3, [pc, #44]	; (80012dc <HAL_RCC_OscConfig+0x654>)
 80012ae:	4413      	add	r3, r2
 80012b0:	009b      	lsls	r3, r3, #2
 80012b2:	461a      	mov	r2, r3
 80012b4:	2301      	movs	r3, #1
 80012b6:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012b8:	f7ff fa82 	bl	80007c0 <HAL_GetTick>
 80012bc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012c0:	e00e      	b.n	80012e0 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012c2:	f7ff fa7d 	bl	80007c0 <HAL_GetTick>
 80012c6:	4602      	mov	r2, r0
 80012c8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80012cc:	1ad3      	subs	r3, r2, r3
 80012ce:	2b02      	cmp	r3, #2
 80012d0:	d906      	bls.n	80012e0 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 80012d2:	2303      	movs	r3, #3
 80012d4:	e3d9      	b.n	8001a8a <HAL_RCC_OscConfig+0xe02>
 80012d6:	bf00      	nop
 80012d8:	40021000 	.word	0x40021000
 80012dc:	10908120 	.word	0x10908120
 80012e0:	2302      	movs	r3, #2
 80012e2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012e6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80012ea:	fa93 f3a3 	rbit	r3, r3
 80012ee:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80012f2:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80012f6:	2202      	movs	r2, #2
 80012f8:	601a      	str	r2, [r3, #0]
 80012fa:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	fa93 f2a3 	rbit	r2, r3
 8001304:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001308:	601a      	str	r2, [r3, #0]
 800130a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800130e:	2202      	movs	r2, #2
 8001310:	601a      	str	r2, [r3, #0]
 8001312:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	fa93 f2a3 	rbit	r2, r3
 800131c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001320:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001322:	4ba5      	ldr	r3, [pc, #660]	; (80015b8 <HAL_RCC_OscConfig+0x930>)
 8001324:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001326:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800132a:	2102      	movs	r1, #2
 800132c:	6019      	str	r1, [r3, #0]
 800132e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	fa93 f1a3 	rbit	r1, r3
 8001338:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800133c:	6019      	str	r1, [r3, #0]
  return result;
 800133e:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	fab3 f383 	clz	r3, r3
 8001348:	b2db      	uxtb	r3, r3
 800134a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800134e:	b2db      	uxtb	r3, r3
 8001350:	f003 031f 	and.w	r3, r3, #31
 8001354:	2101      	movs	r1, #1
 8001356:	fa01 f303 	lsl.w	r3, r1, r3
 800135a:	4013      	ands	r3, r2
 800135c:	2b00      	cmp	r3, #0
 800135e:	d0b0      	beq.n	80012c2 <HAL_RCC_OscConfig+0x63a>
 8001360:	e06a      	b.n	8001438 <HAL_RCC_OscConfig+0x7b0>
 8001362:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001366:	2201      	movs	r2, #1
 8001368:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800136a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	fa93 f2a3 	rbit	r2, r3
 8001374:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001378:	601a      	str	r2, [r3, #0]
  return result;
 800137a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800137e:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001380:	fab3 f383 	clz	r3, r3
 8001384:	b2db      	uxtb	r3, r3
 8001386:	461a      	mov	r2, r3
 8001388:	4b8c      	ldr	r3, [pc, #560]	; (80015bc <HAL_RCC_OscConfig+0x934>)
 800138a:	4413      	add	r3, r2
 800138c:	009b      	lsls	r3, r3, #2
 800138e:	461a      	mov	r2, r3
 8001390:	2300      	movs	r3, #0
 8001392:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001394:	f7ff fa14 	bl	80007c0 <HAL_GetTick>
 8001398:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800139c:	e009      	b.n	80013b2 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800139e:	f7ff fa0f 	bl	80007c0 <HAL_GetTick>
 80013a2:	4602      	mov	r2, r0
 80013a4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80013a8:	1ad3      	subs	r3, r2, r3
 80013aa:	2b02      	cmp	r3, #2
 80013ac:	d901      	bls.n	80013b2 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 80013ae:	2303      	movs	r3, #3
 80013b0:	e36b      	b.n	8001a8a <HAL_RCC_OscConfig+0xe02>
 80013b2:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80013b6:	2202      	movs	r2, #2
 80013b8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013ba:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	fa93 f2a3 	rbit	r2, r3
 80013c4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80013c8:	601a      	str	r2, [r3, #0]
 80013ca:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80013ce:	2202      	movs	r2, #2
 80013d0:	601a      	str	r2, [r3, #0]
 80013d2:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	fa93 f2a3 	rbit	r2, r3
 80013dc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80013e0:	601a      	str	r2, [r3, #0]
 80013e2:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80013e6:	2202      	movs	r2, #2
 80013e8:	601a      	str	r2, [r3, #0]
 80013ea:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	fa93 f2a3 	rbit	r2, r3
 80013f4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80013f8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013fa:	4b6f      	ldr	r3, [pc, #444]	; (80015b8 <HAL_RCC_OscConfig+0x930>)
 80013fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80013fe:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001402:	2102      	movs	r1, #2
 8001404:	6019      	str	r1, [r3, #0]
 8001406:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	fa93 f1a3 	rbit	r1, r3
 8001410:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001414:	6019      	str	r1, [r3, #0]
  return result;
 8001416:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	fab3 f383 	clz	r3, r3
 8001420:	b2db      	uxtb	r3, r3
 8001422:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001426:	b2db      	uxtb	r3, r3
 8001428:	f003 031f 	and.w	r3, r3, #31
 800142c:	2101      	movs	r1, #1
 800142e:	fa01 f303 	lsl.w	r3, r1, r3
 8001432:	4013      	ands	r3, r2
 8001434:	2b00      	cmp	r3, #0
 8001436:	d1b2      	bne.n	800139e <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001438:	1d3b      	adds	r3, r7, #4
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f003 0304 	and.w	r3, r3, #4
 8001442:	2b00      	cmp	r3, #0
 8001444:	f000 8158 	beq.w	80016f8 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001448:	2300      	movs	r3, #0
 800144a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800144e:	4b5a      	ldr	r3, [pc, #360]	; (80015b8 <HAL_RCC_OscConfig+0x930>)
 8001450:	69db      	ldr	r3, [r3, #28]
 8001452:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001456:	2b00      	cmp	r3, #0
 8001458:	d112      	bne.n	8001480 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800145a:	4b57      	ldr	r3, [pc, #348]	; (80015b8 <HAL_RCC_OscConfig+0x930>)
 800145c:	69db      	ldr	r3, [r3, #28]
 800145e:	4a56      	ldr	r2, [pc, #344]	; (80015b8 <HAL_RCC_OscConfig+0x930>)
 8001460:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001464:	61d3      	str	r3, [r2, #28]
 8001466:	4b54      	ldr	r3, [pc, #336]	; (80015b8 <HAL_RCC_OscConfig+0x930>)
 8001468:	69db      	ldr	r3, [r3, #28]
 800146a:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800146e:	f107 0308 	add.w	r3, r7, #8
 8001472:	601a      	str	r2, [r3, #0]
 8001474:	f107 0308 	add.w	r3, r7, #8
 8001478:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800147a:	2301      	movs	r3, #1
 800147c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001480:	4b4f      	ldr	r3, [pc, #316]	; (80015c0 <HAL_RCC_OscConfig+0x938>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001488:	2b00      	cmp	r3, #0
 800148a:	d11a      	bne.n	80014c2 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800148c:	4b4c      	ldr	r3, [pc, #304]	; (80015c0 <HAL_RCC_OscConfig+0x938>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a4b      	ldr	r2, [pc, #300]	; (80015c0 <HAL_RCC_OscConfig+0x938>)
 8001492:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001496:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001498:	f7ff f992 	bl	80007c0 <HAL_GetTick>
 800149c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014a0:	e009      	b.n	80014b6 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014a2:	f7ff f98d 	bl	80007c0 <HAL_GetTick>
 80014a6:	4602      	mov	r2, r0
 80014a8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80014ac:	1ad3      	subs	r3, r2, r3
 80014ae:	2b64      	cmp	r3, #100	; 0x64
 80014b0:	d901      	bls.n	80014b6 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 80014b2:	2303      	movs	r3, #3
 80014b4:	e2e9      	b.n	8001a8a <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014b6:	4b42      	ldr	r3, [pc, #264]	; (80015c0 <HAL_RCC_OscConfig+0x938>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d0ef      	beq.n	80014a2 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014c2:	1d3b      	adds	r3, r7, #4
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	68db      	ldr	r3, [r3, #12]
 80014c8:	2b01      	cmp	r3, #1
 80014ca:	d106      	bne.n	80014da <HAL_RCC_OscConfig+0x852>
 80014cc:	4b3a      	ldr	r3, [pc, #232]	; (80015b8 <HAL_RCC_OscConfig+0x930>)
 80014ce:	6a1b      	ldr	r3, [r3, #32]
 80014d0:	4a39      	ldr	r2, [pc, #228]	; (80015b8 <HAL_RCC_OscConfig+0x930>)
 80014d2:	f043 0301 	orr.w	r3, r3, #1
 80014d6:	6213      	str	r3, [r2, #32]
 80014d8:	e02f      	b.n	800153a <HAL_RCC_OscConfig+0x8b2>
 80014da:	1d3b      	adds	r3, r7, #4
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	68db      	ldr	r3, [r3, #12]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d10c      	bne.n	80014fe <HAL_RCC_OscConfig+0x876>
 80014e4:	4b34      	ldr	r3, [pc, #208]	; (80015b8 <HAL_RCC_OscConfig+0x930>)
 80014e6:	6a1b      	ldr	r3, [r3, #32]
 80014e8:	4a33      	ldr	r2, [pc, #204]	; (80015b8 <HAL_RCC_OscConfig+0x930>)
 80014ea:	f023 0301 	bic.w	r3, r3, #1
 80014ee:	6213      	str	r3, [r2, #32]
 80014f0:	4b31      	ldr	r3, [pc, #196]	; (80015b8 <HAL_RCC_OscConfig+0x930>)
 80014f2:	6a1b      	ldr	r3, [r3, #32]
 80014f4:	4a30      	ldr	r2, [pc, #192]	; (80015b8 <HAL_RCC_OscConfig+0x930>)
 80014f6:	f023 0304 	bic.w	r3, r3, #4
 80014fa:	6213      	str	r3, [r2, #32]
 80014fc:	e01d      	b.n	800153a <HAL_RCC_OscConfig+0x8b2>
 80014fe:	1d3b      	adds	r3, r7, #4
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	68db      	ldr	r3, [r3, #12]
 8001504:	2b05      	cmp	r3, #5
 8001506:	d10c      	bne.n	8001522 <HAL_RCC_OscConfig+0x89a>
 8001508:	4b2b      	ldr	r3, [pc, #172]	; (80015b8 <HAL_RCC_OscConfig+0x930>)
 800150a:	6a1b      	ldr	r3, [r3, #32]
 800150c:	4a2a      	ldr	r2, [pc, #168]	; (80015b8 <HAL_RCC_OscConfig+0x930>)
 800150e:	f043 0304 	orr.w	r3, r3, #4
 8001512:	6213      	str	r3, [r2, #32]
 8001514:	4b28      	ldr	r3, [pc, #160]	; (80015b8 <HAL_RCC_OscConfig+0x930>)
 8001516:	6a1b      	ldr	r3, [r3, #32]
 8001518:	4a27      	ldr	r2, [pc, #156]	; (80015b8 <HAL_RCC_OscConfig+0x930>)
 800151a:	f043 0301 	orr.w	r3, r3, #1
 800151e:	6213      	str	r3, [r2, #32]
 8001520:	e00b      	b.n	800153a <HAL_RCC_OscConfig+0x8b2>
 8001522:	4b25      	ldr	r3, [pc, #148]	; (80015b8 <HAL_RCC_OscConfig+0x930>)
 8001524:	6a1b      	ldr	r3, [r3, #32]
 8001526:	4a24      	ldr	r2, [pc, #144]	; (80015b8 <HAL_RCC_OscConfig+0x930>)
 8001528:	f023 0301 	bic.w	r3, r3, #1
 800152c:	6213      	str	r3, [r2, #32]
 800152e:	4b22      	ldr	r3, [pc, #136]	; (80015b8 <HAL_RCC_OscConfig+0x930>)
 8001530:	6a1b      	ldr	r3, [r3, #32]
 8001532:	4a21      	ldr	r2, [pc, #132]	; (80015b8 <HAL_RCC_OscConfig+0x930>)
 8001534:	f023 0304 	bic.w	r3, r3, #4
 8001538:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800153a:	1d3b      	adds	r3, r7, #4
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	68db      	ldr	r3, [r3, #12]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d06b      	beq.n	800161c <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001544:	f7ff f93c 	bl	80007c0 <HAL_GetTick>
 8001548:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800154c:	e00b      	b.n	8001566 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800154e:	f7ff f937 	bl	80007c0 <HAL_GetTick>
 8001552:	4602      	mov	r2, r0
 8001554:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001558:	1ad3      	subs	r3, r2, r3
 800155a:	f241 3288 	movw	r2, #5000	; 0x1388
 800155e:	4293      	cmp	r3, r2
 8001560:	d901      	bls.n	8001566 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8001562:	2303      	movs	r3, #3
 8001564:	e291      	b.n	8001a8a <HAL_RCC_OscConfig+0xe02>
 8001566:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800156a:	2202      	movs	r2, #2
 800156c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800156e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	fa93 f2a3 	rbit	r2, r3
 8001578:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800157c:	601a      	str	r2, [r3, #0]
 800157e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001582:	2202      	movs	r2, #2
 8001584:	601a      	str	r2, [r3, #0]
 8001586:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	fa93 f2a3 	rbit	r2, r3
 8001590:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001594:	601a      	str	r2, [r3, #0]
  return result;
 8001596:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800159a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800159c:	fab3 f383 	clz	r3, r3
 80015a0:	b2db      	uxtb	r3, r3
 80015a2:	095b      	lsrs	r3, r3, #5
 80015a4:	b2db      	uxtb	r3, r3
 80015a6:	f043 0302 	orr.w	r3, r3, #2
 80015aa:	b2db      	uxtb	r3, r3
 80015ac:	2b02      	cmp	r3, #2
 80015ae:	d109      	bne.n	80015c4 <HAL_RCC_OscConfig+0x93c>
 80015b0:	4b01      	ldr	r3, [pc, #4]	; (80015b8 <HAL_RCC_OscConfig+0x930>)
 80015b2:	6a1b      	ldr	r3, [r3, #32]
 80015b4:	e014      	b.n	80015e0 <HAL_RCC_OscConfig+0x958>
 80015b6:	bf00      	nop
 80015b8:	40021000 	.word	0x40021000
 80015bc:	10908120 	.word	0x10908120
 80015c0:	40007000 	.word	0x40007000
 80015c4:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80015c8:	2202      	movs	r2, #2
 80015ca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015cc:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	fa93 f2a3 	rbit	r2, r3
 80015d6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80015da:	601a      	str	r2, [r3, #0]
 80015dc:	4bbb      	ldr	r3, [pc, #748]	; (80018cc <HAL_RCC_OscConfig+0xc44>)
 80015de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015e0:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80015e4:	2102      	movs	r1, #2
 80015e6:	6011      	str	r1, [r2, #0]
 80015e8:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80015ec:	6812      	ldr	r2, [r2, #0]
 80015ee:	fa92 f1a2 	rbit	r1, r2
 80015f2:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80015f6:	6011      	str	r1, [r2, #0]
  return result;
 80015f8:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80015fc:	6812      	ldr	r2, [r2, #0]
 80015fe:	fab2 f282 	clz	r2, r2
 8001602:	b2d2      	uxtb	r2, r2
 8001604:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001608:	b2d2      	uxtb	r2, r2
 800160a:	f002 021f 	and.w	r2, r2, #31
 800160e:	2101      	movs	r1, #1
 8001610:	fa01 f202 	lsl.w	r2, r1, r2
 8001614:	4013      	ands	r3, r2
 8001616:	2b00      	cmp	r3, #0
 8001618:	d099      	beq.n	800154e <HAL_RCC_OscConfig+0x8c6>
 800161a:	e063      	b.n	80016e4 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800161c:	f7ff f8d0 	bl	80007c0 <HAL_GetTick>
 8001620:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001624:	e00b      	b.n	800163e <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001626:	f7ff f8cb 	bl	80007c0 <HAL_GetTick>
 800162a:	4602      	mov	r2, r0
 800162c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001630:	1ad3      	subs	r3, r2, r3
 8001632:	f241 3288 	movw	r2, #5000	; 0x1388
 8001636:	4293      	cmp	r3, r2
 8001638:	d901      	bls.n	800163e <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 800163a:	2303      	movs	r3, #3
 800163c:	e225      	b.n	8001a8a <HAL_RCC_OscConfig+0xe02>
 800163e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001642:	2202      	movs	r2, #2
 8001644:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001646:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	fa93 f2a3 	rbit	r2, r3
 8001650:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001654:	601a      	str	r2, [r3, #0]
 8001656:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800165a:	2202      	movs	r2, #2
 800165c:	601a      	str	r2, [r3, #0]
 800165e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	fa93 f2a3 	rbit	r2, r3
 8001668:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800166c:	601a      	str	r2, [r3, #0]
  return result;
 800166e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001672:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001674:	fab3 f383 	clz	r3, r3
 8001678:	b2db      	uxtb	r3, r3
 800167a:	095b      	lsrs	r3, r3, #5
 800167c:	b2db      	uxtb	r3, r3
 800167e:	f043 0302 	orr.w	r3, r3, #2
 8001682:	b2db      	uxtb	r3, r3
 8001684:	2b02      	cmp	r3, #2
 8001686:	d102      	bne.n	800168e <HAL_RCC_OscConfig+0xa06>
 8001688:	4b90      	ldr	r3, [pc, #576]	; (80018cc <HAL_RCC_OscConfig+0xc44>)
 800168a:	6a1b      	ldr	r3, [r3, #32]
 800168c:	e00d      	b.n	80016aa <HAL_RCC_OscConfig+0xa22>
 800168e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001692:	2202      	movs	r2, #2
 8001694:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001696:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	fa93 f2a3 	rbit	r2, r3
 80016a0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80016a4:	601a      	str	r2, [r3, #0]
 80016a6:	4b89      	ldr	r3, [pc, #548]	; (80018cc <HAL_RCC_OscConfig+0xc44>)
 80016a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016aa:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80016ae:	2102      	movs	r1, #2
 80016b0:	6011      	str	r1, [r2, #0]
 80016b2:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80016b6:	6812      	ldr	r2, [r2, #0]
 80016b8:	fa92 f1a2 	rbit	r1, r2
 80016bc:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80016c0:	6011      	str	r1, [r2, #0]
  return result;
 80016c2:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80016c6:	6812      	ldr	r2, [r2, #0]
 80016c8:	fab2 f282 	clz	r2, r2
 80016cc:	b2d2      	uxtb	r2, r2
 80016ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80016d2:	b2d2      	uxtb	r2, r2
 80016d4:	f002 021f 	and.w	r2, r2, #31
 80016d8:	2101      	movs	r1, #1
 80016da:	fa01 f202 	lsl.w	r2, r1, r2
 80016de:	4013      	ands	r3, r2
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d1a0      	bne.n	8001626 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80016e4:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80016e8:	2b01      	cmp	r3, #1
 80016ea:	d105      	bne.n	80016f8 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016ec:	4b77      	ldr	r3, [pc, #476]	; (80018cc <HAL_RCC_OscConfig+0xc44>)
 80016ee:	69db      	ldr	r3, [r3, #28]
 80016f0:	4a76      	ldr	r2, [pc, #472]	; (80018cc <HAL_RCC_OscConfig+0xc44>)
 80016f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016f6:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016f8:	1d3b      	adds	r3, r7, #4
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	69db      	ldr	r3, [r3, #28]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	f000 81c2 	beq.w	8001a88 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001704:	4b71      	ldr	r3, [pc, #452]	; (80018cc <HAL_RCC_OscConfig+0xc44>)
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	f003 030c 	and.w	r3, r3, #12
 800170c:	2b08      	cmp	r3, #8
 800170e:	f000 819c 	beq.w	8001a4a <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001712:	1d3b      	adds	r3, r7, #4
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	69db      	ldr	r3, [r3, #28]
 8001718:	2b02      	cmp	r3, #2
 800171a:	f040 8114 	bne.w	8001946 <HAL_RCC_OscConfig+0xcbe>
 800171e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001722:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001726:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001728:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	fa93 f2a3 	rbit	r2, r3
 8001732:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001736:	601a      	str	r2, [r3, #0]
  return result;
 8001738:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800173c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800173e:	fab3 f383 	clz	r3, r3
 8001742:	b2db      	uxtb	r3, r3
 8001744:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001748:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800174c:	009b      	lsls	r3, r3, #2
 800174e:	461a      	mov	r2, r3
 8001750:	2300      	movs	r3, #0
 8001752:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001754:	f7ff f834 	bl	80007c0 <HAL_GetTick>
 8001758:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800175c:	e009      	b.n	8001772 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800175e:	f7ff f82f 	bl	80007c0 <HAL_GetTick>
 8001762:	4602      	mov	r2, r0
 8001764:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001768:	1ad3      	subs	r3, r2, r3
 800176a:	2b02      	cmp	r3, #2
 800176c:	d901      	bls.n	8001772 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 800176e:	2303      	movs	r3, #3
 8001770:	e18b      	b.n	8001a8a <HAL_RCC_OscConfig+0xe02>
 8001772:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001776:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800177a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800177c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	fa93 f2a3 	rbit	r2, r3
 8001786:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800178a:	601a      	str	r2, [r3, #0]
  return result;
 800178c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001790:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001792:	fab3 f383 	clz	r3, r3
 8001796:	b2db      	uxtb	r3, r3
 8001798:	095b      	lsrs	r3, r3, #5
 800179a:	b2db      	uxtb	r3, r3
 800179c:	f043 0301 	orr.w	r3, r3, #1
 80017a0:	b2db      	uxtb	r3, r3
 80017a2:	2b01      	cmp	r3, #1
 80017a4:	d102      	bne.n	80017ac <HAL_RCC_OscConfig+0xb24>
 80017a6:	4b49      	ldr	r3, [pc, #292]	; (80018cc <HAL_RCC_OscConfig+0xc44>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	e01b      	b.n	80017e4 <HAL_RCC_OscConfig+0xb5c>
 80017ac:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80017b0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80017b4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017b6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	fa93 f2a3 	rbit	r2, r3
 80017c0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80017c4:	601a      	str	r2, [r3, #0]
 80017c6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80017ca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80017ce:	601a      	str	r2, [r3, #0]
 80017d0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	fa93 f2a3 	rbit	r2, r3
 80017da:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80017de:	601a      	str	r2, [r3, #0]
 80017e0:	4b3a      	ldr	r3, [pc, #232]	; (80018cc <HAL_RCC_OscConfig+0xc44>)
 80017e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017e4:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80017e8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80017ec:	6011      	str	r1, [r2, #0]
 80017ee:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80017f2:	6812      	ldr	r2, [r2, #0]
 80017f4:	fa92 f1a2 	rbit	r1, r2
 80017f8:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80017fc:	6011      	str	r1, [r2, #0]
  return result;
 80017fe:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001802:	6812      	ldr	r2, [r2, #0]
 8001804:	fab2 f282 	clz	r2, r2
 8001808:	b2d2      	uxtb	r2, r2
 800180a:	f042 0220 	orr.w	r2, r2, #32
 800180e:	b2d2      	uxtb	r2, r2
 8001810:	f002 021f 	and.w	r2, r2, #31
 8001814:	2101      	movs	r1, #1
 8001816:	fa01 f202 	lsl.w	r2, r1, r2
 800181a:	4013      	ands	r3, r2
 800181c:	2b00      	cmp	r3, #0
 800181e:	d19e      	bne.n	800175e <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001820:	4b2a      	ldr	r3, [pc, #168]	; (80018cc <HAL_RCC_OscConfig+0xc44>)
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001828:	1d3b      	adds	r3, r7, #4
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800182e:	1d3b      	adds	r3, r7, #4
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	6a1b      	ldr	r3, [r3, #32]
 8001834:	430b      	orrs	r3, r1
 8001836:	4925      	ldr	r1, [pc, #148]	; (80018cc <HAL_RCC_OscConfig+0xc44>)
 8001838:	4313      	orrs	r3, r2
 800183a:	604b      	str	r3, [r1, #4]
 800183c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001840:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001844:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001846:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	fa93 f2a3 	rbit	r2, r3
 8001850:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001854:	601a      	str	r2, [r3, #0]
  return result;
 8001856:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800185a:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800185c:	fab3 f383 	clz	r3, r3
 8001860:	b2db      	uxtb	r3, r3
 8001862:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001866:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800186a:	009b      	lsls	r3, r3, #2
 800186c:	461a      	mov	r2, r3
 800186e:	2301      	movs	r3, #1
 8001870:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001872:	f7fe ffa5 	bl	80007c0 <HAL_GetTick>
 8001876:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800187a:	e009      	b.n	8001890 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800187c:	f7fe ffa0 	bl	80007c0 <HAL_GetTick>
 8001880:	4602      	mov	r2, r0
 8001882:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001886:	1ad3      	subs	r3, r2, r3
 8001888:	2b02      	cmp	r3, #2
 800188a:	d901      	bls.n	8001890 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 800188c:	2303      	movs	r3, #3
 800188e:	e0fc      	b.n	8001a8a <HAL_RCC_OscConfig+0xe02>
 8001890:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001894:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001898:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800189a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	fa93 f2a3 	rbit	r2, r3
 80018a4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80018a8:	601a      	str	r2, [r3, #0]
  return result;
 80018aa:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80018ae:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018b0:	fab3 f383 	clz	r3, r3
 80018b4:	b2db      	uxtb	r3, r3
 80018b6:	095b      	lsrs	r3, r3, #5
 80018b8:	b2db      	uxtb	r3, r3
 80018ba:	f043 0301 	orr.w	r3, r3, #1
 80018be:	b2db      	uxtb	r3, r3
 80018c0:	2b01      	cmp	r3, #1
 80018c2:	d105      	bne.n	80018d0 <HAL_RCC_OscConfig+0xc48>
 80018c4:	4b01      	ldr	r3, [pc, #4]	; (80018cc <HAL_RCC_OscConfig+0xc44>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	e01e      	b.n	8001908 <HAL_RCC_OscConfig+0xc80>
 80018ca:	bf00      	nop
 80018cc:	40021000 	.word	0x40021000
 80018d0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80018d4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80018d8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018da:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	fa93 f2a3 	rbit	r2, r3
 80018e4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80018e8:	601a      	str	r2, [r3, #0]
 80018ea:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80018ee:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80018f2:	601a      	str	r2, [r3, #0]
 80018f4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	fa93 f2a3 	rbit	r2, r3
 80018fe:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001902:	601a      	str	r2, [r3, #0]
 8001904:	4b63      	ldr	r3, [pc, #396]	; (8001a94 <HAL_RCC_OscConfig+0xe0c>)
 8001906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001908:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800190c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001910:	6011      	str	r1, [r2, #0]
 8001912:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001916:	6812      	ldr	r2, [r2, #0]
 8001918:	fa92 f1a2 	rbit	r1, r2
 800191c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001920:	6011      	str	r1, [r2, #0]
  return result;
 8001922:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001926:	6812      	ldr	r2, [r2, #0]
 8001928:	fab2 f282 	clz	r2, r2
 800192c:	b2d2      	uxtb	r2, r2
 800192e:	f042 0220 	orr.w	r2, r2, #32
 8001932:	b2d2      	uxtb	r2, r2
 8001934:	f002 021f 	and.w	r2, r2, #31
 8001938:	2101      	movs	r1, #1
 800193a:	fa01 f202 	lsl.w	r2, r1, r2
 800193e:	4013      	ands	r3, r2
 8001940:	2b00      	cmp	r3, #0
 8001942:	d09b      	beq.n	800187c <HAL_RCC_OscConfig+0xbf4>
 8001944:	e0a0      	b.n	8001a88 <HAL_RCC_OscConfig+0xe00>
 8001946:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800194a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800194e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001950:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	fa93 f2a3 	rbit	r2, r3
 800195a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800195e:	601a      	str	r2, [r3, #0]
  return result;
 8001960:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001964:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001966:	fab3 f383 	clz	r3, r3
 800196a:	b2db      	uxtb	r3, r3
 800196c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001970:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001974:	009b      	lsls	r3, r3, #2
 8001976:	461a      	mov	r2, r3
 8001978:	2300      	movs	r3, #0
 800197a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800197c:	f7fe ff20 	bl	80007c0 <HAL_GetTick>
 8001980:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001984:	e009      	b.n	800199a <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001986:	f7fe ff1b 	bl	80007c0 <HAL_GetTick>
 800198a:	4602      	mov	r2, r0
 800198c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001990:	1ad3      	subs	r3, r2, r3
 8001992:	2b02      	cmp	r3, #2
 8001994:	d901      	bls.n	800199a <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8001996:	2303      	movs	r3, #3
 8001998:	e077      	b.n	8001a8a <HAL_RCC_OscConfig+0xe02>
 800199a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800199e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80019a2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019a4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	fa93 f2a3 	rbit	r2, r3
 80019ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019b2:	601a      	str	r2, [r3, #0]
  return result;
 80019b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019b8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019ba:	fab3 f383 	clz	r3, r3
 80019be:	b2db      	uxtb	r3, r3
 80019c0:	095b      	lsrs	r3, r3, #5
 80019c2:	b2db      	uxtb	r3, r3
 80019c4:	f043 0301 	orr.w	r3, r3, #1
 80019c8:	b2db      	uxtb	r3, r3
 80019ca:	2b01      	cmp	r3, #1
 80019cc:	d102      	bne.n	80019d4 <HAL_RCC_OscConfig+0xd4c>
 80019ce:	4b31      	ldr	r3, [pc, #196]	; (8001a94 <HAL_RCC_OscConfig+0xe0c>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	e01b      	b.n	8001a0c <HAL_RCC_OscConfig+0xd84>
 80019d4:	f107 0320 	add.w	r3, r7, #32
 80019d8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80019dc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019de:	f107 0320 	add.w	r3, r7, #32
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	fa93 f2a3 	rbit	r2, r3
 80019e8:	f107 031c 	add.w	r3, r7, #28
 80019ec:	601a      	str	r2, [r3, #0]
 80019ee:	f107 0318 	add.w	r3, r7, #24
 80019f2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80019f6:	601a      	str	r2, [r3, #0]
 80019f8:	f107 0318 	add.w	r3, r7, #24
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	fa93 f2a3 	rbit	r2, r3
 8001a02:	f107 0314 	add.w	r3, r7, #20
 8001a06:	601a      	str	r2, [r3, #0]
 8001a08:	4b22      	ldr	r3, [pc, #136]	; (8001a94 <HAL_RCC_OscConfig+0xe0c>)
 8001a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a0c:	f107 0210 	add.w	r2, r7, #16
 8001a10:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001a14:	6011      	str	r1, [r2, #0]
 8001a16:	f107 0210 	add.w	r2, r7, #16
 8001a1a:	6812      	ldr	r2, [r2, #0]
 8001a1c:	fa92 f1a2 	rbit	r1, r2
 8001a20:	f107 020c 	add.w	r2, r7, #12
 8001a24:	6011      	str	r1, [r2, #0]
  return result;
 8001a26:	f107 020c 	add.w	r2, r7, #12
 8001a2a:	6812      	ldr	r2, [r2, #0]
 8001a2c:	fab2 f282 	clz	r2, r2
 8001a30:	b2d2      	uxtb	r2, r2
 8001a32:	f042 0220 	orr.w	r2, r2, #32
 8001a36:	b2d2      	uxtb	r2, r2
 8001a38:	f002 021f 	and.w	r2, r2, #31
 8001a3c:	2101      	movs	r1, #1
 8001a3e:	fa01 f202 	lsl.w	r2, r1, r2
 8001a42:	4013      	ands	r3, r2
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d19e      	bne.n	8001986 <HAL_RCC_OscConfig+0xcfe>
 8001a48:	e01e      	b.n	8001a88 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a4a:	1d3b      	adds	r3, r7, #4
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	69db      	ldr	r3, [r3, #28]
 8001a50:	2b01      	cmp	r3, #1
 8001a52:	d101      	bne.n	8001a58 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8001a54:	2301      	movs	r3, #1
 8001a56:	e018      	b.n	8001a8a <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001a58:	4b0e      	ldr	r3, [pc, #56]	; (8001a94 <HAL_RCC_OscConfig+0xe0c>)
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001a60:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001a64:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001a68:	1d3b      	adds	r3, r7, #4
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	6a1b      	ldr	r3, [r3, #32]
 8001a6e:	429a      	cmp	r2, r3
 8001a70:	d108      	bne.n	8001a84 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001a72:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001a76:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001a7a:	1d3b      	adds	r3, r7, #4
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001a80:	429a      	cmp	r2, r3
 8001a82:	d001      	beq.n	8001a88 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8001a84:	2301      	movs	r3, #1
 8001a86:	e000      	b.n	8001a8a <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8001a88:	2300      	movs	r3, #0
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	40021000 	.word	0x40021000

08001a98 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b09e      	sub	sp, #120	; 0x78
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
 8001aa0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d101      	bne.n	8001ab0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001aac:	2301      	movs	r3, #1
 8001aae:	e162      	b.n	8001d76 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ab0:	4b90      	ldr	r3, [pc, #576]	; (8001cf4 <HAL_RCC_ClockConfig+0x25c>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f003 0307 	and.w	r3, r3, #7
 8001ab8:	683a      	ldr	r2, [r7, #0]
 8001aba:	429a      	cmp	r2, r3
 8001abc:	d910      	bls.n	8001ae0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001abe:	4b8d      	ldr	r3, [pc, #564]	; (8001cf4 <HAL_RCC_ClockConfig+0x25c>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f023 0207 	bic.w	r2, r3, #7
 8001ac6:	498b      	ldr	r1, [pc, #556]	; (8001cf4 <HAL_RCC_ClockConfig+0x25c>)
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	4313      	orrs	r3, r2
 8001acc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ace:	4b89      	ldr	r3, [pc, #548]	; (8001cf4 <HAL_RCC_ClockConfig+0x25c>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f003 0307 	and.w	r3, r3, #7
 8001ad6:	683a      	ldr	r2, [r7, #0]
 8001ad8:	429a      	cmp	r2, r3
 8001ada:	d001      	beq.n	8001ae0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001adc:	2301      	movs	r3, #1
 8001ade:	e14a      	b.n	8001d76 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f003 0302 	and.w	r3, r3, #2
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d008      	beq.n	8001afe <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001aec:	4b82      	ldr	r3, [pc, #520]	; (8001cf8 <HAL_RCC_ClockConfig+0x260>)
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	689b      	ldr	r3, [r3, #8]
 8001af8:	497f      	ldr	r1, [pc, #508]	; (8001cf8 <HAL_RCC_ClockConfig+0x260>)
 8001afa:	4313      	orrs	r3, r2
 8001afc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f003 0301 	and.w	r3, r3, #1
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	f000 80dc 	beq.w	8001cc4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	2b01      	cmp	r3, #1
 8001b12:	d13c      	bne.n	8001b8e <HAL_RCC_ClockConfig+0xf6>
 8001b14:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b18:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b1a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001b1c:	fa93 f3a3 	rbit	r3, r3
 8001b20:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001b22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b24:	fab3 f383 	clz	r3, r3
 8001b28:	b2db      	uxtb	r3, r3
 8001b2a:	095b      	lsrs	r3, r3, #5
 8001b2c:	b2db      	uxtb	r3, r3
 8001b2e:	f043 0301 	orr.w	r3, r3, #1
 8001b32:	b2db      	uxtb	r3, r3
 8001b34:	2b01      	cmp	r3, #1
 8001b36:	d102      	bne.n	8001b3e <HAL_RCC_ClockConfig+0xa6>
 8001b38:	4b6f      	ldr	r3, [pc, #444]	; (8001cf8 <HAL_RCC_ClockConfig+0x260>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	e00f      	b.n	8001b5e <HAL_RCC_ClockConfig+0xc6>
 8001b3e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b42:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b44:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001b46:	fa93 f3a3 	rbit	r3, r3
 8001b4a:	667b      	str	r3, [r7, #100]	; 0x64
 8001b4c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b50:	663b      	str	r3, [r7, #96]	; 0x60
 8001b52:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001b54:	fa93 f3a3 	rbit	r3, r3
 8001b58:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001b5a:	4b67      	ldr	r3, [pc, #412]	; (8001cf8 <HAL_RCC_ClockConfig+0x260>)
 8001b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b5e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001b62:	65ba      	str	r2, [r7, #88]	; 0x58
 8001b64:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001b66:	fa92 f2a2 	rbit	r2, r2
 8001b6a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001b6c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001b6e:	fab2 f282 	clz	r2, r2
 8001b72:	b2d2      	uxtb	r2, r2
 8001b74:	f042 0220 	orr.w	r2, r2, #32
 8001b78:	b2d2      	uxtb	r2, r2
 8001b7a:	f002 021f 	and.w	r2, r2, #31
 8001b7e:	2101      	movs	r1, #1
 8001b80:	fa01 f202 	lsl.w	r2, r1, r2
 8001b84:	4013      	ands	r3, r2
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d17b      	bne.n	8001c82 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e0f3      	b.n	8001d76 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	2b02      	cmp	r3, #2
 8001b94:	d13c      	bne.n	8001c10 <HAL_RCC_ClockConfig+0x178>
 8001b96:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b9a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001b9e:	fa93 f3a3 	rbit	r3, r3
 8001ba2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001ba4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ba6:	fab3 f383 	clz	r3, r3
 8001baa:	b2db      	uxtb	r3, r3
 8001bac:	095b      	lsrs	r3, r3, #5
 8001bae:	b2db      	uxtb	r3, r3
 8001bb0:	f043 0301 	orr.w	r3, r3, #1
 8001bb4:	b2db      	uxtb	r3, r3
 8001bb6:	2b01      	cmp	r3, #1
 8001bb8:	d102      	bne.n	8001bc0 <HAL_RCC_ClockConfig+0x128>
 8001bba:	4b4f      	ldr	r3, [pc, #316]	; (8001cf8 <HAL_RCC_ClockConfig+0x260>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	e00f      	b.n	8001be0 <HAL_RCC_ClockConfig+0x148>
 8001bc0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001bc4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bc6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001bc8:	fa93 f3a3 	rbit	r3, r3
 8001bcc:	647b      	str	r3, [r7, #68]	; 0x44
 8001bce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001bd2:	643b      	str	r3, [r7, #64]	; 0x40
 8001bd4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001bd6:	fa93 f3a3 	rbit	r3, r3
 8001bda:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001bdc:	4b46      	ldr	r3, [pc, #280]	; (8001cf8 <HAL_RCC_ClockConfig+0x260>)
 8001bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001be0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001be4:	63ba      	str	r2, [r7, #56]	; 0x38
 8001be6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001be8:	fa92 f2a2 	rbit	r2, r2
 8001bec:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001bee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001bf0:	fab2 f282 	clz	r2, r2
 8001bf4:	b2d2      	uxtb	r2, r2
 8001bf6:	f042 0220 	orr.w	r2, r2, #32
 8001bfa:	b2d2      	uxtb	r2, r2
 8001bfc:	f002 021f 	and.w	r2, r2, #31
 8001c00:	2101      	movs	r1, #1
 8001c02:	fa01 f202 	lsl.w	r2, r1, r2
 8001c06:	4013      	ands	r3, r2
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d13a      	bne.n	8001c82 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	e0b2      	b.n	8001d76 <HAL_RCC_ClockConfig+0x2de>
 8001c10:	2302      	movs	r3, #2
 8001c12:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c16:	fa93 f3a3 	rbit	r3, r3
 8001c1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001c1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c1e:	fab3 f383 	clz	r3, r3
 8001c22:	b2db      	uxtb	r3, r3
 8001c24:	095b      	lsrs	r3, r3, #5
 8001c26:	b2db      	uxtb	r3, r3
 8001c28:	f043 0301 	orr.w	r3, r3, #1
 8001c2c:	b2db      	uxtb	r3, r3
 8001c2e:	2b01      	cmp	r3, #1
 8001c30:	d102      	bne.n	8001c38 <HAL_RCC_ClockConfig+0x1a0>
 8001c32:	4b31      	ldr	r3, [pc, #196]	; (8001cf8 <HAL_RCC_ClockConfig+0x260>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	e00d      	b.n	8001c54 <HAL_RCC_ClockConfig+0x1bc>
 8001c38:	2302      	movs	r3, #2
 8001c3a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c3e:	fa93 f3a3 	rbit	r3, r3
 8001c42:	627b      	str	r3, [r7, #36]	; 0x24
 8001c44:	2302      	movs	r3, #2
 8001c46:	623b      	str	r3, [r7, #32]
 8001c48:	6a3b      	ldr	r3, [r7, #32]
 8001c4a:	fa93 f3a3 	rbit	r3, r3
 8001c4e:	61fb      	str	r3, [r7, #28]
 8001c50:	4b29      	ldr	r3, [pc, #164]	; (8001cf8 <HAL_RCC_ClockConfig+0x260>)
 8001c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c54:	2202      	movs	r2, #2
 8001c56:	61ba      	str	r2, [r7, #24]
 8001c58:	69ba      	ldr	r2, [r7, #24]
 8001c5a:	fa92 f2a2 	rbit	r2, r2
 8001c5e:	617a      	str	r2, [r7, #20]
  return result;
 8001c60:	697a      	ldr	r2, [r7, #20]
 8001c62:	fab2 f282 	clz	r2, r2
 8001c66:	b2d2      	uxtb	r2, r2
 8001c68:	f042 0220 	orr.w	r2, r2, #32
 8001c6c:	b2d2      	uxtb	r2, r2
 8001c6e:	f002 021f 	and.w	r2, r2, #31
 8001c72:	2101      	movs	r1, #1
 8001c74:	fa01 f202 	lsl.w	r2, r1, r2
 8001c78:	4013      	ands	r3, r2
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d101      	bne.n	8001c82 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e079      	b.n	8001d76 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c82:	4b1d      	ldr	r3, [pc, #116]	; (8001cf8 <HAL_RCC_ClockConfig+0x260>)
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	f023 0203 	bic.w	r2, r3, #3
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	491a      	ldr	r1, [pc, #104]	; (8001cf8 <HAL_RCC_ClockConfig+0x260>)
 8001c90:	4313      	orrs	r3, r2
 8001c92:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c94:	f7fe fd94 	bl	80007c0 <HAL_GetTick>
 8001c98:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c9a:	e00a      	b.n	8001cb2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c9c:	f7fe fd90 	bl	80007c0 <HAL_GetTick>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001ca4:	1ad3      	subs	r3, r2, r3
 8001ca6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d901      	bls.n	8001cb2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8001cae:	2303      	movs	r3, #3
 8001cb0:	e061      	b.n	8001d76 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cb2:	4b11      	ldr	r3, [pc, #68]	; (8001cf8 <HAL_RCC_ClockConfig+0x260>)
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	f003 020c 	and.w	r2, r3, #12
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	009b      	lsls	r3, r3, #2
 8001cc0:	429a      	cmp	r2, r3
 8001cc2:	d1eb      	bne.n	8001c9c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001cc4:	4b0b      	ldr	r3, [pc, #44]	; (8001cf4 <HAL_RCC_ClockConfig+0x25c>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f003 0307 	and.w	r3, r3, #7
 8001ccc:	683a      	ldr	r2, [r7, #0]
 8001cce:	429a      	cmp	r2, r3
 8001cd0:	d214      	bcs.n	8001cfc <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cd2:	4b08      	ldr	r3, [pc, #32]	; (8001cf4 <HAL_RCC_ClockConfig+0x25c>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f023 0207 	bic.w	r2, r3, #7
 8001cda:	4906      	ldr	r1, [pc, #24]	; (8001cf4 <HAL_RCC_ClockConfig+0x25c>)
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ce2:	4b04      	ldr	r3, [pc, #16]	; (8001cf4 <HAL_RCC_ClockConfig+0x25c>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f003 0307 	and.w	r3, r3, #7
 8001cea:	683a      	ldr	r2, [r7, #0]
 8001cec:	429a      	cmp	r2, r3
 8001cee:	d005      	beq.n	8001cfc <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	e040      	b.n	8001d76 <HAL_RCC_ClockConfig+0x2de>
 8001cf4:	40022000 	.word	0x40022000
 8001cf8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f003 0304 	and.w	r3, r3, #4
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d008      	beq.n	8001d1a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d08:	4b1d      	ldr	r3, [pc, #116]	; (8001d80 <HAL_RCC_ClockConfig+0x2e8>)
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	68db      	ldr	r3, [r3, #12]
 8001d14:	491a      	ldr	r1, [pc, #104]	; (8001d80 <HAL_RCC_ClockConfig+0x2e8>)
 8001d16:	4313      	orrs	r3, r2
 8001d18:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f003 0308 	and.w	r3, r3, #8
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d009      	beq.n	8001d3a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d26:	4b16      	ldr	r3, [pc, #88]	; (8001d80 <HAL_RCC_ClockConfig+0x2e8>)
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	691b      	ldr	r3, [r3, #16]
 8001d32:	00db      	lsls	r3, r3, #3
 8001d34:	4912      	ldr	r1, [pc, #72]	; (8001d80 <HAL_RCC_ClockConfig+0x2e8>)
 8001d36:	4313      	orrs	r3, r2
 8001d38:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001d3a:	f000 f829 	bl	8001d90 <HAL_RCC_GetSysClockFreq>
 8001d3e:	4601      	mov	r1, r0
 8001d40:	4b0f      	ldr	r3, [pc, #60]	; (8001d80 <HAL_RCC_ClockConfig+0x2e8>)
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d48:	22f0      	movs	r2, #240	; 0xf0
 8001d4a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d4c:	693a      	ldr	r2, [r7, #16]
 8001d4e:	fa92 f2a2 	rbit	r2, r2
 8001d52:	60fa      	str	r2, [r7, #12]
  return result;
 8001d54:	68fa      	ldr	r2, [r7, #12]
 8001d56:	fab2 f282 	clz	r2, r2
 8001d5a:	b2d2      	uxtb	r2, r2
 8001d5c:	40d3      	lsrs	r3, r2
 8001d5e:	4a09      	ldr	r2, [pc, #36]	; (8001d84 <HAL_RCC_ClockConfig+0x2ec>)
 8001d60:	5cd3      	ldrb	r3, [r2, r3]
 8001d62:	fa21 f303 	lsr.w	r3, r1, r3
 8001d66:	4a08      	ldr	r2, [pc, #32]	; (8001d88 <HAL_RCC_ClockConfig+0x2f0>)
 8001d68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8001d6a:	4b08      	ldr	r3, [pc, #32]	; (8001d8c <HAL_RCC_ClockConfig+0x2f4>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f7fe fce2 	bl	8000738 <HAL_InitTick>
  
  return HAL_OK;
 8001d74:	2300      	movs	r3, #0
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	3778      	adds	r7, #120	; 0x78
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	40021000 	.word	0x40021000
 8001d84:	0800330c 	.word	0x0800330c
 8001d88:	20000000 	.word	0x20000000
 8001d8c:	20000004 	.word	0x20000004

08001d90 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b08b      	sub	sp, #44	; 0x2c
 8001d94:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001d96:	2300      	movs	r3, #0
 8001d98:	61fb      	str	r3, [r7, #28]
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	61bb      	str	r3, [r7, #24]
 8001d9e:	2300      	movs	r3, #0
 8001da0:	627b      	str	r3, [r7, #36]	; 0x24
 8001da2:	2300      	movs	r3, #0
 8001da4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001da6:	2300      	movs	r3, #0
 8001da8:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8001daa:	4b29      	ldr	r3, [pc, #164]	; (8001e50 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001db0:	69fb      	ldr	r3, [r7, #28]
 8001db2:	f003 030c 	and.w	r3, r3, #12
 8001db6:	2b04      	cmp	r3, #4
 8001db8:	d002      	beq.n	8001dc0 <HAL_RCC_GetSysClockFreq+0x30>
 8001dba:	2b08      	cmp	r3, #8
 8001dbc:	d003      	beq.n	8001dc6 <HAL_RCC_GetSysClockFreq+0x36>
 8001dbe:	e03c      	b.n	8001e3a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001dc0:	4b24      	ldr	r3, [pc, #144]	; (8001e54 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001dc2:	623b      	str	r3, [r7, #32]
      break;
 8001dc4:	e03c      	b.n	8001e40 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001dc6:	69fb      	ldr	r3, [r7, #28]
 8001dc8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001dcc:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8001dd0:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dd2:	68ba      	ldr	r2, [r7, #8]
 8001dd4:	fa92 f2a2 	rbit	r2, r2
 8001dd8:	607a      	str	r2, [r7, #4]
  return result;
 8001dda:	687a      	ldr	r2, [r7, #4]
 8001ddc:	fab2 f282 	clz	r2, r2
 8001de0:	b2d2      	uxtb	r2, r2
 8001de2:	40d3      	lsrs	r3, r2
 8001de4:	4a1c      	ldr	r2, [pc, #112]	; (8001e58 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001de6:	5cd3      	ldrb	r3, [r2, r3]
 8001de8:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8001dea:	4b19      	ldr	r3, [pc, #100]	; (8001e50 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001dec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dee:	f003 030f 	and.w	r3, r3, #15
 8001df2:	220f      	movs	r2, #15
 8001df4:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001df6:	693a      	ldr	r2, [r7, #16]
 8001df8:	fa92 f2a2 	rbit	r2, r2
 8001dfc:	60fa      	str	r2, [r7, #12]
  return result;
 8001dfe:	68fa      	ldr	r2, [r7, #12]
 8001e00:	fab2 f282 	clz	r2, r2
 8001e04:	b2d2      	uxtb	r2, r2
 8001e06:	40d3      	lsrs	r3, r2
 8001e08:	4a14      	ldr	r2, [pc, #80]	; (8001e5c <HAL_RCC_GetSysClockFreq+0xcc>)
 8001e0a:	5cd3      	ldrb	r3, [r2, r3]
 8001e0c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8001e0e:	69fb      	ldr	r3, [r7, #28]
 8001e10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d008      	beq.n	8001e2a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001e18:	4a0e      	ldr	r2, [pc, #56]	; (8001e54 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001e1a:	69bb      	ldr	r3, [r7, #24]
 8001e1c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	fb02 f303 	mul.w	r3, r2, r3
 8001e26:	627b      	str	r3, [r7, #36]	; 0x24
 8001e28:	e004      	b.n	8001e34 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001e2a:	697b      	ldr	r3, [r7, #20]
 8001e2c:	4a0c      	ldr	r2, [pc, #48]	; (8001e60 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001e2e:	fb02 f303 	mul.w	r3, r2, r3
 8001e32:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8001e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e36:	623b      	str	r3, [r7, #32]
      break;
 8001e38:	e002      	b.n	8001e40 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001e3a:	4b06      	ldr	r3, [pc, #24]	; (8001e54 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001e3c:	623b      	str	r3, [r7, #32]
      break;
 8001e3e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e40:	6a3b      	ldr	r3, [r7, #32]
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	372c      	adds	r7, #44	; 0x2c
 8001e46:	46bd      	mov	sp, r7
 8001e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4c:	4770      	bx	lr
 8001e4e:	bf00      	nop
 8001e50:	40021000 	.word	0x40021000
 8001e54:	007a1200 	.word	0x007a1200
 8001e58:	08003324 	.word	0x08003324
 8001e5c:	08003334 	.word	0x08003334
 8001e60:	003d0900 	.word	0x003d0900

08001e64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e64:	b480      	push	{r7}
 8001e66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e68:	4b03      	ldr	r3, [pc, #12]	; (8001e78 <HAL_RCC_GetHCLKFreq+0x14>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr
 8001e76:	bf00      	nop
 8001e78:	20000000 	.word	0x20000000

08001e7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b082      	sub	sp, #8
 8001e80:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8001e82:	f7ff ffef 	bl	8001e64 <HAL_RCC_GetHCLKFreq>
 8001e86:	4601      	mov	r1, r0
 8001e88:	4b0b      	ldr	r3, [pc, #44]	; (8001eb8 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001e90:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001e94:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e96:	687a      	ldr	r2, [r7, #4]
 8001e98:	fa92 f2a2 	rbit	r2, r2
 8001e9c:	603a      	str	r2, [r7, #0]
  return result;
 8001e9e:	683a      	ldr	r2, [r7, #0]
 8001ea0:	fab2 f282 	clz	r2, r2
 8001ea4:	b2d2      	uxtb	r2, r2
 8001ea6:	40d3      	lsrs	r3, r2
 8001ea8:	4a04      	ldr	r2, [pc, #16]	; (8001ebc <HAL_RCC_GetPCLK1Freq+0x40>)
 8001eaa:	5cd3      	ldrb	r3, [r2, r3]
 8001eac:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	3708      	adds	r7, #8
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}
 8001eb8:	40021000 	.word	0x40021000
 8001ebc:	0800331c 	.word	0x0800331c

08001ec0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b082      	sub	sp, #8
 8001ec4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8001ec6:	f7ff ffcd 	bl	8001e64 <HAL_RCC_GetHCLKFreq>
 8001eca:	4601      	mov	r1, r0
 8001ecc:	4b0b      	ldr	r3, [pc, #44]	; (8001efc <HAL_RCC_GetPCLK2Freq+0x3c>)
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8001ed4:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001ed8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eda:	687a      	ldr	r2, [r7, #4]
 8001edc:	fa92 f2a2 	rbit	r2, r2
 8001ee0:	603a      	str	r2, [r7, #0]
  return result;
 8001ee2:	683a      	ldr	r2, [r7, #0]
 8001ee4:	fab2 f282 	clz	r2, r2
 8001ee8:	b2d2      	uxtb	r2, r2
 8001eea:	40d3      	lsrs	r3, r2
 8001eec:	4a04      	ldr	r2, [pc, #16]	; (8001f00 <HAL_RCC_GetPCLK2Freq+0x40>)
 8001eee:	5cd3      	ldrb	r3, [r2, r3]
 8001ef0:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	3708      	adds	r7, #8
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	40021000 	.word	0x40021000
 8001f00:	0800331c 	.word	0x0800331c

08001f04 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b092      	sub	sp, #72	; 0x48
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8001f10:	2300      	movs	r3, #0
 8001f12:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8001f14:	2300      	movs	r3, #0
 8001f16:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	f000 80cd 	beq.w	80020c2 <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f28:	4b86      	ldr	r3, [pc, #536]	; (8002144 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001f2a:	69db      	ldr	r3, [r3, #28]
 8001f2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d10e      	bne.n	8001f52 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f34:	4b83      	ldr	r3, [pc, #524]	; (8002144 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001f36:	69db      	ldr	r3, [r3, #28]
 8001f38:	4a82      	ldr	r2, [pc, #520]	; (8002144 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001f3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f3e:	61d3      	str	r3, [r2, #28]
 8001f40:	4b80      	ldr	r3, [pc, #512]	; (8002144 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001f42:	69db      	ldr	r3, [r3, #28]
 8001f44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f48:	60bb      	str	r3, [r7, #8]
 8001f4a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f52:	4b7d      	ldr	r3, [pc, #500]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d118      	bne.n	8001f90 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f5e:	4b7a      	ldr	r3, [pc, #488]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a79      	ldr	r2, [pc, #484]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8001f64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f68:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f6a:	f7fe fc29 	bl	80007c0 <HAL_GetTick>
 8001f6e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f70:	e008      	b.n	8001f84 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f72:	f7fe fc25 	bl	80007c0 <HAL_GetTick>
 8001f76:	4602      	mov	r2, r0
 8001f78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f7a:	1ad3      	subs	r3, r2, r3
 8001f7c:	2b64      	cmp	r3, #100	; 0x64
 8001f7e:	d901      	bls.n	8001f84 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8001f80:	2303      	movs	r3, #3
 8001f82:	e0db      	b.n	800213c <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f84:	4b70      	ldr	r3, [pc, #448]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d0f0      	beq.n	8001f72 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001f90:	4b6c      	ldr	r3, [pc, #432]	; (8002144 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001f92:	6a1b      	ldr	r3, [r3, #32]
 8001f94:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f98:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001f9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d07d      	beq.n	800209c <HAL_RCCEx_PeriphCLKConfig+0x198>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fa8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001faa:	429a      	cmp	r2, r3
 8001fac:	d076      	beq.n	800209c <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001fae:	4b65      	ldr	r3, [pc, #404]	; (8002144 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001fb0:	6a1b      	ldr	r3, [r3, #32]
 8001fb2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001fb6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001fb8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001fbc:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fc0:	fa93 f3a3 	rbit	r3, r3
 8001fc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001fc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001fc8:	fab3 f383 	clz	r3, r3
 8001fcc:	b2db      	uxtb	r3, r3
 8001fce:	461a      	mov	r2, r3
 8001fd0:	4b5e      	ldr	r3, [pc, #376]	; (800214c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001fd2:	4413      	add	r3, r2
 8001fd4:	009b      	lsls	r3, r3, #2
 8001fd6:	461a      	mov	r2, r3
 8001fd8:	2301      	movs	r3, #1
 8001fda:	6013      	str	r3, [r2, #0]
 8001fdc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001fe0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fe4:	fa93 f3a3 	rbit	r3, r3
 8001fe8:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001fea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001fec:	fab3 f383 	clz	r3, r3
 8001ff0:	b2db      	uxtb	r3, r3
 8001ff2:	461a      	mov	r2, r3
 8001ff4:	4b55      	ldr	r3, [pc, #340]	; (800214c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001ff6:	4413      	add	r3, r2
 8001ff8:	009b      	lsls	r3, r3, #2
 8001ffa:	461a      	mov	r2, r3
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002000:	4a50      	ldr	r2, [pc, #320]	; (8002144 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002002:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002004:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002006:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002008:	f003 0301 	and.w	r3, r3, #1
 800200c:	2b00      	cmp	r3, #0
 800200e:	d045      	beq.n	800209c <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002010:	f7fe fbd6 	bl	80007c0 <HAL_GetTick>
 8002014:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002016:	e00a      	b.n	800202e <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002018:	f7fe fbd2 	bl	80007c0 <HAL_GetTick>
 800201c:	4602      	mov	r2, r0
 800201e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002020:	1ad3      	subs	r3, r2, r3
 8002022:	f241 3288 	movw	r2, #5000	; 0x1388
 8002026:	4293      	cmp	r3, r2
 8002028:	d901      	bls.n	800202e <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800202a:	2303      	movs	r3, #3
 800202c:	e086      	b.n	800213c <HAL_RCCEx_PeriphCLKConfig+0x238>
 800202e:	2302      	movs	r3, #2
 8002030:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002034:	fa93 f3a3 	rbit	r3, r3
 8002038:	627b      	str	r3, [r7, #36]	; 0x24
 800203a:	2302      	movs	r3, #2
 800203c:	623b      	str	r3, [r7, #32]
 800203e:	6a3b      	ldr	r3, [r7, #32]
 8002040:	fa93 f3a3 	rbit	r3, r3
 8002044:	61fb      	str	r3, [r7, #28]
  return result;
 8002046:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002048:	fab3 f383 	clz	r3, r3
 800204c:	b2db      	uxtb	r3, r3
 800204e:	095b      	lsrs	r3, r3, #5
 8002050:	b2db      	uxtb	r3, r3
 8002052:	f043 0302 	orr.w	r3, r3, #2
 8002056:	b2db      	uxtb	r3, r3
 8002058:	2b02      	cmp	r3, #2
 800205a:	d102      	bne.n	8002062 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 800205c:	4b39      	ldr	r3, [pc, #228]	; (8002144 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800205e:	6a1b      	ldr	r3, [r3, #32]
 8002060:	e007      	b.n	8002072 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8002062:	2302      	movs	r3, #2
 8002064:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002066:	69bb      	ldr	r3, [r7, #24]
 8002068:	fa93 f3a3 	rbit	r3, r3
 800206c:	617b      	str	r3, [r7, #20]
 800206e:	4b35      	ldr	r3, [pc, #212]	; (8002144 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002072:	2202      	movs	r2, #2
 8002074:	613a      	str	r2, [r7, #16]
 8002076:	693a      	ldr	r2, [r7, #16]
 8002078:	fa92 f2a2 	rbit	r2, r2
 800207c:	60fa      	str	r2, [r7, #12]
  return result;
 800207e:	68fa      	ldr	r2, [r7, #12]
 8002080:	fab2 f282 	clz	r2, r2
 8002084:	b2d2      	uxtb	r2, r2
 8002086:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800208a:	b2d2      	uxtb	r2, r2
 800208c:	f002 021f 	and.w	r2, r2, #31
 8002090:	2101      	movs	r1, #1
 8002092:	fa01 f202 	lsl.w	r2, r1, r2
 8002096:	4013      	ands	r3, r2
 8002098:	2b00      	cmp	r3, #0
 800209a:	d0bd      	beq.n	8002018 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800209c:	4b29      	ldr	r3, [pc, #164]	; (8002144 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800209e:	6a1b      	ldr	r3, [r3, #32]
 80020a0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	4926      	ldr	r1, [pc, #152]	; (8002144 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80020aa:	4313      	orrs	r3, r2
 80020ac:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80020ae:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80020b2:	2b01      	cmp	r3, #1
 80020b4:	d105      	bne.n	80020c2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020b6:	4b23      	ldr	r3, [pc, #140]	; (8002144 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80020b8:	69db      	ldr	r3, [r3, #28]
 80020ba:	4a22      	ldr	r2, [pc, #136]	; (8002144 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80020bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020c0:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f003 0301 	and.w	r3, r3, #1
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d008      	beq.n	80020e0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80020ce:	4b1d      	ldr	r3, [pc, #116]	; (8002144 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80020d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d2:	f023 0203 	bic.w	r2, r3, #3
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	689b      	ldr	r3, [r3, #8]
 80020da:	491a      	ldr	r1, [pc, #104]	; (8002144 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80020dc:	4313      	orrs	r3, r2
 80020de:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f003 0320 	and.w	r3, r3, #32
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d008      	beq.n	80020fe <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80020ec:	4b15      	ldr	r3, [pc, #84]	; (8002144 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80020ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f0:	f023 0210 	bic.w	r2, r3, #16
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	68db      	ldr	r3, [r3, #12]
 80020f8:	4912      	ldr	r1, [pc, #72]	; (8002144 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80020fa:	4313      	orrs	r3, r2
 80020fc:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002106:	2b00      	cmp	r3, #0
 8002108:	d008      	beq.n	800211c <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800210a:	4b0e      	ldr	r3, [pc, #56]	; (8002144 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800210c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800210e:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	691b      	ldr	r3, [r3, #16]
 8002116:	490b      	ldr	r1, [pc, #44]	; (8002144 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002118:	4313      	orrs	r3, r2
 800211a:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002124:	2b00      	cmp	r3, #0
 8002126:	d008      	beq.n	800213a <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002128:	4b06      	ldr	r3, [pc, #24]	; (8002144 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800212a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800212c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	695b      	ldr	r3, [r3, #20]
 8002134:	4903      	ldr	r1, [pc, #12]	; (8002144 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002136:	4313      	orrs	r3, r2
 8002138:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800213a:	2300      	movs	r3, #0
}
 800213c:	4618      	mov	r0, r3
 800213e:	3748      	adds	r7, #72	; 0x48
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}
 8002144:	40021000 	.word	0x40021000
 8002148:	40007000 	.word	0x40007000
 800214c:	10908100 	.word	0x10908100

08002150 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b082      	sub	sp, #8
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d101      	bne.n	8002162 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800215e:	2301      	movs	r3, #1
 8002160:	e049      	b.n	80021f6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002168:	b2db      	uxtb	r3, r3
 800216a:	2b00      	cmp	r3, #0
 800216c:	d106      	bne.n	800217c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2200      	movs	r2, #0
 8002172:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002176:	6878      	ldr	r0, [r7, #4]
 8002178:	f7fe f9d2 	bl	8000520 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2202      	movs	r2, #2
 8002180:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681a      	ldr	r2, [r3, #0]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	3304      	adds	r3, #4
 800218c:	4619      	mov	r1, r3
 800218e:	4610      	mov	r0, r2
 8002190:	f000 f94a 	bl	8002428 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2201      	movs	r2, #1
 8002198:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2201      	movs	r2, #1
 80021a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2201      	movs	r2, #1
 80021a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2201      	movs	r2, #1
 80021b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2201      	movs	r2, #1
 80021b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2201      	movs	r2, #1
 80021c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2201      	movs	r2, #1
 80021c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2201      	movs	r2, #1
 80021d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2201      	movs	r2, #1
 80021d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2201      	movs	r2, #1
 80021e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2201      	movs	r2, #1
 80021e8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2201      	movs	r2, #1
 80021f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80021f4:	2300      	movs	r3, #0
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	3708      	adds	r7, #8
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}
	...

08002200 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b086      	sub	sp, #24
 8002204:	af00      	add	r7, sp, #0
 8002206:	60f8      	str	r0, [r7, #12]
 8002208:	60b9      	str	r1, [r7, #8]
 800220a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800220c:	2300      	movs	r3, #0
 800220e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002216:	2b01      	cmp	r3, #1
 8002218:	d101      	bne.n	800221e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800221a:	2302      	movs	r3, #2
 800221c:	e0ff      	b.n	800241e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	2201      	movs	r2, #1
 8002222:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2b14      	cmp	r3, #20
 800222a:	f200 80f0 	bhi.w	800240e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800222e:	a201      	add	r2, pc, #4	; (adr r2, 8002234 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002230:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002234:	08002289 	.word	0x08002289
 8002238:	0800240f 	.word	0x0800240f
 800223c:	0800240f 	.word	0x0800240f
 8002240:	0800240f 	.word	0x0800240f
 8002244:	080022c9 	.word	0x080022c9
 8002248:	0800240f 	.word	0x0800240f
 800224c:	0800240f 	.word	0x0800240f
 8002250:	0800240f 	.word	0x0800240f
 8002254:	0800230b 	.word	0x0800230b
 8002258:	0800240f 	.word	0x0800240f
 800225c:	0800240f 	.word	0x0800240f
 8002260:	0800240f 	.word	0x0800240f
 8002264:	0800234b 	.word	0x0800234b
 8002268:	0800240f 	.word	0x0800240f
 800226c:	0800240f 	.word	0x0800240f
 8002270:	0800240f 	.word	0x0800240f
 8002274:	0800238d 	.word	0x0800238d
 8002278:	0800240f 	.word	0x0800240f
 800227c:	0800240f 	.word	0x0800240f
 8002280:	0800240f 	.word	0x0800240f
 8002284:	080023cd 	.word	0x080023cd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	68b9      	ldr	r1, [r7, #8]
 800228e:	4618      	mov	r0, r3
 8002290:	f000 f942 	bl	8002518 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	699a      	ldr	r2, [r3, #24]
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f042 0208 	orr.w	r2, r2, #8
 80022a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	699a      	ldr	r2, [r3, #24]
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f022 0204 	bic.w	r2, r2, #4
 80022b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	6999      	ldr	r1, [r3, #24]
 80022ba:	68bb      	ldr	r3, [r7, #8]
 80022bc:	691a      	ldr	r2, [r3, #16]
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	430a      	orrs	r2, r1
 80022c4:	619a      	str	r2, [r3, #24]
      break;
 80022c6:	e0a5      	b.n	8002414 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	68b9      	ldr	r1, [r7, #8]
 80022ce:	4618      	mov	r0, r3
 80022d0:	f000 f9a8 	bl	8002624 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	699a      	ldr	r2, [r3, #24]
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80022e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	699a      	ldr	r2, [r3, #24]
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	6999      	ldr	r1, [r3, #24]
 80022fa:	68bb      	ldr	r3, [r7, #8]
 80022fc:	691b      	ldr	r3, [r3, #16]
 80022fe:	021a      	lsls	r2, r3, #8
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	430a      	orrs	r2, r1
 8002306:	619a      	str	r2, [r3, #24]
      break;
 8002308:	e084      	b.n	8002414 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	68b9      	ldr	r1, [r7, #8]
 8002310:	4618      	mov	r0, r3
 8002312:	f000 fa07 	bl	8002724 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	69da      	ldr	r2, [r3, #28]
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f042 0208 	orr.w	r2, r2, #8
 8002324:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	69da      	ldr	r2, [r3, #28]
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f022 0204 	bic.w	r2, r2, #4
 8002334:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	69d9      	ldr	r1, [r3, #28]
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	691a      	ldr	r2, [r3, #16]
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	430a      	orrs	r2, r1
 8002346:	61da      	str	r2, [r3, #28]
      break;
 8002348:	e064      	b.n	8002414 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	68b9      	ldr	r1, [r7, #8]
 8002350:	4618      	mov	r0, r3
 8002352:	f000 fa65 	bl	8002820 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	69da      	ldr	r2, [r3, #28]
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002364:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	69da      	ldr	r2, [r3, #28]
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002374:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	69d9      	ldr	r1, [r3, #28]
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	691b      	ldr	r3, [r3, #16]
 8002380:	021a      	lsls	r2, r3, #8
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	430a      	orrs	r2, r1
 8002388:	61da      	str	r2, [r3, #28]
      break;
 800238a:	e043      	b.n	8002414 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	68b9      	ldr	r1, [r7, #8]
 8002392:	4618      	mov	r0, r3
 8002394:	f000 faa8 	bl	80028e8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f042 0208 	orr.w	r2, r2, #8
 80023a6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f022 0204 	bic.w	r2, r2, #4
 80023b6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80023be:	68bb      	ldr	r3, [r7, #8]
 80023c0:	691a      	ldr	r2, [r3, #16]
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	430a      	orrs	r2, r1
 80023c8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80023ca:	e023      	b.n	8002414 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	68b9      	ldr	r1, [r7, #8]
 80023d2:	4618      	mov	r0, r3
 80023d4:	f000 fae6 	bl	80029a4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80023e6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023f6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80023fe:	68bb      	ldr	r3, [r7, #8]
 8002400:	691b      	ldr	r3, [r3, #16]
 8002402:	021a      	lsls	r2, r3, #8
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	430a      	orrs	r2, r1
 800240a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800240c:	e002      	b.n	8002414 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	75fb      	strb	r3, [r7, #23]
      break;
 8002412:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	2200      	movs	r2, #0
 8002418:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800241c:	7dfb      	ldrb	r3, [r7, #23]
}
 800241e:	4618      	mov	r0, r3
 8002420:	3718      	adds	r7, #24
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop

08002428 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002428:	b480      	push	{r7}
 800242a:	b085      	sub	sp, #20
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
 8002430:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	4a32      	ldr	r2, [pc, #200]	; (8002504 <TIM_Base_SetConfig+0xdc>)
 800243c:	4293      	cmp	r3, r2
 800243e:	d007      	beq.n	8002450 <TIM_Base_SetConfig+0x28>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002446:	d003      	beq.n	8002450 <TIM_Base_SetConfig+0x28>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	4a2f      	ldr	r2, [pc, #188]	; (8002508 <TIM_Base_SetConfig+0xe0>)
 800244c:	4293      	cmp	r3, r2
 800244e:	d108      	bne.n	8002462 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002456:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	68fa      	ldr	r2, [r7, #12]
 800245e:	4313      	orrs	r3, r2
 8002460:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	4a27      	ldr	r2, [pc, #156]	; (8002504 <TIM_Base_SetConfig+0xdc>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d013      	beq.n	8002492 <TIM_Base_SetConfig+0x6a>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002470:	d00f      	beq.n	8002492 <TIM_Base_SetConfig+0x6a>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	4a24      	ldr	r2, [pc, #144]	; (8002508 <TIM_Base_SetConfig+0xe0>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d00b      	beq.n	8002492 <TIM_Base_SetConfig+0x6a>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	4a23      	ldr	r2, [pc, #140]	; (800250c <TIM_Base_SetConfig+0xe4>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d007      	beq.n	8002492 <TIM_Base_SetConfig+0x6a>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	4a22      	ldr	r2, [pc, #136]	; (8002510 <TIM_Base_SetConfig+0xe8>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d003      	beq.n	8002492 <TIM_Base_SetConfig+0x6a>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	4a21      	ldr	r2, [pc, #132]	; (8002514 <TIM_Base_SetConfig+0xec>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d108      	bne.n	80024a4 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002498:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	68db      	ldr	r3, [r3, #12]
 800249e:	68fa      	ldr	r2, [r7, #12]
 80024a0:	4313      	orrs	r3, r2
 80024a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	695b      	ldr	r3, [r3, #20]
 80024ae:	4313      	orrs	r3, r2
 80024b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	68fa      	ldr	r2, [r7, #12]
 80024b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	689a      	ldr	r2, [r3, #8]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	681a      	ldr	r2, [r3, #0]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	4a0e      	ldr	r2, [pc, #56]	; (8002504 <TIM_Base_SetConfig+0xdc>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d00b      	beq.n	80024e8 <TIM_Base_SetConfig+0xc0>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	4a0e      	ldr	r2, [pc, #56]	; (800250c <TIM_Base_SetConfig+0xe4>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d007      	beq.n	80024e8 <TIM_Base_SetConfig+0xc0>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	4a0d      	ldr	r2, [pc, #52]	; (8002510 <TIM_Base_SetConfig+0xe8>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d003      	beq.n	80024e8 <TIM_Base_SetConfig+0xc0>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	4a0c      	ldr	r2, [pc, #48]	; (8002514 <TIM_Base_SetConfig+0xec>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d103      	bne.n	80024f0 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	691a      	ldr	r2, [r3, #16]
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2201      	movs	r2, #1
 80024f4:	615a      	str	r2, [r3, #20]
}
 80024f6:	bf00      	nop
 80024f8:	3714      	adds	r7, #20
 80024fa:	46bd      	mov	sp, r7
 80024fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002500:	4770      	bx	lr
 8002502:	bf00      	nop
 8002504:	40012c00 	.word	0x40012c00
 8002508:	40000400 	.word	0x40000400
 800250c:	40014000 	.word	0x40014000
 8002510:	40014400 	.word	0x40014400
 8002514:	40014800 	.word	0x40014800

08002518 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002518:	b480      	push	{r7}
 800251a:	b087      	sub	sp, #28
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
 8002520:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6a1b      	ldr	r3, [r3, #32]
 8002526:	f023 0201 	bic.w	r2, r3, #1
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6a1b      	ldr	r3, [r3, #32]
 8002532:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	699b      	ldr	r3, [r3, #24]
 800253e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002546:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800254a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	f023 0303 	bic.w	r3, r3, #3
 8002552:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	68fa      	ldr	r2, [r7, #12]
 800255a:	4313      	orrs	r3, r2
 800255c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	f023 0302 	bic.w	r3, r3, #2
 8002564:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	689b      	ldr	r3, [r3, #8]
 800256a:	697a      	ldr	r2, [r7, #20]
 800256c:	4313      	orrs	r3, r2
 800256e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	4a28      	ldr	r2, [pc, #160]	; (8002614 <TIM_OC1_SetConfig+0xfc>)
 8002574:	4293      	cmp	r3, r2
 8002576:	d00b      	beq.n	8002590 <TIM_OC1_SetConfig+0x78>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	4a27      	ldr	r2, [pc, #156]	; (8002618 <TIM_OC1_SetConfig+0x100>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d007      	beq.n	8002590 <TIM_OC1_SetConfig+0x78>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	4a26      	ldr	r2, [pc, #152]	; (800261c <TIM_OC1_SetConfig+0x104>)
 8002584:	4293      	cmp	r3, r2
 8002586:	d003      	beq.n	8002590 <TIM_OC1_SetConfig+0x78>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	4a25      	ldr	r2, [pc, #148]	; (8002620 <TIM_OC1_SetConfig+0x108>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d10c      	bne.n	80025aa <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	f023 0308 	bic.w	r3, r3, #8
 8002596:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	68db      	ldr	r3, [r3, #12]
 800259c:	697a      	ldr	r2, [r7, #20]
 800259e:	4313      	orrs	r3, r2
 80025a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	f023 0304 	bic.w	r3, r3, #4
 80025a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	4a19      	ldr	r2, [pc, #100]	; (8002614 <TIM_OC1_SetConfig+0xfc>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d00b      	beq.n	80025ca <TIM_OC1_SetConfig+0xb2>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	4a18      	ldr	r2, [pc, #96]	; (8002618 <TIM_OC1_SetConfig+0x100>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d007      	beq.n	80025ca <TIM_OC1_SetConfig+0xb2>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	4a17      	ldr	r2, [pc, #92]	; (800261c <TIM_OC1_SetConfig+0x104>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d003      	beq.n	80025ca <TIM_OC1_SetConfig+0xb2>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	4a16      	ldr	r2, [pc, #88]	; (8002620 <TIM_OC1_SetConfig+0x108>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d111      	bne.n	80025ee <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80025ca:	693b      	ldr	r3, [r7, #16]
 80025cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80025d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80025d2:	693b      	ldr	r3, [r7, #16]
 80025d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80025d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	695b      	ldr	r3, [r3, #20]
 80025de:	693a      	ldr	r2, [r7, #16]
 80025e0:	4313      	orrs	r3, r2
 80025e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	699b      	ldr	r3, [r3, #24]
 80025e8:	693a      	ldr	r2, [r7, #16]
 80025ea:	4313      	orrs	r3, r2
 80025ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	693a      	ldr	r2, [r7, #16]
 80025f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	68fa      	ldr	r2, [r7, #12]
 80025f8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	685a      	ldr	r2, [r3, #4]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	697a      	ldr	r2, [r7, #20]
 8002606:	621a      	str	r2, [r3, #32]
}
 8002608:	bf00      	nop
 800260a:	371c      	adds	r7, #28
 800260c:	46bd      	mov	sp, r7
 800260e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002612:	4770      	bx	lr
 8002614:	40012c00 	.word	0x40012c00
 8002618:	40014000 	.word	0x40014000
 800261c:	40014400 	.word	0x40014400
 8002620:	40014800 	.word	0x40014800

08002624 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002624:	b480      	push	{r7}
 8002626:	b087      	sub	sp, #28
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
 800262c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6a1b      	ldr	r3, [r3, #32]
 8002632:	f023 0210 	bic.w	r2, r3, #16
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6a1b      	ldr	r3, [r3, #32]
 800263e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	699b      	ldr	r3, [r3, #24]
 800264a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002652:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002656:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800265e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	021b      	lsls	r3, r3, #8
 8002666:	68fa      	ldr	r2, [r7, #12]
 8002668:	4313      	orrs	r3, r2
 800266a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	f023 0320 	bic.w	r3, r3, #32
 8002672:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	689b      	ldr	r3, [r3, #8]
 8002678:	011b      	lsls	r3, r3, #4
 800267a:	697a      	ldr	r2, [r7, #20]
 800267c:	4313      	orrs	r3, r2
 800267e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	4a24      	ldr	r2, [pc, #144]	; (8002714 <TIM_OC2_SetConfig+0xf0>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d10d      	bne.n	80026a4 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800268e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	68db      	ldr	r3, [r3, #12]
 8002694:	011b      	lsls	r3, r3, #4
 8002696:	697a      	ldr	r2, [r7, #20]
 8002698:	4313      	orrs	r3, r2
 800269a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80026a2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	4a1b      	ldr	r2, [pc, #108]	; (8002714 <TIM_OC2_SetConfig+0xf0>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d00b      	beq.n	80026c4 <TIM_OC2_SetConfig+0xa0>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	4a1a      	ldr	r2, [pc, #104]	; (8002718 <TIM_OC2_SetConfig+0xf4>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d007      	beq.n	80026c4 <TIM_OC2_SetConfig+0xa0>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	4a19      	ldr	r2, [pc, #100]	; (800271c <TIM_OC2_SetConfig+0xf8>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d003      	beq.n	80026c4 <TIM_OC2_SetConfig+0xa0>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	4a18      	ldr	r2, [pc, #96]	; (8002720 <TIM_OC2_SetConfig+0xfc>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d113      	bne.n	80026ec <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80026c4:	693b      	ldr	r3, [r7, #16]
 80026c6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80026ca:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80026cc:	693b      	ldr	r3, [r7, #16]
 80026ce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80026d2:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	695b      	ldr	r3, [r3, #20]
 80026d8:	009b      	lsls	r3, r3, #2
 80026da:	693a      	ldr	r2, [r7, #16]
 80026dc:	4313      	orrs	r3, r2
 80026de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	699b      	ldr	r3, [r3, #24]
 80026e4:	009b      	lsls	r3, r3, #2
 80026e6:	693a      	ldr	r2, [r7, #16]
 80026e8:	4313      	orrs	r3, r2
 80026ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	693a      	ldr	r2, [r7, #16]
 80026f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	68fa      	ldr	r2, [r7, #12]
 80026f6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	685a      	ldr	r2, [r3, #4]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	697a      	ldr	r2, [r7, #20]
 8002704:	621a      	str	r2, [r3, #32]
}
 8002706:	bf00      	nop
 8002708:	371c      	adds	r7, #28
 800270a:	46bd      	mov	sp, r7
 800270c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002710:	4770      	bx	lr
 8002712:	bf00      	nop
 8002714:	40012c00 	.word	0x40012c00
 8002718:	40014000 	.word	0x40014000
 800271c:	40014400 	.word	0x40014400
 8002720:	40014800 	.word	0x40014800

08002724 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002724:	b480      	push	{r7}
 8002726:	b087      	sub	sp, #28
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
 800272c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6a1b      	ldr	r3, [r3, #32]
 8002732:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6a1b      	ldr	r3, [r3, #32]
 800273e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	69db      	ldr	r3, [r3, #28]
 800274a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002752:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002756:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	f023 0303 	bic.w	r3, r3, #3
 800275e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	68fa      	ldr	r2, [r7, #12]
 8002766:	4313      	orrs	r3, r2
 8002768:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002770:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	689b      	ldr	r3, [r3, #8]
 8002776:	021b      	lsls	r3, r3, #8
 8002778:	697a      	ldr	r2, [r7, #20]
 800277a:	4313      	orrs	r3, r2
 800277c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	4a23      	ldr	r2, [pc, #140]	; (8002810 <TIM_OC3_SetConfig+0xec>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d10d      	bne.n	80027a2 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800278c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	68db      	ldr	r3, [r3, #12]
 8002792:	021b      	lsls	r3, r3, #8
 8002794:	697a      	ldr	r2, [r7, #20]
 8002796:	4313      	orrs	r3, r2
 8002798:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80027a0:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	4a1a      	ldr	r2, [pc, #104]	; (8002810 <TIM_OC3_SetConfig+0xec>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d00b      	beq.n	80027c2 <TIM_OC3_SetConfig+0x9e>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	4a19      	ldr	r2, [pc, #100]	; (8002814 <TIM_OC3_SetConfig+0xf0>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d007      	beq.n	80027c2 <TIM_OC3_SetConfig+0x9e>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	4a18      	ldr	r2, [pc, #96]	; (8002818 <TIM_OC3_SetConfig+0xf4>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d003      	beq.n	80027c2 <TIM_OC3_SetConfig+0x9e>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	4a17      	ldr	r2, [pc, #92]	; (800281c <TIM_OC3_SetConfig+0xf8>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d113      	bne.n	80027ea <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80027c2:	693b      	ldr	r3, [r7, #16]
 80027c4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80027c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80027d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	695b      	ldr	r3, [r3, #20]
 80027d6:	011b      	lsls	r3, r3, #4
 80027d8:	693a      	ldr	r2, [r7, #16]
 80027da:	4313      	orrs	r3, r2
 80027dc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	699b      	ldr	r3, [r3, #24]
 80027e2:	011b      	lsls	r3, r3, #4
 80027e4:	693a      	ldr	r2, [r7, #16]
 80027e6:	4313      	orrs	r3, r2
 80027e8:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	693a      	ldr	r2, [r7, #16]
 80027ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	68fa      	ldr	r2, [r7, #12]
 80027f4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	685a      	ldr	r2, [r3, #4]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	697a      	ldr	r2, [r7, #20]
 8002802:	621a      	str	r2, [r3, #32]
}
 8002804:	bf00      	nop
 8002806:	371c      	adds	r7, #28
 8002808:	46bd      	mov	sp, r7
 800280a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280e:	4770      	bx	lr
 8002810:	40012c00 	.word	0x40012c00
 8002814:	40014000 	.word	0x40014000
 8002818:	40014400 	.word	0x40014400
 800281c:	40014800 	.word	0x40014800

08002820 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002820:	b480      	push	{r7}
 8002822:	b087      	sub	sp, #28
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
 8002828:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6a1b      	ldr	r3, [r3, #32]
 800282e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6a1b      	ldr	r3, [r3, #32]
 800283a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	69db      	ldr	r3, [r3, #28]
 8002846:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800284e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002852:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800285a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	021b      	lsls	r3, r3, #8
 8002862:	68fa      	ldr	r2, [r7, #12]
 8002864:	4313      	orrs	r3, r2
 8002866:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002868:	693b      	ldr	r3, [r7, #16]
 800286a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800286e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	031b      	lsls	r3, r3, #12
 8002876:	693a      	ldr	r2, [r7, #16]
 8002878:	4313      	orrs	r3, r2
 800287a:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	4a16      	ldr	r2, [pc, #88]	; (80028d8 <TIM_OC4_SetConfig+0xb8>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d00b      	beq.n	800289c <TIM_OC4_SetConfig+0x7c>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	4a15      	ldr	r2, [pc, #84]	; (80028dc <TIM_OC4_SetConfig+0xbc>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d007      	beq.n	800289c <TIM_OC4_SetConfig+0x7c>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	4a14      	ldr	r2, [pc, #80]	; (80028e0 <TIM_OC4_SetConfig+0xc0>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d003      	beq.n	800289c <TIM_OC4_SetConfig+0x7c>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	4a13      	ldr	r2, [pc, #76]	; (80028e4 <TIM_OC4_SetConfig+0xc4>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d109      	bne.n	80028b0 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80028a2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	695b      	ldr	r3, [r3, #20]
 80028a8:	019b      	lsls	r3, r3, #6
 80028aa:	697a      	ldr	r2, [r7, #20]
 80028ac:	4313      	orrs	r3, r2
 80028ae:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	697a      	ldr	r2, [r7, #20]
 80028b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	68fa      	ldr	r2, [r7, #12]
 80028ba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	685a      	ldr	r2, [r3, #4]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	693a      	ldr	r2, [r7, #16]
 80028c8:	621a      	str	r2, [r3, #32]
}
 80028ca:	bf00      	nop
 80028cc:	371c      	adds	r7, #28
 80028ce:	46bd      	mov	sp, r7
 80028d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d4:	4770      	bx	lr
 80028d6:	bf00      	nop
 80028d8:	40012c00 	.word	0x40012c00
 80028dc:	40014000 	.word	0x40014000
 80028e0:	40014400 	.word	0x40014400
 80028e4:	40014800 	.word	0x40014800

080028e8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b087      	sub	sp, #28
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
 80028f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6a1b      	ldr	r3, [r3, #32]
 80028f6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6a1b      	ldr	r3, [r3, #32]
 8002902:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800290e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002916:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800291a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	68fa      	ldr	r2, [r7, #12]
 8002922:	4313      	orrs	r3, r2
 8002924:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800292c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	041b      	lsls	r3, r3, #16
 8002934:	693a      	ldr	r2, [r7, #16]
 8002936:	4313      	orrs	r3, r2
 8002938:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	4a15      	ldr	r2, [pc, #84]	; (8002994 <TIM_OC5_SetConfig+0xac>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d00b      	beq.n	800295a <TIM_OC5_SetConfig+0x72>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	4a14      	ldr	r2, [pc, #80]	; (8002998 <TIM_OC5_SetConfig+0xb0>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d007      	beq.n	800295a <TIM_OC5_SetConfig+0x72>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	4a13      	ldr	r2, [pc, #76]	; (800299c <TIM_OC5_SetConfig+0xb4>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d003      	beq.n	800295a <TIM_OC5_SetConfig+0x72>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	4a12      	ldr	r2, [pc, #72]	; (80029a0 <TIM_OC5_SetConfig+0xb8>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d109      	bne.n	800296e <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002960:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	695b      	ldr	r3, [r3, #20]
 8002966:	021b      	lsls	r3, r3, #8
 8002968:	697a      	ldr	r2, [r7, #20]
 800296a:	4313      	orrs	r3, r2
 800296c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	697a      	ldr	r2, [r7, #20]
 8002972:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	68fa      	ldr	r2, [r7, #12]
 8002978:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	685a      	ldr	r2, [r3, #4]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	693a      	ldr	r2, [r7, #16]
 8002986:	621a      	str	r2, [r3, #32]
}
 8002988:	bf00      	nop
 800298a:	371c      	adds	r7, #28
 800298c:	46bd      	mov	sp, r7
 800298e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002992:	4770      	bx	lr
 8002994:	40012c00 	.word	0x40012c00
 8002998:	40014000 	.word	0x40014000
 800299c:	40014400 	.word	0x40014400
 80029a0:	40014800 	.word	0x40014800

080029a4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b087      	sub	sp, #28
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
 80029ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6a1b      	ldr	r3, [r3, #32]
 80029b2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6a1b      	ldr	r3, [r3, #32]
 80029be:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80029d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80029d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	021b      	lsls	r3, r3, #8
 80029de:	68fa      	ldr	r2, [r7, #12]
 80029e0:	4313      	orrs	r3, r2
 80029e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80029e4:	693b      	ldr	r3, [r7, #16]
 80029e6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80029ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	689b      	ldr	r3, [r3, #8]
 80029f0:	051b      	lsls	r3, r3, #20
 80029f2:	693a      	ldr	r2, [r7, #16]
 80029f4:	4313      	orrs	r3, r2
 80029f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	4a16      	ldr	r2, [pc, #88]	; (8002a54 <TIM_OC6_SetConfig+0xb0>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d00b      	beq.n	8002a18 <TIM_OC6_SetConfig+0x74>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	4a15      	ldr	r2, [pc, #84]	; (8002a58 <TIM_OC6_SetConfig+0xb4>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d007      	beq.n	8002a18 <TIM_OC6_SetConfig+0x74>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	4a14      	ldr	r2, [pc, #80]	; (8002a5c <TIM_OC6_SetConfig+0xb8>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d003      	beq.n	8002a18 <TIM_OC6_SetConfig+0x74>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	4a13      	ldr	r2, [pc, #76]	; (8002a60 <TIM_OC6_SetConfig+0xbc>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d109      	bne.n	8002a2c <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a1e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	695b      	ldr	r3, [r3, #20]
 8002a24:	029b      	lsls	r3, r3, #10
 8002a26:	697a      	ldr	r2, [r7, #20]
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	697a      	ldr	r2, [r7, #20]
 8002a30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	68fa      	ldr	r2, [r7, #12]
 8002a36:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	685a      	ldr	r2, [r3, #4]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	693a      	ldr	r2, [r7, #16]
 8002a44:	621a      	str	r2, [r3, #32]
}
 8002a46:	bf00      	nop
 8002a48:	371c      	adds	r7, #28
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a50:	4770      	bx	lr
 8002a52:	bf00      	nop
 8002a54:	40012c00 	.word	0x40012c00
 8002a58:	40014000 	.word	0x40014000
 8002a5c:	40014400 	.word	0x40014400
 8002a60:	40014800 	.word	0x40014800

08002a64 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002a64:	b480      	push	{r7}
 8002a66:	b085      	sub	sp, #20
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
 8002a6c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a74:	2b01      	cmp	r3, #1
 8002a76:	d101      	bne.n	8002a7c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002a78:	2302      	movs	r3, #2
 8002a7a:	e054      	b.n	8002b26 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2201      	movs	r2, #1
 8002a80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2202      	movs	r2, #2
 8002a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a24      	ldr	r2, [pc, #144]	; (8002b34 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d108      	bne.n	8002ab8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002aac:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	68fa      	ldr	r2, [r7, #12]
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002abe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	68fa      	ldr	r2, [r7, #12]
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	68fa      	ldr	r2, [r7, #12]
 8002ad0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a17      	ldr	r2, [pc, #92]	; (8002b34 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d00e      	beq.n	8002afa <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ae4:	d009      	beq.n	8002afa <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a13      	ldr	r2, [pc, #76]	; (8002b38 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d004      	beq.n	8002afa <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a11      	ldr	r2, [pc, #68]	; (8002b3c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d10c      	bne.n	8002b14 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b00:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	68ba      	ldr	r2, [r7, #8]
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	68ba      	ldr	r2, [r7, #8]
 8002b12:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2201      	movs	r2, #1
 8002b18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002b24:	2300      	movs	r3, #0
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	3714      	adds	r7, #20
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b30:	4770      	bx	lr
 8002b32:	bf00      	nop
 8002b34:	40012c00 	.word	0x40012c00
 8002b38:	40000400 	.word	0x40000400
 8002b3c:	40014000 	.word	0x40014000

08002b40 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b085      	sub	sp, #20
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
 8002b48:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b54:	2b01      	cmp	r3, #1
 8002b56:	d101      	bne.n	8002b5c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002b58:	2302      	movs	r3, #2
 8002b5a:	e060      	b.n	8002c1e <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2201      	movs	r2, #1
 8002b60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	68db      	ldr	r3, [r3, #12]
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	689b      	ldr	r3, [r3, #8]
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	691b      	ldr	r3, [r3, #16]
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	695b      	ldr	r3, [r3, #20]
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	699b      	ldr	r3, [r3, #24]
 8002bd0:	041b      	lsls	r3, r3, #16
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a14      	ldr	r2, [pc, #80]	; (8002c2c <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d115      	bne.n	8002c0c <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bea:	051b      	lsls	r3, r3, #20
 8002bec:	4313      	orrs	r3, r2
 8002bee:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	69db      	ldr	r3, [r3, #28]
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	6a1b      	ldr	r3, [r3, #32]
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	68fa      	ldr	r2, [r7, #12]
 8002c12:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2200      	movs	r2, #0
 8002c18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002c1c:	2300      	movs	r3, #0
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	3714      	adds	r7, #20
 8002c22:	46bd      	mov	sp, r7
 8002c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c28:	4770      	bx	lr
 8002c2a:	bf00      	nop
 8002c2c:	40012c00 	.word	0x40012c00

08002c30 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b082      	sub	sp, #8
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d101      	bne.n	8002c42 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e040      	b.n	8002cc4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d106      	bne.n	8002c58 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c52:	6878      	ldr	r0, [r7, #4]
 8002c54:	f7fd fcec 	bl	8000630 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2224      	movs	r2, #36	; 0x24
 8002c5c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	681a      	ldr	r2, [r3, #0]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f022 0201 	bic.w	r2, r2, #1
 8002c6c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002c6e:	6878      	ldr	r0, [r7, #4]
 8002c70:	f000 f82c 	bl	8002ccc <UART_SetConfig>
 8002c74:	4603      	mov	r3, r0
 8002c76:	2b01      	cmp	r3, #1
 8002c78:	d101      	bne.n	8002c7e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e022      	b.n	8002cc4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d002      	beq.n	8002c8c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002c86:	6878      	ldr	r0, [r7, #4]
 8002c88:	f000 f958 	bl	8002f3c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	685a      	ldr	r2, [r3, #4]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002c9a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	689a      	ldr	r2, [r3, #8]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002caa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	681a      	ldr	r2, [r3, #0]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f042 0201 	orr.w	r2, r2, #1
 8002cba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002cbc:	6878      	ldr	r0, [r7, #4]
 8002cbe:	f000 f9df 	bl	8003080 <UART_CheckIdleState>
 8002cc2:	4603      	mov	r3, r0
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	3708      	adds	r7, #8
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}

08002ccc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b088      	sub	sp, #32
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	689a      	ldr	r2, [r3, #8]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	691b      	ldr	r3, [r3, #16]
 8002ce0:	431a      	orrs	r2, r3
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	695b      	ldr	r3, [r3, #20]
 8002ce6:	431a      	orrs	r2, r3
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	69db      	ldr	r3, [r3, #28]
 8002cec:	4313      	orrs	r3, r2
 8002cee:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	681a      	ldr	r2, [r3, #0]
 8002cf6:	4b8b      	ldr	r3, [pc, #556]	; (8002f24 <UART_SetConfig+0x258>)
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	687a      	ldr	r2, [r7, #4]
 8002cfc:	6812      	ldr	r2, [r2, #0]
 8002cfe:	6979      	ldr	r1, [r7, #20]
 8002d00:	430b      	orrs	r3, r1
 8002d02:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	68da      	ldr	r2, [r3, #12]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	430a      	orrs	r2, r1
 8002d18:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	699b      	ldr	r3, [r3, #24]
 8002d1e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6a1b      	ldr	r3, [r3, #32]
 8002d24:	697a      	ldr	r2, [r7, #20]
 8002d26:	4313      	orrs	r3, r2
 8002d28:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	689b      	ldr	r3, [r3, #8]
 8002d30:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	697a      	ldr	r2, [r7, #20]
 8002d3a:	430a      	orrs	r2, r1
 8002d3c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a79      	ldr	r2, [pc, #484]	; (8002f28 <UART_SetConfig+0x25c>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d121      	bne.n	8002d8c <UART_SetConfig+0xc0>
 8002d48:	4b78      	ldr	r3, [pc, #480]	; (8002f2c <UART_SetConfig+0x260>)
 8002d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d4c:	f003 0303 	and.w	r3, r3, #3
 8002d50:	2b03      	cmp	r3, #3
 8002d52:	d817      	bhi.n	8002d84 <UART_SetConfig+0xb8>
 8002d54:	a201      	add	r2, pc, #4	; (adr r2, 8002d5c <UART_SetConfig+0x90>)
 8002d56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d5a:	bf00      	nop
 8002d5c:	08002d6d 	.word	0x08002d6d
 8002d60:	08002d79 	.word	0x08002d79
 8002d64:	08002d7f 	.word	0x08002d7f
 8002d68:	08002d73 	.word	0x08002d73
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	77fb      	strb	r3, [r7, #31]
 8002d70:	e01e      	b.n	8002db0 <UART_SetConfig+0xe4>
 8002d72:	2302      	movs	r3, #2
 8002d74:	77fb      	strb	r3, [r7, #31]
 8002d76:	e01b      	b.n	8002db0 <UART_SetConfig+0xe4>
 8002d78:	2304      	movs	r3, #4
 8002d7a:	77fb      	strb	r3, [r7, #31]
 8002d7c:	e018      	b.n	8002db0 <UART_SetConfig+0xe4>
 8002d7e:	2308      	movs	r3, #8
 8002d80:	77fb      	strb	r3, [r7, #31]
 8002d82:	e015      	b.n	8002db0 <UART_SetConfig+0xe4>
 8002d84:	2310      	movs	r3, #16
 8002d86:	77fb      	strb	r3, [r7, #31]
 8002d88:	bf00      	nop
 8002d8a:	e011      	b.n	8002db0 <UART_SetConfig+0xe4>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a67      	ldr	r2, [pc, #412]	; (8002f30 <UART_SetConfig+0x264>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d102      	bne.n	8002d9c <UART_SetConfig+0xd0>
 8002d96:	2300      	movs	r3, #0
 8002d98:	77fb      	strb	r3, [r7, #31]
 8002d9a:	e009      	b.n	8002db0 <UART_SetConfig+0xe4>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a64      	ldr	r2, [pc, #400]	; (8002f34 <UART_SetConfig+0x268>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d102      	bne.n	8002dac <UART_SetConfig+0xe0>
 8002da6:	2300      	movs	r3, #0
 8002da8:	77fb      	strb	r3, [r7, #31]
 8002daa:	e001      	b.n	8002db0 <UART_SetConfig+0xe4>
 8002dac:	2310      	movs	r3, #16
 8002dae:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	69db      	ldr	r3, [r3, #28]
 8002db4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002db8:	d15c      	bne.n	8002e74 <UART_SetConfig+0x1a8>
  {
    switch (clocksource)
 8002dba:	7ffb      	ldrb	r3, [r7, #31]
 8002dbc:	2b08      	cmp	r3, #8
 8002dbe:	d828      	bhi.n	8002e12 <UART_SetConfig+0x146>
 8002dc0:	a201      	add	r2, pc, #4	; (adr r2, 8002dc8 <UART_SetConfig+0xfc>)
 8002dc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dc6:	bf00      	nop
 8002dc8:	08002ded 	.word	0x08002ded
 8002dcc:	08002df5 	.word	0x08002df5
 8002dd0:	08002dfd 	.word	0x08002dfd
 8002dd4:	08002e13 	.word	0x08002e13
 8002dd8:	08002e03 	.word	0x08002e03
 8002ddc:	08002e13 	.word	0x08002e13
 8002de0:	08002e13 	.word	0x08002e13
 8002de4:	08002e13 	.word	0x08002e13
 8002de8:	08002e0b 	.word	0x08002e0b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002dec:	f7ff f846 	bl	8001e7c <HAL_RCC_GetPCLK1Freq>
 8002df0:	61b8      	str	r0, [r7, #24]
        break;
 8002df2:	e013      	b.n	8002e1c <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002df4:	f7ff f864 	bl	8001ec0 <HAL_RCC_GetPCLK2Freq>
 8002df8:	61b8      	str	r0, [r7, #24]
        break;
 8002dfa:	e00f      	b.n	8002e1c <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002dfc:	4b4e      	ldr	r3, [pc, #312]	; (8002f38 <UART_SetConfig+0x26c>)
 8002dfe:	61bb      	str	r3, [r7, #24]
        break;
 8002e00:	e00c      	b.n	8002e1c <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002e02:	f7fe ffc5 	bl	8001d90 <HAL_RCC_GetSysClockFreq>
 8002e06:	61b8      	str	r0, [r7, #24]
        break;
 8002e08:	e008      	b.n	8002e1c <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002e0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e0e:	61bb      	str	r3, [r7, #24]
        break;
 8002e10:	e004      	b.n	8002e1c <UART_SetConfig+0x150>
      default:
        pclk = 0U;
 8002e12:	2300      	movs	r3, #0
 8002e14:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	77bb      	strb	r3, [r7, #30]
        break;
 8002e1a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002e1c:	69bb      	ldr	r3, [r7, #24]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d074      	beq.n	8002f0c <UART_SetConfig+0x240>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002e22:	69bb      	ldr	r3, [r7, #24]
 8002e24:	005a      	lsls	r2, r3, #1
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	085b      	lsrs	r3, r3, #1
 8002e2c:	441a      	add	r2, r3
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e36:	b29b      	uxth	r3, r3
 8002e38:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	2b0f      	cmp	r3, #15
 8002e3e:	d916      	bls.n	8002e6e <UART_SetConfig+0x1a2>
 8002e40:	693b      	ldr	r3, [r7, #16]
 8002e42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e46:	d212      	bcs.n	8002e6e <UART_SetConfig+0x1a2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002e48:	693b      	ldr	r3, [r7, #16]
 8002e4a:	b29b      	uxth	r3, r3
 8002e4c:	f023 030f 	bic.w	r3, r3, #15
 8002e50:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	085b      	lsrs	r3, r3, #1
 8002e56:	b29b      	uxth	r3, r3
 8002e58:	f003 0307 	and.w	r3, r3, #7
 8002e5c:	b29a      	uxth	r2, r3
 8002e5e:	89fb      	ldrh	r3, [r7, #14]
 8002e60:	4313      	orrs	r3, r2
 8002e62:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	89fa      	ldrh	r2, [r7, #14]
 8002e6a:	60da      	str	r2, [r3, #12]
 8002e6c:	e04e      	b.n	8002f0c <UART_SetConfig+0x240>
      }
      else
      {
        ret = HAL_ERROR;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	77bb      	strb	r3, [r7, #30]
 8002e72:	e04b      	b.n	8002f0c <UART_SetConfig+0x240>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002e74:	7ffb      	ldrb	r3, [r7, #31]
 8002e76:	2b08      	cmp	r3, #8
 8002e78:	d827      	bhi.n	8002eca <UART_SetConfig+0x1fe>
 8002e7a:	a201      	add	r2, pc, #4	; (adr r2, 8002e80 <UART_SetConfig+0x1b4>)
 8002e7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e80:	08002ea5 	.word	0x08002ea5
 8002e84:	08002ead 	.word	0x08002ead
 8002e88:	08002eb5 	.word	0x08002eb5
 8002e8c:	08002ecb 	.word	0x08002ecb
 8002e90:	08002ebb 	.word	0x08002ebb
 8002e94:	08002ecb 	.word	0x08002ecb
 8002e98:	08002ecb 	.word	0x08002ecb
 8002e9c:	08002ecb 	.word	0x08002ecb
 8002ea0:	08002ec3 	.word	0x08002ec3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002ea4:	f7fe ffea 	bl	8001e7c <HAL_RCC_GetPCLK1Freq>
 8002ea8:	61b8      	str	r0, [r7, #24]
        break;
 8002eaa:	e013      	b.n	8002ed4 <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002eac:	f7ff f808 	bl	8001ec0 <HAL_RCC_GetPCLK2Freq>
 8002eb0:	61b8      	str	r0, [r7, #24]
        break;
 8002eb2:	e00f      	b.n	8002ed4 <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002eb4:	4b20      	ldr	r3, [pc, #128]	; (8002f38 <UART_SetConfig+0x26c>)
 8002eb6:	61bb      	str	r3, [r7, #24]
        break;
 8002eb8:	e00c      	b.n	8002ed4 <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002eba:	f7fe ff69 	bl	8001d90 <HAL_RCC_GetSysClockFreq>
 8002ebe:	61b8      	str	r0, [r7, #24]
        break;
 8002ec0:	e008      	b.n	8002ed4 <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002ec2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ec6:	61bb      	str	r3, [r7, #24]
        break;
 8002ec8:	e004      	b.n	8002ed4 <UART_SetConfig+0x208>
      default:
        pclk = 0U;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	77bb      	strb	r3, [r7, #30]
        break;
 8002ed2:	bf00      	nop
    }

    if (pclk != 0U)
 8002ed4:	69bb      	ldr	r3, [r7, #24]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d018      	beq.n	8002f0c <UART_SetConfig+0x240>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	085a      	lsrs	r2, r3, #1
 8002ee0:	69bb      	ldr	r3, [r7, #24]
 8002ee2:	441a      	add	r2, r3
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002eec:	b29b      	uxth	r3, r3
 8002eee:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002ef0:	693b      	ldr	r3, [r7, #16]
 8002ef2:	2b0f      	cmp	r3, #15
 8002ef4:	d908      	bls.n	8002f08 <UART_SetConfig+0x23c>
 8002ef6:	693b      	ldr	r3, [r7, #16]
 8002ef8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002efc:	d204      	bcs.n	8002f08 <UART_SetConfig+0x23c>
      {
        huart->Instance->BRR = usartdiv;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	693a      	ldr	r2, [r7, #16]
 8002f04:	60da      	str	r2, [r3, #12]
 8002f06:	e001      	b.n	8002f0c <UART_SetConfig+0x240>
      }
      else
      {
        ret = HAL_ERROR;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2200      	movs	r2, #0
 8002f16:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002f18:	7fbb      	ldrb	r3, [r7, #30]
}
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	3720      	adds	r7, #32
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}
 8002f22:	bf00      	nop
 8002f24:	efff69f3 	.word	0xefff69f3
 8002f28:	40013800 	.word	0x40013800
 8002f2c:	40021000 	.word	0x40021000
 8002f30:	40004400 	.word	0x40004400
 8002f34:	40004800 	.word	0x40004800
 8002f38:	007a1200 	.word	0x007a1200

08002f3c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b083      	sub	sp, #12
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f48:	f003 0301 	and.w	r3, r3, #1
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d00a      	beq.n	8002f66 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	430a      	orrs	r2, r1
 8002f64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f6a:	f003 0302 	and.w	r3, r3, #2
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d00a      	beq.n	8002f88 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	430a      	orrs	r2, r1
 8002f86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f8c:	f003 0304 	and.w	r3, r3, #4
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d00a      	beq.n	8002faa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	430a      	orrs	r2, r1
 8002fa8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fae:	f003 0308 	and.w	r3, r3, #8
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d00a      	beq.n	8002fcc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	430a      	orrs	r2, r1
 8002fca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd0:	f003 0310 	and.w	r3, r3, #16
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d00a      	beq.n	8002fee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	689b      	ldr	r3, [r3, #8]
 8002fde:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	430a      	orrs	r2, r1
 8002fec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff2:	f003 0320 	and.w	r3, r3, #32
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d00a      	beq.n	8003010 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	689b      	ldr	r3, [r3, #8]
 8003000:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	430a      	orrs	r2, r1
 800300e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003014:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003018:	2b00      	cmp	r3, #0
 800301a:	d01a      	beq.n	8003052 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	430a      	orrs	r2, r1
 8003030:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003036:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800303a:	d10a      	bne.n	8003052 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	430a      	orrs	r2, r1
 8003050:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003056:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800305a:	2b00      	cmp	r3, #0
 800305c:	d00a      	beq.n	8003074 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	430a      	orrs	r2, r1
 8003072:	605a      	str	r2, [r3, #4]
  }
}
 8003074:	bf00      	nop
 8003076:	370c      	adds	r7, #12
 8003078:	46bd      	mov	sp, r7
 800307a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307e:	4770      	bx	lr

08003080 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b086      	sub	sp, #24
 8003084:	af02      	add	r7, sp, #8
 8003086:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2200      	movs	r2, #0
 800308c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003090:	f7fd fb96 	bl	80007c0 <HAL_GetTick>
 8003094:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f003 0308 	and.w	r3, r3, #8
 80030a0:	2b08      	cmp	r3, #8
 80030a2:	d10e      	bne.n	80030c2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80030a4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80030a8:	9300      	str	r3, [sp, #0]
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	2200      	movs	r2, #0
 80030ae:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80030b2:	6878      	ldr	r0, [r7, #4]
 80030b4:	f000 f82d 	bl	8003112 <UART_WaitOnFlagUntilTimeout>
 80030b8:	4603      	mov	r3, r0
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d001      	beq.n	80030c2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80030be:	2303      	movs	r3, #3
 80030c0:	e023      	b.n	800310a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f003 0304 	and.w	r3, r3, #4
 80030cc:	2b04      	cmp	r3, #4
 80030ce:	d10e      	bne.n	80030ee <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80030d0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80030d4:	9300      	str	r3, [sp, #0]
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	2200      	movs	r2, #0
 80030da:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80030de:	6878      	ldr	r0, [r7, #4]
 80030e0:	f000 f817 	bl	8003112 <UART_WaitOnFlagUntilTimeout>
 80030e4:	4603      	mov	r3, r0
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d001      	beq.n	80030ee <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80030ea:	2303      	movs	r3, #3
 80030ec:	e00d      	b.n	800310a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2220      	movs	r2, #32
 80030f2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2220      	movs	r2, #32
 80030f8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2200      	movs	r2, #0
 80030fe:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2200      	movs	r2, #0
 8003104:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003108:	2300      	movs	r3, #0
}
 800310a:	4618      	mov	r0, r3
 800310c:	3710      	adds	r7, #16
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}

08003112 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003112:	b580      	push	{r7, lr}
 8003114:	b09c      	sub	sp, #112	; 0x70
 8003116:	af00      	add	r7, sp, #0
 8003118:	60f8      	str	r0, [r7, #12]
 800311a:	60b9      	str	r1, [r7, #8]
 800311c:	603b      	str	r3, [r7, #0]
 800311e:	4613      	mov	r3, r2
 8003120:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003122:	e0a5      	b.n	8003270 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003124:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003126:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800312a:	f000 80a1 	beq.w	8003270 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800312e:	f7fd fb47 	bl	80007c0 <HAL_GetTick>
 8003132:	4602      	mov	r2, r0
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	1ad3      	subs	r3, r2, r3
 8003138:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800313a:	429a      	cmp	r2, r3
 800313c:	d302      	bcc.n	8003144 <UART_WaitOnFlagUntilTimeout+0x32>
 800313e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003140:	2b00      	cmp	r3, #0
 8003142:	d13e      	bne.n	80031c2 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800314a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800314c:	e853 3f00 	ldrex	r3, [r3]
 8003150:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003152:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003154:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003158:	667b      	str	r3, [r7, #100]	; 0x64
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	461a      	mov	r2, r3
 8003160:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003162:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003164:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003166:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003168:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800316a:	e841 2300 	strex	r3, r2, [r1]
 800316e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003170:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003172:	2b00      	cmp	r3, #0
 8003174:	d1e6      	bne.n	8003144 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	3308      	adds	r3, #8
 800317c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800317e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003180:	e853 3f00 	ldrex	r3, [r3]
 8003184:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003188:	f023 0301 	bic.w	r3, r3, #1
 800318c:	663b      	str	r3, [r7, #96]	; 0x60
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	3308      	adds	r3, #8
 8003194:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003196:	64ba      	str	r2, [r7, #72]	; 0x48
 8003198:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800319a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800319c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800319e:	e841 2300 	strex	r3, r2, [r1]
 80031a2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80031a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d1e5      	bne.n	8003176 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	2220      	movs	r2, #32
 80031ae:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	2220      	movs	r2, #32
 80031b4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	2200      	movs	r2, #0
 80031ba:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80031be:	2303      	movs	r3, #3
 80031c0:	e067      	b.n	8003292 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f003 0304 	and.w	r3, r3, #4
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d04f      	beq.n	8003270 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	69db      	ldr	r3, [r3, #28]
 80031d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80031de:	d147      	bne.n	8003270 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80031e8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031f2:	e853 3f00 	ldrex	r3, [r3]
 80031f6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80031f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031fa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80031fe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	461a      	mov	r2, r3
 8003206:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003208:	637b      	str	r3, [r7, #52]	; 0x34
 800320a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800320c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800320e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003210:	e841 2300 	strex	r3, r2, [r1]
 8003214:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003218:	2b00      	cmp	r3, #0
 800321a:	d1e6      	bne.n	80031ea <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	3308      	adds	r3, #8
 8003222:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	e853 3f00 	ldrex	r3, [r3]
 800322a:	613b      	str	r3, [r7, #16]
   return(result);
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	f023 0301 	bic.w	r3, r3, #1
 8003232:	66bb      	str	r3, [r7, #104]	; 0x68
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	3308      	adds	r3, #8
 800323a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800323c:	623a      	str	r2, [r7, #32]
 800323e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003240:	69f9      	ldr	r1, [r7, #28]
 8003242:	6a3a      	ldr	r2, [r7, #32]
 8003244:	e841 2300 	strex	r3, r2, [r1]
 8003248:	61bb      	str	r3, [r7, #24]
   return(result);
 800324a:	69bb      	ldr	r3, [r7, #24]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d1e5      	bne.n	800321c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	2220      	movs	r2, #32
 8003254:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	2220      	movs	r2, #32
 800325a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	2220      	movs	r2, #32
 8003260:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	2200      	movs	r2, #0
 8003268:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800326c:	2303      	movs	r3, #3
 800326e:	e010      	b.n	8003292 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	69da      	ldr	r2, [r3, #28]
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	4013      	ands	r3, r2
 800327a:	68ba      	ldr	r2, [r7, #8]
 800327c:	429a      	cmp	r2, r3
 800327e:	bf0c      	ite	eq
 8003280:	2301      	moveq	r3, #1
 8003282:	2300      	movne	r3, #0
 8003284:	b2db      	uxtb	r3, r3
 8003286:	461a      	mov	r2, r3
 8003288:	79fb      	ldrb	r3, [r7, #7]
 800328a:	429a      	cmp	r2, r3
 800328c:	f43f af4a 	beq.w	8003124 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003290:	2300      	movs	r3, #0
}
 8003292:	4618      	mov	r0, r3
 8003294:	3770      	adds	r7, #112	; 0x70
 8003296:	46bd      	mov	sp, r7
 8003298:	bd80      	pop	{r7, pc}
	...

0800329c <__libc_init_array>:
 800329c:	b570      	push	{r4, r5, r6, lr}
 800329e:	4e0d      	ldr	r6, [pc, #52]	; (80032d4 <__libc_init_array+0x38>)
 80032a0:	4c0d      	ldr	r4, [pc, #52]	; (80032d8 <__libc_init_array+0x3c>)
 80032a2:	1ba4      	subs	r4, r4, r6
 80032a4:	10a4      	asrs	r4, r4, #2
 80032a6:	2500      	movs	r5, #0
 80032a8:	42a5      	cmp	r5, r4
 80032aa:	d109      	bne.n	80032c0 <__libc_init_array+0x24>
 80032ac:	4e0b      	ldr	r6, [pc, #44]	; (80032dc <__libc_init_array+0x40>)
 80032ae:	4c0c      	ldr	r4, [pc, #48]	; (80032e0 <__libc_init_array+0x44>)
 80032b0:	f000 f820 	bl	80032f4 <_init>
 80032b4:	1ba4      	subs	r4, r4, r6
 80032b6:	10a4      	asrs	r4, r4, #2
 80032b8:	2500      	movs	r5, #0
 80032ba:	42a5      	cmp	r5, r4
 80032bc:	d105      	bne.n	80032ca <__libc_init_array+0x2e>
 80032be:	bd70      	pop	{r4, r5, r6, pc}
 80032c0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80032c4:	4798      	blx	r3
 80032c6:	3501      	adds	r5, #1
 80032c8:	e7ee      	b.n	80032a8 <__libc_init_array+0xc>
 80032ca:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80032ce:	4798      	blx	r3
 80032d0:	3501      	adds	r5, #1
 80032d2:	e7f2      	b.n	80032ba <__libc_init_array+0x1e>
 80032d4:	08003344 	.word	0x08003344
 80032d8:	08003344 	.word	0x08003344
 80032dc:	08003344 	.word	0x08003344
 80032e0:	08003348 	.word	0x08003348

080032e4 <memset>:
 80032e4:	4402      	add	r2, r0
 80032e6:	4603      	mov	r3, r0
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d100      	bne.n	80032ee <memset+0xa>
 80032ec:	4770      	bx	lr
 80032ee:	f803 1b01 	strb.w	r1, [r3], #1
 80032f2:	e7f9      	b.n	80032e8 <memset+0x4>

080032f4 <_init>:
 80032f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032f6:	bf00      	nop
 80032f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032fa:	bc08      	pop	{r3}
 80032fc:	469e      	mov	lr, r3
 80032fe:	4770      	bx	lr

08003300 <_fini>:
 8003300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003302:	bf00      	nop
 8003304:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003306:	bc08      	pop	{r3}
 8003308:	469e      	mov	lr, r3
 800330a:	4770      	bx	lr
